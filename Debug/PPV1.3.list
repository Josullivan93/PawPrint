
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08016898  08016898  00026898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017068  08017068  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08017068  08017068  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017068  08017068  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017068  08017068  00027068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801706c  0801706c  0002706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08017070  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ebec  200002d4  08017344  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000eec0  08017344  0003eec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212b0  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005781  00000000  00000000  000515f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00056d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  000588f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f065  00000000  00000000  00059db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026f21  00000000  00000000  00088e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbfd0  00000000  00000000  000afd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008528  00000000  00000000  001abd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b4230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016880 	.word	0x08016880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	08016880 	.word	0x08016880

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f003 fdc7 	bl	80048ac <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f003 fc99 	bl	8004684 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f003 fd93 	bl	80048ac <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f003 fd75 	bl	80048ac <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f003 fc47 	bl	8004684 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]

	// Over Temp gets priority
	if (GPIO_Pin == TEMP_INT_Pin){
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d103      	bne.n	8000e18 <HAL_GPIO_EXTI_Callback+0x18>

		OVERTEMP = 1;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
	else if (GPIO_Pin == IMU_INT_Pin){

		LSM6DSO_FIFO_RDY = 1;

	}
}
 8000e16:	e005      	b.n	8000e24 <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == IMU_INT_Pin){
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d102      	bne.n	8000e24 <HAL_GPIO_EXTI_Callback+0x24>
		LSM6DSO_FIFO_RDY = 1;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000435 	.word	0x20000435
 8000e34:	20000434 	.word	0x20000434

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f002 fdc8 	bl	80039d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f87b 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f9a9 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e4a:	f000 f989 	bl	8001160 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e4e:	f000 f8c7 	bl	8000fe0 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e52:	f000 f961 	bl	8001118 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e56:	f010 fadf 	bl	8011418 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e5a:	f000 f901 	bl	8001060 <MX_RTC_Init>
  MX_FATFS_Init();
 8000e5e:	f00b fa3f 	bl	800c2e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  int attempts = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	4927      	ldr	r1, [pc, #156]	; (8000f08 <main+0xd0>)
 8000e6a:	4828      	ldr	r0, [pc, #160]	; (8000f0c <main+0xd4>)
 8000e6c:	f00f f9b8 	bl	80101e0 <f_mount>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <main+0xd8>)
 8000e76:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e78:	e008      	b.n	8000e8c <main+0x54>
	  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4922      	ldr	r1, [pc, #136]	; (8000f08 <main+0xd0>)
 8000e7e:	4823      	ldr	r0, [pc, #140]	; (8000f0c <main+0xd4>)
 8000e80:	f00f f9ae 	bl	80101e0 <f_mount>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <main+0xd8>)
 8000e8a:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <main+0xd8>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <main+0x62>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	ddef      	ble.n	8000e7a <main+0x42>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
  if ( volMakeStatus != FR_OK){
	  Error_Handler();
  }*/
  HAL_Delay(500);
 8000e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9e:	f002 fe0d 	bl	8003abc <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000ea2:	220a      	movs	r2, #10
 8000ea4:	491b      	ldr	r1, [pc, #108]	; (8000f14 <main+0xdc>)
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <main+0xe0>)
 8000ea8:	f00f f9e0 	bl	801026c <f_open>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <main+0xe4>)
 8000eb2:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <main+0xe4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <main+0x88>
	  Error_Handler();
 8000ebc:	f000 f9e8 	bl	8001290 <Error_Handler>
  }

  f_printf(&SDFile,"TimeStamp,Tag,X,Y,Z");
 8000ec0:	4917      	ldr	r1, [pc, #92]	; (8000f20 <main+0xe8>)
 8000ec2:	4815      	ldr	r0, [pc, #84]	; (8000f18 <main+0xe0>)
 8000ec4:	f010 f82e 	bl	8010f24 <f_printf>

  f_close( &SDFile );
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <main+0xe0>)
 8000eca:	f00f fd80 	bl	80109ce <f_close>
  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */
  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000ece:	4815      	ldr	r0, [pc, #84]	; (8000f24 <main+0xec>)
 8000ed0:	f000 f9e3 	bl	800129a <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <main+0xf0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <main+0xf4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <main+0xae>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000ee2:	f005 fb67 	bl	80065b4 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

//	  if (LSM6DSO_FIFO_RDY == 1 ){
//		  LSM6DSO_FIFO_RDY = 0;
		  pawprint_readFIFO(&hi2c3, outBUF, &bufferLength, &writeIndex);
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <main+0xf8>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <main+0xfc>)
 8000eea:	4913      	ldr	r1, [pc, #76]	; (8000f38 <main+0x100>)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <main+0xec>)
 8000eee:	f000 fbed 	bl	80016cc <pawprint_readFIFO>
//	  }

		  if ( bufferLength >= (5120) ){
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <main+0xfc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000efa:	dbee      	blt.n	8000eda <main+0xa2>
			  pawprint_WriteSD(&SDFile , outBUF, &bufferLength);
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <main+0xfc>)
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <main+0x100>)
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <main+0xe0>)
 8000f02:	f000 fe5d 	bl	8001bc0 <pawprint_WriteSD>
	  if ( OVERTEMP == 1){
 8000f06:	e7e8      	b.n	8000eda <main+0xa2>
 8000f08:	2000ccc8 	.word	0x2000ccc8
 8000f0c:	2000cccc 	.word	0x2000cccc
 8000f10:	2000cc40 	.word	0x2000cc40
 8000f14:	08016898 	.word	0x08016898
 8000f18:	2000cefc 	.word	0x2000cefc
 8000f1c:	2000cc41 	.word	0x2000cc41
 8000f20:	080168a0 	.word	0x080168a0
 8000f24:	200002f0 	.word	0x200002f0
 8000f28:	20000434 	.word	0x20000434
 8000f2c:	20000435 	.word	0x20000435
 8000f30:	2000043c 	.word	0x2000043c
 8000f34:	20000438 	.word	0x20000438
 8000f38:	20000440 	.word	0x20000440

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b096      	sub	sp, #88	; 0x58
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2244      	movs	r2, #68	; 0x44
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f012 f913 	bl	8013176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f62:	f005 fac1 	bl	80064e8 <HAL_PWREx_ControlVoltageScaling>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f6c:	f000 f990 	bl	8001290 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f70:	2309      	movs	r3, #9
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	2303      	movs	r3, #3
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f8e:	2307      	movs	r3, #7
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 fb22 	bl	80065e8 <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000faa:	f000 f971 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 feea 	bl	8006da0 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fd2:	f000 f95d 	bl	8001290 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3758      	adds	r7, #88	; 0x58
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_I2C3_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_I2C3_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_I2C3_Init+0x74>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <MX_I2C3_Init+0x7c>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_I2C3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_I2C3_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_I2C3_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_I2C3_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C3_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_I2C3_Init+0x74>)
 800101c:	f003 fa96 	bl	800454c <HAL_I2C_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001026:	f000 f933 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_I2C3_Init+0x74>)
 800102e:	f004 f80f 	bl	8005050 <HAL_I2CEx_ConfigAnalogFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 f92a 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_I2C3_Init+0x74>)
 8001040:	f004 f851 	bl	80050e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 f921 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002f0 	.word	0x200002f0
 8001058:	40005c00 	.word	0x40005c00
 800105c:	20303e5d 	.word	0x20303e5d

08001060 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_RTC_Init+0xb0>)
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <MX_RTC_Init+0xb4>)
 800107c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_RTC_Init+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_RTC_Init+0xb0>)
 8001086:	227f      	movs	r2, #127	; 0x7f
 8001088:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_RTC_Init+0xb0>)
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_RTC_Init+0xb0>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_RTC_Init+0xb0>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_RTC_Init+0xb0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_RTC_Init+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <MX_RTC_Init+0xb0>)
 80010aa:	f007 fbb7 	bl	800881c <HAL_RTC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80010b4:	f000 f8ec 	bl	8001290 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <MX_RTC_Init+0xb0>)
 80010d4:	f007 fc2a 	bl	800892c <HAL_RTC_SetTime>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80010de:	f000 f8d7 	bl	8001290 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010e2:	2301      	movs	r3, #1
 80010e4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010e6:	2301      	movs	r3, #1
 80010e8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_RTC_Init+0xb0>)
 80010fa:	f007 fcb4 	bl	8008a66 <HAL_RTC_SetDate>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001104:	f000 f8c4 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000344 	.word	0x20000344
 8001114:	40002800 	.word	0x40002800

08001118 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <MX_SDMMC1_SD_Init+0x44>)
 8001120:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 1;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001142:	2201      	movs	r2, #1
 8001144:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDMMC1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000368 	.word	0x20000368
 800115c:	40012800 	.word	0x40012800

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_DMA_Init+0x38>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <MX_DMA_Init+0x38>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6493      	str	r3, [r2, #72]	; 0x48
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_DMA_Init+0x38>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	203b      	movs	r0, #59	; 0x3b
 8001184:	f002 fd99 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001188:	203b      	movs	r0, #59	; 0x3b
 800118a:	f002 fdb2 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <MX_GPIO_Init+0xec>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <MX_GPIO_Init+0xec>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <MX_GPIO_Init+0xec>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_GPIO_Init+0xec>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <MX_GPIO_Init+0xec>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_GPIO_Init+0xec>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_GPIO_Init+0xec>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <MX_GPIO_Init+0xec>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_GPIO_Init+0xec>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_GPIO_Init+0xec>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <MX_GPIO_Init+0xec>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_GPIO_Init+0xec>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001212:	2304      	movs	r3, #4
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4819      	ldr	r0, [pc, #100]	; (800128c <MX_GPIO_Init+0xf0>)
 8001228:	f002 ffb6 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 800122c:	2308      	movs	r3, #8
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001230:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <MX_GPIO_Init+0xf0>)
 8001242:	f002 ffa9 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_GPIO_Init+0xf0>)
 800125a:	f002 ff9d 	bl	8004198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2008      	movs	r0, #8
 8001264:	f002 fd29 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001268:	2008      	movs	r0, #8
 800126a:	f002 fd42 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2009      	movs	r0, #9
 8001274:	f002 fd21 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001278:	2009      	movs	r0, #9
 800127a:	f002 fd3a 	bl	8003cf2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000800 	.word	0x48000800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>

0800129a <pawprint_init>:
//static st_fifo_out_slot acc_slot[126];
//static st_fifo_out_slot gyr_slot[126];

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 80012a2:	2014      	movs	r0, #20
 80012a4:	f002 fc0a 	bl	8003abc <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 80012ac:	f107 030d 	add.w	r3, r7, #13
 80012b0:	461a      	mov	r2, r3
 80012b2:	2101      	movs	r1, #1
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fd89 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 80012ba:	2305      	movs	r3, #5
 80012bc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 80012be:	f107 030d 	add.w	r3, r7, #13
 80012c2:	461a      	mov	r2, r3
 80012c4:	2112      	movs	r1, #18
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fd80 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f002 fbf5 	bl	8003abc <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 80012d2:	f107 030f 	add.w	r3, r7, #15
 80012d6:	461a      	mov	r2, r3
 80012d8:	210f      	movs	r1, #15
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd3e 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 80012e4:	f107 030d 	add.w	r3, r7, #13
 80012e8:	461a      	mov	r2, r3
 80012ea:	2101      	movs	r1, #1
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fd6d 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 80012f2:	f107 030e 	add.w	r3, r7, #14
 80012f6:	461a      	mov	r2, r3
 80012f8:	2114      	movs	r1, #20
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fd2e 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	b2db      	uxtb	r3, r3
 8001308:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 800130a:	f107 030e 	add.w	r3, r7, #14
 800130e:	461a      	mov	r2, r3
 8001310:	2114      	movs	r1, #20
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fd5a 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 8001318:	2005      	movs	r0, #5
 800131a:	f002 fbcf 	bl	8003abc <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 800132e:	f107 030e 	add.w	r3, r7, #14
 8001332:	461a      	mov	r2, r3
 8001334:	2114      	movs	r1, #20
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd48 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 8001346:	f107 030e 	add.w	r3, r7, #14
 800134a:	461a      	mov	r2, r3
 800134c:	2114      	movs	r1, #20
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd3c 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 800135e:	f107 030e 	add.w	r3, r7, #14
 8001362:	461a      	mov	r2, r3
 8001364:	2114      	movs	r1, #20
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fd30 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 800136c:	2310      	movs	r3, #16
 800136e:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8001370:	f107 030e 	add.w	r3, r7, #14
 8001374:	461a      	mov	r2, r3
 8001376:	2114      	movs	r1, #20
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fd27 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 8001382:	f107 030d 	add.w	r3, r7, #13
 8001386:	461a      	mov	r2, r3
 8001388:	2101      	movs	r1, #1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fd1e 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	461a      	mov	r2, r3
 8001396:	214f      	movs	r1, #79	; 0x4f
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fcab 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 800139e:	e001      	b.n	80013a4 <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 80013a0:	2323      	movs	r3, #35	; 0x23
 80013a2:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d1fa      	bne.n	80013a0 <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 80013aa:	f107 030d 	add.w	r3, r7, #13
 80013ae:	461a      	mov	r2, r3
 80013b0:	2160      	movs	r1, #96	; 0x60
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fcb8 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 80013b8:	2005      	movs	r0, #5
 80013ba:	f002 fb7f 	bl	8003abc <HAL_Delay>
	RegDat = 0x43;
 80013be:	2343      	movs	r3, #67	; 0x43
 80013c0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 80013c2:	f107 030d 	add.w	r3, r7, #13
 80013c6:	461a      	mov	r2, r3
 80013c8:	2160      	movs	r1, #96	; 0x60
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fcac 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 80013d0:	2014      	movs	r0, #20
 80013d2:	f002 fb73 	bl	8003abc <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 80013d6:	2310      	movs	r3, #16
 80013d8:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 80013da:	f107 030d 	add.w	r3, r7, #13
 80013de:	461a      	mov	r2, r3
 80013e0:	2162      	movs	r1, #98	; 0x62
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fca0 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 80013e8:	238c      	movs	r3, #140	; 0x8c
 80013ea:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 80013ec:	f107 030d 	add.w	r3, r7, #13
 80013f0:	461a      	mov	r2, r3
 80013f2:	2160      	movs	r1, #96	; 0x60
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fc97 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 80013fa:	f107 030b 	add.w	r3, r7, #11
 80013fe:	461a      	mov	r2, r3
 8001400:	21fd      	movs	r1, #253	; 0xfd
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f002 f9ca 	bl	800379c <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 8001408:	f107 030a 	add.w	r3, r7, #10
 800140c:	461a      	mov	r2, r3
 800140e:	21fe      	movs	r1, #254	; 0xfe
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f002 f9c3 	bl	800379c <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 8001416:	e001      	b.n	800141c <pawprint_init+0x182>

	RegDat = 0x04;
 8001418:	2304      	movs	r3, #4
 800141a:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <pawprint_init+0x18e>
 8001422:	7abb      	ldrb	r3, [r7, #10]
 8001424:	2b53      	cmp	r3, #83	; 0x53
 8001426:	d1f7      	bne.n	8001418 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 8001428:	f107 030d 	add.w	r3, r7, #13
 800142c:	461a      	mov	r2, r3
 800142e:	2104      	movs	r1, #4
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc79 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 8001436:	234b      	movs	r3, #75	; 0x4b
 8001438:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 800143a:	f107 030d 	add.w	r3, r7, #13
 800143e:	461a      	mov	r2, r3
 8001440:	2105      	movs	r1, #5
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc70 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 8001448:	f107 030d 	add.w	r3, r7, #13
 800144c:	461a      	mov	r2, r3
 800144e:	2120      	movs	r1, #32
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fc69 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	461a      	mov	r2, r3
 8001460:	2106      	movs	r1, #6
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc60 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001468:	f107 030d 	add.w	r3, r7, #13
 800146c:	461a      	mov	r2, r3
 800146e:	2107      	movs	r1, #7
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fc59 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 8001476:	f107 030d 	add.w	r3, r7, #13
 800147a:	461a      	mov	r2, r3
 800147c:	2108      	movs	r1, #8
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fc52 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 8001484:	f107 030d 	add.w	r3, r7, #13
 8001488:	461a      	mov	r2, r3
 800148a:	2103      	movs	r1, #3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fc4b 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001496:	f107 030d 	add.w	r3, r7, #13
 800149a:	461a      	mov	r2, r3
 800149c:	2101      	movs	r1, #1
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fc94 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 80014a4:	2064      	movs	r0, #100	; 0x64
 80014a6:	f002 fb09 	bl	8003abc <HAL_Delay>
	RegDat = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 80014ae:	f107 030d 	add.w	r3, r7, #13
 80014b2:	461a      	mov	r2, r3
 80014b4:	2114      	movs	r1, #20
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fc88 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 80014bc:	f107 030d 	add.w	r3, r7, #13
 80014c0:	461a      	mov	r2, r3
 80014c2:	2101      	movs	r1, #1
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fc81 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 80014ca:	23e2      	movs	r3, #226	; 0xe2
 80014cc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 80014ce:	f107 030d 	add.w	r3, r7, #13
 80014d2:	461a      	mov	r2, r3
 80014d4:	2118      	movs	r1, #24
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fc78 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 80014e0:	f107 030d 	add.w	r3, r7, #13
 80014e4:	461a      	mov	r2, r3
 80014e6:	2110      	movs	r1, #16
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fc6f 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 80014ee:	f107 030d 	add.w	r3, r7, #13
 80014f2:	461a      	mov	r2, r3
 80014f4:	2111      	movs	r1, #17
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fc68 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x2C;
 80014fc:	232c      	movs	r3, #44	; 0x2c
 80014fe:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 300
 8001500:	f107 030d 	add.w	r3, r7, #13
 8001504:	461a      	mov	r2, r3
 8001506:	2107      	movs	r1, #7
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fc5f 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x01;
 800150e:	2301      	movs	r3, #1
 8001510:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 8001512:	f107 030d 	add.w	r3, r7, #13
 8001516:	461a      	mov	r2, r3
 8001518:	2108      	movs	r1, #8
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fc56 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 8001520:	2344      	movs	r3, #68	; 0x44
 8001522:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 8001524:	f107 030d 	add.w	r3, r7, #13
 8001528:	461a      	mov	r2, r3
 800152a:	2109      	movs	r1, #9
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fc4d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x56;
 8001532:	2356      	movs	r3, #86	; 0x56
 8001534:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);// Set to continuous mode & batch Temp and Timestamp
 8001536:	f107 030d 	add.w	r3, r7, #13
 800153a:	461a      	mov	r2, r3
 800153c:	210a      	movs	r1, #10
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fc44 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00; //RegDat = 0x41;
 8001544:	2300      	movs	r3, #0
 8001546:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 8001548:	f107 030d 	add.w	r3, r7, #13
 800154c:	461a      	mov	r2, r3
 800154e:	2156      	movs	r1, #86	; 0x56
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fc3b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 8001556:	2338      	movs	r3, #56	; 0x38
 8001558:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 800155a:	f107 030d 	add.w	r3, r7, #13
 800155e:	461a      	mov	r2, r3
 8001560:	210d      	movs	r1, #13
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fc32 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 800156c:	f107 030d 	add.w	r3, r7, #13
 8001570:	461a      	mov	r2, r3
 8001572:	2101      	movs	r1, #1
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fc29 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 800157a:	233d      	movs	r3, #61	; 0x3d
 800157c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 800157e:	f107 030d 	add.w	r3, r7, #13
 8001582:	461a      	mov	r2, r3
 8001584:	2115      	movs	r1, #21
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fc20 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 800158c:	2368      	movs	r3, #104	; 0x68
 800158e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 8001590:	f107 030d 	add.w	r3, r7, #13
 8001594:	461a      	mov	r2, r3
 8001596:	2116      	movs	r1, #22
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fc17 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0E;
 800159e:	230e      	movs	r3, #14
 80015a0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read
 80015a2:	f107 030d 	add.w	r3, r7, #13
 80015a6:	461a      	mov	r2, r3
 80015a8:	2117      	movs	r1, #23
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fc0e 	bl	8000dcc <LSM6DSO_WriteReg>

	// STTS751 Peripheral enable
	RegDat = STTS751_I2C_ADDR;
 80015b0:	2372      	movs	r3, #114	; 0x72
 80015b2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
 80015b4:	f107 030d 	add.w	r3, r7, #13
 80015b8:	461a      	mov	r2, r3
 80015ba:	2118      	movs	r1, #24
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fc05 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = STTS751_REG_TEMP_H;
 80015c2:	2300      	movs	r3, #0
 80015c4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
 80015c6:	f107 030d 	add.w	r3, r7, #13
 80015ca:	461a      	mov	r2, r3
 80015cc:	2119      	movs	r1, #25
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fbfc 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0B;
 80015d4:	230b      	movs	r3, #11
 80015d6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
 80015d8:	f107 030d 	add.w	r3, r7, #13
 80015dc:	461a      	mov	r2, r3
 80015de:	211a      	movs	r1, #26
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fbf3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 80015ea:	f107 030d 	add.w	r3, r7, #13
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fbea 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 80015f8:	2344      	movs	r3, #68	; 0x44
 80015fa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 80015fc:	f107 030d 	add.w	r3, r7, #13
 8001600:	461a      	mov	r2, r3
 8001602:	2112      	movs	r1, #18
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fbe1 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 800160a:	2328      	movs	r3, #40	; 0x28
 800160c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 800160e:	f107 030d 	add.w	r3, r7, #13
 8001612:	461a      	mov	r2, r3
 8001614:	2113      	movs	r1, #19
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fbd8 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 800161c:	2310      	movs	r3, #16
 800161e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 8001620:	f107 030d 	add.w	r3, r7, #13
 8001624:	461a      	mov	r2, r3
 8001626:	2115      	movs	r1, #21
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fbcf 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 8001632:	f107 030d 	add.w	r3, r7, #13
 8001636:	461a      	mov	r2, r3
 8001638:	2116      	movs	r1, #22
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fbc6 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 8001640:	2320      	movs	r3, #32
 8001642:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 8001644:	f107 030d 	add.w	r3, r7, #13
 8001648:	461a      	mov	r2, r3
 800164a:	2119      	movs	r1, #25
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fbbd 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 8001656:	f107 030d 	add.w	r3, r7, #13
 800165a:	461a      	mov	r2, r3
 800165c:	2110      	movs	r1, #16
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fbb4 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 8001668:	f107 030d 	add.w	r3, r7, #13
 800166c:	461a      	mov	r2, r3
 800166e:	2111      	movs	r1, #17
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fbab 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 800167a:	f107 030d 	add.w	r3, r7, #13
 800167e:	461a      	mov	r2, r3
 8001680:	2101      	movs	r1, #1
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fba2 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x09;
 8001688:	2309      	movs	r3, #9
 800168a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 800168c:	f107 030d 	add.w	r3, r7, #13
 8001690:	461a      	mov	r2, r3
 8001692:	2114      	movs	r1, #20
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fb99 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = (RegDat ^ 0x04);
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	f083 0304 	eor.w	r3, r3, #4
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable I2C Master
 80016a4:	f107 030d 	add.w	r3, r7, #13
 80016a8:	461a      	mov	r2, r3
 80016aa:	2114      	movs	r1, #20
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fb8d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 80016b6:	f107 030d 	add.w	r3, r7, #13
 80016ba:	461a      	mov	r2, r3
 80016bc:	2101      	movs	r1, #1
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fb84 	bl	8000dcc <LSM6DSO_WriteReg>

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <pawprint_readFIFO>:

/* FIFO read and decode - uses st_fifo repo from STMicro git */

void pawprint_readFIFO( I2C_HandleTypeDef *i2cHandle , char *outBUFFER, int *bufferLength, int *writeIndex){
 80016cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016d0:	b0a2      	sub	sp, #136	; 0x88
 80016d2:	af08      	add	r7, sp, #32
 80016d4:	6178      	str	r0, [r7, #20]
 80016d6:	6139      	str	r1, [r7, #16]
 80016d8:	60fa      	str	r2, [r7, #12]
 80016da:	60bb      	str	r3, [r7, #8]

	st_fifo_conf FIFOconf;
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//	FIFO_out_file FIFO_out;

	FIFOconf.device = ST_FIFO_LSM6DSO;
 80016e2:	2305      	movs	r3, #5
 80016e4:	f887 3020 	strb.w	r3, [r7, #32]
	FIFOconf.bdr_xl = 104; // 104 - as batching timestamp can set to 0
 80016e8:	4ba9      	ldr	r3, [pc, #676]	; (8001990 <pawprint_readFIFO+0x2c4>)
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
	FIFOconf.bdr_gy = 104;
 80016ec:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <pawprint_readFIFO+0x2c4>)
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
	FIFOconf.bdr_vsens = 104;
 80016f0:	4ba7      	ldr	r3, [pc, #668]	; (8001990 <pawprint_readFIFO+0x2c4>)
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	st_fifo_init(&FIFOconf);
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fb09 	bl	8001d10 <st_fifo_init>
	st_fifo_raw_slot *raw_slot;
	st_fifo_out_slot *out_slot;
	uint16_t out_slot_size = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	837b      	strh	r3, [r7, #26]

	/* Confirm watermark has been met LSM6DSO_REG_FIFO_STATUS2 */
	LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[0], 2);
 8001702:	f107 021c 	add.w	r2, r7, #28
 8001706:	2302      	movs	r3, #2
 8001708:	213a      	movs	r1, #58	; 0x3a
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff fb40 	bl	8000d90 <LSM6DSO_ReadRegs>

	if (((FIFOstatus[1] >> 7)  & 0x01)||((FIFOstatus[1] >> 6)  & 0x01)||((FIFOstatus[1] >> 5)  & 0x01)){ // Check WTM threshold bit, overrun bit and full bit
 8001710:	7f7b      	ldrb	r3, [r7, #29]
 8001712:	09db      	lsrs	r3, r3, #7
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <pawprint_readFIFO+0x70>
 800171e:	7f7b      	ldrb	r3, [r7, #29]
 8001720:	099b      	lsrs	r3, r3, #6
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <pawprint_readFIFO+0x70>
 800172c:	7f7b      	ldrb	r3, [r7, #29]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 823b 	beq.w	8001bb2 <pawprint_readFIFO+0x4e6>
		/* Get number of samples in FIFO*/
		FIFOdepth = ((((uint16_t)FIFOstatus[1] & 0x03) << 8) + (uint16_t)FIFOstatus[0]);
 800173c:	7f7b      	ldrb	r3, [r7, #29]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001746:	b29a      	uxth	r2, r3
 8001748:	7f3b      	ldrb	r3, [r7, #28]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

		raw_slot = malloc(FIFOdepth * sizeof(st_fifo_raw_slot));
 8001752:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f010 fc99 	bl	8012094 <malloc>
 8001762:	4603      	mov	r3, r0
 8001764:	653b      	str	r3, [r7, #80]	; 0x50
		out_slot = malloc(FIFOdepth * 3 * sizeof(st_fifo_out_slot));
 8001766:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f010 fc8e 	bl	8012094 <malloc>
 8001778:	4603      	mov	r3, r0
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c

		int slots = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	663b      	str	r3, [r7, #96]	; 0x60

		int streamSize = FIFOdepth;
 8001780:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001784:	64bb      	str	r3, [r7, #72]	; 0x48

		while(FIFOdepth--) {
 8001786:	e00e      	b.n	80017a6 <pawprint_readFIFO+0xda>

			LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &raw_slot[slots].fifo_data_out[0],7 );
 8001788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001792:	4413      	add	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	2307      	movs	r3, #7
 8001798:	2178      	movs	r1, #120	; 0x78
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff faf8 	bl	8000d90 <LSM6DSO_ReadRegs>

			slots++;
 80017a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a2:	3301      	adds	r3, #1
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
		while(FIFOdepth--) {
 80017a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	f8a7 2066 	strh.w	r2, [r7, #102]	; 0x66
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e9      	bne.n	8001788 <pawprint_readFIFO+0xbc>
		}

		st_fifo_decode(out_slot, raw_slot, &out_slot_size, streamSize);
 80017b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f107 021a 	add.w	r2, r7, #26
 80017bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80017be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017c0:	f000 fb9a 	bl	8001ef8 <st_fifo_decode>
		st_fifo_sort(out_slot, out_slot_size);
 80017c4:	8b7b      	ldrh	r3, [r7, #26]
 80017c6:	4619      	mov	r1, r3
 80017c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017ca:	f001 fb43 	bl	8002e54 <st_fifo_sort>

		uint16_t acc_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 80017ce:	8b7b      	ldrh	r3, [r7, #26]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4619      	mov	r1, r3
 80017d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017d6:	f001 fb99 	bl	8002f0c <st_fifo_get_sensor_occurrence>
 80017da:	4603      	mov	r3, r0
 80017dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t gyr_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 80017e0:	8b7b      	ldrh	r3, [r7, #26]
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017e8:	f001 fb90 	bl	8002f0c <st_fifo_get_sensor_occurrence>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		//uint16_t temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
		uint16_t mag_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 80017f2:	8b7b      	ldrh	r3, [r7, #26]
 80017f4:	2203      	movs	r2, #3
 80017f6:	4619      	mov	r1, r3
 80017f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017fa:	f001 fb87 	bl	8002f0c <st_fifo_get_sensor_occurrence>
 80017fe:	4603      	mov	r3, r0
 8001800:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42


		//free(raw_slot);
		//free(out_slot);

		st_fifo_out_slot *acc_slot = malloc(acc_samples * sizeof(st_fifo_out_slot));
 8001804:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f010 fc3f 	bl	8012094 <malloc>
 8001816:	4603      	mov	r3, r0
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
		st_fifo_out_slot *gyr_slot = malloc(gyr_samples * sizeof(st_fifo_out_slot));
 800181a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4618      	mov	r0, r3
 8001828:	f010 fc34 	bl	8012094 <malloc>
 800182c:	4603      	mov	r3, r0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
		//st_fifo_out_slot *temp_slot = malloc(temp_samples * sizeof(st_fifo_out_slot));
		st_fifo_out_slot *mag_slot = malloc(mag_samples * sizeof(st_fifo_out_slot));
 8001830:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4618      	mov	r0, r3
 800183e:	f010 fc29 	bl	8012094 <malloc>
 8001842:	4603      	mov	r3, r0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
		//st_fifo_out_slot *ext_temp_slot = malloc(ext_temp_samples * sizeof(st_fifo_out_slot));

		st_fifo_extract_sensor(acc_slot, out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 8001846:	8b7a      	ldrh	r2, [r7, #26]
 8001848:	2301      	movs	r3, #1
 800184a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800184c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800184e:	f001 fb87 	bl	8002f60 <st_fifo_extract_sensor>
		st_fifo_extract_sensor(gyr_slot, out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 8001852:	8b7a      	ldrh	r2, [r7, #26]
 8001854:	2300      	movs	r3, #0
 8001856:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800185a:	f001 fb81 	bl	8002f60 <st_fifo_extract_sensor>
		//st_fifo_extract_sensor(temp_slot, out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
		st_fifo_extract_sensor(mag_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 800185e:	8b7a      	ldrh	r2, [r7, #26]
 8001860:	2303      	movs	r3, #3
 8001862:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001866:	f001 fb7b 	bl	8002f60 <st_fifo_extract_sensor>
		//st_fifo_extract_sensor(ext_temp_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR1);

		if (*bufferLength != 0 ){
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <pawprint_readFIFO+0x1ae>
			*writeIndex = *bufferLength;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	601a      	str	r2, [r3, #0]
		}

		// Convert to real units & add to formatted strings
	    for (int i = 0; i < acc_samples; i++) {
 800187a:	2300      	movs	r3, #0
 800187c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800187e:	e07e      	b.n	800197e <pawprint_readFIFO+0x2b2>
	    	uint8_t outLength = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
//	    	FIFO_out[row_count].sensor_data.x = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x);
//	    	FIFO_out[row_count].sensor_data.y = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y);
//	    	FIFO_out[row_count].sensor_data.z = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	189e      	adds	r6, r3, r2
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f5c3 4348 	rsb	r3, r3, #51200	; 0xc800
 8001898:	469a      	mov	sl, r3
	    		    			acc_slot[i].timestamp,
 800189a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	461a      	mov	r2, r3
 80018a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a8:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	607b      	str	r3, [r7, #4]
	    						acc_slot[i].sensor_tag,
 80018ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	461a      	mov	r2, r3
 80018ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018bc:	4413      	add	r3, r2
 80018be:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 80018c0:	603b      	str	r3, [r7, #0]
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x),
 80018c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	461a      	mov	r2, r3
 80018ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d0:	4413      	add	r3, r2
 80018d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f9d4 	bl	8001c84 <lsm6dso_from_fs2_to_mg>
 80018dc:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_f2d>
 80018e6:	4604      	mov	r4, r0
 80018e8:	460d      	mov	r5, r1
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y),
 80018ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	461a      	mov	r2, r3
 80018f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f8:	4413      	add	r3, r2
 80018fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9c0 	bl	8001c84 <lsm6dso_from_fs2_to_mg>
 8001904:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4680      	mov	r8, r0
 8001910:	4689      	mov	r9, r1
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z));
 8001912:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	461a      	mov	r2, r3
 800191e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001920:	4413      	add	r3, r2
 8001922:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f9ac 	bl	8001c84 <lsm6dso_from_fs2_to_mg>
 800192c:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe09 	bl	8000548 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800193e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001942:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	9200      	str	r2, [sp, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <pawprint_readFIFO+0x2c8>)
 800194e:	4651      	mov	r1, sl
 8001950:	4630      	mov	r0, r6
 8001952:	f011 fb79 	bl	8013048 <sniprintf>
 8001956:	4603      	mov	r3, r0
 8001958:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	    	*bufferLength += outLength;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001964:	441a      	add	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001972:	441a      	add	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < acc_samples; i++) {
 8001978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197a:	3301      	adds	r3, #1
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800197e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001984:	429a      	cmp	r2, r3
 8001986:	f6ff af7b 	blt.w	8001880 <pawprint_readFIFO+0x1b4>
	    }

	    for (int i = 0; i < gyr_samples; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	65bb      	str	r3, [r7, #88]	; 0x58
 800198e:	e082      	b.n	8001a96 <pawprint_readFIFO+0x3ca>
 8001990:	42d00000 	.word	0x42d00000
 8001994:	080168b4 	.word	0x080168b4
	    	uint8_t outLength = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//	    	FIFO_out[row_count].sensor_data.x = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.x);
//	    	FIFO_out[row_count].sensor_data.y = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.y);
//	    	FIFO_out[row_count].sensor_data.z = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	189e      	adds	r6, r3, r2
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f5c3 4348 	rsb	r3, r3, #51200	; 0xc800
 80019b0:	469a      	mov	sl, r3
	    		    		    			gyr_slot[i].timestamp,
 80019b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	461a      	mov	r2, r3
 80019be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c0:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	607b      	str	r3, [r7, #4]
	    		    						gyr_slot[i].sensor_tag,
 80019c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	461a      	mov	r2, r3
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	4413      	add	r3, r2
 80019d6:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 80019d8:	603b      	str	r3, [r7, #0]
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.x),
 80019da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	461a      	mov	r2, r3
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	4413      	add	r3, r2
 80019ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f960 	bl	8001cb4 <lsm6dso_from_fs125_to_mdps>
 80019f4:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fda5 	bl	8000548 <__aeabi_f2d>
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.y),
 8001a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a10:	4413      	add	r3, r2
 8001a12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f94c 	bl	8001cb4 <lsm6dso_from_fs125_to_mdps>
 8001a1c:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd91 	bl	8000548 <__aeabi_f2d>
 8001a26:	4680      	mov	r8, r0
 8001a28:	4689      	mov	r9, r1
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.z));
 8001a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	461a      	mov	r2, r3
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	4413      	add	r3, r2
 8001a3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f938 	bl	8001cb4 <lsm6dso_from_fs125_to_mdps>
 8001a44:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd7d 	bl	8000548 <__aeabi_f2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a56:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	9200      	str	r2, [sp, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <pawprint_readFIFO+0x4f0>)
 8001a66:	4651      	mov	r1, sl
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f011 faed 	bl	8013048 <sniprintf>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	    	*bufferLength += outLength;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001a7c:	441a      	add	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001a8a:	441a      	add	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < gyr_samples; i++) {
 8001a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a92:	3301      	adds	r3, #1
 8001a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f6ff af7b 	blt.w	8001998 <pawprint_readFIFO+0x2cc>
	    }

	    for (int i = 0; i < mag_samples; i++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8001aa6:	e07e      	b.n	8001ba6 <pawprint_readFIFO+0x4da>
	    	uint8_t outLength = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//	    	FIFO_out[row_count].sensor_data.x = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.x);
//	    	FIFO_out[row_count].sensor_data.y = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.y);
//	    	FIFO_out[row_count].sensor_data.z = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	189e      	adds	r6, r3, r2
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f5c3 4348 	rsb	r3, r3, #51200	; 0xc800
 8001ac0:	469a      	mov	sl, r3
	    		    		    			mag_slot[i].timestamp,
 8001ac2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad0:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	607b      	str	r3, [r7, #4]
	    		    						mag_slot[i].sensor_tag,
 8001ad6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	4413      	add	r3, r2
 8001ae6:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001ae8:	603b      	str	r3, [r7, #0]
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.x),
 8001aea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	461a      	mov	r2, r3
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	4413      	add	r3, r2
 8001afa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f8f0 	bl	8001ce4 <lis2mdl_from_lsb_to_mgauss>
 8001b04:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd1d 	bl	8000548 <__aeabi_f2d>
 8001b0e:	4604      	mov	r4, r0
 8001b10:	460d      	mov	r5, r1
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.y),
 8001b12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	4413      	add	r3, r2
 8001b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f8dc 	bl	8001ce4 <lis2mdl_from_lsb_to_mgauss>
 8001b2c:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4680      	mov	r8, r0
 8001b38:	4689      	mov	r9, r1
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z)
 8001b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	461a      	mov	r2, r3
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	4413      	add	r3, r2
 8001b4a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8c8 	bl	8001ce4 <lis2mdl_from_lsb_to_mgauss>
 8001b54:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcf5 	bl	8000548 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b66:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001b6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	9200      	str	r2, [sp, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <pawprint_readFIFO+0x4f0>)
 8001b76:	4651      	mov	r1, sl
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f011 fa65 	bl	8013048 <sniprintf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											);

	    	*bufferLength += outLength;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b8c:	441a      	add	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b9a:	441a      	add	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < mag_samples; i++) {
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8001ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001baa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f6ff af7b 	blt.w	8001aa8 <pawprint_readFIFO+0x3dc>

	    }
	}

}
 8001bb2:	bf00      	nop
 8001bb4:	3768      	adds	r7, #104	; 0x68
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bbc:	080168b4 	.word	0x080168b4

08001bc0 <pawprint_WriteSD>:

void pawprint_WriteSD( FIL *SDFile , char *outBUFFER, int *bufferLength){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
	FRESULT writeRESULT;
	int failcount = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int byteCount = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
	int blockSize = 2048;
 8001bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd8:	61fb      	str	r3, [r7, #28]
	int readChunk = ((*bufferLength / blockSize) * blockSize);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	61bb      	str	r3, [r7, #24]

	f_open(SDFile, "Out.csv", FA_OPEN_APPEND | FA_WRITE); // Open file for appending
 8001bec:	2232      	movs	r2, #50	; 0x32
 8001bee:	4924      	ldr	r1, [pc, #144]	; (8001c80 <pawprint_WriteSD+0xc0>)
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f00e fb3b 	bl	801026c <f_open>

	for (int i = 0; i <= (readChunk/blockSize); i++){
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
 8001bfa:	e023      	b.n	8001c44 <pawprint_WriteSD+0x84>
		f_lseek(SDFile, f_size(SDFile));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4619      	mov	r1, r3
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f00e ff0d 	bl	8010a22 <f_lseek>
		writeRESULT	= f_write(SDFile, &outBUFFER[i*blockSize], blockSize, &byteCount); // Write largest 512 multiple sector
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1899      	adds	r1, r3, r2
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f00e fce3 	bl	80105e8 <f_write>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
	if (writeRESULT != FR_OK){
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <pawprint_WriteSD+0x72>

		failcount++;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	3301      	adds	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24

	}
		f_sync(SDFile);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f00e fe4d 	bl	80108d2 <f_sync>
		HAL_Delay(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f001 ff3f 	bl	8003abc <HAL_Delay>
	for (int i = 0; i <= (readChunk/blockSize); i++){
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	3301      	adds	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	ddd4      	ble.n	8001bfc <pawprint_WriteSD+0x3c>
	}

	*bufferLength -= readChunk; // Get remainder length and set buffer length to accommodate it
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]

	memcpy(outBUFFER, &outBUFFER[readChunk], *bufferLength);  // Move remaining data to index 0
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	18d1      	adds	r1, r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68b8      	ldr	r0, [r7, #8]
 8001c6c:	f011 fb12 	bl	8013294 <memcpy>

	f_close(SDFile);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f00e feac 	bl	80109ce <f_close>

	if( readChunk == 1){

	}

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	080168cc 	.word	0x080168cc

08001c84 <lsm6dso_from_fs2_to_mg>:
//	f_close( SDFile );
//
//}

float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001cb0 <lsm6dso_from_fs2_to_mg+0x2c>
 8001c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	3d79db23 	.word	0x3d79db23

08001cb4 <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001ce0 <lsm6dso_from_fs125_to_mdps+0x2c>
 8001cce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	408c0000 	.word	0x408c0000

08001ce4 <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <st_fifo_init>:
  *
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_init(st_fifo_conf *conf)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  float bdr_xl, bdr_gy, bdr_vsens, bdr_max;

  if (conf->bdr_xl < 0.0f || conf->bdr_gy < 0.0f || conf->bdr_vsens < 0.0f)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d40f      	bmi.n	8001d48 <st_fifo_init+0x38>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d407      	bmi.n	8001d48 <st_fifo_init+0x38>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d501      	bpl.n	8001d4c <st_fifo_init+0x3c>
  {
    return ST_FIFO_ERR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b3      	b.n	8001eb4 <st_fifo_init+0x1a4>
  }

  if (conf->device < ST_FIFO_LSM6DSV)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d803      	bhi.n	8001d5c <st_fifo_init+0x4c>
  {
    fifo_ver = 0;
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <st_fifo_init+0x1ac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e002      	b.n	8001d62 <st_fifo_init+0x52>
  }
  else
  {
    fifo_ver = 1;
 8001d5c:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <st_fifo_init+0x1ac>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
  }

  tag_counter_old = 0;
 8001d62:	4b57      	ldr	r3, [pc, #348]	; (8001ec0 <st_fifo_init+0x1b0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  bdr_xl = conf->bdr_xl;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	61bb      	str	r3, [r7, #24]
  bdr_gy = conf->bdr_gy;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	617b      	str	r3, [r7, #20]
  bdr_vsens = conf->bdr_vsens;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	613b      	str	r3, [r7, #16]
  bdr_max = MAX(bdr_xl, bdr_gy);
 8001d7a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd01      	ble.n	8001d90 <st_fifo_init+0x80>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	e000      	b.n	8001d92 <st_fifo_init+0x82>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	60fb      	str	r3, [r7, #12]
  bdr_max = MAX(bdr_max, bdr_vsens);
 8001d94:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	dd01      	ble.n	8001daa <st_fifo_init+0x9a>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	e000      	b.n	8001dac <st_fifo_init+0x9c>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60fb      	str	r3, [r7, #12]
  dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <st_fifo_init+0x1ac>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461c      	mov	r4, r3
 8001db4:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <st_fifo_init+0x1ac>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <st_fifo_init+0x1b4>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	ed97 0a03 	vldr	s0, [r7, #12]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 fa10 	bl	80031f0 <bdr_get_index>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <st_fifo_init+0x1b4>)
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	4423      	add	r3, r4
 8001ddc:	440b      	add	r3, r1
 8001dde:	3330      	adds	r3, #48	; 0x30
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <st_fifo_init+0x1b8>)
 8001de6:	6013      	str	r3, [r2, #0]
  dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <st_fifo_init+0x1ac>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461c      	mov	r4, r3
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <st_fifo_init+0x1ac>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4613      	mov	r3, r2
 8001df6:	019b      	lsls	r3, r3, #6
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4a31      	ldr	r2, [pc, #196]	; (8001ec4 <st_fifo_init+0x1b4>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	ed97 0a06 	vldr	s0, [r7, #24]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 f9f3 	bl	80031f0 <bdr_get_index>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <st_fifo_init+0x1b4>)
 8001e10:	4623      	mov	r3, r4
 8001e12:	019b      	lsls	r3, r3, #6
 8001e14:	4423      	add	r3, r4
 8001e16:	440b      	add	r3, r1
 8001e18:	3330      	adds	r3, #48	; 0x30
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <st_fifo_init+0x1bc>)
 8001e20:	6013      	str	r3, [r2, #0]
  dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <st_fifo_init+0x1ac>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461c      	mov	r4, r3
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <st_fifo_init+0x1ac>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3340      	adds	r3, #64	; 0x40
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <st_fifo_init+0x1b4>)
 8001e3a:	4413      	add	r3, r2
 8001e3c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 f9d5 	bl	80031f0 <bdr_get_index>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <st_fifo_init+0x1b4>)
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	019b      	lsls	r3, r3, #6
 8001e50:	4423      	add	r3, r4
 8001e52:	440b      	add	r3, r1
 8001e54:	3330      	adds	r3, #48	; 0x30
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <st_fifo_init+0x1c0>)
 8001e5c:	6013      	str	r3, [r2, #0]
  dtime_xl_old = dtime_xl;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <st_fifo_init+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <st_fifo_init+0x1c4>)
 8001e64:	6013      	str	r3, [r2, #0]
  dtime_gy_old = dtime_gy;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <st_fifo_init+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <st_fifo_init+0x1c8>)
 8001e6c:	6013      	str	r3, [r2, #0]
  timestamp = 0;
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <st_fifo_init+0x1cc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
  bdr_chg_xl_flag = 0;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <st_fifo_init+0x1d0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
  bdr_chg_gy_flag = 0;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <st_fifo_init+0x1d4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
  last_timestamp_xl = 0;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <st_fifo_init+0x1d8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
  last_timestamp_gy = 0;
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <st_fifo_init+0x1dc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

  for (uint8_t i = 0; i < 3u; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
 8001e90:	e00c      	b.n	8001eac <st_fifo_init+0x19c>
  {
    last_data_xl[i] = 0;
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <st_fifo_init+0x1e0>)
 8001e96:	2100      	movs	r1, #0
 8001e98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    last_data_gy[i] = 0;
 8001e9c:	7ffb      	ldrb	r3, [r7, #31]
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <st_fifo_init+0x1e4>)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < 3u; i++)
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	77fb      	strb	r3, [r7, #31]
 8001eac:	7ffb      	ldrb	r3, [r7, #31]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d9ef      	bls.n	8001e92 <st_fifo_init+0x182>
  }

  return ST_FIFO_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3724      	adds	r7, #36	; 0x24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	2000cc84 	.word	0x2000cc84
 8001ec0:	2000cc85 	.word	0x2000cc85
 8001ec4:	08016958 	.word	0x08016958
 8001ec8:	2000cc90 	.word	0x2000cc90
 8001ecc:	2000cc88 	.word	0x2000cc88
 8001ed0:	2000cc8c 	.word	0x2000cc8c
 8001ed4:	2000cc94 	.word	0x2000cc94
 8001ed8:	2000cc98 	.word	0x2000cc98
 8001edc:	2000cc9c 	.word	0x2000cc9c
 8001ee0:	2000cca8 	.word	0x2000cca8
 8001ee4:	2000cca9 	.word	0x2000cca9
 8001ee8:	2000cca0 	.word	0x2000cca0
 8001eec:	2000cca4 	.word	0x2000cca4
 8001ef0:	2000ccac 	.word	0x2000ccac
 8001ef4:	2000ccb4 	.word	0x2000ccb4

08001ef8 <st_fifo_decode>:
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_decode(st_fifo_out_slot *fifo_out_slot,
                              st_fifo_raw_slot *fifo_raw_slot, uint16_t *out_slot_size, uint16_t stream_size)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b09b      	sub	sp, #108	; 0x6c
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	807b      	strh	r3, [r7, #2]
  uint16_t j = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

  for (uint16_t i = 0; i < stream_size; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001f12:	f000 bf87 	b.w	8002e24 <st_fifo_decode+0xf2c>
  {

    uint8_t tag = (fifo_raw_slot[i].fifo_data_out[0] & TAG_SENSOR_MASK) >> TAG_SENSOR_SHIFT;
 8001f16:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	08db      	lsrs	r3, r3, #3
 8001f28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t tag_counter = (fifo_raw_slot[i].fifo_data_out[0] & TAG_COUNTER_MASK) >> TAG_COUNTER_SHIFT;
 8001f2c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    if (fifo_ver == 0u && has_even_parity(fifo_raw_slot[i].fifo_data_out[0]) == 0u)
 8001f48:	4b99      	ldr	r3, [pc, #612]	; (80021b0 <st_fifo_decode+0x2b8>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d110      	bne.n	8001f72 <st_fifo_decode+0x7a>
 8001f50:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 f9a5 	bl	80032b0 <has_even_parity>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <st_fifo_decode+0x7a>
    {
      return ST_FIFO_ERR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f000 bf60 	b.w	8002e32 <st_fifo_decode+0xf3a>
    }

    if (is_tag_valid(tag) == 0u)
 8001f72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 f832 	bl	8002fe0 <is_tag_valid>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <st_fifo_decode+0x90>
    {
      return ST_FIFO_ERR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f000 bf55 	b.w	8002e32 <st_fifo_decode+0xf3a>
    }

    if ((tag_counter != (tag_counter_old)) && dtime_min != 0u)
 8001f88:	4b8a      	ldr	r3, [pc, #552]	; (80021b4 <st_fifo_decode+0x2bc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d025      	beq.n	8001fe0 <st_fifo_decode+0xe8>
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <st_fifo_decode+0x2c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d021      	beq.n	8001fe0 <st_fifo_decode+0xe8>
    {
      uint8_t diff_tag_counter;

      if (tag_counter < tag_counter_old)
 8001f9c:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <st_fifo_decode+0x2bc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d209      	bcs.n	8001fbc <st_fifo_decode+0xc4>
      {
        diff_tag_counter = tag_counter + 4u - tag_counter_old;
 8001fa8:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <st_fifo_decode+0x2bc>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001fba:	e006      	b.n	8001fca <st_fifo_decode+0xd2>
      }
      else
      {
        diff_tag_counter = tag_counter - tag_counter_old;
 8001fbc:	4b7d      	ldr	r3, [pc, #500]	; (80021b4 <st_fifo_decode+0x2bc>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      }

      timestamp += dtime_min * diff_tag_counter;
 8001fca:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001fce:	4a7a      	ldr	r2, [pc, #488]	; (80021b8 <st_fifo_decode+0x2c0>)
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	fb03 f202 	mul.w	r2, r3, r2
 8001fd6:	4b79      	ldr	r3, [pc, #484]	; (80021bc <st_fifo_decode+0x2c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a77      	ldr	r2, [pc, #476]	; (80021bc <st_fifo_decode+0x2c4>)
 8001fde:	6013      	str	r3, [r2, #0]
    }

    if (tag == TAG_ODRCHG)
 8001fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	f040 80d1 	bne.w	800218c <st_fifo_decode+0x294>
    {

      uint8_t bdr_acc_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_XL_MASK) >> BDR_XL_SHIFT;
 8001fea:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	799b      	ldrb	r3, [r3, #6]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      uint8_t bdr_gyr_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_GY_MASK) >> BDR_GY_SHIFT;
 8002002:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4413      	add	r3, r2
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      uint8_t bdr_vsens_cfg = (fifo_raw_slot[i].fifo_data_out[4] & BDR_VSENS_MASK) >> BDR_VSENS_SHIFT;
 8002018:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	4413      	add	r3, r2
 8002026:	791b      	ldrb	r3, [r3, #4]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

      float bdr_xl = device[fifo_ver].bdr_acc[bdr_acc_cfg];
 8002030:	4b5f      	ldr	r3, [pc, #380]	; (80021b0 <st_fifo_decode+0x2b8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800203a:	4961      	ldr	r1, [pc, #388]	; (80021c0 <st_fifo_decode+0x2c8>)
 800203c:	4603      	mov	r3, r0
 800203e:	019b      	lsls	r3, r3, #6
 8002040:	4403      	add	r3, r0
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
      float bdr_gy = device[fifo_ver].bdr_gyr[bdr_gyr_cfg];
 800204c:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <st_fifo_decode+0x2b8>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8002056:	495a      	ldr	r1, [pc, #360]	; (80021c0 <st_fifo_decode+0x2c8>)
 8002058:	4603      	mov	r3, r0
 800205a:	019b      	lsls	r3, r3, #6
 800205c:	4403      	add	r3, r0
 800205e:	4413      	add	r3, r2
 8002060:	3310      	adds	r3, #16
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
      float bdr_vsens = device[fifo_ver].bdr_vsens[bdr_vsens_cfg];
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <st_fifo_decode+0x2b8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002074:	4952      	ldr	r1, [pc, #328]	; (80021c0 <st_fifo_decode+0x2c8>)
 8002076:	4603      	mov	r3, r0
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	4403      	add	r3, r0
 800207c:	4413      	add	r3, r2
 800207e:	3320      	adds	r3, #32
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
      float bdr_max = MAX(bdr_xl, bdr_gy);
 8002088:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800208c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	dd01      	ble.n	800209e <st_fifo_decode+0x1a6>
 800209a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209c:	e000      	b.n	80020a0 <st_fifo_decode+0x1a8>
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
      bdr_max = MAX(bdr_max, bdr_vsens);
 80020a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80020a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	dd01      	ble.n	80020b8 <st_fifo_decode+0x1c0>
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	e000      	b.n	80020ba <st_fifo_decode+0x1c2>
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30

      dtime_xl_old = dtime_xl;
 80020bc:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <st_fifo_decode+0x2cc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <st_fifo_decode+0x2d0>)
 80020c2:	6013      	str	r3, [r2, #0]
      dtime_gy_old = dtime_gy;
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <st_fifo_decode+0x2d4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a41      	ldr	r2, [pc, #260]	; (80021d0 <st_fifo_decode+0x2d8>)
 80020ca:	6013      	str	r3, [r2, #0]
      dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <st_fifo_decode+0x2b8>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461c      	mov	r4, r3
 80020d2:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <st_fifo_decode+0x2b8>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4613      	mov	r3, r2
 80020da:	019b      	lsls	r3, r3, #6
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <st_fifo_decode+0x2c8>)
 80020e2:	4413      	add	r3, r2
 80020e4:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f881 	bl	80031f0 <bdr_get_index>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4619      	mov	r1, r3
 80020f2:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <st_fifo_decode+0x2c8>)
 80020f4:	4623      	mov	r3, r4
 80020f6:	019b      	lsls	r3, r3, #6
 80020f8:	4423      	add	r3, r4
 80020fa:	440b      	add	r3, r1
 80020fc:	3330      	adds	r3, #48	; 0x30
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <st_fifo_decode+0x2c0>)
 8002104:	6013      	str	r3, [r2, #0]
      dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <st_fifo_decode+0x2b8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461c      	mov	r4, r3
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <st_fifo_decode+0x2b8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <st_fifo_decode+0x2c8>)
 800211c:	4413      	add	r3, r2
 800211e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002122:	4618      	mov	r0, r3
 8002124:	f001 f864 	bl	80031f0 <bdr_get_index>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <st_fifo_decode+0x2c8>)
 800212e:	4623      	mov	r3, r4
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	4423      	add	r3, r4
 8002134:	440b      	add	r3, r1
 8002136:	3330      	adds	r3, #48	; 0x30
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <st_fifo_decode+0x2cc>)
 800213e:	6013      	str	r3, [r2, #0]
      dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <st_fifo_decode+0x2b8>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461c      	mov	r4, r3
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <st_fifo_decode+0x2b8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	4613      	mov	r3, r2
 800214e:	019b      	lsls	r3, r3, #6
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	3340      	adds	r3, #64	; 0x40
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <st_fifo_decode+0x2c8>)
 8002158:	4413      	add	r3, r2
 800215a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800215e:	4618      	mov	r0, r3
 8002160:	f001 f846 	bl	80031f0 <bdr_get_index>
 8002164:	4603      	mov	r3, r0
 8002166:	4619      	mov	r1, r3
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <st_fifo_decode+0x2c8>)
 800216a:	4623      	mov	r3, r4
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	4423      	add	r3, r4
 8002170:	440b      	add	r3, r1
 8002172:	3330      	adds	r3, #48	; 0x30
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <st_fifo_decode+0x2d4>)
 800217a:	6013      	str	r3, [r2, #0]

      bdr_chg_xl_flag = 1;
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <st_fifo_decode+0x2dc>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
      bdr_chg_gy_flag = 1;
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <st_fifo_decode+0x2e0>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	f000 be41 	b.w	8002e0e <st_fifo_decode+0xf16>

    }
    else if (tag == TAG_TS)
 800218c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002190:	2b04      	cmp	r3, #4
 8002192:	d123      	bne.n	80021dc <st_fifo_decode+0x2e4>
    {

      (void)memcpy(&timestamp, &fifo_raw_slot[i].fifo_data_out[1], 4);
 8002194:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	3301      	adds	r3, #1
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <st_fifo_decode+0x2c4>)
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f000 be2f 	b.w	8002e0e <st_fifo_decode+0xf16>
 80021b0:	2000cc84 	.word	0x2000cc84
 80021b4:	2000cc85 	.word	0x2000cc85
 80021b8:	2000cc90 	.word	0x2000cc90
 80021bc:	2000cc9c 	.word	0x2000cc9c
 80021c0:	08016958 	.word	0x08016958
 80021c4:	2000cc88 	.word	0x2000cc88
 80021c8:	2000cc94 	.word	0x2000cc94
 80021cc:	2000cc8c 	.word	0x2000cc8c
 80021d0:	2000cc98 	.word	0x2000cc98
 80021d4:	2000cca8 	.word	0x2000cca8
 80021d8:	2000cca9 	.word	0x2000cca9

    }
    else
    {

      st_fifo_compression_type compression_type = get_compression_type(tag);
 80021dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 ffc7 	bl	8003174 <get_compression_type>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      st_fifo_sensor_type sensor_type = get_sensor_type(tag);
 80021ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 ff17 	bl	8003024 <get_sensor_type>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

      if (compression_type == ST_FIFO_COMPRESSION_NC)
 80021fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002200:	2b00      	cmp	r3, #0
 8002202:	d16d      	bne.n	80022e0 <st_fifo_decode+0x3e8>
      {

        if (tag == TAG_EMPTY)
 8002204:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8605 	beq.w	8002e18 <st_fifo_decode+0xf20>
        {
          continue;
        }

        fifo_out_slot[j].timestamp = timestamp;
 800220e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	4ab1      	ldr	r2, [pc, #708]	; (80024e8 <st_fifo_decode+0x5f0>)
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	601a      	str	r2, [r3, #0]

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002226:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800223c:	711a      	strb	r2, [r3, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800223e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8002252:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	4413      	add	r3, r2
 8002260:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002262:	2206      	movs	r2, #6
 8002264:	4619      	mov	r1, r3
 8002266:	f011 f815 	bl	8013294 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 800226a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800226e:	2b01      	cmp	r3, #1
 8002270:	d115      	bne.n	800229e <st_fifo_decode+0x3a6>
        {
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002272:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	3306      	adds	r3, #6
 8002286:	2206      	movs	r2, #6
 8002288:	4619      	mov	r1, r3
 800228a:	4898      	ldr	r0, [pc, #608]	; (80024ec <st_fifo_decode+0x5f4>)
 800228c:	f011 f802 	bl	8013294 <memcpy>
          last_timestamp_xl = timestamp;
 8002290:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <st_fifo_decode+0x5f0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a96      	ldr	r2, [pc, #600]	; (80024f0 <st_fifo_decode+0x5f8>)
 8002296:	6013      	str	r3, [r2, #0]
          bdr_chg_xl_flag = 0;
 8002298:	4b96      	ldr	r3, [pc, #600]	; (80024f4 <st_fifo_decode+0x5fc>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 800229e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <st_fifo_decode+0x3da>
        {
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80022a6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	3306      	adds	r3, #6
 80022ba:	2206      	movs	r2, #6
 80022bc:	4619      	mov	r1, r3
 80022be:	488e      	ldr	r0, [pc, #568]	; (80024f8 <st_fifo_decode+0x600>)
 80022c0:	f010 ffe8 	bl	8013294 <memcpy>
          last_timestamp_gy = timestamp;
 80022c4:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <st_fifo_decode+0x5f0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a8c      	ldr	r2, [pc, #560]	; (80024fc <st_fifo_decode+0x604>)
 80022ca:	6013      	str	r3, [r2, #0]
          bdr_chg_gy_flag = 0;
 80022cc:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <st_fifo_decode+0x608>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
        }

        j++;
 80022d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80022d6:	3301      	adds	r3, #1
 80022d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80022dc:	f000 bd93 	b.w	8002e06 <st_fifo_decode+0xf0e>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_1)
 80022e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	f040 8091 	bne.w	800240c <st_fifo_decode+0x514>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 80022ea:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	189c      	adds	r4, r3, r2
 80022fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fe8f 	bl	8003024 <get_sensor_type>
 8002306:	4603      	mov	r3, r0
 8002308:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800230a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 800231e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	4413      	add	r3, r2
 800232c:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800232e:	2206      	movs	r2, #6
 8002330:	4619      	mov	r1, r3
 8002332:	f010 ffaf 	bl	8013294 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002336:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12d      	bne.n	800239a <st_fifo_decode+0x4a2>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 800233e:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <st_fifo_decode+0x5fc>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d106      	bne.n	8002354 <st_fifo_decode+0x45c>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8002346:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <st_fifo_decode+0x5f8>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b6e      	ldr	r3, [pc, #440]	; (8002504 <st_fifo_decode+0x60c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002352:	e005      	b.n	8002360 <st_fifo_decode+0x468>
          }
          else
          {
            last_timestamp = timestamp - dtime_xl;
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <st_fifo_decode+0x5f0>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b6b      	ldr	r3, [pc, #428]	; (8002508 <st_fifo_decode+0x610>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	65fb      	str	r3, [r7, #92]	; 0x5c
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002360:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002374:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002376:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	3306      	adds	r3, #6
 800238a:	2206      	movs	r2, #6
 800238c:	4619      	mov	r1, r3
 800238e:	4857      	ldr	r0, [pc, #348]	; (80024ec <st_fifo_decode+0x5f4>)
 8002390:	f010 ff80 	bl	8013294 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002394:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <st_fifo_decode+0x5f8>)
 8002396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002398:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 800239a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d12d      	bne.n	80023fe <st_fifo_decode+0x506>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 80023a2:	4b57      	ldr	r3, [pc, #348]	; (8002500 <st_fifo_decode+0x608>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <st_fifo_decode+0x4c0>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <st_fifo_decode+0x604>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b57      	ldr	r3, [pc, #348]	; (800250c <st_fifo_decode+0x614>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023b6:	e005      	b.n	80023c4 <st_fifo_decode+0x4cc>
          }
          else
          {
            last_timestamp = timestamp - dtime_gy;
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <st_fifo_decode+0x5f0>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b54      	ldr	r3, [pc, #336]	; (8002510 <st_fifo_decode+0x618>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	65bb      	str	r3, [r7, #88]	; 0x58
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 80023c4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023d8:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80023da:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	3306      	adds	r3, #6
 80023ee:	2206      	movs	r2, #6
 80023f0:	4619      	mov	r1, r3
 80023f2:	4841      	ldr	r0, [pc, #260]	; (80024f8 <st_fifo_decode+0x600>)
 80023f4:	f010 ff4e 	bl	8013294 <memcpy>
          last_timestamp_gy = last_timestamp;
 80023f8:	4a40      	ldr	r2, [pc, #256]	; (80024fc <st_fifo_decode+0x604>)
 80023fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023fc:	6013      	str	r3, [r2, #0]
        }

        j++;
 80023fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002402:	3301      	adds	r3, #1
 8002404:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002408:	f000 bcfd 	b.w	8002e06 <st_fifo_decode+0xf0e>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_2)
 800240c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002410:	2b02      	cmp	r3, #2
 8002412:	f040 80b3 	bne.w	800257c <st_fifo_decode+0x684>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 8002416:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	189c      	adds	r4, r3, r2
 8002428:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fdf9 	bl	8003024 <get_sensor_type>
 8002432:	4603      	mov	r3, r0
 8002434:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002436:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 800244a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4413      	add	r3, r2
 8002458:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800245a:	2206      	movs	r2, #6
 800245c:	4619      	mov	r1, r3
 800245e:	f010 ff19 	bl	8013294 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002462:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d12e      	bne.n	80024c8 <st_fifo_decode+0x5d0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <st_fifo_decode+0x5fc>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d106      	bne.n	8002480 <st_fifo_decode+0x588>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8002472:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <st_fifo_decode+0x5f8>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <st_fifo_decode+0x60c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	657b      	str	r3, [r7, #84]	; 0x54
 800247e:	e006      	b.n	800248e <st_fifo_decode+0x596>
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_xl;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <st_fifo_decode+0x5f0>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <st_fifo_decode+0x610>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	657b      	str	r3, [r7, #84]	; 0x54
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 800248e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024a2:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80024a4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	461a      	mov	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	3306      	adds	r3, #6
 80024b8:	2206      	movs	r2, #6
 80024ba:	4619      	mov	r1, r3
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <st_fifo_decode+0x5f4>)
 80024be:	f010 fee9 	bl	8013294 <memcpy>
          last_timestamp_xl = last_timestamp;
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <st_fifo_decode+0x5f8>)
 80024c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c6:	6013      	str	r3, [r2, #0]
        }
        if (sensor_type == ST_FIFO_GYROSCOPE)
 80024c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d145      	bne.n	800255c <st_fifo_decode+0x664>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <st_fifo_decode+0x608>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d11d      	bne.n	8002514 <st_fifo_decode+0x61c>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <st_fifo_decode+0x604>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <st_fifo_decode+0x614>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	653b      	str	r3, [r7, #80]	; 0x50
 80024e4:	e01d      	b.n	8002522 <st_fifo_decode+0x62a>
 80024e6:	bf00      	nop
 80024e8:	2000cc9c 	.word	0x2000cc9c
 80024ec:	2000ccac 	.word	0x2000ccac
 80024f0:	2000cca0 	.word	0x2000cca0
 80024f4:	2000cca8 	.word	0x2000cca8
 80024f8:	2000ccb4 	.word	0x2000ccb4
 80024fc:	2000cca4 	.word	0x2000cca4
 8002500:	2000cca9 	.word	0x2000cca9
 8002504:	2000cc94 	.word	0x2000cc94
 8002508:	2000cc88 	.word	0x2000cc88
 800250c:	2000cc98 	.word	0x2000cc98
 8002510:	2000cc8c 	.word	0x2000cc8c
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_gy;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <st_fifo_decode+0x674>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <st_fifo_decode+0x678>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	653b      	str	r3, [r7, #80]	; 0x50
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002522:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002536:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002538:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4413      	add	r3, r2
 800254a:	3306      	adds	r3, #6
 800254c:	2206      	movs	r2, #6
 800254e:	4619      	mov	r1, r3
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <st_fifo_decode+0x67c>)
 8002552:	f010 fe9f 	bl	8013294 <memcpy>
          last_timestamp_gy = last_timestamp;
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <st_fifo_decode+0x680>)
 8002558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255a:	6013      	str	r3, [r2, #0]
        }

        j++;
 800255c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002560:	3301      	adds	r3, #1
 8002562:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002566:	f000 bc4e 	b.w	8002e06 <st_fifo_decode+0xf0e>
 800256a:	bf00      	nop
 800256c:	2000cc9c 	.word	0x2000cc9c
 8002570:	2000cc8c 	.word	0x2000cc8c
 8002574:	2000ccb4 	.word	0x2000ccb4
 8002578:	2000cca4 	.word	0x2000cca4

      }
      else if (compression_type == ST_FIFO_COMPRESSION_2X)
 800257c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002580:	2b03      	cmp	r3, #3
 8002582:	f040 81c7 	bne.w	8002914 <st_fifo_decode+0xa1c>
      {

        int16_t diff[6];
        get_diff_2x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8002586:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	4413      	add	r3, r2
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f000 feb2 	bl	8003306 <get_diff_2x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 80025a2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80025b8:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80025ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d15a      	bne.n	8002678 <st_fifo_decode+0x780>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 80025c2:	4bbf      	ldr	r3, [pc, #764]	; (80028c0 <st_fifo_decode+0x9c8>)
 80025c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	b299      	uxth	r1, r3
 80025d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	461a      	mov	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4413      	add	r3, r2
 80025e6:	b20a      	sxth	r2, r1
 80025e8:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 80025ea:	4bb5      	ldr	r3, [pc, #724]	; (80028c0 <st_fifo_decode+0x9c8>)
 80025ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	b299      	uxth	r1, r3
 80025fc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	b20a      	sxth	r2, r1
 8002610:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002612:	4bab      	ldr	r3, [pc, #684]	; (80028c0 <st_fifo_decode+0x9c8>)
 8002614:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002618:	b29a      	uxth	r2, r3
 800261a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800261e:	b29b      	uxth	r3, r3
 8002620:	4413      	add	r3, r2
 8002622:	b299      	uxth	r1, r3
 8002624:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	b20a      	sxth	r2, r1
 8002638:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 800263a:	4ba2      	ldr	r3, [pc, #648]	; (80028c4 <st_fifo_decode+0x9cc>)
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	4ba2      	ldr	r3, [pc, #648]	; (80028c8 <st_fifo_decode+0x9d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0059      	lsls	r1, r3, #1
 8002644:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	1a42      	subs	r2, r0, r1
 8002658:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 800265a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	3306      	adds	r3, #6
 800266e:	2206      	movs	r2, #6
 8002670:	4619      	mov	r1, r3
 8002672:	4893      	ldr	r0, [pc, #588]	; (80028c0 <st_fifo_decode+0x9c8>)
 8002674:	f010 fe0e 	bl	8013294 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002678:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d15a      	bne.n	8002736 <st_fifo_decode+0x83e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002680:	4b92      	ldr	r3, [pc, #584]	; (80028cc <st_fifo_decode+0x9d4>)
 8002682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800268c:	b29b      	uxth	r3, r3
 800268e:	4413      	add	r3, r2
 8002690:	b299      	uxth	r1, r3
 8002692:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	b20a      	sxth	r2, r1
 80026a6:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 80026a8:	4b88      	ldr	r3, [pc, #544]	; (80028cc <st_fifo_decode+0x9d4>)
 80026aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	b299      	uxth	r1, r3
 80026ba:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	b20a      	sxth	r2, r1
 80026ce:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <st_fifo_decode+0x9d4>)
 80026d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4413      	add	r3, r2
 80026e0:	b299      	uxth	r1, r3
 80026e2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	b20a      	sxth	r2, r1
 80026f6:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 80026f8:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <st_fifo_decode+0x9cc>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <st_fifo_decode+0x9d8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0059      	lsls	r1, r3, #1
 8002702:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	461a      	mov	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	1a42      	subs	r2, r0, r1
 8002716:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002718:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	3306      	adds	r3, #6
 800272c:	2206      	movs	r2, #6
 800272e:	4619      	mov	r1, r3
 8002730:	4866      	ldr	r0, [pc, #408]	; (80028cc <st_fifo_decode+0x9d4>)
 8002732:	f010 fdaf 	bl	8013294 <memcpy>
        }

        j++;
 8002736:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800273a:	3301      	adds	r3, #1
 800273c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002740:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	461a      	mov	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002756:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002758:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d15e      	bne.n	800281e <st_fifo_decode+0x926>
        {
          uint32_t last_timestamp = timestamp - dtime_xl;
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <st_fifo_decode+0x9cc>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <st_fifo_decode+0x9d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 800276c:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <st_fifo_decode+0x9c8>)
 800276e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002772:	b29a      	uxth	r2, r3
 8002774:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	4413      	add	r3, r2
 800277c:	b299      	uxth	r1, r3
 800277e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	b20a      	sxth	r2, r1
 8002792:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002794:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <st_fifo_decode+0x9c8>)
 8002796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800279a:	b29a      	uxth	r2, r3
 800279c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	b299      	uxth	r1, r3
 80027a6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	b20a      	sxth	r2, r1
 80027ba:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <st_fifo_decode+0x9c8>)
 80027be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	b299      	uxth	r1, r3
 80027ce:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	b20a      	sxth	r2, r1
 80027e2:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 80027e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	461a      	mov	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f8:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80027fa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	3306      	adds	r3, #6
 800280e:	2206      	movs	r2, #6
 8002810:	4619      	mov	r1, r3
 8002812:	482b      	ldr	r0, [pc, #172]	; (80028c0 <st_fifo_decode+0x9c8>)
 8002814:	f010 fd3e 	bl	8013294 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002818:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <st_fifo_decode+0x9dc>)
 800281a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281c:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 800281e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d16c      	bne.n	8002900 <st_fifo_decode+0xa08>
        {
          uint32_t last_timestamp = timestamp - dtime_gy;
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <st_fifo_decode+0x9cc>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <st_fifo_decode+0x9d8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	647b      	str	r3, [r7, #68]	; 0x44
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <st_fifo_decode+0x9d4>)
 8002834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002838:	b29a      	uxth	r2, r3
 800283a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b299      	uxth	r1, r3
 8002844:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	461a      	mov	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	b20a      	sxth	r2, r1
 8002858:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <st_fifo_decode+0x9d4>)
 800285c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002860:	b29a      	uxth	r2, r3
 8002862:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002866:	b29b      	uxth	r3, r3
 8002868:	4413      	add	r3, r2
 800286a:	b299      	uxth	r1, r3
 800286c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4413      	add	r3, r2
 800287e:	b20a      	sxth	r2, r1
 8002880:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <st_fifo_decode+0x9d4>)
 8002884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002888:	b29a      	uxth	r2, r3
 800288a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800288e:	b29b      	uxth	r3, r3
 8002890:	4413      	add	r3, r2
 8002892:	b299      	uxth	r1, r3
 8002894:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	b20a      	sxth	r2, r1
 80028a8:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 80028aa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	e00c      	b.n	80028d8 <st_fifo_decode+0x9e0>
 80028be:	bf00      	nop
 80028c0:	2000ccac 	.word	0x2000ccac
 80028c4:	2000cc9c 	.word	0x2000cc9c
 80028c8:	2000cc88 	.word	0x2000cc88
 80028cc:	2000ccb4 	.word	0x2000ccb4
 80028d0:	2000cc8c 	.word	0x2000cc8c
 80028d4:	2000cca0 	.word	0x2000cca0
 80028d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028da:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80028dc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	3306      	adds	r3, #6
 80028f0:	2206      	movs	r2, #6
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <st_fifo_decode+0xa14>)
 80028f6:	f010 fccd 	bl	8013294 <memcpy>
          last_timestamp_gy = last_timestamp;
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <st_fifo_decode+0xa18>)
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fe:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002900:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002904:	3301      	adds	r3, #1
 8002906:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800290a:	e27c      	b.n	8002e06 <st_fifo_decode+0xf0e>
 800290c:	2000ccb4 	.word	0x2000ccb4
 8002910:	2000cca4 	.word	0x2000cca4

      }
      else /* compression_type == ST_FIFO_COMPRESSION_3X */
      {
        int16_t diff[9];
        get_diff_3x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8002914:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fd1b 	bl	8003366 <get_diff_3x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002930:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	461a      	mov	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002946:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002948:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d15a      	bne.n	8002a06 <st_fifo_decode+0xb0e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002950:	4bc1      	ldr	r3, [pc, #772]	; (8002c58 <st_fifo_decode+0xd60>)
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	b29a      	uxth	r2, r3
 8002958:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800295c:	b29b      	uxth	r3, r3
 800295e:	4413      	add	r3, r2
 8002960:	b299      	uxth	r1, r3
 8002962:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	b20a      	sxth	r2, r1
 8002976:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8002978:	4bb7      	ldr	r3, [pc, #732]	; (8002c58 <st_fifo_decode+0xd60>)
 800297a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800297e:	b29a      	uxth	r2, r3
 8002980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002984:	b29b      	uxth	r3, r3
 8002986:	4413      	add	r3, r2
 8002988:	b299      	uxth	r1, r3
 800298a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	b20a      	sxth	r2, r1
 800299e:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 80029a0:	4bad      	ldr	r3, [pc, #692]	; (8002c58 <st_fifo_decode+0xd60>)
 80029a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	b299      	uxth	r1, r3
 80029b2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	b20a      	sxth	r2, r1
 80029c6:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 80029c8:	4ba4      	ldr	r3, [pc, #656]	; (8002c5c <st_fifo_decode+0xd64>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	4ba4      	ldr	r3, [pc, #656]	; (8002c60 <st_fifo_decode+0xd68>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0059      	lsls	r1, r3, #1
 80029d2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	1a42      	subs	r2, r0, r1
 80029e6:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80029e8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	461a      	mov	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	3306      	adds	r3, #6
 80029fc:	2206      	movs	r2, #6
 80029fe:	4619      	mov	r1, r3
 8002a00:	4895      	ldr	r0, [pc, #596]	; (8002c58 <st_fifo_decode+0xd60>)
 8002a02:	f010 fc47 	bl	8013294 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002a06:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d15a      	bne.n	8002ac4 <st_fifo_decode+0xbcc>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002a0e:	4b95      	ldr	r3, [pc, #596]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	b299      	uxth	r1, r3
 8002a20:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	b20a      	sxth	r2, r1
 8002a34:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002a36:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	b299      	uxth	r1, r3
 8002a48:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	461a      	mov	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b20a      	sxth	r2, r1
 8002a5c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002a5e:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002a60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b299      	uxth	r1, r3
 8002a70:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	b20a      	sxth	r2, r1
 8002a84:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002a86:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <st_fifo_decode+0xd64>)
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <st_fifo_decode+0xd70>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0059      	lsls	r1, r3, #1
 8002a90:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	1a42      	subs	r2, r0, r1
 8002aa4:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002aa6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3306      	adds	r3, #6
 8002aba:	2206      	movs	r2, #6
 8002abc:	4619      	mov	r1, r3
 8002abe:	4869      	ldr	r0, [pc, #420]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002ac0:	f010 fbe8 	bl	8013294 <memcpy>
        }

        j++;
 8002ac4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002ace:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002ae4:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002ae6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d159      	bne.n	8002ba2 <st_fifo_decode+0xcaa>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <st_fifo_decode+0xd60>)
 8002af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	b299      	uxth	r1, r3
 8002b00:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	b20a      	sxth	r2, r1
 8002b14:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002b16:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <st_fifo_decode+0xd60>)
 8002b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	b299      	uxth	r1, r3
 8002b28:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	b20a      	sxth	r2, r1
 8002b3c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 8002b3e:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <st_fifo_decode+0xd60>)
 8002b40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b299      	uxth	r1, r3
 8002b50:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	b20a      	sxth	r2, r1
 8002b64:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_xl;
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <st_fifo_decode+0xd64>)
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <st_fifo_decode+0xd68>)
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	1a42      	subs	r2, r0, r1
 8002b82:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002b84:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	3306      	adds	r3, #6
 8002b98:	2206      	movs	r2, #6
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	482e      	ldr	r0, [pc, #184]	; (8002c58 <st_fifo_decode+0xd60>)
 8002b9e:	f010 fb79 	bl	8013294 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002ba2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d165      	bne.n	8002c76 <st_fifo_decode+0xd7e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b299      	uxth	r1, r3
 8002bbc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	b20a      	sxth	r2, r1
 8002bd0:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002bd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	b299      	uxth	r1, r3
 8002be4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b20a      	sxth	r2, r1
 8002bf8:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <st_fifo_decode+0xd6c>)
 8002bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b20a      	sxth	r2, r1
 8002c20:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_gy;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <st_fifo_decode+0xd64>)
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <st_fifo_decode+0xd70>)
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	1a42      	subs	r2, r0, r1
 8002c3e:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002c40:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3306      	adds	r3, #6
 8002c54:	e00a      	b.n	8002c6c <st_fifo_decode+0xd74>
 8002c56:	bf00      	nop
 8002c58:	2000ccac 	.word	0x2000ccac
 8002c5c:	2000cc9c 	.word	0x2000cc9c
 8002c60:	2000cc88 	.word	0x2000cc88
 8002c64:	2000ccb4 	.word	0x2000ccb4
 8002c68:	2000cc8c 	.word	0x2000cc8c
 8002c6c:	2206      	movs	r2, #6
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4872      	ldr	r0, [pc, #456]	; (8002e3c <st_fifo_decode+0xf44>)
 8002c72:	f010 fb0f 	bl	8013294 <memcpy>
        }

        j++;
 8002c76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].timestamp = timestamp;
 8002c80:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a6b      	ldr	r2, [pc, #428]	; (8002e40 <st_fifo_decode+0xf48>)
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	601a      	str	r2, [r3, #0]
        fifo_out_slot[j].sensor_tag = sensor_type;
 8002c98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002cae:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002cb0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d14e      	bne.n	8002d56 <st_fifo_decode+0xe5e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[6];
 8002cb8:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <st_fifo_decode+0xf4c>)
 8002cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b299      	uxth	r1, r3
 8002cca:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	b20a      	sxth	r2, r1
 8002cde:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[7];
 8002ce0:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <st_fifo_decode+0xf4c>)
 8002ce2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	b299      	uxth	r1, r3
 8002cf2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	b20a      	sxth	r2, r1
 8002d06:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[8];
 8002d08:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <st_fifo_decode+0xf4c>)
 8002d0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	b299      	uxth	r1, r3
 8002d1a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b20a      	sxth	r2, r1
 8002d2e:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002d30:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4413      	add	r3, r2
 8002d42:	3306      	adds	r3, #6
 8002d44:	2206      	movs	r2, #6
 8002d46:	4619      	mov	r1, r3
 8002d48:	483e      	ldr	r0, [pc, #248]	; (8002e44 <st_fifo_decode+0xf4c>)
 8002d4a:	f010 faa3 	bl	8013294 <memcpy>
          last_timestamp_xl = timestamp;
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <st_fifo_decode+0xf48>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <st_fifo_decode+0xf50>)
 8002d54:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002d56:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d14e      	bne.n	8002dfc <st_fifo_decode+0xf04>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[6];
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <st_fifo_decode+0xf44>)
 8002d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b299      	uxth	r1, r3
 8002d70:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	b20a      	sxth	r2, r1
 8002d84:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[7];
 8002d86:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <st_fifo_decode+0xf44>)
 8002d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	b299      	uxth	r1, r3
 8002d98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	b20a      	sxth	r2, r1
 8002dac:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[8];
 8002dae:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <st_fifo_decode+0xf44>)
 8002db0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b299      	uxth	r1, r3
 8002dc0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b20a      	sxth	r2, r1
 8002dd4:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002dd6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	3306      	adds	r3, #6
 8002dea:	2206      	movs	r2, #6
 8002dec:	4619      	mov	r1, r3
 8002dee:	4813      	ldr	r0, [pc, #76]	; (8002e3c <st_fifo_decode+0xf44>)
 8002df0:	f010 fa50 	bl	8013294 <memcpy>
          last_timestamp_gy = timestamp;
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <st_fifo_decode+0xf48>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <st_fifo_decode+0xf54>)
 8002dfa:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002dfc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e00:	3301      	adds	r3, #1
 8002e02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      *out_slot_size = j;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e0c:	801a      	strh	r2, [r3, #0]
    }

    tag_counter_old = tag_counter;
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <st_fifo_decode+0xf58>)
 8002e10:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002e14:	7013      	strb	r3, [r2, #0]
 8002e16:	e000      	b.n	8002e1a <st_fifo_decode+0xf22>
          continue;
 8002e18:	bf00      	nop
  for (uint16_t i = 0; i < stream_size; i++)
 8002e1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002e24:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	f4ff a873 	bcc.w	8001f16 <st_fifo_decode+0x1e>
  }

  return ST_FIFO_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	376c      	adds	r7, #108	; 0x6c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000ccb4 	.word	0x2000ccb4
 8002e40:	2000cc9c 	.word	0x2000cc9c
 8002e44:	2000ccac 	.word	0x2000ccac
 8002e48:	2000cca0 	.word	0x2000cca0
 8002e4c:	2000cca4 	.word	0x2000cca4
 8002e50:	2000cc85 	.word	0x2000cc85

08002e54 <st_fifo_sort>:
  * @param  fifo_out_slot     decoded output stream to sort.(ptr)
  * @param  out_slot_size     decoded stream size.
  *
  */
void st_fifo_sort(st_fifo_out_slot *fifo_out_slot, uint16_t out_slot_size)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
  int32_t i;
  int32_t j;
  st_fifo_out_slot temp;

  for (i = 1; i < (int32_t)out_slot_size; i++)
 8002e60:	2301      	movs	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	e04a      	b.n	8002efc <st_fifo_sort+0xa8>
  {
    (void)memcpy(&temp, &fifo_out_slot[i], sizeof(st_fifo_out_slot));
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	1899      	adds	r1, r3, r2
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f010 fa09 	bl	8013294 <memcpy>

    j = i - 1;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	61bb      	str	r3, [r7, #24]

    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 8002e88:	e017      	b.n	8002eba <st_fifo_sort+0x66>
    {
      (void)memcpy(&fifo_out_slot[j + 1], &fifo_out_slot[j],
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	461a      	mov	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1898      	adds	r0, r3, r2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	220c      	movs	r2, #12
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f010 f9f0 	bl	8013294 <memcpy>
                   sizeof(st_fifo_out_slot));
      j--;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0b      	blt.n	8002ed8 <st_fifo_sort+0x84>
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d8d8      	bhi.n	8002e8a <st_fifo_sort+0x36>
    }

    (void)memcpy(&fifo_out_slot[j + 1], &temp, sizeof(st_fifo_out_slot));
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f107 010c 	add.w	r1, r7, #12
 8002eee:	220c      	movs	r2, #12
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f010 f9cf 	bl	8013294 <memcpy>
  for (i = 1; i < (int32_t)out_slot_size; i++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	dbb0      	blt.n	8002e66 <st_fifo_sort+0x12>
  }

  return;
 8002f04:	bf00      	nop
}
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <st_fifo_get_sensor_occurrence>:
  *                           decoded FIFO stream.
  *
  */
uint16_t st_fifo_get_sensor_occurrence(st_fifo_out_slot *fifo_out_slot,
                                       uint16_t out_slot_size, st_fifo_sensor_type sensor_type)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  uint16_t occurrence = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	81fb      	strh	r3, [r7, #14]

  for (uint16_t i = 0; i < out_slot_size; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	81bb      	strh	r3, [r7, #12]
 8002f24:	e011      	b.n	8002f4a <st_fifo_get_sensor_occurrence+0x3e>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 8002f26:	89ba      	ldrh	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	787a      	ldrb	r2, [r7, #1]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d102      	bne.n	8002f44 <st_fifo_get_sensor_occurrence+0x38>
    {
      occurrence++;
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	3301      	adds	r3, #1
 8002f42:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8002f44:	89bb      	ldrh	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	81bb      	strh	r3, [r7, #12]
 8002f4a:	89ba      	ldrh	r2, [r7, #12]
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3e9      	bcc.n	8002f26 <st_fifo_get_sensor_occurrence+0x1a>
    }
  }

  return occurrence;
 8002f52:	89fb      	ldrh	r3, [r7, #14]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <st_fifo_extract_sensor>:
  *
  */
void st_fifo_extract_sensor(st_fifo_out_slot *sensor_out_slot,
                            st_fifo_out_slot *fifo_out_slot, uint16_t  out_slot_size,
                            st_fifo_sensor_type sensor_type)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	460b      	mov	r3, r1
 8002f70:	80fb      	strh	r3, [r7, #6]
 8002f72:	4613      	mov	r3, r2
 8002f74:	717b      	strb	r3, [r7, #5]
  uint16_t temp_i = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	82fb      	strh	r3, [r7, #22]

  for (uint16_t i = 0; i < out_slot_size; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	82bb      	strh	r3, [r7, #20]
 8002f7e:	e025      	b.n	8002fcc <st_fifo_extract_sensor+0x6c>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 8002f80:	8aba      	ldrh	r2, [r7, #20]
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4413      	add	r3, r2
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	797a      	ldrb	r2, [r7, #5]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d116      	bne.n	8002fc6 <st_fifo_extract_sensor+0x66>
    {
      (void)memcpy(&sensor_out_slot[temp_i], &fifo_out_slot[i],
 8002f98:	8afa      	ldrh	r2, [r7, #22]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1898      	adds	r0, r3, r2
 8002fa8:	8aba      	ldrh	r2, [r7, #20]
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	220c      	movs	r2, #12
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f010 f96a 	bl	8013294 <memcpy>
                   sizeof(st_fifo_out_slot));
      temp_i++;
 8002fc0:	8afb      	ldrh	r3, [r7, #22]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	82fb      	strh	r3, [r7, #22]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8002fc6:	8abb      	ldrh	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	82bb      	strh	r3, [r7, #20]
 8002fcc:	8aba      	ldrh	r2, [r7, #20]
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3d5      	bcc.n	8002f80 <st_fifo_extract_sensor+0x20>
    }
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <is_tag_valid>:
  *
  * @retval uint8_t           valid (1) or invalid (0) tag.
  *
  */
static uint8_t is_tag_valid(uint8_t tag)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if (tag > device[fifo_ver].tag_valid_limit)
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <is_tag_valid+0x3c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <is_tag_valid+0x40>)
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	440b      	add	r3, r1
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	79fa      	ldrb	r2, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d901      	bls.n	800300c <is_tag_valid+0x2c>
  {
    return 0;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <is_tag_valid+0x2e>
  }
  else
  {
    return 1;
 800300c:	2301      	movs	r3, #1
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2000cc84 	.word	0x2000cc84
 8003020:	08016958 	.word	0x08016958

08003024 <get_sensor_type>:
  *
  * @retval st_fifo_sensor_type    sensor type.
  *
  */
static st_fifo_sensor_type get_sensor_type(uint8_t tag)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  st_fifo_sensor_type type;

  switch (tag)
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	3b01      	subs	r3, #1
 8003032:	2b1d      	cmp	r3, #29
 8003034:	f200 8094 	bhi.w	8003160 <get_sensor_type+0x13c>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <get_sensor_type+0x1c>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	080030b9 	.word	0x080030b9
 8003044:	080030bf 	.word	0x080030bf
 8003048:	080030c5 	.word	0x080030c5
 800304c:	08003161 	.word	0x08003161
 8003050:	08003161 	.word	0x08003161
 8003054:	080030e9 	.word	0x080030e9
 8003058:	080030ef 	.word	0x080030ef
 800305c:	080030f5 	.word	0x080030f5
 8003060:	080030fb 	.word	0x080030fb
 8003064:	08003101 	.word	0x08003101
 8003068:	08003107 	.word	0x08003107
 800306c:	0800310d 	.word	0x0800310d
 8003070:	08003113 	.word	0x08003113
 8003074:	080030cb 	.word	0x080030cb
 8003078:	080030d1 	.word	0x080030d1
 800307c:	080030d7 	.word	0x080030d7
 8003080:	080030dd 	.word	0x080030dd
 8003084:	080030e3 	.word	0x080030e3
 8003088:	08003119 	.word	0x08003119
 800308c:	0800311f 	.word	0x0800311f
 8003090:	08003125 	.word	0x08003125
 8003094:	0800312b 	.word	0x0800312b
 8003098:	08003131 	.word	0x08003131
 800309c:	08003137 	.word	0x08003137
 80030a0:	0800313d 	.word	0x0800313d
 80030a4:	08003143 	.word	0x08003143
 80030a8:	08003149 	.word	0x08003149
 80030ac:	0800314f 	.word	0x0800314f
 80030b0:	08003155 	.word	0x08003155
 80030b4:	0800315b 	.word	0x0800315b
  {
    case TAG_GY:
      type = ST_FIFO_GYROSCOPE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e053      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_XL:
      type = ST_FIFO_ACCELEROMETER;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      break;
 80030c2:	e050      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_TEMP:
      type = ST_FIFO_TEMPERATURE;
 80030c4:	2302      	movs	r3, #2
 80030c6:	73fb      	strb	r3, [r7, #15]
      break;
 80030c8:	e04d      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_EXT_SENS_0:
      type = ST_FIFO_EXT_SENSOR0;
 80030ca:	2303      	movs	r3, #3
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e04a      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_EXT_SENS_1:
      type = ST_FIFO_EXT_SENSOR1;
 80030d0:	2304      	movs	r3, #4
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e047      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_EXT_SENS_2:
      type = ST_FIFO_EXT_SENSOR2;
 80030d6:	2305      	movs	r3, #5
 80030d8:	73fb      	strb	r3, [r7, #15]
      break;
 80030da:	e044      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_EXT_SENS_3:
      type = ST_FIFO_EXT_SENSOR3;
 80030dc:	2306      	movs	r3, #6
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e041      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_STEP_COUNTER:
      type = ST_FIFO_STEP_COUNTER;
 80030e2:	2307      	movs	r3, #7
 80030e4:	73fb      	strb	r3, [r7, #15]
      break;
 80030e6:	e03e      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_ACCELEROMETER;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e03b      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_ACCELEROMETER;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      break;
 80030f2:	e038      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_ACCELEROMETER;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e035      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_ACCELEROMETER;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      break;
 80030fe:	e032      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_GYROSCOPE;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e02f      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_GYROSCOPE;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
      break;
 800310a:	e02c      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_GYROSCOPE;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e029      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_GYROSCOPE;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
      break;
 8003116:	e026      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GAME_RV:
      type = ST_FIFO_6X_GAME_RV;
 8003118:	2308      	movs	r3, #8
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e023      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GEOM_RV:
      type = ST_FIFO_6X_GEOM_RV;
 800311e:	2309      	movs	r3, #9
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e020      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_NORM_RV:
      type = ST_FIFO_9X_RV;
 8003124:	230a      	movs	r3, #10
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e01d      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GYRO_BIAS:
      type = ST_FIFO_GYRO_BIAS;
 800312a:	230b      	movs	r3, #11
 800312c:	73fb      	strb	r3, [r7, #15]
      break;
 800312e:	e01a      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_GRAVITIY:
      type = ST_FIFO_GRAVITY;
 8003130:	230c      	movs	r3, #12
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e017      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_MAG_CAL:
      type = ST_FIFO_MAGNETOMETER_CALIB;
 8003136:	230d      	movs	r3, #13
 8003138:	73fb      	strb	r3, [r7, #15]
      break;
 800313a:	e014      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_EXT_SENS_NACK:
      type = ST_FIFO_EXT_SENSOR_NACK;
 800313c:	230e      	movs	r3, #14
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e011      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_MLC_RESULT:
      type = ST_FIFO_MLC_RESULT;
 8003142:	230f      	movs	r3, #15
 8003144:	73fb      	strb	r3, [r7, #15]
      break;
 8003146:	e00e      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_MLC_FILTER:
      type = ST_FIFO_MLC_FILTER;
 8003148:	2310      	movs	r3, #16
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e00b      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_MLC_FEATURE:
      type = ST_FIFO_MLC_FEATURE;
 800314e:	2311      	movs	r3, #17
 8003150:	73fb      	strb	r3, [r7, #15]
      break;
 8003152:	e008      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_DUALC_XL:
      type = ST_FIFO_DUALC_ACCELEROMETER;
 8003154:	2312      	movs	r3, #18
 8003156:	73fb      	strb	r3, [r7, #15]
      break;
 8003158:	e005      	b.n	8003166 <get_sensor_type+0x142>
    case TAG_EIS_GY:
      type = ST_FIFO_EIS_GYROSCOPE;
 800315a:	2313      	movs	r3, #19
 800315c:	73fb      	strb	r3, [r7, #15]
      break;
 800315e:	e002      	b.n	8003166 <get_sensor_type+0x142>
    default:
      type = ST_FIFO_NONE;
 8003160:	2314      	movs	r3, #20
 8003162:	73fb      	strb	r3, [r7, #15]
      break;
 8003164:	bf00      	nop
  }

  return type;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <get_compression_type>:
  *
  * @retval st_fifo_compression_type    compression type.
  *
  */
static st_fifo_compression_type get_compression_type(uint8_t tag)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  st_fifo_compression_type type;

  switch (tag)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	3b06      	subs	r3, #6
 8003182:	2b07      	cmp	r3, #7
 8003184:	d82a      	bhi.n	80031dc <get_compression_type+0x68>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <get_compression_type+0x18>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	080031ad 	.word	0x080031ad
 8003190:	080031b3 	.word	0x080031b3
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031bf 	.word	0x080031bf
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031d7 	.word	0x080031d7
  {
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 80031ac:	2302      	movs	r3, #2
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e017      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      break;
 80031b6:	e014      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 80031b8:	2303      	movs	r3, #3
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e011      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 80031be:	2304      	movs	r3, #4
 80031c0:	73fb      	strb	r3, [r7, #15]
      break;
 80031c2:	e00e      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 80031c4:	2302      	movs	r3, #2
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e00b      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      break;
 80031ce:	e008      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 80031d0:	2303      	movs	r3, #3
 80031d2:	73fb      	strb	r3, [r7, #15]
      break;
 80031d4:	e005      	b.n	80031e2 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 80031d6:	2304      	movs	r3, #4
 80031d8:	73fb      	strb	r3, [r7, #15]
      break;
 80031da:	e002      	b.n	80031e2 <get_compression_type+0x6e>
    default:
      type = ST_FIFO_COMPRESSION_NC;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	bf00      	nop
  }

  return type;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <bdr_get_index>:
  *
  * @retval uint8_t           index of the nearest BDR.
  *
  */
static uint8_t bdr_get_index(const float *bdr, float n)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b095      	sub	sp, #84	; 0x54
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	ed87 0a00 	vstr	s0, [r7]
  float diff[16], min = FLT_MAX;
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <bdr_get_index+0xbc>)
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t idx = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  for (uint8_t i = 0; i < 16u; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800320c:	e019      	b.n	8003242 <bdr_get_index+0x52>
  {
    diff[i] = fabsf(bdr[i] - n);
 800320e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	ed93 7a00 	vldr	s14, [r3]
 800321c:	edd7 7a00 	vldr	s15, [r7]
 8003220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003224:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003228:	eef0 7ae7 	vabs.f32	s15, s15
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	3350      	adds	r3, #80	; 0x50
 8003230:	443b      	add	r3, r7
 8003232:	3b48      	subs	r3, #72	; 0x48
 8003234:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 16u; i++)
 8003238:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800323c:	3301      	adds	r3, #1
 800323e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003242:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003246:	2b0f      	cmp	r3, #15
 8003248:	d9e1      	bls.n	800320e <bdr_get_index+0x1e>
  }

  for (uint8_t i = 0; i < 16u; i++)
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003250:	e01f      	b.n	8003292 <bdr_get_index+0xa2>
  {
    if (diff[i] < min)
 8003252:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	3350      	adds	r3, #80	; 0x50
 800325a:	443b      	add	r3, r7
 800325c:	3b48      	subs	r3, #72	; 0x48
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	dd0b      	ble.n	8003288 <bdr_get_index+0x98>
    {
      min = diff[i];
 8003270:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3350      	adds	r3, #80	; 0x50
 8003278:	443b      	add	r3, r7
 800327a:	3b48      	subs	r3, #72	; 0x48
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
      idx = i;
 8003280:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003284:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  for (uint8_t i = 0; i < 16u; i++)
 8003288:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800328c:	3301      	adds	r3, #1
 800328e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003292:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d9db      	bls.n	8003252 <bdr_get_index+0x62>
    }
  }

  return idx;
 800329a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3754      	adds	r7, #84	; 0x54
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	7f7fffff 	.word	0x7f7fffff

080032b0 <has_even_parity>:
  *
  * @retval uint8_t           the byte has even parity (1) or not (0).
  *
  */
static uint8_t has_even_parity(uint8_t x)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0x00, b = 0x01;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	2301      	movs	r3, #1
 80032c0:	737b      	strb	r3, [r7, #13]

  for (uint8_t i = 0; i < 8u; i++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	73bb      	strb	r3, [r7, #14]
 80032c6:	e00d      	b.n	80032e4 <has_even_parity+0x34>
  {
    if ((x & (b << i)) != 0x00u)
 80032c8:	79fa      	ldrb	r2, [r7, #7]
 80032ca:	7b79      	ldrb	r1, [r7, #13]
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <has_even_parity+0x2e>
    {
      count++;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	3301      	adds	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 8u; i++)
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	3301      	adds	r3, #1
 80032e2:	73bb      	strb	r3, [r7, #14]
 80032e4:	7bbb      	ldrb	r3, [r7, #14]
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d9ee      	bls.n	80032c8 <has_even_parity+0x18>
    }
  }

  if ((count & 0x01u) == 0x01u)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <has_even_parity+0x48>
  {
    return 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <has_even_parity+0x4a>
  }

  return 1;
 80032f8:	2301      	movs	r3, #1
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <get_diff_2x>:
  * @param  diff[6]           compressed data (2x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_2x(int16_t diff[6], uint8_t input[6])
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 6u; i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e01d      	b.n	8003352 <get_diff_2x+0x4c>
  {
    diff[i] = input[i] < 128u ? (int16_t)input[i] : (int16_t)input[i] - 256;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b25b      	sxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	db05      	blt.n	8003330 <get_diff_2x+0x2a>
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4413      	add	r3, r2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b21b      	sxth	r3, r3
 800332e:	e008      	b.n	8003342 <get_diff_2x+0x3c>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	4413      	add	r3, r2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800333e:	b29b      	uxth	r3, r3
 8003340:	b21b      	sxth	r3, r3
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	0052      	lsls	r2, r2, #1
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	440a      	add	r2, r1
 800334a:	8013      	strh	r3, [r2, #0]
  for (uint8_t i = 0; i < 6u; i++)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3301      	adds	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d9de      	bls.n	8003316 <get_diff_2x+0x10>
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <get_diff_3x>:
  * @param  diff[6]           compressed data (3x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_3x(int16_t diff[9], uint8_t input[6])
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  uint16_t decode_tmp;

  for (uint8_t i = 0; i < 3u; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e03a      	b.n	80033ec <get_diff_3x+0x86>
  {

    (void)memcpy(&decode_tmp, &input[2u * i], 2);
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	813b      	strh	r3, [r7, #8]

    for (uint8_t j = 0; j < 3u; j++)
 8003384:	2300      	movs	r3, #0
 8003386:	73bb      	strb	r3, [r7, #14]
 8003388:	e02a      	b.n	80033e0 <get_diff_3x+0x7a>
    {
      uint16_t utmp = (decode_tmp & ((uint16_t)0x1Fu << (5u * j))) >> (5u * j);
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	4619      	mov	r1, r3
 800338e:	7bba      	ldrb	r2, [r7, #14]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	221f      	movs	r2, #31
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	4019      	ands	r1, r3
 800339e:	7bba      	ldrb	r2, [r7, #14]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	fa41 f303 	asr.w	r3, r1, r3
 80033aa:	81bb      	strh	r3, [r7, #12]
      int16_t tmp = (int16_t)utmp;
 80033ac:	89bb      	ldrh	r3, [r7, #12]
 80033ae:	817b      	strh	r3, [r7, #10]
      diff[j + 3u * i] = tmp < 16 ? tmp : (tmp - 32);
 80033b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	dd04      	ble.n	80033c2 <get_diff_3x+0x5c>
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	3b20      	subs	r3, #32
 80033bc:	b29b      	uxth	r3, r3
 80033be:	b21a      	sxth	r2, r3
 80033c0:	e001      	b.n	80033c6 <get_diff_3x+0x60>
 80033c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033c6:	7bb8      	ldrb	r0, [r7, #14]
 80033c8:	7bf9      	ldrb	r1, [r7, #15]
 80033ca:	460b      	mov	r3, r1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	440b      	add	r3, r1
 80033d0:	4403      	add	r3, r0
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	440b      	add	r3, r1
 80033d8:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 3u; j++)
 80033da:	7bbb      	ldrb	r3, [r7, #14]
 80033dc:	3301      	adds	r3, #1
 80033de:	73bb      	strb	r3, [r7, #14]
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d9d1      	bls.n	800338a <get_diff_3x+0x24>
  for (uint8_t i = 0; i < 3u; i++)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	3301      	adds	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d9c1      	bls.n	8003376 <get_diff_3x+0x10>
    }
  }
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_MspInit+0x44>)
 8003408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340a:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <HAL_MspInit+0x44>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6613      	str	r3, [r2, #96]	; 0x60
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_MspInit+0x44>)
 8003414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_MspInit+0x44>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_MspInit+0x44>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	; 0x58
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_MspInit+0x44>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ac      	sub	sp, #176	; 0xb0
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2288      	movs	r2, #136	; 0x88
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f00f fe84 	bl	8013176 <memset>
  if(hi2c->Instance==I2C3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <HAL_I2C_MspInit+0xb0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d13b      	bne.n	80034f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800347e:	2300      	movs	r3, #0
 8003480:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4618      	mov	r0, r3
 8003488:	f003 feae 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003492:	f7fd fefd 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_I2C_MspInit+0xb4>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_I2C_MspInit+0xb4>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_I2C_MspInit+0xb4>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80034ae:	2303      	movs	r3, #3
 80034b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034b4:	2312      	movs	r3, #18
 80034b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034c6:	2304      	movs	r3, #4
 80034c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034d0:	4619      	mov	r1, r3
 80034d2:	480b      	ldr	r0, [pc, #44]	; (8003500 <HAL_I2C_MspInit+0xb8>)
 80034d4:	f000 fe60 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_I2C_MspInit+0xb4>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_I2C_MspInit+0xb4>)
 80034de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_I2C_MspInit+0xb4>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80034f0:	bf00      	nop
 80034f2:	37b0      	adds	r7, #176	; 0xb0
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40005c00 	.word	0x40005c00
 80034fc:	40021000 	.word	0x40021000
 8003500:	48000800 	.word	0x48000800

08003504 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0a4      	sub	sp, #144	; 0x90
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	2288      	movs	r2, #136	; 0x88
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f00f fe2e 	bl	8013176 <memset>
  if(hrtc->Instance==RTC)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a10      	ldr	r2, [pc, #64]	; (8003560 <HAL_RTC_MspInit+0x5c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d118      	bne.n	8003556 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800352a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003532:	f107 0308 	add.w	r3, r7, #8
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fe56 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003542:	f7fd fea5 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <HAL_RTC_MspInit+0x60>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <HAL_RTC_MspInit+0x60>)
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003556:	bf00      	nop
 8003558:	3790      	adds	r7, #144	; 0x90
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40002800 	.word	0x40002800
 8003564:	40021000 	.word	0x40021000

08003568 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b0ac      	sub	sp, #176	; 0xb0
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2288      	movs	r2, #136	; 0x88
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f00f fdf4 	bl	8013176 <memset>
  if(hsd->Instance==SDMMC1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a51      	ldr	r2, [pc, #324]	; (80036d8 <HAL_SD_MspInit+0x170>)
 8003594:	4293      	cmp	r3, r2
 8003596:	f040 809a 	bne.w	80036ce <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800359a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800359e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 80035a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fe1b 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80035b8:	f7fd fe6a 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80035bc:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	4a46      	ldr	r2, [pc, #280]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c6:	6613      	str	r3, [r2, #96]	; 0x60
 80035c8:	4b44      	ldr	r3, [pc, #272]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d4:	4b41      	ldr	r3, [pc, #260]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	4a40      	ldr	r2, [pc, #256]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e0:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f0:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f8:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_SD_MspInit+0x174>)
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003604:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800361e:	230c      	movs	r3, #12
 8003620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003624:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003628:	4619      	mov	r1, r3
 800362a:	482d      	ldr	r0, [pc, #180]	; (80036e0 <HAL_SD_MspInit+0x178>)
 800362c:	f000 fdb4 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003630:	2304      	movs	r3, #4
 8003632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003648:	230c      	movs	r3, #12
 800364a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800364e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003652:	4619      	mov	r1, r3
 8003654:	4823      	ldr	r0, [pc, #140]	; (80036e4 <HAL_SD_MspInit+0x17c>)
 8003656:	f000 fd9f 	bl	8004198 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_SD_MspInit+0x180>)
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_SD_MspInit+0x184>)
 800365e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_SD_MspInit+0x180>)
 8003662:	2207      	movs	r2, #7
 8003664:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_SD_MspInit+0x180>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_SD_MspInit+0x180>)
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_SD_MspInit+0x180>)
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_SD_MspInit+0x180>)
 800367a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_SD_MspInit+0x180>)
 8003682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003686:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_SD_MspInit+0x180>)
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_SD_MspInit+0x180>)
 8003690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003694:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8003696:	4814      	ldr	r0, [pc, #80]	; (80036e8 <HAL_SD_MspInit+0x180>)
 8003698:	f000 fb46 	bl	8003d28 <HAL_DMA_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 80036a2:	f7fd fdf5 	bl	8001290 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_SD_MspInit+0x180>)
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_SD_MspInit+0x180>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_SD_MspInit+0x180>)
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80036b8:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <HAL_SD_MspInit+0x180>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	2031      	movs	r0, #49	; 0x31
 80036c4:	f000 faf9 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80036c8:	2031      	movs	r0, #49	; 0x31
 80036ca:	f000 fb12 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80036ce:	bf00      	nop
 80036d0:	37b0      	adds	r7, #176	; 0xb0
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40012800 	.word	0x40012800
 80036dc:	40021000 	.word	0x40021000
 80036e0:	48000800 	.word	0x48000800
 80036e4:	48000c00 	.word	0x48000c00
 80036e8:	200003ec 	.word	0x200003ec
 80036ec:	40020444 	.word	0x40020444

080036f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f4:	e7fe      	b.n	80036f4 <NMI_Handler+0x4>

080036f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	e7fe      	b.n	8003700 <MemManage_Handler+0x4>

08003702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003706:	e7fe      	b.n	8003706 <BusFault_Handler+0x4>

08003708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800370c:	e7fe      	b.n	800370c <UsageFault_Handler+0x4>

0800370e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373c:	f000 f99e 	bl	8003a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}

08003744 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003748:	2004      	movs	r0, #4
 800374a:	f000 fee7 	bl	800451c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}

08003752 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8003756:	2008      	movs	r0, #8
 8003758:	f000 fee0 	bl	800451c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}

08003760 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003764:	4802      	ldr	r0, [pc, #8]	; (8003770 <SDMMC1_IRQHandler+0x10>)
 8003766:	f005 fd25 	bl	80091b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000368 	.word	0x20000368

08003774 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <DMA2_Channel4_IRQHandler+0x10>)
 800377a:	f000 fc2e 	bl	8003fda <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200003ec 	.word	0x200003ec

08003788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <OTG_FS_IRQHandler+0x10>)
 800378e:	f001 fe49 	bl	8005424 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000e648 	.word	0x2000e648

0800379c <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af04      	add	r7, sp, #16
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	460b      	mov	r3, r1
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	2301      	movs	r3, #1
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2301      	movs	r3, #1
 80037be:	2172      	movs	r1, #114	; 0x72
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f001 f873 	bl	80048ac <HAL_I2C_Mem_Read>
 80037c6:	4603      	mov	r3, r0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return 1;
 80037d4:	2301      	movs	r3, #1
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_kill>:

int _kill(int pid, int sig)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037ea:	f00f fd27 	bl	801323c <__errno>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2216      	movs	r2, #22
 80037f2:	601a      	str	r2, [r3, #0]
  return -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_exit>:

void _exit (int status)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ffe7 	bl	80037e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003812:	e7fe      	b.n	8003812 <_exit+0x12>

08003814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003826:	f3af 8000 	nop.w
 800382a:	4601      	mov	r1, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	60ba      	str	r2, [r7, #8]
 8003832:	b2ca      	uxtb	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	dbf0      	blt.n	8003826 <_read+0x12>
  }

  return len;
 8003844:	687b      	ldr	r3, [r7, #4]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e009      	b.n	8003874 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	60ba      	str	r2, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3301      	adds	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	dbf1      	blt.n	8003860 <_write+0x12>
  }
  return len;
 800387c:	687b      	ldr	r3, [r7, #4]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <_close>:

int _close(int file)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ae:	605a      	str	r2, [r3, #4]
  return 0;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_isatty>:

int _isatty(int file)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <_sbrk+0x5c>)
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <_sbrk+0x60>)
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <_sbrk+0x64>)
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <_sbrk+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003920:	f00f fc8c 	bl	801323c <__errno>
 8003924:	4603      	mov	r3, r0
 8003926:	220c      	movs	r2, #12
 8003928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	e009      	b.n	8003944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <_sbrk+0x64>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <_sbrk+0x64>)
 8003940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20018000 	.word	0x20018000
 8003950:	00000800 	.word	0x00000800
 8003954:	2000ccbc 	.word	0x2000ccbc
 8003958:	2000eec0 	.word	0x2000eec0

0800395c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <SystemInit+0x20>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <SystemInit+0x20>)
 8003968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800396c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003984:	f7ff ffea 	bl	800395c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480c      	ldr	r0, [pc, #48]	; (80039bc <LoopForever+0x6>)
  ldr r1, =_edata
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <LoopForever+0xe>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039a0:	4c0a      	ldr	r4, [pc, #40]	; (80039cc <LoopForever+0x16>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ae:	f00f fc4b 	bl	8013248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039b2:	f7fd fa41 	bl	8000e38 <main>

080039b6 <LoopForever>:

LoopForever:
    b LoopForever
 80039b6:	e7fe      	b.n	80039b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80039b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80039c4:	08017070 	.word	0x08017070
  ldr r2, =_sbss
 80039c8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80039cc:	2000eec0 	.word	0x2000eec0

080039d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC1_2_IRQHandler>

080039d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039dc:	2003      	movs	r0, #3
 80039de:	f000 f961 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039e2:	200f      	movs	r0, #15
 80039e4:	f000 f80e 	bl	8003a04 <HAL_InitTick>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	71fb      	strb	r3, [r7, #7]
 80039f2:	e001      	b.n	80039f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039f4:	f7ff fd04 	bl	8003400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039f8:	79fb      	ldrb	r3, [r7, #7]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_InitTick+0x6c>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d023      	beq.n	8003a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a18:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <HAL_InitTick+0x70>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_InitTick+0x6c>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f96d 	bl	8003d0e <HAL_SYSTICK_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d809      	bhi.n	8003a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a40:	2200      	movs	r2, #0
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f000 f937 	bl	8003cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <HAL_InitTick+0x74>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e004      	b.n	8003a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e001      	b.n	8003a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000008 	.word	0x20000008
 8003a74:	20000000 	.word	0x20000000
 8003a78:	20000004 	.word	0x20000004

08003a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_IncTick+0x20>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_IncTick+0x24>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_IncTick+0x24>)
 8003a8e:	6013      	str	r3, [r2, #0]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	2000ccc0 	.word	0x2000ccc0

08003aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_GetTick+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	2000ccc0 	.word	0x2000ccc0

08003abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7ff ffee 	bl	8003aa4 <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d005      	beq.n	8003ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_Delay+0x44>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ae2:	bf00      	nop
 8003ae4:	f7ff ffde 	bl	8003aa4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d8f7      	bhi.n	8003ae4 <HAL_Delay+0x28>
  {
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4907      	ldr	r1, [pc, #28]	; (8003ba0 <__NVIC_EnableIRQ+0x38>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
         );
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c70:	d301      	bcc.n	8003c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <SysTick_Config+0x40>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7e:	210f      	movs	r1, #15
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f7ff ff8e 	bl	8003ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <SysTick_Config+0x40>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <SysTick_Config+0x40>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff29 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ccc:	f7ff ff3e 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff8e 	bl	8003bf8 <NVIC_EncodePriority>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff5d 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff31 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ffa2 	bl	8003c60 <SysTick_Config>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e098      	b.n	8003e6c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b4d      	ldr	r3, [pc, #308]	; (8003e78 <HAL_DMA_Init+0x150>)
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d80f      	bhi.n	8003d66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_DMA_Init+0x154>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	4a4b      	ldr	r2, [pc, #300]	; (8003e80 <HAL_DMA_Init+0x158>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	009a      	lsls	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a48      	ldr	r2, [pc, #288]	; (8003e84 <HAL_DMA_Init+0x15c>)
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
 8003d64:	e00e      	b.n	8003d84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_DMA_Init+0x160>)
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a43      	ldr	r2, [pc, #268]	; (8003e80 <HAL_DMA_Init+0x158>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	009a      	lsls	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_DMA_Init+0x164>)
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dde:	d039      	beq.n	8003e54 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <HAL_DMA_Init+0x15c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d11a      	bne.n	8003e20 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003dea:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <HAL_DMA_Init+0x168>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	f003 031c 	and.w	r3, r3, #28
 8003df6:	210f      	movs	r1, #15
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	4924      	ldr	r1, [pc, #144]	; (8003e90 <HAL_DMA_Init+0x168>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_DMA_Init+0x168>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f003 031c 	and.w	r3, r3, #28
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	491d      	ldr	r1, [pc, #116]	; (8003e90 <HAL_DMA_Init+0x168>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
 8003e1e:	e019      	b.n	8003e54 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_DMA_Init+0x16c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f003 031c 	and.w	r3, r3, #28
 8003e2c:	210f      	movs	r1, #15
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	4917      	ldr	r1, [pc, #92]	; (8003e94 <HAL_DMA_Init+0x16c>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_DMA_Init+0x16c>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f003 031c 	and.w	r3, r3, #28
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	4911      	ldr	r1, [pc, #68]	; (8003e94 <HAL_DMA_Init+0x16c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40020407 	.word	0x40020407
 8003e7c:	bffdfff8 	.word	0xbffdfff8
 8003e80:	cccccccd 	.word	0xcccccccd
 8003e84:	40020000 	.word	0x40020000
 8003e88:	bffdfbf8 	.word	0xbffdfbf8
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	400200a8 	.word	0x400200a8
 8003e94:	400204a8 	.word	0x400204a8

08003e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_Start_IT+0x20>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e04b      	b.n	8003f50 <HAL_DMA_Start_IT+0xb8>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d13a      	bne.n	8003f42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f921 	bl	8004138 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 020e 	orr.w	r2, r2, #14
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e00f      	b.n	8003f30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0204 	bic.w	r2, r2, #4
 8003f1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 020a 	orr.w	r2, r2, #10
 8003f2e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e005      	b.n	8003f4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d005      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2204      	movs	r2, #4
 8003f74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e029      	b.n	8003fd0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 020e 	bic.w	r2, r2, #14
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f003 021c 	and.w	r2, r3, #28
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f202 	lsl.w	r2, r1, r2
 8003fae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
    }
  }
  return status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f003 031c 	and.w	r3, r3, #28
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d026      	beq.n	8004054 <HAL_DMA_IRQHandler+0x7a>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d021      	beq.n	8004054 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0204 	bic.w	r2, r2, #4
 800402c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f003 021c 	and.w	r2, r3, #28
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2104      	movs	r1, #4
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d071      	beq.n	800412e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004052:	e06c      	b.n	800412e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f003 031c 	and.w	r3, r3, #28
 800405c:	2202      	movs	r2, #2
 800405e:	409a      	lsls	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d02e      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xec>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d029      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 020a 	bic.w	r2, r2, #10
 800408e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f003 021c 	and.w	r2, r3, #28
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2102      	movs	r1, #2
 80040a6:	fa01 f202 	lsl.w	r2, r1, r2
 80040aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d038      	beq.n	800412e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040c4:	e033      	b.n	800412e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f003 031c 	and.w	r3, r3, #28
 80040ce:	2208      	movs	r2, #8
 80040d0:	409a      	lsls	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02a      	beq.n	8004130 <HAL_DMA_IRQHandler+0x156>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d025      	beq.n	8004130 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 020e 	bic.w	r2, r2, #14
 80040f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	f003 021c 	and.w	r2, r3, #28
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	2101      	movs	r1, #1
 8004102:	fa01 f202 	lsl.w	r2, r1, r2
 8004106:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800412e:	bf00      	nop
 8004130:	bf00      	nop
}
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f003 021c 	and.w	r2, r3, #28
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f202 	lsl.w	r2, r1, r2
 8004158:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b10      	cmp	r3, #16
 8004168:	d108      	bne.n	800417c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800417a:	e007      	b.n	800418c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a6:	e17f      	b.n	80044a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8171 	beq.w	80044a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d005      	beq.n	80041d8 <HAL_GPIO_Init+0x40>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d130      	bne.n	800423a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420e:	2201      	movs	r2, #1
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 0201 	and.w	r2, r3, #1
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b03      	cmp	r3, #3
 8004244:	d118      	bne.n	8004278 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800424c:	2201      	movs	r2, #1
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0201 	and.w	r2, r3, #1
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b03      	cmp	r3, #3
 8004282:	d017      	beq.n	80042b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2203      	movs	r2, #3
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d123      	bne.n	8004308 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	220f      	movs	r2, #15
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	08da      	lsrs	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	6939      	ldr	r1, [r7, #16]
 8004304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0203 	and.w	r2, r3, #3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80ac 	beq.w	80044a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434a:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <HAL_GPIO_Init+0x330>)
 800434c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434e:	4a5e      	ldr	r2, [pc, #376]	; (80044c8 <HAL_GPIO_Init+0x330>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6613      	str	r3, [r2, #96]	; 0x60
 8004356:	4b5c      	ldr	r3, [pc, #368]	; (80044c8 <HAL_GPIO_Init+0x330>)
 8004358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004362:	4a5a      	ldr	r2, [pc, #360]	; (80044cc <HAL_GPIO_Init+0x334>)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	220f      	movs	r2, #15
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4013      	ands	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800438c:	d025      	beq.n	80043da <HAL_GPIO_Init+0x242>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a4f      	ldr	r2, [pc, #316]	; (80044d0 <HAL_GPIO_Init+0x338>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01f      	beq.n	80043d6 <HAL_GPIO_Init+0x23e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a4e      	ldr	r2, [pc, #312]	; (80044d4 <HAL_GPIO_Init+0x33c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d019      	beq.n	80043d2 <HAL_GPIO_Init+0x23a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a4d      	ldr	r2, [pc, #308]	; (80044d8 <HAL_GPIO_Init+0x340>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_GPIO_Init+0x236>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4c      	ldr	r2, [pc, #304]	; (80044dc <HAL_GPIO_Init+0x344>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00d      	beq.n	80043ca <HAL_GPIO_Init+0x232>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4b      	ldr	r2, [pc, #300]	; (80044e0 <HAL_GPIO_Init+0x348>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <HAL_GPIO_Init+0x22e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4a      	ldr	r2, [pc, #296]	; (80044e4 <HAL_GPIO_Init+0x34c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <HAL_GPIO_Init+0x22a>
 80043be:	2306      	movs	r3, #6
 80043c0:	e00c      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043c2:	2307      	movs	r3, #7
 80043c4:	e00a      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043c6:	2305      	movs	r3, #5
 80043c8:	e008      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043ca:	2304      	movs	r3, #4
 80043cc:	e006      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043ce:	2303      	movs	r3, #3
 80043d0:	e004      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_GPIO_Init+0x244>
 80043da:	2300      	movs	r3, #0
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	f002 0203 	and.w	r2, r2, #3
 80043e2:	0092      	lsls	r2, r2, #2
 80043e4:	4093      	lsls	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043ec:	4937      	ldr	r1, [pc, #220]	; (80044cc <HAL_GPIO_Init+0x334>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_GPIO_Init+0x350>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43db      	mvns	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800441e:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_GPIO_Init+0x350>)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_GPIO_Init+0x350>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	43db      	mvns	r3, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004448:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <HAL_GPIO_Init+0x350>)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_GPIO_Init+0x350>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004472:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <HAL_GPIO_Init+0x350>)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_GPIO_Init+0x350>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <HAL_GPIO_Init+0x350>)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	3301      	adds	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f47f ae78 	bne.w	80041a8 <HAL_GPIO_Init+0x10>
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40010000 	.word	0x40010000
 80044d0:	48000400 	.word	0x48000400
 80044d4:	48000800 	.word	0x48000800
 80044d8:	48000c00 	.word	0x48000c00
 80044dc:	48001000 	.word	0x48001000
 80044e0:	48001400 	.word	0x48001400
 80044e4:	48001800 	.word	0x48001800
 80044e8:	40010400 	.word	0x40010400

080044ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	887b      	ldrh	r3, [r7, #2]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e001      	b.n	800450e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fc60 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40010400 	.word	0x40010400

0800454c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e08d      	b.n	800467a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fe ff68 	bl	8003448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	; 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800459c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d107      	bne.n	80045c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e006      	b.n	80045d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d108      	bne.n	80045ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	e007      	b.n	80045fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004620:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	461a      	mov	r2, r3
 8004692:	4603      	mov	r3, r0
 8004694:	817b      	strh	r3, [r7, #10]
 8004696:	460b      	mov	r3, r1
 8004698:	813b      	strh	r3, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f040 80f9 	bne.w	800489e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_I2C_Mem_Write+0x34>
 80046b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0ed      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_I2C_Mem_Write+0x4e>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e0e6      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046da:	f7ff f9e3 	bl	8003aa4 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2319      	movs	r3, #25
 80046e6:	2201      	movs	r2, #1
 80046e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fac3 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0d1      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2221      	movs	r2, #33	; 0x21
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800471c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004724:	88f8      	ldrh	r0, [r7, #6]
 8004726:	893a      	ldrh	r2, [r7, #8]
 8004728:	8979      	ldrh	r1, [r7, #10]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4603      	mov	r3, r0
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f9d3 	bl	8004ae0 <I2C_RequestMemoryWrite>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0a9      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2bff      	cmp	r3, #255	; 0xff
 8004754:	d90e      	bls.n	8004774 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	b2da      	uxtb	r2, r3
 8004762:	8979      	ldrh	r1, [r7, #10]
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fc3d 	bl	8004fec <I2C_TransferConfig>
 8004772:	e00f      	b.n	8004794 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	b2da      	uxtb	r2, r3
 8004784:	8979      	ldrh	r1, [r7, #10]
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fc2c 	bl	8004fec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fabc 	bl	8004d16 <I2C_WaitOnTXISFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e07b      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d034      	beq.n	800484c <HAL_I2C_Mem_Write+0x1c8>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d130      	bne.n	800484c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	2200      	movs	r2, #0
 80047f2:	2180      	movs	r1, #128	; 0x80
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa3f 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e04d      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	2bff      	cmp	r3, #255	; 0xff
 800480c:	d90e      	bls.n	800482c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	22ff      	movs	r2, #255	; 0xff
 8004812:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	b2da      	uxtb	r2, r3
 800481a:	8979      	ldrh	r1, [r7, #10]
 800481c:	2300      	movs	r3, #0
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fbe1 	bl	8004fec <I2C_TransferConfig>
 800482a:	e00f      	b.n	800484c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	b2da      	uxtb	r2, r3
 800483c:	8979      	ldrh	r1, [r7, #10]
 800483e:	2300      	movs	r3, #0
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fbd0 	bl	8004fec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d19e      	bne.n	8004794 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 faa2 	bl	8004da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e01a      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2220      	movs	r2, #32
 8004870:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_I2C_Mem_Write+0x224>)
 800487e:	400b      	ands	r3, r1
 8004880:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	fe00e800 	.word	0xfe00e800

080048ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	460b      	mov	r3, r1
 80048c0:	813b      	strh	r3, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	f040 80fd 	bne.w	8004ace <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x34>
 80048da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0f1      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Mem_Read+0x4e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0ea      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004902:	f7ff f8cf 	bl	8003aa4 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2319      	movs	r3, #25
 800490e:	2201      	movs	r2, #1
 8004910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f9af 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0d5      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2222      	movs	r2, #34	; 0x22
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800494c:	88f8      	ldrh	r0, [r7, #6]
 800494e:	893a      	ldrh	r2, [r7, #8]
 8004950:	8979      	ldrh	r1, [r7, #10]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	4603      	mov	r3, r0
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f913 	bl	8004b88 <I2C_RequestMemoryRead>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0ad      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2bff      	cmp	r3, #255	; 0xff
 800497c:	d90e      	bls.n	800499c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	b2da      	uxtb	r2, r3
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	4b52      	ldr	r3, [pc, #328]	; (8004ad8 <HAL_I2C_Mem_Read+0x22c>)
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb29 	bl	8004fec <I2C_TransferConfig>
 800499a:	e00f      	b.n	80049bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	8979      	ldrh	r1, [r7, #10]
 80049ae:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_I2C_Mem_Read+0x22c>)
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fb18 	bl	8004fec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	2200      	movs	r2, #0
 80049c4:	2104      	movs	r1, #4
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f956 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e07c      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d034      	beq.n	8004a7c <HAL_I2C_Mem_Read+0x1d0>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d130      	bne.n	8004a7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	2200      	movs	r2, #0
 8004a22:	2180      	movs	r1, #128	; 0x80
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f927 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e04d      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2bff      	cmp	r3, #255	; 0xff
 8004a3c:	d90e      	bls.n	8004a5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	22ff      	movs	r2, #255	; 0xff
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	8979      	ldrh	r1, [r7, #10]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fac9 	bl	8004fec <I2C_TransferConfig>
 8004a5a:	e00f      	b.n	8004a7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	8979      	ldrh	r1, [r7, #10]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fab8 	bl	8004fec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d19a      	bne.n	80049bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f98a 	bl	8004da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e01a      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_I2C_Mem_Read+0x230>)
 8004aae:	400b      	ands	r3, r1
 8004ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	80002400 	.word	0x80002400
 8004adc:	fe00e800 	.word	0xfe00e800

08004ae0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	461a      	mov	r2, r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	817b      	strh	r3, [r7, #10]
 8004af2:	460b      	mov	r3, r1
 8004af4:	813b      	strh	r3, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	8979      	ldrh	r1, [r7, #10]
 8004b00:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <I2C_RequestMemoryWrite+0xa4>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fa6f 	bl	8004fec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f8ff 	bl	8004d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e02c      	b.n	8004b7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28
 8004b32:	e015      	b.n	8004b60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b34:	893b      	ldrh	r3, [r7, #8]
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f8e5 	bl	8004d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e012      	b.n	8004b7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f884 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	80002000 	.word	0x80002000

08004b88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	817b      	strh	r3, [r7, #10]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	813b      	strh	r3, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <I2C_RequestMemoryRead+0xa4>)
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fa1c 	bl	8004fec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	69b9      	ldr	r1, [r7, #24]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f8ac 	bl	8004d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e02c      	b.n	8004c22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d105      	bne.n	8004bda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd8:	e015      	b.n	8004c06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bda:	893b      	ldrh	r3, [r7, #8]
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f892 	bl	8004d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e012      	b.n	8004c22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bfc:	893b      	ldrh	r3, [r7, #8]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2140      	movs	r1, #64	; 0x40
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f831 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	80002000 	.word	0x80002000

08004c30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d103      	bne.n	8004c4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d007      	beq.n	8004c6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	619a      	str	r2, [r3, #24]
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c88:	e031      	b.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d02d      	beq.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fe ff07 	bl	8003aa4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d122      	bne.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d113      	bne.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d0be      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d22:	e033      	b.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f87f 	bl	8004e2c <I2C_IsErrorOccurred>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e031      	b.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d025      	beq.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d40:	f7fe feb0 	bl	8003aa4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11a      	bne.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d013      	beq.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d1c4      	bne.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db0:	e02f      	b.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f838 	bl	8004e2c <I2C_IsErrorOccurred>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e02d      	b.n	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fe fe6d 	bl	8003aa4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11a      	bne.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d013      	beq.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e007      	b.n	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d1c8      	bne.n	8004db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d068      	beq.n	8004f2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e60:	e049      	b.n	8004ef6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d045      	beq.n	8004ef6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fe fe1b 	bl	8003aa4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_IsErrorOccurred+0x54>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d13a      	bne.n	8004ef6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea2:	d121      	bne.n	8004ee8 <I2C_IsErrorOccurred+0xbc>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	d01d      	beq.n	8004ee8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d01a      	beq.n	8004ee8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ec2:	f7fe fdef 	bl	8003aa4 <HAL_GetTick>
 8004ec6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec8:	e00e      	b.n	8004ee8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004eca:	f7fe fdeb 	bl	8003aa4 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b19      	cmp	r3, #25
 8004ed6:	d907      	bls.n	8004ee8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f043 0320 	orr.w	r3, r3, #32
 8004ede:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004ee6:	e006      	b.n	8004ef6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d1e9      	bne.n	8004eca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d003      	beq.n	8004f0c <I2C_IsErrorOccurred+0xe0>
 8004f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0aa      	beq.n	8004e62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f043 0304 	orr.w	r3, r3, #4
 8004f22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00b      	beq.n	8004f54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f043 0308 	orr.w	r3, r3, #8
 8004f64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01c      	beq.n	8004fda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff fe45 	bl	8004c30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <I2C_IsErrorOccurred+0x1bc>)
 8004fb2:	400b      	ands	r3, r1
 8004fb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3728      	adds	r7, #40	; 0x28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	fe00e800 	.word	0xfe00e800

08004fec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	817b      	strh	r3, [r7, #10]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005004:	7a7b      	ldrb	r3, [r7, #9]
 8005006:	041b      	lsls	r3, r3, #16
 8005008:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800500c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	4313      	orrs	r3, r2
 8005016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800501a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	0d5b      	lsrs	r3, r3, #21
 8005026:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800502a:	4b08      	ldr	r3, [pc, #32]	; (800504c <I2C_TransferConfig+0x60>)
 800502c:	430b      	orrs	r3, r1
 800502e:	43db      	mvns	r3, r3
 8005030:	ea02 0103 	and.w	r1, r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	03ff63ff 	.word	0x03ff63ff

08005050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b20      	cmp	r3, #32
 8005064:	d138      	bne.n	80050d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005070:	2302      	movs	r3, #2
 8005072:	e032      	b.n	80050da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d139      	bne.n	8005170 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005106:	2302      	movs	r3, #2
 8005108:	e033      	b.n	8005172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2224      	movs	r2, #36	; 0x24
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005138:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800517e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005180:	b08f      	sub	sp, #60	; 0x3c
 8005182:	af0a      	add	r7, sp, #40	; 0x28
 8005184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e116      	b.n	80053be <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f00c fb3c 	bl	8011828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2203      	movs	r2, #3
 80051b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f005 fefd 	bl	800afce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	687e      	ldr	r6, [r7, #4]
 80051dc:	466d      	mov	r5, sp
 80051de:	f106 0410 	add.w	r4, r6, #16
 80051e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80051f2:	1d33      	adds	r3, r6, #4
 80051f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f005 fe10 	bl	800ae1c <USB_CoreInit>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0d7      	b.n	80053be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f005 feeb 	bl	800aff0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	e04a      	b.n	80052b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005220:	7bfa      	ldrb	r2, [r7, #15]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	333d      	adds	r3, #61	; 0x3d
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	333c      	adds	r3, #60	; 0x3c
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	b298      	uxth	r0, r3
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	3356      	adds	r3, #86	; 0x56
 800525c:	4602      	mov	r2, r0
 800525e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	3340      	adds	r3, #64	; 0x40
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	3344      	adds	r3, #68	; 0x44
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3348      	adds	r3, #72	; 0x48
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	334c      	adds	r3, #76	; 0x4c
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	3301      	adds	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d3af      	bcc.n	8005220 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	e044      	b.n	8005350 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	3301      	adds	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	7bfa      	ldrb	r2, [r7, #15]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d3b5      	bcc.n	80052c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	687e      	ldr	r6, [r7, #4]
 8005362:	466d      	mov	r5, sp
 8005364:	f106 0410 	add.w	r4, r6, #16
 8005368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005370:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005374:	e885 0003 	stmia.w	r5, {r0, r1}
 8005378:	1d33      	adds	r3, r6, #4
 800537a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800537c:	6838      	ldr	r0, [r7, #0]
 800537e:	f005 fe83 	bl	800b088 <USB_DevInit>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e014      	b.n	80053be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d102      	bne.n	80053b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 f869 	bl	8006484 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f006 fe31 	bl	800c01e <USB_DevDisconnect>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_PCD_Start+0x1c>
 80053de:	2302      	movs	r3, #2
 80053e0:	e01c      	b.n	800541c <HAL_PCD_Start+0x56>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d105      	bne.n	80053fe <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f005 fdd2 	bl	800afac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f006 fde5 	bl	800bfdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b08d      	sub	sp, #52	; 0x34
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f006 fea3 	bl	800c186 <USB_GetMode>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	f040 847e 	bne.w	8005d44 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f006 fe07 	bl	800c060 <USB_ReadInterrupts>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8474 	beq.w	8005d42 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f006 fdf4 	bl	800c060 <USB_ReadInterrupts>
 8005478:	4603      	mov	r3, r0
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b02      	cmp	r3, #2
 8005480:	d107      	bne.n	8005492 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f002 0202 	and.w	r2, r2, #2
 8005490:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f006 fde2 	bl	800c060 <USB_ReadInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d161      	bne.n	800556a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0210 	bic.w	r2, r2, #16
 80054b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	3304      	adds	r3, #4
 80054d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	0c5b      	lsrs	r3, r3, #17
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d124      	bne.n	800552c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d035      	beq.n	800555a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	6a38      	ldr	r0, [r7, #32]
 8005502:	f006 fc19 	bl	800bd38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005512:	441a      	add	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005524:	441a      	add	r2, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	615a      	str	r2, [r3, #20]
 800552a:	e016      	b.n	800555a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	0c5b      	lsrs	r3, r3, #17
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	2b06      	cmp	r3, #6
 8005536:	d110      	bne.n	800555a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800553e:	2208      	movs	r2, #8
 8005540:	4619      	mov	r1, r3
 8005542:	6a38      	ldr	r0, [r7, #32]
 8005544:	f006 fbf8 	bl	800bd38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005554:	441a      	add	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0210 	orr.w	r2, r2, #16
 8005568:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f006 fd76 	bl	800c060 <USB_ReadInterrupts>
 8005574:	4603      	mov	r3, r0
 8005576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800557a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800557e:	f040 80a7 	bne.w	80056d0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f006 fd7b 	bl	800c086 <USB_ReadDevAllOutEpInterrupt>
 8005590:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005592:	e099      	b.n	80056c8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 808e 	beq.w	80056bc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f006 fd9f 	bl	800c0ee <USB_ReadDevOutEPInterrupt>
 80055b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	461a      	mov	r2, r3
 80055ca:	2301      	movs	r3, #1
 80055cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fe7d 	bl	80062d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	2308      	movs	r3, #8
 80055f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80055f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 feb9 	bl	800636c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	461a      	mov	r2, r3
 8005612:	2310      	movs	r3, #16
 8005614:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d030      	beq.n	8005682 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d109      	bne.n	8005640 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	3304      	adds	r3, #4
 8005654:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	78db      	ldrb	r3, [r3, #3]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d108      	bne.n	8005670 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	b2db      	uxtb	r3, r3
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f00c fa22 	bl	8011ab4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	461a      	mov	r2, r3
 800567e:	2302      	movs	r3, #2
 8005680:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	461a      	mov	r2, r3
 800569a:	2320      	movs	r3, #32
 800569c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	461a      	mov	r2, r3
 80056b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	3301      	adds	r3, #1
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f47f af62 	bne.w	8005594 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f006 fcc3 	bl	800c060 <USB_ReadInterrupts>
 80056da:	4603      	mov	r3, r0
 80056dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056e4:	f040 80a4 	bne.w	8005830 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f006 fce4 	bl	800c0ba <USB_ReadDevAllInEpInterrupt>
 80056f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80056f8:	e096      	b.n	8005828 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 808b 	beq.w	800581c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f006 fd0a 	bl	800c12a <USB_ReadDevInEPInterrupt>
 8005716:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d020      	beq.n	8005764 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2201      	movs	r2, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	43db      	mvns	r3, r3
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005742:	4013      	ands	r3, r2
 8005744:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	461a      	mov	r2, r3
 8005754:	2301      	movs	r3, #1
 8005756:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	b2db      	uxtb	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f00c f913 	bl	801198a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577a:	461a      	mov	r2, r3
 800577c:	2308      	movs	r3, #8
 800577e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	461a      	mov	r2, r3
 8005798:	2310      	movs	r3, #16
 800579a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	461a      	mov	r2, r3
 80057b4:	2340      	movs	r3, #64	; 0x40
 80057b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d023      	beq.n	800580a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80057c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c4:	6a38      	ldr	r0, [r7, #32]
 80057c6:	f005 fda1 	bl	800b30c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	3338      	adds	r3, #56	; 0x38
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4413      	add	r3, r2
 80057da:	3304      	adds	r3, #4
 80057dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	78db      	ldrb	r3, [r3, #3]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d108      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2200      	movs	r2, #0
 80057ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f00c f970 	bl	8011ad8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	461a      	mov	r2, r3
 8005806:	2302      	movs	r3, #2
 8005808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fcd2 	bl	80061c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	3301      	adds	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	f47f af65 	bne.w	80056fa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f006 fc13 	bl	800c060 <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005844:	d122      	bne.n	800588c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800586c:	2100      	movs	r1, #0
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f00c fba4 	bl	8011fbc <HAL_PCDEx_LPM_Callback>
 8005874:	e002      	b.n	800587c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f00c f8f4 	bl	8011a64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800588a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f006 fbe5 	bl	800c060 <USB_ReadInterrupts>
 8005896:	4603      	mov	r3, r0
 8005898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a0:	d112      	bne.n	80058c8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d102      	bne.n	80058b8 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f00c f8b0 	bl	8011a18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80058c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f006 fbc7 	bl	800c060 <USB_ReadInterrupts>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058dc:	d121      	bne.n	8005922 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80058ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d111      	bne.n	800591c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005912:	2101      	movs	r1, #1
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f00c fb51 	bl	8011fbc <HAL_PCDEx_LPM_Callback>
 800591a:	e002      	b.n	8005922 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f00c f87b 	bl	8011a18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f006 fb9a 	bl	800c060 <USB_ReadInterrupts>
 800592c:	4603      	mov	r3, r0
 800592e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	f040 80b5 	bne.w	8005aa4 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2110      	movs	r1, #16
 8005954:	4618      	mov	r0, r3
 8005956:	f005 fcd9 	bl	800b30c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595e:	e046      	b.n	80059ee <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	461a      	mov	r2, r3
 800596e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005972:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005992:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	461a      	mov	r2, r3
 80059a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	3301      	adds	r3, #1
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d3b3      	bcc.n	8005960 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d016      	beq.n	8005a42 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a24:	f043 030b 	orr.w	r3, r3, #11
 8005a28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f043 030b 	orr.w	r3, r3, #11
 8005a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8005a40:	e015      	b.n	8005a6e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005a58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a68:	f043 030b 	orr.w	r3, r3, #11
 8005a6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f006 fbaa 	bl	800c1e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f006 fad9 	bl	800c060 <USB_ReadInterrupts>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab8:	d124      	bne.n	8005b04 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f006 fb6f 	bl	800c1a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f005 fc9c 	bl	800b406 <USB_GetDevSpeed>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	f001 faed 	bl	80070b8 <HAL_RCC_GetHCLKFreq>
 8005ade:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f005 f9c3 	bl	800ae74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f00b ff73 	bl	80119da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695a      	ldr	r2, [r3, #20]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f006 faa9 	bl	800c060 <USB_ReadInterrupts>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d10a      	bne.n	8005b2e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f00b ff50 	bl	80119be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f002 0208 	and.w	r2, r2, #8
 8005b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f006 fa94 	bl	800c060 <USB_ReadInterrupts>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b80      	cmp	r3, #128	; 0x80
 8005b40:	d122      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b4e:	2301      	movs	r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
 8005b52:	e014      	b.n	8005b7e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d105      	bne.n	8005b78 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 faf3 	bl	800615e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d3e5      	bcc.n	8005b54 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f006 fa67 	bl	800c060 <USB_ReadInterrupts>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9c:	d13b      	bne.n	8005c16 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba2:	e02b      	b.n	8005bfc <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	3340      	adds	r3, #64	; 0x40
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d115      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005bca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	da12      	bge.n	8005bf6 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	333f      	adds	r3, #63	; 0x3f
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fab4 	bl	800615e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3ce      	bcc.n	8005ba4 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f006 fa20 	bl	800c060 <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c2a:	d155      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	e045      	b.n	8005cbe <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	4613      	mov	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d12e      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da2b      	bge.n	8005cb8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d121      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cb4:	6053      	str	r3, [r2, #4]
            break;
 8005cb6:	e007      	b.n	8005cc8 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d3b4      	bcc.n	8005c32 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f006 f9bf 	bl	800c060 <USB_ReadInterrupts>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d10a      	bne.n	8005d04 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f00b ff04 	bl	8011afc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f006 f9a9 	bl	800c060 <USB_ReadInterrupts>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d115      	bne.n	8005d44 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f00b fef4 	bl	8011b18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	e000      	b.n	8005d44 <HAL_PCD_IRQHandler+0x920>
      return;
 8005d42:	bf00      	nop
    }
  }
}
 8005d44:	3734      	adds	r7, #52	; 0x34
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}

08005d4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_PCD_SetAddress+0x1a>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e013      	b.n	8005d8c <HAL_PCD_SetAddress+0x42>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f006 f907 	bl	800bf90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	461a      	mov	r2, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	70fb      	strb	r3, [r7, #3]
 8005da6:	460b      	mov	r3, r1
 8005da8:	803b      	strh	r3, [r7, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da0f      	bge.n	8005dda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	3338      	adds	r3, #56	; 0x38
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	3304      	adds	r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	705a      	strb	r2, [r3, #1]
 8005dd8:	e00f      	b.n	8005dfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	3304      	adds	r3, #4
 8005df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e06:	883a      	ldrh	r2, [r7, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	78ba      	ldrb	r2, [r7, #2]
 8005e10:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e24:	78bb      	ldrb	r3, [r7, #2]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d102      	bne.n	8005e30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_PCD_EP_Open+0xaa>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e00e      	b.n	8005e5c <HAL_PCD_EP_Open+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f005 faf9 	bl	800b444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da0f      	bge.n	8005e98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	3338      	adds	r3, #56	; 0x38
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	705a      	strb	r2, [r3, #1]
 8005e96:	e00f      	b.n	8005eb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	f003 020f 	and.w	r2, r3, #15
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	3304      	adds	r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_PCD_EP_Close+0x6e>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e00e      	b.n	8005ef0 <HAL_PCD_EP_Close+0x8c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f005 fb37 	bl	800b554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	460b      	mov	r3, r1
 8005f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f08:	7afb      	ldrb	r3, [r7, #11]
 8005f0a:	f003 020f 	and.w	r2, r3, #15
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f3a:	7afb      	ldrb	r3, [r7, #11]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f005 fbdd 	bl	800b70c <USB_EPStartXfer>

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f9c:	7afb      	ldrb	r3, [r7, #11]
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	3338      	adds	r3, #56	; 0x38
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6979      	ldr	r1, [r7, #20]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f005 fb94 	bl	800b70c <USB_EPStartXfer>

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	f003 020f 	and.w	r2, r3, #15
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d901      	bls.n	800600c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e04e      	b.n	80060aa <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800600c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	da0f      	bge.n	8006034 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	f003 020f 	and.w	r2, r3, #15
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	3338      	adds	r3, #56	; 0x38
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	3304      	adds	r3, #4
 800602a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	705a      	strb	r2, [r3, #1]
 8006032:	e00d      	b.n	8006050 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	3304      	adds	r3, #4
 8006048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_PCD_EP_SetStall+0x82>
 800606c:	2302      	movs	r3, #2
 800606e:	e01c      	b.n	80060aa <HAL_PCD_EP_SetStall+0xbc>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	4618      	mov	r0, r3
 8006080:	f005 feb2 	bl	800bde8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f006 f8a4 	bl	800c1e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d901      	bls.n	80060d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e042      	b.n	8006156 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da0f      	bge.n	80060f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	3338      	adds	r3, #56	; 0x38
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	3304      	adds	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	705a      	strb	r2, [r3, #1]
 80060f6:	e00f      	b.n	8006118 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_PCD_EP_ClrStall+0x86>
 8006134:	2302      	movs	r3, #2
 8006136:	e00e      	b.n	8006156 <HAL_PCD_EP_ClrStall+0xa4>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	4618      	mov	r0, r3
 8006148:	f005 febc 	bl	800bec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800616a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	da0c      	bge.n	800618c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	3338      	adds	r3, #56	; 0x38
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	3304      	adds	r3, #4
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e00c      	b.n	80061a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 020f 	and.w	r2, r3, #15
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	3304      	adds	r3, #4
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f005 fcdf 	bl	800bb70 <USB_EPStopXfer>
 80061b2:	4603      	mov	r3, r0
 80061b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80061b6:	7afb      	ldrb	r3, [r7, #11]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3338      	adds	r3, #56	; 0x38
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d901      	bls.n	80061f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e067      	b.n	80062c8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	429a      	cmp	r2, r3
 800620c:	d902      	bls.n	8006214 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3303      	adds	r3, #3
 8006218:	089b      	lsrs	r3, r3, #2
 800621a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800621c:	e026      	b.n	800626c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	429a      	cmp	r2, r3
 8006232:	d902      	bls.n	800623a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3303      	adds	r3, #3
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68d9      	ldr	r1, [r3, #12]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	b29b      	uxth	r3, r3
 800624e:	6978      	ldr	r0, [r7, #20]
 8006250:	f005 fd38 	bl	800bcc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	441a      	add	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	441a      	add	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	429a      	cmp	r2, r3
 8006280:	d809      	bhi.n	8006296 <PCD_WriteEmptyTxFifo+0xd6>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	695a      	ldr	r2, [r3, #20]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800628a:	429a      	cmp	r2, r3
 800628c:	d203      	bcs.n	8006296 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1c3      	bne.n	800621e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d811      	bhi.n	80062c6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	2201      	movs	r2, #1
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	43db      	mvns	r3, r3
 80062bc:	6939      	ldr	r1, [r7, #16]
 80062be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c2:	4013      	ands	r3, r2
 80062c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	333c      	adds	r3, #60	; 0x3c
 80062e8:	3304      	adds	r3, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <PCD_EP_OutXfrComplete_int+0x98>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d124      	bne.n	8006350 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	461a      	mov	r2, r3
 800631e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006322:	6093      	str	r3, [r2, #8]
 8006324:	e01a      	b.n	800635c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	2320      	movs	r3, #32
 8006340:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f00b fb03 	bl	8011954 <HAL_PCD_DataOutStageCallback>
 800634e:	e005      	b.n	800635c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f00b fafc 	bl	8011954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	4f54310a 	.word	0x4f54310a

0800636c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	333c      	adds	r3, #60	; 0x3c
 8006384:	3304      	adds	r3, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a0c      	ldr	r2, [pc, #48]	; (80063d0 <PCD_EP_OutSetupPacket_int+0x64>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d90e      	bls.n	80063c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d009      	beq.n	80063c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	461a      	mov	r2, r3
 80063ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f00b fab5 	bl	8011930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	4f54300a 	.word	0x4f54300a

080063d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
 80063e0:	4613      	mov	r3, r2
 80063e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80063f2:	883b      	ldrh	r3, [r7, #0]
 80063f4:	0419      	lsls	r1, r3, #16
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006400:	e028      	b.n	8006454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]
 8006414:	e00d      	b.n	8006432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	3340      	adds	r3, #64	; 0x40
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4413      	add	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	3301      	adds	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
 8006432:	7bfa      	ldrb	r2, [r7, #15]
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	3b01      	subs	r3, #1
 8006438:	429a      	cmp	r2, r3
 800643a:	d3ec      	bcc.n	8006416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800643c:	883b      	ldrh	r3, [r7, #0]
 800643e:	0418      	lsls	r0, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	3b01      	subs	r3, #1
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4302      	orrs	r2, r0
 800644c:	3340      	adds	r3, #64	; 0x40
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b6:	f043 0303 	orr.w	r3, r3, #3
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40007000 	.word	0x40007000

080064e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f6:	d130      	bne.n	800655a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80064f8:	4b23      	ldr	r3, [pc, #140]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d038      	beq.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800650e:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006514:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006516:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2232      	movs	r2, #50	; 0x32
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0c9b      	lsrs	r3, r3, #18
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800652c:	e002      	b.n	8006534 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b01      	subs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d102      	bne.n	8006548 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f2      	bne.n	800652e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006554:	d110      	bne.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00f      	b.n	800657a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d007      	beq.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006570:	4a05      	ldr	r2, [pc, #20]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006576:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40007000 	.word	0x40007000
 800658c:	20000000 	.word	0x20000000
 8006590:	431bde83 	.word	0x431bde83

08006594 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800659e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065a2:	6053      	str	r3, [r2, #4]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40007000 	.word	0x40007000

080065b4 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 80065b8:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f023 0307 	bic.w	r3, r3, #7
 80065c0:	4a07      	ldr	r2, [pc, #28]	; (80065e0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	4a05      	ldr	r2, [pc, #20]	; (80065e4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80065d4:	bf30      	wfi
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40007000 	.word	0x40007000
 80065e4:	e000ed00 	.word	0xe000ed00

080065e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e3ca      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065fa:	4b97      	ldr	r3, [pc, #604]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 030c 	and.w	r3, r3, #12
 8006602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006604:	4b94      	ldr	r3, [pc, #592]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 80e4 	beq.w	80067e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <HAL_RCC_OscConfig+0x4a>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b0c      	cmp	r3, #12
 8006626:	f040 808b 	bne.w	8006740 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 8087 	bne.w	8006740 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006632:	4b89      	ldr	r3, [pc, #548]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_RCC_OscConfig+0x62>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e3a2      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	4b82      	ldr	r3, [pc, #520]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <HAL_RCC_OscConfig+0x7c>
 800665a:	4b7f      	ldr	r3, [pc, #508]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006662:	e005      	b.n	8006670 <HAL_RCC_OscConfig+0x88>
 8006664:	4b7c      	ldr	r3, [pc, #496]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006670:	4293      	cmp	r3, r2
 8006672:	d223      	bcs.n	80066bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fd55 	bl	8007128 <RCC_SetFlashLatencyFromMSIRange>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e383      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006688:	4b73      	ldr	r3, [pc, #460]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a72      	ldr	r2, [pc, #456]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800668e:	f043 0308 	orr.w	r3, r3, #8
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	4b70      	ldr	r3, [pc, #448]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	496d      	ldr	r1, [pc, #436]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066a6:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	4968      	ldr	r1, [pc, #416]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	604b      	str	r3, [r1, #4]
 80066ba:	e025      	b.n	8006708 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066bc:	4b66      	ldr	r3, [pc, #408]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a65      	ldr	r2, [pc, #404]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066c2:	f043 0308 	orr.w	r3, r3, #8
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	4b63      	ldr	r3, [pc, #396]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	4960      	ldr	r1, [pc, #384]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066da:	4b5f      	ldr	r3, [pc, #380]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	495b      	ldr	r1, [pc, #364]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fd15 	bl	8007128 <RCC_SetFlashLatencyFromMSIRange>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e343      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006708:	f000 fc4a 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b52      	ldr	r3, [pc, #328]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	091b      	lsrs	r3, r3, #4
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	4950      	ldr	r1, [pc, #320]	; (800685c <HAL_RCC_OscConfig+0x274>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
 8006724:	4a4e      	ldr	r2, [pc, #312]	; (8006860 <HAL_RCC_OscConfig+0x278>)
 8006726:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006728:	4b4e      	ldr	r3, [pc, #312]	; (8006864 <HAL_RCC_OscConfig+0x27c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd f969 	bl	8003a04 <HAL_InitTick>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d052      	beq.n	80067e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	e327      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d032      	beq.n	80067ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006748:	4b43      	ldr	r3, [pc, #268]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a42      	ldr	r2, [pc, #264]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006754:	f7fd f9a6 	bl	8003aa4 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800675c:	f7fd f9a2 	bl	8003aa4 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e310      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800676e:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800677a:	4b37      	ldr	r3, [pc, #220]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a36      	ldr	r2, [pc, #216]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006780:	f043 0308 	orr.w	r3, r3, #8
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4b34      	ldr	r3, [pc, #208]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	4931      	ldr	r1, [pc, #196]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006798:	4b2f      	ldr	r3, [pc, #188]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	492c      	ldr	r1, [pc, #176]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]
 80067ac:	e01a      	b.n	80067e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a29      	ldr	r2, [pc, #164]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ba:	f7fd f973 	bl	8003aa4 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067c2:	f7fd f96f 	bl	8003aa4 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e2dd      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067d4:	4b20      	ldr	r3, [pc, #128]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f0      	bne.n	80067c2 <HAL_RCC_OscConfig+0x1da>
 80067e0:	e000      	b.n	80067e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d074      	beq.n	80068da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d005      	beq.n	8006802 <HAL_RCC_OscConfig+0x21a>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b0c      	cmp	r3, #12
 80067fa:	d10e      	bne.n	800681a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d10b      	bne.n	800681a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d064      	beq.n	80068d8 <HAL_RCC_OscConfig+0x2f0>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d160      	bne.n	80068d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e2ba      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006822:	d106      	bne.n	8006832 <HAL_RCC_OscConfig+0x24a>
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0b      	ldr	r2, [pc, #44]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800682a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e026      	b.n	8006880 <HAL_RCC_OscConfig+0x298>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800683a:	d115      	bne.n	8006868 <HAL_RCC_OscConfig+0x280>
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 8006842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a02      	ldr	r2, [pc, #8]	; (8006858 <HAL_RCC_OscConfig+0x270>)
 800684e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e014      	b.n	8006880 <HAL_RCC_OscConfig+0x298>
 8006856:	bf00      	nop
 8006858:	40021000 	.word	0x40021000
 800685c:	08016b60 	.word	0x08016b60
 8006860:	20000000 	.word	0x20000000
 8006864:	20000004 	.word	0x20000004
 8006868:	4ba0      	ldr	r3, [pc, #640]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a9f      	ldr	r2, [pc, #636]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 800686e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4b9d      	ldr	r3, [pc, #628]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a9c      	ldr	r2, [pc, #624]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 800687a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fd f90c 	bl	8003aa4 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006890:	f7fd f908 	bl	8003aa4 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e276      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a2:	4b92      	ldr	r3, [pc, #584]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x2a8>
 80068ae:	e014      	b.n	80068da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fd f8f8 	bl	8003aa4 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fd f8f4 	bl	8003aa4 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e262      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ca:	4b88      	ldr	r3, [pc, #544]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f0      	bne.n	80068b8 <HAL_RCC_OscConfig+0x2d0>
 80068d6:	e000      	b.n	80068da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d060      	beq.n	80069a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d005      	beq.n	80068f8 <HAL_RCC_OscConfig+0x310>
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b0c      	cmp	r3, #12
 80068f0:	d119      	bne.n	8006926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d116      	bne.n	8006926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f8:	4b7c      	ldr	r3, [pc, #496]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <HAL_RCC_OscConfig+0x328>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e23f      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b76      	ldr	r3, [pc, #472]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	061b      	lsls	r3, r3, #24
 800691e:	4973      	ldr	r1, [pc, #460]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006920:	4313      	orrs	r3, r2
 8006922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006924:	e040      	b.n	80069a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d023      	beq.n	8006976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800692e:	4b6f      	ldr	r3, [pc, #444]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a6e      	ldr	r2, [pc, #440]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693a:	f7fd f8b3 	bl	8003aa4 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006940:	e008      	b.n	8006954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006942:	f7fd f8af 	bl	8003aa4 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e21d      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006954:	4b65      	ldr	r3, [pc, #404]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006960:	4b62      	ldr	r3, [pc, #392]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	495f      	ldr	r1, [pc, #380]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006970:	4313      	orrs	r3, r2
 8006972:	604b      	str	r3, [r1, #4]
 8006974:	e018      	b.n	80069a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006976:	4b5d      	ldr	r3, [pc, #372]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a5c      	ldr	r2, [pc, #368]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 800697c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006982:	f7fd f88f 	bl	8003aa4 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800698a:	f7fd f88b 	bl	8003aa4 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e1f9      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699c:	4b53      	ldr	r3, [pc, #332]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f0      	bne.n	800698a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d03c      	beq.n	8006a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01c      	beq.n	80069f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069bc:	4b4b      	ldr	r3, [pc, #300]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80069be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c2:	4a4a      	ldr	r2, [pc, #296]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fd f86a 	bl	8003aa4 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d4:	f7fd f866 	bl	8003aa4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e1d4      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e6:	4b41      	ldr	r3, [pc, #260]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80069e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0ef      	beq.n	80069d4 <HAL_RCC_OscConfig+0x3ec>
 80069f4:	e01b      	b.n	8006a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f6:	4b3d      	ldr	r3, [pc, #244]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80069f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fc:	4a3b      	ldr	r2, [pc, #236]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a06:	f7fd f84d 	bl	8003aa4 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a0e:	f7fd f849 	bl	8003aa4 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e1b7      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a20:	4b32      	ldr	r3, [pc, #200]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1ef      	bne.n	8006a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80a6 	beq.w	8006b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a40:	4b2a      	ldr	r3, [pc, #168]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4c:	4b27      	ldr	r3, [pc, #156]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a56:	6593      	str	r3, [r2, #88]	; 0x58
 8006a58:	4b24      	ldr	r3, [pc, #144]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a64:	2301      	movs	r3, #1
 8006a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a68:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <HAL_RCC_OscConfig+0x508>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d118      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a74:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <HAL_RCC_OscConfig+0x508>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <HAL_RCC_OscConfig+0x508>)
 8006a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a80:	f7fd f810 	bl	8003aa4 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a88:	f7fd f80c 	bl	8003aa4 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e17a      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a9a:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <HAL_RCC_OscConfig+0x508>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d108      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x4d8>
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab4:	4a0d      	ldr	r2, [pc, #52]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006abe:	e029      	b.n	8006b14 <HAL_RCC_OscConfig+0x52c>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b05      	cmp	r3, #5
 8006ac6:	d115      	bne.n	8006af4 <HAL_RCC_OscConfig+0x50c>
 8006ac8:	4b08      	ldr	r3, [pc, #32]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ace:	4a07      	ldr	r2, [pc, #28]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	4a03      	ldr	r2, [pc, #12]	; (8006aec <HAL_RCC_OscConfig+0x504>)
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae8:	e014      	b.n	8006b14 <HAL_RCC_OscConfig+0x52c>
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000
 8006af0:	40007000 	.word	0x40007000
 8006af4:	4b9c      	ldr	r3, [pc, #624]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afa:	4a9b      	ldr	r2, [pc, #620]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b04:	4b98      	ldr	r3, [pc, #608]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	4a97      	ldr	r2, [pc, #604]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b0c:	f023 0304 	bic.w	r3, r3, #4
 8006b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d016      	beq.n	8006b4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fc ffc2 	bl	8003aa4 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b22:	e00a      	b.n	8006b3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b24:	f7fc ffbe 	bl	8003aa4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e12a      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3a:	4b8b      	ldr	r3, [pc, #556]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ed      	beq.n	8006b24 <HAL_RCC_OscConfig+0x53c>
 8006b48:	e015      	b.n	8006b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4a:	f7fc ffab 	bl	8003aa4 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7fc ffa7 	bl	8003aa4 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e113      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b68:	4b7f      	ldr	r3, [pc, #508]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1ed      	bne.n	8006b52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b76:	7ffb      	ldrb	r3, [r7, #31]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7c:	4b7a      	ldr	r3, [pc, #488]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b80:	4a79      	ldr	r2, [pc, #484]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80fe 	beq.w	8006d8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	f040 80d0 	bne.w	8006d3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b9c:	4b72      	ldr	r3, [pc, #456]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f003 0203 	and.w	r2, r3, #3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d130      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d127      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d11f      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bdc:	2a07      	cmp	r2, #7
 8006bde:	bf14      	ite	ne
 8006be0:	2201      	movne	r2, #1
 8006be2:	2200      	moveq	r2, #0
 8006be4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d113      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d109      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d06e      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	d069      	beq.n	8006cec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006c24:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0ad      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c34:	4b4c      	ldr	r3, [pc, #304]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a4b      	ldr	r2, [pc, #300]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c40:	f7fc ff30 	bl	8003aa4 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fc ff2c 	bl	8003aa4 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e09a      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c5a:	4b43      	ldr	r3, [pc, #268]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c66:	4b40      	ldr	r3, [pc, #256]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	4b40      	ldr	r3, [pc, #256]	; (8006d6c <HAL_RCC_OscConfig+0x784>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c76:	3a01      	subs	r2, #1
 8006c78:	0112      	lsls	r2, r2, #4
 8006c7a:	4311      	orrs	r1, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c80:	0212      	lsls	r2, r2, #8
 8006c82:	4311      	orrs	r1, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c88:	0852      	lsrs	r2, r2, #1
 8006c8a:	3a01      	subs	r2, #1
 8006c8c:	0552      	lsls	r2, r2, #21
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c94:	0852      	lsrs	r2, r2, #1
 8006c96:	3a01      	subs	r2, #1
 8006c98:	0652      	lsls	r2, r2, #25
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ca0:	0912      	lsrs	r2, r2, #4
 8006ca2:	0452      	lsls	r2, r2, #17
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	4930      	ldr	r1, [pc, #192]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cac:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2d      	ldr	r2, [pc, #180]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cc4:	f7fc feee 	bl	8003aa4 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ccc:	f7fc feea 	bl	8003aa4 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e058      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cde:	4b22      	ldr	r3, [pc, #136]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cea:	e050      	b.n	8006d8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e04f      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d148      	bne.n	8006d8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d08:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a16      	ldr	r2, [pc, #88]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d14:	f7fc fec6 	bl	8003aa4 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1c:	f7fc fec2 	bl	8003aa4 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e030      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2e:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x734>
 8006d3a:	e028      	b.n	8006d8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b0c      	cmp	r3, #12
 8006d40:	d023      	beq.n	8006d8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a08      	ldr	r2, [pc, #32]	; (8006d68 <HAL_RCC_OscConfig+0x780>)
 8006d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4e:	f7fc fea9 	bl	8003aa4 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d54:	e00c      	b.n	8006d70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d56:	f7fc fea5 	bl	8003aa4 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d905      	bls.n	8006d70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e013      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <HAL_RCC_OscConfig+0x7b0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1ec      	bne.n	8006d56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_RCC_OscConfig+0x7b0>)
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	4905      	ldr	r1, [pc, #20]	; (8006d98 <HAL_RCC_OscConfig+0x7b0>)
 8006d82:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <HAL_RCC_OscConfig+0x7b4>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	60cb      	str	r3, [r1, #12]
 8006d88:	e001      	b.n	8006d8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	feeefffc 	.word	0xfeeefffc

08006da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0e7      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006db4:	4b75      	ldr	r3, [pc, #468]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d910      	bls.n	8006de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc2:	4b72      	ldr	r3, [pc, #456]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f023 0207 	bic.w	r2, r3, #7
 8006dca:	4970      	ldr	r1, [pc, #448]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd2:	4b6e      	ldr	r3, [pc, #440]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d001      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0cf      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d010      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	4b66      	ldr	r3, [pc, #408]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d908      	bls.n	8006e12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e00:	4b63      	ldr	r3, [pc, #396]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4960      	ldr	r1, [pc, #384]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04c      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e26:	4b5a      	ldr	r3, [pc, #360]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d121      	bne.n	8006e76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0a6      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e3e:	4b54      	ldr	r3, [pc, #336]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d115      	bne.n	8006e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e09a      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d107      	bne.n	8006e66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e08e      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e66:	4b4a      	ldr	r3, [pc, #296]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e086      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e76:	4b46      	ldr	r3, [pc, #280]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f023 0203 	bic.w	r2, r3, #3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	4943      	ldr	r1, [pc, #268]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e88:	f7fc fe0c 	bl	8003aa4 <HAL_GetTick>
 8006e8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8e:	e00a      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e90:	f7fc fe08 	bl	8003aa4 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e06e      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea6:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 020c 	and.w	r2, r3, #12
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d1eb      	bne.n	8006e90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d010      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d208      	bcs.n	8006ee6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed4:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	492b      	ldr	r1, [pc, #172]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d210      	bcs.n	8006f16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f023 0207 	bic.w	r2, r3, #7
 8006efc:	4923      	ldr	r1, [pc, #140]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f04:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_RCC_ClockConfig+0x1ec>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d001      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e036      	b.n	8006f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d008      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f22:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	4918      	ldr	r1, [pc, #96]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	4910      	ldr	r1, [pc, #64]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f54:	f000 f824 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <HAL_RCC_ClockConfig+0x1f0>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	091b      	lsrs	r3, r3, #4
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <HAL_RCC_ClockConfig+0x1f4>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f70:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <HAL_RCC_ClockConfig+0x1f8>)
 8006f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <HAL_RCC_ClockConfig+0x1fc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fc fd43 	bl	8003a04 <HAL_InitTick>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f82:	7afb      	ldrb	r3, [r7, #11]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40022000 	.word	0x40022000
 8006f90:	40021000 	.word	0x40021000
 8006f94:	08016b60 	.word	0x08016b60
 8006f98:	20000000 	.word	0x20000000
 8006f9c:	20000004 	.word	0x20000004

08006fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b089      	sub	sp, #36	; 0x24
 8006fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fae:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 030c 	and.w	r3, r3, #12
 8006fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fb8:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d121      	bne.n	8007012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d11e      	bne.n	8007012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fd4:	4b34      	ldr	r3, [pc, #208]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006fe0:	4b31      	ldr	r3, [pc, #196]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	e005      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ff0:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ffc:	4a2b      	ldr	r2, [pc, #172]	; (80070ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007010:	e00a      	b.n	8007028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b04      	cmp	r3, #4
 8007016:	d102      	bne.n	800701e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007018:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e004      	b.n	8007028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d101      	bne.n	8007028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007024:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2b0c      	cmp	r3, #12
 800702c:	d134      	bne.n	8007098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d003      	beq.n	8007046 <HAL_RCC_GetSysClockFreq+0xa6>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d003      	beq.n	800704c <HAL_RCC_GetSysClockFreq+0xac>
 8007044:	e005      	b.n	8007052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007046:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007048:	617b      	str	r3, [r7, #20]
      break;
 800704a:	e005      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800704c:	4b19      	ldr	r3, [pc, #100]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800704e:	617b      	str	r3, [r7, #20]
      break;
 8007050:	e002      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	617b      	str	r3, [r7, #20]
      break;
 8007056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	3301      	adds	r3, #1
 8007064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	fb03 f202 	mul.w	r2, r3, r2
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	0e5b      	lsrs	r3, r3, #25
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	3301      	adds	r3, #1
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007098:	69bb      	ldr	r3, [r7, #24]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3724      	adds	r7, #36	; 0x24
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40021000 	.word	0x40021000
 80070ac:	08016b78 	.word	0x08016b78
 80070b0:	00f42400 	.word	0x00f42400
 80070b4:	00b71b00 	.word	0x00b71b00

080070b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070bc:	4b03      	ldr	r3, [pc, #12]	; (80070cc <HAL_RCC_GetHCLKFreq+0x14>)
 80070be:	681b      	ldr	r3, [r3, #0]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000000 	.word	0x20000000

080070d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070d4:	f7ff fff0 	bl	80070b8 <HAL_RCC_GetHCLKFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	4904      	ldr	r1, [pc, #16]	; (80070f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070e6:	5ccb      	ldrb	r3, [r1, r3]
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40021000 	.word	0x40021000
 80070f8:	08016b70 	.word	0x08016b70

080070fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007100:	f7ff ffda 	bl	80070b8 <HAL_RCC_GetHCLKFreq>
 8007104:	4602      	mov	r2, r0
 8007106:	4b06      	ldr	r3, [pc, #24]	; (8007120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	0adb      	lsrs	r3, r3, #11
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4904      	ldr	r1, [pc, #16]	; (8007124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007112:	5ccb      	ldrb	r3, [r1, r3]
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800711c:	4618      	mov	r0, r3
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40021000 	.word	0x40021000
 8007124:	08016b70 	.word	0x08016b70

08007128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007134:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007140:	f7ff f9c4 	bl	80064cc <HAL_PWREx_GetVoltageRange>
 8007144:	6178      	str	r0, [r7, #20]
 8007146:	e014      	b.n	8007172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714c:	4a24      	ldr	r2, [pc, #144]	; (80071e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800714e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007152:	6593      	str	r3, [r2, #88]	; 0x58
 8007154:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007160:	f7ff f9b4 	bl	80064cc <HAL_PWREx_GetVoltageRange>
 8007164:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007166:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800716c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007170:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007178:	d10b      	bne.n	8007192 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d919      	bls.n	80071b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2ba0      	cmp	r3, #160	; 0xa0
 8007184:	d902      	bls.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007186:	2302      	movs	r3, #2
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e013      	b.n	80071b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800718c:	2301      	movs	r3, #1
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	e010      	b.n	80071b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d902      	bls.n	800719e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007198:	2303      	movs	r3, #3
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	e00a      	b.n	80071b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b80      	cmp	r3, #128	; 0x80
 80071a2:	d102      	bne.n	80071aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071a4:	2302      	movs	r3, #2
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	e004      	b.n	80071b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b70      	cmp	r3, #112	; 0x70
 80071ae:	d101      	bne.n	80071b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071b0:	2301      	movs	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f023 0207 	bic.w	r2, r3, #7
 80071bc:	4909      	ldr	r1, [pc, #36]	; (80071e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d001      	beq.n	80071d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40021000 	.word	0x40021000
 80071e4:	40022000 	.word	0x40022000

080071e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071f0:	2300      	movs	r3, #0
 80071f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071f4:	2300      	movs	r3, #0
 80071f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007200:	2b00      	cmp	r3, #0
 8007202:	d041      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800720c:	d02a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800720e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007212:	d824      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007218:	d008      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800721a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800721e:	d81e      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007228:	d010      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800722a:	e018      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800722c:	4b86      	ldr	r3, [pc, #536]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a85      	ldr	r2, [pc, #532]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007236:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007238:	e015      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f829 	bl	8008298 <RCCEx_PLLSAI1_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800724a:	e00c      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3320      	adds	r3, #32
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f001 f914 	bl	8008480 <RCCEx_PLLSAI2_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800725c:	e003      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	74fb      	strb	r3, [r7, #19]
      break;
 8007262:	e000      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007266:	7cfb      	ldrb	r3, [r7, #19]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10b      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800726c:	4b76      	ldr	r3, [pc, #472]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727a:	4973      	ldr	r1, [pc, #460]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007282:	e001      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007284:	7cfb      	ldrb	r3, [r7, #19]
 8007286:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d041      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800729c:	d02a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800729e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072a2:	d824      	bhi.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072a8:	d008      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ae:	d81e      	bhi.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80072b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b8:	d010      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072ba:	e018      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072bc:	4b62      	ldr	r3, [pc, #392]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	4a61      	ldr	r2, [pc, #388]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072c8:	e015      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 ffe1 	bl	8008298 <RCCEx_PLLSAI1_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072da:	e00c      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3320      	adds	r3, #32
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f8cc 	bl	8008480 <RCCEx_PLLSAI2_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	74fb      	strb	r3, [r7, #19]
      break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80072f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f6:	7cfb      	ldrb	r3, [r7, #19]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80072fc:	4b52      	ldr	r3, [pc, #328]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007302:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800730a:	494f      	ldr	r1, [pc, #316]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	7cfb      	ldrb	r3, [r7, #19]
 8007316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80a0 	beq.w	8007466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007326:	2300      	movs	r3, #0
 8007328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800732a:	4b47      	ldr	r3, [pc, #284]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007340:	4b41      	ldr	r3, [pc, #260]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007344:	4a40      	ldr	r2, [pc, #256]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800734a:	6593      	str	r3, [r2, #88]	; 0x58
 800734c:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800734e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007358:	2301      	movs	r3, #1
 800735a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800735c:	4b3b      	ldr	r3, [pc, #236]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a3a      	ldr	r2, [pc, #232]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007368:	f7fc fb9c 	bl	8003aa4 <HAL_GetTick>
 800736c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800736e:	e009      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007370:	f7fc fb98 	bl	8003aa4 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d902      	bls.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	74fb      	strb	r3, [r7, #19]
        break;
 8007382:	e005      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007384:	4b31      	ldr	r3, [pc, #196]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0ef      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d15c      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007396:	4b2c      	ldr	r3, [pc, #176]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01f      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d019      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073b4:	4b24      	ldr	r3, [pc, #144]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073c0:	4b21      	ldr	r3, [pc, #132]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	4a20      	ldr	r2, [pc, #128]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073d0:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d6:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073e0:	4a19      	ldr	r2, [pc, #100]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f2:	f7fc fb57 	bl	8003aa4 <HAL_GetTick>
 80073f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073f8:	e00b      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fc fb53 	bl	8003aa4 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	; 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d902      	bls.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	74fb      	strb	r3, [r7, #19]
            break;
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007412:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ec      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007420:	7cfb      	ldrb	r3, [r7, #19]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10c      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007436:	4904      	ldr	r1, [pc, #16]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800743e:	e009      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007440:	7cfb      	ldrb	r3, [r7, #19]
 8007442:	74bb      	strb	r3, [r7, #18]
 8007444:	e006      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007446:	bf00      	nop
 8007448:	40021000 	.word	0x40021000
 800744c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7cfb      	ldrb	r3, [r7, #19]
 8007452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007454:	7c7b      	ldrb	r3, [r7, #17]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d105      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745a:	4b9e      	ldr	r3, [pc, #632]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	4a9d      	ldr	r2, [pc, #628]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007464:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007472:	4b98      	ldr	r3, [pc, #608]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f023 0203 	bic.w	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	4994      	ldr	r1, [pc, #592]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007494:	4b8f      	ldr	r3, [pc, #572]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749a:	f023 020c 	bic.w	r2, r3, #12
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	498c      	ldr	r1, [pc, #560]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074b6:	4b87      	ldr	r3, [pc, #540]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	4983      	ldr	r1, [pc, #524]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074d8:	4b7e      	ldr	r3, [pc, #504]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	497b      	ldr	r1, [pc, #492]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074fa:	4b76      	ldr	r3, [pc, #472]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007508:	4972      	ldr	r1, [pc, #456]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800751c:	4b6d      	ldr	r3, [pc, #436]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007522:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752a:	496a      	ldr	r1, [pc, #424]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800753e:	4b65      	ldr	r3, [pc, #404]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	4961      	ldr	r1, [pc, #388]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007560:	4b5c      	ldr	r3, [pc, #368]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756e:	4959      	ldr	r1, [pc, #356]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007582:	4b54      	ldr	r3, [pc, #336]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	4950      	ldr	r1, [pc, #320]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075a4:	4b4b      	ldr	r3, [pc, #300]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b2:	4948      	ldr	r1, [pc, #288]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075c6:	4b43      	ldr	r3, [pc, #268]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	493f      	ldr	r1, [pc, #252]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d028      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075e8:	4b3a      	ldr	r3, [pc, #232]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f6:	4937      	ldr	r1, [pc, #220]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007606:	d106      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007608:	4b32      	ldr	r3, [pc, #200]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a31      	ldr	r2, [pc, #196]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800760e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007612:	60d3      	str	r3, [r2, #12]
 8007614:	e011      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800761a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	2101      	movs	r1, #1
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fe36 	bl	8008298 <RCCEx_PLLSAI1_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007636:	7cfb      	ldrb	r3, [r7, #19]
 8007638:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d028      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007646:	4b23      	ldr	r3, [pc, #140]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	491f      	ldr	r1, [pc, #124]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007666:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007670:	60d3      	str	r3, [r2, #12]
 8007672:	e011      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800767c:	d10c      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
 8007682:	2101      	movs	r1, #1
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fe07 	bl	8008298 <RCCEx_PLLSAI1_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800768e:	7cfb      	ldrb	r3, [r7, #19]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007694:	7cfb      	ldrb	r3, [r7, #19]
 8007696:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02b      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076a4:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b2:	4908      	ldr	r1, [pc, #32]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076c2:	d109      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c4:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	4a02      	ldr	r2, [pc, #8]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ce:	60d3      	str	r3, [r2, #12]
 80076d0:	e014      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80076d2:	bf00      	nop
 80076d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076e0:	d10c      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3304      	adds	r3, #4
 80076e6:	2101      	movs	r1, #1
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fdd5 	bl	8008298 <RCCEx_PLLSAI1_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076f2:	7cfb      	ldrb	r3, [r7, #19]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80076f8:	7cfb      	ldrb	r3, [r7, #19]
 80076fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02f      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007708:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800770a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007716:	4928      	ldr	r1, [pc, #160]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007726:	d10d      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3304      	adds	r3, #4
 800772c:	2102      	movs	r1, #2
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fdb2 	bl	8008298 <RCCEx_PLLSAI1_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007738:	7cfb      	ldrb	r3, [r7, #19]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d014      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800773e:	7cfb      	ldrb	r3, [r7, #19]
 8007740:	74bb      	strb	r3, [r7, #18]
 8007742:	e011      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774c:	d10c      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3320      	adds	r3, #32
 8007752:	2102      	movs	r1, #2
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fe93 	bl	8008480 <RCCEx_PLLSAI2_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800775e:	7cfb      	ldrb	r3, [r7, #19]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007764:	7cfb      	ldrb	r3, [r7, #19]
 8007766:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007782:	490d      	ldr	r1, [pc, #52]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a6:	4904      	ldr	r1, [pc, #16]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40021000 	.word	0x40021000

080077bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ce:	d13e      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80077d0:	4bb2      	ldr	r3, [pc, #712]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077da:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e2:	d028      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ea:	f200 8542 	bhi.w	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f4:	d005      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fc:	d00e      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80077fe:	f000 bd38 	b.w	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007802:	4ba6      	ldr	r3, [pc, #664]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b02      	cmp	r3, #2
 800780e:	f040 8532 	bne.w	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	61fb      	str	r3, [r7, #28]
      break;
 8007818:	f000 bd2d 	b.w	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800781c:	4b9f      	ldr	r3, [pc, #636]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	f040 8527 	bne.w	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800782c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007830:	61fb      	str	r3, [r7, #28]
      break;
 8007832:	f000 bd22 	b.w	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007836:	4b99      	ldr	r3, [pc, #612]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007842:	f040 851c 	bne.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8007846:	4b96      	ldr	r3, [pc, #600]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007848:	61fb      	str	r3, [r7, #28]
      break;
 800784a:	f000 bd18 	b.w	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800784e:	4b93      	ldr	r3, [pc, #588]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b03      	cmp	r3, #3
 800785c:	d036      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d840      	bhi.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d003      	beq.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d020      	beq.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007870:	e039      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007872:	4b8a      	ldr	r3, [pc, #552]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b02      	cmp	r3, #2
 800787c:	d116      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800787e:	4b87      	ldr	r3, [pc, #540]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800788a:	4b84      	ldr	r3, [pc, #528]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	091b      	lsrs	r3, r3, #4
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	e005      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007896:	4b81      	ldr	r3, [pc, #516]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800789c:	0a1b      	lsrs	r3, r3, #8
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	4a80      	ldr	r2, [pc, #512]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80078a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80078aa:	e01f      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61bb      	str	r3, [r7, #24]
      break;
 80078b0:	e01c      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078b2:	4b7a      	ldr	r3, [pc, #488]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80078c0:	4b79      	ldr	r3, [pc, #484]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80078c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80078c4:	e012      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61bb      	str	r3, [r7, #24]
      break;
 80078ca:	e00f      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078cc:	4b73      	ldr	r3, [pc, #460]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078d8:	d102      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80078da:	4b74      	ldr	r3, [pc, #464]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80078dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80078de:	e005      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
      break;
 80078e4:	e002      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
      break;
 80078ea:	bf00      	nop
    }

    switch(PeriphClk)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078f2:	f000 80dd 	beq.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078fc:	f200 84c1 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007906:	f000 80d3 	beq.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007910:	f200 84b7 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791a:	f000 835f 	beq.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	f200 84ad 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792e:	f000 847e 	beq.w	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007938:	f200 84a3 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007942:	f000 82cd 	beq.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800794c:	f200 8499 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007956:	f000 80ab 	beq.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007960:	f200 848f 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	f000 8090 	beq.w	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	f200 8485 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800797e:	d07f      	beq.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007986:	f200 847c 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007990:	f000 8403 	beq.w	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799a:	f200 8472 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a4:	f000 83af 	beq.w	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ae:	f200 8468 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b8:	f000 8379 	beq.w	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c2:	f200 845e 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b80      	cmp	r3, #128	; 0x80
 80079ca:	f000 8344 	beq.w	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	f200 8456 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d84b      	bhi.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 844f 	beq.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	2b1f      	cmp	r3, #31
 80079ea:	f200 844a 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80079ee:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80079f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f4:	08007bdd 	.word	0x08007bdd
 80079f8:	08007c4b 	.word	0x08007c4b
 80079fc:	08008283 	.word	0x08008283
 8007a00:	08007cdf 	.word	0x08007cdf
 8007a04:	08008283 	.word	0x08008283
 8007a08:	08008283 	.word	0x08008283
 8007a0c:	08008283 	.word	0x08008283
 8007a10:	08007d65 	.word	0x08007d65
 8007a14:	08008283 	.word	0x08008283
 8007a18:	08008283 	.word	0x08008283
 8007a1c:	08008283 	.word	0x08008283
 8007a20:	08008283 	.word	0x08008283
 8007a24:	08008283 	.word	0x08008283
 8007a28:	08008283 	.word	0x08008283
 8007a2c:	08008283 	.word	0x08008283
 8007a30:	08007ddd 	.word	0x08007ddd
 8007a34:	08008283 	.word	0x08008283
 8007a38:	08008283 	.word	0x08008283
 8007a3c:	08008283 	.word	0x08008283
 8007a40:	08008283 	.word	0x08008283
 8007a44:	08008283 	.word	0x08008283
 8007a48:	08008283 	.word	0x08008283
 8007a4c:	08008283 	.word	0x08008283
 8007a50:	08008283 	.word	0x08008283
 8007a54:	08008283 	.word	0x08008283
 8007a58:	08008283 	.word	0x08008283
 8007a5c:	08008283 	.word	0x08008283
 8007a60:	08008283 	.word	0x08008283
 8007a64:	08008283 	.word	0x08008283
 8007a68:	08008283 	.word	0x08008283
 8007a6c:	08008283 	.word	0x08008283
 8007a70:	08007e5f 	.word	0x08007e5f
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b40      	cmp	r3, #64	; 0x40
 8007a78:	f000 82c1 	beq.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007a7c:	f000 bc01 	b.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007a80:	69b9      	ldr	r1, [r7, #24]
 8007a82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a86:	f000 fdd9 	bl	800863c <RCCEx_GetSAIxPeriphCLKFreq>
 8007a8a:	61f8      	str	r0, [r7, #28]
      break;
 8007a8c:	e3fa      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007a8e:	69b9      	ldr	r1, [r7, #24]
 8007a90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a94:	f000 fdd2 	bl	800863c <RCCEx_GetSAIxPeriphCLKFreq>
 8007a98:	61f8      	str	r0, [r7, #28]
      break;
 8007a9a:	e3f3      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007a9c:	40021000 	.word	0x40021000
 8007aa0:	0005b8d8 	.word	0x0005b8d8
 8007aa4:	08016b78 	.word	0x08016b78
 8007aa8:	00f42400 	.word	0x00f42400
 8007aac:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007ab0:	4ba9      	ldr	r3, [pc, #676]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ac2:	d00c      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007aca:	d87f      	bhi.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ad2:	d04e      	beq.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ada:	d01d      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8007adc:	e076      	b.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007ade:	4b9e      	ldr	r3, [pc, #632]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d172      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007aea:	4b9b      	ldr	r3, [pc, #620]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8007af6:	4b98      	ldr	r3, [pc, #608]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	e005      	b.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8007b02:	4b95      	ldr	r3, [pc, #596]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b08:	0a1b      	lsrs	r3, r3, #8
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	4a93      	ldr	r2, [pc, #588]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b14:	61fb      	str	r3, [r7, #28]
          break;
 8007b16:	e05b      	b.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007b18:	4b8f      	ldr	r3, [pc, #572]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b24:	d156      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007b26:	4b8c      	ldr	r3, [pc, #560]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b32:	d14f      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007b34:	4b88      	ldr	r3, [pc, #544]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	fb03 f202 	mul.w	r2, r3, r2
 8007b48:	4b83      	ldr	r3, [pc, #524]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	3301      	adds	r3, #1
 8007b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b58:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007b5a:	4b7f      	ldr	r3, [pc, #508]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	0d5b      	lsrs	r3, r3, #21
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	3301      	adds	r3, #1
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6e:	61fb      	str	r3, [r7, #28]
          break;
 8007b70:	e030      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007b72:	4b79      	ldr	r3, [pc, #484]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b7e:	d12b      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007b80:	4b75      	ldr	r3, [pc, #468]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8c:	d124      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007b8e:	4b72      	ldr	r3, [pc, #456]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b98:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	fb03 f202 	mul.w	r2, r3, r2
 8007ba2:	4b6d      	ldr	r3, [pc, #436]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	3301      	adds	r3, #1
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007bb4:	4b68      	ldr	r3, [pc, #416]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	0d5b      	lsrs	r3, r3, #21
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc8:	61fb      	str	r3, [r7, #28]
          break;
 8007bca:	e005      	b.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8007bcc:	bf00      	nop
 8007bce:	e359      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007bd0:	bf00      	nop
 8007bd2:	e357      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007bd4:	bf00      	nop
 8007bd6:	e355      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007bd8:	bf00      	nop
        break;
 8007bda:	e353      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007bdc:	4b5e      	ldr	r3, [pc, #376]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d827      	bhi.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c05 	.word	0x08007c05
 8007bf8:	08007c0d 	.word	0x08007c0d
 8007bfc:	08007c15 	.word	0x08007c15
 8007c00:	08007c29 	.word	0x08007c29
          frequency = HAL_RCC_GetPCLK2Freq();
 8007c04:	f7ff fa7a 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8007c08:	61f8      	str	r0, [r7, #28]
          break;
 8007c0a:	e01d      	b.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c0c:	f7ff f9c8 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007c10:	61f8      	str	r0, [r7, #28]
          break;
 8007c12:	e019      	b.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c14:	4b50      	ldr	r3, [pc, #320]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c20:	d10f      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8007c22:	4b4f      	ldr	r3, [pc, #316]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007c24:	61fb      	str	r3, [r7, #28]
          break;
 8007c26:	e00c      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c28:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d107      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	61fb      	str	r3, [r7, #28]
          break;
 8007c3c:	e003      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8007c3e:	bf00      	nop
 8007c40:	e320      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007c42:	bf00      	nop
 8007c44:	e31e      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007c46:	bf00      	nop
        break;
 8007c48:	e31c      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007c4a:	4b43      	ldr	r3, [pc, #268]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b0c      	cmp	r3, #12
 8007c5a:	d83a      	bhi.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007c5c:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08007cd3 	.word	0x08007cd3
 8007c6c:	08007cd3 	.word	0x08007cd3
 8007c70:	08007cd3 	.word	0x08007cd3
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	08007cd3 	.word	0x08007cd3
 8007c7c:	08007cd3 	.word	0x08007cd3
 8007c80:	08007cd3 	.word	0x08007cd3
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007cd3 	.word	0x08007cd3
 8007c8c:	08007cd3 	.word	0x08007cd3
 8007c90:	08007cd3 	.word	0x08007cd3
 8007c94:	08007cbd 	.word	0x08007cbd
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c98:	f7ff fa1a 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8007c9c:	61f8      	str	r0, [r7, #28]
          break;
 8007c9e:	e01d      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ca0:	f7ff f97e 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007ca4:	61f8      	str	r0, [r7, #28]
          break;
 8007ca6:	e019      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca8:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8007cb6:	4b2a      	ldr	r3, [pc, #168]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007cb8:	61fb      	str	r3, [r7, #28]
          break;
 8007cba:	e00c      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cbc:	4b26      	ldr	r3, [pc, #152]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d107      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8007cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cce:	61fb      	str	r3, [r7, #28]
          break;
 8007cd0:	e003      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8007cd2:	bf00      	nop
 8007cd4:	e2d6      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007cd6:	bf00      	nop
 8007cd8:	e2d4      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007cda:	bf00      	nop
        break;
 8007cdc:	e2d2      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007cde:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b30      	cmp	r3, #48	; 0x30
 8007cee:	d021      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b30      	cmp	r3, #48	; 0x30
 8007cf4:	d829      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d011      	beq.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d823      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d004      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8007d0e:	e01c      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d10:	f7ff f9de 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8007d14:	61f8      	str	r0, [r7, #28]
          break;
 8007d16:	e01d      	b.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d18:	f7ff f942 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007d1c:	61f8      	str	r0, [r7, #28]
          break;
 8007d1e:	e019      	b.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d20:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d2c:	d10f      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007d30:	61fb      	str	r3, [r7, #28]
          break;
 8007d32:	e00c      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d34:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d107      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8007d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d46:	61fb      	str	r3, [r7, #28]
          break;
 8007d48:	e003      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8007d4a:	bf00      	nop
 8007d4c:	e29a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d4e:	bf00      	nop
 8007d50:	e298      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d52:	bf00      	nop
        break;
 8007d54:	e296      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007d56:	bf00      	nop
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	08016b78 	.word	0x08016b78
 8007d60:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d64:	4b9b      	ldr	r3, [pc, #620]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2bc0      	cmp	r3, #192	; 0xc0
 8007d74:	d021      	beq.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2bc0      	cmp	r3, #192	; 0xc0
 8007d7a:	d829      	bhi.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b80      	cmp	r3, #128	; 0x80
 8007d80:	d011      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	2b80      	cmp	r3, #128	; 0x80
 8007d86:	d823      	bhi.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d004      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8007d94:	e01c      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d96:	f7ff f99b 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8007d9a:	61f8      	str	r0, [r7, #28]
          break;
 8007d9c:	e01d      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d9e:	f7ff f8ff 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007da2:	61f8      	str	r0, [r7, #28]
          break;
 8007da4:	e019      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007da6:	4b8b      	ldr	r3, [pc, #556]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db2:	d10f      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8007db4:	4b88      	ldr	r3, [pc, #544]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007db6:	61fb      	str	r3, [r7, #28]
          break;
 8007db8:	e00c      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007dba:	4b86      	ldr	r3, [pc, #536]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d107      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8007dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dcc:	61fb      	str	r3, [r7, #28]
          break;
 8007dce:	e003      	b.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8007dd0:	bf00      	nop
 8007dd2:	e257      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007dd4:	bf00      	nop
 8007dd6:	e255      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007dd8:	bf00      	nop
        break;
 8007dda:	e253      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007ddc:	4b7d      	ldr	r3, [pc, #500]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dee:	d025      	beq.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007df6:	d82c      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfe:	d013      	beq.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e06:	d824      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e14:	d004      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8007e16:	e01c      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e18:	f7ff f95a 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8007e1c:	61f8      	str	r0, [r7, #28]
          break;
 8007e1e:	e01d      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e20:	f7ff f8be 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007e24:	61f8      	str	r0, [r7, #28]
          break;
 8007e26:	e019      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e28:	4b6a      	ldr	r3, [pc, #424]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e34:	d10f      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8007e36:	4b68      	ldr	r3, [pc, #416]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007e38:	61fb      	str	r3, [r7, #28]
          break;
 8007e3a:	e00c      	b.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e3c:	4b65      	ldr	r3, [pc, #404]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d107      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4e:	61fb      	str	r3, [r7, #28]
          break;
 8007e50:	e003      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8007e52:	bf00      	nop
 8007e54:	e216      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e56:	bf00      	nop
 8007e58:	e214      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e5a:	bf00      	nop
        break;
 8007e5c:	e212      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007e5e:	4b5d      	ldr	r3, [pc, #372]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e70:	d025      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e78:	d82c      	bhi.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e80:	d013      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e88:	d824      	bhi.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e96:	d004      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8007e98:	e01c      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e9a:	f7ff f919 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8007e9e:	61f8      	str	r0, [r7, #28]
          break;
 8007ea0:	e01d      	b.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ea2:	f7ff f87d 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007ea6:	61f8      	str	r0, [r7, #28]
          break;
 8007ea8:	e019      	b.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eaa:	4b4a      	ldr	r3, [pc, #296]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d10f      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8007eb8:	4b47      	ldr	r3, [pc, #284]	; (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007eba:	61fb      	str	r3, [r7, #28]
          break;
 8007ebc:	e00c      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ebe:	4b45      	ldr	r3, [pc, #276]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d107      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8007ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed0:	61fb      	str	r3, [r7, #28]
          break;
 8007ed2:	e003      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8007ed4:	bf00      	nop
 8007ed6:	e1d5      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007ed8:	bf00      	nop
 8007eda:	e1d3      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007edc:	bf00      	nop
        break;
 8007ede:	e1d1      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ef2:	d00c      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007efa:	d864      	bhi.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f02:	d008      	beq.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0a:	d030      	beq.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8007f0c:	e05b      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f0e:	f7ff f847 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007f12:	61f8      	str	r0, [r7, #28]
          break;
 8007f14:	e05c      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007f16:	4b2f      	ldr	r3, [pc, #188]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f22:	d152      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d04c      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007f30:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	0a1b      	lsrs	r3, r3, #8
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	fb03 f202 	mul.w	r2, r3, r2
 8007f44:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	091b      	lsrs	r3, r3, #4
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	3301      	adds	r3, #1
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007f56:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	0e5b      	lsrs	r3, r3, #25
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	3301      	adds	r3, #1
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	61fb      	str	r3, [r7, #28]
          break;
 8007f6c:	e02d      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7a:	d128      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d022      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007f88:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	0a1b      	lsrs	r3, r3, #8
 8007f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f92:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	fb03 f202 	mul.w	r2, r3, r2
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	091b      	lsrs	r3, r3, #4
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	0e5b      	lsrs	r3, r3, #25
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	3301      	adds	r3, #1
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc2:	61fb      	str	r3, [r7, #28]
          break;
 8007fc4:	e003      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8007fc6:	bf00      	nop
 8007fc8:	e15c      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007fca:	bf00      	nop
 8007fcc:	e15a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007fce:	bf00      	nop
        break;
 8007fd0:	e158      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007fd2:	bf00      	nop
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007fdc:	4b9d      	ldr	r3, [pc, #628]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007fee:	f7ff f885 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8007ff2:	61f8      	str	r0, [r7, #28]
        break;
 8007ff4:	e146      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ff6:	f7fe ffd3 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8007ffa:	61f8      	str	r0, [r7, #28]
        break;
 8007ffc:	e142      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007ffe:	4b95      	ldr	r3, [pc, #596]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008010:	d013      	beq.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008018:	d819      	bhi.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008026:	d004      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8008028:	e011      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800802a:	f7ff f851 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 800802e:	61f8      	str	r0, [r7, #28]
          break;
 8008030:	e010      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8008032:	f7fe ffb5 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8008036:	61f8      	str	r0, [r7, #28]
          break;
 8008038:	e00c      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800803a:	4b86      	ldr	r3, [pc, #536]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008046:	d104      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8008048:	4b83      	ldr	r3, [pc, #524]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800804a:	61fb      	str	r3, [r7, #28]
          break;
 800804c:	e001      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800804e:	bf00      	nop
 8008050:	e118      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008052:	bf00      	nop
        break;
 8008054:	e116      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008056:	4b7f      	ldr	r3, [pc, #508]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008068:	d013      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008070:	d819      	bhi.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800807e:	d004      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8008080:	e011      	b.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008082:	f7ff f825 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8008086:	61f8      	str	r0, [r7, #28]
          break;
 8008088:	e010      	b.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800808a:	f7fe ff89 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 800808e:	61f8      	str	r0, [r7, #28]
          break;
 8008090:	e00c      	b.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008092:	4b70      	ldr	r3, [pc, #448]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809e:	d104      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80080a0:	4b6d      	ldr	r3, [pc, #436]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80080a2:	61fb      	str	r3, [r7, #28]
          break;
 80080a4:	e001      	b.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80080a6:	bf00      	nop
 80080a8:	e0ec      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80080aa:	bf00      	nop
        break;
 80080ac:	e0ea      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80080ae:	4b69      	ldr	r3, [pc, #420]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80080b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c0:	d013      	beq.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c8:	d819      	bhi.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d6:	d004      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80080d8:	e011      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080da:	f7fe fff9 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 80080de:	61f8      	str	r0, [r7, #28]
          break;
 80080e0:	e010      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80080e2:	f7fe ff5d 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 80080e6:	61f8      	str	r0, [r7, #28]
          break;
 80080e8:	e00c      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080ea:	4b5a      	ldr	r3, [pc, #360]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f6:	d104      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80080f8:	4b57      	ldr	r3, [pc, #348]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80080fa:	61fb      	str	r3, [r7, #28]
          break;
 80080fc:	e001      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80080fe:	bf00      	nop
 8008100:	e0c0      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008102:	bf00      	nop
        break;
 8008104:	e0be      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008106:	4b53      	ldr	r3, [pc, #332]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008118:	d02c      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008120:	d833      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008128:	d01a      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008130:	d82b      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d004      	beq.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800813e:	d004      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8008140:	e023      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008142:	f7fe ffc5 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8008146:	61f8      	str	r0, [r7, #28]
          break;
 8008148:	e026      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800814a:	4b42      	ldr	r3, [pc, #264]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800814c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b02      	cmp	r3, #2
 8008156:	d11a      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8008158:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800815c:	61fb      	str	r3, [r7, #28]
          break;
 800815e:	e016      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008160:	4b3c      	ldr	r3, [pc, #240]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816c:	d111      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800816e:	4b3a      	ldr	r3, [pc, #232]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008170:	61fb      	str	r3, [r7, #28]
          break;
 8008172:	e00e      	b.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008174:	4b37      	ldr	r3, [pc, #220]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d109      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008186:	61fb      	str	r3, [r7, #28]
          break;
 8008188:	e005      	b.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800818a:	bf00      	nop
 800818c:	e07a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800818e:	bf00      	nop
 8008190:	e078      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008192:	bf00      	nop
 8008194:	e076      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008196:	bf00      	nop
        break;
 8008198:	e074      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800819a:	4b2e      	ldr	r3, [pc, #184]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081ac:	d02c      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081b4:	d833      	bhi.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081bc:	d01a      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081c4:	d82b      	bhi.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d2:	d004      	beq.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80081d4:	e023      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081d6:	f7fe ff7b 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 80081da:	61f8      	str	r0, [r7, #28]
          break;
 80081dc:	e026      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80081de:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80081e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d11a      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80081ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081f0:	61fb      	str	r3, [r7, #28]
          break;
 80081f2:	e016      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081f4:	4b17      	ldr	r3, [pc, #92]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008200:	d111      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008204:	61fb      	str	r3, [r7, #28]
          break;
 8008206:	e00e      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008208:	4b12      	ldr	r3, [pc, #72]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800820a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b02      	cmp	r3, #2
 8008214:	d109      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8008216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821a:	61fb      	str	r3, [r7, #28]
          break;
 800821c:	e005      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800821e:	bf00      	nop
 8008220:	e030      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008222:	bf00      	nop
 8008224:	e02e      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008226:	bf00      	nop
 8008228:	e02c      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800822a:	bf00      	nop
        break;
 800822c:	e02a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008246:	d009      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8008248:	e012      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800824a:	f7fe ff41 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 800824e:	61f8      	str	r0, [r7, #28]
          break;
 8008250:	e00e      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8008252:	bf00      	nop
 8008254:	40021000 	.word	0x40021000
 8008258:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008268:	d101      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800826c:	61fb      	str	r3, [r7, #28]
          break;
 800826e:	bf00      	nop
        break;
 8008270:	e008      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008272:	bf00      	nop
 8008274:	e006      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008276:	bf00      	nop
 8008278:	e004      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800827a:	bf00      	nop
 800827c:	e002      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800827e:	bf00      	nop
 8008280:	e000      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008282:	bf00      	nop
    }
  }

  return(frequency);
 8008284:	69fb      	ldr	r3, [r7, #28]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40021000 	.word	0x40021000
 8008294:	00f42400 	.word	0x00f42400

08008298 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80082a6:	4b75      	ldr	r3, [pc, #468]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d018      	beq.n	80082e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80082b2:	4b72      	ldr	r3, [pc, #456]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0203 	and.w	r2, r3, #3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d10d      	bne.n	80082de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
       ||
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80082ca:	4b6c      	ldr	r3, [pc, #432]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	091b      	lsrs	r3, r3, #4
 80082d0:	f003 0307 	and.w	r3, r3, #7
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
       ||
 80082da:	429a      	cmp	r2, r3
 80082dc:	d047      	beq.n	800836e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	e044      	b.n	800836e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d018      	beq.n	800831e <RCCEx_PLLSAI1_Config+0x86>
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d825      	bhi.n	800833c <RCCEx_PLLSAI1_Config+0xa4>
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d002      	beq.n	80082fa <RCCEx_PLLSAI1_Config+0x62>
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d009      	beq.n	800830c <RCCEx_PLLSAI1_Config+0x74>
 80082f8:	e020      	b.n	800833c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80082fa:	4b60      	ldr	r3, [pc, #384]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d11d      	bne.n	8008342 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800830a:	e01a      	b.n	8008342 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800830c:	4b5b      	ldr	r3, [pc, #364]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008314:	2b00      	cmp	r3, #0
 8008316:	d116      	bne.n	8008346 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800831c:	e013      	b.n	8008346 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800831e:	4b57      	ldr	r3, [pc, #348]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10f      	bne.n	800834a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800832a:	4b54      	ldr	r3, [pc, #336]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800833a:	e006      	b.n	800834a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
      break;
 8008340:	e004      	b.n	800834c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008342:	bf00      	nop
 8008344:	e002      	b.n	800834c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800834a:	bf00      	nop
    }

    if(status == HAL_OK)
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10d      	bne.n	800836e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008352:	4b4a      	ldr	r3, [pc, #296]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6819      	ldr	r1, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	3b01      	subs	r3, #1
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	430b      	orrs	r3, r1
 8008368:	4944      	ldr	r1, [pc, #272]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800836a:	4313      	orrs	r3, r2
 800836c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d17d      	bne.n	8008470 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008374:	4b41      	ldr	r3, [pc, #260]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a40      	ldr	r2, [pc, #256]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800837a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800837e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008380:	f7fb fb90 	bl	8003aa4 <HAL_GetTick>
 8008384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008386:	e009      	b.n	800839c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008388:	f7fb fb8c 	bl	8003aa4 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d902      	bls.n	800839c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	73fb      	strb	r3, [r7, #15]
        break;
 800839a:	e005      	b.n	80083a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800839c:	4b37      	ldr	r3, [pc, #220]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1ef      	bne.n	8008388 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d160      	bne.n	8008470 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d111      	bne.n	80083d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083b4:	4b31      	ldr	r3, [pc, #196]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80083bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6892      	ldr	r2, [r2, #8]
 80083c4:	0211      	lsls	r1, r2, #8
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68d2      	ldr	r2, [r2, #12]
 80083ca:	0912      	lsrs	r2, r2, #4
 80083cc:	0452      	lsls	r2, r2, #17
 80083ce:	430a      	orrs	r2, r1
 80083d0:	492a      	ldr	r1, [pc, #168]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	610b      	str	r3, [r1, #16]
 80083d6:	e027      	b.n	8008428 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d112      	bne.n	8008404 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083de:	4b27      	ldr	r3, [pc, #156]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80083e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6892      	ldr	r2, [r2, #8]
 80083ee:	0211      	lsls	r1, r2, #8
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6912      	ldr	r2, [r2, #16]
 80083f4:	0852      	lsrs	r2, r2, #1
 80083f6:	3a01      	subs	r2, #1
 80083f8:	0552      	lsls	r2, r2, #21
 80083fa:	430a      	orrs	r2, r1
 80083fc:	491f      	ldr	r1, [pc, #124]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	610b      	str	r3, [r1, #16]
 8008402:	e011      	b.n	8008428 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008404:	4b1d      	ldr	r3, [pc, #116]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800840c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6892      	ldr	r2, [r2, #8]
 8008414:	0211      	lsls	r1, r2, #8
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6952      	ldr	r2, [r2, #20]
 800841a:	0852      	lsrs	r2, r2, #1
 800841c:	3a01      	subs	r2, #1
 800841e:	0652      	lsls	r2, r2, #25
 8008420:	430a      	orrs	r2, r1
 8008422:	4916      	ldr	r1, [pc, #88]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008424:	4313      	orrs	r3, r2
 8008426:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008428:	4b14      	ldr	r3, [pc, #80]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a13      	ldr	r2, [pc, #76]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800842e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008432:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008434:	f7fb fb36 	bl	8003aa4 <HAL_GetTick>
 8008438:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800843a:	e009      	b.n	8008450 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800843c:	f7fb fb32 	bl	8003aa4 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d902      	bls.n	8008450 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	73fb      	strb	r3, [r7, #15]
          break;
 800844e:	e005      	b.n	800845c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0ef      	beq.n	800843c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008462:	4b06      	ldr	r3, [pc, #24]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	4904      	ldr	r1, [pc, #16]	; (800847c <RCCEx_PLLSAI1_Config+0x1e4>)
 800846c:	4313      	orrs	r3, r2
 800846e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40021000 	.word	0x40021000

08008480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800848e:	4b6a      	ldr	r3, [pc, #424]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d018      	beq.n	80084cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800849a:	4b67      	ldr	r3, [pc, #412]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f003 0203 	and.w	r2, r3, #3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d10d      	bne.n	80084c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
       ||
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80084b2:	4b61      	ldr	r3, [pc, #388]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	091b      	lsrs	r3, r3, #4
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
       ||
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d047      	beq.n	8008556 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
 80084ca:	e044      	b.n	8008556 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d018      	beq.n	8008506 <RCCEx_PLLSAI2_Config+0x86>
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d825      	bhi.n	8008524 <RCCEx_PLLSAI2_Config+0xa4>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d002      	beq.n	80084e2 <RCCEx_PLLSAI2_Config+0x62>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d009      	beq.n	80084f4 <RCCEx_PLLSAI2_Config+0x74>
 80084e0:	e020      	b.n	8008524 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80084e2:	4b55      	ldr	r3, [pc, #340]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11d      	bne.n	800852a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084f2:	e01a      	b.n	800852a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80084f4:	4b50      	ldr	r3, [pc, #320]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d116      	bne.n	800852e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008504:	e013      	b.n	800852e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008506:	4b4c      	ldr	r3, [pc, #304]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10f      	bne.n	8008532 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008512:	4b49      	ldr	r3, [pc, #292]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008522:	e006      	b.n	8008532 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
      break;
 8008528:	e004      	b.n	8008534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008532:	bf00      	nop
    }

    if(status == HAL_OK)
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10d      	bne.n	8008556 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800853a:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6819      	ldr	r1, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	3b01      	subs	r3, #1
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	430b      	orrs	r3, r1
 8008550:	4939      	ldr	r1, [pc, #228]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008552:	4313      	orrs	r3, r2
 8008554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d167      	bne.n	800862c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800855c:	4b36      	ldr	r3, [pc, #216]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a35      	ldr	r2, [pc, #212]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008568:	f7fb fa9c 	bl	8003aa4 <HAL_GetTick>
 800856c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800856e:	e009      	b.n	8008584 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008570:	f7fb fa98 	bl	8003aa4 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d902      	bls.n	8008584 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	73fb      	strb	r3, [r7, #15]
        break;
 8008582:	e005      	b.n	8008590 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008584:	4b2c      	ldr	r3, [pc, #176]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1ef      	bne.n	8008570 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d14a      	bne.n	800862c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d111      	bne.n	80085c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800859c:	4b26      	ldr	r3, [pc, #152]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80085a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6892      	ldr	r2, [r2, #8]
 80085ac:	0211      	lsls	r1, r2, #8
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	68d2      	ldr	r2, [r2, #12]
 80085b2:	0912      	lsrs	r2, r2, #4
 80085b4:	0452      	lsls	r2, r2, #17
 80085b6:	430a      	orrs	r2, r1
 80085b8:	491f      	ldr	r1, [pc, #124]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	614b      	str	r3, [r1, #20]
 80085be:	e011      	b.n	80085e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80085c0:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80085c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6892      	ldr	r2, [r2, #8]
 80085d0:	0211      	lsls	r1, r2, #8
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6912      	ldr	r2, [r2, #16]
 80085d6:	0852      	lsrs	r2, r2, #1
 80085d8:	3a01      	subs	r2, #1
 80085da:	0652      	lsls	r2, r2, #25
 80085dc:	430a      	orrs	r2, r1
 80085de:	4916      	ldr	r1, [pc, #88]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80085e4:	4b14      	ldr	r3, [pc, #80]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a13      	ldr	r2, [pc, #76]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f0:	f7fb fa58 	bl	8003aa4 <HAL_GetTick>
 80085f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085f6:	e009      	b.n	800860c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80085f8:	f7fb fa54 	bl	8003aa4 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d902      	bls.n	800860c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	73fb      	strb	r3, [r7, #15]
          break;
 800860a:	e005      	b.n	8008618 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800860c:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0ef      	beq.n	80085f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008620:	695a      	ldr	r2, [r3, #20]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4904      	ldr	r1, [pc, #16]	; (8008638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008628:	4313      	orrs	r3, r2
 800862a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40021000 	.word	0x40021000

0800863c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800863c:	b480      	push	{r7}
 800863e:	b089      	sub	sp, #36	; 0x24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008658:	d10c      	bne.n	8008674 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800865a:	4b6e      	ldr	r3, [pc, #440]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800865c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008660:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008664:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800866c:	d112      	bne.n	8008694 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800866e:	4b6a      	ldr	r3, [pc, #424]	; (8008818 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	e00f      	b.n	8008694 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867a:	d10b      	bne.n	8008694 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800867c:	4b65      	ldr	r3, [pc, #404]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008682:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008686:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800868e:	d101      	bne.n	8008694 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008690:	4b61      	ldr	r3, [pc, #388]	; (8008818 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008692:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 80b4 	bne.w	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086a6:	d003      	beq.n	80086b0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ae:	d135      	bne.n	800871c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80086b0:	4b58      	ldr	r3, [pc, #352]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086bc:	f040 80a1 	bne.w	8008802 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80086c0:	4b54      	ldr	r3, [pc, #336]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 809a 	beq.w	8008802 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80086ce:	4b51      	ldr	r3, [pc, #324]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	3301      	adds	r3, #1
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80086e2:	4b4c      	ldr	r3, [pc, #304]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80086f4:	4b47      	ldr	r3, [pc, #284]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8008700:	2311      	movs	r3, #17
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e001      	b.n	800870a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8008706:	2307      	movs	r3, #7
 8008708:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	fb03 f202 	mul.w	r2, r3, r2
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	fbb2 f3f3 	udiv	r3, r2, r3
 8008718:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800871a:	e072      	b.n	8008802 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d133      	bne.n	800878a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008722:	4b3c      	ldr	r3, [pc, #240]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800872a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800872e:	d169      	bne.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008730:	4b38      	ldr	r3, [pc, #224]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d063      	beq.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800873c:	4b35      	ldr	r3, [pc, #212]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	091b      	lsrs	r3, r3, #4
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	3301      	adds	r3, #1
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	fbb2 f3f3 	udiv	r3, r2, r3
 800874e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008750:	4b30      	ldr	r3, [pc, #192]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	0a1b      	lsrs	r3, r3, #8
 8008756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008762:	4b2c      	ldr	r3, [pc, #176]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800876e:	2311      	movs	r3, #17
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	e001      	b.n	8008778 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008774:	2307      	movs	r3, #7
 8008776:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	fb03 f202 	mul.w	r2, r3, r2
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	e03c      	b.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008790:	d003      	beq.n	800879a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008798:	d134      	bne.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800879a:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a6:	d12d      	bne.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80087a8:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d027      	beq.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80087b4:	4b17      	ldr	r3, [pc, #92]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	091b      	lsrs	r3, r3, #4
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	3301      	adds	r3, #1
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80087c8:	4b12      	ldr	r3, [pc, #72]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80087e6:	2311      	movs	r3, #17
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e001      	b.n	80087f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80087ec:	2307      	movs	r3, #7
 80087ee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	fb03 f202 	mul.w	r2, r3, r2
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e000      	b.n	8008804 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008802:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008804:	69fb      	ldr	r3, [r7, #28]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3724      	adds	r7, #36	; 0x24
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40021000 	.word	0x40021000
 8008818:	001fff68 	.word	0x001fff68

0800881c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d079      	beq.n	8008922 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fa fe5e 	bl	8003504 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b10      	cmp	r3, #16
 800885c:	d058      	beq.n	8008910 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	22ca      	movs	r2, #202	; 0xca
 8008864:	625a      	str	r2, [r3, #36]	; 0x24
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2253      	movs	r2, #83	; 0x53
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f9a4 	bl	8008bbc <RTC_EnterInitMode>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d127      	bne.n	80088ce <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800888c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008890:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6899      	ldr	r1, [r3, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	68d2      	ldr	r2, [r2, #12]
 80088b8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6919      	ldr	r1, [r3, #16]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	041a      	lsls	r2, r3, #16
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f9a8 	bl	8008c24 <RTC_ExitInitMode>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d113      	bne.n	8008906 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0203 	bic.w	r2, r2, #3
 80088ec:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	22ff      	movs	r2, #255	; 0xff
 800890c:	625a      	str	r2, [r3, #36]	; 0x24
 800890e:	e001      	b.n	8008914 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_RTC_SetTime+0x1a>
 8008942:	2302      	movs	r3, #2
 8008944:	e08b      	b.n	8008a5e <HAL_RTC_SetTime+0x132>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2202      	movs	r2, #2
 8008952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	22ca      	movs	r2, #202	; 0xca
 800895c:	625a      	str	r2, [r3, #36]	; 0x24
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2253      	movs	r2, #83	; 0x53
 8008964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f928 	bl	8008bbc <RTC_EnterInitMode>
 800896c:	4603      	mov	r3, r0
 800896e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008970:	7cfb      	ldrb	r3, [r7, #19]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d163      	bne.n	8008a3e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d126      	bne.n	80089ca <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2200      	movs	r2, #0
 800898e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f983 	bl	8008ca0 <RTC_ByteToBcd2>
 800899a:	4603      	mov	r3, r0
 800899c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f97c 	bl	8008ca0 <RTC_ByteToBcd2>
 80089a8:	4603      	mov	r3, r0
 80089aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80089ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	789b      	ldrb	r3, [r3, #2]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f974 	bl	8008ca0 <RTC_ByteToBcd2>
 80089b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	78db      	ldrb	r3, [r3, #3]
 80089c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e018      	b.n	80089fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80089ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	78db      	ldrb	r3, [r3, #3]
 80089f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6899      	ldr	r1, [r3, #8]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f8f5 	bl	8008c24 <RTC_ExitInitMode>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	22ff      	movs	r2, #255	; 0xff
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008a46:	7cfb      	ldrb	r3, [r7, #19]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008a5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd90      	pop	{r4, r7, pc}

08008a66 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a66:	b590      	push	{r4, r7, lr}
 8008a68:	b087      	sub	sp, #28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_RTC_SetDate+0x1a>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e075      	b.n	8008b6c <HAL_RTC_SetDate+0x106>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10e      	bne.n	8008ab4 <HAL_RTC_SetDate+0x4e>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d008      	beq.n	8008ab4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	f023 0310 	bic.w	r3, r3, #16
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	330a      	adds	r3, #10
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d11c      	bne.n	8008af4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	78db      	ldrb	r3, [r3, #3]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f8ee 	bl	8008ca0 <RTC_ByteToBcd2>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f8e7 	bl	8008ca0 <RTC_ByteToBcd2>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008ad6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	789b      	ldrb	r3, [r3, #2]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f8df 	bl	8008ca0 <RTC_ByteToBcd2>
 8008ae2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ae4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	e00e      	b.n	8008b12 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	78db      	ldrb	r3, [r3, #3]
 8008af8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008b00:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008b06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	22ca      	movs	r2, #202	; 0xca
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2253      	movs	r2, #83	; 0x53
 8008b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f84a 	bl	8008bbc <RTC_EnterInitMode>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008b2c:	7cfb      	ldrb	r3, [r7, #19]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10c      	bne.n	8008b4c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f86e 	bl	8008c24 <RTC_ExitInitMode>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008b54:	7cfb      	ldrb	r3, [r7, #19]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008b6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <HAL_RTC_WaitForSynchro+0x44>)
 8008b82:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008b84:	f7fa ff8e 	bl	8003aa4 <HAL_GetTick>
 8008b88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b8a:	e009      	b.n	8008ba0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b8c:	f7fa ff8a 	bl	8003aa4 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e007      	b.n	8008bb0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0ee      	beq.n	8008b8c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	0003ff5f 	.word	0x0003ff5f

08008bbc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d120      	bne.n	8008c18 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008be0:	f7fa ff60 	bl	8003aa4 <HAL_GetTick>
 8008be4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008be6:	e00d      	b.n	8008c04 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008be8:	f7fa ff5c 	bl	8003aa4 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bf6:	d905      	bls.n	8008c04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2203      	movs	r2, #3
 8008c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <RTC_EnterInitMode+0x5c>
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d1e7      	bne.n	8008be8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008c30:	4b1a      	ldr	r3, [pc, #104]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	4a19      	ldr	r2, [pc, #100]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c3a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10c      	bne.n	8008c62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff ff93 	bl	8008b74 <HAL_RTC_WaitForSynchro>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01e      	beq.n	8008c92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2203      	movs	r2, #3
 8008c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	73fb      	strb	r3, [r7, #15]
 8008c60:	e017      	b.n	8008c92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c62:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c68:	f023 0320 	bic.w	r3, r3, #32
 8008c6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff ff80 	bl	8008b74 <HAL_RTC_WaitForSynchro>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	4a04      	ldr	r2, [pc, #16]	; (8008c9c <RTC_ExitInitMode+0x78>)
 8008c8c:	f043 0320 	orr.w	r3, r3, #32
 8008c90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40002800 	.word	0x40002800

08008ca0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008cb2:	e005      	b.n	8008cc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	3b0a      	subs	r3, #10
 8008cbe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	2b09      	cmp	r3, #9
 8008cc4:	d8f6      	bhi.n	8008cb4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	7afb      	ldrb	r3, [r7, #11]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	b2db      	uxtb	r3, r3
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e022      	b.n	8008d38 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d105      	bne.n	8008d0a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7fa fc2f 	bl	8003568 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2203      	movs	r2, #3
 8008d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f814 	bl	8008d40 <HAL_SD_InitCard>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e00a      	b.n	8008d38 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d40:	b5b0      	push	{r4, r5, r7, lr}
 8008d42:	b08e      	sub	sp, #56	; 0x38
 8008d44:	af04      	add	r7, sp, #16
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008d5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008d60:	f7fe fd2c 	bl	80077bc <HAL_RCCEx_GetPeriphCLKFreq>
 8008d64:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e07b      	b.n	8008e78 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	09db      	lsrs	r3, r3, #7
 8008d84:	4a3e      	ldr	r2, [pc, #248]	; (8008e80 <HAL_SD_InitCard+0x140>)
 8008d86:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8a:	091b      	lsrs	r3, r3, #4
 8008d8c:	3b02      	subs	r3, #2
 8008d8e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681d      	ldr	r5, [r3, #0]
 8008d94:	466c      	mov	r4, sp
 8008d96:	f107 0314 	add.w	r3, r7, #20
 8008d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008da8:	4628      	mov	r0, r5
 8008daa:	f001 fac1 	bl	800a330 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dbc:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 faff 	bl	800a3c6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	3302      	adds	r3, #2
 8008ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008de4:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <HAL_SD_InitCard+0x144>)
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dec:	3301      	adds	r3, #1
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fa fe64 	bl	8003abc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 ffdf 	bl	8009db8 <SD_PowerON>
 8008dfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00b      	beq.n	8008e1a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e02e      	b.n	8008e78 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fefe 	bl	8009c1c <SD_InitCard>
 8008e20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e01b      	b.n	8008e78 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fb4f 	bl	800a4ec <SDMMC_CmdBlockLength>
 8008e4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00f      	beq.n	8008e76 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a0b      	ldr	r2, [pc, #44]	; (8008e88 <HAL_SD_InitCard+0x148>)
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	431a      	orrs	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3728      	adds	r7, #40	; 0x28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e80:	014f8b59 	.word	0x014f8b59
 8008e84:	00012110 	.word	0x00012110
 8008e88:	004005ff 	.word	0x004005ff

08008e8c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08c      	sub	sp, #48	; 0x30
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0a9      	b.n	8009008 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	f040 80a2 	bne.w	8009006 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	441a      	add	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d907      	bls.n	8008ee6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e090      	b.n	8009008 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2203      	movs	r2, #3
 8008eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	4a45      	ldr	r2, [pc, #276]	; (8009010 <HAL_SD_ReadBlocks_DMA+0x184>)
 8008efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	4a44      	ldr	r2, [pc, #272]	; (8009014 <HAL_SD_ReadBlocks_DMA+0x188>)
 8008f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3380      	adds	r3, #128	; 0x80
 8008f18:	4619      	mov	r1, r3
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	025b      	lsls	r3, r3, #9
 8008f20:	089b      	lsrs	r3, r3, #2
 8008f22:	f7fa ffb9 	bl	8003e98 <HAL_DMA_Start_IT>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00f      	beq.n	8008f4c <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a39      	ldr	r2, [pc, #228]	; (8009018 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e05d      	b.n	8009008 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0208 	orr.w	r2, r2, #8
 8008f5a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d002      	beq.n	8008f6a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	025b      	lsls	r3, r3, #9
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	025b      	lsls	r3, r3, #9
 8008f74:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f76:	2390      	movs	r3, #144	; 0x90
 8008f78:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f82:	2301      	movs	r3, #1
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f107 0210 	add.w	r2, r7, #16
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 fa7f 	bl	800a494 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d90a      	bls.n	8008fb2 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2282      	movs	r2, #130	; 0x82
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 fae3 	bl	800a574 <SDMMC_CmdReadMultiBlock>
 8008fae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fb0:	e009      	b.n	8008fc6 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2281      	movs	r2, #129	; 0x81
 8008fb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f001 fab6 	bl	800a530 <SDMMC_CmdReadSingleBlock>
 8008fc4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d012      	beq.n	8008ff2 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a11      	ldr	r2, [pc, #68]	; (8009018 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e00a      	b.n	8009008 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009000:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	e000      	b.n	8009008 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009006:	2302      	movs	r3, #2
  }
}
 8009008:	4618      	mov	r0, r3
 800900a:	3730      	adds	r7, #48	; 0x30
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	08009a37 	.word	0x08009a37
 8009014:	08009aa9 	.word	0x08009aa9
 8009018:	004005ff 	.word	0x004005ff

0800901c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08c      	sub	sp, #48	; 0x30
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d107      	bne.n	8009044 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e0ac      	b.n	800919e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	f040 80a5 	bne.w	800919c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009062:	429a      	cmp	r2, r3
 8009064:	d907      	bls.n	8009076 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e093      	b.n	800919e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2203      	movs	r2, #3
 800907a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908a:	4a47      	ldr	r2, [pc, #284]	; (80091a8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800908c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	4a46      	ldr	r2, [pc, #280]	; (80091ac <HAL_SD_WriteBlocks_DMA+0x190>)
 8009094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	2200      	movs	r2, #0
 800909c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d002      	beq.n	80090ac <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	025b      	lsls	r3, r3, #9
 80090aa:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d90a      	bls.n	80090c8 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	22a0      	movs	r2, #160	; 0xa0
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fa9c 	bl	800a5fc <SDMMC_CmdWriteMultiBlock>
 80090c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090c6:	e009      	b.n	80090dc <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2290      	movs	r2, #144	; 0x90
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 fa6f 	bl	800a5b8 <SDMMC_CmdWriteSingleBlock>
 80090da:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d012      	beq.n	8009108 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a32      	ldr	r2, [pc, #200]	; (80091b0 <HAL_SD_WriteBlocks_DMA+0x194>)
 80090e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	431a      	orrs	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e04a      	b.n	800919e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0208 	orr.w	r2, r2, #8
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3380      	adds	r3, #128	; 0x80
 8009124:	461a      	mov	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	025b      	lsls	r3, r3, #9
 800912a:	089b      	lsrs	r3, r3, #2
 800912c:	f7fa feb4 	bl	8003e98 <HAL_DMA_Start_IT>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d012      	beq.n	800915c <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1d      	ldr	r2, [pc, #116]	; (80091b0 <HAL_SD_WriteBlocks_DMA+0x194>)
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e020      	b.n	800919e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800915c:	f04f 33ff 	mov.w	r3, #4294967295
 8009160:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	025b      	lsls	r3, r3, #9
 8009166:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009168:	2390      	movs	r3, #144	; 0x90
 800916a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800916c:	2300      	movs	r3, #0
 800916e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009170:	2300      	movs	r3, #0
 8009172:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009174:	2301      	movs	r3, #1
 8009176:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f107 0210 	add.w	r2, r7, #16
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f986 	bl	800a494 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 021a 	orr.w	r2, r2, #26
 8009196:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e000      	b.n	800919e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800919c:	2302      	movs	r3, #2
  }
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3730      	adds	r7, #48	; 0x30
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	08009a0d 	.word	0x08009a0d
 80091ac:	08009aa9 	.word	0x08009aa9
 80091b0:	004005ff 	.word	0x004005ff

080091b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <HAL_SD_IRQHandler+0x2e>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 f802 	bl	800a1e4 <SD_Read_IT>
 80091e0:	e155      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 808f 	beq.w	8009310 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800920a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800920e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0201 	bic.w	r2, r2, #1
 800921e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d039      	beq.n	800929e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f003 0302 	and.w	r3, r3, #2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d104      	bne.n	800923e <HAL_SD_IRQHandler+0x8a>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f9fc 	bl	800a640 <SDMMC_CmdStopTransfer>
 8009248:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d008      	beq.n	8009262 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f91f 	bl	80094a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f240 523a 	movw	r2, #1338	; 0x53a
 800926a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <HAL_SD_IRQHandler+0xda>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f003 f8fc 	bl	800c48c <HAL_SD_RxCpltCallback>
 8009294:	e0fb      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f003 f8ee 	bl	800c478 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800929c:	e0f7      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80f2 	beq.w	800948e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d011      	beq.n	80092d8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 f9c1 	bl	800a640 <SDMMC_CmdStopTransfer>
 80092be:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d008      	beq.n	80092d8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f8e4 	bl	80094a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f040 80d5 	bne.w	800948e <HAL_SD_IRQHandler+0x2da>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f040 80cf 	bne.w	800948e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0208 	bic.w	r2, r2, #8
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f003 f8b5 	bl	800c478 <HAL_SD_TxCpltCallback>
}
 800930e:	e0be      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d008      	beq.n	8009330 <HAL_SD_IRQHandler+0x17c>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 ffac 	bl	800a286 <SD_Write_IT>
 800932e:	e0ae      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 80a7 	beq.w	800948e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	f043 0202 	orr.w	r2, r3, #2
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	f043 0208 	orr.w	r2, r3, #8
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	f043 0220 	orr.w	r2, r3, #32
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	f043 0210 	orr.w	r2, r3, #16
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80093c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f93a 	bl	800a640 <SDMMC_CmdStopTransfer>
 80093cc:	4602      	mov	r2, r0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f855 	bl	80094a0 <HAL_SD_ErrorCallback>
}
 80093f6:	e04a      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d045      	beq.n	800948e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <HAL_SD_IRQHandler+0x262>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f003 0320 	and.w	r3, r3, #32
 8009412:	2b00      	cmp	r3, #0
 8009414:	d011      	beq.n	800943a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941a:	4a1f      	ldr	r2, [pc, #124]	; (8009498 <HAL_SD_IRQHandler+0x2e4>)
 800941c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	4618      	mov	r0, r3
 8009424:	f7fa fd98 	bl	8003f58 <HAL_DMA_Abort_IT>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d02f      	beq.n	800948e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fb84 	bl	8009b40 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009438:	e029      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <HAL_SD_IRQHandler+0x29a>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d011      	beq.n	8009472 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <HAL_SD_IRQHandler+0x2e8>)
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	4618      	mov	r0, r3
 800945c:	f7fa fd7c 	bl	8003f58 <HAL_DMA_Abort_IT>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d013      	beq.n	800948e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fb9f 	bl	8009bae <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009470:	e00d      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f002 ffec 	bl	800c464 <HAL_SD_AbortCallback>
}
 800948c:	e7ff      	b.n	800948e <HAL_SD_IRQHandler+0x2da>
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	08009b41 	.word	0x08009b41
 800949c:	08009baf 	.word	0x08009baf

080094a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094c2:	0f9b      	lsrs	r3, r3, #30
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ce:	0e9b      	lsrs	r3, r3, #26
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e0:	0e1b      	lsrs	r3, r3, #24
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0303 	and.w	r3, r3, #3
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	b2da      	uxtb	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950a:	b2da      	uxtb	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009514:	0d1b      	lsrs	r3, r3, #20
 8009516:	b29a      	uxth	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	b2da      	uxtb	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009532:	0bdb      	lsrs	r3, r3, #15
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009544:	0b9b      	lsrs	r3, r3, #14
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	b2da      	uxtb	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009556:	0b5b      	lsrs	r3, r3, #13
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009568:	0b1b      	lsrs	r3, r3, #12
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	b2da      	uxtb	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2200      	movs	r2, #0
 800957a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	2b00      	cmp	r3, #0
 8009582:	d163      	bne.n	800964c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009588:	009a      	lsls	r2, r3, #2
 800958a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800958e:	4013      	ands	r3, r2
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009594:	0f92      	lsrs	r2, r2, #30
 8009596:	431a      	orrs	r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a0:	0edb      	lsrs	r3, r3, #27
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b2:	0e1b      	lsrs	r3, r3, #24
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c4:	0d5b      	lsrs	r3, r3, #21
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d6:	0c9b      	lsrs	r3, r3, #18
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e8:	0bdb      	lsrs	r3, r3, #15
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	7e1b      	ldrb	r3, [r3, #24]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	3302      	adds	r3, #2
 800960c:	2201      	movs	r2, #1
 800960e:	fa02 f303 	lsl.w	r3, r2, r3
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009616:	fb03 f202 	mul.w	r2, r3, r2
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	7a1b      	ldrb	r3, [r3, #8]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	2201      	movs	r2, #1
 800962a:	409a      	lsls	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009638:	0a52      	lsrs	r2, r2, #9
 800963a:	fb03 f202 	mul.w	r2, r3, r2
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009648:	661a      	str	r2, [r3, #96]	; 0x60
 800964a:	e031      	b.n	80096b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009650:	2b01      	cmp	r3, #1
 8009652:	d11d      	bne.n	8009690 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	431a      	orrs	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	3301      	adds	r3, #1
 8009670:	029a      	lsls	r2, r3, #10
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009684:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	661a      	str	r2, [r3, #96]	; 0x60
 800968e:	e00f      	b.n	80096b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a58      	ldr	r2, [pc, #352]	; (80097f8 <HAL_SD_GetCardCSD+0x344>)
 8009696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e09d      	b.n	80097ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b4:	0b9b      	lsrs	r3, r3, #14
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c6:	09db      	lsrs	r3, r3, #7
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e8:	0fdb      	lsrs	r3, r3, #31
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f4:	0f5b      	lsrs	r3, r3, #29
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009706:	0e9b      	lsrs	r3, r3, #26
 8009708:	b2db      	uxtb	r3, r3
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	b2da      	uxtb	r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009718:	0d9b      	lsrs	r3, r3, #22
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	b2da      	uxtb	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	0d5b      	lsrs	r3, r3, #21
 800972c:	b2db      	uxtb	r3, r3
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	b2da      	uxtb	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	0bdb      	lsrs	r3, r3, #15
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976e:	0b9b      	lsrs	r3, r3, #14
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	b2da      	uxtb	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009782:	0b5b      	lsrs	r3, r3, #13
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	0b1b      	lsrs	r3, r3, #12
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097aa:	0a9b      	lsrs	r3, r3, #10
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	0a1b      	lsrs	r3, r3, #8
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	004005ff 	.word	0x004005ff

080097fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009854:	b5b0      	push	{r4, r5, r7, lr}
 8009856:	b090      	sub	sp, #64	; 0x40
 8009858:	af04      	add	r7, sp, #16
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2203      	movs	r2, #3
 8009868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009870:	2b03      	cmp	r3, #3
 8009872:	d02e      	beq.n	80098d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987a:	d106      	bne.n	800988a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	639a      	str	r2, [r3, #56]	; 0x38
 8009888:	e029      	b.n	80098de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009890:	d10a      	bne.n	80098a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fb46 	bl	8009f24 <SD_WideBus_Enable>
 8009898:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38
 80098a6:	e01a      	b.n	80098de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10a      	bne.n	80098c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fb83 	bl	8009fba <SD_WideBus_Disable>
 80098b4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
 80098c2:	e00c      	b.n	80098de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38
 80098d0:	e005      	b.n	80098de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a35      	ldr	r2, [pc, #212]	; (80099c0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80098ec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098f4:	e042      	b.n	800997c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80098f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098fa:	f7fd ff5f 	bl	80077bc <HAL_RCCEx_GetPeriphCLKFreq>
 80098fe:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d031      	beq.n	800996a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	3302      	adds	r3, #2
 8009928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992a:	fbb2 f3f3 	udiv	r3, r2, r3
 800992e:	4a25      	ldr	r2, [pc, #148]	; (80099c4 <HAL_SD_ConfigWideBusOperation+0x170>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d907      	bls.n	8009944 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	4a24      	ldr	r2, [pc, #144]	; (80099c8 <HAL_SD_ConfigWideBusOperation+0x174>)
 8009938:	fba2 2303 	umull	r2, r3, r2, r3
 800993c:	0ddb      	lsrs	r3, r3, #23
 800993e:	3b02      	subs	r3, #2
 8009940:	623b      	str	r3, [r7, #32]
 8009942:	e002      	b.n	800994a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681d      	ldr	r5, [r3, #0]
 800994e:	466c      	mov	r4, sp
 8009950:	f107 0318 	add.w	r3, r7, #24
 8009954:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800995c:	f107 030c 	add.w	r3, r7, #12
 8009960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009962:	4628      	mov	r0, r5
 8009964:	f000 fce4 	bl	800a330 <SDMMC_Init>
 8009968:	e008      	b.n	800997c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fdb1 	bl	800a4ec <SDMMC_CmdBlockLength>
 800998a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00c      	beq.n	80099ac <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009998:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80099b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3730      	adds	r7, #48	; 0x30
 80099bc:	46bd      	mov	sp, r7
 80099be:	bdb0      	pop	{r4, r5, r7, pc}
 80099c0:	004005ff 	.word	0x004005ff
 80099c4:	017d7840 	.word	0x017d7840
 80099c8:	55e63b89 	.word	0x55e63b89

080099cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099d8:	f107 030c 	add.w	r3, r7, #12
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa78 	bl	8009ed4 <SD_SendStatus>
 80099e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	0a5b      	lsrs	r3, r3, #9
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a02:	693b      	ldr	r3, [r7, #16]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a48:	2b82      	cmp	r3, #130	; 0x82
 8009a4a:	d111      	bne.n	8009a70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fdf5 	bl	800a640 <SDMMC_CmdStopTransfer>
 8009a56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d008      	beq.n	8009a70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fd18 	bl	80094a0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0208 	bic.w	r2, r2, #8
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f002 fcf7 	bl	800c48c <HAL_SD_RxCpltCallback>
#endif
}
 8009a9e:	bf00      	nop
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abc:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac4:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d002      	beq.n	8009ad2 <SD_DMAError+0x2a>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d12d      	bne.n	8009b2e <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a19      	ldr	r2, [pc, #100]	; (8009b3c <SD_DMAError+0x94>)
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009ae8:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8009af6:	6978      	ldr	r0, [r7, #20]
 8009af8:	f7ff ff68 	bl	80099cc <HAL_SD_GetCardState>
 8009afc:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b06      	cmp	r3, #6
 8009b02:	d002      	beq.n	8009b0a <SD_DMAError+0x62>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d10a      	bne.n	8009b20 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fd96 	bl	800a640 <SDMMC_CmdStopTransfer>
 8009b14:	4602      	mov	r2, r0
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8009b2e:	6978      	ldr	r0, [r7, #20]
 8009b30:	f7ff fcb6 	bl	80094a0 <HAL_SD_ErrorCallback>
#endif
}
 8009b34:	bf00      	nop
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	004005ff 	.word	0x004005ff

08009b40 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff ff37 	bl	80099cc <HAL_SD_GetCardState>
 8009b5e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b06      	cmp	r3, #6
 8009b72:	d002      	beq.n	8009b7a <SD_DMATxAbort+0x3a>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b05      	cmp	r3, #5
 8009b78:	d10a      	bne.n	8009b90 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fd5e 	bl	800a640 <SDMMC_CmdStopTransfer>
 8009b84:	4602      	mov	r2, r0
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f002 fc63 	bl	800c464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b9e:	e002      	b.n	8009ba6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fc7d 	bl	80094a0 <HAL_SD_ErrorCallback>
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7ff ff00 	bl	80099cc <HAL_SD_GetCardState>
 8009bcc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b06      	cmp	r3, #6
 8009be0:	d002      	beq.n	8009be8 <SD_DMARxAbort+0x3a>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b05      	cmp	r3, #5
 8009be6:	d10a      	bne.n	8009bfe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fd27 	bl	800a640 <SDMMC_CmdStopTransfer>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d103      	bne.n	8009c0e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f002 fc2c 	bl	800c464 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009c0c:	e002      	b.n	8009c14 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff fc46 	bl	80094a0 <HAL_SD_ErrorCallback>
}
 8009c14:	bf00      	nop
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c1c:	b5b0      	push	{r4, r5, r7, lr}
 8009c1e:	b094      	sub	sp, #80	; 0x50
 8009c20:	af04      	add	r7, sp, #16
 8009c22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009c24:	2301      	movs	r3, #1
 8009c26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 fbd9 	bl	800a3e4 <SDMMC_GetPowerState>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d102      	bne.n	8009c3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009c3c:	e0b8      	b.n	8009db0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d02f      	beq.n	8009ca6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fe02 	bl	800a854 <SDMMC_CmdSendCID>
 8009c50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <SD_InitCard+0x40>
    {
      return errorstate;
 8009c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5a:	e0a9      	b.n	8009db0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fc03 	bl	800a46e <SDMMC_GetResponse>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2104      	movs	r1, #4
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 fbfa 	bl	800a46e <SDMMC_GetResponse>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2108      	movs	r1, #8
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fbf1 	bl	800a46e <SDMMC_GetResponse>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	210c      	movs	r1, #12
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fbe8 	bl	800a46e <SDMMC_GetResponse>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d00d      	beq.n	8009cca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f107 020e 	add.w	r2, r7, #14
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fe08 	bl	800a8ce <SDMMC_CmdSetRelAdd>
 8009cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <SD_InitCard+0xae>
    {
      return errorstate;
 8009cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc8:	e072      	b.n	8009db0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d036      	beq.n	8009d40 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009cd2:	89fb      	ldrh	r3, [r7, #14]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce2:	041b      	lsls	r3, r3, #16
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f000 fdd2 	bl	800a890 <SDMMC_CmdSendCSD>
 8009cec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf6:	e05b      	b.n	8009db0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fbb5 	bl	800a46e <SDMMC_GetResponse>
 8009d04:	4602      	mov	r2, r0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2104      	movs	r1, #4
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fbac 	bl	800a46e <SDMMC_GetResponse>
 8009d16:	4602      	mov	r2, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2108      	movs	r1, #8
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 fba3 	bl	800a46e <SDMMC_GetResponse>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	210c      	movs	r1, #12
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fb9a 	bl	800a46e <SDMMC_GetResponse>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2104      	movs	r1, #4
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fb91 	bl	800a46e <SDMMC_GetResponse>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	0d1a      	lsrs	r2, r3, #20
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009d54:	f107 0310 	add.w	r3, r7, #16
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff fbaa 	bl	80094b4 <HAL_SD_GetCardCSD>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d6a:	e021      	b.n	8009db0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6819      	ldr	r1, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d74:	041b      	lsls	r3, r3, #16
 8009d76:	2200      	movs	r2, #0
 8009d78:	461c      	mov	r4, r3
 8009d7a:	4615      	mov	r5, r2
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	462b      	mov	r3, r5
 8009d80:	4608      	mov	r0, r1
 8009d82:	f000 fc7f 	bl	800a684 <SDMMC_CmdSelDesel>
 8009d86:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <SD_InitCard+0x176>
  {
    return errorstate;
 8009d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d90:	e00e      	b.n	8009db0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681d      	ldr	r5, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	466c      	mov	r4, sp
 8009d9a:	f103 0210 	add.w	r2, r3, #16
 8009d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009da4:	3304      	adds	r3, #4
 8009da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009da8:	4628      	mov	r0, r5
 8009daa:	f000 fac1 	bl	800a330 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3740      	adds	r7, #64	; 0x40
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bdb0      	pop	{r4, r5, r7, pc}

08009db8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fc7a 	bl	800a6ca <SDMMC_CmdGoIdleState>
 8009dd6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	e072      	b.n	8009ec8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fc8d 	bl	800a706 <SDMMC_CmdOperCond>
 8009dec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00d      	beq.n	8009e10 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fc63 	bl	800a6ca <SDMMC_CmdGoIdleState>
 8009e04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	e05b      	b.n	8009ec8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d137      	bne.n	8009e8e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 fc8d 	bl	800a744 <SDMMC_CmdAppCommand>
 8009e2a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d02d      	beq.n	8009e8e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e36:	e047      	b.n	8009ec8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fc80 	bl	800a744 <SDMMC_CmdAppCommand>
 8009e44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <SD_PowerON+0x98>
    {
      return errorstate;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	e03b      	b.n	8009ec8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	491e      	ldr	r1, [pc, #120]	; (8009ed0 <SD_PowerON+0x118>)
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fc96 	bl	800a788 <SDMMC_CmdAppOperCommand>
 8009e5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e68:	e02e      	b.n	8009ec8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 fafc 	bl	800a46e <SDMMC_GetResponse>
 8009e76:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	0fdb      	lsrs	r3, r3, #31
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d101      	bne.n	8009e84 <SD_PowerON+0xcc>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <SD_PowerON+0xce>
 8009e84:	2300      	movs	r3, #0
 8009e86:	613b      	str	r3, [r7, #16]

    count++;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d802      	bhi.n	8009e9e <SD_PowerON+0xe6>
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0cc      	beq.n	8009e38 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d902      	bls.n	8009eae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eac:	e00c      	b.n	8009ec8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8009ebe:	e002      	b.n	8009ec6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	c1100000 	.word	0xc1100000

08009ed4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ee8:	e018      	b.n	8009f1c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef2:	041b      	lsls	r3, r3, #16
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	f000 fd0a 	bl	800a910 <SDMMC_CmdSendStatus>
 8009efc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	e009      	b.n	8009f1c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 faad 	bl	800a46e <SDMMC_GetResponse>
 8009f14:	4602      	mov	r2, r0
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	2300      	movs	r3, #0
 8009f32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fa97 	bl	800a46e <SDMMC_GetResponse>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f4a:	d102      	bne.n	8009f52 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f50:	e02f      	b.n	8009fb2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f52:	f107 030c 	add.w	r3, r7, #12
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f879 	bl	800a050 <SD_FindSCR>
 8009f5e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	e023      	b.n	8009fb2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01c      	beq.n	8009fae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7c:	041b      	lsls	r3, r3, #16
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4610      	mov	r0, r2
 8009f82:	f000 fbdf 	bl	800a744 <SDMMC_CmdAppCommand>
 8009f86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	e00f      	b.n	8009fb2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2102      	movs	r1, #2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 fc18 	bl	800a7ce <SDMMC_CmdBusWidth>
 8009f9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	e003      	b.n	8009fb2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e001      	b.n	8009fb2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b086      	sub	sp, #24
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fa4c 	bl	800a46e <SDMMC_GetResponse>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fe0:	d102      	bne.n	8009fe8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fe6:	e02f      	b.n	800a048 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fe8:	f107 030c 	add.w	r3, r7, #12
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f82e 	bl	800a050 <SD_FindSCR>
 8009ff4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	e023      	b.n	800a048 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d01c      	beq.n	800a044 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f000 fb94 	bl	800a744 <SDMMC_CmdAppCommand>
 800a01c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	e00f      	b.n	800a048 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fbcd 	bl	800a7ce <SDMMC_CmdBusWidth>
 800a034:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	e003      	b.n	800a048 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a040:	2300      	movs	r3, #0
 800a042:	e001      	b.n	800a048 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a044:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b08f      	sub	sp, #60	; 0x3c
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a05a:	f7f9 fd23 	bl	8003aa4 <HAL_GetTick>
 800a05e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a064:	2300      	movs	r3, #0
 800a066:	60bb      	str	r3, [r7, #8]
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2108      	movs	r1, #8
 800a076:	4618      	mov	r0, r3
 800a078:	f000 fa38 	bl	800a4ec <SDMMC_CmdBlockLength>
 800a07c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	e0a9      	b.n	800a1dc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a090:	041b      	lsls	r3, r3, #16
 800a092:	4619      	mov	r1, r3
 800a094:	4610      	mov	r0, r2
 800a096:	f000 fb55 	bl	800a744 <SDMMC_CmdAppCommand>
 800a09a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	e09a      	b.n	800a1dc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a0ac:	2308      	movs	r3, #8
 800a0ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a0b0:	2330      	movs	r3, #48	; 0x30
 800a0b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f107 0210 	add.w	r2, r7, #16
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f9e2 	bl	800a494 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fb9c 	bl	800a812 <SDMMC_CmdSendSCR>
 800a0da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d022      	beq.n	800a128 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	e07a      	b.n	800a1dc <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00e      	beq.n	800a112 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6819      	ldr	r1, [r3, #0]
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	f107 0208 	add.w	r2, r7, #8
 800a100:	18d4      	adds	r4, r2, r3
 800a102:	4608      	mov	r0, r1
 800a104:	f000 f941 	bl	800a38a <SDMMC_ReadFIFO>
 800a108:	4603      	mov	r3, r0
 800a10a:	6023      	str	r3, [r4, #0]
      index++;
 800a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10e:	3301      	adds	r3, #1
 800a110:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a112:	f7f9 fcc7 	bl	8003aa4 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a120:	d102      	bne.n	800a128 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a122:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a126:	e059      	b.n	800a1dc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a12e:	f240 432a 	movw	r3, #1066	; 0x42a
 800a132:	4013      	ands	r3, r2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0d6      	beq.n	800a0e6 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13e:	f003 0308 	and.w	r3, r3, #8
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2208      	movs	r2, #8
 800a14c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a14e:	2308      	movs	r3, #8
 800a150:	e044      	b.n	800a1dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d005      	beq.n	800a16c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2202      	movs	r2, #2
 800a166:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a168:	2302      	movs	r3, #2
 800a16a:	e037      	b.n	800a1dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2220      	movs	r2, #32
 800a180:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a182:	2320      	movs	r3, #32
 800a184:	e02a      	b.n	800a1dc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a18e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	061a      	lsls	r2, r3, #24
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a19c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	0a1b      	lsrs	r3, r3, #8
 800a1a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a1a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	0e1b      	lsrs	r3, r3, #24
 800a1ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	601a      	str	r2, [r3, #0]
    scr++;
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	061a      	lsls	r2, r3, #24
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	0a1b      	lsrs	r3, r3, #8
 800a1ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	0e1b      	lsrs	r3, r3, #24
 800a1d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	373c      	adds	r7, #60	; 0x3c
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd90      	pop	{r4, r7, pc}

0800a1e4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d03f      	beq.n	800a27e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a1fe:	2300      	movs	r3, #0
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	e033      	b.n	800a26c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f8be 	bl	800a38a <SDMMC_ReadFIFO>
 800a20e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	b2da      	uxtb	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	3b01      	subs	r3, #1
 800a222:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	0a1b      	lsrs	r3, r3, #8
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3301      	adds	r3, #1
 800a232:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	3b01      	subs	r3, #1
 800a238:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	0c1b      	lsrs	r3, r3, #16
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3301      	adds	r3, #1
 800a248:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	0e1b      	lsrs	r3, r3, #24
 800a254:	b2da      	uxtb	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3301      	adds	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	3b01      	subs	r3, #1
 800a264:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	3301      	adds	r3, #1
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2b07      	cmp	r3, #7
 800a270:	d9c8      	bls.n	800a204 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a27e:	bf00      	nop
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b086      	sub	sp, #24
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d043      	beq.n	800a328 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	e037      	b.n	800a316 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	021a      	lsls	r2, r3, #8
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	041a      	lsls	r2, r3, #16
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	061a      	lsls	r2, r3, #24
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f107 0208 	add.w	r2, r7, #8
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 f84a 	bl	800a3a4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	3301      	adds	r3, #1
 800a314:	617b      	str	r3, [r7, #20]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b07      	cmp	r3, #7
 800a31a:	d9c4      	bls.n	800a2a6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a328:	bf00      	nop
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a330:	b084      	sub	sp, #16
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	f107 001c 	add.w	r0, r7, #28
 800a33e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a34e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a352:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a356:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a35a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a35e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a36e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	b004      	add	sp, #16
 800a388:	4770      	bx	lr

0800a38a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a3d4:	2002      	movs	r0, #2
 800a3d6:	f7f9 fb71 	bl	8003abc <HAL_Delay>

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0303 	and.w	r3, r3, #3
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a41e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a424:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a42a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a43a:	f023 030f 	bic.w	r3, r3, #15
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	b2db      	uxtb	r3, r3
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3314      	adds	r3, #20
 800a47c:	461a      	mov	r2, r3
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	4413      	add	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a4c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a4c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0

}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a4fa:	2310      	movs	r3, #16
 800a4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4fe:	2340      	movs	r3, #64	; 0x40
 800a500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a502:	2300      	movs	r3, #0
 800a504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a50c:	f107 0308 	add.w	r3, r7, #8
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff ff74 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a518:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51c:	2110      	movs	r1, #16
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fa18 	bl	800a954 <SDMMC_GetCmdResp1>
 800a524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a526:	69fb      	ldr	r3, [r7, #28]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3720      	adds	r7, #32
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a53e:	2311      	movs	r3, #17
 800a540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a542:	2340      	movs	r3, #64	; 0x40
 800a544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a546:	2300      	movs	r3, #0
 800a548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a550:	f107 0308 	add.w	r3, r7, #8
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7ff ff52 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a560:	2111      	movs	r1, #17
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f9f6 	bl	800a954 <SDMMC_GetCmdResp1>
 800a568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a56a:	69fb      	ldr	r3, [r7, #28]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3720      	adds	r7, #32
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a582:	2312      	movs	r3, #18
 800a584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a586:	2340      	movs	r3, #64	; 0x40
 800a588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a58e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a594:	f107 0308 	add.w	r3, r7, #8
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff ff30 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5a4:	2112      	movs	r1, #18
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f9d4 	bl	800a954 <SDMMC_GetCmdResp1>
 800a5ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3720      	adds	r7, #32
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b088      	sub	sp, #32
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a5c6:	2318      	movs	r3, #24
 800a5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5ca:	2340      	movs	r3, #64	; 0x40
 800a5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5d8:	f107 0308 	add.w	r3, r7, #8
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff ff0e 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e8:	2118      	movs	r1, #24
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f9b2 	bl	800a954 <SDMMC_GetCmdResp1>
 800a5f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a60a:	2319      	movs	r3, #25
 800a60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a60e:	2340      	movs	r3, #64	; 0x40
 800a610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a61c:	f107 0308 	add.w	r3, r7, #8
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff feec 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a628:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62c:	2119      	movs	r1, #25
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f990 	bl	800a954 <SDMMC_GetCmdResp1>
 800a634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a636:	69fb      	ldr	r3, [r7, #28]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a64c:	230c      	movs	r3, #12
 800a64e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a654:	2300      	movs	r3, #0
 800a656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a65c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a65e:	f107 0308 	add.w	r3, r7, #8
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff fecb 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a66a:	4a05      	ldr	r2, [pc, #20]	; (800a680 <SDMMC_CmdStopTransfer+0x40>)
 800a66c:	210c      	movs	r1, #12
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f970 	bl	800a954 <SDMMC_GetCmdResp1>
 800a674:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a676:	69fb      	ldr	r3, [r7, #28]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3720      	adds	r7, #32
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	05f5e100 	.word	0x05f5e100

0800a684 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08a      	sub	sp, #40	; 0x28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a694:	2307      	movs	r3, #7
 800a696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a698:	2340      	movs	r3, #64	; 0x40
 800a69a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6a4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6a6:	f107 0310 	add.w	r3, r7, #16
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7ff fea7 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a6b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b6:	2107      	movs	r1, #7
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 f94b 	bl	800a954 <SDMMC_GetCmdResp1>
 800a6be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3728      	adds	r7, #40	; 0x28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e8:	f107 0308 	add.w	r3, r7, #8
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fe86 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fb65 	bl	800adc4 <SDMMC_GetCmdError>
 800a6fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b088      	sub	sp, #32
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a70e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a714:	2308      	movs	r3, #8
 800a716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a718:	2340      	movs	r3, #64	; 0x40
 800a71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff fe67 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 faf8 	bl	800ad28 <SDMMC_GetCmdResp7>
 800a738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a73a:	69fb      	ldr	r3, [r7, #28]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a752:	2337      	movs	r3, #55	; 0x37
 800a754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a756:	2340      	movs	r3, #64	; 0x40
 800a758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a75e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a764:	f107 0308 	add.w	r3, r7, #8
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff fe48 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a770:	f241 3288 	movw	r2, #5000	; 0x1388
 800a774:	2137      	movs	r1, #55	; 0x37
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f8ec 	bl	800a954 <SDMMC_GetCmdResp1>
 800a77c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77e:	69fb      	ldr	r3, [r7, #28]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3720      	adds	r7, #32
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a79c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a79e:	2329      	movs	r3, #41	; 0x29
 800a7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7ff fe22 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f9ff 	bl	800abc0 <SDMMC_GetCmdResp3>
 800a7c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b088      	sub	sp, #32
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a7dc:	2306      	movs	r3, #6
 800a7de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7ee:	f107 0308 	add.w	r3, r7, #8
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff fe03 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a7fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fe:	2106      	movs	r1, #6
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f8a7 	bl	800a954 <SDMMC_GetCmdResp1>
 800a806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a808:	69fb      	ldr	r3, [r7, #28]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3720      	adds	r7, #32
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b088      	sub	sp, #32
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a81e:	2333      	movs	r3, #51	; 0x33
 800a820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a822:	2340      	movs	r3, #64	; 0x40
 800a824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a82e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a830:	f107 0308 	add.w	r3, r7, #8
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff fde2 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a840:	2133      	movs	r1, #51	; 0x33
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f886 	bl	800a954 <SDMMC_GetCmdResp1>
 800a848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a84a:	69fb      	ldr	r3, [r7, #28]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a860:	2302      	movs	r3, #2
 800a862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a864:	23c0      	movs	r3, #192	; 0xc0
 800a866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a872:	f107 0308 	add.w	r3, r7, #8
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7ff fdc1 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f956 	bl	800ab30 <SDMMC_GetCmdResp2>
 800a884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a886:	69fb      	ldr	r3, [r7, #28]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3720      	adds	r7, #32
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a89e:	2309      	movs	r3, #9
 800a8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8a2:	23c0      	movs	r3, #192	; 0xc0
 800a8a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8b0:	f107 0308 	add.w	r3, r7, #8
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7ff fda2 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f937 	bl	800ab30 <SDMMC_GetCmdResp2>
 800a8c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8c4:	69fb      	ldr	r3, [r7, #28]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3720      	adds	r7, #32
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b088      	sub	sp, #32
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8e0:	2340      	movs	r3, #64	; 0x40
 800a8e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7ff fd83 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	2103      	movs	r1, #3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f99c 	bl	800ac3c <SDMMC_GetCmdResp6>
 800a904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a906:	69fb      	ldr	r3, [r7, #28]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a91e:	230d      	movs	r3, #13
 800a920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a922:	2340      	movs	r3, #64	; 0x40
 800a924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a92e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff fd62 	bl	800a400 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a940:	210d      	movs	r1, #13
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f806 	bl	800a954 <SDMMC_GetCmdResp1>
 800a948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a94a:	69fb      	ldr	r3, [r7, #28]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3720      	adds	r7, #32
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	460b      	mov	r3, r1
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a962:	4b70      	ldr	r3, [pc, #448]	; (800ab24 <SDMMC_GetCmdResp1+0x1d0>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a70      	ldr	r2, [pc, #448]	; (800ab28 <SDMMC_GetCmdResp1+0x1d4>)
 800a968:	fba2 2303 	umull	r2, r3, r2, r3
 800a96c:	0a5a      	lsrs	r2, r3, #9
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	fb02 f303 	mul.w	r3, r2, r3
 800a974:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	1e5a      	subs	r2, r3, #1
 800a97a:	61fa      	str	r2, [r7, #28]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a984:	e0c9      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0ef      	beq.n	800a976 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1ea      	bne.n	800a976 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2204      	movs	r2, #4
 800a9b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	e0b1      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d004      	beq.n	800a9cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e0a6      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	22c5      	movs	r2, #197	; 0xc5
 800a9d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff fd3e 	bl	800a454 <SDMMC_GetCommandResponse>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	461a      	mov	r2, r3
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d001      	beq.n	800a9e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e099      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff fd40 	bl	800a46e <SDMMC_GetResponse>
 800a9ee:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4b4e      	ldr	r3, [pc, #312]	; (800ab2c <SDMMC_GetCmdResp1+0x1d8>)
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e08d      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da02      	bge.n	800aa0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa08:	e087      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa14:	2340      	movs	r3, #64	; 0x40
 800aa16:	e080      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa22:	2380      	movs	r3, #128	; 0x80
 800aa24:	e079      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aa30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa34:	e071      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aa40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa44:	e069      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa54:	e061      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa64:	e059      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa74:	e051      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa84:	e049      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa94:	e041      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aaa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa4:	e039      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aab4:	e031      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aac4:	e029      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aad0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aad4:	e021      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aae4:	e019      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aaf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aaf4:	e011      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab04:	e009      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab14:	e001      	b.n	800ab1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	20000000 	.word	0x20000000
 800ab28:	10624dd3 	.word	0x10624dd3
 800ab2c:	fdffe008 	.word	0xfdffe008

0800ab30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab38:	4b1f      	ldr	r3, [pc, #124]	; (800abb8 <SDMMC_GetCmdResp2+0x88>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a1f      	ldr	r2, [pc, #124]	; (800abbc <SDMMC_GetCmdResp2+0x8c>)
 800ab3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab42:	0a5b      	lsrs	r3, r3, #9
 800ab44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab48:	fb02 f303 	mul.w	r3, r2, r3
 800ab4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1e5a      	subs	r2, r3, #1
 800ab52:	60fa      	str	r2, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab5c:	e026      	b.n	800abac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0ef      	beq.n	800ab4e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1ea      	bne.n	800ab4e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2204      	movs	r2, #4
 800ab88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab8a:	2304      	movs	r3, #4
 800ab8c:	e00e      	b.n	800abac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d004      	beq.n	800aba4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e003      	b.n	800abac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	22c5      	movs	r2, #197	; 0xc5
 800aba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20000000 	.word	0x20000000
 800abbc:	10624dd3 	.word	0x10624dd3

0800abc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abc8:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <SDMMC_GetCmdResp3+0x74>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a1a      	ldr	r2, [pc, #104]	; (800ac38 <SDMMC_GetCmdResp3+0x78>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	0a5b      	lsrs	r3, r3, #9
 800abd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd8:	fb02 f303 	mul.w	r3, r2, r3
 800abdc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1e5a      	subs	r2, r3, #1
 800abe2:	60fa      	str	r2, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abec:	e01b      	b.n	800ac26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0ef      	beq.n	800abde <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1ea      	bne.n	800abde <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2204      	movs	r2, #4
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac1a:	2304      	movs	r3, #4
 800ac1c:	e003      	b.n	800ac26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	22c5      	movs	r2, #197	; 0xc5
 800ac22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20000000 	.word	0x20000000
 800ac38:	10624dd3 	.word	0x10624dd3

0800ac3c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	460b      	mov	r3, r1
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac4a:	4b35      	ldr	r3, [pc, #212]	; (800ad20 <SDMMC_GetCmdResp6+0xe4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a35      	ldr	r2, [pc, #212]	; (800ad24 <SDMMC_GetCmdResp6+0xe8>)
 800ac50:	fba2 2303 	umull	r2, r3, r2, r3
 800ac54:	0a5b      	lsrs	r3, r3, #9
 800ac56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5a:	fb02 f303 	mul.w	r3, r2, r3
 800ac5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	1e5a      	subs	r2, r3, #1
 800ac64:	61fa      	str	r2, [r7, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d102      	bne.n	800ac70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac6e:	e052      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac74:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0ef      	beq.n	800ac60 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1ea      	bne.n	800ac60 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d004      	beq.n	800aca0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac9c:	2304      	movs	r3, #4
 800ac9e:	e03a      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2201      	movs	r2, #1
 800acb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e02f      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7ff fbcc 	bl	800a454 <SDMMC_GetCommandResponse>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	7afb      	ldrb	r3, [r7, #11]
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d001      	beq.n	800acca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e025      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	22c5      	movs	r2, #197	; 0xc5
 800acce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800acd0:	2100      	movs	r1, #0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff fbcb 	bl	800a46e <SDMMC_GetResponse>
 800acd8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	0c1b      	lsrs	r3, r3, #16
 800ace8:	b29a      	uxth	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800acee:	2300      	movs	r3, #0
 800acf0:	e011      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800acfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad00:	e009      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad10:	e001      	b.n	800ad16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000000 	.word	0x20000000
 800ad24:	10624dd3 	.word	0x10624dd3

0800ad28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad30:	4b22      	ldr	r3, [pc, #136]	; (800adbc <SDMMC_GetCmdResp7+0x94>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a22      	ldr	r2, [pc, #136]	; (800adc0 <SDMMC_GetCmdResp7+0x98>)
 800ad36:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3a:	0a5b      	lsrs	r3, r3, #9
 800ad3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad40:	fb02 f303 	mul.w	r3, r2, r3
 800ad44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	1e5a      	subs	r2, r3, #1
 800ad4a:	60fa      	str	r2, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad54:	e02c      	b.n	800adb0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0ef      	beq.n	800ad46 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1ea      	bne.n	800ad46 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d004      	beq.n	800ad86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2204      	movs	r2, #4
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad82:	2304      	movs	r3, #4
 800ad84:	e014      	b.n	800adb0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e009      	b.n	800adb0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2240      	movs	r2, #64	; 0x40
 800adac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800adae:	2300      	movs	r3, #0

}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	20000000 	.word	0x20000000
 800adc0:	10624dd3 	.word	0x10624dd3

0800adc4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adcc:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <SDMMC_GetCmdError+0x50>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a11      	ldr	r2, [pc, #68]	; (800ae18 <SDMMC_GetCmdError+0x54>)
 800add2:	fba2 2303 	umull	r2, r3, r2, r3
 800add6:	0a5b      	lsrs	r3, r3, #9
 800add8:	f241 3288 	movw	r2, #5000	; 0x1388
 800addc:	fb02 f303 	mul.w	r3, r2, r3
 800ade0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	1e5a      	subs	r2, r3, #1
 800ade6:	60fa      	str	r2, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adf0:	e009      	b.n	800ae06 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0f1      	beq.n	800ade2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	22c5      	movs	r2, #197	; 0xc5
 800ae02:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	20000000 	.word	0x20000000
 800ae18:	10624dd3 	.word	0x10624dd3

0800ae1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	f107 001c 	add.w	r0, r7, #28
 800ae2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 fa1c 	bl	800c278 <USB_CoreReset>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	639a      	str	r2, [r3, #56]	; 0x38
 800ae56:	e005      	b.n	800ae64 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae70:	b004      	add	sp, #16
 800ae72:	4770      	bx	lr

0800ae74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d165      	bne.n	800af54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4a3e      	ldr	r2, [pc, #248]	; (800af84 <USB_SetTurnaroundTime+0x110>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d906      	bls.n	800ae9e <USB_SetTurnaroundTime+0x2a>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4a3d      	ldr	r2, [pc, #244]	; (800af88 <USB_SetTurnaroundTime+0x114>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d202      	bcs.n	800ae9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae98:	230f      	movs	r3, #15
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e05c      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	4a39      	ldr	r2, [pc, #228]	; (800af88 <USB_SetTurnaroundTime+0x114>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d306      	bcc.n	800aeb4 <USB_SetTurnaroundTime+0x40>
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4a38      	ldr	r2, [pc, #224]	; (800af8c <USB_SetTurnaroundTime+0x118>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d202      	bcs.n	800aeb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aeae:	230e      	movs	r3, #14
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e051      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	4a35      	ldr	r2, [pc, #212]	; (800af8c <USB_SetTurnaroundTime+0x118>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d306      	bcc.n	800aeca <USB_SetTurnaroundTime+0x56>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4a34      	ldr	r2, [pc, #208]	; (800af90 <USB_SetTurnaroundTime+0x11c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d202      	bcs.n	800aeca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aec4:	230d      	movs	r3, #13
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e046      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4a30      	ldr	r2, [pc, #192]	; (800af90 <USB_SetTurnaroundTime+0x11c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d306      	bcc.n	800aee0 <USB_SetTurnaroundTime+0x6c>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	4a2f      	ldr	r2, [pc, #188]	; (800af94 <USB_SetTurnaroundTime+0x120>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d802      	bhi.n	800aee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aeda:	230c      	movs	r3, #12
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	e03b      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4a2c      	ldr	r2, [pc, #176]	; (800af94 <USB_SetTurnaroundTime+0x120>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d906      	bls.n	800aef6 <USB_SetTurnaroundTime+0x82>
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4a2b      	ldr	r2, [pc, #172]	; (800af98 <USB_SetTurnaroundTime+0x124>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d802      	bhi.n	800aef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aef0:	230b      	movs	r3, #11
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e030      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4a27      	ldr	r2, [pc, #156]	; (800af98 <USB_SetTurnaroundTime+0x124>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d906      	bls.n	800af0c <USB_SetTurnaroundTime+0x98>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4a26      	ldr	r2, [pc, #152]	; (800af9c <USB_SetTurnaroundTime+0x128>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d802      	bhi.n	800af0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800af06:	230a      	movs	r3, #10
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	e025      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4a23      	ldr	r2, [pc, #140]	; (800af9c <USB_SetTurnaroundTime+0x128>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d906      	bls.n	800af22 <USB_SetTurnaroundTime+0xae>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4a22      	ldr	r2, [pc, #136]	; (800afa0 <USB_SetTurnaroundTime+0x12c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d202      	bcs.n	800af22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800af1c:	2309      	movs	r3, #9
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e01a      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a1e      	ldr	r2, [pc, #120]	; (800afa0 <USB_SetTurnaroundTime+0x12c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d306      	bcc.n	800af38 <USB_SetTurnaroundTime+0xc4>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4a1d      	ldr	r2, [pc, #116]	; (800afa4 <USB_SetTurnaroundTime+0x130>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d802      	bhi.n	800af38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800af32:	2308      	movs	r3, #8
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	e00f      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4a1a      	ldr	r2, [pc, #104]	; (800afa4 <USB_SetTurnaroundTime+0x130>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d906      	bls.n	800af4e <USB_SetTurnaroundTime+0xda>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4a19      	ldr	r2, [pc, #100]	; (800afa8 <USB_SetTurnaroundTime+0x134>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d202      	bcs.n	800af4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800af48:	2307      	movs	r3, #7
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e004      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800af4e:	2306      	movs	r3, #6
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e001      	b.n	800af58 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800af54:	2309      	movs	r3, #9
 800af56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	029b      	lsls	r3, r3, #10
 800af6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800af70:	431a      	orrs	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	00d8acbf 	.word	0x00d8acbf
 800af88:	00e4e1c0 	.word	0x00e4e1c0
 800af8c:	00f42400 	.word	0x00f42400
 800af90:	01067380 	.word	0x01067380
 800af94:	011a499f 	.word	0x011a499f
 800af98:	01312cff 	.word	0x01312cff
 800af9c:	014ca43f 	.word	0x014ca43f
 800afa0:	016e3600 	.word	0x016e3600
 800afa4:	01a6ab1f 	.word	0x01a6ab1f
 800afa8:	01e84800 	.word	0x01e84800

0800afac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f043 0201 	orr.w	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f023 0201 	bic.w	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d115      	bne.n	800b03e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b01e:	2001      	movs	r0, #1
 800b020:	f7f8 fd4c 	bl	8003abc <HAL_Delay>
      ms++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 f8ab 	bl	800c186 <USB_GetMode>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d01e      	beq.n	800b074 <USB_SetCurrentMode+0x84>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b31      	cmp	r3, #49	; 0x31
 800b03a:	d9f0      	bls.n	800b01e <USB_SetCurrentMode+0x2e>
 800b03c:	e01a      	b.n	800b074 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b03e:	78fb      	ldrb	r3, [r7, #3]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d115      	bne.n	800b070 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b050:	2001      	movs	r0, #1
 800b052:	f7f8 fd33 	bl	8003abc <HAL_Delay>
      ms++;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3301      	adds	r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f001 f892 	bl	800c186 <USB_GetMode>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d005      	beq.n	800b074 <USB_SetCurrentMode+0x84>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b31      	cmp	r3, #49	; 0x31
 800b06c:	d9f0      	bls.n	800b050 <USB_SetCurrentMode+0x60>
 800b06e:	e001      	b.n	800b074 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e005      	b.n	800b080 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b32      	cmp	r3, #50	; 0x32
 800b078:	d101      	bne.n	800b07e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b088:	b084      	sub	sp, #16
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b086      	sub	sp, #24
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	613b      	str	r3, [r7, #16]
 800b0a6:	e009      	b.n	800b0bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	3340      	adds	r3, #64	; 0x40
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b0e      	cmp	r3, #14
 800b0c0:	d9f2      	bls.n	800b0a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d11c      	bne.n	800b102 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0d6:	f043 0302 	orr.w	r3, r3, #2
 800b0da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	601a      	str	r2, [r3, #0]
 800b100:	e005      	b.n	800b10e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b114:	461a      	mov	r2, r3
 800b116:	2300      	movs	r3, #0
 800b118:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b11a:	2103      	movs	r1, #3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f959 	bl	800b3d4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b122:	2110      	movs	r1, #16
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f8f1 	bl	800b30c <USB_FlushTxFifo>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f91d 	bl	800b374 <USB_FlushRxFifo>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b14a:	461a      	mov	r2, r3
 800b14c:	2300      	movs	r3, #0
 800b14e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b156:	461a      	mov	r2, r3
 800b158:	2300      	movs	r3, #0
 800b15a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b162:	461a      	mov	r2, r3
 800b164:	2300      	movs	r3, #0
 800b166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b168:	2300      	movs	r3, #0
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	e043      	b.n	800b1f6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b184:	d118      	bne.n	800b1b8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b198:	461a      	mov	r2, r3
 800b19a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	e013      	b.n	800b1ca <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	e008      	b.n	800b1ca <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	2300      	movs	r3, #0
 800b1da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	613b      	str	r3, [r7, #16]
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d3b7      	bcc.n	800b16e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1fe:	2300      	movs	r3, #0
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	e043      	b.n	800b28c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b21a:	d118      	bne.n	800b24e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10a      	bne.n	800b238 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22e:	461a      	mov	r2, r3
 800b230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	e013      	b.n	800b260 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b244:	461a      	mov	r2, r3
 800b246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	e008      	b.n	800b260 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25a:	461a      	mov	r2, r3
 800b25c:	2300      	movs	r3, #0
 800b25e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26c:	461a      	mov	r2, r3
 800b26e:	2300      	movs	r3, #0
 800b270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27e:	461a      	mov	r2, r3
 800b280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	3301      	adds	r3, #1
 800b28a:	613b      	str	r3, [r7, #16]
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	429a      	cmp	r2, r3
 800b292:	d3b7      	bcc.n	800b204 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b2b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	f043 0210 	orr.w	r2, r3, #16
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <USB_DevInit+0x280>)
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d005      	beq.n	800b2e0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	f043 0208 	orr.w	r2, r3, #8
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d107      	bne.n	800b2f6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2ee:	f043 0304 	orr.w	r3, r3, #4
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b302:	b004      	add	sp, #16
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	803c3800 	.word	0x803c3800

0800b30c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3301      	adds	r3, #1
 800b31e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a13      	ldr	r2, [pc, #76]	; (800b370 <USB_FlushTxFifo+0x64>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d901      	bls.n	800b32c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	e01b      	b.n	800b364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	daf2      	bge.n	800b31a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	019b      	lsls	r3, r3, #6
 800b33c:	f043 0220 	orr.w	r2, r3, #32
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3301      	adds	r3, #1
 800b348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4a08      	ldr	r2, [pc, #32]	; (800b370 <USB_FlushTxFifo+0x64>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d901      	bls.n	800b356 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e006      	b.n	800b364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d0f0      	beq.n	800b344 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	00030d40 	.word	0x00030d40

0800b374 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3301      	adds	r3, #1
 800b384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	4a11      	ldr	r2, [pc, #68]	; (800b3d0 <USB_FlushRxFifo+0x5c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d901      	bls.n	800b392 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e018      	b.n	800b3c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	daf2      	bge.n	800b380 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2210      	movs	r2, #16
 800b3a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	4a08      	ldr	r2, [pc, #32]	; (800b3d0 <USB_FlushRxFifo+0x5c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d901      	bls.n	800b3b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e006      	b.n	800b3c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	f003 0310 	and.w	r3, r3, #16
 800b3be:	2b10      	cmp	r3, #16
 800b3c0:	d0f0      	beq.n	800b3a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	00030d40 	.word	0x00030d40

0800b3d4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	68f9      	ldr	r1, [r7, #12]
 800b3f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b406:	b480      	push	{r7}
 800b408:	b087      	sub	sp, #28
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f003 0306 	and.w	r3, r3, #6
 800b41e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d002      	beq.n	800b42c <USB_GetDevSpeed+0x26>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b06      	cmp	r3, #6
 800b42a:	d102      	bne.n	800b432 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b42c:	2302      	movs	r3, #2
 800b42e:	75fb      	strb	r3, [r7, #23]
 800b430:	e001      	b.n	800b436 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b432:	230f      	movs	r3, #15
 800b434:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d13a      	bne.n	800b4d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b466:	69da      	ldr	r2, [r3, #28]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	2101      	movs	r1, #1
 800b472:	fa01 f303 	lsl.w	r3, r1, r3
 800b476:	b29b      	uxth	r3, r3
 800b478:	68f9      	ldr	r1, [r7, #12]
 800b47a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b47e:	4313      	orrs	r3, r2
 800b480:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d155      	bne.n	800b544 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	791b      	ldrb	r3, [r3, #4]
 800b4b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	059b      	lsls	r3, r3, #22
 800b4ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	0151      	lsls	r1, r2, #5
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	440a      	add	r2, r1
 800b4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	e036      	b.n	800b544 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4dc:	69da      	ldr	r2, [r3, #28]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	f003 030f 	and.w	r3, r3, #15
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ec:	041b      	lsls	r3, r3, #16
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d11a      	bne.n	800b544 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b52a:	430b      	orrs	r3, r1
 800b52c:	4313      	orrs	r3, r2
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	0151      	lsls	r1, r2, #5
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	440a      	add	r2, r1
 800b536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b53a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b53e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b542:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
	...

0800b554 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	785b      	ldrb	r3, [r3, #1]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d161      	bne.n	800b634 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b586:	d11f      	bne.n	800b5c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	0151      	lsls	r1, r2, #5
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	440a      	add	r2, r1
 800b59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	0151      	lsls	r1, r2, #5
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	440a      	add	r2, r1
 800b5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	2101      	movs	r1, #1
 800b5da:	fa01 f303 	lsl.w	r3, r1, r3
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	43db      	mvns	r3, r3
 800b5e2:	68f9      	ldr	r1, [r7, #12]
 800b5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f2:	69da      	ldr	r2, [r3, #28]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	f003 030f 	and.w	r3, r3, #15
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b602:	b29b      	uxth	r3, r3
 800b604:	43db      	mvns	r3, r3
 800b606:	68f9      	ldr	r1, [r7, #12]
 800b608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b60c:	4013      	ands	r3, r2
 800b60e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	015a      	lsls	r2, r3, #5
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4413      	add	r3, r2
 800b618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	0159      	lsls	r1, r3, #5
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	440b      	add	r3, r1
 800b626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62a:	4619      	mov	r1, r3
 800b62c:	4b35      	ldr	r3, [pc, #212]	; (800b704 <USB_DeactivateEndpoint+0x1b0>)
 800b62e:	4013      	ands	r3, r2
 800b630:	600b      	str	r3, [r1, #0]
 800b632:	e060      	b.n	800b6f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b64a:	d11f      	bne.n	800b68c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	015a      	lsls	r2, r3, #5
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	4413      	add	r3, r2
 800b654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	0151      	lsls	r1, r2, #5
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	440a      	add	r2, r1
 800b662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b66a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	0151      	lsls	r1, r2, #5
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	440a      	add	r2, r1
 800b682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b68a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	f003 030f 	and.w	r3, r3, #15
 800b69c:	2101      	movs	r1, #1
 800b69e:	fa01 f303 	lsl.w	r3, r1, r3
 800b6a2:	041b      	lsls	r3, r3, #16
 800b6a4:	43db      	mvns	r3, r3
 800b6a6:	68f9      	ldr	r1, [r7, #12]
 800b6a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b6:	69da      	ldr	r2, [r3, #28]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	f003 030f 	and.w	r3, r3, #15
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c6:	041b      	lsls	r3, r3, #16
 800b6c8:	43db      	mvns	r3, r3
 800b6ca:	68f9      	ldr	r1, [r7, #12]
 800b6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	015a      	lsls	r2, r3, #5
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	0159      	lsls	r1, r3, #5
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	440b      	add	r3, r1
 800b6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4b05      	ldr	r3, [pc, #20]	; (800b708 <USB_DeactivateEndpoint+0x1b4>)
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	ec337800 	.word	0xec337800
 800b708:	eff37800 	.word	0xeff37800

0800b70c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	785b      	ldrb	r3, [r3, #1]
 800b724:	2b01      	cmp	r3, #1
 800b726:	f040 8128 	bne.w	800b97a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d132      	bne.n	800b798 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	0151      	lsls	r1, r2, #5
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	440a      	add	r2, r1
 800b748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b74c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	0151      	lsls	r1, r2, #5
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	440a      	add	r2, r1
 800b76c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	0151      	lsls	r1, r2, #5
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	440a      	add	r2, r1
 800b78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b790:	0cdb      	lsrs	r3, r3, #19
 800b792:	04db      	lsls	r3, r3, #19
 800b794:	6113      	str	r3, [r2, #16]
 800b796:	e092      	b.n	800b8be <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	015a      	lsls	r2, r3, #5
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	0151      	lsls	r1, r2, #5
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	440a      	add	r2, r1
 800b7ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7b2:	0cdb      	lsrs	r3, r3, #19
 800b7b4:	04db      	lsls	r3, r3, #19
 800b7b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	0151      	lsls	r1, r2, #5
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	440a      	add	r2, r1
 800b7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d11a      	bne.n	800b818 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	691a      	ldr	r2, [r3, #16]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d903      	bls.n	800b7f6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	015a      	lsls	r2, r3, #5
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	0151      	lsls	r1, r2, #5
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	440a      	add	r2, r1
 800b80c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b814:	6113      	str	r3, [r2, #16]
 800b816:	e01b      	b.n	800b850 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b824:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	6919      	ldr	r1, [r3, #16]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	440b      	add	r3, r1
 800b830:	1e59      	subs	r1, r3, #1
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	fbb1 f3f3 	udiv	r3, r1, r3
 800b83a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b83c:	4b8d      	ldr	r3, [pc, #564]	; (800ba74 <USB_EPStartXfer+0x368>)
 800b83e:	400b      	ands	r3, r1
 800b840:	6939      	ldr	r1, [r7, #16]
 800b842:	0148      	lsls	r0, r1, #5
 800b844:	6979      	ldr	r1, [r7, #20]
 800b846:	4401      	add	r1, r0
 800b848:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b84c:	4313      	orrs	r3, r2
 800b84e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	015a      	lsls	r2, r3, #5
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	4413      	add	r3, r2
 800b858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85c:	691a      	ldr	r2, [r3, #16]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b866:	6939      	ldr	r1, [r7, #16]
 800b868:	0148      	lsls	r0, r1, #5
 800b86a:	6979      	ldr	r1, [r7, #20]
 800b86c:	4401      	add	r1, r0
 800b86e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b872:	4313      	orrs	r3, r2
 800b874:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	791b      	ldrb	r3, [r3, #4]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d11f      	bne.n	800b8be <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	0151      	lsls	r1, r2, #5
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	440a      	add	r2, r1
 800b894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b898:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b89c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8bc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	015a      	lsls	r2, r3, #5
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	0151      	lsls	r1, r2, #5
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	440a      	add	r2, r1
 800b8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8dc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	791b      	ldrb	r3, [r3, #4]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d015      	beq.n	800b912 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8139 	beq.w	800bb62 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f003 030f 	and.w	r3, r3, #15
 800b900:	2101      	movs	r1, #1
 800b902:	fa01 f303 	lsl.w	r3, r1, r3
 800b906:	6979      	ldr	r1, [r7, #20]
 800b908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b90c:	4313      	orrs	r3, r2
 800b90e:	634b      	str	r3, [r1, #52]	; 0x34
 800b910:	e127      	b.n	800bb62 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d110      	bne.n	800b944 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	0151      	lsls	r1, r2, #5
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	440a      	add	r2, r1
 800b938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b93c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	e00f      	b.n	800b964 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	0151      	lsls	r1, r2, #5
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	440a      	add	r2, r1
 800b95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b95e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b962:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	68d9      	ldr	r1, [r3, #12]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	b29b      	uxth	r3, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9a6 	bl	800bcc4 <USB_WritePacket>
 800b978:	e0f3      	b.n	800bb62 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	0151      	lsls	r1, r2, #5
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	440a      	add	r2, r1
 800b990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b994:	0cdb      	lsrs	r3, r3, #19
 800b996:	04db      	lsls	r3, r3, #19
 800b998:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	015a      	lsls	r2, r3, #5
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	0151      	lsls	r1, r2, #5
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	440a      	add	r2, r1
 800b9b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9bc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d12f      	bne.n	800ba24 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e8:	691a      	ldr	r2, [r3, #16]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9f2:	6939      	ldr	r1, [r7, #16]
 800b9f4:	0148      	lsls	r0, r1, #5
 800b9f6:	6979      	ldr	r1, [r7, #20]
 800b9f8:	4401      	add	r1, r0
 800b9fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	0151      	lsls	r1, r2, #5
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	440a      	add	r2, r1
 800ba18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba20:	6113      	str	r3, [r2, #16]
 800ba22:	e061      	b.n	800bae8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d125      	bne.n	800ba78 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	015a      	lsls	r2, r3, #5
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	4413      	add	r3, r2
 800ba34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba38:	691a      	ldr	r2, [r3, #16]
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba42:	6939      	ldr	r1, [r7, #16]
 800ba44:	0148      	lsls	r0, r1, #5
 800ba46:	6979      	ldr	r1, [r7, #20]
 800ba48:	4401      	add	r1, r0
 800ba4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	015a      	lsls	r2, r3, #5
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	0151      	lsls	r1, r2, #5
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	440a      	add	r2, r1
 800ba68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba70:	6113      	str	r3, [r2, #16]
 800ba72:	e039      	b.n	800bae8 <USB_EPStartXfer+0x3dc>
 800ba74:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	691a      	ldr	r2, [r3, #16]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	1e5a      	subs	r2, r3, #1
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	89fa      	ldrh	r2, [r7, #14]
 800ba94:	fb03 f202 	mul.w	r2, r3, r2
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691a      	ldr	r2, [r3, #16]
 800baaa:	89fb      	ldrh	r3, [r7, #14]
 800baac:	04d9      	lsls	r1, r3, #19
 800baae:	4b2f      	ldr	r3, [pc, #188]	; (800bb6c <USB_EPStartXfer+0x460>)
 800bab0:	400b      	ands	r3, r1
 800bab2:	6939      	ldr	r1, [r7, #16]
 800bab4:	0148      	lsls	r0, r1, #5
 800bab6:	6979      	ldr	r1, [r7, #20]
 800bab8:	4401      	add	r1, r0
 800baba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800babe:	4313      	orrs	r3, r2
 800bac0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bace:	691a      	ldr	r2, [r3, #16]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	6a1b      	ldr	r3, [r3, #32]
 800bad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bad8:	6939      	ldr	r1, [r7, #16]
 800bada:	0148      	lsls	r0, r1, #5
 800badc:	6979      	ldr	r1, [r7, #20]
 800bade:	4401      	add	r1, r0
 800bae0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bae4:	4313      	orrs	r3, r2
 800bae6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	791b      	ldrb	r3, [r3, #4]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d128      	bne.n	800bb42 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d110      	bne.n	800bb22 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	0151      	lsls	r1, r2, #5
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	440a      	add	r2, r1
 800bb16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	e00f      	b.n	800bb42 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	0151      	lsls	r1, r2, #5
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	440a      	add	r2, r1
 800bb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb40:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	0151      	lsls	r1, r2, #5
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	440a      	add	r2, r1
 800bb58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	1ff80000 	.word	0x1ff80000

0800bb70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	785b      	ldrb	r3, [r3, #1]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d14a      	bne.n	800bc24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	015a      	lsls	r2, r3, #5
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	4413      	add	r3, r2
 800bb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bba6:	f040 8086 	bne.w	800bcb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	7812      	ldrb	r2, [r2, #0]
 800bbbe:	0151      	lsls	r1, r2, #5
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	440a      	add	r2, r1
 800bbc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	7812      	ldrb	r2, [r2, #0]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f242 7210 	movw	r2, #10000	; 0x2710
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d902      	bls.n	800bc08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	75fb      	strb	r3, [r7, #23]
          break;
 800bc06:	e056      	b.n	800bcb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	015a      	lsls	r2, r3, #5
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	4413      	add	r3, r2
 800bc12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc20:	d0e7      	beq.n	800bbf2 <USB_EPStopXfer+0x82>
 800bc22:	e048      	b.n	800bcb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc3c:	d13b      	bne.n	800bcb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	015a      	lsls	r2, r3, #5
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	7812      	ldrb	r2, [r2, #0]
 800bc52:	0151      	lsls	r1, r2, #5
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	440a      	add	r2, r1
 800bc58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	7812      	ldrb	r2, [r2, #0]
 800bc76:	0151      	lsls	r1, r2, #5
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	440a      	add	r2, r1
 800bc7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f242 7210 	movw	r2, #10000	; 0x2710
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d902      	bls.n	800bc9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	75fb      	strb	r3, [r7, #23]
          break;
 800bc9a:	e00c      	b.n	800bcb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb4:	d0e7      	beq.n	800bc86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b089      	sub	sp, #36	; 0x24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	4611      	mov	r1, r2
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	71fb      	strb	r3, [r7, #7]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800bce2:	88bb      	ldrh	r3, [r7, #4]
 800bce4:	3303      	adds	r3, #3
 800bce6:	089b      	lsrs	r3, r3, #2
 800bce8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800bcea:	2300      	movs	r3, #0
 800bcec:	61bb      	str	r3, [r7, #24]
 800bcee:	e018      	b.n	800bd22 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	031a      	lsls	r2, r3, #12
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6013      	str	r3, [r2, #0]
    pSrc++;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	3301      	adds	r3, #1
 800bd08:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	3301      	adds	r3, #1
 800bd14:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	61bb      	str	r3, [r7, #24]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d3e2      	bcc.n	800bcf0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3724      	adds	r7, #36	; 0x24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b08b      	sub	sp, #44	; 0x2c
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	089b      	lsrs	r3, r3, #2
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	f003 0303 	and.w	r3, r3, #3
 800bd5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	623b      	str	r3, [r7, #32]
 800bd62:	e014      	b.n	800bd8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	3301      	adds	r3, #1
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	3301      	adds	r3, #1
 800bd7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	3301      	adds	r3, #1
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	3301      	adds	r3, #1
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	623b      	str	r3, [r7, #32]
 800bd8e:	6a3a      	ldr	r2, [r7, #32]
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d3e6      	bcc.n	800bd64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bd96:	8bfb      	ldrh	r3, [r7, #30]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d01e      	beq.n	800bdda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda6:	461a      	mov	r2, r3
 800bda8:	f107 0310 	add.w	r3, r7, #16
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	701a      	strb	r2, [r3, #0]
      i++;
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	623b      	str	r3, [r7, #32]
      pDest++;
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	3301      	adds	r3, #1
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bdce:	8bfb      	ldrh	r3, [r7, #30]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bdd4:	8bfb      	ldrh	r3, [r7, #30]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1ea      	bne.n	800bdb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	372c      	adds	r7, #44	; 0x2c
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	785b      	ldrb	r3, [r3, #1]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d12c      	bne.n	800be5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	015a      	lsls	r2, r3, #5
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4413      	add	r3, r2
 800be0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	db12      	blt.n	800be3c <USB_EPSetStall+0x54>
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00f      	beq.n	800be3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	0151      	lsls	r1, r2, #5
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	440a      	add	r2, r1
 800be32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	015a      	lsls	r2, r3, #5
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4413      	add	r3, r2
 800be44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	0151      	lsls	r1, r2, #5
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	440a      	add	r2, r1
 800be52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be5a:	6013      	str	r3, [r2, #0]
 800be5c:	e02b      	b.n	800beb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	db12      	blt.n	800be96 <USB_EPSetStall+0xae>
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00f      	beq.n	800be96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	015a      	lsls	r2, r3, #5
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	4413      	add	r3, r2
 800be7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	0151      	lsls	r1, r2, #5
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	440a      	add	r2, r1
 800be8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	0151      	lsls	r1, r2, #5
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	440a      	add	r2, r1
 800beac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800beb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d128      	bne.n	800bf32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	015a      	lsls	r2, r3, #5
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	0151      	lsls	r1, r2, #5
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	440a      	add	r2, r1
 800bef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800befa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800befe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	791b      	ldrb	r3, [r3, #4]
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d003      	beq.n	800bf10 <USB_EPClearStall+0x4c>
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	791b      	ldrb	r3, [r3, #4]
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d138      	bne.n	800bf82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	0151      	lsls	r1, r2, #5
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	440a      	add	r2, r1
 800bf26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	e027      	b.n	800bf82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	0151      	lsls	r1, r2, #5
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	440a      	add	r2, r1
 800bf48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	791b      	ldrb	r3, [r3, #4]
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d003      	beq.n	800bf62 <USB_EPClearStall+0x9e>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	791b      	ldrb	r3, [r3, #4]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d10f      	bne.n	800bf82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	015a      	lsls	r2, r3, #5
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4413      	add	r3, r2
 800bf6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	0151      	lsls	r1, r2, #5
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	440a      	add	r2, r1
 800bf78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bfb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bff6:	f023 0303 	bic.w	r3, r3, #3
 800bffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c00a:	f023 0302 	bic.w	r3, r3, #2
 800c00e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c038:	f023 0303 	bic.w	r3, r3, #3
 800c03c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c04c:	f043 0302 	orr.w	r3, r3, #2
 800c050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	4013      	ands	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c078:	68fb      	ldr	r3, [r7, #12]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	0c1b      	lsrs	r3, r3, #16
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b085      	sub	sp, #20
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	4013      	ands	r3, r2
 800c0dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	b29b      	uxth	r3, r3
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c0fe:	78fb      	ldrb	r3, [r7, #3]
 800c100:	015a      	lsls	r2, r3, #5
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	4413      	add	r3, r2
 800c106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	4013      	ands	r3, r2
 800c11a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c11c:	68bb      	ldr	r3, [r7, #8]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b087      	sub	sp, #28
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c14c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	f003 030f 	and.w	r3, r3, #15
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	01db      	lsls	r3, r3, #7
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	4313      	orrs	r3, r2
 800c162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	693a      	ldr	r2, [r7, #16]
 800c174:	4013      	ands	r3, r2
 800c176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c178:	68bb      	ldr	r3, [r7, #8]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	371c      	adds	r7, #28
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	f003 0301 	and.w	r3, r3, #1
}
 800c196:	4618      	mov	r0, r3
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c1c0:	f023 0307 	bic.w	r3, r3, #7
 800c1c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	333c      	adds	r3, #60	; 0x3c
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	4a1c      	ldr	r2, [pc, #112]	; (800c274 <USB_EP0_OutStart+0x8c>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d90a      	bls.n	800c21e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c218:	d101      	bne.n	800c21e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	e024      	b.n	800c268 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c224:	461a      	mov	r2, r3
 800c226:	2300      	movs	r3, #0
 800c228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c24c:	f043 0318 	orr.w	r3, r3, #24
 800c250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c260:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c264:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	4f54300a 	.word	0x4f54300a

0800c278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	3301      	adds	r3, #1
 800c288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4a13      	ldr	r2, [pc, #76]	; (800c2dc <USB_CoreReset+0x64>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d901      	bls.n	800c296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e01b      	b.n	800c2ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	daf2      	bge.n	800c284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f043 0201 	orr.w	r2, r3, #1
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <USB_CoreReset+0x64>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d901      	bls.n	800c2c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e006      	b.n	800c2ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d0f0      	beq.n	800c2ae <USB_CoreReset+0x36>

  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	00030d40 	.word	0x00030d40

0800c2e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c2e4:	4904      	ldr	r1, [pc, #16]	; (800c2f8 <MX_FATFS_Init+0x18>)
 800c2e6:	4805      	ldr	r0, [pc, #20]	; (800c2fc <MX_FATFS_Init+0x1c>)
 800c2e8:	f005 f886 	bl	80113f8 <FATFS_LinkDriver>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4b03      	ldr	r3, [pc, #12]	; (800c300 <MX_FATFS_Init+0x20>)
 800c2f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c2f4:	bf00      	nop
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	2000ccc8 	.word	0x2000ccc8
 800c2fc:	08016ba8 	.word	0x08016ba8
 800c300:	2000ccc4 	.word	0x2000ccc4

0800c304 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c308:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c31e:	f000 f8c6 	bl	800c4ae <BSP_SD_IsDetected>
 800c322:	4603      	mov	r3, r0
 800c324:	2b01      	cmp	r3, #1
 800c326:	d001      	beq.n	800c32c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c328:	2302      	movs	r3, #2
 800c32a:	e012      	b.n	800c352 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c32c:	480b      	ldr	r0, [pc, #44]	; (800c35c <BSP_SD_Init+0x48>)
 800c32e:	f7fc fcd7 	bl	8008ce0 <HAL_SD_Init>
 800c332:	4603      	mov	r3, r0
 800c334:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d109      	bne.n	800c350 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c33c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c340:	4806      	ldr	r0, [pc, #24]	; (800c35c <BSP_SD_Init+0x48>)
 800c342:	f7fd fa87 	bl	8009854 <HAL_SD_ConfigWideBusOperation>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c350:	79fb      	ldrb	r3, [r7, #7]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000368 	.word	0x20000368

0800c360 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800c370:	4b13      	ldr	r3, [pc, #76]	; (800c3c0 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	4b11      	ldr	r3, [pc, #68]	; (800c3c0 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0201 	bic.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c384:	4b0e      	ldr	r3, [pc, #56]	; (800c3c0 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c388:	2200      	movs	r2, #0
 800c38a:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800c38c:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f022 0210 	bic.w	r2, r2, #16
 800c39e:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	68f9      	ldr	r1, [r7, #12]
 800c3a6:	4806      	ldr	r0, [pc, #24]	; (800c3c0 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c3a8:	f7fc fd70 	bl	8008e8c <HAL_SD_ReadBlocks_DMA>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	20000368 	.word	0x20000368

0800c3c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800c3d4:	4b13      	ldr	r3, [pc, #76]	; (800c424 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	4b11      	ldr	r3, [pc, #68]	; (800c424 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f022 0201 	bic.w	r2, r2, #1
 800c3e6:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c3e8:	4b0e      	ldr	r3, [pc, #56]	; (800c424 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ec:	2210      	movs	r2, #16
 800c3ee:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800c3f0:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0210 	orr.w	r2, r2, #16
 800c402:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	4806      	ldr	r0, [pc, #24]	; (800c424 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c40c:	f7fc fe06 	bl	800901c <HAL_SD_WriteBlocks_DMA>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20000368 	.word	0x20000368

0800c428 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c42c:	4805      	ldr	r0, [pc, #20]	; (800c444 <BSP_SD_GetCardState+0x1c>)
 800c42e:	f7fd facd 	bl	80099cc <HAL_SD_GetCardState>
 800c432:	4603      	mov	r3, r0
 800c434:	2b04      	cmp	r3, #4
 800c436:	bf14      	ite	ne
 800c438:	2301      	movne	r3, #1
 800c43a:	2300      	moveq	r3, #0
 800c43c:	b2db      	uxtb	r3, r3
}
 800c43e:	4618      	mov	r0, r3
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	20000368 	.word	0x20000368

0800c448 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c450:	6879      	ldr	r1, [r7, #4]
 800c452:	4803      	ldr	r0, [pc, #12]	; (800c460 <BSP_SD_GetCardInfo+0x18>)
 800c454:	f7fd f9d2 	bl	80097fc <HAL_SD_GetCardInfo>
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	20000368 	.word	0x20000368

0800c464 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c46c:	f000 f818 	bl	800c4a0 <BSP_SD_AbortCallback>
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c480:	f000 f9a8 	bl	800c7d4 <BSP_SD_WriteCpltCallback>
}
 800c484:	bf00      	nop
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c494:	f000 f9aa 	bl	800c7ec <BSP_SD_ReadCpltCallback>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	af00      	add	r7, sp, #0

}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c4b8:	f000 f80c 	bl	800c4d4 <BSP_PlatformIsDetected>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c4c6:	79fb      	ldrb	r3, [r7, #7]
 800c4c8:	b2db      	uxtb	r3, r3
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c4de:	2180      	movs	r1, #128	; 0x80
 800c4e0:	4806      	ldr	r0, [pc, #24]	; (800c4fc <BSP_PlatformIsDetected+0x28>)
 800c4e2:	f7f8 f803 	bl	80044ec <HAL_GPIO_ReadPin>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	48000800 	.word	0x48000800

0800c500 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c508:	f7f7 facc 	bl	8003aa4 <HAL_GetTick>
 800c50c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c50e:	e006      	b.n	800c51e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c510:	f7ff ff8a 	bl	800c428 <BSP_SD_GetCardState>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e009      	b.n	800c532 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c51e:	f7f7 fac1 	bl	8003aa4 <HAL_GetTick>
 800c522:	4602      	mov	r2, r0
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d8f0      	bhi.n	800c510 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c52e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
	...

0800c53c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <SD_CheckStatus+0x38>)
 800c548:	2201      	movs	r2, #1
 800c54a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c54c:	f7ff ff6c 	bl	800c428 <BSP_SD_GetCardState>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d107      	bne.n	800c566 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c556:	4b07      	ldr	r3, [pc, #28]	; (800c574 <SD_CheckStatus+0x38>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	f023 0301 	bic.w	r3, r3, #1
 800c560:	b2da      	uxtb	r2, r3
 800c562:	4b04      	ldr	r3, [pc, #16]	; (800c574 <SD_CheckStatus+0x38>)
 800c564:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c566:	4b03      	ldr	r3, [pc, #12]	; (800c574 <SD_CheckStatus+0x38>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	b2db      	uxtb	r3, r3
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20000009 	.word	0x20000009

0800c578 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c582:	f7ff fec7 	bl	800c314 <BSP_SD_Init>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d107      	bne.n	800c59c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff ffd4 	bl	800c53c <SD_CheckStatus>
 800c594:	4603      	mov	r3, r0
 800c596:	461a      	mov	r2, r3
 800c598:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <SD_initialize+0x34>)
 800c59a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c59c:	4b03      	ldr	r3, [pc, #12]	; (800c5ac <SD_initialize+0x34>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	b2db      	uxtb	r3, r3
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000009 	.word	0x20000009

0800c5b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff ffbd 	bl	800c53c <SD_CheckStatus>
 800c5c2:	4603      	mov	r3, r0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	4603      	mov	r3, r0
 800c5da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c5e0:	f247 5030 	movw	r0, #30000	; 0x7530
 800c5e4:	f7ff ff8c 	bl	800c500 <SD_CheckStatusWithTimeout>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	da01      	bge.n	800c5f2 <SD_read+0x26>
  {
    return res;
 800c5ee:	7dfb      	ldrb	r3, [r7, #23]
 800c5f0:	e03b      	b.n	800c66a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	68b8      	ldr	r0, [r7, #8]
 800c5f8:	f7ff feb2 	bl	800c360 <BSP_SD_ReadBlocks_DMA>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d132      	bne.n	800c668 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c602:	4b1c      	ldr	r3, [pc, #112]	; (800c674 <SD_read+0xa8>)
 800c604:	2200      	movs	r2, #0
 800c606:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c608:	f7f7 fa4c 	bl	8003aa4 <HAL_GetTick>
 800c60c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c60e:	bf00      	nop
 800c610:	4b18      	ldr	r3, [pc, #96]	; (800c674 <SD_read+0xa8>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d108      	bne.n	800c62a <SD_read+0x5e>
 800c618:	f7f7 fa44 	bl	8003aa4 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	f247 522f 	movw	r2, #29999	; 0x752f
 800c626:	4293      	cmp	r3, r2
 800c628:	d9f2      	bls.n	800c610 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c62a:	4b12      	ldr	r3, [pc, #72]	; (800c674 <SD_read+0xa8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	75fb      	strb	r3, [r7, #23]
 800c636:	e017      	b.n	800c668 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c638:	4b0e      	ldr	r3, [pc, #56]	; (800c674 <SD_read+0xa8>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c63e:	f7f7 fa31 	bl	8003aa4 <HAL_GetTick>
 800c642:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c644:	e007      	b.n	800c656 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c646:	f7ff feef 	bl	800c428 <BSP_SD_GetCardState>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d102      	bne.n	800c656 <SD_read+0x8a>
          {
            res = RES_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c654:	e008      	b.n	800c668 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c656:	f7f7 fa25 	bl	8003aa4 <HAL_GetTick>
 800c65a:	4602      	mov	r2, r0
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	f247 522f 	movw	r2, #29999	; 0x752f
 800c664:	4293      	cmp	r3, r2
 800c666:	d9ee      	bls.n	800c646 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c668:	7dfb      	ldrb	r3, [r7, #23]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	2000d130 	.word	0x2000d130

0800c678 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60b9      	str	r1, [r7, #8]
 800c680:	607a      	str	r2, [r7, #4]
 800c682:	603b      	str	r3, [r7, #0]
 800c684:	4603      	mov	r3, r0
 800c686:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c68c:	4b24      	ldr	r3, [pc, #144]	; (800c720 <SD_write+0xa8>)
 800c68e:	2200      	movs	r2, #0
 800c690:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c692:	f247 5030 	movw	r0, #30000	; 0x7530
 800c696:	f7ff ff33 	bl	800c500 <SD_CheckStatusWithTimeout>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da01      	bge.n	800c6a4 <SD_write+0x2c>
  {
    return res;
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	e038      	b.n	800c716 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	68b8      	ldr	r0, [r7, #8]
 800c6aa:	f7ff fe8b 	bl	800c3c4 <BSP_SD_WriteBlocks_DMA>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d12f      	bne.n	800c714 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c6b4:	f7f7 f9f6 	bl	8003aa4 <HAL_GetTick>
 800c6b8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c6ba:	bf00      	nop
 800c6bc:	4b18      	ldr	r3, [pc, #96]	; (800c720 <SD_write+0xa8>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d108      	bne.n	800c6d6 <SD_write+0x5e>
 800c6c4:	f7f7 f9ee 	bl	8003aa4 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	f247 522f 	movw	r2, #29999	; 0x752f
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d9f2      	bls.n	800c6bc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c6d6:	4b12      	ldr	r3, [pc, #72]	; (800c720 <SD_write+0xa8>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d102      	bne.n	800c6e4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	75fb      	strb	r3, [r7, #23]
 800c6e2:	e017      	b.n	800c714 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <SD_write+0xa8>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c6ea:	f7f7 f9db 	bl	8003aa4 <HAL_GetTick>
 800c6ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c6f0:	e007      	b.n	800c702 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c6f2:	f7ff fe99 	bl	800c428 <BSP_SD_GetCardState>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <SD_write+0x8a>
          {
            res = RES_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	75fb      	strb	r3, [r7, #23]
            break;
 800c700:	e008      	b.n	800c714 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c702:	f7f7 f9cf 	bl	8003aa4 <HAL_GetTick>
 800c706:	4602      	mov	r2, r0
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c710:	4293      	cmp	r3, r2
 800c712:	d9ee      	bls.n	800c6f2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	2000d12c 	.word	0x2000d12c

0800c724 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08c      	sub	sp, #48	; 0x30
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	603a      	str	r2, [r7, #0]
 800c72e:	71fb      	strb	r3, [r7, #7]
 800c730:	460b      	mov	r3, r1
 800c732:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c73a:	4b25      	ldr	r3, [pc, #148]	; (800c7d0 <SD_ioctl+0xac>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <SD_ioctl+0x28>
 800c748:	2303      	movs	r3, #3
 800c74a:	e03c      	b.n	800c7c6 <SD_ioctl+0xa2>

  switch (cmd)
 800c74c:	79bb      	ldrb	r3, [r7, #6]
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d834      	bhi.n	800c7bc <SD_ioctl+0x98>
 800c752:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <SD_ioctl+0x34>)
 800c754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c758:	0800c769 	.word	0x0800c769
 800c75c:	0800c771 	.word	0x0800c771
 800c760:	0800c789 	.word	0x0800c789
 800c764:	0800c7a3 	.word	0x0800c7a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c76e:	e028      	b.n	800c7c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c770:	f107 030c 	add.w	r3, r7, #12
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff fe67 	bl	800c448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c786:	e01c      	b.n	800c7c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c788:	f107 030c 	add.w	r3, r7, #12
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7ff fe5b 	bl	800c448 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	b29a      	uxth	r2, r3
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7a0:	e00f      	b.n	800c7c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fe4e 	bl	800c448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	0a5a      	lsrs	r2, r3, #9
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7ba:	e002      	b.n	800c7c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c7bc:	2304      	movs	r3, #4
 800c7be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3730      	adds	r7, #48	; 0x30
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000009 	.word	0x20000009

0800c7d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c7d8:	4b03      	ldr	r3, [pc, #12]	; (800c7e8 <BSP_SD_WriteCpltCallback+0x14>)
 800c7da:	2201      	movs	r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]
}
 800c7de:	bf00      	nop
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	2000d12c 	.word	0x2000d12c

0800c7ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c7f0:	4b03      	ldr	r3, [pc, #12]	; (800c800 <BSP_SD_ReadCpltCallback+0x14>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	601a      	str	r2, [r3, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	2000d130 	.word	0x2000d130

0800c804 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c810:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c814:	f005 fc20 	bl	8012058 <USBD_static_malloc>
 800c818:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d109      	bne.n	800c834 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	32b0      	adds	r2, #176	; 0xb0
 800c82a:	2100      	movs	r1, #0
 800c82c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c830:	2302      	movs	r3, #2
 800c832:	e0d4      	b.n	800c9de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c834:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c838:	2100      	movs	r1, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f006 fc9b 	bl	8013176 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	32b0      	adds	r2, #176	; 0xb0
 800c84a:	68f9      	ldr	r1, [r7, #12]
 800c84c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	32b0      	adds	r2, #176	; 0xb0
 800c85a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	7c1b      	ldrb	r3, [r3, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d138      	bne.n	800c8de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c86c:	4b5e      	ldr	r3, [pc, #376]	; (800c9e8 <USBD_CDC_Init+0x1e4>)
 800c86e:	7819      	ldrb	r1, [r3, #0]
 800c870:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c874:	2202      	movs	r2, #2
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f005 f9da 	bl	8011c30 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c87c:	4b5a      	ldr	r3, [pc, #360]	; (800c9e8 <USBD_CDC_Init+0x1e4>)
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	f003 020f 	and.w	r2, r3, #15
 800c884:	6879      	ldr	r1, [r7, #4]
 800c886:	4613      	mov	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4413      	add	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	440b      	add	r3, r1
 800c890:	3324      	adds	r3, #36	; 0x24
 800c892:	2201      	movs	r2, #1
 800c894:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c896:	4b55      	ldr	r3, [pc, #340]	; (800c9ec <USBD_CDC_Init+0x1e8>)
 800c898:	7819      	ldrb	r1, [r3, #0]
 800c89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c89e:	2202      	movs	r2, #2
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f005 f9c5 	bl	8011c30 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c8a6:	4b51      	ldr	r3, [pc, #324]	; (800c9ec <USBD_CDC_Init+0x1e8>)
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f003 020f 	and.w	r2, r3, #15
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8be:	2201      	movs	r2, #1
 800c8c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c8c2:	4b4b      	ldr	r3, [pc, #300]	; (800c9f0 <USBD_CDC_Init+0x1ec>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	f003 020f 	and.w	r2, r3, #15
 800c8ca:	6879      	ldr	r1, [r7, #4]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	440b      	add	r3, r1
 800c8d6:	3326      	adds	r3, #38	; 0x26
 800c8d8:	2210      	movs	r2, #16
 800c8da:	801a      	strh	r2, [r3, #0]
 800c8dc:	e035      	b.n	800c94a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8de:	4b42      	ldr	r3, [pc, #264]	; (800c9e8 <USBD_CDC_Init+0x1e4>)
 800c8e0:	7819      	ldrb	r1, [r3, #0]
 800c8e2:	2340      	movs	r3, #64	; 0x40
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f005 f9a2 	bl	8011c30 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c8ec:	4b3e      	ldr	r3, [pc, #248]	; (800c9e8 <USBD_CDC_Init+0x1e4>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	f003 020f 	and.w	r2, r3, #15
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	440b      	add	r3, r1
 800c900:	3324      	adds	r3, #36	; 0x24
 800c902:	2201      	movs	r2, #1
 800c904:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c906:	4b39      	ldr	r3, [pc, #228]	; (800c9ec <USBD_CDC_Init+0x1e8>)
 800c908:	7819      	ldrb	r1, [r3, #0]
 800c90a:	2340      	movs	r3, #64	; 0x40
 800c90c:	2202      	movs	r2, #2
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f005 f98e 	bl	8011c30 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c914:	4b35      	ldr	r3, [pc, #212]	; (800c9ec <USBD_CDC_Init+0x1e8>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 020f 	and.w	r2, r3, #15
 800c91c:	6879      	ldr	r1, [r7, #4]
 800c91e:	4613      	mov	r3, r2
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	440b      	add	r3, r1
 800c928:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c92c:	2201      	movs	r2, #1
 800c92e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c930:	4b2f      	ldr	r3, [pc, #188]	; (800c9f0 <USBD_CDC_Init+0x1ec>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f003 020f 	and.w	r2, r3, #15
 800c938:	6879      	ldr	r1, [r7, #4]
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	440b      	add	r3, r1
 800c944:	3326      	adds	r3, #38	; 0x26
 800c946:	2210      	movs	r2, #16
 800c948:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c94a:	4b29      	ldr	r3, [pc, #164]	; (800c9f0 <USBD_CDC_Init+0x1ec>)
 800c94c:	7819      	ldrb	r1, [r3, #0]
 800c94e:	2308      	movs	r3, #8
 800c950:	2203      	movs	r2, #3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f005 f96c 	bl	8011c30 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c958:	4b25      	ldr	r3, [pc, #148]	; (800c9f0 <USBD_CDC_Init+0x1ec>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	f003 020f 	and.w	r2, r3, #15
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	4613      	mov	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	440b      	add	r3, r1
 800c96c:	3324      	adds	r3, #36	; 0x24
 800c96e:	2201      	movs	r2, #1
 800c970:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	33b0      	adds	r3, #176	; 0xb0
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e018      	b.n	800c9de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	7c1b      	ldrb	r3, [r3, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9b4:	4b0d      	ldr	r3, [pc, #52]	; (800c9ec <USBD_CDC_Init+0x1e8>)
 800c9b6:	7819      	ldrb	r1, [r3, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f005 faae 	bl	8011f24 <USBD_LL_PrepareReceive>
 800c9c8:	e008      	b.n	800c9dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9ca:	4b08      	ldr	r3, [pc, #32]	; (800c9ec <USBD_CDC_Init+0x1e8>)
 800c9cc:	7819      	ldrb	r1, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9d4:	2340      	movs	r3, #64	; 0x40
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f005 faa4 	bl	8011f24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20000093 	.word	0x20000093
 800c9ec:	20000094 	.word	0x20000094
 800c9f0:	20000095 	.word	0x20000095

0800c9f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ca00:	4b3a      	ldr	r3, [pc, #232]	; (800caec <USBD_CDC_DeInit+0xf8>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f005 f950 	bl	8011cac <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ca0c:	4b37      	ldr	r3, [pc, #220]	; (800caec <USBD_CDC_DeInit+0xf8>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	f003 020f 	and.w	r2, r3, #15
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	440b      	add	r3, r1
 800ca20:	3324      	adds	r3, #36	; 0x24
 800ca22:	2200      	movs	r2, #0
 800ca24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ca26:	4b32      	ldr	r3, [pc, #200]	; (800caf0 <USBD_CDC_DeInit+0xfc>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f005 f93d 	bl	8011cac <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ca32:	4b2f      	ldr	r3, [pc, #188]	; (800caf0 <USBD_CDC_DeInit+0xfc>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	f003 020f 	and.w	r2, r3, #15
 800ca3a:	6879      	ldr	r1, [r7, #4]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	440b      	add	r3, r1
 800ca46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ca4e:	4b29      	ldr	r3, [pc, #164]	; (800caf4 <USBD_CDC_DeInit+0x100>)
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f005 f929 	bl	8011cac <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ca5a:	4b26      	ldr	r3, [pc, #152]	; (800caf4 <USBD_CDC_DeInit+0x100>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	f003 020f 	and.w	r2, r3, #15
 800ca62:	6879      	ldr	r1, [r7, #4]
 800ca64:	4613      	mov	r3, r2
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	440b      	add	r3, r1
 800ca6e:	3324      	adds	r3, #36	; 0x24
 800ca70:	2200      	movs	r2, #0
 800ca72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ca74:	4b1f      	ldr	r3, [pc, #124]	; (800caf4 <USBD_CDC_DeInit+0x100>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 020f 	and.w	r2, r3, #15
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	440b      	add	r3, r1
 800ca88:	3326      	adds	r3, #38	; 0x26
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	32b0      	adds	r2, #176	; 0xb0
 800ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d01f      	beq.n	800cae0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	33b0      	adds	r3, #176	; 0xb0
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	32b0      	adds	r2, #176	; 0xb0
 800cabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f005 fad6 	bl	8012074 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	32b0      	adds	r2, #176	; 0xb0
 800cad2:	2100      	movs	r1, #0
 800cad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20000093 	.word	0x20000093
 800caf0:	20000094 	.word	0x20000094
 800caf4:	20000095 	.word	0x20000095

0800caf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	32b0      	adds	r2, #176	; 0xb0
 800cb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cb16:	2300      	movs	r3, #0
 800cb18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d101      	bne.n	800cb28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e0bf      	b.n	800cca8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d050      	beq.n	800cbd6 <USBD_CDC_Setup+0xde>
 800cb34:	2b20      	cmp	r3, #32
 800cb36:	f040 80af 	bne.w	800cc98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	88db      	ldrh	r3, [r3, #6]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d03a      	beq.n	800cbb8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	b25b      	sxtb	r3, r3
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	da1b      	bge.n	800cb84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	33b0      	adds	r3, #176	; 0xb0
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cb62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	88d2      	ldrh	r2, [r2, #6]
 800cb68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	88db      	ldrh	r3, [r3, #6]
 800cb6e:	2b07      	cmp	r3, #7
 800cb70:	bf28      	it	cs
 800cb72:	2307      	movcs	r3, #7
 800cb74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	89fa      	ldrh	r2, [r7, #14]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 fd73 	bl	800e668 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cb82:	e090      	b.n	800cca6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	785a      	ldrb	r2, [r3, #1]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	88db      	ldrh	r3, [r3, #6]
 800cb92:	2b3f      	cmp	r3, #63	; 0x3f
 800cb94:	d803      	bhi.n	800cb9e <USBD_CDC_Setup+0xa6>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	88db      	ldrh	r3, [r3, #6]
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	e000      	b.n	800cba0 <USBD_CDC_Setup+0xa8>
 800cb9e:	2240      	movs	r2, #64	; 0x40
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cba6:	6939      	ldr	r1, [r7, #16]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f001 fd85 	bl	800e6c0 <USBD_CtlPrepareRx>
      break;
 800cbb6:	e076      	b.n	800cca6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	33b0      	adds	r3, #176	; 0xb0
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	7850      	ldrb	r0, [r2, #1]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	4798      	blx	r3
      break;
 800cbd4:	e067      	b.n	800cca6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b0b      	cmp	r3, #11
 800cbdc:	d851      	bhi.n	800cc82 <USBD_CDC_Setup+0x18a>
 800cbde:	a201      	add	r2, pc, #4	; (adr r2, 800cbe4 <USBD_CDC_Setup+0xec>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cc15 	.word	0x0800cc15
 800cbe8:	0800cc91 	.word	0x0800cc91
 800cbec:	0800cc83 	.word	0x0800cc83
 800cbf0:	0800cc83 	.word	0x0800cc83
 800cbf4:	0800cc83 	.word	0x0800cc83
 800cbf8:	0800cc83 	.word	0x0800cc83
 800cbfc:	0800cc83 	.word	0x0800cc83
 800cc00:	0800cc83 	.word	0x0800cc83
 800cc04:	0800cc83 	.word	0x0800cc83
 800cc08:	0800cc83 	.word	0x0800cc83
 800cc0c:	0800cc3f 	.word	0x0800cc3f
 800cc10:	0800cc69 	.word	0x0800cc69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d107      	bne.n	800cc30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cc20:	f107 030a 	add.w	r3, r7, #10
 800cc24:	2202      	movs	r2, #2
 800cc26:	4619      	mov	r1, r3
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f001 fd1d 	bl	800e668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc2e:	e032      	b.n	800cc96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc30:	6839      	ldr	r1, [r7, #0]
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 fca7 	bl	800e586 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	75fb      	strb	r3, [r7, #23]
          break;
 800cc3c:	e02b      	b.n	800cc96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b03      	cmp	r3, #3
 800cc48:	d107      	bne.n	800cc5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc4a:	f107 030d 	add.w	r3, r7, #13
 800cc4e:	2201      	movs	r2, #1
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f001 fd08 	bl	800e668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc58:	e01d      	b.n	800cc96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f001 fc92 	bl	800e586 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc62:	2303      	movs	r3, #3
 800cc64:	75fb      	strb	r3, [r7, #23]
          break;
 800cc66:	e016      	b.n	800cc96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b03      	cmp	r3, #3
 800cc72:	d00f      	beq.n	800cc94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cc74:	6839      	ldr	r1, [r7, #0]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f001 fc85 	bl	800e586 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cc80:	e008      	b.n	800cc94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f001 fc7e 	bl	800e586 <USBD_CtlError>
          ret = USBD_FAIL;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc8e:	e002      	b.n	800cc96 <USBD_CDC_Setup+0x19e>
          break;
 800cc90:	bf00      	nop
 800cc92:	e008      	b.n	800cca6 <USBD_CDC_Setup+0x1ae>
          break;
 800cc94:	bf00      	nop
      }
      break;
 800cc96:	e006      	b.n	800cca6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f001 fc73 	bl	800e586 <USBD_CtlError>
      ret = USBD_FAIL;
 800cca0:	2303      	movs	r3, #3
 800cca2:	75fb      	strb	r3, [r7, #23]
      break;
 800cca4:	bf00      	nop
  }

  return (uint8_t)ret;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3718      	adds	r7, #24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	32b0      	adds	r2, #176	; 0xb0
 800ccce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	e065      	b.n	800cda6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	32b0      	adds	r2, #176	; 0xb0
 800cce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ccea:	78fb      	ldrb	r3, [r7, #3]
 800ccec:	f003 020f 	and.w	r2, r3, #15
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	440b      	add	r3, r1
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d02f      	beq.n	800cd64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cd04:	78fb      	ldrb	r3, [r7, #3]
 800cd06:	f003 020f 	and.w	r2, r3, #15
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	4413      	add	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	440b      	add	r3, r1
 800cd16:	3318      	adds	r3, #24
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	f003 010f 	and.w	r1, r3, #15
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	460b      	mov	r3, r1
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	440b      	add	r3, r1
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4403      	add	r3, r0
 800cd2c:	3344      	adds	r3, #68	; 0x44
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd34:	fb01 f303 	mul.w	r3, r1, r3
 800cd38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d112      	bne.n	800cd64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	f003 020f 	and.w	r2, r3, #15
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	4613      	mov	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	440b      	add	r3, r1
 800cd50:	3318      	adds	r3, #24
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd56:	78f9      	ldrb	r1, [r7, #3]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f005 f8a9 	bl	8011eb4 <USBD_LL_Transmit>
 800cd62:	e01f      	b.n	800cda4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	33b0      	adds	r3, #176	; 0xb0
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d010      	beq.n	800cda4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	33b0      	adds	r3, #176	; 0xb0
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cda0:	78fa      	ldrb	r2, [r7, #3]
 800cda2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	32b0      	adds	r2, #176	; 0xb0
 800cdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	32b0      	adds	r2, #176	; 0xb0
 800cdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d101      	bne.n	800cde0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e01a      	b.n	800ce16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f005 f8d5 	bl	8011f94 <USBD_LL_GetRxDataSize>
 800cdea:	4602      	mov	r2, r0
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	33b0      	adds	r3, #176	; 0xb0
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce10:	4611      	mov	r1, r2
 800ce12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	32b0      	adds	r2, #176	; 0xb0
 800ce30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e025      	b.n	800ce8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	33b0      	adds	r3, #176	; 0xb0
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d01a      	beq.n	800ce8a <USBD_CDC_EP0_RxReady+0x6c>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce5a:	2bff      	cmp	r3, #255	; 0xff
 800ce5c:	d015      	beq.n	800ce8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	33b0      	adds	r3, #176	; 0xb0
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4413      	add	r3, r2
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ce76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce7e:	b292      	uxth	r2, r2
 800ce80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	22ff      	movs	r2, #255	; 0xff
 800ce86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce9c:	2182      	movs	r1, #130	; 0x82
 800ce9e:	4818      	ldr	r0, [pc, #96]	; (800cf00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cea0:	f000 fd0f 	bl	800d8c2 <USBD_GetEpDesc>
 800cea4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cea6:	2101      	movs	r1, #1
 800cea8:	4815      	ldr	r0, [pc, #84]	; (800cf00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ceaa:	f000 fd0a 	bl	800d8c2 <USBD_GetEpDesc>
 800ceae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ceb0:	2181      	movs	r1, #129	; 0x81
 800ceb2:	4813      	ldr	r0, [pc, #76]	; (800cf00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ceb4:	f000 fd05 	bl	800d8c2 <USBD_GetEpDesc>
 800ceb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2210      	movs	r2, #16
 800cec4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d006      	beq.n	800ceda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	2200      	movs	r2, #0
 800ced0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ced4:	711a      	strb	r2, [r3, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d006      	beq.n	800ceee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cee8:	711a      	strb	r2, [r3, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2243      	movs	r2, #67	; 0x43
 800cef2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20000050 	.word	0x20000050

0800cf04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf0c:	2182      	movs	r1, #130	; 0x82
 800cf0e:	4818      	ldr	r0, [pc, #96]	; (800cf70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf10:	f000 fcd7 	bl	800d8c2 <USBD_GetEpDesc>
 800cf14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf16:	2101      	movs	r1, #1
 800cf18:	4815      	ldr	r0, [pc, #84]	; (800cf70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf1a:	f000 fcd2 	bl	800d8c2 <USBD_GetEpDesc>
 800cf1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf20:	2181      	movs	r1, #129	; 0x81
 800cf22:	4813      	ldr	r0, [pc, #76]	; (800cf70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf24:	f000 fccd 	bl	800d8c2 <USBD_GetEpDesc>
 800cf28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2210      	movs	r2, #16
 800cf34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d006      	beq.n	800cf4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	711a      	strb	r2, [r3, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f042 0202 	orr.w	r2, r2, #2
 800cf48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	711a      	strb	r2, [r3, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f042 0202 	orr.w	r2, r2, #2
 800cf5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2243      	movs	r2, #67	; 0x43
 800cf62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3718      	adds	r7, #24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	20000050 	.word	0x20000050

0800cf74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf7c:	2182      	movs	r1, #130	; 0x82
 800cf7e:	4818      	ldr	r0, [pc, #96]	; (800cfe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf80:	f000 fc9f 	bl	800d8c2 <USBD_GetEpDesc>
 800cf84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf86:	2101      	movs	r1, #1
 800cf88:	4815      	ldr	r0, [pc, #84]	; (800cfe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf8a:	f000 fc9a 	bl	800d8c2 <USBD_GetEpDesc>
 800cf8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf90:	2181      	movs	r1, #129	; 0x81
 800cf92:	4813      	ldr	r0, [pc, #76]	; (800cfe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf94:	f000 fc95 	bl	800d8c2 <USBD_GetEpDesc>
 800cf98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2210      	movs	r2, #16
 800cfa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d006      	beq.n	800cfba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfb4:	711a      	strb	r2, [r3, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d006      	beq.n	800cfce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfc8:	711a      	strb	r2, [r3, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2243      	movs	r2, #67	; 0x43
 800cfd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cfd4:	4b02      	ldr	r3, [pc, #8]	; (800cfe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3718      	adds	r7, #24
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	20000050 	.word	0x20000050

0800cfe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	220a      	movs	r2, #10
 800cff0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cff2:	4b03      	ldr	r3, [pc, #12]	; (800d000 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	2000000c 	.word	0x2000000c

0800d004 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d101      	bne.n	800d018 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d014:	2303      	movs	r3, #3
 800d016:	e009      	b.n	800d02c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	33b0      	adds	r3, #176	; 0xb0
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d038:	b480      	push	{r7}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	32b0      	adds	r2, #176	; 0xb0
 800d04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d052:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e008      	b.n	800d070 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	371c      	adds	r7, #28
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	32b0      	adds	r2, #176	; 0xb0
 800d090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d094:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e004      	b.n	800d0aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3714      	adds	r7, #20
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
	...

0800d0b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	32b0      	adds	r2, #176	; 0xb0
 800d0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	32b0      	adds	r2, #176	; 0xb0
 800d0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	e018      	b.n	800d118 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	7c1b      	ldrb	r3, [r3, #16]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0ee:	4b0c      	ldr	r3, [pc, #48]	; (800d120 <USBD_CDC_ReceivePacket+0x68>)
 800d0f0:	7819      	ldrb	r1, [r3, #0]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f004 ff11 	bl	8011f24 <USBD_LL_PrepareReceive>
 800d102:	e008      	b.n	800d116 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d104:	4b06      	ldr	r3, [pc, #24]	; (800d120 <USBD_CDC_ReceivePacket+0x68>)
 800d106:	7819      	ldrb	r1, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d10e:	2340      	movs	r3, #64	; 0x40
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f004 ff07 	bl	8011f24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	20000094 	.word	0x20000094

0800d124 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b086      	sub	sp, #24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4613      	mov	r3, r2
 800d130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d138:	2303      	movs	r3, #3
 800d13a:	e01f      	b.n	800d17c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	79fa      	ldrb	r2, [r7, #7]
 800d16e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f004 fcdf 	bl	8011b34 <USBD_LL_Init>
 800d176:	4603      	mov	r3, r0
 800d178:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d18e:	2300      	movs	r3, #0
 800d190:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d198:	2303      	movs	r3, #3
 800d19a:	e025      	b.n	800d1e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	32ae      	adds	r2, #174	; 0xae
 800d1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00f      	beq.n	800d1d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	32ae      	adds	r2, #174	; 0xae
 800d1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c8:	f107 020e 	add.w	r2, r7, #14
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	4798      	blx	r3
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f004 fce7 	bl	8011bcc <USBD_LL_Start>
 800d1fe:	4603      	mov	r3, r0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d210:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d212:	4618      	mov	r0, r3
 800d214:	370c      	adds	r7, #12
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	460b      	mov	r3, r1
 800d228:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d234:	2b00      	cmp	r3, #0
 800d236:	d009      	beq.n	800d24c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	78fa      	ldrb	r2, [r7, #3]
 800d242:	4611      	mov	r1, r2
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	4798      	blx	r3
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	4611      	mov	r1, r2
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	4798      	blx	r3
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d27c:	2303      	movs	r3, #3
 800d27e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d280:	7bfb      	ldrb	r3, [r7, #15]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b084      	sub	sp, #16
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f001 f938 	bl	800e512 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2be:	f003 031f 	and.w	r3, r3, #31
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d01a      	beq.n	800d2fc <USBD_LL_SetupStage+0x72>
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d822      	bhi.n	800d310 <USBD_LL_SetupStage+0x86>
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <USBD_LL_SetupStage+0x4a>
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d00a      	beq.n	800d2e8 <USBD_LL_SetupStage+0x5e>
 800d2d2:	e01d      	b.n	800d310 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fb65 	bl	800d9ac <USBD_StdDevReq>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2e6:	e020      	b.n	800d32a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fbcd 	bl	800da90 <USBD_StdItfReq>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2fa:	e016      	b.n	800d32a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fc2f 	bl	800db68 <USBD_StdEPReq>
 800d30a:	4603      	mov	r3, r0
 800d30c:	73fb      	strb	r3, [r7, #15]
      break;
 800d30e:	e00c      	b.n	800d32a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d316:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f004 fcfa 	bl	8011d18 <USBD_LL_StallEP>
 800d324:	4603      	mov	r3, r0
 800d326:	73fb      	strb	r3, [r7, #15]
      break;
 800d328:	bf00      	nop
  }

  return ret;
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	460b      	mov	r3, r1
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d346:	7afb      	ldrb	r3, [r7, #11]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d16e      	bne.n	800d42a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	f040 8098 	bne.w	800d490 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	689a      	ldr	r2, [r3, #8]
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d913      	bls.n	800d394 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	689a      	ldr	r2, [r3, #8]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	1ad2      	subs	r2, r2, r3
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	68da      	ldr	r2, [r3, #12]
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	4293      	cmp	r3, r2
 800d384:	bf28      	it	cs
 800d386:	4613      	movcs	r3, r2
 800d388:	461a      	mov	r2, r3
 800d38a:	6879      	ldr	r1, [r7, #4]
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f001 f9b4 	bl	800e6fa <USBD_CtlContinueRx>
 800d392:	e07d      	b.n	800d490 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d39a:	f003 031f 	and.w	r3, r3, #31
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d014      	beq.n	800d3cc <USBD_LL_DataOutStage+0x98>
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d81d      	bhi.n	800d3e2 <USBD_LL_DataOutStage+0xae>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <USBD_LL_DataOutStage+0x7c>
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d003      	beq.n	800d3b6 <USBD_LL_DataOutStage+0x82>
 800d3ae:	e018      	b.n	800d3e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	75bb      	strb	r3, [r7, #22]
            break;
 800d3b4:	e018      	b.n	800d3e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	4619      	mov	r1, r3
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 fa64 	bl	800d88e <USBD_CoreFindIF>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	75bb      	strb	r3, [r7, #22]
            break;
 800d3ca:	e00d      	b.n	800d3e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f000 fa66 	bl	800d8a8 <USBD_CoreFindEP>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	75bb      	strb	r3, [r7, #22]
            break;
 800d3e0:	e002      	b.n	800d3e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	75bb      	strb	r3, [r7, #22]
            break;
 800d3e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d3e8:	7dbb      	ldrb	r3, [r7, #22]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d119      	bne.n	800d422 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d113      	bne.n	800d422 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d3fa:	7dba      	ldrb	r2, [r7, #22]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	32ae      	adds	r2, #174	; 0xae
 800d400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00b      	beq.n	800d422 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d40a:	7dba      	ldrb	r2, [r7, #22]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d412:	7dba      	ldrb	r2, [r7, #22]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	32ae      	adds	r2, #174	; 0xae
 800d418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f001 f97a 	bl	800e71c <USBD_CtlSendStatus>
 800d428:	e032      	b.n	800d490 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d42a:	7afb      	ldrb	r3, [r7, #11]
 800d42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d430:	b2db      	uxtb	r3, r3
 800d432:	4619      	mov	r1, r3
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 fa37 	bl	800d8a8 <USBD_CoreFindEP>
 800d43a:	4603      	mov	r3, r0
 800d43c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d43e:	7dbb      	ldrb	r3, [r7, #22]
 800d440:	2bff      	cmp	r3, #255	; 0xff
 800d442:	d025      	beq.n	800d490 <USBD_LL_DataOutStage+0x15c>
 800d444:	7dbb      	ldrb	r3, [r7, #22]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d122      	bne.n	800d490 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b03      	cmp	r3, #3
 800d454:	d117      	bne.n	800d486 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d456:	7dba      	ldrb	r2, [r7, #22]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	32ae      	adds	r2, #174	; 0xae
 800d45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00f      	beq.n	800d486 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d466:	7dba      	ldrb	r2, [r7, #22]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d46e:	7dba      	ldrb	r2, [r7, #22]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	32ae      	adds	r2, #174	; 0xae
 800d474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	7afa      	ldrb	r2, [r7, #11]
 800d47c:	4611      	mov	r1, r2
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	4798      	blx	r3
 800d482:	4603      	mov	r3, r0
 800d484:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	e000      	b.n	800d492 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	607a      	str	r2, [r7, #4]
 800d4a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d4a8:	7afb      	ldrb	r3, [r7, #11]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d16f      	bne.n	800d58e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3314      	adds	r3, #20
 800d4b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d15a      	bne.n	800d574 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	689a      	ldr	r2, [r3, #8]
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d914      	bls.n	800d4f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	1ad2      	subs	r2, r2, r3
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f001 f8dc 	bl	800e69e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f004 fd19 	bl	8011f24 <USBD_LL_PrepareReceive>
 800d4f2:	e03f      	b.n	800d574 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	68da      	ldr	r2, [r3, #12]
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d11c      	bne.n	800d53a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d508:	429a      	cmp	r2, r3
 800d50a:	d316      	bcc.n	800d53a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d516:	429a      	cmp	r2, r3
 800d518:	d20f      	bcs.n	800d53a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d51a:	2200      	movs	r2, #0
 800d51c:	2100      	movs	r1, #0
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f001 f8bd 	bl	800e69e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d52c:	2300      	movs	r3, #0
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f004 fcf6 	bl	8011f24 <USBD_LL_PrepareReceive>
 800d538:	e01c      	b.n	800d574 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b03      	cmp	r3, #3
 800d544:	d10f      	bne.n	800d566 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d009      	beq.n	800d566 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d566:	2180      	movs	r1, #128	; 0x80
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f004 fbd5 	bl	8011d18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f001 f8e7 	bl	800e742 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d03a      	beq.n	800d5f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f7ff fe42 	bl	800d208 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d58c:	e032      	b.n	800d5f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d58e:	7afb      	ldrb	r3, [r7, #11]
 800d590:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d594:	b2db      	uxtb	r3, r3
 800d596:	4619      	mov	r1, r3
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f000 f985 	bl	800d8a8 <USBD_CoreFindEP>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5a2:	7dfb      	ldrb	r3, [r7, #23]
 800d5a4:	2bff      	cmp	r3, #255	; 0xff
 800d5a6:	d025      	beq.n	800d5f4 <USBD_LL_DataInStage+0x15a>
 800d5a8:	7dfb      	ldrb	r3, [r7, #23]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d122      	bne.n	800d5f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b03      	cmp	r3, #3
 800d5b8:	d11c      	bne.n	800d5f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d5ba:	7dfa      	ldrb	r2, [r7, #23]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	32ae      	adds	r2, #174	; 0xae
 800d5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c4:	695b      	ldr	r3, [r3, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d014      	beq.n	800d5f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d5ca:	7dfa      	ldrb	r2, [r7, #23]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d5d2:	7dfa      	ldrb	r2, [r7, #23]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	32ae      	adds	r2, #174	; 0xae
 800d5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	7afa      	ldrb	r2, [r7, #11]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	4798      	blx	r3
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d5ea:	7dbb      	ldrb	r3, [r7, #22]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d5f0:	7dbb      	ldrb	r3, [r7, #22]
 800d5f2:	e000      	b.n	800d5f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b084      	sub	sp, #16
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d606:	2300      	movs	r3, #0
 800d608:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d014      	beq.n	800d664 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00e      	beq.n	800d664 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	6852      	ldr	r2, [r2, #4]
 800d652:	b2d2      	uxtb	r2, r2
 800d654:	4611      	mov	r1, r2
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	4798      	blx	r3
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d660:	2303      	movs	r3, #3
 800d662:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d664:	2340      	movs	r3, #64	; 0x40
 800d666:	2200      	movs	r2, #0
 800d668:	2100      	movs	r1, #0
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f004 fae0 	bl	8011c30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2240      	movs	r2, #64	; 0x40
 800d67c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d680:	2340      	movs	r3, #64	; 0x40
 800d682:	2200      	movs	r2, #0
 800d684:	2180      	movs	r1, #128	; 0x80
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f004 fad2 	bl	8011c30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2240      	movs	r2, #64	; 0x40
 800d696:	621a      	str	r2, [r3, #32]

  return ret;
 800d698:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b083      	sub	sp, #12
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	78fa      	ldrb	r2, [r7, #3]
 800d6b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b083      	sub	sp, #12
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d006      	beq.n	800d6e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2204      	movs	r2, #4
 800d6e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b083      	sub	sp, #12
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d106      	bne.n	800d71c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d714:	b2da      	uxtb	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d110      	bne.n	800d760 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00b      	beq.n	800d760 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d74e:	69db      	ldr	r3, [r3, #28]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d005      	beq.n	800d760 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d75a:	69db      	ldr	r3, [r3, #28]
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b082      	sub	sp, #8
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	460b      	mov	r3, r1
 800d774:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	32ae      	adds	r2, #174	; 0xae
 800d780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d101      	bne.n	800d78c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d788:	2303      	movs	r3, #3
 800d78a:	e01c      	b.n	800d7c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d792:	b2db      	uxtb	r3, r3
 800d794:	2b03      	cmp	r3, #3
 800d796:	d115      	bne.n	800d7c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	32ae      	adds	r2, #174	; 0xae
 800d7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a6:	6a1b      	ldr	r3, [r3, #32]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	32ae      	adds	r2, #174	; 0xae
 800d7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ba:	6a1b      	ldr	r3, [r3, #32]
 800d7bc:	78fa      	ldrb	r2, [r7, #3]
 800d7be:	4611      	mov	r1, r2
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	32ae      	adds	r2, #174	; 0xae
 800d7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e01c      	b.n	800d82a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d115      	bne.n	800d828 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	32ae      	adds	r2, #174	; 0xae
 800d806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	32ae      	adds	r2, #174	; 0xae
 800d81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d820:	78fa      	ldrb	r2, [r7, #3]
 800d822:	4611      	mov	r1, r2
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d832:	b480      	push	{r7}
 800d834:	b083      	sub	sp, #12
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00e      	beq.n	800d884 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	6852      	ldr	r2, [r2, #4]
 800d872:	b2d2      	uxtb	r2, r2
 800d874:	4611      	mov	r1, r2
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	4798      	blx	r3
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d880:	2303      	movs	r3, #3
 800d882:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d884:	7bfb      	ldrb	r3, [r7, #15]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	460b      	mov	r3, r1
 800d898:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d89a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d8b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b086      	sub	sp, #24
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	885b      	ldrh	r3, [r3, #2]
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d920      	bls.n	800d92c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d8f2:	e013      	b.n	800d91c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d8f4:	f107 030a 	add.w	r3, r7, #10
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6978      	ldr	r0, [r7, #20]
 800d8fc:	f000 f81b 	bl	800d936 <USBD_GetNextDesc>
 800d900:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	785b      	ldrb	r3, [r3, #1]
 800d906:	2b05      	cmp	r3, #5
 800d908:	d108      	bne.n	800d91c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	789b      	ldrb	r3, [r3, #2]
 800d912:	78fa      	ldrb	r2, [r7, #3]
 800d914:	429a      	cmp	r2, r3
 800d916:	d008      	beq.n	800d92a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d918:	2300      	movs	r3, #0
 800d91a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	885b      	ldrh	r3, [r3, #2]
 800d920:	b29a      	uxth	r2, r3
 800d922:	897b      	ldrh	r3, [r7, #10]
 800d924:	429a      	cmp	r2, r3
 800d926:	d8e5      	bhi.n	800d8f4 <USBD_GetEpDesc+0x32>
 800d928:	e000      	b.n	800d92c <USBD_GetEpDesc+0x6a>
          break;
 800d92a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d92c:	693b      	ldr	r3, [r7, #16]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d936:	b480      	push	{r7}
 800d938:	b085      	sub	sp, #20
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	881a      	ldrh	r2, [r3, #0]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	4413      	add	r3, r2
 800d950:	b29a      	uxth	r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4413      	add	r3, r2
 800d960:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d962:	68fb      	ldr	r3, [r7, #12]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d970:	b480      	push	{r7}
 800d972:	b087      	sub	sp, #28
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	3301      	adds	r3, #1
 800d986:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d98e:	8a3b      	ldrh	r3, [r7, #16]
 800d990:	021b      	lsls	r3, r3, #8
 800d992:	b21a      	sxth	r2, r3
 800d994:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d998:	4313      	orrs	r3, r2
 800d99a:	b21b      	sxth	r3, r3
 800d99c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d99e:	89fb      	ldrh	r3, [r7, #14]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	371c      	adds	r7, #28
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9c2:	2b40      	cmp	r3, #64	; 0x40
 800d9c4:	d005      	beq.n	800d9d2 <USBD_StdDevReq+0x26>
 800d9c6:	2b40      	cmp	r3, #64	; 0x40
 800d9c8:	d857      	bhi.n	800da7a <USBD_StdDevReq+0xce>
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00f      	beq.n	800d9ee <USBD_StdDevReq+0x42>
 800d9ce:	2b20      	cmp	r3, #32
 800d9d0:	d153      	bne.n	800da7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	32ae      	adds	r2, #174	; 0xae
 800d9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	4798      	blx	r3
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]
      break;
 800d9ec:	e04a      	b.n	800da84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	785b      	ldrb	r3, [r3, #1]
 800d9f2:	2b09      	cmp	r3, #9
 800d9f4:	d83b      	bhi.n	800da6e <USBD_StdDevReq+0xc2>
 800d9f6:	a201      	add	r2, pc, #4	; (adr r2, 800d9fc <USBD_StdDevReq+0x50>)
 800d9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9fc:	0800da51 	.word	0x0800da51
 800da00:	0800da65 	.word	0x0800da65
 800da04:	0800da6f 	.word	0x0800da6f
 800da08:	0800da5b 	.word	0x0800da5b
 800da0c:	0800da6f 	.word	0x0800da6f
 800da10:	0800da2f 	.word	0x0800da2f
 800da14:	0800da25 	.word	0x0800da25
 800da18:	0800da6f 	.word	0x0800da6f
 800da1c:	0800da47 	.word	0x0800da47
 800da20:	0800da39 	.word	0x0800da39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 fa3c 	bl	800dea4 <USBD_GetDescriptor>
          break;
 800da2c:	e024      	b.n	800da78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fbcb 	bl	800e1cc <USBD_SetAddress>
          break;
 800da36:	e01f      	b.n	800da78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fc0a 	bl	800e254 <USBD_SetConfig>
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
          break;
 800da44:	e018      	b.n	800da78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fcad 	bl	800e3a8 <USBD_GetConfig>
          break;
 800da4e:	e013      	b.n	800da78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 fcde 	bl	800e414 <USBD_GetStatus>
          break;
 800da58:	e00e      	b.n	800da78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fd0d 	bl	800e47c <USBD_SetFeature>
          break;
 800da62:	e009      	b.n	800da78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fd31 	bl	800e4ce <USBD_ClrFeature>
          break;
 800da6c:	e004      	b.n	800da78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fd88 	bl	800e586 <USBD_CtlError>
          break;
 800da76:	bf00      	nop
      }
      break;
 800da78:	e004      	b.n	800da84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fd82 	bl	800e586 <USBD_CtlError>
      break;
 800da82:	bf00      	nop
  }

  return ret;
 800da84:	7bfb      	ldrb	r3, [r7, #15]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop

0800da90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800daa6:	2b40      	cmp	r3, #64	; 0x40
 800daa8:	d005      	beq.n	800dab6 <USBD_StdItfReq+0x26>
 800daaa:	2b40      	cmp	r3, #64	; 0x40
 800daac:	d852      	bhi.n	800db54 <USBD_StdItfReq+0xc4>
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <USBD_StdItfReq+0x26>
 800dab2:	2b20      	cmp	r3, #32
 800dab4:	d14e      	bne.n	800db54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	3b01      	subs	r3, #1
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d840      	bhi.n	800db46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	889b      	ldrh	r3, [r3, #4]
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d836      	bhi.n	800db3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	889b      	ldrh	r3, [r3, #4]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fed9 	bl	800d88e <USBD_CoreFindIF>
 800dadc:	4603      	mov	r3, r0
 800dade:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dae0:	7bbb      	ldrb	r3, [r7, #14]
 800dae2:	2bff      	cmp	r3, #255	; 0xff
 800dae4:	d01d      	beq.n	800db22 <USBD_StdItfReq+0x92>
 800dae6:	7bbb      	ldrb	r3, [r7, #14]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d11a      	bne.n	800db22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800daec:	7bba      	ldrb	r2, [r7, #14]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	32ae      	adds	r2, #174	; 0xae
 800daf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00f      	beq.n	800db1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dafc:	7bba      	ldrb	r2, [r7, #14]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db04:	7bba      	ldrb	r2, [r7, #14]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	32ae      	adds	r2, #174	; 0xae
 800db0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	4798      	blx	r3
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db1a:	e004      	b.n	800db26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800db1c:	2303      	movs	r3, #3
 800db1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db20:	e001      	b.n	800db26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800db22:	2303      	movs	r3, #3
 800db24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	88db      	ldrh	r3, [r3, #6]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d110      	bne.n	800db50 <USBD_StdItfReq+0xc0>
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10d      	bne.n	800db50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fdf1 	bl	800e71c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db3a:	e009      	b.n	800db50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fd21 	bl	800e586 <USBD_CtlError>
          break;
 800db44:	e004      	b.n	800db50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fd1c 	bl	800e586 <USBD_CtlError>
          break;
 800db4e:	e000      	b.n	800db52 <USBD_StdItfReq+0xc2>
          break;
 800db50:	bf00      	nop
      }
      break;
 800db52:	e004      	b.n	800db5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fd15 	bl	800e586 <USBD_CtlError>
      break;
 800db5c:	bf00      	nop
  }

  return ret;
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800db72:	2300      	movs	r3, #0
 800db74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	889b      	ldrh	r3, [r3, #4]
 800db7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db84:	2b40      	cmp	r3, #64	; 0x40
 800db86:	d007      	beq.n	800db98 <USBD_StdEPReq+0x30>
 800db88:	2b40      	cmp	r3, #64	; 0x40
 800db8a:	f200 817f 	bhi.w	800de8c <USBD_StdEPReq+0x324>
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d02a      	beq.n	800dbe8 <USBD_StdEPReq+0x80>
 800db92:	2b20      	cmp	r3, #32
 800db94:	f040 817a 	bne.w	800de8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db98:	7bbb      	ldrb	r3, [r7, #14]
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff fe83 	bl	800d8a8 <USBD_CoreFindEP>
 800dba2:	4603      	mov	r3, r0
 800dba4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dba6:	7b7b      	ldrb	r3, [r7, #13]
 800dba8:	2bff      	cmp	r3, #255	; 0xff
 800dbaa:	f000 8174 	beq.w	800de96 <USBD_StdEPReq+0x32e>
 800dbae:	7b7b      	ldrb	r3, [r7, #13]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f040 8170 	bne.w	800de96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dbb6:	7b7a      	ldrb	r2, [r7, #13]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dbbe:	7b7a      	ldrb	r2, [r7, #13]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	32ae      	adds	r2, #174	; 0xae
 800dbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 8163 	beq.w	800de96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dbd0:	7b7a      	ldrb	r2, [r7, #13]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	32ae      	adds	r2, #174	; 0xae
 800dbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	4798      	blx	r3
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dbe6:	e156      	b.n	800de96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	785b      	ldrb	r3, [r3, #1]
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	d008      	beq.n	800dc02 <USBD_StdEPReq+0x9a>
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	f300 8145 	bgt.w	800de80 <USBD_StdEPReq+0x318>
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 809b 	beq.w	800dd32 <USBD_StdEPReq+0x1ca>
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d03c      	beq.n	800dc7a <USBD_StdEPReq+0x112>
 800dc00:	e13e      	b.n	800de80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d002      	beq.n	800dc14 <USBD_StdEPReq+0xac>
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d016      	beq.n	800dc40 <USBD_StdEPReq+0xd8>
 800dc12:	e02c      	b.n	800dc6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00d      	beq.n	800dc36 <USBD_StdEPReq+0xce>
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b80      	cmp	r3, #128	; 0x80
 800dc1e:	d00a      	beq.n	800dc36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f004 f877 	bl	8011d18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc2a:	2180      	movs	r1, #128	; 0x80
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f004 f873 	bl	8011d18 <USBD_LL_StallEP>
 800dc32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc34:	e020      	b.n	800dc78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fca4 	bl	800e586 <USBD_CtlError>
              break;
 800dc3e:	e01b      	b.n	800dc78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	885b      	ldrh	r3, [r3, #2]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10e      	bne.n	800dc66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00b      	beq.n	800dc66 <USBD_StdEPReq+0xfe>
 800dc4e:	7bbb      	ldrb	r3, [r7, #14]
 800dc50:	2b80      	cmp	r3, #128	; 0x80
 800dc52:	d008      	beq.n	800dc66 <USBD_StdEPReq+0xfe>
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	88db      	ldrh	r3, [r3, #6]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d104      	bne.n	800dc66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f004 f859 	bl	8011d18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fd58 	bl	800e71c <USBD_CtlSendStatus>

              break;
 800dc6c:	e004      	b.n	800dc78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fc88 	bl	800e586 <USBD_CtlError>
              break;
 800dc76:	bf00      	nop
          }
          break;
 800dc78:	e107      	b.n	800de8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d002      	beq.n	800dc8c <USBD_StdEPReq+0x124>
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d016      	beq.n	800dcb8 <USBD_StdEPReq+0x150>
 800dc8a:	e04b      	b.n	800dd24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00d      	beq.n	800dcae <USBD_StdEPReq+0x146>
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	2b80      	cmp	r3, #128	; 0x80
 800dc96:	d00a      	beq.n	800dcae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc98:	7bbb      	ldrb	r3, [r7, #14]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f004 f83b 	bl	8011d18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dca2:	2180      	movs	r1, #128	; 0x80
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f004 f837 	bl	8011d18 <USBD_LL_StallEP>
 800dcaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcac:	e040      	b.n	800dd30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fc68 	bl	800e586 <USBD_CtlError>
              break;
 800dcb6:	e03b      	b.n	800dd30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	885b      	ldrh	r3, [r3, #2]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d136      	bne.n	800dd2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
 800dcc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d004      	beq.n	800dcd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dcca:	7bbb      	ldrb	r3, [r7, #14]
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f004 f858 	bl	8011d84 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fd21 	bl	800e71c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff fde2 	bl	800d8a8 <USBD_CoreFindEP>
 800dce4:	4603      	mov	r3, r0
 800dce6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dce8:	7b7b      	ldrb	r3, [r7, #13]
 800dcea:	2bff      	cmp	r3, #255	; 0xff
 800dcec:	d01f      	beq.n	800dd2e <USBD_StdEPReq+0x1c6>
 800dcee:	7b7b      	ldrb	r3, [r7, #13]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d11c      	bne.n	800dd2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dcf4:	7b7a      	ldrb	r2, [r7, #13]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dcfc:	7b7a      	ldrb	r2, [r7, #13]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	32ae      	adds	r2, #174	; 0xae
 800dd02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d010      	beq.n	800dd2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd0c:	7b7a      	ldrb	r2, [r7, #13]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	32ae      	adds	r2, #174	; 0xae
 800dd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	6839      	ldr	r1, [r7, #0]
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	4798      	blx	r3
 800dd1e:	4603      	mov	r3, r0
 800dd20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dd22:	e004      	b.n	800dd2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fc2d 	bl	800e586 <USBD_CtlError>
              break;
 800dd2c:	e000      	b.n	800dd30 <USBD_StdEPReq+0x1c8>
              break;
 800dd2e:	bf00      	nop
          }
          break;
 800dd30:	e0ab      	b.n	800de8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d002      	beq.n	800dd44 <USBD_StdEPReq+0x1dc>
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d032      	beq.n	800dda8 <USBD_StdEPReq+0x240>
 800dd42:	e097      	b.n	800de74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d007      	beq.n	800dd5a <USBD_StdEPReq+0x1f2>
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	2b80      	cmp	r3, #128	; 0x80
 800dd4e:	d004      	beq.n	800dd5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fc17 	bl	800e586 <USBD_CtlError>
                break;
 800dd58:	e091      	b.n	800de7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	da0b      	bge.n	800dd7a <USBD_StdEPReq+0x212>
 800dd62:	7bbb      	ldrb	r3, [r7, #14]
 800dd64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd68:	4613      	mov	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	3310      	adds	r3, #16
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	4413      	add	r3, r2
 800dd76:	3304      	adds	r3, #4
 800dd78:	e00b      	b.n	800dd92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
 800dd7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd80:	4613      	mov	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	4413      	add	r3, r2
 800dd90:	3304      	adds	r3, #4
 800dd92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2200      	movs	r2, #0
 800dd98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	4619      	mov	r1, r3
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fc61 	bl	800e668 <USBD_CtlSendData>
              break;
 800dda6:	e06a      	b.n	800de7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dda8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	da11      	bge.n	800ddd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
 800ddb2:	f003 020f 	and.w	r2, r3, #15
 800ddb6:	6879      	ldr	r1, [r7, #4]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	440b      	add	r3, r1
 800ddc2:	3324      	adds	r3, #36	; 0x24
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d117      	bne.n	800ddfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ddca:	6839      	ldr	r1, [r7, #0]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fbda 	bl	800e586 <USBD_CtlError>
                  break;
 800ddd2:	e054      	b.n	800de7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ddd4:	7bbb      	ldrb	r3, [r7, #14]
 800ddd6:	f003 020f 	and.w	r2, r3, #15
 800ddda:	6879      	ldr	r1, [r7, #4]
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	440b      	add	r3, r1
 800dde6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d104      	bne.n	800ddfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 fbc7 	bl	800e586 <USBD_CtlError>
                  break;
 800ddf8:	e041      	b.n	800de7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	da0b      	bge.n	800de1a <USBD_StdEPReq+0x2b2>
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de08:	4613      	mov	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	3310      	adds	r3, #16
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	4413      	add	r3, r2
 800de16:	3304      	adds	r3, #4
 800de18:	e00b      	b.n	800de32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de20:	4613      	mov	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4413      	add	r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4413      	add	r3, r2
 800de30:	3304      	adds	r3, #4
 800de32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de34:	7bbb      	ldrb	r3, [r7, #14]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <USBD_StdEPReq+0x2d8>
 800de3a:	7bbb      	ldrb	r3, [r7, #14]
 800de3c:	2b80      	cmp	r3, #128	; 0x80
 800de3e:	d103      	bne.n	800de48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
 800de46:	e00e      	b.n	800de66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	4619      	mov	r1, r3
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f003 ffcf 	bl	8011df0 <USBD_LL_IsStallEP>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2201      	movs	r2, #1
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	e002      	b.n	800de66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2200      	movs	r2, #0
 800de64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2202      	movs	r2, #2
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fbfb 	bl	800e668 <USBD_CtlSendData>
              break;
 800de72:	e004      	b.n	800de7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fb85 	bl	800e586 <USBD_CtlError>
              break;
 800de7c:	bf00      	nop
          }
          break;
 800de7e:	e004      	b.n	800de8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fb7f 	bl	800e586 <USBD_CtlError>
          break;
 800de88:	bf00      	nop
      }
      break;
 800de8a:	e005      	b.n	800de98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 fb79 	bl	800e586 <USBD_CtlError>
      break;
 800de94:	e000      	b.n	800de98 <USBD_StdEPReq+0x330>
      break;
 800de96:	bf00      	nop
  }

  return ret;
 800de98:	7bfb      	ldrb	r3, [r7, #15]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
	...

0800dea4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800deb6:	2300      	movs	r3, #0
 800deb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	0a1b      	lsrs	r3, r3, #8
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	3b01      	subs	r3, #1
 800dec4:	2b0e      	cmp	r3, #14
 800dec6:	f200 8152 	bhi.w	800e16e <USBD_GetDescriptor+0x2ca>
 800deca:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <USBD_GetDescriptor+0x2c>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800df41 	.word	0x0800df41
 800ded4:	0800df59 	.word	0x0800df59
 800ded8:	0800df99 	.word	0x0800df99
 800dedc:	0800e16f 	.word	0x0800e16f
 800dee0:	0800e16f 	.word	0x0800e16f
 800dee4:	0800e10f 	.word	0x0800e10f
 800dee8:	0800e13b 	.word	0x0800e13b
 800deec:	0800e16f 	.word	0x0800e16f
 800def0:	0800e16f 	.word	0x0800e16f
 800def4:	0800e16f 	.word	0x0800e16f
 800def8:	0800e16f 	.word	0x0800e16f
 800defc:	0800e16f 	.word	0x0800e16f
 800df00:	0800e16f 	.word	0x0800e16f
 800df04:	0800e16f 	.word	0x0800e16f
 800df08:	0800df0d 	.word	0x0800df0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00b      	beq.n	800df30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df1e:	69db      	ldr	r3, [r3, #28]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	7c12      	ldrb	r2, [r2, #16]
 800df24:	f107 0108 	add.w	r1, r7, #8
 800df28:	4610      	mov	r0, r2
 800df2a:	4798      	blx	r3
 800df2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df2e:	e126      	b.n	800e17e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df30:	6839      	ldr	r1, [r7, #0]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fb27 	bl	800e586 <USBD_CtlError>
        err++;
 800df38:	7afb      	ldrb	r3, [r7, #11]
 800df3a:	3301      	adds	r3, #1
 800df3c:	72fb      	strb	r3, [r7, #11]
      break;
 800df3e:	e11e      	b.n	800e17e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	7c12      	ldrb	r2, [r2, #16]
 800df4c:	f107 0108 	add.w	r1, r7, #8
 800df50:	4610      	mov	r0, r2
 800df52:	4798      	blx	r3
 800df54:	60f8      	str	r0, [r7, #12]
      break;
 800df56:	e112      	b.n	800e17e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	7c1b      	ldrb	r3, [r3, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10d      	bne.n	800df7c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df68:	f107 0208 	add.w	r2, r7, #8
 800df6c:	4610      	mov	r0, r2
 800df6e:	4798      	blx	r3
 800df70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3301      	adds	r3, #1
 800df76:	2202      	movs	r2, #2
 800df78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df7a:	e100      	b.n	800e17e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df84:	f107 0208 	add.w	r2, r7, #8
 800df88:	4610      	mov	r0, r2
 800df8a:	4798      	blx	r3
 800df8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3301      	adds	r3, #1
 800df92:	2202      	movs	r2, #2
 800df94:	701a      	strb	r2, [r3, #0]
      break;
 800df96:	e0f2      	b.n	800e17e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	885b      	ldrh	r3, [r3, #2]
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b05      	cmp	r3, #5
 800dfa0:	f200 80ac 	bhi.w	800e0fc <USBD_GetDescriptor+0x258>
 800dfa4:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <USBD_GetDescriptor+0x108>)
 800dfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfaa:	bf00      	nop
 800dfac:	0800dfc5 	.word	0x0800dfc5
 800dfb0:	0800dff9 	.word	0x0800dff9
 800dfb4:	0800e02d 	.word	0x0800e02d
 800dfb8:	0800e061 	.word	0x0800e061
 800dfbc:	0800e095 	.word	0x0800e095
 800dfc0:	0800e0c9 	.word	0x0800e0c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00b      	beq.n	800dfe8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	7c12      	ldrb	r2, [r2, #16]
 800dfdc:	f107 0108 	add.w	r1, r7, #8
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	4798      	blx	r3
 800dfe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfe6:	e091      	b.n	800e10c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfe8:	6839      	ldr	r1, [r7, #0]
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 facb 	bl	800e586 <USBD_CtlError>
            err++;
 800dff0:	7afb      	ldrb	r3, [r7, #11]
 800dff2:	3301      	adds	r3, #1
 800dff4:	72fb      	strb	r3, [r7, #11]
          break;
 800dff6:	e089      	b.n	800e10c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00b      	beq.n	800e01c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	7c12      	ldrb	r2, [r2, #16]
 800e010:	f107 0108 	add.w	r1, r7, #8
 800e014:	4610      	mov	r0, r2
 800e016:	4798      	blx	r3
 800e018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e01a:	e077      	b.n	800e10c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e01c:	6839      	ldr	r1, [r7, #0]
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fab1 	bl	800e586 <USBD_CtlError>
            err++;
 800e024:	7afb      	ldrb	r3, [r7, #11]
 800e026:	3301      	adds	r3, #1
 800e028:	72fb      	strb	r3, [r7, #11]
          break;
 800e02a:	e06f      	b.n	800e10c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00b      	beq.n	800e050 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	7c12      	ldrb	r2, [r2, #16]
 800e044:	f107 0108 	add.w	r1, r7, #8
 800e048:	4610      	mov	r0, r2
 800e04a:	4798      	blx	r3
 800e04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e04e:	e05d      	b.n	800e10c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fa97 	bl	800e586 <USBD_CtlError>
            err++;
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	3301      	adds	r3, #1
 800e05c:	72fb      	strb	r3, [r7, #11]
          break;
 800e05e:	e055      	b.n	800e10c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00b      	beq.n	800e084 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	7c12      	ldrb	r2, [r2, #16]
 800e078:	f107 0108 	add.w	r1, r7, #8
 800e07c:	4610      	mov	r0, r2
 800e07e:	4798      	blx	r3
 800e080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e082:	e043      	b.n	800e10c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fa7d 	bl	800e586 <USBD_CtlError>
            err++;
 800e08c:	7afb      	ldrb	r3, [r7, #11]
 800e08e:	3301      	adds	r3, #1
 800e090:	72fb      	strb	r3, [r7, #11]
          break;
 800e092:	e03b      	b.n	800e10c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00b      	beq.n	800e0b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0a6:	695b      	ldr	r3, [r3, #20]
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	7c12      	ldrb	r2, [r2, #16]
 800e0ac:	f107 0108 	add.w	r1, r7, #8
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	4798      	blx	r3
 800e0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0b6:	e029      	b.n	800e10c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fa63 	bl	800e586 <USBD_CtlError>
            err++;
 800e0c0:	7afb      	ldrb	r3, [r7, #11]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e0c6:	e021      	b.n	800e10c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00b      	beq.n	800e0ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	7c12      	ldrb	r2, [r2, #16]
 800e0e0:	f107 0108 	add.w	r1, r7, #8
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	4798      	blx	r3
 800e0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ea:	e00f      	b.n	800e10c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0ec:	6839      	ldr	r1, [r7, #0]
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fa49 	bl	800e586 <USBD_CtlError>
            err++;
 800e0f4:	7afb      	ldrb	r3, [r7, #11]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0fa:	e007      	b.n	800e10c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fa41 	bl	800e586 <USBD_CtlError>
          err++;
 800e104:	7afb      	ldrb	r3, [r7, #11]
 800e106:	3301      	adds	r3, #1
 800e108:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e10a:	bf00      	nop
      }
      break;
 800e10c:	e037      	b.n	800e17e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	7c1b      	ldrb	r3, [r3, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11e:	f107 0208 	add.w	r2, r7, #8
 800e122:	4610      	mov	r0, r2
 800e124:	4798      	blx	r3
 800e126:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e128:	e029      	b.n	800e17e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fa2a 	bl	800e586 <USBD_CtlError>
        err++;
 800e132:	7afb      	ldrb	r3, [r7, #11]
 800e134:	3301      	adds	r3, #1
 800e136:	72fb      	strb	r3, [r7, #11]
      break;
 800e138:	e021      	b.n	800e17e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	7c1b      	ldrb	r3, [r3, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10d      	bne.n	800e15e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14a:	f107 0208 	add.w	r2, r7, #8
 800e14e:	4610      	mov	r0, r2
 800e150:	4798      	blx	r3
 800e152:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	3301      	adds	r3, #1
 800e158:	2207      	movs	r2, #7
 800e15a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e15c:	e00f      	b.n	800e17e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e15e:	6839      	ldr	r1, [r7, #0]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 fa10 	bl	800e586 <USBD_CtlError>
        err++;
 800e166:	7afb      	ldrb	r3, [r7, #11]
 800e168:	3301      	adds	r3, #1
 800e16a:	72fb      	strb	r3, [r7, #11]
      break;
 800e16c:	e007      	b.n	800e17e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 fa08 	bl	800e586 <USBD_CtlError>
      err++;
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	3301      	adds	r3, #1
 800e17a:	72fb      	strb	r3, [r7, #11]
      break;
 800e17c:	bf00      	nop
  }

  if (err != 0U)
 800e17e:	7afb      	ldrb	r3, [r7, #11]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d11e      	bne.n	800e1c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	88db      	ldrh	r3, [r3, #6]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d016      	beq.n	800e1ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e18c:	893b      	ldrh	r3, [r7, #8]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00e      	beq.n	800e1b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	88da      	ldrh	r2, [r3, #6]
 800e196:	893b      	ldrh	r3, [r7, #8]
 800e198:	4293      	cmp	r3, r2
 800e19a:	bf28      	it	cs
 800e19c:	4613      	movcs	r3, r2
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e1a2:	893b      	ldrh	r3, [r7, #8]
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	68f9      	ldr	r1, [r7, #12]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fa5d 	bl	800e668 <USBD_CtlSendData>
 800e1ae:	e009      	b.n	800e1c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f9e7 	bl	800e586 <USBD_CtlError>
 800e1b8:	e004      	b.n	800e1c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 faae 	bl	800e71c <USBD_CtlSendStatus>
 800e1c0:	e000      	b.n	800e1c4 <USBD_GetDescriptor+0x320>
    return;
 800e1c2:	bf00      	nop
  }
}
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop

0800e1cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	889b      	ldrh	r3, [r3, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d131      	bne.n	800e242 <USBD_SetAddress+0x76>
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	88db      	ldrh	r3, [r3, #6]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d12d      	bne.n	800e242 <USBD_SetAddress+0x76>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	885b      	ldrh	r3, [r3, #2]
 800e1ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e1ec:	d829      	bhi.n	800e242 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	885b      	ldrh	r3, [r3, #2]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b03      	cmp	r3, #3
 800e204:	d104      	bne.n	800e210 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 f9bc 	bl	800e586 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e20e:	e01d      	b.n	800e24c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	7bfa      	ldrb	r2, [r7, #15]
 800e214:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e218:	7bfb      	ldrb	r3, [r7, #15]
 800e21a:	4619      	mov	r1, r3
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f003 fe13 	bl	8011e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fa7a 	bl	800e71c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e228:	7bfb      	ldrb	r3, [r7, #15]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d004      	beq.n	800e238 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2202      	movs	r2, #2
 800e232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e236:	e009      	b.n	800e24c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e240:	e004      	b.n	800e24c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f99e 	bl	800e586 <USBD_CtlError>
  }
}
 800e24a:	bf00      	nop
 800e24c:	bf00      	nop
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	885b      	ldrh	r3, [r3, #2]
 800e266:	b2da      	uxtb	r2, r3
 800e268:	4b4e      	ldr	r3, [pc, #312]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e26a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e26c:	4b4d      	ldr	r3, [pc, #308]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d905      	bls.n	800e280 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f985 	bl	800e586 <USBD_CtlError>
    return USBD_FAIL;
 800e27c:	2303      	movs	r3, #3
 800e27e:	e08c      	b.n	800e39a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e286:	b2db      	uxtb	r3, r3
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d002      	beq.n	800e292 <USBD_SetConfig+0x3e>
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d029      	beq.n	800e2e4 <USBD_SetConfig+0x90>
 800e290:	e075      	b.n	800e37e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e292:	4b44      	ldr	r3, [pc, #272]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d020      	beq.n	800e2dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e29a:	4b42      	ldr	r3, [pc, #264]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2a4:	4b3f      	ldr	r3, [pc, #252]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fe ffb7 	bl	800d21e <USBD_SetClassConfig>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d008      	beq.n	800e2cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f962 	bl	800e586 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e2ca:	e065      	b.n	800e398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fa25 	bl	800e71c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2203      	movs	r2, #3
 800e2d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e2da:	e05d      	b.n	800e398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fa1d 	bl	800e71c <USBD_CtlSendStatus>
      break;
 800e2e2:	e059      	b.n	800e398 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e2e4:	4b2f      	ldr	r3, [pc, #188]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d112      	bne.n	800e312 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2202      	movs	r2, #2
 800e2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e2f4:	4b2b      	ldr	r3, [pc, #172]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2fe:	4b29      	ldr	r3, [pc, #164]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7fe ffa6 	bl	800d256 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa06 	bl	800e71c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e310:	e042      	b.n	800e398 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e312:	4b24      	ldr	r3, [pc, #144]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	461a      	mov	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d02a      	beq.n	800e376 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	b2db      	uxtb	r3, r3
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7fe ff94 	bl	800d256 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e32e:	4b1d      	ldr	r3, [pc, #116]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	461a      	mov	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e338:	4b1a      	ldr	r3, [pc, #104]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7fe ff6d 	bl	800d21e <USBD_SetClassConfig>
 800e344:	4603      	mov	r3, r0
 800e346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00f      	beq.n	800e36e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 f918 	bl	800e586 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7fe ff79 	bl	800d256 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2202      	movs	r2, #2
 800e368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e36c:	e014      	b.n	800e398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f9d4 	bl	800e71c <USBD_CtlSendStatus>
      break;
 800e374:	e010      	b.n	800e398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 f9d0 	bl	800e71c <USBD_CtlSendStatus>
      break;
 800e37c:	e00c      	b.n	800e398 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f900 	bl	800e586 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e386:	4b07      	ldr	r3, [pc, #28]	; (800e3a4 <USBD_SetConfig+0x150>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7fe ff62 	bl	800d256 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e392:	2303      	movs	r3, #3
 800e394:	73fb      	strb	r3, [r7, #15]
      break;
 800e396:	bf00      	nop
  }

  return ret;
 800e398:	7bfb      	ldrb	r3, [r7, #15]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	2000d134 	.word	0x2000d134

0800e3a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	88db      	ldrh	r3, [r3, #6]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d004      	beq.n	800e3c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f8e2 	bl	800e586 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e3c2:	e023      	b.n	800e40c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	dc02      	bgt.n	800e3d6 <USBD_GetConfig+0x2e>
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	dc03      	bgt.n	800e3dc <USBD_GetConfig+0x34>
 800e3d4:	e015      	b.n	800e402 <USBD_GetConfig+0x5a>
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	d00b      	beq.n	800e3f2 <USBD_GetConfig+0x4a>
 800e3da:	e012      	b.n	800e402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	3308      	adds	r3, #8
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f93c 	bl	800e668 <USBD_CtlSendData>
        break;
 800e3f0:	e00c      	b.n	800e40c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f934 	bl	800e668 <USBD_CtlSendData>
        break;
 800e400:	e004      	b.n	800e40c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f8be 	bl	800e586 <USBD_CtlError>
        break;
 800e40a:	bf00      	nop
}
 800e40c:	bf00      	nop
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e424:	b2db      	uxtb	r3, r3
 800e426:	3b01      	subs	r3, #1
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d81e      	bhi.n	800e46a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	88db      	ldrh	r3, [r3, #6]
 800e430:	2b02      	cmp	r3, #2
 800e432:	d004      	beq.n	800e43e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f8a5 	bl	800e586 <USBD_CtlError>
        break;
 800e43c:	e01a      	b.n	800e474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2201      	movs	r2, #1
 800e442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d005      	beq.n	800e45a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	f043 0202 	orr.w	r2, r3, #2
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	330c      	adds	r3, #12
 800e45e:	2202      	movs	r2, #2
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f900 	bl	800e668 <USBD_CtlSendData>
      break;
 800e468:	e004      	b.n	800e474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f88a 	bl	800e586 <USBD_CtlError>
      break;
 800e472:	bf00      	nop
  }
}
 800e474:	bf00      	nop
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	885b      	ldrh	r3, [r3, #2]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d107      	bne.n	800e49e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2201      	movs	r2, #1
 800e492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f940 	bl	800e71c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e49c:	e013      	b.n	800e4c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	885b      	ldrh	r3, [r3, #2]
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	d10b      	bne.n	800e4be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	889b      	ldrh	r3, [r3, #4]
 800e4aa:	0a1b      	lsrs	r3, r3, #8
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 f930 	bl	800e71c <USBD_CtlSendStatus>
}
 800e4bc:	e003      	b.n	800e4c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e4be:	6839      	ldr	r1, [r7, #0]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f860 	bl	800e586 <USBD_CtlError>
}
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b082      	sub	sp, #8
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d80b      	bhi.n	800e4fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	885b      	ldrh	r3, [r3, #2]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d10c      	bne.n	800e508 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f910 	bl	800e71c <USBD_CtlSendStatus>
      }
      break;
 800e4fc:	e004      	b.n	800e508 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e4fe:	6839      	ldr	r1, [r7, #0]
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 f840 	bl	800e586 <USBD_CtlError>
      break;
 800e506:	e000      	b.n	800e50a <USBD_ClrFeature+0x3c>
      break;
 800e508:	bf00      	nop
  }
}
 800e50a:	bf00      	nop
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b084      	sub	sp, #16
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	781a      	ldrb	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	3301      	adds	r3, #1
 800e52c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	781a      	ldrb	r2, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3301      	adds	r3, #1
 800e53a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7ff fa17 	bl	800d970 <SWAPBYTE>
 800e542:	4603      	mov	r3, r0
 800e544:	461a      	mov	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3301      	adds	r3, #1
 800e54e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3301      	adds	r3, #1
 800e554:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f7ff fa0a 	bl	800d970 <SWAPBYTE>
 800e55c:	4603      	mov	r3, r0
 800e55e:	461a      	mov	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3301      	adds	r3, #1
 800e568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3301      	adds	r3, #1
 800e56e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f7ff f9fd 	bl	800d970 <SWAPBYTE>
 800e576:	4603      	mov	r3, r0
 800e578:	461a      	mov	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	80da      	strh	r2, [r3, #6]
}
 800e57e:	bf00      	nop
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e590:	2180      	movs	r1, #128	; 0x80
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f003 fbc0 	bl	8011d18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e598:	2100      	movs	r1, #0
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f003 fbbc 	bl	8011d18 <USBD_LL_StallEP>
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d036      	beq.n	800e62c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e5c2:	6938      	ldr	r0, [r7, #16]
 800e5c4:	f000 f836 	bl	800e634 <USBD_GetLen>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	4413      	add	r3, r2
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	7812      	ldrb	r2, [r2, #0]
 800e5e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	2203      	movs	r2, #3
 800e5f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e5f8:	e013      	b.n	800e622 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e5fa:	7dfb      	ldrb	r3, [r7, #23]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	4413      	add	r3, r2
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	7812      	ldrb	r2, [r2, #0]
 800e604:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	3301      	adds	r3, #1
 800e60a:	613b      	str	r3, [r7, #16]
    idx++;
 800e60c:	7dfb      	ldrb	r3, [r7, #23]
 800e60e:	3301      	adds	r3, #1
 800e610:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	4413      	add	r3, r2
 800e618:	2200      	movs	r2, #0
 800e61a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	3301      	adds	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1e7      	bne.n	800e5fa <USBD_GetString+0x52>
 800e62a:	e000      	b.n	800e62e <USBD_GetString+0x86>
    return;
 800e62c:	bf00      	nop
  }
}
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e63c:	2300      	movs	r3, #0
 800e63e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e644:	e005      	b.n	800e652 <USBD_GetLen+0x1e>
  {
    len++;
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	3301      	adds	r3, #1
 800e64a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	3301      	adds	r3, #1
 800e650:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f5      	bne.n	800e646 <USBD_GetLen+0x12>
  }

  return len;
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2202      	movs	r2, #2
 800e678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	2100      	movs	r1, #0
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f003 fc10 	bl	8011eb4 <USBD_LL_Transmit>

  return USBD_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f003 fbff 	bl	8011eb4 <USBD_LL_Transmit>

  return USBD_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2203      	movs	r2, #3
 800e6d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f003 fc1a 	bl	8011f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b084      	sub	sp, #16
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	2100      	movs	r1, #0
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f003 fc09 	bl	8011f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2204      	movs	r2, #4
 800e728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e72c:	2300      	movs	r3, #0
 800e72e:	2200      	movs	r2, #0
 800e730:	2100      	movs	r1, #0
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f003 fbbe 	bl	8011eb4 <USBD_LL_Transmit>

  return USBD_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2205      	movs	r2, #5
 800e74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e752:	2300      	movs	r3, #0
 800e754:	2200      	movs	r2, #0
 800e756:	2100      	movs	r1, #0
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f003 fbe3 	bl	8011f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	4a08      	ldr	r2, [pc, #32]	; (800e798 <disk_status+0x30>)
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	79fa      	ldrb	r2, [r7, #7]
 800e780:	4905      	ldr	r1, [pc, #20]	; (800e798 <disk_status+0x30>)
 800e782:	440a      	add	r2, r1
 800e784:	7a12      	ldrb	r2, [r2, #8]
 800e786:	4610      	mov	r0, r2
 800e788:	4798      	blx	r3
 800e78a:	4603      	mov	r3, r0
 800e78c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	2000d160 	.word	0x2000d160

0800e79c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	4a0d      	ldr	r2, [pc, #52]	; (800e7e4 <disk_initialize+0x48>)
 800e7ae:	5cd3      	ldrb	r3, [r2, r3]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d111      	bne.n	800e7d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	4a0b      	ldr	r2, [pc, #44]	; (800e7e4 <disk_initialize+0x48>)
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	4a09      	ldr	r2, [pc, #36]	; (800e7e4 <disk_initialize+0x48>)
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4413      	add	r3, r2
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	79fa      	ldrb	r2, [r7, #7]
 800e7ca:	4906      	ldr	r1, [pc, #24]	; (800e7e4 <disk_initialize+0x48>)
 800e7cc:	440a      	add	r2, r1
 800e7ce:	7a12      	ldrb	r2, [r2, #8]
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	2000d160 	.word	0x2000d160

0800e7e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e7e8:	b590      	push	{r4, r7, lr}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60b9      	str	r1, [r7, #8]
 800e7f0:	607a      	str	r2, [r7, #4]
 800e7f2:	603b      	str	r3, [r7, #0]
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
 800e7fa:	4a0a      	ldr	r2, [pc, #40]	; (800e824 <disk_read+0x3c>)
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	689c      	ldr	r4, [r3, #8]
 800e804:	7bfb      	ldrb	r3, [r7, #15]
 800e806:	4a07      	ldr	r2, [pc, #28]	; (800e824 <disk_read+0x3c>)
 800e808:	4413      	add	r3, r2
 800e80a:	7a18      	ldrb	r0, [r3, #8]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	68b9      	ldr	r1, [r7, #8]
 800e812:	47a0      	blx	r4
 800e814:	4603      	mov	r3, r0
 800e816:	75fb      	strb	r3, [r7, #23]
  return res;
 800e818:	7dfb      	ldrb	r3, [r7, #23]
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	371c      	adds	r7, #28
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd90      	pop	{r4, r7, pc}
 800e822:	bf00      	nop
 800e824:	2000d160 	.word	0x2000d160

0800e828 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e828:	b590      	push	{r4, r7, lr}
 800e82a:	b087      	sub	sp, #28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60b9      	str	r1, [r7, #8]
 800e830:	607a      	str	r2, [r7, #4]
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	4603      	mov	r3, r0
 800e836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e838:	7bfb      	ldrb	r3, [r7, #15]
 800e83a:	4a0a      	ldr	r2, [pc, #40]	; (800e864 <disk_write+0x3c>)
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4413      	add	r3, r2
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	68dc      	ldr	r4, [r3, #12]
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	4a07      	ldr	r2, [pc, #28]	; (800e864 <disk_write+0x3c>)
 800e848:	4413      	add	r3, r2
 800e84a:	7a18      	ldrb	r0, [r3, #8]
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	68b9      	ldr	r1, [r7, #8]
 800e852:	47a0      	blx	r4
 800e854:	4603      	mov	r3, r0
 800e856:	75fb      	strb	r3, [r7, #23]
  return res;
 800e858:	7dfb      	ldrb	r3, [r7, #23]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	371c      	adds	r7, #28
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd90      	pop	{r4, r7, pc}
 800e862:	bf00      	nop
 800e864:	2000d160 	.word	0x2000d160

0800e868 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	4603      	mov	r3, r0
 800e870:	603a      	str	r2, [r7, #0]
 800e872:	71fb      	strb	r3, [r7, #7]
 800e874:	460b      	mov	r3, r1
 800e876:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	4a09      	ldr	r2, [pc, #36]	; (800e8a0 <disk_ioctl+0x38>)
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	4413      	add	r3, r2
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	79fa      	ldrb	r2, [r7, #7]
 800e886:	4906      	ldr	r1, [pc, #24]	; (800e8a0 <disk_ioctl+0x38>)
 800e888:	440a      	add	r2, r1
 800e88a:	7a10      	ldrb	r0, [r2, #8]
 800e88c:	79b9      	ldrb	r1, [r7, #6]
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	4798      	blx	r3
 800e892:	4603      	mov	r3, r0
 800e894:	73fb      	strb	r3, [r7, #15]
  return res;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	2000d160 	.word	0x2000d160

0800e8a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e8b4:	89fb      	ldrh	r3, [r7, #14]
 800e8b6:	021b      	lsls	r3, r3, #8
 800e8b8:	b21a      	sxth	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	b21b      	sxth	r3, r3
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	b21b      	sxth	r3, r3
 800e8c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e8c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3714      	adds	r7, #20
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3303      	adds	r3, #3
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	021b      	lsls	r3, r3, #8
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	3202      	adds	r2, #2
 800e8ec:	7812      	ldrb	r2, [r2, #0]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	021b      	lsls	r3, r3, #8
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	3201      	adds	r2, #1
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	021b      	lsls	r3, r3, #8
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	7812      	ldrb	r2, [r2, #0]
 800e908:	4313      	orrs	r3, r2
 800e90a:	60fb      	str	r3, [r7, #12]
	return rv;
 800e90c:	68fb      	ldr	r3, [r7, #12]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e91a:	b480      	push	{r7}
 800e91c:	b083      	sub	sp, #12
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	460b      	mov	r3, r1
 800e924:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	1c5a      	adds	r2, r3, #1
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	887a      	ldrh	r2, [r7, #2]
 800e92e:	b2d2      	uxtb	r2, r2
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	887b      	ldrh	r3, [r7, #2]
 800e934:	0a1b      	lsrs	r3, r3, #8
 800e936:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	607a      	str	r2, [r7, #4]
 800e93e:	887a      	ldrh	r2, [r7, #2]
 800e940:	b2d2      	uxtb	r2, r2
 800e942:	701a      	strb	r2, [r3, #0]
}
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	607a      	str	r2, [r7, #4]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	b2d2      	uxtb	r2, r2
 800e964:	701a      	strb	r2, [r3, #0]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	0a1b      	lsrs	r3, r3, #8
 800e96a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	b2d2      	uxtb	r2, r2
 800e976:	701a      	strb	r2, [r3, #0]
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	0a1b      	lsrs	r3, r3, #8
 800e97c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	1c5a      	adds	r2, r3, #1
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	b2d2      	uxtb	r2, r2
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	0a1b      	lsrs	r3, r3, #8
 800e98e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	607a      	str	r2, [r7, #4]
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	b2d2      	uxtb	r2, r2
 800e99a:	701a      	strb	r2, [r3, #0]
}
 800e99c:	bf00      	nop
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e9a8:	b480      	push	{r7}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00d      	beq.n	800e9de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	1c53      	adds	r3, r2, #1
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	1c59      	adds	r1, r3, #1
 800e9cc:	6179      	str	r1, [r7, #20]
 800e9ce:	7812      	ldrb	r2, [r2, #0]
 800e9d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	607b      	str	r3, [r7, #4]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1f1      	bne.n	800e9c2 <mem_cpy+0x1a>
	}
}
 800e9de:	bf00      	nop
 800e9e0:	371c      	adds	r7, #28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e9ea:	b480      	push	{r7}
 800e9ec:	b087      	sub	sp, #28
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	60f8      	str	r0, [r7, #12]
 800e9f2:	60b9      	str	r1, [r7, #8]
 800e9f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	617a      	str	r2, [r7, #20]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	b2d2      	uxtb	r2, r2
 800ea04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	607b      	str	r3, [r7, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f3      	bne.n	800e9fa <mem_set+0x10>
}
 800ea12:	bf00      	nop
 800ea14:	bf00      	nop
 800ea16:	371c      	adds	r7, #28
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ea20:	b480      	push	{r7}
 800ea22:	b089      	sub	sp, #36	; 0x24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	61fb      	str	r3, [r7, #28]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	61fa      	str	r2, [r7, #28]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	4619      	mov	r1, r3
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	61ba      	str	r2, [r7, #24]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	1acb      	subs	r3, r1, r3
 800ea4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	3b01      	subs	r3, #1
 800ea52:	607b      	str	r3, [r7, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <mem_cmp+0x40>
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d0eb      	beq.n	800ea38 <mem_cmp+0x18>

	return r;
 800ea60:	697b      	ldr	r3, [r7, #20]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3724      	adds	r7, #36	; 0x24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ea6e:	b480      	push	{r7}
 800ea70:	b083      	sub	sp, #12
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ea78:	e002      	b.n	800ea80 <chk_chr+0x12>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	607b      	str	r3, [r7, #4]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d005      	beq.n	800ea94 <chk_chr+0x26>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d1f2      	bne.n	800ea7a <chk_chr+0xc>
	return *str;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	781b      	ldrb	r3, [r3, #0]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eaae:	2300      	movs	r3, #0
 800eab0:	60bb      	str	r3, [r7, #8]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	60fb      	str	r3, [r7, #12]
 800eab6:	e029      	b.n	800eb0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eab8:	4a27      	ldr	r2, [pc, #156]	; (800eb58 <chk_lock+0xb4>)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	011b      	lsls	r3, r3, #4
 800eabe:	4413      	add	r3, r2
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d01d      	beq.n	800eb02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eac6:	4a24      	ldr	r2, [pc, #144]	; (800eb58 <chk_lock+0xb4>)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	011b      	lsls	r3, r3, #4
 800eacc:	4413      	add	r3, r2
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d116      	bne.n	800eb06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ead8:	4a1f      	ldr	r2, [pc, #124]	; (800eb58 <chk_lock+0xb4>)
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	011b      	lsls	r3, r3, #4
 800eade:	4413      	add	r3, r2
 800eae0:	3304      	adds	r3, #4
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d10c      	bne.n	800eb06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eaec:	4a1a      	ldr	r2, [pc, #104]	; (800eb58 <chk_lock+0xb4>)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	011b      	lsls	r3, r3, #4
 800eaf2:	4413      	add	r3, r2
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d102      	bne.n	800eb06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb00:	e007      	b.n	800eb12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eb02:	2301      	movs	r3, #1
 800eb04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	60fb      	str	r3, [r7, #12]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d9d2      	bls.n	800eab8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d109      	bne.n	800eb2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <chk_lock+0x80>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b02      	cmp	r3, #2
 800eb22:	d101      	bne.n	800eb28 <chk_lock+0x84>
 800eb24:	2300      	movs	r3, #0
 800eb26:	e010      	b.n	800eb4a <chk_lock+0xa6>
 800eb28:	2312      	movs	r3, #18
 800eb2a:	e00e      	b.n	800eb4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d108      	bne.n	800eb44 <chk_lock+0xa0>
 800eb32:	4a09      	ldr	r2, [pc, #36]	; (800eb58 <chk_lock+0xb4>)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	011b      	lsls	r3, r3, #4
 800eb38:	4413      	add	r3, r2
 800eb3a:	330c      	adds	r3, #12
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb42:	d101      	bne.n	800eb48 <chk_lock+0xa4>
 800eb44:	2310      	movs	r3, #16
 800eb46:	e000      	b.n	800eb4a <chk_lock+0xa6>
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	2000d140 	.word	0x2000d140

0800eb5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb62:	2300      	movs	r3, #0
 800eb64:	607b      	str	r3, [r7, #4]
 800eb66:	e002      	b.n	800eb6e <enq_lock+0x12>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	607b      	str	r3, [r7, #4]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d806      	bhi.n	800eb82 <enq_lock+0x26>
 800eb74:	4a09      	ldr	r2, [pc, #36]	; (800eb9c <enq_lock+0x40>)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	011b      	lsls	r3, r3, #4
 800eb7a:	4413      	add	r3, r2
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1f2      	bne.n	800eb68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	bf14      	ite	ne
 800eb88:	2301      	movne	r3, #1
 800eb8a:	2300      	moveq	r3, #0
 800eb8c:	b2db      	uxtb	r3, r3
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	2000d140 	.word	0x2000d140

0800eba0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebaa:	2300      	movs	r3, #0
 800ebac:	60fb      	str	r3, [r7, #12]
 800ebae:	e01f      	b.n	800ebf0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ebb0:	4a41      	ldr	r2, [pc, #260]	; (800ecb8 <inc_lock+0x118>)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	4413      	add	r3, r2
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d113      	bne.n	800ebea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ebc2:	4a3d      	ldr	r2, [pc, #244]	; (800ecb8 <inc_lock+0x118>)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	4413      	add	r3, r2
 800ebca:	3304      	adds	r3, #4
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d109      	bne.n	800ebea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ebd6:	4a38      	ldr	r2, [pc, #224]	; (800ecb8 <inc_lock+0x118>)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	011b      	lsls	r3, r3, #4
 800ebdc:	4413      	add	r3, r2
 800ebde:	3308      	adds	r3, #8
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d006      	beq.n	800ebf8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3301      	adds	r3, #1
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d9dc      	bls.n	800ebb0 <inc_lock+0x10>
 800ebf6:	e000      	b.n	800ebfa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ebf8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d132      	bne.n	800ec66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	e002      	b.n	800ec0c <inc_lock+0x6c>
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	60fb      	str	r3, [r7, #12]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d806      	bhi.n	800ec20 <inc_lock+0x80>
 800ec12:	4a29      	ldr	r2, [pc, #164]	; (800ecb8 <inc_lock+0x118>)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	4413      	add	r3, r2
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1f2      	bne.n	800ec06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d101      	bne.n	800ec2a <inc_lock+0x8a>
 800ec26:	2300      	movs	r3, #0
 800ec28:	e040      	b.n	800ecac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4922      	ldr	r1, [pc, #136]	; (800ecb8 <inc_lock+0x118>)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	011b      	lsls	r3, r3, #4
 800ec34:	440b      	add	r3, r1
 800ec36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	689a      	ldr	r2, [r3, #8]
 800ec3c:	491e      	ldr	r1, [pc, #120]	; (800ecb8 <inc_lock+0x118>)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	011b      	lsls	r3, r3, #4
 800ec42:	440b      	add	r3, r1
 800ec44:	3304      	adds	r3, #4
 800ec46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	695a      	ldr	r2, [r3, #20]
 800ec4c:	491a      	ldr	r1, [pc, #104]	; (800ecb8 <inc_lock+0x118>)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	011b      	lsls	r3, r3, #4
 800ec52:	440b      	add	r3, r1
 800ec54:	3308      	adds	r3, #8
 800ec56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ec58:	4a17      	ldr	r2, [pc, #92]	; (800ecb8 <inc_lock+0x118>)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	011b      	lsls	r3, r3, #4
 800ec5e:	4413      	add	r3, r2
 800ec60:	330c      	adds	r3, #12
 800ec62:	2200      	movs	r2, #0
 800ec64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d009      	beq.n	800ec80 <inc_lock+0xe0>
 800ec6c:	4a12      	ldr	r2, [pc, #72]	; (800ecb8 <inc_lock+0x118>)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	011b      	lsls	r3, r3, #4
 800ec72:	4413      	add	r3, r2
 800ec74:	330c      	adds	r3, #12
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <inc_lock+0xe0>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e015      	b.n	800ecac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d108      	bne.n	800ec98 <inc_lock+0xf8>
 800ec86:	4a0c      	ldr	r2, [pc, #48]	; (800ecb8 <inc_lock+0x118>)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	4413      	add	r3, r2
 800ec8e:	330c      	adds	r3, #12
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	3301      	adds	r3, #1
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	e001      	b.n	800ec9c <inc_lock+0xfc>
 800ec98:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec9c:	4906      	ldr	r1, [pc, #24]	; (800ecb8 <inc_lock+0x118>)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	440b      	add	r3, r1
 800eca4:	330c      	adds	r3, #12
 800eca6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3301      	adds	r3, #1
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	2000d140 	.word	0x2000d140

0800ecbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	607b      	str	r3, [r7, #4]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d825      	bhi.n	800ed1c <dec_lock+0x60>
		n = Files[i].ctr;
 800ecd0:	4a17      	ldr	r2, [pc, #92]	; (800ed30 <dec_lock+0x74>)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	011b      	lsls	r3, r3, #4
 800ecd6:	4413      	add	r3, r2
 800ecd8:	330c      	adds	r3, #12
 800ecda:	881b      	ldrh	r3, [r3, #0]
 800ecdc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ecde:	89fb      	ldrh	r3, [r7, #14]
 800ece0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ece4:	d101      	bne.n	800ecea <dec_lock+0x2e>
 800ece6:	2300      	movs	r3, #0
 800ece8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ecea:	89fb      	ldrh	r3, [r7, #14]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <dec_lock+0x3a>
 800ecf0:	89fb      	ldrh	r3, [r7, #14]
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ecf6:	4a0e      	ldr	r2, [pc, #56]	; (800ed30 <dec_lock+0x74>)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	011b      	lsls	r3, r3, #4
 800ecfc:	4413      	add	r3, r2
 800ecfe:	330c      	adds	r3, #12
 800ed00:	89fa      	ldrh	r2, [r7, #14]
 800ed02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed04:	89fb      	ldrh	r3, [r7, #14]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <dec_lock+0x5a>
 800ed0a:	4a09      	ldr	r2, [pc, #36]	; (800ed30 <dec_lock+0x74>)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	011b      	lsls	r3, r3, #4
 800ed10:	4413      	add	r3, r2
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	737b      	strb	r3, [r7, #13]
 800ed1a:	e001      	b.n	800ed20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ed20:	7b7b      	ldrb	r3, [r7, #13]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3714      	adds	r7, #20
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop
 800ed30:	2000d140 	.word	0x2000d140

0800ed34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	e010      	b.n	800ed64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed42:	4a0d      	ldr	r2, [pc, #52]	; (800ed78 <clear_lock+0x44>)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	011b      	lsls	r3, r3, #4
 800ed48:	4413      	add	r3, r2
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d105      	bne.n	800ed5e <clear_lock+0x2a>
 800ed52:	4a09      	ldr	r2, [pc, #36]	; (800ed78 <clear_lock+0x44>)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	011b      	lsls	r3, r3, #4
 800ed58:	4413      	add	r3, r2
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3301      	adds	r3, #1
 800ed62:	60fb      	str	r3, [r7, #12]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d9eb      	bls.n	800ed42 <clear_lock+0xe>
	}
}
 800ed6a:	bf00      	nop
 800ed6c:	bf00      	nop
 800ed6e:	3714      	adds	r7, #20
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	2000d140 	.word	0x2000d140

0800ed7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	78db      	ldrb	r3, [r3, #3]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d034      	beq.n	800edfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	7858      	ldrb	r0, [r3, #1]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eda0:	2301      	movs	r3, #1
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	f7ff fd40 	bl	800e828 <disk_write>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d002      	beq.n	800edb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800edae:	2301      	movs	r3, #1
 800edb0:	73fb      	strb	r3, [r7, #15]
 800edb2:	e022      	b.n	800edfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a1b      	ldr	r3, [r3, #32]
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	1ad2      	subs	r2, r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d217      	bcs.n	800edfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	789b      	ldrb	r3, [r3, #2]
 800edce:	613b      	str	r3, [r7, #16]
 800edd0:	e010      	b.n	800edf4 <sync_window+0x78>
					wsect += fs->fsize;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	699b      	ldr	r3, [r3, #24]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	4413      	add	r3, r2
 800edda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	7858      	ldrb	r0, [r3, #1]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ede6:	2301      	movs	r3, #1
 800ede8:	697a      	ldr	r2, [r7, #20]
 800edea:	f7ff fd1d 	bl	800e828 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	3b01      	subs	r3, #1
 800edf2:	613b      	str	r3, [r7, #16]
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d8eb      	bhi.n	800edd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800edfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3718      	adds	r7, #24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d01b      	beq.n	800ee54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7ff ffad 	bl	800ed7c <sync_window>
 800ee22:	4603      	mov	r3, r0
 800ee24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ee26:	7bfb      	ldrb	r3, [r7, #15]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d113      	bne.n	800ee54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	7858      	ldrb	r0, [r3, #1]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee36:	2301      	movs	r3, #1
 800ee38:	683a      	ldr	r2, [r7, #0]
 800ee3a:	f7ff fcd5 	bl	800e7e8 <disk_read>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d004      	beq.n	800ee4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ee44:	f04f 33ff 	mov.w	r3, #4294967295
 800ee48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
	...

0800ee60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7ff ff87 	bl	800ed7c <sync_window>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d158      	bne.n	800ef2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	d148      	bne.n	800ef12 <sync_fs+0xb2>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	791b      	ldrb	r3, [r3, #4]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d144      	bne.n	800ef12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3330      	adds	r3, #48	; 0x30
 800ee8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee90:	2100      	movs	r1, #0
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff fda9 	bl	800e9ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	3330      	adds	r3, #48	; 0x30
 800ee9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eea0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7ff fd38 	bl	800e91a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3330      	adds	r3, #48	; 0x30
 800eeae:	4921      	ldr	r1, [pc, #132]	; (800ef34 <sync_fs+0xd4>)
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fd4d 	bl	800e950 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	3330      	adds	r3, #48	; 0x30
 800eeba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eebe:	491e      	ldr	r1, [pc, #120]	; (800ef38 <sync_fs+0xd8>)
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7ff fd45 	bl	800e950 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	3330      	adds	r3, #48	; 0x30
 800eeca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	4619      	mov	r1, r3
 800eed4:	4610      	mov	r0, r2
 800eed6:	f7ff fd3b 	bl	800e950 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	3330      	adds	r3, #48	; 0x30
 800eede:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	4619      	mov	r1, r3
 800eee8:	4610      	mov	r0, r2
 800eeea:	f7ff fd31 	bl	800e950 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7858      	ldrb	r0, [r3, #1]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef06:	2301      	movs	r3, #1
 800ef08:	f7ff fc8e 	bl	800e828 <disk_write>
			fs->fsi_flag = 0;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	785b      	ldrb	r3, [r3, #1]
 800ef16:	2200      	movs	r2, #0
 800ef18:	2100      	movs	r1, #0
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff fca4 	bl	800e868 <disk_ioctl>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <sync_fs+0xca>
 800ef26:	2301      	movs	r3, #1
 800ef28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ef2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	41615252 	.word	0x41615252
 800ef38:	61417272 	.word	0x61417272

0800ef3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	3b02      	subs	r3, #2
 800ef4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	3b02      	subs	r3, #2
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d301      	bcc.n	800ef5c <clust2sect+0x20>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	e008      	b.n	800ef6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	895b      	ldrh	r3, [r3, #10]
 800ef60:	461a      	mov	r2, r3
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	fb03 f202 	mul.w	r2, r3, r2
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef6c:	4413      	add	r3, r2
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	370c      	adds	r7, #12
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b086      	sub	sp, #24
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d904      	bls.n	800ef9a <get_fat+0x20>
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	695b      	ldr	r3, [r3, #20]
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d302      	bcc.n	800efa0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	617b      	str	r3, [r7, #20]
 800ef9e:	e08f      	b.n	800f0c0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800efa0:	f04f 33ff 	mov.w	r3, #4294967295
 800efa4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	2b03      	cmp	r3, #3
 800efac:	d062      	beq.n	800f074 <get_fat+0xfa>
 800efae:	2b03      	cmp	r3, #3
 800efb0:	dc7c      	bgt.n	800f0ac <get_fat+0x132>
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d002      	beq.n	800efbc <get_fat+0x42>
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d042      	beq.n	800f040 <get_fat+0xc6>
 800efba:	e077      	b.n	800f0ac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	085b      	lsrs	r3, r3, #1
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	4413      	add	r3, r2
 800efc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	6a1a      	ldr	r2, [r3, #32]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	0a5b      	lsrs	r3, r3, #9
 800efd2:	4413      	add	r3, r2
 800efd4:	4619      	mov	r1, r3
 800efd6:	6938      	ldr	r0, [r7, #16]
 800efd8:	f7ff ff14 	bl	800ee04 <move_window>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d167      	bne.n	800f0b2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	60fa      	str	r2, [r7, #12]
 800efe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efec:	693a      	ldr	r2, [r7, #16]
 800efee:	4413      	add	r3, r2
 800eff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eff4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	6a1a      	ldr	r2, [r3, #32]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	0a5b      	lsrs	r3, r3, #9
 800effe:	4413      	add	r3, r2
 800f000:	4619      	mov	r1, r3
 800f002:	6938      	ldr	r0, [r7, #16]
 800f004:	f7ff fefe 	bl	800ee04 <move_window>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d153      	bne.n	800f0b6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f014:	693a      	ldr	r2, [r7, #16]
 800f016:	4413      	add	r3, r2
 800f018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	461a      	mov	r2, r3
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	4313      	orrs	r3, r2
 800f024:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	f003 0301 	and.w	r3, r3, #1
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d002      	beq.n	800f036 <get_fat+0xbc>
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	091b      	lsrs	r3, r3, #4
 800f034:	e002      	b.n	800f03c <get_fat+0xc2>
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f03c:	617b      	str	r3, [r7, #20]
			break;
 800f03e:	e03f      	b.n	800f0c0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	6a1a      	ldr	r2, [r3, #32]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	0a1b      	lsrs	r3, r3, #8
 800f048:	4413      	add	r3, r2
 800f04a:	4619      	mov	r1, r3
 800f04c:	6938      	ldr	r0, [r7, #16]
 800f04e:	f7ff fed9 	bl	800ee04 <move_window>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d130      	bne.n	800f0ba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f066:	4413      	add	r3, r2
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fc1b 	bl	800e8a4 <ld_word>
 800f06e:	4603      	mov	r3, r0
 800f070:	617b      	str	r3, [r7, #20]
			break;
 800f072:	e025      	b.n	800f0c0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	6a1a      	ldr	r2, [r3, #32]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	09db      	lsrs	r3, r3, #7
 800f07c:	4413      	add	r3, r2
 800f07e:	4619      	mov	r1, r3
 800f080:	6938      	ldr	r0, [r7, #16]
 800f082:	f7ff febf 	bl	800ee04 <move_window>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d118      	bne.n	800f0be <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f09a:	4413      	add	r3, r2
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7ff fc19 	bl	800e8d4 <ld_dword>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f0a8:	617b      	str	r3, [r7, #20]
			break;
 800f0aa:	e009      	b.n	800f0c0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	617b      	str	r3, [r7, #20]
 800f0b0:	e006      	b.n	800f0c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0b2:	bf00      	nop
 800f0b4:	e004      	b.n	800f0c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0b6:	bf00      	nop
 800f0b8:	e002      	b.n	800f0c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0ba:	bf00      	nop
 800f0bc:	e000      	b.n	800f0c0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f0be:	bf00      	nop
		}
	}

	return val;
 800f0c0:	697b      	ldr	r3, [r7, #20]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f0ca:	b590      	push	{r4, r7, lr}
 800f0cc:	b089      	sub	sp, #36	; 0x24
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	60b9      	str	r1, [r7, #8]
 800f0d4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f0d6:	2302      	movs	r3, #2
 800f0d8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	f240 80d9 	bls.w	800f294 <put_fat+0x1ca>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	695b      	ldr	r3, [r3, #20]
 800f0e6:	68ba      	ldr	r2, [r7, #8]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	f080 80d3 	bcs.w	800f294 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	f000 8096 	beq.w	800f224 <put_fat+0x15a>
 800f0f8:	2b03      	cmp	r3, #3
 800f0fa:	f300 80cb 	bgt.w	800f294 <put_fat+0x1ca>
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d002      	beq.n	800f108 <put_fat+0x3e>
 800f102:	2b02      	cmp	r3, #2
 800f104:	d06e      	beq.n	800f1e4 <put_fat+0x11a>
 800f106:	e0c5      	b.n	800f294 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	61bb      	str	r3, [r7, #24]
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	085b      	lsrs	r3, r3, #1
 800f110:	69ba      	ldr	r2, [r7, #24]
 800f112:	4413      	add	r3, r2
 800f114:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6a1a      	ldr	r2, [r3, #32]
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	0a5b      	lsrs	r3, r3, #9
 800f11e:	4413      	add	r3, r2
 800f120:	4619      	mov	r1, r3
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f7ff fe6e 	bl	800ee04 <move_window>
 800f128:	4603      	mov	r3, r0
 800f12a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f12c:	7ffb      	ldrb	r3, [r7, #31]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f040 80a9 	bne.w	800f286 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	1c59      	adds	r1, r3, #1
 800f13e:	61b9      	str	r1, [r7, #24]
 800f140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f144:	4413      	add	r3, r2
 800f146:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	f003 0301 	and.w	r3, r3, #1
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00d      	beq.n	800f16e <put_fat+0xa4>
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	b25b      	sxtb	r3, r3
 800f158:	f003 030f 	and.w	r3, r3, #15
 800f15c:	b25a      	sxtb	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	b2db      	uxtb	r3, r3
 800f162:	011b      	lsls	r3, r3, #4
 800f164:	b25b      	sxtb	r3, r3
 800f166:	4313      	orrs	r3, r2
 800f168:	b25b      	sxtb	r3, r3
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	e001      	b.n	800f172 <put_fat+0xa8>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	b2db      	uxtb	r3, r3
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2201      	movs	r2, #1
 800f17a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6a1a      	ldr	r2, [r3, #32]
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	0a5b      	lsrs	r3, r3, #9
 800f184:	4413      	add	r3, r2
 800f186:	4619      	mov	r1, r3
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f7ff fe3b 	bl	800ee04 <move_window>
 800f18e:	4603      	mov	r3, r0
 800f190:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f192:	7ffb      	ldrb	r3, [r7, #31]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d178      	bne.n	800f28a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1a4:	4413      	add	r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d003      	beq.n	800f1ba <put_fat+0xf0>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	091b      	lsrs	r3, r3, #4
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	e00e      	b.n	800f1d8 <put_fat+0x10e>
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	b25b      	sxtb	r3, r3
 800f1c0:	f023 030f 	bic.w	r3, r3, #15
 800f1c4:	b25a      	sxtb	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	0a1b      	lsrs	r3, r3, #8
 800f1ca:	b25b      	sxtb	r3, r3
 800f1cc:	f003 030f 	and.w	r3, r3, #15
 800f1d0:	b25b      	sxtb	r3, r3
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	b25b      	sxtb	r3, r3
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	70da      	strb	r2, [r3, #3]
			break;
 800f1e2:	e057      	b.n	800f294 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6a1a      	ldr	r2, [r3, #32]
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	0a1b      	lsrs	r3, r3, #8
 800f1ec:	4413      	add	r3, r2
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f7ff fe07 	bl	800ee04 <move_window>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1fa:	7ffb      	ldrb	r3, [r7, #31]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d146      	bne.n	800f28e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f20e:	4413      	add	r3, r2
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	b292      	uxth	r2, r2
 800f214:	4611      	mov	r1, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff fb7f 	bl	800e91a <st_word>
			fs->wflag = 1;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2201      	movs	r2, #1
 800f220:	70da      	strb	r2, [r3, #3]
			break;
 800f222:	e037      	b.n	800f294 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6a1a      	ldr	r2, [r3, #32]
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	09db      	lsrs	r3, r3, #7
 800f22c:	4413      	add	r3, r2
 800f22e:	4619      	mov	r1, r3
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f7ff fde7 	bl	800ee04 <move_window>
 800f236:	4603      	mov	r3, r0
 800f238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f23a:	7ffb      	ldrb	r3, [r7, #31]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d128      	bne.n	800f292 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f254:	4413      	add	r3, r2
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fb3c 	bl	800e8d4 <ld_dword>
 800f25c:	4603      	mov	r3, r0
 800f25e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f262:	4323      	orrs	r3, r4
 800f264:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f274:	4413      	add	r3, r2
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff fb69 	bl	800e950 <st_dword>
			fs->wflag = 1;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2201      	movs	r2, #1
 800f282:	70da      	strb	r2, [r3, #3]
			break;
 800f284:	e006      	b.n	800f294 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f286:	bf00      	nop
 800f288:	e004      	b.n	800f294 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f28a:	bf00      	nop
 800f28c:	e002      	b.n	800f294 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f28e:	bf00      	nop
 800f290:	e000      	b.n	800f294 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f292:	bf00      	nop
		}
	}
	return res;
 800f294:	7ffb      	ldrb	r3, [r7, #31]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3724      	adds	r7, #36	; 0x24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd90      	pop	{r4, r7, pc}

0800f29e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b088      	sub	sp, #32
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	60f8      	str	r0, [r7, #12]
 800f2a6:	60b9      	str	r1, [r7, #8]
 800f2a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d904      	bls.n	800f2c4 <remove_chain+0x26>
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	695b      	ldr	r3, [r3, #20]
 800f2be:	68ba      	ldr	r2, [r7, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d301      	bcc.n	800f2c8 <remove_chain+0x2a>
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e04b      	b.n	800f360 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00c      	beq.n	800f2e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d2:	6879      	ldr	r1, [r7, #4]
 800f2d4:	69b8      	ldr	r0, [r7, #24]
 800f2d6:	f7ff fef8 	bl	800f0ca <put_fat>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f2de:	7ffb      	ldrb	r3, [r7, #31]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <remove_chain+0x4a>
 800f2e4:	7ffb      	ldrb	r3, [r7, #31]
 800f2e6:	e03b      	b.n	800f360 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f2e8:	68b9      	ldr	r1, [r7, #8]
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fe45 	bl	800ef7a <get_fat>
 800f2f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d031      	beq.n	800f35c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d101      	bne.n	800f302 <remove_chain+0x64>
 800f2fe:	2302      	movs	r3, #2
 800f300:	e02e      	b.n	800f360 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f308:	d101      	bne.n	800f30e <remove_chain+0x70>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e028      	b.n	800f360 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f30e:	2200      	movs	r2, #0
 800f310:	68b9      	ldr	r1, [r7, #8]
 800f312:	69b8      	ldr	r0, [r7, #24]
 800f314:	f7ff fed9 	bl	800f0ca <put_fat>
 800f318:	4603      	mov	r3, r0
 800f31a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f31c:	7ffb      	ldrb	r3, [r7, #31]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <remove_chain+0x88>
 800f322:	7ffb      	ldrb	r3, [r7, #31]
 800f324:	e01c      	b.n	800f360 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	691a      	ldr	r2, [r3, #16]
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	695b      	ldr	r3, [r3, #20]
 800f32e:	3b02      	subs	r3, #2
 800f330:	429a      	cmp	r2, r3
 800f332:	d20b      	bcs.n	800f34c <remove_chain+0xae>
			fs->free_clst++;
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	791b      	ldrb	r3, [r3, #4]
 800f342:	f043 0301 	orr.w	r3, r3, #1
 800f346:	b2da      	uxtb	r2, r3
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	695b      	ldr	r3, [r3, #20]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	429a      	cmp	r2, r3
 800f358:	d3c6      	bcc.n	800f2e8 <remove_chain+0x4a>
 800f35a:	e000      	b.n	800f35e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f35c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3720      	adds	r7, #32
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10d      	bne.n	800f39a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d004      	beq.n	800f394 <create_chain+0x2c>
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	695b      	ldr	r3, [r3, #20]
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	429a      	cmp	r2, r3
 800f392:	d31b      	bcc.n	800f3cc <create_chain+0x64>
 800f394:	2301      	movs	r3, #1
 800f396:	61bb      	str	r3, [r7, #24]
 800f398:	e018      	b.n	800f3cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff fdec 	bl	800ef7a <get_fat>
 800f3a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d801      	bhi.n	800f3ae <create_chain+0x46>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e070      	b.n	800f490 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b4:	d101      	bne.n	800f3ba <create_chain+0x52>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	e06a      	b.n	800f490 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d201      	bcs.n	800f3c8 <create_chain+0x60>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	e063      	b.n	800f490 <create_chain+0x128>
		scl = clst;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	69fa      	ldr	r2, [r7, #28]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d307      	bcc.n	800f3f0 <create_chain+0x88>
				ncl = 2;
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d901      	bls.n	800f3f0 <create_chain+0x88>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e04f      	b.n	800f490 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f3f0:	69f9      	ldr	r1, [r7, #28]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff fdc1 	bl	800ef7a <get_fat>
 800f3f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00e      	beq.n	800f41e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d003      	beq.n	800f40e <create_chain+0xa6>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40c:	d101      	bne.n	800f412 <create_chain+0xaa>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	e03e      	b.n	800f490 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	429a      	cmp	r2, r3
 800f418:	d1da      	bne.n	800f3d0 <create_chain+0x68>
 800f41a:	2300      	movs	r3, #0
 800f41c:	e038      	b.n	800f490 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f41e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f420:	f04f 32ff 	mov.w	r2, #4294967295
 800f424:	69f9      	ldr	r1, [r7, #28]
 800f426:	6938      	ldr	r0, [r7, #16]
 800f428:	f7ff fe4f 	bl	800f0ca <put_fat>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <create_chain+0xe2>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d006      	beq.n	800f44a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f43c:	69fa      	ldr	r2, [r7, #28]
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6938      	ldr	r0, [r7, #16]
 800f442:	f7ff fe42 	bl	800f0ca <put_fat>
 800f446:	4603      	mov	r3, r0
 800f448:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d116      	bne.n	800f47e <create_chain+0x116>
		fs->last_clst = ncl;
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	69fa      	ldr	r2, [r7, #28]
 800f454:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	691a      	ldr	r2, [r3, #16]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	3b02      	subs	r3, #2
 800f460:	429a      	cmp	r2, r3
 800f462:	d804      	bhi.n	800f46e <create_chain+0x106>
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	1e5a      	subs	r2, r3, #1
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	791b      	ldrb	r3, [r3, #4]
 800f472:	f043 0301 	orr.w	r3, r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	711a      	strb	r2, [r3, #4]
 800f47c:	e007      	b.n	800f48e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f47e:	7dfb      	ldrb	r3, [r7, #23]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d102      	bne.n	800f48a <create_chain+0x122>
 800f484:	f04f 33ff 	mov.w	r3, #4294967295
 800f488:	e000      	b.n	800f48c <create_chain+0x124>
 800f48a:	2301      	movs	r3, #1
 800f48c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f48e:	69fb      	ldr	r3, [r7, #28]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3720      	adds	r7, #32
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	0a5b      	lsrs	r3, r3, #9
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	8952      	ldrh	r2, [r2, #10]
 800f4b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	1d1a      	adds	r2, r3, #4
 800f4c2:	613a      	str	r2, [r7, #16]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d101      	bne.n	800f4d2 <clmt_clust+0x3a>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	e010      	b.n	800f4f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d307      	bcc.n	800f4ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	617b      	str	r3, [r7, #20]
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f4e8:	e7e9      	b.n	800f4be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f4ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	4413      	add	r3, r2
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	371c      	adds	r7, #28
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f516:	d204      	bcs.n	800f522 <dir_sdi+0x22>
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f003 031f 	and.w	r3, r3, #31
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f522:	2302      	movs	r3, #2
 800f524:	e063      	b.n	800f5ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <dir_sdi+0x46>
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	2b02      	cmp	r3, #2
 800f53e:	d902      	bls.n	800f546 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f544:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10c      	bne.n	800f566 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	095b      	lsrs	r3, r3, #5
 800f550:	693a      	ldr	r2, [r7, #16]
 800f552:	8912      	ldrh	r2, [r2, #8]
 800f554:	4293      	cmp	r3, r2
 800f556:	d301      	bcc.n	800f55c <dir_sdi+0x5c>
 800f558:	2302      	movs	r3, #2
 800f55a:	e048      	b.n	800f5ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	61da      	str	r2, [r3, #28]
 800f564:	e029      	b.n	800f5ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	895b      	ldrh	r3, [r3, #10]
 800f56a:	025b      	lsls	r3, r3, #9
 800f56c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f56e:	e019      	b.n	800f5a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6979      	ldr	r1, [r7, #20]
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff fd00 	bl	800ef7a <get_fat>
 800f57a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f582:	d101      	bne.n	800f588 <dir_sdi+0x88>
 800f584:	2301      	movs	r3, #1
 800f586:	e032      	b.n	800f5ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d904      	bls.n	800f598 <dir_sdi+0x98>
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	429a      	cmp	r2, r3
 800f596:	d301      	bcc.n	800f59c <dir_sdi+0x9c>
 800f598:	2302      	movs	r3, #2
 800f59a:	e028      	b.n	800f5ee <dir_sdi+0xee>
			ofs -= csz;
 800f59c:	683a      	ldr	r2, [r7, #0]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f5a4:	683a      	ldr	r2, [r7, #0]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d2e1      	bcs.n	800f570 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f5ac:	6979      	ldr	r1, [r7, #20]
 800f5ae:	6938      	ldr	r0, [r7, #16]
 800f5b0:	f7ff fcc4 	bl	800ef3c <clust2sect>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	697a      	ldr	r2, [r7, #20]
 800f5be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	69db      	ldr	r3, [r3, #28]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d101      	bne.n	800f5cc <dir_sdi+0xcc>
 800f5c8:	2302      	movs	r3, #2
 800f5ca:	e010      	b.n	800f5ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	69da      	ldr	r2, [r3, #28]
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	0a5b      	lsrs	r3, r3, #9
 800f5d4:	441a      	add	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	441a      	add	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3718      	adds	r7, #24
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b086      	sub	sp, #24
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	695b      	ldr	r3, [r3, #20]
 800f60a:	3320      	adds	r3, #32
 800f60c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <dir_next+0x28>
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f61c:	d301      	bcc.n	800f622 <dir_next+0x2c>
 800f61e:	2304      	movs	r3, #4
 800f620:	e0aa      	b.n	800f778 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f040 8098 	bne.w	800f75e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	69db      	ldr	r3, [r3, #28]
 800f632:	1c5a      	adds	r2, r3, #1
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10b      	bne.n	800f658 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	095b      	lsrs	r3, r3, #5
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	8912      	ldrh	r2, [r2, #8]
 800f648:	4293      	cmp	r3, r2
 800f64a:	f0c0 8088 	bcc.w	800f75e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	61da      	str	r2, [r3, #28]
 800f654:	2304      	movs	r3, #4
 800f656:	e08f      	b.n	800f778 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	0a5b      	lsrs	r3, r3, #9
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	8952      	ldrh	r2, [r2, #10]
 800f660:	3a01      	subs	r2, #1
 800f662:	4013      	ands	r3, r2
 800f664:	2b00      	cmp	r3, #0
 800f666:	d17a      	bne.n	800f75e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	4619      	mov	r1, r3
 800f670:	4610      	mov	r0, r2
 800f672:	f7ff fc82 	bl	800ef7a <get_fat>
 800f676:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d801      	bhi.n	800f682 <dir_next+0x8c>
 800f67e:	2302      	movs	r3, #2
 800f680:	e07a      	b.n	800f778 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f688:	d101      	bne.n	800f68e <dir_next+0x98>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e074      	b.n	800f778 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	695b      	ldr	r3, [r3, #20]
 800f692:	697a      	ldr	r2, [r7, #20]
 800f694:	429a      	cmp	r2, r3
 800f696:	d358      	bcc.n	800f74a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d104      	bne.n	800f6a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	61da      	str	r2, [r3, #28]
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	e067      	b.n	800f778 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	f7ff fe59 	bl	800f368 <create_chain>
 800f6b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <dir_next+0xcc>
 800f6be:	2307      	movs	r3, #7
 800f6c0:	e05a      	b.n	800f778 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d101      	bne.n	800f6cc <dir_next+0xd6>
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	e055      	b.n	800f778 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d2:	d101      	bne.n	800f6d8 <dir_next+0xe2>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e04f      	b.n	800f778 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7ff fb4f 	bl	800ed7c <sync_window>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d001      	beq.n	800f6e8 <dir_next+0xf2>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e047      	b.n	800f778 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	3330      	adds	r3, #48	; 0x30
 800f6ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7ff f979 	bl	800e9ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	613b      	str	r3, [r7, #16]
 800f6fc:	6979      	ldr	r1, [r7, #20]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f7ff fc1c 	bl	800ef3c <clust2sect>
 800f704:	4602      	mov	r2, r0
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	62da      	str	r2, [r3, #44]	; 0x2c
 800f70a:	e012      	b.n	800f732 <dir_next+0x13c>
						fs->wflag = 1;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2201      	movs	r2, #1
 800f710:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7ff fb32 	bl	800ed7c <sync_window>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <dir_next+0x12c>
 800f71e:	2301      	movs	r3, #1
 800f720:	e02a      	b.n	800f778 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	3301      	adds	r3, #1
 800f726:	613b      	str	r3, [r7, #16]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	1c5a      	adds	r2, r3, #1
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	62da      	str	r2, [r3, #44]	; 0x2c
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	895b      	ldrh	r3, [r3, #10]
 800f736:	461a      	mov	r2, r3
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d3e6      	bcc.n	800f70c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	1ad2      	subs	r2, r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f750:	6979      	ldr	r1, [r7, #20]
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff fbf2 	bl	800ef3c <clust2sect>
 800f758:	4602      	mov	r2, r0
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68ba      	ldr	r2, [r7, #8]
 800f762:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f770:	441a      	add	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f790:	2100      	movs	r1, #0
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff feb4 	bl	800f500 <dir_sdi>
 800f798:	4603      	mov	r3, r0
 800f79a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f79c:	7dfb      	ldrb	r3, [r7, #23]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d12b      	bne.n	800f7fa <dir_alloc+0x7a>
		n = 0;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	69db      	ldr	r3, [r3, #28]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f7ff fb29 	bl	800ee04 <move_window>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d11d      	bne.n	800f7f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a1b      	ldr	r3, [r3, #32]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	2be5      	cmp	r3, #229	; 0xe5
 800f7c4:	d004      	beq.n	800f7d0 <dir_alloc+0x50>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a1b      	ldr	r3, [r3, #32]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d107      	bne.n	800f7e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	613b      	str	r3, [r7, #16]
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d102      	bne.n	800f7e4 <dir_alloc+0x64>
 800f7de:	e00c      	b.n	800f7fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff ff05 	bl	800f5f6 <dir_next>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f7f0:	7dfb      	ldrb	r3, [r7, #23]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d0d7      	beq.n	800f7a6 <dir_alloc+0x26>
 800f7f6:	e000      	b.n	800f7fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f7f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	2b04      	cmp	r3, #4
 800f7fe:	d101      	bne.n	800f804 <dir_alloc+0x84>
 800f800:	2307      	movs	r3, #7
 800f802:	75fb      	strb	r3, [r7, #23]
	return res;
 800f804:	7dfb      	ldrb	r3, [r7, #23]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	331a      	adds	r3, #26
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff f841 	bl	800e8a4 <ld_word>
 800f822:	4603      	mov	r3, r0
 800f824:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	2b03      	cmp	r3, #3
 800f82c:	d109      	bne.n	800f842 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	3314      	adds	r3, #20
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff f836 	bl	800e8a4 <ld_word>
 800f838:	4603      	mov	r3, r0
 800f83a:	041b      	lsls	r3, r3, #16
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	4313      	orrs	r3, r2
 800f840:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f842:	68fb      	ldr	r3, [r7, #12]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	331a      	adds	r3, #26
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	b292      	uxth	r2, r2
 800f860:	4611      	mov	r1, r2
 800f862:	4618      	mov	r0, r3
 800f864:	f7ff f859 	bl	800e91a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d109      	bne.n	800f884 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	f103 0214 	add.w	r2, r3, #20
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	0c1b      	lsrs	r3, r3, #16
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	4619      	mov	r1, r3
 800f87e:	4610      	mov	r0, r2
 800f880:	f7ff f84b 	bl	800e91a <st_word>
	}
}
 800f884:	bf00      	nop
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f89a:	2100      	movs	r1, #0
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7ff fe2f 	bl	800f500 <dir_sdi>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f8a6:	7dfb      	ldrb	r3, [r7, #23]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d001      	beq.n	800f8b0 <dir_find+0x24>
 800f8ac:	7dfb      	ldrb	r3, [r7, #23]
 800f8ae:	e03e      	b.n	800f92e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	69db      	ldr	r3, [r3, #28]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6938      	ldr	r0, [r7, #16]
 800f8b8:	f7ff faa4 	bl	800ee04 <move_window>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f8c0:	7dfb      	ldrb	r3, [r7, #23]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d12f      	bne.n	800f926 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f8ce:	7bfb      	ldrb	r3, [r7, #15]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d102      	bne.n	800f8da <dir_find+0x4e>
 800f8d4:	2304      	movs	r3, #4
 800f8d6:	75fb      	strb	r3, [r7, #23]
 800f8d8:	e028      	b.n	800f92c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	330b      	adds	r3, #11
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a1b      	ldr	r3, [r3, #32]
 800f8f0:	330b      	adds	r3, #11
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	f003 0308 	and.w	r3, r3, #8
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d10a      	bne.n	800f912 <dir_find+0x86>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6a18      	ldr	r0, [r3, #32]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3324      	adds	r3, #36	; 0x24
 800f904:	220b      	movs	r2, #11
 800f906:	4619      	mov	r1, r3
 800f908:	f7ff f88a 	bl	800ea20 <mem_cmp>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00b      	beq.n	800f92a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f912:	2100      	movs	r1, #0
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7ff fe6e 	bl	800f5f6 <dir_next>
 800f91a:	4603      	mov	r3, r0
 800f91c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f91e:	7dfb      	ldrb	r3, [r7, #23]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d0c5      	beq.n	800f8b0 <dir_find+0x24>
 800f924:	e002      	b.n	800f92c <dir_find+0xa0>
		if (res != FR_OK) break;
 800f926:	bf00      	nop
 800f928:	e000      	b.n	800f92c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f92a:	bf00      	nop

	return res;
 800f92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3718      	adds	r7, #24
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f944:	2101      	movs	r1, #1
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7ff ff1a 	bl	800f780 <dir_alloc>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d11c      	bne.n	800f990 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	69db      	ldr	r3, [r3, #28]
 800f95a:	4619      	mov	r1, r3
 800f95c:	68b8      	ldr	r0, [r7, #8]
 800f95e:	f7ff fa51 	bl	800ee04 <move_window>
 800f962:	4603      	mov	r3, r0
 800f964:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f966:	7bfb      	ldrb	r3, [r7, #15]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d111      	bne.n	800f990 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a1b      	ldr	r3, [r3, #32]
 800f970:	2220      	movs	r2, #32
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff f838 	bl	800e9ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a18      	ldr	r0, [r3, #32]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	3324      	adds	r3, #36	; 0x24
 800f982:	220b      	movs	r2, #11
 800f984:	4619      	mov	r1, r3
 800f986:	f7ff f80f 	bl	800e9a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	2201      	movs	r2, #1
 800f98e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f990:	7bfb      	ldrb	r3, [r7, #15]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
	...

0800f99c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b088      	sub	sp, #32
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	60fb      	str	r3, [r7, #12]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3324      	adds	r3, #36	; 0x24
 800f9b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f9b2:	220b      	movs	r2, #11
 800f9b4:	2120      	movs	r1, #32
 800f9b6:	68b8      	ldr	r0, [r7, #8]
 800f9b8:	f7ff f817 	bl	800e9ea <mem_set>
	si = i = 0; ni = 8;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	613b      	str	r3, [r7, #16]
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	61fb      	str	r3, [r7, #28]
 800f9c4:	2308      	movs	r3, #8
 800f9c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	61fa      	str	r2, [r7, #28]
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f9d6:	7efb      	ldrb	r3, [r7, #27]
 800f9d8:	2b20      	cmp	r3, #32
 800f9da:	d94e      	bls.n	800fa7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f9dc:	7efb      	ldrb	r3, [r7, #27]
 800f9de:	2b2f      	cmp	r3, #47	; 0x2f
 800f9e0:	d006      	beq.n	800f9f0 <create_name+0x54>
 800f9e2:	7efb      	ldrb	r3, [r7, #27]
 800f9e4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9e6:	d110      	bne.n	800fa0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f9e8:	e002      	b.n	800f9f0 <create_name+0x54>
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	2b2f      	cmp	r3, #47	; 0x2f
 800f9fa:	d0f6      	beq.n	800f9ea <create_name+0x4e>
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	4413      	add	r3, r2
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b5c      	cmp	r3, #92	; 0x5c
 800fa06:	d0f0      	beq.n	800f9ea <create_name+0x4e>
			break;
 800fa08:	e038      	b.n	800fa7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fa0a:	7efb      	ldrb	r3, [r7, #27]
 800fa0c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa0e:	d003      	beq.n	800fa18 <create_name+0x7c>
 800fa10:	693a      	ldr	r2, [r7, #16]
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d30c      	bcc.n	800fa32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2b0b      	cmp	r3, #11
 800fa1c:	d002      	beq.n	800fa24 <create_name+0x88>
 800fa1e:	7efb      	ldrb	r3, [r7, #27]
 800fa20:	2b2e      	cmp	r3, #46	; 0x2e
 800fa22:	d001      	beq.n	800fa28 <create_name+0x8c>
 800fa24:	2306      	movs	r3, #6
 800fa26:	e044      	b.n	800fab2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa28:	2308      	movs	r3, #8
 800fa2a:	613b      	str	r3, [r7, #16]
 800fa2c:	230b      	movs	r3, #11
 800fa2e:	617b      	str	r3, [r7, #20]
			continue;
 800fa30:	e022      	b.n	800fa78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	da04      	bge.n	800fa44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa3a:	7efb      	ldrb	r3, [r7, #27]
 800fa3c:	3b80      	subs	r3, #128	; 0x80
 800fa3e:	4a1f      	ldr	r2, [pc, #124]	; (800fabc <create_name+0x120>)
 800fa40:	5cd3      	ldrb	r3, [r2, r3]
 800fa42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa44:	7efb      	ldrb	r3, [r7, #27]
 800fa46:	4619      	mov	r1, r3
 800fa48:	481d      	ldr	r0, [pc, #116]	; (800fac0 <create_name+0x124>)
 800fa4a:	f7ff f810 	bl	800ea6e <chk_chr>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d001      	beq.n	800fa58 <create_name+0xbc>
 800fa54:	2306      	movs	r3, #6
 800fa56:	e02c      	b.n	800fab2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fa58:	7efb      	ldrb	r3, [r7, #27]
 800fa5a:	2b60      	cmp	r3, #96	; 0x60
 800fa5c:	d905      	bls.n	800fa6a <create_name+0xce>
 800fa5e:	7efb      	ldrb	r3, [r7, #27]
 800fa60:	2b7a      	cmp	r3, #122	; 0x7a
 800fa62:	d802      	bhi.n	800fa6a <create_name+0xce>
 800fa64:	7efb      	ldrb	r3, [r7, #27]
 800fa66:	3b20      	subs	r3, #32
 800fa68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	613a      	str	r2, [r7, #16]
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	4413      	add	r3, r2
 800fa74:	7efa      	ldrb	r2, [r7, #27]
 800fa76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fa78:	e7a6      	b.n	800f9c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	441a      	add	r2, r3
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d101      	bne.n	800fa90 <create_name+0xf4>
 800fa8c:	2306      	movs	r3, #6
 800fa8e:	e010      	b.n	800fab2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2be5      	cmp	r3, #229	; 0xe5
 800fa96:	d102      	bne.n	800fa9e <create_name+0x102>
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2205      	movs	r2, #5
 800fa9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fa9e:	7efb      	ldrb	r3, [r7, #27]
 800faa0:	2b20      	cmp	r3, #32
 800faa2:	d801      	bhi.n	800faa8 <create_name+0x10c>
 800faa4:	2204      	movs	r2, #4
 800faa6:	e000      	b.n	800faaa <create_name+0x10e>
 800faa8:	2200      	movs	r2, #0
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	330b      	adds	r3, #11
 800faae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fab0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3720      	adds	r7, #32
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	08016bbc 	.word	0x08016bbc
 800fac0:	080168d4 	.word	0x080168d4

0800fac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b086      	sub	sp, #24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fad8:	e002      	b.n	800fae0 <follow_path+0x1c>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	603b      	str	r3, [r7, #0]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	2b2f      	cmp	r3, #47	; 0x2f
 800fae6:	d0f8      	beq.n	800fada <follow_path+0x16>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	2b5c      	cmp	r3, #92	; 0x5c
 800faee:	d0f4      	beq.n	800fada <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	2200      	movs	r2, #0
 800faf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b1f      	cmp	r3, #31
 800fafc:	d80a      	bhi.n	800fb14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2280      	movs	r2, #128	; 0x80
 800fb02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fb06:	2100      	movs	r1, #0
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff fcf9 	bl	800f500 <dir_sdi>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	75fb      	strb	r3, [r7, #23]
 800fb12:	e043      	b.n	800fb9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb14:	463b      	mov	r3, r7
 800fb16:	4619      	mov	r1, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ff3f 	bl	800f99c <create_name>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d134      	bne.n	800fb92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7ff feaf 	bl	800f88c <dir_find>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00a      	beq.n	800fb56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
 800fb42:	2b04      	cmp	r3, #4
 800fb44:	d127      	bne.n	800fb96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb46:	7afb      	ldrb	r3, [r7, #11]
 800fb48:	f003 0304 	and.w	r3, r3, #4
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d122      	bne.n	800fb96 <follow_path+0xd2>
 800fb50:	2305      	movs	r3, #5
 800fb52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb54:	e01f      	b.n	800fb96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb56:	7afb      	ldrb	r3, [r7, #11]
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d11c      	bne.n	800fb9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	799b      	ldrb	r3, [r3, #6]
 800fb64:	f003 0310 	and.w	r3, r3, #16
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fb6c:	2305      	movs	r3, #5
 800fb6e:	75fb      	strb	r3, [r7, #23]
 800fb70:	e014      	b.n	800fb9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	695b      	ldr	r3, [r3, #20]
 800fb7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb80:	4413      	add	r3, r2
 800fb82:	4619      	mov	r1, r3
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f7ff fe42 	bl	800f80e <ld_clust>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb90:	e7c0      	b.n	800fb14 <follow_path+0x50>
			if (res != FR_OK) break;
 800fb92:	bf00      	nop
 800fb94:	e002      	b.n	800fb9c <follow_path+0xd8>
				break;
 800fb96:	bf00      	nop
 800fb98:	e000      	b.n	800fb9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb9a:	bf00      	nop
			}
		}
	}

	return res;
 800fb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fba6:	b480      	push	{r7}
 800fba8:	b087      	sub	sp, #28
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fbae:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d031      	beq.n	800fc20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	617b      	str	r3, [r7, #20]
 800fbc2:	e002      	b.n	800fbca <get_ldnumber+0x24>
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	617b      	str	r3, [r7, #20]
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	2b20      	cmp	r3, #32
 800fbd0:	d903      	bls.n	800fbda <get_ldnumber+0x34>
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b3a      	cmp	r3, #58	; 0x3a
 800fbd8:	d1f4      	bne.n	800fbc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b3a      	cmp	r3, #58	; 0x3a
 800fbe0:	d11c      	bne.n	800fc1c <get_ldnumber+0x76>
			tp = *path;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	60fa      	str	r2, [r7, #12]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	3b30      	subs	r3, #48	; 0x30
 800fbf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b09      	cmp	r3, #9
 800fbf8:	d80e      	bhi.n	800fc18 <get_ldnumber+0x72>
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d10a      	bne.n	800fc18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d107      	bne.n	800fc18 <get_ldnumber+0x72>
					vol = (int)i;
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	617b      	str	r3, [r7, #20]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	e002      	b.n	800fc22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc20:	693b      	ldr	r3, [r7, #16]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	371c      	adds	r7, #28
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr
	...

0800fc30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	70da      	strb	r2, [r3, #3]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f04f 32ff 	mov.w	r2, #4294967295
 800fc46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7ff f8da 	bl	800ee04 <move_window>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <check_fs+0x2a>
 800fc56:	2304      	movs	r3, #4
 800fc58:	e038      	b.n	800fccc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	3330      	adds	r3, #48	; 0x30
 800fc5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fe1e 	bl	800e8a4 <ld_word>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d001      	beq.n	800fc78 <check_fs+0x48>
 800fc74:	2303      	movs	r3, #3
 800fc76:	e029      	b.n	800fccc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc7e:	2be9      	cmp	r3, #233	; 0xe9
 800fc80:	d009      	beq.n	800fc96 <check_fs+0x66>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc88:	2beb      	cmp	r3, #235	; 0xeb
 800fc8a:	d11e      	bne.n	800fcca <check_fs+0x9a>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fc92:	2b90      	cmp	r3, #144	; 0x90
 800fc94:	d119      	bne.n	800fcca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	3330      	adds	r3, #48	; 0x30
 800fc9a:	3336      	adds	r3, #54	; 0x36
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fe fe19 	bl	800e8d4 <ld_dword>
 800fca2:	4603      	mov	r3, r0
 800fca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fca8:	4a0a      	ldr	r2, [pc, #40]	; (800fcd4 <check_fs+0xa4>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d101      	bne.n	800fcb2 <check_fs+0x82>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e00c      	b.n	800fccc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3330      	adds	r3, #48	; 0x30
 800fcb6:	3352      	adds	r3, #82	; 0x52
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7fe fe0b 	bl	800e8d4 <ld_dword>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	4a05      	ldr	r2, [pc, #20]	; (800fcd8 <check_fs+0xa8>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d101      	bne.n	800fcca <check_fs+0x9a>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e000      	b.n	800fccc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fcca:	2302      	movs	r3, #2
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	00544146 	.word	0x00544146
 800fcd8:	33544146 	.word	0x33544146

0800fcdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b096      	sub	sp, #88	; 0x58
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	4613      	mov	r3, r2
 800fce8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	2200      	movs	r2, #0
 800fcee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff ff58 	bl	800fba6 <get_ldnumber>
 800fcf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	da01      	bge.n	800fd02 <find_volume+0x26>
 800fcfe:	230b      	movs	r3, #11
 800fd00:	e22d      	b.n	801015e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd02:	4aa1      	ldr	r2, [pc, #644]	; (800ff88 <find_volume+0x2ac>)
 800fd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d101      	bne.n	800fd16 <find_volume+0x3a>
 800fd12:	230c      	movs	r3, #12
 800fd14:	e223      	b.n	801015e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	f023 0301 	bic.w	r3, r3, #1
 800fd22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d01a      	beq.n	800fd62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	785b      	ldrb	r3, [r3, #1]
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fe fd19 	bl	800e768 <disk_status>
 800fd36:	4603      	mov	r3, r0
 800fd38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd40:	f003 0301 	and.w	r3, r3, #1
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10c      	bne.n	800fd62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd48:	79fb      	ldrb	r3, [r7, #7]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <find_volume+0x82>
 800fd4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fd5a:	230a      	movs	r3, #10
 800fd5c:	e1ff      	b.n	801015e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e1fd      	b.n	801015e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	2200      	movs	r2, #0
 800fd66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	785b      	ldrb	r3, [r3, #1]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fe fd11 	bl	800e79c <disk_initialize>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fd80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd84:	f003 0301 	and.w	r3, r3, #1
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	e1e6      	b.n	801015e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fd90:	79fb      	ldrb	r3, [r7, #7]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d007      	beq.n	800fda6 <find_volume+0xca>
 800fd96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd9a:	f003 0304 	and.w	r3, r3, #4
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fda2:	230a      	movs	r3, #10
 800fda4:	e1db      	b.n	801015e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fdaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdae:	f7ff ff3f 	bl	800fc30 <check_fs>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fdb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d149      	bne.n	800fe54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	643b      	str	r3, [r7, #64]	; 0x40
 800fdc4:	e01e      	b.n	800fe04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fdcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdce:	011b      	lsls	r3, r3, #4
 800fdd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fdd4:	4413      	add	r3, r2
 800fdd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdda:	3304      	adds	r3, #4
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d006      	beq.n	800fdf0 <find_volume+0x114>
 800fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde4:	3308      	adds	r3, #8
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe fd74 	bl	800e8d4 <ld_dword>
 800fdec:	4602      	mov	r2, r0
 800fdee:	e000      	b.n	800fdf2 <find_volume+0x116>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	3358      	adds	r3, #88	; 0x58
 800fdf8:	443b      	add	r3, r7
 800fdfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe00:	3301      	adds	r3, #1
 800fe02:	643b      	str	r3, [r7, #64]	; 0x40
 800fe04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe06:	2b03      	cmp	r3, #3
 800fe08:	d9dd      	bls.n	800fdc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d002      	beq.n	800fe1a <find_volume+0x13e>
 800fe14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe16:	3b01      	subs	r3, #1
 800fe18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	3358      	adds	r3, #88	; 0x58
 800fe20:	443b      	add	r3, r7
 800fe22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d005      	beq.n	800fe3a <find_volume+0x15e>
 800fe2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe32:	f7ff fefd 	bl	800fc30 <check_fs>
 800fe36:	4603      	mov	r3, r0
 800fe38:	e000      	b.n	800fe3c <find_volume+0x160>
 800fe3a:	2303      	movs	r3, #3
 800fe3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fe40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d905      	bls.n	800fe54 <find_volume+0x178>
 800fe48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	643b      	str	r3, [r7, #64]	; 0x40
 800fe4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe50:	2b03      	cmp	r3, #3
 800fe52:	d9e2      	bls.n	800fe1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fe54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	d101      	bne.n	800fe60 <find_volume+0x184>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	e17e      	b.n	801015e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fe60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d901      	bls.n	800fe6c <find_volume+0x190>
 800fe68:	230d      	movs	r3, #13
 800fe6a:	e178      	b.n	801015e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	3330      	adds	r3, #48	; 0x30
 800fe70:	330b      	adds	r3, #11
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe fd16 	bl	800e8a4 <ld_word>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe7e:	d001      	beq.n	800fe84 <find_volume+0x1a8>
 800fe80:	230d      	movs	r3, #13
 800fe82:	e16c      	b.n	801015e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fe84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe86:	3330      	adds	r3, #48	; 0x30
 800fe88:	3316      	adds	r3, #22
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe fd0a 	bl	800e8a4 <ld_word>
 800fe90:	4603      	mov	r3, r0
 800fe92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fe94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d106      	bne.n	800fea8 <find_volume+0x1cc>
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	3330      	adds	r3, #48	; 0x30
 800fe9e:	3324      	adds	r3, #36	; 0x24
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe fd17 	bl	800e8d4 <ld_dword>
 800fea6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800feac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	789b      	ldrb	r3, [r3, #2]
 800febc:	2b01      	cmp	r3, #1
 800febe:	d005      	beq.n	800fecc <find_volume+0x1f0>
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	789b      	ldrb	r3, [r3, #2]
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	d001      	beq.n	800fecc <find_volume+0x1f0>
 800fec8:	230d      	movs	r3, #13
 800feca:	e148      	b.n	801015e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	789b      	ldrb	r3, [r3, #2]
 800fed0:	461a      	mov	r2, r3
 800fed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed4:	fb02 f303 	mul.w	r3, r2, r3
 800fed8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee8:	895b      	ldrh	r3, [r3, #10]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d008      	beq.n	800ff00 <find_volume+0x224>
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	895b      	ldrh	r3, [r3, #10]
 800fef2:	461a      	mov	r2, r3
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	895b      	ldrh	r3, [r3, #10]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	4013      	ands	r3, r2
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <find_volume+0x228>
 800ff00:	230d      	movs	r3, #13
 800ff02:	e12c      	b.n	801015e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	3330      	adds	r3, #48	; 0x30
 800ff08:	3311      	adds	r3, #17
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fe fcca 	bl	800e8a4 <ld_word>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	891b      	ldrh	r3, [r3, #8]
 800ff1c:	f003 030f 	and.w	r3, r3, #15
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <find_volume+0x24e>
 800ff26:	230d      	movs	r3, #13
 800ff28:	e119      	b.n	801015e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2c:	3330      	adds	r3, #48	; 0x30
 800ff2e:	3313      	adds	r3, #19
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe fcb7 	bl	800e8a4 <ld_word>
 800ff36:	4603      	mov	r3, r0
 800ff38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <find_volume+0x272>
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	3330      	adds	r3, #48	; 0x30
 800ff44:	3320      	adds	r3, #32
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe fcc4 	bl	800e8d4 <ld_dword>
 800ff4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	3330      	adds	r3, #48	; 0x30
 800ff52:	330e      	adds	r3, #14
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fe fca5 	bl	800e8a4 <ld_word>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ff5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <find_volume+0x28c>
 800ff64:	230d      	movs	r3, #13
 800ff66:	e0fa      	b.n	801015e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ff68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff6c:	4413      	add	r3, r2
 800ff6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff70:	8912      	ldrh	r2, [r2, #8]
 800ff72:	0912      	lsrs	r2, r2, #4
 800ff74:	b292      	uxth	r2, r2
 800ff76:	4413      	add	r3, r2
 800ff78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ff7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d204      	bcs.n	800ff8c <find_volume+0x2b0>
 800ff82:	230d      	movs	r3, #13
 800ff84:	e0eb      	b.n	801015e <find_volume+0x482>
 800ff86:	bf00      	nop
 800ff88:	2000d138 	.word	0x2000d138
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ff8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff94:	8952      	ldrh	r2, [r2, #10]
 800ff96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d101      	bne.n	800ffa6 <find_volume+0x2ca>
 800ffa2:	230d      	movs	r3, #13
 800ffa4:	e0db      	b.n	801015e <find_volume+0x482>
		fmt = FS_FAT32;
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ffac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d802      	bhi.n	800ffbc <find_volume+0x2e0>
 800ffb6:	2302      	movs	r3, #2
 800ffb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d802      	bhi.n	800ffcc <find_volume+0x2f0>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	1c9a      	adds	r2, r3, #2
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffd8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ffda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffde:	441a      	add	r2, r3
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ffe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe8:	441a      	add	r2, r3
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ffee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d11e      	bne.n	8010034 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	3330      	adds	r3, #48	; 0x30
 800fffa:	332a      	adds	r3, #42	; 0x2a
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fe fc51 	bl	800e8a4 <ld_word>
 8010002:	4603      	mov	r3, r0
 8010004:	2b00      	cmp	r3, #0
 8010006:	d001      	beq.n	801000c <find_volume+0x330>
 8010008:	230d      	movs	r3, #13
 801000a:	e0a8      	b.n	801015e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <find_volume+0x33c>
 8010014:	230d      	movs	r3, #13
 8010016:	e0a2      	b.n	801015e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	3330      	adds	r3, #48	; 0x30
 801001c:	332c      	adds	r3, #44	; 0x2c
 801001e:	4618      	mov	r0, r3
 8010020:	f7fe fc58 	bl	800e8d4 <ld_dword>
 8010024:	4602      	mov	r2, r0
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	647b      	str	r3, [r7, #68]	; 0x44
 8010032:	e01f      	b.n	8010074 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	891b      	ldrh	r3, [r3, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <find_volume+0x364>
 801003c:	230d      	movs	r3, #13
 801003e:	e08e      	b.n	801015e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	6a1a      	ldr	r2, [r3, #32]
 8010044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010046:	441a      	add	r2, r3
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801004c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010050:	2b02      	cmp	r3, #2
 8010052:	d103      	bne.n	801005c <find_volume+0x380>
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	e00a      	b.n	8010072 <find_volume+0x396>
 801005c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005e:	695a      	ldr	r2, [r3, #20]
 8010060:	4613      	mov	r3, r2
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	4413      	add	r3, r2
 8010066:	085a      	lsrs	r2, r3, #1
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	695b      	ldr	r3, [r3, #20]
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010072:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010076:	699a      	ldr	r2, [r3, #24]
 8010078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801007a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801007e:	0a5b      	lsrs	r3, r3, #9
 8010080:	429a      	cmp	r2, r3
 8010082:	d201      	bcs.n	8010088 <find_volume+0x3ac>
 8010084:	230d      	movs	r3, #13
 8010086:	e06a      	b.n	801015e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	f04f 32ff 	mov.w	r2, #4294967295
 801008e:	611a      	str	r2, [r3, #16]
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	691a      	ldr	r2, [r3, #16]
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	2280      	movs	r2, #128	; 0x80
 801009c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801009e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d149      	bne.n	801013a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a8:	3330      	adds	r3, #48	; 0x30
 80100aa:	3330      	adds	r3, #48	; 0x30
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fe fbf9 	bl	800e8a4 <ld_word>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d140      	bne.n	801013a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80100b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ba:	3301      	adds	r3, #1
 80100bc:	4619      	mov	r1, r3
 80100be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100c0:	f7fe fea0 	bl	800ee04 <move_window>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d137      	bne.n	801013a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80100ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100cc:	2200      	movs	r2, #0
 80100ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	3330      	adds	r3, #48	; 0x30
 80100d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fe fbe3 	bl	800e8a4 <ld_word>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
 80100e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d127      	bne.n	801013a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	3330      	adds	r3, #48	; 0x30
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fe fbf0 	bl	800e8d4 <ld_dword>
 80100f4:	4603      	mov	r3, r0
 80100f6:	4a1c      	ldr	r2, [pc, #112]	; (8010168 <find_volume+0x48c>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d11e      	bne.n	801013a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80100fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fe:	3330      	adds	r3, #48	; 0x30
 8010100:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010104:	4618      	mov	r0, r3
 8010106:	f7fe fbe5 	bl	800e8d4 <ld_dword>
 801010a:	4603      	mov	r3, r0
 801010c:	4a17      	ldr	r2, [pc, #92]	; (801016c <find_volume+0x490>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d113      	bne.n	801013a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	3330      	adds	r3, #48	; 0x30
 8010116:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe fbda 	bl	800e8d4 <ld_dword>
 8010120:	4602      	mov	r2, r0
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010128:	3330      	adds	r3, #48	; 0x30
 801012a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801012e:	4618      	mov	r0, r3
 8010130:	f7fe fbd0 	bl	800e8d4 <ld_dword>
 8010134:	4602      	mov	r2, r0
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010140:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <find_volume+0x494>)
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	3301      	adds	r3, #1
 8010148:	b29a      	uxth	r2, r3
 801014a:	4b09      	ldr	r3, [pc, #36]	; (8010170 <find_volume+0x494>)
 801014c:	801a      	strh	r2, [r3, #0]
 801014e:	4b08      	ldr	r3, [pc, #32]	; (8010170 <find_volume+0x494>)
 8010150:	881a      	ldrh	r2, [r3, #0]
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010156:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010158:	f7fe fdec 	bl	800ed34 <clear_lock>
#endif
	return FR_OK;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3758      	adds	r7, #88	; 0x58
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	41615252 	.word	0x41615252
 801016c:	61417272 	.word	0x61417272
 8010170:	2000d13c 	.word	0x2000d13c

08010174 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801017e:	2309      	movs	r3, #9
 8010180:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d01c      	beq.n	80101c2 <validate+0x4e>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d018      	beq.n	80101c2 <validate+0x4e>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d013      	beq.n	80101c2 <validate+0x4e>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	889a      	ldrh	r2, [r3, #4]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	88db      	ldrh	r3, [r3, #6]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d10c      	bne.n	80101c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	785b      	ldrb	r3, [r3, #1]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fada 	bl	800e768 <disk_status>
 80101b4:	4603      	mov	r3, r0
 80101b6:	f003 0301 	and.w	r3, r3, #1
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d101      	bne.n	80101c2 <validate+0x4e>
			res = FR_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d102      	bne.n	80101ce <validate+0x5a>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	e000      	b.n	80101d0 <validate+0x5c>
 80101ce:	2300      	movs	r3, #0
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	6013      	str	r3, [r2, #0]
	return res;
 80101d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	4613      	mov	r3, r2
 80101ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80101f2:	f107 0310 	add.w	r3, r7, #16
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7ff fcd5 	bl	800fba6 <get_ldnumber>
 80101fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	2b00      	cmp	r3, #0
 8010202:	da01      	bge.n	8010208 <f_mount+0x28>
 8010204:	230b      	movs	r3, #11
 8010206:	e02b      	b.n	8010260 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010208:	4a17      	ldr	r2, [pc, #92]	; (8010268 <f_mount+0x88>)
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010210:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010218:	69b8      	ldr	r0, [r7, #24]
 801021a:	f7fe fd8b 	bl	800ed34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	2200      	movs	r2, #0
 8010222:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d002      	beq.n	8010230 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2200      	movs	r2, #0
 801022e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	490d      	ldr	r1, [pc, #52]	; (8010268 <f_mount+0x88>)
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d002      	beq.n	8010246 <f_mount+0x66>
 8010240:	79fb      	ldrb	r3, [r7, #7]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d001      	beq.n	801024a <f_mount+0x6a>
 8010246:	2300      	movs	r3, #0
 8010248:	e00a      	b.n	8010260 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801024a:	f107 010c 	add.w	r1, r7, #12
 801024e:	f107 0308 	add.w	r3, r7, #8
 8010252:	2200      	movs	r2, #0
 8010254:	4618      	mov	r0, r3
 8010256:	f7ff fd41 	bl	800fcdc <find_volume>
 801025a:	4603      	mov	r3, r0
 801025c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801025e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3720      	adds	r7, #32
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	2000d138 	.word	0x2000d138

0801026c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b098      	sub	sp, #96	; 0x60
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	4613      	mov	r3, r2
 8010278:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <f_open+0x18>
 8010280:	2309      	movs	r3, #9
 8010282:	e1ad      	b.n	80105e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801028a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801028c:	79fa      	ldrb	r2, [r7, #7]
 801028e:	f107 0110 	add.w	r1, r7, #16
 8010292:	f107 0308 	add.w	r3, r7, #8
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff fd20 	bl	800fcdc <find_volume>
 801029c:	4603      	mov	r3, r0
 801029e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80102a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f040 8191 	bne.w	80105ce <f_open+0x362>
		dj.obj.fs = fs;
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	f107 0314 	add.w	r3, r7, #20
 80102b6:	4611      	mov	r1, r2
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff fc03 	bl	800fac4 <follow_path>
 80102be:	4603      	mov	r3, r0
 80102c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80102c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d11a      	bne.n	8010302 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80102cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80102d0:	b25b      	sxtb	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da03      	bge.n	80102de <f_open+0x72>
				res = FR_INVALID_NAME;
 80102d6:	2306      	movs	r3, #6
 80102d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80102dc:	e011      	b.n	8010302 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	f023 0301 	bic.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	bf14      	ite	ne
 80102e8:	2301      	movne	r3, #1
 80102ea:	2300      	moveq	r3, #0
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	461a      	mov	r2, r3
 80102f0:	f107 0314 	add.w	r3, r7, #20
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fe fbd4 	bl	800eaa4 <chk_lock>
 80102fc:	4603      	mov	r3, r0
 80102fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010302:	79fb      	ldrb	r3, [r7, #7]
 8010304:	f003 031c 	and.w	r3, r3, #28
 8010308:	2b00      	cmp	r3, #0
 801030a:	d07f      	beq.n	801040c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801030c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010310:	2b00      	cmp	r3, #0
 8010312:	d017      	beq.n	8010344 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010318:	2b04      	cmp	r3, #4
 801031a:	d10e      	bne.n	801033a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801031c:	f7fe fc1e 	bl	800eb5c <enq_lock>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d006      	beq.n	8010334 <f_open+0xc8>
 8010326:	f107 0314 	add.w	r3, r7, #20
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff fb03 	bl	800f936 <dir_register>
 8010330:	4603      	mov	r3, r0
 8010332:	e000      	b.n	8010336 <f_open+0xca>
 8010334:	2312      	movs	r3, #18
 8010336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	f043 0308 	orr.w	r3, r3, #8
 8010340:	71fb      	strb	r3, [r7, #7]
 8010342:	e010      	b.n	8010366 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010344:	7ebb      	ldrb	r3, [r7, #26]
 8010346:	f003 0311 	and.w	r3, r3, #17
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <f_open+0xea>
					res = FR_DENIED;
 801034e:	2307      	movs	r3, #7
 8010350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010354:	e007      	b.n	8010366 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	f003 0304 	and.w	r3, r3, #4
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <f_open+0xfa>
 8010360:	2308      	movs	r3, #8
 8010362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801036a:	2b00      	cmp	r3, #0
 801036c:	d168      	bne.n	8010440 <f_open+0x1d4>
 801036e:	79fb      	ldrb	r3, [r7, #7]
 8010370:	f003 0308 	and.w	r3, r3, #8
 8010374:	2b00      	cmp	r3, #0
 8010376:	d063      	beq.n	8010440 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010378:	f7fb ffc4 	bl	800c304 <get_fattime>
 801037c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801037e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010380:	330e      	adds	r3, #14
 8010382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe fae3 	bl	800e950 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038c:	3316      	adds	r3, #22
 801038e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010390:	4618      	mov	r0, r3
 8010392:	f7fe fadd 	bl	800e950 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010398:	330b      	adds	r3, #11
 801039a:	2220      	movs	r2, #32
 801039c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103a2:	4611      	mov	r1, r2
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff fa32 	bl	800f80e <ld_clust>
 80103aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103b0:	2200      	movs	r2, #0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff fa4a 	bl	800f84c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80103b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ba:	331c      	adds	r3, #28
 80103bc:	2100      	movs	r1, #0
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fe fac6 	bl	800e950 <st_dword>
					fs->wflag = 1;
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	2201      	movs	r2, #1
 80103c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80103ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d037      	beq.n	8010440 <f_open+0x1d4>
						dw = fs->winsect;
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80103d6:	f107 0314 	add.w	r3, r7, #20
 80103da:	2200      	movs	r2, #0
 80103dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe ff5d 	bl	800f29e <remove_chain>
 80103e4:	4603      	mov	r3, r0
 80103e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80103ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d126      	bne.n	8010440 <f_open+0x1d4>
							res = move_window(fs, dw);
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fe fd04 	bl	800ee04 <move_window>
 80103fc:	4603      	mov	r3, r0
 80103fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010406:	3a01      	subs	r2, #1
 8010408:	60da      	str	r2, [r3, #12]
 801040a:	e019      	b.n	8010440 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801040c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010410:	2b00      	cmp	r3, #0
 8010412:	d115      	bne.n	8010440 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010414:	7ebb      	ldrb	r3, [r7, #26]
 8010416:	f003 0310 	and.w	r3, r3, #16
 801041a:	2b00      	cmp	r3, #0
 801041c:	d003      	beq.n	8010426 <f_open+0x1ba>
					res = FR_NO_FILE;
 801041e:	2304      	movs	r3, #4
 8010420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010424:	e00c      	b.n	8010440 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010426:	79fb      	ldrb	r3, [r7, #7]
 8010428:	f003 0302 	and.w	r3, r3, #2
 801042c:	2b00      	cmp	r3, #0
 801042e:	d007      	beq.n	8010440 <f_open+0x1d4>
 8010430:	7ebb      	ldrb	r3, [r7, #26]
 8010432:	f003 0301 	and.w	r3, r3, #1
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <f_open+0x1d4>
						res = FR_DENIED;
 801043a:	2307      	movs	r3, #7
 801043c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010444:	2b00      	cmp	r3, #0
 8010446:	d128      	bne.n	801049a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	f003 0308 	and.w	r3, r3, #8
 801044e:	2b00      	cmp	r3, #0
 8010450:	d003      	beq.n	801045a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010458:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	f023 0301 	bic.w	r3, r3, #1
 801046e:	2b00      	cmp	r3, #0
 8010470:	bf14      	ite	ne
 8010472:	2301      	movne	r3, #1
 8010474:	2300      	moveq	r3, #0
 8010476:	b2db      	uxtb	r3, r3
 8010478:	461a      	mov	r2, r3
 801047a:	f107 0314 	add.w	r3, r7, #20
 801047e:	4611      	mov	r1, r2
 8010480:	4618      	mov	r0, r3
 8010482:	f7fe fb8d 	bl	800eba0 <inc_lock>
 8010486:	4602      	mov	r2, r0
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	691b      	ldr	r3, [r3, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d102      	bne.n	801049a <f_open+0x22e>
 8010494:	2302      	movs	r3, #2
 8010496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801049a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f040 8095 	bne.w	80105ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff f9af 	bl	800f80e <ld_clust>
 80104b0:	4602      	mov	r2, r0
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80104b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b8:	331c      	adds	r3, #28
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fe fa0a 	bl	800e8d4 <ld_dword>
 80104c0:	4602      	mov	r2, r0
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2200      	movs	r2, #0
 80104ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	88da      	ldrh	r2, [r3, #6]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	79fa      	ldrb	r2, [r7, #7]
 80104de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2200      	movs	r2, #0
 80104e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2200      	movs	r2, #0
 80104ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	3330      	adds	r3, #48	; 0x30
 80104f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104fa:	2100      	movs	r1, #0
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fe fa74 	bl	800e9ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010502:	79fb      	ldrb	r3, [r7, #7]
 8010504:	f003 0320 	and.w	r3, r3, #32
 8010508:	2b00      	cmp	r3, #0
 801050a:	d060      	beq.n	80105ce <f_open+0x362>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d05c      	beq.n	80105ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	68da      	ldr	r2, [r3, #12]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	895b      	ldrh	r3, [r3, #10]
 8010520:	025b      	lsls	r3, r3, #9
 8010522:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	657b      	str	r3, [r7, #84]	; 0x54
 8010530:	e016      	b.n	8010560 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fd1f 	bl	800ef7a <get_fat>
 801053c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801053e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010540:	2b01      	cmp	r3, #1
 8010542:	d802      	bhi.n	801054a <f_open+0x2de>
 8010544:	2302      	movs	r3, #2
 8010546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801054a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801054c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010550:	d102      	bne.n	8010558 <f_open+0x2ec>
 8010552:	2301      	movs	r3, #1
 8010554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801055a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	657b      	str	r3, [r7, #84]	; 0x54
 8010560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010564:	2b00      	cmp	r3, #0
 8010566:	d103      	bne.n	8010570 <f_open+0x304>
 8010568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801056a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801056c:	429a      	cmp	r2, r3
 801056e:	d8e0      	bhi.n	8010532 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010574:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801057a:	2b00      	cmp	r3, #0
 801057c:	d127      	bne.n	80105ce <f_open+0x362>
 801057e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010584:	2b00      	cmp	r3, #0
 8010586:	d022      	beq.n	80105ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fcd5 	bl	800ef3c <clust2sect>
 8010592:	6478      	str	r0, [r7, #68]	; 0x44
 8010594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010596:	2b00      	cmp	r3, #0
 8010598:	d103      	bne.n	80105a2 <f_open+0x336>
						res = FR_INT_ERR;
 801059a:	2302      	movs	r3, #2
 801059c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105a0:	e015      	b.n	80105ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80105a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105a4:	0a5a      	lsrs	r2, r3, #9
 80105a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a8:	441a      	add	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	7858      	ldrb	r0, [r3, #1]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6a1a      	ldr	r2, [r3, #32]
 80105bc:	2301      	movs	r3, #1
 80105be:	f7fe f913 	bl	800e7e8 <disk_read>
 80105c2:	4603      	mov	r3, r0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d002      	beq.n	80105ce <f_open+0x362>
 80105c8:	2301      	movs	r3, #1
 80105ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80105ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <f_open+0x370>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3760      	adds	r7, #96	; 0x60
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08c      	sub	sp, #48	; 0x30
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
 80105f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2200      	movs	r2, #0
 80105fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f107 0210 	add.w	r2, r7, #16
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff fdb3 	bl	8010174 <validate>
 801060e:	4603      	mov	r3, r0
 8010610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010618:	2b00      	cmp	r3, #0
 801061a:	d107      	bne.n	801062c <f_write+0x44>
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	7d5b      	ldrb	r3, [r3, #21]
 8010620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <f_write+0x4a>
 801062c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010630:	e14b      	b.n	80108ca <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	7d1b      	ldrb	r3, [r3, #20]
 8010636:	f003 0302 	and.w	r3, r3, #2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <f_write+0x5a>
 801063e:	2307      	movs	r3, #7
 8010640:	e143      	b.n	80108ca <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	699a      	ldr	r2, [r3, #24]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	441a      	add	r2, r3
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	429a      	cmp	r2, r3
 8010650:	f080 812d 	bcs.w	80108ae <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	699b      	ldr	r3, [r3, #24]
 8010658:	43db      	mvns	r3, r3
 801065a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801065c:	e127      	b.n	80108ae <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	699b      	ldr	r3, [r3, #24]
 8010662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010666:	2b00      	cmp	r3, #0
 8010668:	f040 80e3 	bne.w	8010832 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	0a5b      	lsrs	r3, r3, #9
 8010672:	693a      	ldr	r2, [r7, #16]
 8010674:	8952      	ldrh	r2, [r2, #10]
 8010676:	3a01      	subs	r2, #1
 8010678:	4013      	ands	r3, r2
 801067a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d143      	bne.n	801070a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d10c      	bne.n	80106a4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010692:	2b00      	cmp	r3, #0
 8010694:	d11a      	bne.n	80106cc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2100      	movs	r1, #0
 801069a:	4618      	mov	r0, r3
 801069c:	f7fe fe64 	bl	800f368 <create_chain>
 80106a0:	62b8      	str	r0, [r7, #40]	; 0x28
 80106a2:	e013      	b.n	80106cc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d007      	beq.n	80106bc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	699b      	ldr	r3, [r3, #24]
 80106b0:	4619      	mov	r1, r3
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7fe fef0 	bl	800f498 <clmt_clust>
 80106b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80106ba:	e007      	b.n	80106cc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80106bc:	68fa      	ldr	r2, [r7, #12]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	69db      	ldr	r3, [r3, #28]
 80106c2:	4619      	mov	r1, r3
 80106c4:	4610      	mov	r0, r2
 80106c6:	f7fe fe4f 	bl	800f368 <create_chain>
 80106ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80106cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 80f2 	beq.w	80108b8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80106d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d104      	bne.n	80106e4 <f_write+0xfc>
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2202      	movs	r2, #2
 80106de:	755a      	strb	r2, [r3, #21]
 80106e0:	2302      	movs	r3, #2
 80106e2:	e0f2      	b.n	80108ca <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ea:	d104      	bne.n	80106f6 <f_write+0x10e>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2201      	movs	r2, #1
 80106f0:	755a      	strb	r2, [r3, #21]
 80106f2:	2301      	movs	r3, #1
 80106f4:	e0e9      	b.n	80108ca <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d102      	bne.n	801070a <f_write+0x122>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010708:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	7d1b      	ldrb	r3, [r3, #20]
 801070e:	b25b      	sxtb	r3, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	da18      	bge.n	8010746 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	7858      	ldrb	r0, [r3, #1]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	6a1a      	ldr	r2, [r3, #32]
 8010722:	2301      	movs	r3, #1
 8010724:	f7fe f880 	bl	800e828 <disk_write>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d004      	beq.n	8010738 <f_write+0x150>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2201      	movs	r2, #1
 8010732:	755a      	strb	r2, [r3, #21]
 8010734:	2301      	movs	r3, #1
 8010736:	e0c8      	b.n	80108ca <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	7d1b      	ldrb	r3, [r3, #20]
 801073c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010740:	b2da      	uxtb	r2, r3
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	69db      	ldr	r3, [r3, #28]
 801074c:	4619      	mov	r1, r3
 801074e:	4610      	mov	r0, r2
 8010750:	f7fe fbf4 	bl	800ef3c <clust2sect>
 8010754:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d104      	bne.n	8010766 <f_write+0x17e>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2202      	movs	r2, #2
 8010760:	755a      	strb	r2, [r3, #21]
 8010762:	2302      	movs	r3, #2
 8010764:	e0b1      	b.n	80108ca <f_write+0x2e2>
			sect += csect;
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	4413      	add	r3, r2
 801076c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	0a5b      	lsrs	r3, r3, #9
 8010772:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d03c      	beq.n	80107f4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801077a:	69ba      	ldr	r2, [r7, #24]
 801077c:	6a3b      	ldr	r3, [r7, #32]
 801077e:	4413      	add	r3, r2
 8010780:	693a      	ldr	r2, [r7, #16]
 8010782:	8952      	ldrh	r2, [r2, #10]
 8010784:	4293      	cmp	r3, r2
 8010786:	d905      	bls.n	8010794 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	895b      	ldrh	r3, [r3, #10]
 801078c:	461a      	mov	r2, r3
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	7858      	ldrb	r0, [r3, #1]
 8010798:	6a3b      	ldr	r3, [r7, #32]
 801079a:	697a      	ldr	r2, [r7, #20]
 801079c:	69f9      	ldr	r1, [r7, #28]
 801079e:	f7fe f843 	bl	800e828 <disk_write>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d004      	beq.n	80107b2 <f_write+0x1ca>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2201      	movs	r2, #1
 80107ac:	755a      	strb	r2, [r3, #21]
 80107ae:	2301      	movs	r3, #1
 80107b0:	e08b      	b.n	80108ca <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6a1a      	ldr	r2, [r3, #32]
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	1ad3      	subs	r3, r2, r3
 80107ba:	6a3a      	ldr	r2, [r7, #32]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d915      	bls.n	80107ec <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6a1a      	ldr	r2, [r3, #32]
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	025b      	lsls	r3, r3, #9
 80107d0:	69fa      	ldr	r2, [r7, #28]
 80107d2:	4413      	add	r3, r2
 80107d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107d8:	4619      	mov	r1, r3
 80107da:	f7fe f8e5 	bl	800e9a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	7d1b      	ldrb	r3, [r3, #20]
 80107e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107e6:	b2da      	uxtb	r2, r3
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80107ec:	6a3b      	ldr	r3, [r7, #32]
 80107ee:	025b      	lsls	r3, r3, #9
 80107f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80107f2:	e03f      	b.n	8010874 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1b      	ldr	r3, [r3, #32]
 80107f8:	697a      	ldr	r2, [r7, #20]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d016      	beq.n	801082c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	699a      	ldr	r2, [r3, #24]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010806:	429a      	cmp	r2, r3
 8010808:	d210      	bcs.n	801082c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	7858      	ldrb	r0, [r3, #1]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010814:	2301      	movs	r3, #1
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	f7fd ffe6 	bl	800e7e8 <disk_read>
 801081c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801081e:	2b00      	cmp	r3, #0
 8010820:	d004      	beq.n	801082c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2201      	movs	r2, #1
 8010826:	755a      	strb	r2, [r3, #21]
 8010828:	2301      	movs	r3, #1
 801082a:	e04e      	b.n	80108ca <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	697a      	ldr	r2, [r7, #20]
 8010830:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	699b      	ldr	r3, [r3, #24]
 8010836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801083a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801083e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	429a      	cmp	r2, r3
 8010846:	d901      	bls.n	801084c <f_write+0x264>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801085a:	4413      	add	r3, r2
 801085c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801085e:	69f9      	ldr	r1, [r7, #28]
 8010860:	4618      	mov	r0, r3
 8010862:	f7fe f8a1 	bl	800e9a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	7d1b      	ldrb	r3, [r3, #20]
 801086a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801086e:	b2da      	uxtb	r2, r3
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010874:	69fa      	ldr	r2, [r7, #28]
 8010876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010878:	4413      	add	r3, r2
 801087a:	61fb      	str	r3, [r7, #28]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	699a      	ldr	r2, [r3, #24]
 8010880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010882:	441a      	add	r2, r3
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	619a      	str	r2, [r3, #24]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	68da      	ldr	r2, [r3, #12]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	699b      	ldr	r3, [r3, #24]
 8010890:	429a      	cmp	r2, r3
 8010892:	bf38      	it	cc
 8010894:	461a      	movcc	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	60da      	str	r2, [r3, #12]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	441a      	add	r2, r3
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	601a      	str	r2, [r3, #0]
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f47f aed4 	bne.w	801065e <f_write+0x76>
 80108b6:	e000      	b.n	80108ba <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80108b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	7d1b      	ldrb	r3, [r3, #20]
 80108be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3730      	adds	r7, #48	; 0x30
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b086      	sub	sp, #24
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f107 0208 	add.w	r2, r7, #8
 80108e0:	4611      	mov	r1, r2
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff fc46 	bl	8010174 <validate>
 80108e8:	4603      	mov	r3, r0
 80108ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108ec:	7dfb      	ldrb	r3, [r7, #23]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d168      	bne.n	80109c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	7d1b      	ldrb	r3, [r3, #20]
 80108f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d062      	beq.n	80109c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	7d1b      	ldrb	r3, [r3, #20]
 8010902:	b25b      	sxtb	r3, r3
 8010904:	2b00      	cmp	r3, #0
 8010906:	da15      	bge.n	8010934 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	7858      	ldrb	r0, [r3, #1]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6a1a      	ldr	r2, [r3, #32]
 8010916:	2301      	movs	r3, #1
 8010918:	f7fd ff86 	bl	800e828 <disk_write>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <f_sync+0x54>
 8010922:	2301      	movs	r3, #1
 8010924:	e04f      	b.n	80109c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	7d1b      	ldrb	r3, [r3, #20]
 801092a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801092e:	b2da      	uxtb	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010934:	f7fb fce6 	bl	800c304 <get_fattime>
 8010938:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010940:	4619      	mov	r1, r3
 8010942:	4610      	mov	r0, r2
 8010944:	f7fe fa5e 	bl	800ee04 <move_window>
 8010948:	4603      	mov	r3, r0
 801094a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801094c:	7dfb      	ldrb	r3, [r7, #23]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d138      	bne.n	80109c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010956:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	330b      	adds	r3, #11
 801095c:	781a      	ldrb	r2, [r3, #0]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	330b      	adds	r3, #11
 8010962:	f042 0220 	orr.w	r2, r2, #32
 8010966:	b2d2      	uxtb	r2, r2
 8010968:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6818      	ldr	r0, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	461a      	mov	r2, r3
 8010974:	68f9      	ldr	r1, [r7, #12]
 8010976:	f7fe ff69 	bl	800f84c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f103 021c 	add.w	r2, r3, #28
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	4619      	mov	r1, r3
 8010986:	4610      	mov	r0, r2
 8010988:	f7fd ffe2 	bl	800e950 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	3316      	adds	r3, #22
 8010990:	6939      	ldr	r1, [r7, #16]
 8010992:	4618      	mov	r0, r3
 8010994:	f7fd ffdc 	bl	800e950 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	3312      	adds	r3, #18
 801099c:	2100      	movs	r1, #0
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fd ffbb 	bl	800e91a <st_word>
					fs->wflag = 1;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2201      	movs	r2, #1
 80109a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fe fa57 	bl	800ee60 <sync_fs>
 80109b2:	4603      	mov	r3, r0
 80109b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	7d1b      	ldrb	r3, [r3, #20]
 80109ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80109c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}

080109ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b084      	sub	sp, #16
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff ff7b 	bl	80108d2 <f_sync>
 80109dc:	4603      	mov	r3, r0
 80109de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d118      	bne.n	8010a18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f107 0208 	add.w	r2, r7, #8
 80109ec:	4611      	mov	r1, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7ff fbc0 	bl	8010174 <validate>
 80109f4:	4603      	mov	r3, r0
 80109f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80109f8:	7bfb      	ldrb	r3, [r7, #15]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10c      	bne.n	8010a18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	691b      	ldr	r3, [r3, #16]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fe f95a 	bl	800ecbc <dec_lock>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010a0c:	7bfb      	ldrb	r3, [r7, #15]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d102      	bne.n	8010a18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2200      	movs	r2, #0
 8010a16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010a22:	b580      	push	{r7, lr}
 8010a24:	b090      	sub	sp, #64	; 0x40
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
 8010a2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f107 0208 	add.w	r2, r7, #8
 8010a32:	4611      	mov	r1, r2
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7ff fb9d 	bl	8010174 <validate>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010a40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d103      	bne.n	8010a50 <f_lseek+0x2e>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	7d5b      	ldrb	r3, [r3, #21]
 8010a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010a50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d002      	beq.n	8010a5e <f_lseek+0x3c>
 8010a58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010a5c:	e1e6      	b.n	8010e2c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 80d1 	beq.w	8010c0a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a6e:	d15a      	bne.n	8010b26 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a74:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a78:	1d1a      	adds	r2, r3, #4
 8010a7a:	627a      	str	r2, [r7, #36]	; 0x24
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	617b      	str	r3, [r7, #20]
 8010a80:	2302      	movs	r3, #2
 8010a82:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d03a      	beq.n	8010b06 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	613b      	str	r3, [r7, #16]
 8010a94:	2300      	movs	r3, #0
 8010a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9a:	3302      	adds	r3, #2
 8010a9c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	60fb      	str	r3, [r7, #12]
 8010aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fe fa64 	bl	800ef7a <get_fat>
 8010ab2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d804      	bhi.n	8010ac4 <f_lseek+0xa2>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2202      	movs	r2, #2
 8010abe:	755a      	strb	r2, [r3, #21]
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	e1b3      	b.n	8010e2c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aca:	d104      	bne.n	8010ad6 <f_lseek+0xb4>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	755a      	strb	r2, [r3, #21]
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e1aa      	b.n	8010e2c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d0de      	beq.n	8010a9e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d809      	bhi.n	8010afc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	1d1a      	adds	r2, r3, #4
 8010aec:	627a      	str	r2, [r7, #36]	; 0x24
 8010aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010af0:	601a      	str	r2, [r3, #0]
 8010af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af4:	1d1a      	adds	r2, r3, #4
 8010af6:	627a      	str	r2, [r7, #36]	; 0x24
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	695b      	ldr	r3, [r3, #20]
 8010b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d3c4      	bcc.n	8010a90 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d803      	bhi.n	8010b1e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b18:	2200      	movs	r2, #0
 8010b1a:	601a      	str	r2, [r3, #0]
 8010b1c:	e184      	b.n	8010e28 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010b1e:	2311      	movs	r3, #17
 8010b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010b24:	e180      	b.n	8010e28 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	683a      	ldr	r2, [r7, #0]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d902      	bls.n	8010b36 <f_lseek+0x114>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	683a      	ldr	r2, [r7, #0]
 8010b3a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 8172 	beq.w	8010e28 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	3b01      	subs	r3, #1
 8010b48:	4619      	mov	r1, r3
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7fe fca4 	bl	800f498 <clmt_clust>
 8010b50:	4602      	mov	r2, r0
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	69db      	ldr	r3, [r3, #28]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	4610      	mov	r0, r2
 8010b60:	f7fe f9ec 	bl	800ef3c <clust2sect>
 8010b64:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d104      	bne.n	8010b76 <f_lseek+0x154>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2202      	movs	r2, #2
 8010b70:	755a      	strb	r2, [r3, #21]
 8010b72:	2302      	movs	r3, #2
 8010b74:	e15a      	b.n	8010e2c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	0a5b      	lsrs	r3, r3, #9
 8010b7c:	68ba      	ldr	r2, [r7, #8]
 8010b7e:	8952      	ldrh	r2, [r2, #10]
 8010b80:	3a01      	subs	r2, #1
 8010b82:	4013      	ands	r3, r2
 8010b84:	69ba      	ldr	r2, [r7, #24]
 8010b86:	4413      	add	r3, r2
 8010b88:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f000 8148 	beq.w	8010e28 <f_lseek+0x406>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6a1b      	ldr	r3, [r3, #32]
 8010b9c:	69ba      	ldr	r2, [r7, #24]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	f000 8142 	beq.w	8010e28 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	7d1b      	ldrb	r3, [r3, #20]
 8010ba8:	b25b      	sxtb	r3, r3
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	da18      	bge.n	8010be0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	7858      	ldrb	r0, [r3, #1]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6a1a      	ldr	r2, [r3, #32]
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f7fd fe33 	bl	800e828 <disk_write>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d004      	beq.n	8010bd2 <f_lseek+0x1b0>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	755a      	strb	r2, [r3, #21]
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e12c      	b.n	8010e2c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	7d1b      	ldrb	r3, [r3, #20]
 8010bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	7858      	ldrb	r0, [r3, #1]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bea:	2301      	movs	r3, #1
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	f7fd fdfb 	bl	800e7e8 <disk_read>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d004      	beq.n	8010c02 <f_lseek+0x1e0>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	755a      	strb	r2, [r3, #21]
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e114      	b.n	8010e2c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	69ba      	ldr	r2, [r7, #24]
 8010c06:	621a      	str	r2, [r3, #32]
 8010c08:	e10e      	b.n	8010e28 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d908      	bls.n	8010c26 <f_lseek+0x204>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	7d1b      	ldrb	r3, [r3, #20]
 8010c18:	f003 0302 	and.w	r3, r3, #2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d102      	bne.n	8010c26 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c34:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 80a7 	beq.w	8010d8c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	895b      	ldrh	r3, [r3, #10]
 8010c42:	025b      	lsls	r3, r3, #9
 8010c44:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010c46:	6a3b      	ldr	r3, [r7, #32]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d01b      	beq.n	8010c84 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	1e5a      	subs	r2, r3, #1
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8010c56:	6a3b      	ldr	r3, [r7, #32]
 8010c58:	1e59      	subs	r1, r3, #1
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d30f      	bcc.n	8010c84 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010c64:	6a3b      	ldr	r3, [r7, #32]
 8010c66:	1e5a      	subs	r2, r3, #1
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	425b      	negs	r3, r3
 8010c6c:	401a      	ands	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	69db      	ldr	r3, [r3, #28]
 8010c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c82:	e022      	b.n	8010cca <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d119      	bne.n	8010cc4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2100      	movs	r1, #0
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe fb67 	bl	800f368 <create_chain>
 8010c9a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d104      	bne.n	8010cac <f_lseek+0x28a>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2202      	movs	r2, #2
 8010ca6:	755a      	strb	r2, [r3, #21]
 8010ca8:	2302      	movs	r3, #2
 8010caa:	e0bf      	b.n	8010e2c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cb2:	d104      	bne.n	8010cbe <f_lseek+0x29c>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	755a      	strb	r2, [r3, #21]
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e0b6      	b.n	8010e2c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cc2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cc8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d05d      	beq.n	8010d8c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010cd0:	e03a      	b.n	8010d48 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	603b      	str	r3, [r7, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	699a      	ldr	r2, [r3, #24]
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	441a      	add	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	7d1b      	ldrb	r3, [r3, #20]
 8010cea:	f003 0302 	and.w	r3, r3, #2
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00b      	beq.n	8010d0a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe fb36 	bl	800f368 <create_chain>
 8010cfc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d108      	bne.n	8010d16 <f_lseek+0x2f4>
							ofs = 0; break;
 8010d04:	2300      	movs	r3, #0
 8010d06:	603b      	str	r3, [r7, #0]
 8010d08:	e022      	b.n	8010d50 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fe f933 	bl	800ef7a <get_fat>
 8010d14:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d1c:	d104      	bne.n	8010d28 <f_lseek+0x306>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2201      	movs	r2, #1
 8010d22:	755a      	strb	r2, [r3, #21]
 8010d24:	2301      	movs	r3, #1
 8010d26:	e081      	b.n	8010e2c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d904      	bls.n	8010d38 <f_lseek+0x316>
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	695b      	ldr	r3, [r3, #20]
 8010d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d304      	bcc.n	8010d42 <f_lseek+0x320>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	755a      	strb	r2, [r3, #21]
 8010d3e:	2302      	movs	r3, #2
 8010d40:	e074      	b.n	8010e2c <f_lseek+0x40a>
					fp->clust = clst;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d46:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d8c0      	bhi.n	8010cd2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	699a      	ldr	r2, [r3, #24]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	441a      	add	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d012      	beq.n	8010d8c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fe f8e6 	bl	800ef3c <clust2sect>
 8010d70:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d104      	bne.n	8010d82 <f_lseek+0x360>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	755a      	strb	r2, [r3, #21]
 8010d7e:	2302      	movs	r3, #2
 8010d80:	e054      	b.n	8010e2c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	0a5b      	lsrs	r3, r3, #9
 8010d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d88:	4413      	add	r3, r2
 8010d8a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	699a      	ldr	r2, [r3, #24]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d90a      	bls.n	8010dae <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	699a      	ldr	r2, [r3, #24]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	7d1b      	ldrb	r3, [r3, #20]
 8010da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010da8:	b2da      	uxtb	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d036      	beq.n	8010e28 <f_lseek+0x406>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6a1b      	ldr	r3, [r3, #32]
 8010dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d031      	beq.n	8010e28 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	7d1b      	ldrb	r3, [r3, #20]
 8010dc8:	b25b      	sxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	da18      	bge.n	8010e00 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	7858      	ldrb	r0, [r3, #1]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a1a      	ldr	r2, [r3, #32]
 8010ddc:	2301      	movs	r3, #1
 8010dde:	f7fd fd23 	bl	800e828 <disk_write>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <f_lseek+0x3d0>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2201      	movs	r2, #1
 8010dec:	755a      	strb	r2, [r3, #21]
 8010dee:	2301      	movs	r3, #1
 8010df0:	e01c      	b.n	8010e2c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	7d1b      	ldrb	r3, [r3, #20]
 8010df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	7858      	ldrb	r0, [r3, #1]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e0e:	f7fd fceb 	bl	800e7e8 <disk_read>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d004      	beq.n	8010e22 <f_lseek+0x400>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	755a      	strb	r2, [r3, #21]
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e004      	b.n	8010e2c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e26:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010e28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3740      	adds	r7, #64	; 0x40
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	2b0a      	cmp	r3, #10
 8010e44:	d103      	bne.n	8010e4e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010e46:	210d      	movs	r1, #13
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7ff fff3 	bl	8010e34 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	db25      	blt.n	8010ea6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	1c5a      	adds	r2, r3, #1
 8010e5e:	60fa      	str	r2, [r7, #12]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	4413      	add	r3, r2
 8010e64:	78fa      	ldrb	r2, [r7, #3]
 8010e66:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b3c      	cmp	r3, #60	; 0x3c
 8010e6c:	dd12      	ble.n	8010e94 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f103 010c 	add.w	r1, r3, #12
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	f107 0308 	add.w	r3, r7, #8
 8010e7e:	f7ff fbb3 	bl	80105e8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d101      	bne.n	8010e8e <putc_bfd+0x5a>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e001      	b.n	8010e92 <putc_bfd+0x5e>
 8010e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e92:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	689b      	ldr	r3, [r3, #8]
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	609a      	str	r2, [r3, #8]
 8010ea4:	e000      	b.n	8010ea8 <putc_bfd+0x74>
	if (i < 0) return;
 8010ea6:	bf00      	nop
}
 8010ea8:	3710      	adds	r7, #16
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b084      	sub	sp, #16
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	db16      	blt.n	8010eec <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6818      	ldr	r0, [r3, #0]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f103 010c 	add.w	r1, r3, #12
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	461a      	mov	r2, r3
 8010ece:	f107 030c 	add.w	r3, r7, #12
 8010ed2:	f7ff fb89 	bl	80105e8 <f_write>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d107      	bne.n	8010eec <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d102      	bne.n	8010eec <putc_flush+0x3e>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	689b      	ldr	r3, [r3, #8]
 8010eea:	e001      	b.n	8010ef0 <putc_flush+0x42>
	return EOF;
 8010eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3710      	adds	r7, #16
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	683a      	ldr	r2, [r7, #0]
 8010f06:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	605a      	str	r2, [r3, #4]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	685a      	ldr	r2, [r3, #4]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	609a      	str	r2, [r3, #8]
}
 8010f16:	bf00      	nop
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
	...

08010f24 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8010f24:	b40e      	push	{r1, r2, r3}
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b0a7      	sub	sp, #156	; 0x9c
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8010f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f32:	6879      	ldr	r1, [r7, #4]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7ff ffdf 	bl	8010ef8 <putc_init>

	va_start(arp, fmt);
 8010f3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010f3e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8010f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8010f50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 81f2 	beq.w	801133e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8010f5a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010f5e:	2b25      	cmp	r3, #37	; 0x25
 8010f60:	d008      	beq.n	8010f74 <f_printf+0x50>
			putc_bfd(&pb, c);
 8010f62:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff ff61 	bl	8010e34 <putc_bfd>
			continue;
 8010f72:	e1e3      	b.n	801133c <f_printf+0x418>
		}
		w = f = 0;
 8010f74:	2300      	movs	r3, #0
 8010f76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010f80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f84:	1c5a      	adds	r2, r3, #1
 8010f86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010f90:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010f94:	2b30      	cmp	r3, #48	; 0x30
 8010f96:	d10b      	bne.n	8010fb0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010fa2:	1c5a      	adds	r2, r3, #1
 8010fa4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010fae:	e024      	b.n	8010ffa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010fb0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8010fb6:	d120      	bne.n	8010ffa <f_printf+0xd6>
				f = 2; c = *fmt++;
 8010fb8:	2302      	movs	r3, #2
 8010fba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010fc2:	1c5a      	adds	r2, r3, #1
 8010fc4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010fce:	e014      	b.n	8010ffa <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010fd0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010fd4:	4613      	mov	r3, r2
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	4413      	add	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	461a      	mov	r2, r3
 8010fde:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010fe2:	4413      	add	r3, r2
 8010fe4:	3b30      	subs	r3, #48	; 0x30
 8010fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8010fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010fee:	1c5a      	adds	r2, r3, #1
 8010ff0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8010ffa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8011000:	d903      	bls.n	801100a <f_printf+0xe6>
 8011002:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011006:	2b39      	cmp	r3, #57	; 0x39
 8011008:	d9e2      	bls.n	8010fd0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801100a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801100e:	2b6c      	cmp	r3, #108	; 0x6c
 8011010:	d003      	beq.n	801101a <f_printf+0xf6>
 8011012:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011016:	2b4c      	cmp	r3, #76	; 0x4c
 8011018:	d10d      	bne.n	8011036 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801101a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801101e:	f043 0304 	orr.w	r3, r3, #4
 8011022:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8011026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8011036:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 8181 	beq.w	8011342 <f_printf+0x41e>
		d = c;
 8011040:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011044:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8011048:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801104c:	2b60      	cmp	r3, #96	; 0x60
 801104e:	d908      	bls.n	8011062 <f_printf+0x13e>
 8011050:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8011054:	2b7a      	cmp	r3, #122	; 0x7a
 8011056:	d804      	bhi.n	8011062 <f_printf+0x13e>
 8011058:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801105c:	3b20      	subs	r3, #32
 801105e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8011062:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8011066:	3b42      	subs	r3, #66	; 0x42
 8011068:	2b16      	cmp	r3, #22
 801106a:	f200 8098 	bhi.w	801119e <f_printf+0x27a>
 801106e:	a201      	add	r2, pc, #4	; (adr r2, 8011074 <f_printf+0x150>)
 8011070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011074:	0801117f 	.word	0x0801117f
 8011078:	08011167 	.word	0x08011167
 801107c:	0801118f 	.word	0x0801118f
 8011080:	0801119f 	.word	0x0801119f
 8011084:	0801119f 	.word	0x0801119f
 8011088:	0801119f 	.word	0x0801119f
 801108c:	0801119f 	.word	0x0801119f
 8011090:	0801119f 	.word	0x0801119f
 8011094:	0801119f 	.word	0x0801119f
 8011098:	0801119f 	.word	0x0801119f
 801109c:	0801119f 	.word	0x0801119f
 80110a0:	0801119f 	.word	0x0801119f
 80110a4:	0801119f 	.word	0x0801119f
 80110a8:	08011187 	.word	0x08011187
 80110ac:	0801119f 	.word	0x0801119f
 80110b0:	0801119f 	.word	0x0801119f
 80110b4:	0801119f 	.word	0x0801119f
 80110b8:	080110d1 	.word	0x080110d1
 80110bc:	0801119f 	.word	0x0801119f
 80110c0:	0801118f 	.word	0x0801118f
 80110c4:	0801119f 	.word	0x0801119f
 80110c8:	0801119f 	.word	0x0801119f
 80110cc:	08011197 	.word	0x08011197
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80110d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110d2:	1d1a      	adds	r2, r3, #4
 80110d4:	67ba      	str	r2, [r7, #120]	; 0x78
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80110da:	2300      	movs	r3, #0
 80110dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80110e0:	e004      	b.n	80110ec <f_printf+0x1c8>
 80110e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110e6:	3301      	adds	r3, #1
 80110e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80110ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80110ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110f2:	4413      	add	r3, r2
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1f3      	bne.n	80110e2 <f_printf+0x1be>
			if (!(f & 2)) {
 80110fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80110fe:	f003 0302 	and.w	r3, r3, #2
 8011102:	2b00      	cmp	r3, #0
 8011104:	d11a      	bne.n	801113c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011106:	e005      	b.n	8011114 <f_printf+0x1f0>
 8011108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801110c:	2120      	movs	r1, #32
 801110e:	4618      	mov	r0, r3
 8011110:	f7ff fe90 	bl	8010e34 <putc_bfd>
 8011114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011118:	1c5a      	adds	r2, r3, #1
 801111a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801111e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011122:	429a      	cmp	r2, r3
 8011124:	d8f0      	bhi.n	8011108 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011126:	e009      	b.n	801113c <f_printf+0x218>
 8011128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801112a:	1c5a      	adds	r2, r3, #1
 801112c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801112e:	781a      	ldrb	r2, [r3, #0]
 8011130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011134:	4611      	mov	r1, r2
 8011136:	4618      	mov	r0, r3
 8011138:	f7ff fe7c 	bl	8010e34 <putc_bfd>
 801113c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1f1      	bne.n	8011128 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011144:	e005      	b.n	8011152 <f_printf+0x22e>
 8011146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801114a:	2120      	movs	r1, #32
 801114c:	4618      	mov	r0, r3
 801114e:	f7ff fe71 	bl	8010e34 <putc_bfd>
 8011152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801115c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011160:	429a      	cmp	r2, r3
 8011162:	d8f0      	bhi.n	8011146 <f_printf+0x222>
			continue;
 8011164:	e0ea      	b.n	801133c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011168:	1d1a      	adds	r2, r3, #4
 801116a:	67ba      	str	r2, [r7, #120]	; 0x78
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	b2da      	uxtb	r2, r3
 8011170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011174:	4611      	mov	r1, r2
 8011176:	4618      	mov	r0, r3
 8011178:	f7ff fe5c 	bl	8010e34 <putc_bfd>
 801117c:	e0de      	b.n	801133c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801117e:	2302      	movs	r3, #2
 8011180:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8011184:	e014      	b.n	80111b0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011186:	2308      	movs	r3, #8
 8011188:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801118c:	e010      	b.n	80111b0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801118e:	230a      	movs	r3, #10
 8011190:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8011194:	e00c      	b.n	80111b0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011196:	2310      	movs	r3, #16
 8011198:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801119c:	e008      	b.n	80111b0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801119e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80111a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111a6:	4611      	mov	r1, r2
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff fe43 	bl	8010e34 <putc_bfd>
 80111ae:	e0c5      	b.n	801133c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80111b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80111b4:	f003 0304 	and.w	r3, r3, #4
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d004      	beq.n	80111c6 <f_printf+0x2a2>
 80111bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111be:	1d1a      	adds	r2, r3, #4
 80111c0:	67ba      	str	r2, [r7, #120]	; 0x78
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	e00c      	b.n	80111e0 <f_printf+0x2bc>
 80111c6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80111ca:	2b44      	cmp	r3, #68	; 0x44
 80111cc:	d104      	bne.n	80111d8 <f_printf+0x2b4>
 80111ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111d0:	1d1a      	adds	r2, r3, #4
 80111d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	e003      	b.n	80111e0 <f_printf+0x2bc>
 80111d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111da:	1d1a      	adds	r2, r3, #4
 80111dc:	67ba      	str	r2, [r7, #120]	; 0x78
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80111e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80111e8:	2b44      	cmp	r3, #68	; 0x44
 80111ea:	d10e      	bne.n	801120a <f_printf+0x2e6>
 80111ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	da0a      	bge.n	801120a <f_printf+0x2e6>
			v = 0 - v;
 80111f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111f8:	425b      	negs	r3, r3
 80111fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80111fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011202:	f043 0308 	orr.w	r3, r3, #8
 8011206:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 801120a:	2300      	movs	r3, #0
 801120c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8011210:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8011214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011218:	fbb3 f1f2 	udiv	r1, r3, r2
 801121c:	fb01 f202 	mul.w	r2, r1, r2
 8011220:	1a9b      	subs	r3, r3, r2
 8011222:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8011226:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801122a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011236:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801123a:	2b09      	cmp	r3, #9
 801123c:	d90b      	bls.n	8011256 <f_printf+0x332>
 801123e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011242:	2b78      	cmp	r3, #120	; 0x78
 8011244:	d101      	bne.n	801124a <f_printf+0x326>
 8011246:	2227      	movs	r2, #39	; 0x27
 8011248:	e000      	b.n	801124c <f_printf+0x328>
 801124a:	2207      	movs	r2, #7
 801124c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8011250:	4413      	add	r3, r2
 8011252:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8011256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801125a:	1c5a      	adds	r2, r3, #1
 801125c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8011260:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8011264:	3230      	adds	r2, #48	; 0x30
 8011266:	b2d2      	uxtb	r2, r2
 8011268:	3398      	adds	r3, #152	; 0x98
 801126a:	443b      	add	r3, r7
 801126c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011274:	2b00      	cmp	r3, #0
 8011276:	d003      	beq.n	8011280 <f_printf+0x35c>
 8011278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801127c:	2b1f      	cmp	r3, #31
 801127e:	d9c7      	bls.n	8011210 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011280:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011284:	f003 0308 	and.w	r3, r3, #8
 8011288:	2b00      	cmp	r3, #0
 801128a:	d009      	beq.n	80112a0 <f_printf+0x37c>
 801128c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011290:	1c5a      	adds	r2, r3, #1
 8011292:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8011296:	3398      	adds	r3, #152	; 0x98
 8011298:	443b      	add	r3, r7
 801129a:	222d      	movs	r2, #45	; 0x2d
 801129c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80112a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80112a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80112ac:	f003 0301 	and.w	r3, r3, #1
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <f_printf+0x394>
 80112b4:	2330      	movs	r3, #48	; 0x30
 80112b6:	e000      	b.n	80112ba <f_printf+0x396>
 80112b8:	2320      	movs	r3, #32
 80112ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80112be:	e007      	b.n	80112d0 <f_printf+0x3ac>
 80112c0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80112c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80112c8:	4611      	mov	r1, r2
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7ff fdb2 	bl	8010e34 <putc_bfd>
 80112d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80112d4:	f003 0302 	and.w	r3, r3, #2
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d108      	bne.n	80112ee <f_printf+0x3ca>
 80112dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80112e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d8e8      	bhi.n	80112c0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80112ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112f2:	3b01      	subs	r3, #1
 80112f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80112f8:	f107 020c 	add.w	r2, r7, #12
 80112fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011300:	4413      	add	r3, r2
 8011302:	781a      	ldrb	r2, [r3, #0]
 8011304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011308:	4611      	mov	r1, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff fd92 	bl	8010e34 <putc_bfd>
		} while (i);
 8011310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011314:	2b00      	cmp	r3, #0
 8011316:	d1ea      	bne.n	80112ee <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011318:	e007      	b.n	801132a <f_printf+0x406>
 801131a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011322:	4611      	mov	r1, r2
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff fd85 	bl	8010e34 <putc_bfd>
 801132a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801132e:	1c5a      	adds	r2, r3, #1
 8011330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011334:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011338:	429a      	cmp	r2, r3
 801133a:	d8ee      	bhi.n	801131a <f_printf+0x3f6>
		c = *fmt++;
 801133c:	e600      	b.n	8010f40 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801133e:	bf00      	nop
 8011340:	e000      	b.n	8011344 <f_printf+0x420>
		if (!c) break;
 8011342:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8011344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fdb0 	bl	8010eae <putc_flush>
 801134e:	4603      	mov	r3, r0
}
 8011350:	4618      	mov	r0, r3
 8011352:	379c      	adds	r7, #156	; 0x9c
 8011354:	46bd      	mov	sp, r7
 8011356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801135a:	b003      	add	sp, #12
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop

08011360 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011360:	b480      	push	{r7}
 8011362:	b087      	sub	sp, #28
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	4613      	mov	r3, r2
 801136c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801136e:	2301      	movs	r3, #1
 8011370:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011372:	2300      	movs	r3, #0
 8011374:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011376:	4b1f      	ldr	r3, [pc, #124]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 8011378:	7a5b      	ldrb	r3, [r3, #9]
 801137a:	b2db      	uxtb	r3, r3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d131      	bne.n	80113e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011380:	4b1c      	ldr	r3, [pc, #112]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 8011382:	7a5b      	ldrb	r3, [r3, #9]
 8011384:	b2db      	uxtb	r3, r3
 8011386:	461a      	mov	r2, r3
 8011388:	4b1a      	ldr	r3, [pc, #104]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 801138a:	2100      	movs	r1, #0
 801138c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801138e:	4b19      	ldr	r3, [pc, #100]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 8011390:	7a5b      	ldrb	r3, [r3, #9]
 8011392:	b2db      	uxtb	r3, r3
 8011394:	4a17      	ldr	r2, [pc, #92]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4413      	add	r3, r2
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801139e:	4b15      	ldr	r3, [pc, #84]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 80113a0:	7a5b      	ldrb	r3, [r3, #9]
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	461a      	mov	r2, r3
 80113a6:	4b13      	ldr	r3, [pc, #76]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 80113a8:	4413      	add	r3, r2
 80113aa:	79fa      	ldrb	r2, [r7, #7]
 80113ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80113ae:	4b11      	ldr	r3, [pc, #68]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 80113b0:	7a5b      	ldrb	r3, [r3, #9]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	1c5a      	adds	r2, r3, #1
 80113b6:	b2d1      	uxtb	r1, r2
 80113b8:	4a0e      	ldr	r2, [pc, #56]	; (80113f4 <FATFS_LinkDriverEx+0x94>)
 80113ba:	7251      	strb	r1, [r2, #9]
 80113bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80113be:	7dbb      	ldrb	r3, [r7, #22]
 80113c0:	3330      	adds	r3, #48	; 0x30
 80113c2:	b2da      	uxtb	r2, r3
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	3301      	adds	r3, #1
 80113cc:	223a      	movs	r2, #58	; 0x3a
 80113ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	3302      	adds	r3, #2
 80113d4:	222f      	movs	r2, #47	; 0x2f
 80113d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	3303      	adds	r3, #3
 80113dc:	2200      	movs	r2, #0
 80113de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80113e0:	2300      	movs	r3, #0
 80113e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80113e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	371c      	adds	r7, #28
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	2000d160 	.word	0x2000d160

080113f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011402:	2200      	movs	r2, #0
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff ffaa 	bl	8011360 <FATFS_LinkDriverEx>
 801140c:	4603      	mov	r3, r0
}
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
	...

08011418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801141c:	2200      	movs	r2, #0
 801141e:	4912      	ldr	r1, [pc, #72]	; (8011468 <MX_USB_DEVICE_Init+0x50>)
 8011420:	4812      	ldr	r0, [pc, #72]	; (801146c <MX_USB_DEVICE_Init+0x54>)
 8011422:	f7fb fe7f 	bl	800d124 <USBD_Init>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d001      	beq.n	8011430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801142c:	f7ef ff30 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011430:	490f      	ldr	r1, [pc, #60]	; (8011470 <MX_USB_DEVICE_Init+0x58>)
 8011432:	480e      	ldr	r0, [pc, #56]	; (801146c <MX_USB_DEVICE_Init+0x54>)
 8011434:	f7fb fea6 	bl	800d184 <USBD_RegisterClass>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d001      	beq.n	8011442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801143e:	f7ef ff27 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011442:	490c      	ldr	r1, [pc, #48]	; (8011474 <MX_USB_DEVICE_Init+0x5c>)
 8011444:	4809      	ldr	r0, [pc, #36]	; (801146c <MX_USB_DEVICE_Init+0x54>)
 8011446:	f7fb fddd 	bl	800d004 <USBD_CDC_RegisterInterface>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011450:	f7ef ff1e 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011454:	4805      	ldr	r0, [pc, #20]	; (801146c <MX_USB_DEVICE_Init+0x54>)
 8011456:	f7fb fecb 	bl	800d1f0 <USBD_Start>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d001      	beq.n	8011464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011460:	f7ef ff16 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011464:	bf00      	nop
 8011466:	bd80      	pop	{r7, pc}
 8011468:	200000ac 	.word	0x200000ac
 801146c:	2000d16c 	.word	0x2000d16c
 8011470:	20000018 	.word	0x20000018
 8011474:	20000098 	.word	0x20000098

08011478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801147c:	2200      	movs	r2, #0
 801147e:	4905      	ldr	r1, [pc, #20]	; (8011494 <CDC_Init_FS+0x1c>)
 8011480:	4805      	ldr	r0, [pc, #20]	; (8011498 <CDC_Init_FS+0x20>)
 8011482:	f7fb fdd9 	bl	800d038 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011486:	4905      	ldr	r1, [pc, #20]	; (801149c <CDC_Init_FS+0x24>)
 8011488:	4803      	ldr	r0, [pc, #12]	; (8011498 <CDC_Init_FS+0x20>)
 801148a:	f7fb fdf7 	bl	800d07c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801148e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011490:	4618      	mov	r0, r3
 8011492:	bd80      	pop	{r7, pc}
 8011494:	2000dc48 	.word	0x2000dc48
 8011498:	2000d16c 	.word	0x2000d16c
 801149c:	2000d448 	.word	0x2000d448

080114a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80114a0:	b480      	push	{r7}
 80114a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80114a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	4603      	mov	r3, r0
 80114b8:	6039      	str	r1, [r7, #0]
 80114ba:	71fb      	strb	r3, [r7, #7]
 80114bc:	4613      	mov	r3, r2
 80114be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	2b23      	cmp	r3, #35	; 0x23
 80114c4:	d84a      	bhi.n	801155c <CDC_Control_FS+0xac>
 80114c6:	a201      	add	r2, pc, #4	; (adr r2, 80114cc <CDC_Control_FS+0x1c>)
 80114c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114cc:	0801155d 	.word	0x0801155d
 80114d0:	0801155d 	.word	0x0801155d
 80114d4:	0801155d 	.word	0x0801155d
 80114d8:	0801155d 	.word	0x0801155d
 80114dc:	0801155d 	.word	0x0801155d
 80114e0:	0801155d 	.word	0x0801155d
 80114e4:	0801155d 	.word	0x0801155d
 80114e8:	0801155d 	.word	0x0801155d
 80114ec:	0801155d 	.word	0x0801155d
 80114f0:	0801155d 	.word	0x0801155d
 80114f4:	0801155d 	.word	0x0801155d
 80114f8:	0801155d 	.word	0x0801155d
 80114fc:	0801155d 	.word	0x0801155d
 8011500:	0801155d 	.word	0x0801155d
 8011504:	0801155d 	.word	0x0801155d
 8011508:	0801155d 	.word	0x0801155d
 801150c:	0801155d 	.word	0x0801155d
 8011510:	0801155d 	.word	0x0801155d
 8011514:	0801155d 	.word	0x0801155d
 8011518:	0801155d 	.word	0x0801155d
 801151c:	0801155d 	.word	0x0801155d
 8011520:	0801155d 	.word	0x0801155d
 8011524:	0801155d 	.word	0x0801155d
 8011528:	0801155d 	.word	0x0801155d
 801152c:	0801155d 	.word	0x0801155d
 8011530:	0801155d 	.word	0x0801155d
 8011534:	0801155d 	.word	0x0801155d
 8011538:	0801155d 	.word	0x0801155d
 801153c:	0801155d 	.word	0x0801155d
 8011540:	0801155d 	.word	0x0801155d
 8011544:	0801155d 	.word	0x0801155d
 8011548:	0801155d 	.word	0x0801155d
 801154c:	0801155d 	.word	0x0801155d
 8011550:	0801155d 	.word	0x0801155d
 8011554:	0801155d 	.word	0x0801155d
 8011558:	0801155d 	.word	0x0801155d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801155c:	bf00      	nop
  }

  return (USBD_OK);
 801155e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	480f      	ldr	r0, [pc, #60]	; (80115b8 <CDC_Receive_FS+0x4c>)
 801157a:	f7fb fd7f 	bl	800d07c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801157e:	480e      	ldr	r0, [pc, #56]	; (80115b8 <CDC_Receive_FS+0x4c>)
 8011580:	f7fb fd9a 	bl	800d0b8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 801158a:	2240      	movs	r2, #64	; 0x40
 801158c:	2100      	movs	r1, #0
 801158e:	480b      	ldr	r0, [pc, #44]	; (80115bc <CDC_Receive_FS+0x50>)
 8011590:	f001 fdf1 	bl	8013176 <memset>
  memcpy(inBuff, Buf, len);
 8011594:	7bfb      	ldrb	r3, [r7, #15]
 8011596:	461a      	mov	r2, r3
 8011598:	6879      	ldr	r1, [r7, #4]
 801159a:	4808      	ldr	r0, [pc, #32]	; (80115bc <CDC_Receive_FS+0x50>)
 801159c:	f001 fe7a 	bl	8013294 <memcpy>
  memset(Buf, '\0', len);
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
 80115a2:	461a      	mov	r2, r3
 80115a4:	2100      	movs	r1, #0
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f001 fde5 	bl	8013176 <memset>
  return (USBD_OK);
 80115ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	2000d16c 	.word	0x2000d16c
 80115bc:	2000cc44 	.word	0x2000cc44

080115c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b087      	sub	sp, #28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	4613      	mov	r3, r2
 80115cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80115d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	371c      	adds	r7, #28
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
	...

080115e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4603      	mov	r3, r0
 80115ec:	6039      	str	r1, [r7, #0]
 80115ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2212      	movs	r2, #18
 80115f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80115f6:	4b03      	ldr	r3, [pc, #12]	; (8011604 <USBD_FS_DeviceDescriptor+0x20>)
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	200000cc 	.word	0x200000cc

08011608 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	6039      	str	r1, [r7, #0]
 8011612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	2204      	movs	r2, #4
 8011618:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801161a:	4b03      	ldr	r3, [pc, #12]	; (8011628 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801161c:	4618      	mov	r0, r3
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	200000ec 	.word	0x200000ec

0801162c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	4603      	mov	r3, r0
 8011634:	6039      	str	r1, [r7, #0]
 8011636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011638:	79fb      	ldrb	r3, [r7, #7]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d105      	bne.n	801164a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801163e:	683a      	ldr	r2, [r7, #0]
 8011640:	4907      	ldr	r1, [pc, #28]	; (8011660 <USBD_FS_ProductStrDescriptor+0x34>)
 8011642:	4808      	ldr	r0, [pc, #32]	; (8011664 <USBD_FS_ProductStrDescriptor+0x38>)
 8011644:	f7fc ffb0 	bl	800e5a8 <USBD_GetString>
 8011648:	e004      	b.n	8011654 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801164a:	683a      	ldr	r2, [r7, #0]
 801164c:	4904      	ldr	r1, [pc, #16]	; (8011660 <USBD_FS_ProductStrDescriptor+0x34>)
 801164e:	4805      	ldr	r0, [pc, #20]	; (8011664 <USBD_FS_ProductStrDescriptor+0x38>)
 8011650:	f7fc ffaa 	bl	800e5a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011654:	4b02      	ldr	r3, [pc, #8]	; (8011660 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011656:	4618      	mov	r0, r3
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	2000e448 	.word	0x2000e448
 8011664:	08016918 	.word	0x08016918

08011668 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	4603      	mov	r3, r0
 8011670:	6039      	str	r1, [r7, #0]
 8011672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011674:	683a      	ldr	r2, [r7, #0]
 8011676:	4904      	ldr	r1, [pc, #16]	; (8011688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011678:	4804      	ldr	r0, [pc, #16]	; (801168c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801167a:	f7fc ff95 	bl	800e5a8 <USBD_GetString>
  return USBD_StrDesc;
 801167e:	4b02      	ldr	r3, [pc, #8]	; (8011688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	2000e448 	.word	0x2000e448
 801168c:	08016928 	.word	0x08016928

08011690 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	6039      	str	r1, [r7, #0]
 801169a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	221a      	movs	r2, #26
 80116a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80116a2:	f000 f855 	bl	8011750 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80116a6:	4b02      	ldr	r3, [pc, #8]	; (80116b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	200000f0 	.word	0x200000f0

080116b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	4603      	mov	r3, r0
 80116bc:	6039      	str	r1, [r7, #0]
 80116be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80116c0:	79fb      	ldrb	r3, [r7, #7]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d105      	bne.n	80116d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116c6:	683a      	ldr	r2, [r7, #0]
 80116c8:	4907      	ldr	r1, [pc, #28]	; (80116e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116ca:	4808      	ldr	r0, [pc, #32]	; (80116ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80116cc:	f7fc ff6c 	bl	800e5a8 <USBD_GetString>
 80116d0:	e004      	b.n	80116dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	4904      	ldr	r1, [pc, #16]	; (80116e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116d6:	4805      	ldr	r0, [pc, #20]	; (80116ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80116d8:	f7fc ff66 	bl	800e5a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116dc:	4b02      	ldr	r3, [pc, #8]	; (80116e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	2000e448 	.word	0x2000e448
 80116ec:	0801693c 	.word	0x0801693c

080116f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	4603      	mov	r3, r0
 80116f8:	6039      	str	r1, [r7, #0]
 80116fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116fc:	79fb      	ldrb	r3, [r7, #7]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d105      	bne.n	801170e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011702:	683a      	ldr	r2, [r7, #0]
 8011704:	4907      	ldr	r1, [pc, #28]	; (8011724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011706:	4808      	ldr	r0, [pc, #32]	; (8011728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011708:	f7fc ff4e 	bl	800e5a8 <USBD_GetString>
 801170c:	e004      	b.n	8011718 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	4904      	ldr	r1, [pc, #16]	; (8011724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011712:	4805      	ldr	r0, [pc, #20]	; (8011728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011714:	f7fc ff48 	bl	800e5a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011718:	4b02      	ldr	r3, [pc, #8]	; (8011724 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801171a:	4618      	mov	r0, r3
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	2000e448 	.word	0x2000e448
 8011728:	08016948 	.word	0x08016948

0801172c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	6039      	str	r1, [r7, #0]
 8011736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	220c      	movs	r2, #12
 801173c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801173e:	4b03      	ldr	r3, [pc, #12]	; (801174c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011740:	4618      	mov	r0, r3
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	200000e0 	.word	0x200000e0

08011750 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011756:	4b0f      	ldr	r3, [pc, #60]	; (8011794 <Get_SerialNum+0x44>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801175c:	4b0e      	ldr	r3, [pc, #56]	; (8011798 <Get_SerialNum+0x48>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011762:	4b0e      	ldr	r3, [pc, #56]	; (801179c <Get_SerialNum+0x4c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011768:	68fa      	ldr	r2, [r7, #12]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4413      	add	r3, r2
 801176e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d009      	beq.n	801178a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011776:	2208      	movs	r2, #8
 8011778:	4909      	ldr	r1, [pc, #36]	; (80117a0 <Get_SerialNum+0x50>)
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f000 f814 	bl	80117a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011780:	2204      	movs	r2, #4
 8011782:	4908      	ldr	r1, [pc, #32]	; (80117a4 <Get_SerialNum+0x54>)
 8011784:	68b8      	ldr	r0, [r7, #8]
 8011786:	f000 f80f 	bl	80117a8 <IntToUnicode>
  }
}
 801178a:	bf00      	nop
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	1fff7590 	.word	0x1fff7590
 8011798:	1fff7594 	.word	0x1fff7594
 801179c:	1fff7598 	.word	0x1fff7598
 80117a0:	200000f2 	.word	0x200000f2
 80117a4:	20000102 	.word	0x20000102

080117a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b087      	sub	sp, #28
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	4613      	mov	r3, r2
 80117b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80117ba:	2300      	movs	r3, #0
 80117bc:	75fb      	strb	r3, [r7, #23]
 80117be:	e027      	b.n	8011810 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	0f1b      	lsrs	r3, r3, #28
 80117c4:	2b09      	cmp	r3, #9
 80117c6:	d80b      	bhi.n	80117e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	0f1b      	lsrs	r3, r3, #28
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	7dfb      	ldrb	r3, [r7, #23]
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	4619      	mov	r1, r3
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	440b      	add	r3, r1
 80117d8:	3230      	adds	r2, #48	; 0x30
 80117da:	b2d2      	uxtb	r2, r2
 80117dc:	701a      	strb	r2, [r3, #0]
 80117de:	e00a      	b.n	80117f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	0f1b      	lsrs	r3, r3, #28
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	4619      	mov	r1, r3
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	440b      	add	r3, r1
 80117f0:	3237      	adds	r2, #55	; 0x37
 80117f2:	b2d2      	uxtb	r2, r2
 80117f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	011b      	lsls	r3, r3, #4
 80117fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80117fc:	7dfb      	ldrb	r3, [r7, #23]
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	3301      	adds	r3, #1
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	4413      	add	r3, r2
 8011806:	2200      	movs	r2, #0
 8011808:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801180a:	7dfb      	ldrb	r3, [r7, #23]
 801180c:	3301      	adds	r3, #1
 801180e:	75fb      	strb	r3, [r7, #23]
 8011810:	7dfa      	ldrb	r2, [r7, #23]
 8011812:	79fb      	ldrb	r3, [r7, #7]
 8011814:	429a      	cmp	r2, r3
 8011816:	d3d3      	bcc.n	80117c0 <IntToUnicode+0x18>
  }
}
 8011818:	bf00      	nop
 801181a:	bf00      	nop
 801181c:	371c      	adds	r7, #28
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
	...

08011828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b0ac      	sub	sp, #176	; 0xb0
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011830:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011834:	2200      	movs	r2, #0
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	605a      	str	r2, [r3, #4]
 801183a:	609a      	str	r2, [r3, #8]
 801183c:	60da      	str	r2, [r3, #12]
 801183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011840:	f107 0314 	add.w	r3, r7, #20
 8011844:	2288      	movs	r2, #136	; 0x88
 8011846:	2100      	movs	r1, #0
 8011848:	4618      	mov	r0, r3
 801184a:	f001 fc94 	bl	8013176 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011856:	d164      	bne.n	8011922 <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801185c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801185e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011866:	f107 0314 	add.w	r3, r7, #20
 801186a:	4618      	mov	r0, r3
 801186c:	f7f5 fcbc 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d001      	beq.n	801187a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8011876:	f7ef fd0b 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801187a:	4b2c      	ldr	r3, [pc, #176]	; (801192c <HAL_PCD_MspInit+0x104>)
 801187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801187e:	4a2b      	ldr	r2, [pc, #172]	; (801192c <HAL_PCD_MspInit+0x104>)
 8011880:	f043 0301 	orr.w	r3, r3, #1
 8011884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011886:	4b29      	ldr	r3, [pc, #164]	; (801192c <HAL_PCD_MspInit+0x104>)
 8011888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801188a:	f003 0301 	and.w	r3, r3, #1
 801188e:	613b      	str	r3, [r7, #16]
 8011890:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011892:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801189a:	2302      	movs	r3, #2
 801189c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118a0:	2300      	movs	r3, #0
 80118a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118a6:	2303      	movs	r3, #3
 80118a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80118ac:	230a      	movs	r3, #10
 80118ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80118b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80118b6:	4619      	mov	r1, r3
 80118b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80118bc:	f7f2 fc6c 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80118c0:	4b1a      	ldr	r3, [pc, #104]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118c4:	4a19      	ldr	r2, [pc, #100]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80118ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80118cc:	4b17      	ldr	r3, [pc, #92]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80118d4:	60fb      	str	r3, [r7, #12]
 80118d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80118d8:	4b14      	ldr	r3, [pc, #80]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d114      	bne.n	801190e <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80118e4:	4b11      	ldr	r3, [pc, #68]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118e8:	4a10      	ldr	r2, [pc, #64]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118ee:	6593      	str	r3, [r2, #88]	; 0x58
 80118f0:	4b0e      	ldr	r3, [pc, #56]	; (801192c <HAL_PCD_MspInit+0x104>)
 80118f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118f8:	60bb      	str	r3, [r7, #8]
 80118fa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80118fc:	f7f4 fe4a 	bl	8006594 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011900:	4b0a      	ldr	r3, [pc, #40]	; (801192c <HAL_PCD_MspInit+0x104>)
 8011902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011904:	4a09      	ldr	r2, [pc, #36]	; (801192c <HAL_PCD_MspInit+0x104>)
 8011906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801190a:	6593      	str	r3, [r2, #88]	; 0x58
 801190c:	e001      	b.n	8011912 <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801190e:	f7f4 fe41 	bl	8006594 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011912:	2200      	movs	r2, #0
 8011914:	2100      	movs	r1, #0
 8011916:	2043      	movs	r0, #67	; 0x43
 8011918:	f7f2 f9cf 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801191c:	2043      	movs	r0, #67	; 0x43
 801191e:	f7f2 f9e8 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011922:	bf00      	nop
 8011924:	37b0      	adds	r7, #176	; 0xb0
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	40021000 	.word	0x40021000

08011930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011944:	4619      	mov	r1, r3
 8011946:	4610      	mov	r0, r2
 8011948:	f7fb fc9f 	bl	800d28a <USBD_LL_SetupStage>
}
 801194c:	bf00      	nop
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	460b      	mov	r3, r1
 801195e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011966:	78fa      	ldrb	r2, [r7, #3]
 8011968:	6879      	ldr	r1, [r7, #4]
 801196a:	4613      	mov	r3, r2
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	440b      	add	r3, r1
 8011974:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	78fb      	ldrb	r3, [r7, #3]
 801197c:	4619      	mov	r1, r3
 801197e:	f7fb fcd9 	bl	800d334 <USBD_LL_DataOutStage>
}
 8011982:	bf00      	nop
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b082      	sub	sp, #8
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
 8011992:	460b      	mov	r3, r1
 8011994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801199c:	78fa      	ldrb	r2, [r7, #3]
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	4613      	mov	r3, r2
 80119a2:	00db      	lsls	r3, r3, #3
 80119a4:	4413      	add	r3, r2
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	440b      	add	r3, r1
 80119aa:	3348      	adds	r3, #72	; 0x48
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	78fb      	ldrb	r3, [r7, #3]
 80119b0:	4619      	mov	r1, r3
 80119b2:	f7fb fd72 	bl	800d49a <USBD_LL_DataInStage>
}
 80119b6:	bf00      	nop
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fb feac 	bl	800d72a <USBD_LL_SOF>
}
 80119d2:	bf00      	nop
 80119d4:	3708      	adds	r7, #8
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}

080119da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119da:	b580      	push	{r7, lr}
 80119dc:	b084      	sub	sp, #16
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80119e2:	2301      	movs	r3, #1
 80119e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	691b      	ldr	r3, [r3, #16]
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d001      	beq.n	80119f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80119ee:	f7ef fc4f 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80119f8:	7bfa      	ldrb	r2, [r7, #15]
 80119fa:	4611      	mov	r1, r2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fb fe50 	bl	800d6a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7fb fdf8 	bl	800d5fe <USBD_LL_Reset>
}
 8011a0e:	bf00      	nop
 8011a10:	3710      	adds	r7, #16
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
	...

08011a18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	6812      	ldr	r2, [r2, #0]
 8011a2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a32:	f043 0301 	orr.w	r3, r3, #1
 8011a36:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7fb fe3f 	bl	800d6c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6a1b      	ldr	r3, [r3, #32]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d005      	beq.n	8011a58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a4c:	4b04      	ldr	r3, [pc, #16]	; (8011a60 <HAL_PCD_SuspendCallback+0x48>)
 8011a4e:	691b      	ldr	r3, [r3, #16]
 8011a50:	4a03      	ldr	r2, [pc, #12]	; (8011a60 <HAL_PCD_SuspendCallback+0x48>)
 8011a52:	f043 0306 	orr.w	r3, r3, #6
 8011a56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a58:	bf00      	nop
 8011a5a:	3708      	adds	r7, #8
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	e000ed00 	.word	0xe000ed00

08011a64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	6812      	ldr	r2, [r2, #0]
 8011a7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a7e:	f023 0301 	bic.w	r3, r3, #1
 8011a82:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6a1b      	ldr	r3, [r3, #32]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d007      	beq.n	8011a9c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a8c:	4b08      	ldr	r3, [pc, #32]	; (8011ab0 <HAL_PCD_ResumeCallback+0x4c>)
 8011a8e:	691b      	ldr	r3, [r3, #16]
 8011a90:	4a07      	ldr	r2, [pc, #28]	; (8011ab0 <HAL_PCD_ResumeCallback+0x4c>)
 8011a92:	f023 0306 	bic.w	r3, r3, #6
 8011a96:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011a98:	f000 faf6 	bl	8012088 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fb fe29 	bl	800d6fa <USBD_LL_Resume>
}
 8011aa8:	bf00      	nop
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	e000ed00 	.word	0xe000ed00

08011ab4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	460b      	mov	r3, r1
 8011abe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011ac6:	78fa      	ldrb	r2, [r7, #3]
 8011ac8:	4611      	mov	r1, r2
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fb fe7f 	bl	800d7ce <USBD_LL_IsoOUTIncomplete>
}
 8011ad0:	bf00      	nop
 8011ad2:	3708      	adds	r7, #8
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011aea:	78fa      	ldrb	r2, [r7, #3]
 8011aec:	4611      	mov	r1, r2
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7fb fe3b 	bl	800d76a <USBD_LL_IsoINIncomplete>
}
 8011af4:	bf00      	nop
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fb fe91 	bl	800d832 <USBD_LL_DevConnected>
}
 8011b10:	bf00      	nop
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fb fe8e 	bl	800d848 <USBD_LL_DevDisconnected>
}
 8011b2c:	bf00      	nop
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d13c      	bne.n	8011bbe <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011b44:	4a20      	ldr	r2, [pc, #128]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4a1e      	ldr	r2, [pc, #120]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b50:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011b54:	4b1c      	ldr	r3, [pc, #112]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011b5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011b5c:	4b1a      	ldr	r3, [pc, #104]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b5e:	2206      	movs	r2, #6
 8011b60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011b62:	4b19      	ldr	r3, [pc, #100]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b64:	2202      	movs	r2, #2
 8011b66:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b68:	4b17      	ldr	r3, [pc, #92]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b6a:	2202      	movs	r2, #2
 8011b6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011b6e:	4b16      	ldr	r3, [pc, #88]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b70:	2200      	movs	r2, #0
 8011b72:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011b74:	4b14      	ldr	r3, [pc, #80]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b76:	2200      	movs	r2, #0
 8011b78:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b7a:	4b13      	ldr	r3, [pc, #76]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011b80:	4b11      	ldr	r3, [pc, #68]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b82:	2200      	movs	r2, #0
 8011b84:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b86:	4b10      	ldr	r3, [pc, #64]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b88:	2200      	movs	r2, #0
 8011b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b8c:	4b0e      	ldr	r3, [pc, #56]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b8e:	2200      	movs	r2, #0
 8011b90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b92:	480d      	ldr	r0, [pc, #52]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011b94:	f7f3 faf3 	bl	800517e <HAL_PCD_Init>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d001      	beq.n	8011ba2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011b9e:	f7ef fb77 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011ba2:	2180      	movs	r1, #128	; 0x80
 8011ba4:	4808      	ldr	r0, [pc, #32]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011ba6:	f7f4 fc5c 	bl	8006462 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011baa:	2240      	movs	r2, #64	; 0x40
 8011bac:	2100      	movs	r1, #0
 8011bae:	4806      	ldr	r0, [pc, #24]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011bb0:	f7f4 fc10 	bl	80063d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011bb4:	2280      	movs	r2, #128	; 0x80
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	4803      	ldr	r0, [pc, #12]	; (8011bc8 <USBD_LL_Init+0x94>)
 8011bba:	f7f4 fc0b 	bl	80063d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	2000e648 	.word	0x2000e648

08011bcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7f3 fbef 	bl	80053c6 <HAL_PCD_Start>
 8011be8:	4603      	mov	r3, r0
 8011bea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011bec:	7bbb      	ldrb	r3, [r7, #14]
 8011bee:	2b03      	cmp	r3, #3
 8011bf0:	d816      	bhi.n	8011c20 <USBD_LL_Start+0x54>
 8011bf2:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <USBD_LL_Start+0x2c>)
 8011bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf8:	08011c09 	.word	0x08011c09
 8011bfc:	08011c0f 	.word	0x08011c0f
 8011c00:	08011c15 	.word	0x08011c15
 8011c04:	08011c1b 	.word	0x08011c1b
    case HAL_OK :
      usb_status = USBD_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c0c:	e00b      	b.n	8011c26 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	73fb      	strb	r3, [r7, #15]
    break;
 8011c12:	e008      	b.n	8011c26 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c14:	2301      	movs	r3, #1
 8011c16:	73fb      	strb	r3, [r7, #15]
    break;
 8011c18:	e005      	b.n	8011c26 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c1a:	2303      	movs	r3, #3
 8011c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c1e:	e002      	b.n	8011c26 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011c20:	2303      	movs	r3, #3
 8011c22:	73fb      	strb	r3, [r7, #15]
    break;
 8011c24:	bf00      	nop
  }
  return usb_status;
 8011c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3710      	adds	r7, #16
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	4608      	mov	r0, r1
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	4603      	mov	r3, r0
 8011c40:	70fb      	strb	r3, [r7, #3]
 8011c42:	460b      	mov	r3, r1
 8011c44:	70bb      	strb	r3, [r7, #2]
 8011c46:	4613      	mov	r3, r2
 8011c48:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c58:	78bb      	ldrb	r3, [r7, #2]
 8011c5a:	883a      	ldrh	r2, [r7, #0]
 8011c5c:	78f9      	ldrb	r1, [r7, #3]
 8011c5e:	f7f4 f899 	bl	8005d94 <HAL_PCD_EP_Open>
 8011c62:	4603      	mov	r3, r0
 8011c64:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	2b03      	cmp	r3, #3
 8011c6a:	d817      	bhi.n	8011c9c <USBD_LL_OpenEP+0x6c>
 8011c6c:	a201      	add	r2, pc, #4	; (adr r2, 8011c74 <USBD_LL_OpenEP+0x44>)
 8011c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c72:	bf00      	nop
 8011c74:	08011c85 	.word	0x08011c85
 8011c78:	08011c8b 	.word	0x08011c8b
 8011c7c:	08011c91 	.word	0x08011c91
 8011c80:	08011c97 	.word	0x08011c97
    case HAL_OK :
      usb_status = USBD_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	73fb      	strb	r3, [r7, #15]
    break;
 8011c88:	e00b      	b.n	8011ca2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c8e:	e008      	b.n	8011ca2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c90:	2301      	movs	r3, #1
 8011c92:	73fb      	strb	r3, [r7, #15]
    break;
 8011c94:	e005      	b.n	8011ca2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c96:	2303      	movs	r3, #3
 8011c98:	73fb      	strb	r3, [r7, #15]
    break;
 8011c9a:	e002      	b.n	8011ca2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011c9c:	2303      	movs	r3, #3
 8011c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8011ca0:	bf00      	nop
  }
  return usb_status;
 8011ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011cc6:	78fa      	ldrb	r2, [r7, #3]
 8011cc8:	4611      	mov	r1, r2
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7f4 f8ca 	bl	8005e64 <HAL_PCD_EP_Close>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011cd4:	7bbb      	ldrb	r3, [r7, #14]
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	d816      	bhi.n	8011d08 <USBD_LL_CloseEP+0x5c>
 8011cda:	a201      	add	r2, pc, #4	; (adr r2, 8011ce0 <USBD_LL_CloseEP+0x34>)
 8011cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce0:	08011cf1 	.word	0x08011cf1
 8011ce4:	08011cf7 	.word	0x08011cf7
 8011ce8:	08011cfd 	.word	0x08011cfd
 8011cec:	08011d03 	.word	0x08011d03
    case HAL_OK :
      usb_status = USBD_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8011cf4:	e00b      	b.n	8011d0e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011cf6:	2303      	movs	r3, #3
 8011cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8011cfa:	e008      	b.n	8011d0e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8011d00:	e005      	b.n	8011d0e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d02:	2303      	movs	r3, #3
 8011d04:	73fb      	strb	r3, [r7, #15]
    break;
 8011d06:	e002      	b.n	8011d0e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011d08:	2303      	movs	r3, #3
 8011d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d0c:	bf00      	nop
  }
  return usb_status;
 8011d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	460b      	mov	r3, r1
 8011d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d32:	78fa      	ldrb	r2, [r7, #3]
 8011d34:	4611      	mov	r1, r2
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7f4 f959 	bl	8005fee <HAL_PCD_EP_SetStall>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011d40:	7bbb      	ldrb	r3, [r7, #14]
 8011d42:	2b03      	cmp	r3, #3
 8011d44:	d816      	bhi.n	8011d74 <USBD_LL_StallEP+0x5c>
 8011d46:	a201      	add	r2, pc, #4	; (adr r2, 8011d4c <USBD_LL_StallEP+0x34>)
 8011d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d4c:	08011d5d 	.word	0x08011d5d
 8011d50:	08011d63 	.word	0x08011d63
 8011d54:	08011d69 	.word	0x08011d69
 8011d58:	08011d6f 	.word	0x08011d6f
    case HAL_OK :
      usb_status = USBD_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d60:	e00b      	b.n	8011d7a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d62:	2303      	movs	r3, #3
 8011d64:	73fb      	strb	r3, [r7, #15]
    break;
 8011d66:	e008      	b.n	8011d7a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d6c:	e005      	b.n	8011d7a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d6e:	2303      	movs	r3, #3
 8011d70:	73fb      	strb	r3, [r7, #15]
    break;
 8011d72:	e002      	b.n	8011d7a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011d74:	2303      	movs	r3, #3
 8011d76:	73fb      	strb	r3, [r7, #15]
    break;
 8011d78:	bf00      	nop
  }
  return usb_status;
 8011d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d90:	2300      	movs	r3, #0
 8011d92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d94:	2300      	movs	r3, #0
 8011d96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d9e:	78fa      	ldrb	r2, [r7, #3]
 8011da0:	4611      	mov	r1, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f4 f985 	bl	80060b2 <HAL_PCD_EP_ClrStall>
 8011da8:	4603      	mov	r3, r0
 8011daa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011dac:	7bbb      	ldrb	r3, [r7, #14]
 8011dae:	2b03      	cmp	r3, #3
 8011db0:	d816      	bhi.n	8011de0 <USBD_LL_ClearStallEP+0x5c>
 8011db2:	a201      	add	r2, pc, #4	; (adr r2, 8011db8 <USBD_LL_ClearStallEP+0x34>)
 8011db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db8:	08011dc9 	.word	0x08011dc9
 8011dbc:	08011dcf 	.word	0x08011dcf
 8011dc0:	08011dd5 	.word	0x08011dd5
 8011dc4:	08011ddb 	.word	0x08011ddb
    case HAL_OK :
      usb_status = USBD_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	73fb      	strb	r3, [r7, #15]
    break;
 8011dcc:	e00b      	b.n	8011de6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011dce:	2303      	movs	r3, #3
 8011dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8011dd2:	e008      	b.n	8011de6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8011dd8:	e005      	b.n	8011de6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011dda:	2303      	movs	r3, #3
 8011ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8011dde:	e002      	b.n	8011de6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011de0:	2303      	movs	r3, #3
 8011de2:	73fb      	strb	r3, [r7, #15]
    break;
 8011de4:	bf00      	nop
  }
  return usb_status;
 8011de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	da0b      	bge.n	8011e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e0c:	78fb      	ldrb	r3, [r7, #3]
 8011e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e12:	68f9      	ldr	r1, [r7, #12]
 8011e14:	4613      	mov	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	4413      	add	r3, r2
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	440b      	add	r3, r1
 8011e1e:	333e      	adds	r3, #62	; 0x3e
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	e00b      	b.n	8011e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e24:	78fb      	ldrb	r3, [r7, #3]
 8011e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e2a:	68f9      	ldr	r1, [r7, #12]
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	4413      	add	r3, r2
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	440b      	add	r3, r1
 8011e36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3714      	adds	r7, #20
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr

08011e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	460b      	mov	r3, r1
 8011e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e54:	2300      	movs	r3, #0
 8011e56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e62:	78fa      	ldrb	r2, [r7, #3]
 8011e64:	4611      	mov	r1, r2
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7f3 ff6f 	bl	8005d4a <HAL_PCD_SetAddress>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011e70:	7bbb      	ldrb	r3, [r7, #14]
 8011e72:	2b03      	cmp	r3, #3
 8011e74:	d816      	bhi.n	8011ea4 <USBD_LL_SetUSBAddress+0x5c>
 8011e76:	a201      	add	r2, pc, #4	; (adr r2, 8011e7c <USBD_LL_SetUSBAddress+0x34>)
 8011e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e7c:	08011e8d 	.word	0x08011e8d
 8011e80:	08011e93 	.word	0x08011e93
 8011e84:	08011e99 	.word	0x08011e99
 8011e88:	08011e9f 	.word	0x08011e9f
    case HAL_OK :
      usb_status = USBD_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e90:	e00b      	b.n	8011eaa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e92:	2303      	movs	r3, #3
 8011e94:	73fb      	strb	r3, [r7, #15]
    break;
 8011e96:	e008      	b.n	8011eaa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e98:	2301      	movs	r3, #1
 8011e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8011e9c:	e005      	b.n	8011eaa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e9e:	2303      	movs	r3, #3
 8011ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ea2:	e002      	b.n	8011eaa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011ea4:	2303      	movs	r3, #3
 8011ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ea8:	bf00      	nop
  }
  return usb_status;
 8011eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	607a      	str	r2, [r7, #4]
 8011ebe:	603b      	str	r3, [r7, #0]
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ed2:	7af9      	ldrb	r1, [r7, #11]
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	f7f4 f858 	bl	8005f8c <HAL_PCD_EP_Transmit>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011ee0:	7dbb      	ldrb	r3, [r7, #22]
 8011ee2:	2b03      	cmp	r3, #3
 8011ee4:	d816      	bhi.n	8011f14 <USBD_LL_Transmit+0x60>
 8011ee6:	a201      	add	r2, pc, #4	; (adr r2, 8011eec <USBD_LL_Transmit+0x38>)
 8011ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eec:	08011efd 	.word	0x08011efd
 8011ef0:	08011f03 	.word	0x08011f03
 8011ef4:	08011f09 	.word	0x08011f09
 8011ef8:	08011f0f 	.word	0x08011f0f
    case HAL_OK :
      usb_status = USBD_OK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	75fb      	strb	r3, [r7, #23]
    break;
 8011f00:	e00b      	b.n	8011f1a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f02:	2303      	movs	r3, #3
 8011f04:	75fb      	strb	r3, [r7, #23]
    break;
 8011f06:	e008      	b.n	8011f1a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	75fb      	strb	r3, [r7, #23]
    break;
 8011f0c:	e005      	b.n	8011f1a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f0e:	2303      	movs	r3, #3
 8011f10:	75fb      	strb	r3, [r7, #23]
    break;
 8011f12:	e002      	b.n	8011f1a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8011f14:	2303      	movs	r3, #3
 8011f16:	75fb      	strb	r3, [r7, #23]
    break;
 8011f18:	bf00      	nop
  }
  return usb_status;
 8011f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3718      	adds	r7, #24
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	607a      	str	r2, [r7, #4]
 8011f2e:	603b      	str	r3, [r7, #0]
 8011f30:	460b      	mov	r3, r1
 8011f32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f34:	2300      	movs	r3, #0
 8011f36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011f42:	7af9      	ldrb	r1, [r7, #11]
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	f7f3 ffd6 	bl	8005ef8 <HAL_PCD_EP_Receive>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011f50:	7dbb      	ldrb	r3, [r7, #22]
 8011f52:	2b03      	cmp	r3, #3
 8011f54:	d816      	bhi.n	8011f84 <USBD_LL_PrepareReceive+0x60>
 8011f56:	a201      	add	r2, pc, #4	; (adr r2, 8011f5c <USBD_LL_PrepareReceive+0x38>)
 8011f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f5c:	08011f6d 	.word	0x08011f6d
 8011f60:	08011f73 	.word	0x08011f73
 8011f64:	08011f79 	.word	0x08011f79
 8011f68:	08011f7f 	.word	0x08011f7f
    case HAL_OK :
      usb_status = USBD_OK;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	75fb      	strb	r3, [r7, #23]
    break;
 8011f70:	e00b      	b.n	8011f8a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f72:	2303      	movs	r3, #3
 8011f74:	75fb      	strb	r3, [r7, #23]
    break;
 8011f76:	e008      	b.n	8011f8a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	75fb      	strb	r3, [r7, #23]
    break;
 8011f7c:	e005      	b.n	8011f8a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	75fb      	strb	r3, [r7, #23]
    break;
 8011f82:	e002      	b.n	8011f8a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011f84:	2303      	movs	r3, #3
 8011f86:	75fb      	strb	r3, [r7, #23]
    break;
 8011f88:	bf00      	nop
  }
  return usb_status;
 8011f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011fa6:	78fa      	ldrb	r2, [r7, #3]
 8011fa8:	4611      	mov	r1, r2
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f3 ffd6 	bl	8005f5c <HAL_PCD_EP_GetRxCount>
 8011fb0:	4603      	mov	r3, r0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3708      	adds	r7, #8
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
	...

08011fbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011fc8:	78fb      	ldrb	r3, [r7, #3]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d002      	beq.n	8011fd4 <HAL_PCDEx_LPM_Callback+0x18>
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d01f      	beq.n	8012012 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011fd2:	e03b      	b.n	801204c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6a1b      	ldr	r3, [r3, #32]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d007      	beq.n	8011fec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011fdc:	f000 f854 	bl	8012088 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011fe0:	4b1c      	ldr	r3, [pc, #112]	; (8012054 <HAL_PCDEx_LPM_Callback+0x98>)
 8011fe2:	691b      	ldr	r3, [r3, #16]
 8011fe4:	4a1b      	ldr	r2, [pc, #108]	; (8012054 <HAL_PCDEx_LPM_Callback+0x98>)
 8011fe6:	f023 0306 	bic.w	r3, r3, #6
 8011fea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	6812      	ldr	r2, [r2, #0]
 8011ffa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ffe:	f023 0301 	bic.w	r3, r3, #1
 8012002:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801200a:	4618      	mov	r0, r3
 801200c:	f7fb fb75 	bl	800d6fa <USBD_LL_Resume>
    break;
 8012010:	e01c      	b.n	801204c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	6812      	ldr	r2, [r2, #0]
 8012020:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012024:	f043 0301 	orr.w	r3, r3, #1
 8012028:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012030:	4618      	mov	r0, r3
 8012032:	f7fb fb46 	bl	800d6c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a1b      	ldr	r3, [r3, #32]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d005      	beq.n	801204a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801203e:	4b05      	ldr	r3, [pc, #20]	; (8012054 <HAL_PCDEx_LPM_Callback+0x98>)
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	4a04      	ldr	r2, [pc, #16]	; (8012054 <HAL_PCDEx_LPM_Callback+0x98>)
 8012044:	f043 0306 	orr.w	r3, r3, #6
 8012048:	6113      	str	r3, [r2, #16]
    break;
 801204a:	bf00      	nop
}
 801204c:	bf00      	nop
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	e000ed00 	.word	0xe000ed00

08012058 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012060:	4b03      	ldr	r3, [pc, #12]	; (8012070 <USBD_static_malloc+0x18>)
}
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop
 8012070:	2000eb54 	.word	0x2000eb54

08012074 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]

}
 801207c:	bf00      	nop
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801208c:	f7ee ff56 	bl	8000f3c <SystemClock_Config>
}
 8012090:	bf00      	nop
 8012092:	bd80      	pop	{r7, pc}

08012094 <malloc>:
 8012094:	4b02      	ldr	r3, [pc, #8]	; (80120a0 <malloc+0xc>)
 8012096:	4601      	mov	r1, r0
 8012098:	6818      	ldr	r0, [r3, #0]
 801209a:	f000 b823 	b.w	80120e4 <_malloc_r>
 801209e:	bf00      	nop
 80120a0:	20000164 	.word	0x20000164

080120a4 <sbrk_aligned>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	4e0e      	ldr	r6, [pc, #56]	; (80120e0 <sbrk_aligned+0x3c>)
 80120a8:	460c      	mov	r4, r1
 80120aa:	6831      	ldr	r1, [r6, #0]
 80120ac:	4605      	mov	r5, r0
 80120ae:	b911      	cbnz	r1, 80120b6 <sbrk_aligned+0x12>
 80120b0:	f001 f8a2 	bl	80131f8 <_sbrk_r>
 80120b4:	6030      	str	r0, [r6, #0]
 80120b6:	4621      	mov	r1, r4
 80120b8:	4628      	mov	r0, r5
 80120ba:	f001 f89d 	bl	80131f8 <_sbrk_r>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	d00a      	beq.n	80120d8 <sbrk_aligned+0x34>
 80120c2:	1cc4      	adds	r4, r0, #3
 80120c4:	f024 0403 	bic.w	r4, r4, #3
 80120c8:	42a0      	cmp	r0, r4
 80120ca:	d007      	beq.n	80120dc <sbrk_aligned+0x38>
 80120cc:	1a21      	subs	r1, r4, r0
 80120ce:	4628      	mov	r0, r5
 80120d0:	f001 f892 	bl	80131f8 <_sbrk_r>
 80120d4:	3001      	adds	r0, #1
 80120d6:	d101      	bne.n	80120dc <sbrk_aligned+0x38>
 80120d8:	f04f 34ff 	mov.w	r4, #4294967295
 80120dc:	4620      	mov	r0, r4
 80120de:	bd70      	pop	{r4, r5, r6, pc}
 80120e0:	2000ed78 	.word	0x2000ed78

080120e4 <_malloc_r>:
 80120e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120e8:	1ccd      	adds	r5, r1, #3
 80120ea:	f025 0503 	bic.w	r5, r5, #3
 80120ee:	3508      	adds	r5, #8
 80120f0:	2d0c      	cmp	r5, #12
 80120f2:	bf38      	it	cc
 80120f4:	250c      	movcc	r5, #12
 80120f6:	2d00      	cmp	r5, #0
 80120f8:	4607      	mov	r7, r0
 80120fa:	db01      	blt.n	8012100 <_malloc_r+0x1c>
 80120fc:	42a9      	cmp	r1, r5
 80120fe:	d905      	bls.n	801210c <_malloc_r+0x28>
 8012100:	230c      	movs	r3, #12
 8012102:	603b      	str	r3, [r7, #0]
 8012104:	2600      	movs	r6, #0
 8012106:	4630      	mov	r0, r6
 8012108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801210c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80121e0 <_malloc_r+0xfc>
 8012110:	f000 f868 	bl	80121e4 <__malloc_lock>
 8012114:	f8d8 3000 	ldr.w	r3, [r8]
 8012118:	461c      	mov	r4, r3
 801211a:	bb5c      	cbnz	r4, 8012174 <_malloc_r+0x90>
 801211c:	4629      	mov	r1, r5
 801211e:	4638      	mov	r0, r7
 8012120:	f7ff ffc0 	bl	80120a4 <sbrk_aligned>
 8012124:	1c43      	adds	r3, r0, #1
 8012126:	4604      	mov	r4, r0
 8012128:	d155      	bne.n	80121d6 <_malloc_r+0xf2>
 801212a:	f8d8 4000 	ldr.w	r4, [r8]
 801212e:	4626      	mov	r6, r4
 8012130:	2e00      	cmp	r6, #0
 8012132:	d145      	bne.n	80121c0 <_malloc_r+0xdc>
 8012134:	2c00      	cmp	r4, #0
 8012136:	d048      	beq.n	80121ca <_malloc_r+0xe6>
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	4631      	mov	r1, r6
 801213c:	4638      	mov	r0, r7
 801213e:	eb04 0903 	add.w	r9, r4, r3
 8012142:	f001 f859 	bl	80131f8 <_sbrk_r>
 8012146:	4581      	cmp	r9, r0
 8012148:	d13f      	bne.n	80121ca <_malloc_r+0xe6>
 801214a:	6821      	ldr	r1, [r4, #0]
 801214c:	1a6d      	subs	r5, r5, r1
 801214e:	4629      	mov	r1, r5
 8012150:	4638      	mov	r0, r7
 8012152:	f7ff ffa7 	bl	80120a4 <sbrk_aligned>
 8012156:	3001      	adds	r0, #1
 8012158:	d037      	beq.n	80121ca <_malloc_r+0xe6>
 801215a:	6823      	ldr	r3, [r4, #0]
 801215c:	442b      	add	r3, r5
 801215e:	6023      	str	r3, [r4, #0]
 8012160:	f8d8 3000 	ldr.w	r3, [r8]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d038      	beq.n	80121da <_malloc_r+0xf6>
 8012168:	685a      	ldr	r2, [r3, #4]
 801216a:	42a2      	cmp	r2, r4
 801216c:	d12b      	bne.n	80121c6 <_malloc_r+0xe2>
 801216e:	2200      	movs	r2, #0
 8012170:	605a      	str	r2, [r3, #4]
 8012172:	e00f      	b.n	8012194 <_malloc_r+0xb0>
 8012174:	6822      	ldr	r2, [r4, #0]
 8012176:	1b52      	subs	r2, r2, r5
 8012178:	d41f      	bmi.n	80121ba <_malloc_r+0xd6>
 801217a:	2a0b      	cmp	r2, #11
 801217c:	d917      	bls.n	80121ae <_malloc_r+0xca>
 801217e:	1961      	adds	r1, r4, r5
 8012180:	42a3      	cmp	r3, r4
 8012182:	6025      	str	r5, [r4, #0]
 8012184:	bf18      	it	ne
 8012186:	6059      	strne	r1, [r3, #4]
 8012188:	6863      	ldr	r3, [r4, #4]
 801218a:	bf08      	it	eq
 801218c:	f8c8 1000 	streq.w	r1, [r8]
 8012190:	5162      	str	r2, [r4, r5]
 8012192:	604b      	str	r3, [r1, #4]
 8012194:	4638      	mov	r0, r7
 8012196:	f104 060b 	add.w	r6, r4, #11
 801219a:	f000 f829 	bl	80121f0 <__malloc_unlock>
 801219e:	f026 0607 	bic.w	r6, r6, #7
 80121a2:	1d23      	adds	r3, r4, #4
 80121a4:	1af2      	subs	r2, r6, r3
 80121a6:	d0ae      	beq.n	8012106 <_malloc_r+0x22>
 80121a8:	1b9b      	subs	r3, r3, r6
 80121aa:	50a3      	str	r3, [r4, r2]
 80121ac:	e7ab      	b.n	8012106 <_malloc_r+0x22>
 80121ae:	42a3      	cmp	r3, r4
 80121b0:	6862      	ldr	r2, [r4, #4]
 80121b2:	d1dd      	bne.n	8012170 <_malloc_r+0x8c>
 80121b4:	f8c8 2000 	str.w	r2, [r8]
 80121b8:	e7ec      	b.n	8012194 <_malloc_r+0xb0>
 80121ba:	4623      	mov	r3, r4
 80121bc:	6864      	ldr	r4, [r4, #4]
 80121be:	e7ac      	b.n	801211a <_malloc_r+0x36>
 80121c0:	4634      	mov	r4, r6
 80121c2:	6876      	ldr	r6, [r6, #4]
 80121c4:	e7b4      	b.n	8012130 <_malloc_r+0x4c>
 80121c6:	4613      	mov	r3, r2
 80121c8:	e7cc      	b.n	8012164 <_malloc_r+0x80>
 80121ca:	230c      	movs	r3, #12
 80121cc:	603b      	str	r3, [r7, #0]
 80121ce:	4638      	mov	r0, r7
 80121d0:	f000 f80e 	bl	80121f0 <__malloc_unlock>
 80121d4:	e797      	b.n	8012106 <_malloc_r+0x22>
 80121d6:	6025      	str	r5, [r4, #0]
 80121d8:	e7dc      	b.n	8012194 <_malloc_r+0xb0>
 80121da:	605b      	str	r3, [r3, #4]
 80121dc:	deff      	udf	#255	; 0xff
 80121de:	bf00      	nop
 80121e0:	2000ed74 	.word	0x2000ed74

080121e4 <__malloc_lock>:
 80121e4:	4801      	ldr	r0, [pc, #4]	; (80121ec <__malloc_lock+0x8>)
 80121e6:	f001 b853 	b.w	8013290 <__retarget_lock_acquire_recursive>
 80121ea:	bf00      	nop
 80121ec:	2000eebc 	.word	0x2000eebc

080121f0 <__malloc_unlock>:
 80121f0:	4801      	ldr	r0, [pc, #4]	; (80121f8 <__malloc_unlock+0x8>)
 80121f2:	f001 b84e 	b.w	8013292 <__retarget_lock_release_recursive>
 80121f6:	bf00      	nop
 80121f8:	2000eebc 	.word	0x2000eebc

080121fc <__cvt>:
 80121fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012200:	ec55 4b10 	vmov	r4, r5, d0
 8012204:	2d00      	cmp	r5, #0
 8012206:	460e      	mov	r6, r1
 8012208:	4619      	mov	r1, r3
 801220a:	462b      	mov	r3, r5
 801220c:	bfbb      	ittet	lt
 801220e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012212:	461d      	movlt	r5, r3
 8012214:	2300      	movge	r3, #0
 8012216:	232d      	movlt	r3, #45	; 0x2d
 8012218:	700b      	strb	r3, [r1, #0]
 801221a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801221c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012220:	4691      	mov	r9, r2
 8012222:	f023 0820 	bic.w	r8, r3, #32
 8012226:	bfbc      	itt	lt
 8012228:	4622      	movlt	r2, r4
 801222a:	4614      	movlt	r4, r2
 801222c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012230:	d005      	beq.n	801223e <__cvt+0x42>
 8012232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012236:	d100      	bne.n	801223a <__cvt+0x3e>
 8012238:	3601      	adds	r6, #1
 801223a:	2102      	movs	r1, #2
 801223c:	e000      	b.n	8012240 <__cvt+0x44>
 801223e:	2103      	movs	r1, #3
 8012240:	ab03      	add	r3, sp, #12
 8012242:	9301      	str	r3, [sp, #4]
 8012244:	ab02      	add	r3, sp, #8
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	ec45 4b10 	vmov	d0, r4, r5
 801224c:	4653      	mov	r3, sl
 801224e:	4632      	mov	r2, r6
 8012250:	f001 f8be 	bl	80133d0 <_dtoa_r>
 8012254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012258:	4607      	mov	r7, r0
 801225a:	d102      	bne.n	8012262 <__cvt+0x66>
 801225c:	f019 0f01 	tst.w	r9, #1
 8012260:	d022      	beq.n	80122a8 <__cvt+0xac>
 8012262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012266:	eb07 0906 	add.w	r9, r7, r6
 801226a:	d110      	bne.n	801228e <__cvt+0x92>
 801226c:	783b      	ldrb	r3, [r7, #0]
 801226e:	2b30      	cmp	r3, #48	; 0x30
 8012270:	d10a      	bne.n	8012288 <__cvt+0x8c>
 8012272:	2200      	movs	r2, #0
 8012274:	2300      	movs	r3, #0
 8012276:	4620      	mov	r0, r4
 8012278:	4629      	mov	r1, r5
 801227a:	f7ee fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 801227e:	b918      	cbnz	r0, 8012288 <__cvt+0x8c>
 8012280:	f1c6 0601 	rsb	r6, r6, #1
 8012284:	f8ca 6000 	str.w	r6, [sl]
 8012288:	f8da 3000 	ldr.w	r3, [sl]
 801228c:	4499      	add	r9, r3
 801228e:	2200      	movs	r2, #0
 8012290:	2300      	movs	r3, #0
 8012292:	4620      	mov	r0, r4
 8012294:	4629      	mov	r1, r5
 8012296:	f7ee fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 801229a:	b108      	cbz	r0, 80122a0 <__cvt+0xa4>
 801229c:	f8cd 900c 	str.w	r9, [sp, #12]
 80122a0:	2230      	movs	r2, #48	; 0x30
 80122a2:	9b03      	ldr	r3, [sp, #12]
 80122a4:	454b      	cmp	r3, r9
 80122a6:	d307      	bcc.n	80122b8 <__cvt+0xbc>
 80122a8:	9b03      	ldr	r3, [sp, #12]
 80122aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122ac:	1bdb      	subs	r3, r3, r7
 80122ae:	4638      	mov	r0, r7
 80122b0:	6013      	str	r3, [r2, #0]
 80122b2:	b004      	add	sp, #16
 80122b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122b8:	1c59      	adds	r1, r3, #1
 80122ba:	9103      	str	r1, [sp, #12]
 80122bc:	701a      	strb	r2, [r3, #0]
 80122be:	e7f0      	b.n	80122a2 <__cvt+0xa6>

080122c0 <__exponent>:
 80122c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122c2:	4603      	mov	r3, r0
 80122c4:	2900      	cmp	r1, #0
 80122c6:	bfb8      	it	lt
 80122c8:	4249      	neglt	r1, r1
 80122ca:	f803 2b02 	strb.w	r2, [r3], #2
 80122ce:	bfb4      	ite	lt
 80122d0:	222d      	movlt	r2, #45	; 0x2d
 80122d2:	222b      	movge	r2, #43	; 0x2b
 80122d4:	2909      	cmp	r1, #9
 80122d6:	7042      	strb	r2, [r0, #1]
 80122d8:	dd2a      	ble.n	8012330 <__exponent+0x70>
 80122da:	f10d 0207 	add.w	r2, sp, #7
 80122de:	4617      	mov	r7, r2
 80122e0:	260a      	movs	r6, #10
 80122e2:	4694      	mov	ip, r2
 80122e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80122e8:	fb06 1415 	mls	r4, r6, r5, r1
 80122ec:	3430      	adds	r4, #48	; 0x30
 80122ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80122f2:	460c      	mov	r4, r1
 80122f4:	2c63      	cmp	r4, #99	; 0x63
 80122f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80122fa:	4629      	mov	r1, r5
 80122fc:	dcf1      	bgt.n	80122e2 <__exponent+0x22>
 80122fe:	3130      	adds	r1, #48	; 0x30
 8012300:	f1ac 0402 	sub.w	r4, ip, #2
 8012304:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012308:	1c41      	adds	r1, r0, #1
 801230a:	4622      	mov	r2, r4
 801230c:	42ba      	cmp	r2, r7
 801230e:	d30a      	bcc.n	8012326 <__exponent+0x66>
 8012310:	f10d 0209 	add.w	r2, sp, #9
 8012314:	eba2 020c 	sub.w	r2, r2, ip
 8012318:	42bc      	cmp	r4, r7
 801231a:	bf88      	it	hi
 801231c:	2200      	movhi	r2, #0
 801231e:	4413      	add	r3, r2
 8012320:	1a18      	subs	r0, r3, r0
 8012322:	b003      	add	sp, #12
 8012324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012326:	f812 5b01 	ldrb.w	r5, [r2], #1
 801232a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801232e:	e7ed      	b.n	801230c <__exponent+0x4c>
 8012330:	2330      	movs	r3, #48	; 0x30
 8012332:	3130      	adds	r1, #48	; 0x30
 8012334:	7083      	strb	r3, [r0, #2]
 8012336:	70c1      	strb	r1, [r0, #3]
 8012338:	1d03      	adds	r3, r0, #4
 801233a:	e7f1      	b.n	8012320 <__exponent+0x60>

0801233c <_printf_float>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	ed2d 8b02 	vpush	{d8}
 8012344:	b08d      	sub	sp, #52	; 0x34
 8012346:	460c      	mov	r4, r1
 8012348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801234c:	4616      	mov	r6, r2
 801234e:	461f      	mov	r7, r3
 8012350:	4605      	mov	r5, r0
 8012352:	f000 ff19 	bl	8013188 <_localeconv_r>
 8012356:	f8d0 a000 	ldr.w	sl, [r0]
 801235a:	4650      	mov	r0, sl
 801235c:	f7ed ff88 	bl	8000270 <strlen>
 8012360:	2300      	movs	r3, #0
 8012362:	930a      	str	r3, [sp, #40]	; 0x28
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	9305      	str	r3, [sp, #20]
 8012368:	f8d8 3000 	ldr.w	r3, [r8]
 801236c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012370:	3307      	adds	r3, #7
 8012372:	f023 0307 	bic.w	r3, r3, #7
 8012376:	f103 0208 	add.w	r2, r3, #8
 801237a:	f8c8 2000 	str.w	r2, [r8]
 801237e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012386:	9307      	str	r3, [sp, #28]
 8012388:	f8cd 8018 	str.w	r8, [sp, #24]
 801238c:	ee08 0a10 	vmov	s16, r0
 8012390:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012398:	4b9e      	ldr	r3, [pc, #632]	; (8012614 <_printf_float+0x2d8>)
 801239a:	f04f 32ff 	mov.w	r2, #4294967295
 801239e:	f7ee fbc5 	bl	8000b2c <__aeabi_dcmpun>
 80123a2:	bb88      	cbnz	r0, 8012408 <_printf_float+0xcc>
 80123a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123a8:	4b9a      	ldr	r3, [pc, #616]	; (8012614 <_printf_float+0x2d8>)
 80123aa:	f04f 32ff 	mov.w	r2, #4294967295
 80123ae:	f7ee fb9f 	bl	8000af0 <__aeabi_dcmple>
 80123b2:	bb48      	cbnz	r0, 8012408 <_printf_float+0xcc>
 80123b4:	2200      	movs	r2, #0
 80123b6:	2300      	movs	r3, #0
 80123b8:	4640      	mov	r0, r8
 80123ba:	4649      	mov	r1, r9
 80123bc:	f7ee fb8e 	bl	8000adc <__aeabi_dcmplt>
 80123c0:	b110      	cbz	r0, 80123c8 <_printf_float+0x8c>
 80123c2:	232d      	movs	r3, #45	; 0x2d
 80123c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123c8:	4a93      	ldr	r2, [pc, #588]	; (8012618 <_printf_float+0x2dc>)
 80123ca:	4b94      	ldr	r3, [pc, #592]	; (801261c <_printf_float+0x2e0>)
 80123cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80123d0:	bf94      	ite	ls
 80123d2:	4690      	movls	r8, r2
 80123d4:	4698      	movhi	r8, r3
 80123d6:	2303      	movs	r3, #3
 80123d8:	6123      	str	r3, [r4, #16]
 80123da:	9b05      	ldr	r3, [sp, #20]
 80123dc:	f023 0304 	bic.w	r3, r3, #4
 80123e0:	6023      	str	r3, [r4, #0]
 80123e2:	f04f 0900 	mov.w	r9, #0
 80123e6:	9700      	str	r7, [sp, #0]
 80123e8:	4633      	mov	r3, r6
 80123ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80123ec:	4621      	mov	r1, r4
 80123ee:	4628      	mov	r0, r5
 80123f0:	f000 f9da 	bl	80127a8 <_printf_common>
 80123f4:	3001      	adds	r0, #1
 80123f6:	f040 8090 	bne.w	801251a <_printf_float+0x1de>
 80123fa:	f04f 30ff 	mov.w	r0, #4294967295
 80123fe:	b00d      	add	sp, #52	; 0x34
 8012400:	ecbd 8b02 	vpop	{d8}
 8012404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012408:	4642      	mov	r2, r8
 801240a:	464b      	mov	r3, r9
 801240c:	4640      	mov	r0, r8
 801240e:	4649      	mov	r1, r9
 8012410:	f7ee fb8c 	bl	8000b2c <__aeabi_dcmpun>
 8012414:	b140      	cbz	r0, 8012428 <_printf_float+0xec>
 8012416:	464b      	mov	r3, r9
 8012418:	2b00      	cmp	r3, #0
 801241a:	bfbc      	itt	lt
 801241c:	232d      	movlt	r3, #45	; 0x2d
 801241e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012422:	4a7f      	ldr	r2, [pc, #508]	; (8012620 <_printf_float+0x2e4>)
 8012424:	4b7f      	ldr	r3, [pc, #508]	; (8012624 <_printf_float+0x2e8>)
 8012426:	e7d1      	b.n	80123cc <_printf_float+0x90>
 8012428:	6863      	ldr	r3, [r4, #4]
 801242a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801242e:	9206      	str	r2, [sp, #24]
 8012430:	1c5a      	adds	r2, r3, #1
 8012432:	d13f      	bne.n	80124b4 <_printf_float+0x178>
 8012434:	2306      	movs	r3, #6
 8012436:	6063      	str	r3, [r4, #4]
 8012438:	9b05      	ldr	r3, [sp, #20]
 801243a:	6861      	ldr	r1, [r4, #4]
 801243c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012440:	2300      	movs	r3, #0
 8012442:	9303      	str	r3, [sp, #12]
 8012444:	ab0a      	add	r3, sp, #40	; 0x28
 8012446:	e9cd b301 	strd	fp, r3, [sp, #4]
 801244a:	ab09      	add	r3, sp, #36	; 0x24
 801244c:	ec49 8b10 	vmov	d0, r8, r9
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	6022      	str	r2, [r4, #0]
 8012454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012458:	4628      	mov	r0, r5
 801245a:	f7ff fecf 	bl	80121fc <__cvt>
 801245e:	9b06      	ldr	r3, [sp, #24]
 8012460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012462:	2b47      	cmp	r3, #71	; 0x47
 8012464:	4680      	mov	r8, r0
 8012466:	d108      	bne.n	801247a <_printf_float+0x13e>
 8012468:	1cc8      	adds	r0, r1, #3
 801246a:	db02      	blt.n	8012472 <_printf_float+0x136>
 801246c:	6863      	ldr	r3, [r4, #4]
 801246e:	4299      	cmp	r1, r3
 8012470:	dd41      	ble.n	80124f6 <_printf_float+0x1ba>
 8012472:	f1ab 0302 	sub.w	r3, fp, #2
 8012476:	fa5f fb83 	uxtb.w	fp, r3
 801247a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801247e:	d820      	bhi.n	80124c2 <_printf_float+0x186>
 8012480:	3901      	subs	r1, #1
 8012482:	465a      	mov	r2, fp
 8012484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012488:	9109      	str	r1, [sp, #36]	; 0x24
 801248a:	f7ff ff19 	bl	80122c0 <__exponent>
 801248e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012490:	1813      	adds	r3, r2, r0
 8012492:	2a01      	cmp	r2, #1
 8012494:	4681      	mov	r9, r0
 8012496:	6123      	str	r3, [r4, #16]
 8012498:	dc02      	bgt.n	80124a0 <_printf_float+0x164>
 801249a:	6822      	ldr	r2, [r4, #0]
 801249c:	07d2      	lsls	r2, r2, #31
 801249e:	d501      	bpl.n	80124a4 <_printf_float+0x168>
 80124a0:	3301      	adds	r3, #1
 80124a2:	6123      	str	r3, [r4, #16]
 80124a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d09c      	beq.n	80123e6 <_printf_float+0xaa>
 80124ac:	232d      	movs	r3, #45	; 0x2d
 80124ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124b2:	e798      	b.n	80123e6 <_printf_float+0xaa>
 80124b4:	9a06      	ldr	r2, [sp, #24]
 80124b6:	2a47      	cmp	r2, #71	; 0x47
 80124b8:	d1be      	bne.n	8012438 <_printf_float+0xfc>
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1bc      	bne.n	8012438 <_printf_float+0xfc>
 80124be:	2301      	movs	r3, #1
 80124c0:	e7b9      	b.n	8012436 <_printf_float+0xfa>
 80124c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80124c6:	d118      	bne.n	80124fa <_printf_float+0x1be>
 80124c8:	2900      	cmp	r1, #0
 80124ca:	6863      	ldr	r3, [r4, #4]
 80124cc:	dd0b      	ble.n	80124e6 <_printf_float+0x1aa>
 80124ce:	6121      	str	r1, [r4, #16]
 80124d0:	b913      	cbnz	r3, 80124d8 <_printf_float+0x19c>
 80124d2:	6822      	ldr	r2, [r4, #0]
 80124d4:	07d0      	lsls	r0, r2, #31
 80124d6:	d502      	bpl.n	80124de <_printf_float+0x1a2>
 80124d8:	3301      	adds	r3, #1
 80124da:	440b      	add	r3, r1
 80124dc:	6123      	str	r3, [r4, #16]
 80124de:	65a1      	str	r1, [r4, #88]	; 0x58
 80124e0:	f04f 0900 	mov.w	r9, #0
 80124e4:	e7de      	b.n	80124a4 <_printf_float+0x168>
 80124e6:	b913      	cbnz	r3, 80124ee <_printf_float+0x1b2>
 80124e8:	6822      	ldr	r2, [r4, #0]
 80124ea:	07d2      	lsls	r2, r2, #31
 80124ec:	d501      	bpl.n	80124f2 <_printf_float+0x1b6>
 80124ee:	3302      	adds	r3, #2
 80124f0:	e7f4      	b.n	80124dc <_printf_float+0x1a0>
 80124f2:	2301      	movs	r3, #1
 80124f4:	e7f2      	b.n	80124dc <_printf_float+0x1a0>
 80124f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80124fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124fc:	4299      	cmp	r1, r3
 80124fe:	db05      	blt.n	801250c <_printf_float+0x1d0>
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	6121      	str	r1, [r4, #16]
 8012504:	07d8      	lsls	r0, r3, #31
 8012506:	d5ea      	bpl.n	80124de <_printf_float+0x1a2>
 8012508:	1c4b      	adds	r3, r1, #1
 801250a:	e7e7      	b.n	80124dc <_printf_float+0x1a0>
 801250c:	2900      	cmp	r1, #0
 801250e:	bfd4      	ite	le
 8012510:	f1c1 0202 	rsble	r2, r1, #2
 8012514:	2201      	movgt	r2, #1
 8012516:	4413      	add	r3, r2
 8012518:	e7e0      	b.n	80124dc <_printf_float+0x1a0>
 801251a:	6823      	ldr	r3, [r4, #0]
 801251c:	055a      	lsls	r2, r3, #21
 801251e:	d407      	bmi.n	8012530 <_printf_float+0x1f4>
 8012520:	6923      	ldr	r3, [r4, #16]
 8012522:	4642      	mov	r2, r8
 8012524:	4631      	mov	r1, r6
 8012526:	4628      	mov	r0, r5
 8012528:	47b8      	blx	r7
 801252a:	3001      	adds	r0, #1
 801252c:	d12c      	bne.n	8012588 <_printf_float+0x24c>
 801252e:	e764      	b.n	80123fa <_printf_float+0xbe>
 8012530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012534:	f240 80e0 	bls.w	80126f8 <_printf_float+0x3bc>
 8012538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801253c:	2200      	movs	r2, #0
 801253e:	2300      	movs	r3, #0
 8012540:	f7ee fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012544:	2800      	cmp	r0, #0
 8012546:	d034      	beq.n	80125b2 <_printf_float+0x276>
 8012548:	4a37      	ldr	r2, [pc, #220]	; (8012628 <_printf_float+0x2ec>)
 801254a:	2301      	movs	r3, #1
 801254c:	4631      	mov	r1, r6
 801254e:	4628      	mov	r0, r5
 8012550:	47b8      	blx	r7
 8012552:	3001      	adds	r0, #1
 8012554:	f43f af51 	beq.w	80123fa <_printf_float+0xbe>
 8012558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801255c:	429a      	cmp	r2, r3
 801255e:	db02      	blt.n	8012566 <_printf_float+0x22a>
 8012560:	6823      	ldr	r3, [r4, #0]
 8012562:	07d8      	lsls	r0, r3, #31
 8012564:	d510      	bpl.n	8012588 <_printf_float+0x24c>
 8012566:	ee18 3a10 	vmov	r3, s16
 801256a:	4652      	mov	r2, sl
 801256c:	4631      	mov	r1, r6
 801256e:	4628      	mov	r0, r5
 8012570:	47b8      	blx	r7
 8012572:	3001      	adds	r0, #1
 8012574:	f43f af41 	beq.w	80123fa <_printf_float+0xbe>
 8012578:	f04f 0800 	mov.w	r8, #0
 801257c:	f104 091a 	add.w	r9, r4, #26
 8012580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012582:	3b01      	subs	r3, #1
 8012584:	4543      	cmp	r3, r8
 8012586:	dc09      	bgt.n	801259c <_printf_float+0x260>
 8012588:	6823      	ldr	r3, [r4, #0]
 801258a:	079b      	lsls	r3, r3, #30
 801258c:	f100 8107 	bmi.w	801279e <_printf_float+0x462>
 8012590:	68e0      	ldr	r0, [r4, #12]
 8012592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012594:	4298      	cmp	r0, r3
 8012596:	bfb8      	it	lt
 8012598:	4618      	movlt	r0, r3
 801259a:	e730      	b.n	80123fe <_printf_float+0xc2>
 801259c:	2301      	movs	r3, #1
 801259e:	464a      	mov	r2, r9
 80125a0:	4631      	mov	r1, r6
 80125a2:	4628      	mov	r0, r5
 80125a4:	47b8      	blx	r7
 80125a6:	3001      	adds	r0, #1
 80125a8:	f43f af27 	beq.w	80123fa <_printf_float+0xbe>
 80125ac:	f108 0801 	add.w	r8, r8, #1
 80125b0:	e7e6      	b.n	8012580 <_printf_float+0x244>
 80125b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	dc39      	bgt.n	801262c <_printf_float+0x2f0>
 80125b8:	4a1b      	ldr	r2, [pc, #108]	; (8012628 <_printf_float+0x2ec>)
 80125ba:	2301      	movs	r3, #1
 80125bc:	4631      	mov	r1, r6
 80125be:	4628      	mov	r0, r5
 80125c0:	47b8      	blx	r7
 80125c2:	3001      	adds	r0, #1
 80125c4:	f43f af19 	beq.w	80123fa <_printf_float+0xbe>
 80125c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80125cc:	4313      	orrs	r3, r2
 80125ce:	d102      	bne.n	80125d6 <_printf_float+0x29a>
 80125d0:	6823      	ldr	r3, [r4, #0]
 80125d2:	07d9      	lsls	r1, r3, #31
 80125d4:	d5d8      	bpl.n	8012588 <_printf_float+0x24c>
 80125d6:	ee18 3a10 	vmov	r3, s16
 80125da:	4652      	mov	r2, sl
 80125dc:	4631      	mov	r1, r6
 80125de:	4628      	mov	r0, r5
 80125e0:	47b8      	blx	r7
 80125e2:	3001      	adds	r0, #1
 80125e4:	f43f af09 	beq.w	80123fa <_printf_float+0xbe>
 80125e8:	f04f 0900 	mov.w	r9, #0
 80125ec:	f104 0a1a 	add.w	sl, r4, #26
 80125f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f2:	425b      	negs	r3, r3
 80125f4:	454b      	cmp	r3, r9
 80125f6:	dc01      	bgt.n	80125fc <_printf_float+0x2c0>
 80125f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125fa:	e792      	b.n	8012522 <_printf_float+0x1e6>
 80125fc:	2301      	movs	r3, #1
 80125fe:	4652      	mov	r2, sl
 8012600:	4631      	mov	r1, r6
 8012602:	4628      	mov	r0, r5
 8012604:	47b8      	blx	r7
 8012606:	3001      	adds	r0, #1
 8012608:	f43f aef7 	beq.w	80123fa <_printf_float+0xbe>
 801260c:	f109 0901 	add.w	r9, r9, #1
 8012610:	e7ee      	b.n	80125f0 <_printf_float+0x2b4>
 8012612:	bf00      	nop
 8012614:	7fefffff 	.word	0x7fefffff
 8012618:	08016c3c 	.word	0x08016c3c
 801261c:	08016c40 	.word	0x08016c40
 8012620:	08016c44 	.word	0x08016c44
 8012624:	08016c48 	.word	0x08016c48
 8012628:	08016c4c 	.word	0x08016c4c
 801262c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801262e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012630:	429a      	cmp	r2, r3
 8012632:	bfa8      	it	ge
 8012634:	461a      	movge	r2, r3
 8012636:	2a00      	cmp	r2, #0
 8012638:	4691      	mov	r9, r2
 801263a:	dc37      	bgt.n	80126ac <_printf_float+0x370>
 801263c:	f04f 0b00 	mov.w	fp, #0
 8012640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012644:	f104 021a 	add.w	r2, r4, #26
 8012648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801264a:	9305      	str	r3, [sp, #20]
 801264c:	eba3 0309 	sub.w	r3, r3, r9
 8012650:	455b      	cmp	r3, fp
 8012652:	dc33      	bgt.n	80126bc <_printf_float+0x380>
 8012654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012658:	429a      	cmp	r2, r3
 801265a:	db3b      	blt.n	80126d4 <_printf_float+0x398>
 801265c:	6823      	ldr	r3, [r4, #0]
 801265e:	07da      	lsls	r2, r3, #31
 8012660:	d438      	bmi.n	80126d4 <_printf_float+0x398>
 8012662:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012666:	eba2 0903 	sub.w	r9, r2, r3
 801266a:	9b05      	ldr	r3, [sp, #20]
 801266c:	1ad2      	subs	r2, r2, r3
 801266e:	4591      	cmp	r9, r2
 8012670:	bfa8      	it	ge
 8012672:	4691      	movge	r9, r2
 8012674:	f1b9 0f00 	cmp.w	r9, #0
 8012678:	dc35      	bgt.n	80126e6 <_printf_float+0x3aa>
 801267a:	f04f 0800 	mov.w	r8, #0
 801267e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012682:	f104 0a1a 	add.w	sl, r4, #26
 8012686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801268a:	1a9b      	subs	r3, r3, r2
 801268c:	eba3 0309 	sub.w	r3, r3, r9
 8012690:	4543      	cmp	r3, r8
 8012692:	f77f af79 	ble.w	8012588 <_printf_float+0x24c>
 8012696:	2301      	movs	r3, #1
 8012698:	4652      	mov	r2, sl
 801269a:	4631      	mov	r1, r6
 801269c:	4628      	mov	r0, r5
 801269e:	47b8      	blx	r7
 80126a0:	3001      	adds	r0, #1
 80126a2:	f43f aeaa 	beq.w	80123fa <_printf_float+0xbe>
 80126a6:	f108 0801 	add.w	r8, r8, #1
 80126aa:	e7ec      	b.n	8012686 <_printf_float+0x34a>
 80126ac:	4613      	mov	r3, r2
 80126ae:	4631      	mov	r1, r6
 80126b0:	4642      	mov	r2, r8
 80126b2:	4628      	mov	r0, r5
 80126b4:	47b8      	blx	r7
 80126b6:	3001      	adds	r0, #1
 80126b8:	d1c0      	bne.n	801263c <_printf_float+0x300>
 80126ba:	e69e      	b.n	80123fa <_printf_float+0xbe>
 80126bc:	2301      	movs	r3, #1
 80126be:	4631      	mov	r1, r6
 80126c0:	4628      	mov	r0, r5
 80126c2:	9205      	str	r2, [sp, #20]
 80126c4:	47b8      	blx	r7
 80126c6:	3001      	adds	r0, #1
 80126c8:	f43f ae97 	beq.w	80123fa <_printf_float+0xbe>
 80126cc:	9a05      	ldr	r2, [sp, #20]
 80126ce:	f10b 0b01 	add.w	fp, fp, #1
 80126d2:	e7b9      	b.n	8012648 <_printf_float+0x30c>
 80126d4:	ee18 3a10 	vmov	r3, s16
 80126d8:	4652      	mov	r2, sl
 80126da:	4631      	mov	r1, r6
 80126dc:	4628      	mov	r0, r5
 80126de:	47b8      	blx	r7
 80126e0:	3001      	adds	r0, #1
 80126e2:	d1be      	bne.n	8012662 <_printf_float+0x326>
 80126e4:	e689      	b.n	80123fa <_printf_float+0xbe>
 80126e6:	9a05      	ldr	r2, [sp, #20]
 80126e8:	464b      	mov	r3, r9
 80126ea:	4442      	add	r2, r8
 80126ec:	4631      	mov	r1, r6
 80126ee:	4628      	mov	r0, r5
 80126f0:	47b8      	blx	r7
 80126f2:	3001      	adds	r0, #1
 80126f4:	d1c1      	bne.n	801267a <_printf_float+0x33e>
 80126f6:	e680      	b.n	80123fa <_printf_float+0xbe>
 80126f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126fa:	2a01      	cmp	r2, #1
 80126fc:	dc01      	bgt.n	8012702 <_printf_float+0x3c6>
 80126fe:	07db      	lsls	r3, r3, #31
 8012700:	d53a      	bpl.n	8012778 <_printf_float+0x43c>
 8012702:	2301      	movs	r3, #1
 8012704:	4642      	mov	r2, r8
 8012706:	4631      	mov	r1, r6
 8012708:	4628      	mov	r0, r5
 801270a:	47b8      	blx	r7
 801270c:	3001      	adds	r0, #1
 801270e:	f43f ae74 	beq.w	80123fa <_printf_float+0xbe>
 8012712:	ee18 3a10 	vmov	r3, s16
 8012716:	4652      	mov	r2, sl
 8012718:	4631      	mov	r1, r6
 801271a:	4628      	mov	r0, r5
 801271c:	47b8      	blx	r7
 801271e:	3001      	adds	r0, #1
 8012720:	f43f ae6b 	beq.w	80123fa <_printf_float+0xbe>
 8012724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012728:	2200      	movs	r2, #0
 801272a:	2300      	movs	r3, #0
 801272c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012730:	f7ee f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8012734:	b9d8      	cbnz	r0, 801276e <_printf_float+0x432>
 8012736:	f10a 33ff 	add.w	r3, sl, #4294967295
 801273a:	f108 0201 	add.w	r2, r8, #1
 801273e:	4631      	mov	r1, r6
 8012740:	4628      	mov	r0, r5
 8012742:	47b8      	blx	r7
 8012744:	3001      	adds	r0, #1
 8012746:	d10e      	bne.n	8012766 <_printf_float+0x42a>
 8012748:	e657      	b.n	80123fa <_printf_float+0xbe>
 801274a:	2301      	movs	r3, #1
 801274c:	4652      	mov	r2, sl
 801274e:	4631      	mov	r1, r6
 8012750:	4628      	mov	r0, r5
 8012752:	47b8      	blx	r7
 8012754:	3001      	adds	r0, #1
 8012756:	f43f ae50 	beq.w	80123fa <_printf_float+0xbe>
 801275a:	f108 0801 	add.w	r8, r8, #1
 801275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012760:	3b01      	subs	r3, #1
 8012762:	4543      	cmp	r3, r8
 8012764:	dcf1      	bgt.n	801274a <_printf_float+0x40e>
 8012766:	464b      	mov	r3, r9
 8012768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801276c:	e6da      	b.n	8012524 <_printf_float+0x1e8>
 801276e:	f04f 0800 	mov.w	r8, #0
 8012772:	f104 0a1a 	add.w	sl, r4, #26
 8012776:	e7f2      	b.n	801275e <_printf_float+0x422>
 8012778:	2301      	movs	r3, #1
 801277a:	4642      	mov	r2, r8
 801277c:	e7df      	b.n	801273e <_printf_float+0x402>
 801277e:	2301      	movs	r3, #1
 8012780:	464a      	mov	r2, r9
 8012782:	4631      	mov	r1, r6
 8012784:	4628      	mov	r0, r5
 8012786:	47b8      	blx	r7
 8012788:	3001      	adds	r0, #1
 801278a:	f43f ae36 	beq.w	80123fa <_printf_float+0xbe>
 801278e:	f108 0801 	add.w	r8, r8, #1
 8012792:	68e3      	ldr	r3, [r4, #12]
 8012794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012796:	1a5b      	subs	r3, r3, r1
 8012798:	4543      	cmp	r3, r8
 801279a:	dcf0      	bgt.n	801277e <_printf_float+0x442>
 801279c:	e6f8      	b.n	8012590 <_printf_float+0x254>
 801279e:	f04f 0800 	mov.w	r8, #0
 80127a2:	f104 0919 	add.w	r9, r4, #25
 80127a6:	e7f4      	b.n	8012792 <_printf_float+0x456>

080127a8 <_printf_common>:
 80127a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127ac:	4616      	mov	r6, r2
 80127ae:	4699      	mov	r9, r3
 80127b0:	688a      	ldr	r2, [r1, #8]
 80127b2:	690b      	ldr	r3, [r1, #16]
 80127b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127b8:	4293      	cmp	r3, r2
 80127ba:	bfb8      	it	lt
 80127bc:	4613      	movlt	r3, r2
 80127be:	6033      	str	r3, [r6, #0]
 80127c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127c4:	4607      	mov	r7, r0
 80127c6:	460c      	mov	r4, r1
 80127c8:	b10a      	cbz	r2, 80127ce <_printf_common+0x26>
 80127ca:	3301      	adds	r3, #1
 80127cc:	6033      	str	r3, [r6, #0]
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	0699      	lsls	r1, r3, #26
 80127d2:	bf42      	ittt	mi
 80127d4:	6833      	ldrmi	r3, [r6, #0]
 80127d6:	3302      	addmi	r3, #2
 80127d8:	6033      	strmi	r3, [r6, #0]
 80127da:	6825      	ldr	r5, [r4, #0]
 80127dc:	f015 0506 	ands.w	r5, r5, #6
 80127e0:	d106      	bne.n	80127f0 <_printf_common+0x48>
 80127e2:	f104 0a19 	add.w	sl, r4, #25
 80127e6:	68e3      	ldr	r3, [r4, #12]
 80127e8:	6832      	ldr	r2, [r6, #0]
 80127ea:	1a9b      	subs	r3, r3, r2
 80127ec:	42ab      	cmp	r3, r5
 80127ee:	dc26      	bgt.n	801283e <_printf_common+0x96>
 80127f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80127f4:	1e13      	subs	r3, r2, #0
 80127f6:	6822      	ldr	r2, [r4, #0]
 80127f8:	bf18      	it	ne
 80127fa:	2301      	movne	r3, #1
 80127fc:	0692      	lsls	r2, r2, #26
 80127fe:	d42b      	bmi.n	8012858 <_printf_common+0xb0>
 8012800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012804:	4649      	mov	r1, r9
 8012806:	4638      	mov	r0, r7
 8012808:	47c0      	blx	r8
 801280a:	3001      	adds	r0, #1
 801280c:	d01e      	beq.n	801284c <_printf_common+0xa4>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	6922      	ldr	r2, [r4, #16]
 8012812:	f003 0306 	and.w	r3, r3, #6
 8012816:	2b04      	cmp	r3, #4
 8012818:	bf02      	ittt	eq
 801281a:	68e5      	ldreq	r5, [r4, #12]
 801281c:	6833      	ldreq	r3, [r6, #0]
 801281e:	1aed      	subeq	r5, r5, r3
 8012820:	68a3      	ldr	r3, [r4, #8]
 8012822:	bf0c      	ite	eq
 8012824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012828:	2500      	movne	r5, #0
 801282a:	4293      	cmp	r3, r2
 801282c:	bfc4      	itt	gt
 801282e:	1a9b      	subgt	r3, r3, r2
 8012830:	18ed      	addgt	r5, r5, r3
 8012832:	2600      	movs	r6, #0
 8012834:	341a      	adds	r4, #26
 8012836:	42b5      	cmp	r5, r6
 8012838:	d11a      	bne.n	8012870 <_printf_common+0xc8>
 801283a:	2000      	movs	r0, #0
 801283c:	e008      	b.n	8012850 <_printf_common+0xa8>
 801283e:	2301      	movs	r3, #1
 8012840:	4652      	mov	r2, sl
 8012842:	4649      	mov	r1, r9
 8012844:	4638      	mov	r0, r7
 8012846:	47c0      	blx	r8
 8012848:	3001      	adds	r0, #1
 801284a:	d103      	bne.n	8012854 <_printf_common+0xac>
 801284c:	f04f 30ff 	mov.w	r0, #4294967295
 8012850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012854:	3501      	adds	r5, #1
 8012856:	e7c6      	b.n	80127e6 <_printf_common+0x3e>
 8012858:	18e1      	adds	r1, r4, r3
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	2030      	movs	r0, #48	; 0x30
 801285e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012862:	4422      	add	r2, r4
 8012864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801286c:	3302      	adds	r3, #2
 801286e:	e7c7      	b.n	8012800 <_printf_common+0x58>
 8012870:	2301      	movs	r3, #1
 8012872:	4622      	mov	r2, r4
 8012874:	4649      	mov	r1, r9
 8012876:	4638      	mov	r0, r7
 8012878:	47c0      	blx	r8
 801287a:	3001      	adds	r0, #1
 801287c:	d0e6      	beq.n	801284c <_printf_common+0xa4>
 801287e:	3601      	adds	r6, #1
 8012880:	e7d9      	b.n	8012836 <_printf_common+0x8e>
	...

08012884 <_printf_i>:
 8012884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012888:	7e0f      	ldrb	r7, [r1, #24]
 801288a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801288c:	2f78      	cmp	r7, #120	; 0x78
 801288e:	4691      	mov	r9, r2
 8012890:	4680      	mov	r8, r0
 8012892:	460c      	mov	r4, r1
 8012894:	469a      	mov	sl, r3
 8012896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801289a:	d807      	bhi.n	80128ac <_printf_i+0x28>
 801289c:	2f62      	cmp	r7, #98	; 0x62
 801289e:	d80a      	bhi.n	80128b6 <_printf_i+0x32>
 80128a0:	2f00      	cmp	r7, #0
 80128a2:	f000 80d4 	beq.w	8012a4e <_printf_i+0x1ca>
 80128a6:	2f58      	cmp	r7, #88	; 0x58
 80128a8:	f000 80c0 	beq.w	8012a2c <_printf_i+0x1a8>
 80128ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80128b4:	e03a      	b.n	801292c <_printf_i+0xa8>
 80128b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80128ba:	2b15      	cmp	r3, #21
 80128bc:	d8f6      	bhi.n	80128ac <_printf_i+0x28>
 80128be:	a101      	add	r1, pc, #4	; (adr r1, 80128c4 <_printf_i+0x40>)
 80128c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128c4:	0801291d 	.word	0x0801291d
 80128c8:	08012931 	.word	0x08012931
 80128cc:	080128ad 	.word	0x080128ad
 80128d0:	080128ad 	.word	0x080128ad
 80128d4:	080128ad 	.word	0x080128ad
 80128d8:	080128ad 	.word	0x080128ad
 80128dc:	08012931 	.word	0x08012931
 80128e0:	080128ad 	.word	0x080128ad
 80128e4:	080128ad 	.word	0x080128ad
 80128e8:	080128ad 	.word	0x080128ad
 80128ec:	080128ad 	.word	0x080128ad
 80128f0:	08012a35 	.word	0x08012a35
 80128f4:	0801295d 	.word	0x0801295d
 80128f8:	080129ef 	.word	0x080129ef
 80128fc:	080128ad 	.word	0x080128ad
 8012900:	080128ad 	.word	0x080128ad
 8012904:	08012a57 	.word	0x08012a57
 8012908:	080128ad 	.word	0x080128ad
 801290c:	0801295d 	.word	0x0801295d
 8012910:	080128ad 	.word	0x080128ad
 8012914:	080128ad 	.word	0x080128ad
 8012918:	080129f7 	.word	0x080129f7
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	1d1a      	adds	r2, r3, #4
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	602a      	str	r2, [r5, #0]
 8012924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801292c:	2301      	movs	r3, #1
 801292e:	e09f      	b.n	8012a70 <_printf_i+0x1ec>
 8012930:	6820      	ldr	r0, [r4, #0]
 8012932:	682b      	ldr	r3, [r5, #0]
 8012934:	0607      	lsls	r7, r0, #24
 8012936:	f103 0104 	add.w	r1, r3, #4
 801293a:	6029      	str	r1, [r5, #0]
 801293c:	d501      	bpl.n	8012942 <_printf_i+0xbe>
 801293e:	681e      	ldr	r6, [r3, #0]
 8012940:	e003      	b.n	801294a <_printf_i+0xc6>
 8012942:	0646      	lsls	r6, r0, #25
 8012944:	d5fb      	bpl.n	801293e <_printf_i+0xba>
 8012946:	f9b3 6000 	ldrsh.w	r6, [r3]
 801294a:	2e00      	cmp	r6, #0
 801294c:	da03      	bge.n	8012956 <_printf_i+0xd2>
 801294e:	232d      	movs	r3, #45	; 0x2d
 8012950:	4276      	negs	r6, r6
 8012952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012956:	485a      	ldr	r0, [pc, #360]	; (8012ac0 <_printf_i+0x23c>)
 8012958:	230a      	movs	r3, #10
 801295a:	e012      	b.n	8012982 <_printf_i+0xfe>
 801295c:	682b      	ldr	r3, [r5, #0]
 801295e:	6820      	ldr	r0, [r4, #0]
 8012960:	1d19      	adds	r1, r3, #4
 8012962:	6029      	str	r1, [r5, #0]
 8012964:	0605      	lsls	r5, r0, #24
 8012966:	d501      	bpl.n	801296c <_printf_i+0xe8>
 8012968:	681e      	ldr	r6, [r3, #0]
 801296a:	e002      	b.n	8012972 <_printf_i+0xee>
 801296c:	0641      	lsls	r1, r0, #25
 801296e:	d5fb      	bpl.n	8012968 <_printf_i+0xe4>
 8012970:	881e      	ldrh	r6, [r3, #0]
 8012972:	4853      	ldr	r0, [pc, #332]	; (8012ac0 <_printf_i+0x23c>)
 8012974:	2f6f      	cmp	r7, #111	; 0x6f
 8012976:	bf0c      	ite	eq
 8012978:	2308      	moveq	r3, #8
 801297a:	230a      	movne	r3, #10
 801297c:	2100      	movs	r1, #0
 801297e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012982:	6865      	ldr	r5, [r4, #4]
 8012984:	60a5      	str	r5, [r4, #8]
 8012986:	2d00      	cmp	r5, #0
 8012988:	bfa2      	ittt	ge
 801298a:	6821      	ldrge	r1, [r4, #0]
 801298c:	f021 0104 	bicge.w	r1, r1, #4
 8012990:	6021      	strge	r1, [r4, #0]
 8012992:	b90e      	cbnz	r6, 8012998 <_printf_i+0x114>
 8012994:	2d00      	cmp	r5, #0
 8012996:	d04b      	beq.n	8012a30 <_printf_i+0x1ac>
 8012998:	4615      	mov	r5, r2
 801299a:	fbb6 f1f3 	udiv	r1, r6, r3
 801299e:	fb03 6711 	mls	r7, r3, r1, r6
 80129a2:	5dc7      	ldrb	r7, [r0, r7]
 80129a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80129a8:	4637      	mov	r7, r6
 80129aa:	42bb      	cmp	r3, r7
 80129ac:	460e      	mov	r6, r1
 80129ae:	d9f4      	bls.n	801299a <_printf_i+0x116>
 80129b0:	2b08      	cmp	r3, #8
 80129b2:	d10b      	bne.n	80129cc <_printf_i+0x148>
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	07de      	lsls	r6, r3, #31
 80129b8:	d508      	bpl.n	80129cc <_printf_i+0x148>
 80129ba:	6923      	ldr	r3, [r4, #16]
 80129bc:	6861      	ldr	r1, [r4, #4]
 80129be:	4299      	cmp	r1, r3
 80129c0:	bfde      	ittt	le
 80129c2:	2330      	movle	r3, #48	; 0x30
 80129c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129cc:	1b52      	subs	r2, r2, r5
 80129ce:	6122      	str	r2, [r4, #16]
 80129d0:	f8cd a000 	str.w	sl, [sp]
 80129d4:	464b      	mov	r3, r9
 80129d6:	aa03      	add	r2, sp, #12
 80129d8:	4621      	mov	r1, r4
 80129da:	4640      	mov	r0, r8
 80129dc:	f7ff fee4 	bl	80127a8 <_printf_common>
 80129e0:	3001      	adds	r0, #1
 80129e2:	d14a      	bne.n	8012a7a <_printf_i+0x1f6>
 80129e4:	f04f 30ff 	mov.w	r0, #4294967295
 80129e8:	b004      	add	sp, #16
 80129ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ee:	6823      	ldr	r3, [r4, #0]
 80129f0:	f043 0320 	orr.w	r3, r3, #32
 80129f4:	6023      	str	r3, [r4, #0]
 80129f6:	4833      	ldr	r0, [pc, #204]	; (8012ac4 <_printf_i+0x240>)
 80129f8:	2778      	movs	r7, #120	; 0x78
 80129fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80129fe:	6823      	ldr	r3, [r4, #0]
 8012a00:	6829      	ldr	r1, [r5, #0]
 8012a02:	061f      	lsls	r7, r3, #24
 8012a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a08:	d402      	bmi.n	8012a10 <_printf_i+0x18c>
 8012a0a:	065f      	lsls	r7, r3, #25
 8012a0c:	bf48      	it	mi
 8012a0e:	b2b6      	uxthmi	r6, r6
 8012a10:	07df      	lsls	r7, r3, #31
 8012a12:	bf48      	it	mi
 8012a14:	f043 0320 	orrmi.w	r3, r3, #32
 8012a18:	6029      	str	r1, [r5, #0]
 8012a1a:	bf48      	it	mi
 8012a1c:	6023      	strmi	r3, [r4, #0]
 8012a1e:	b91e      	cbnz	r6, 8012a28 <_printf_i+0x1a4>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	f023 0320 	bic.w	r3, r3, #32
 8012a26:	6023      	str	r3, [r4, #0]
 8012a28:	2310      	movs	r3, #16
 8012a2a:	e7a7      	b.n	801297c <_printf_i+0xf8>
 8012a2c:	4824      	ldr	r0, [pc, #144]	; (8012ac0 <_printf_i+0x23c>)
 8012a2e:	e7e4      	b.n	80129fa <_printf_i+0x176>
 8012a30:	4615      	mov	r5, r2
 8012a32:	e7bd      	b.n	80129b0 <_printf_i+0x12c>
 8012a34:	682b      	ldr	r3, [r5, #0]
 8012a36:	6826      	ldr	r6, [r4, #0]
 8012a38:	6961      	ldr	r1, [r4, #20]
 8012a3a:	1d18      	adds	r0, r3, #4
 8012a3c:	6028      	str	r0, [r5, #0]
 8012a3e:	0635      	lsls	r5, r6, #24
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	d501      	bpl.n	8012a48 <_printf_i+0x1c4>
 8012a44:	6019      	str	r1, [r3, #0]
 8012a46:	e002      	b.n	8012a4e <_printf_i+0x1ca>
 8012a48:	0670      	lsls	r0, r6, #25
 8012a4a:	d5fb      	bpl.n	8012a44 <_printf_i+0x1c0>
 8012a4c:	8019      	strh	r1, [r3, #0]
 8012a4e:	2300      	movs	r3, #0
 8012a50:	6123      	str	r3, [r4, #16]
 8012a52:	4615      	mov	r5, r2
 8012a54:	e7bc      	b.n	80129d0 <_printf_i+0x14c>
 8012a56:	682b      	ldr	r3, [r5, #0]
 8012a58:	1d1a      	adds	r2, r3, #4
 8012a5a:	602a      	str	r2, [r5, #0]
 8012a5c:	681d      	ldr	r5, [r3, #0]
 8012a5e:	6862      	ldr	r2, [r4, #4]
 8012a60:	2100      	movs	r1, #0
 8012a62:	4628      	mov	r0, r5
 8012a64:	f7ed fbb4 	bl	80001d0 <memchr>
 8012a68:	b108      	cbz	r0, 8012a6e <_printf_i+0x1ea>
 8012a6a:	1b40      	subs	r0, r0, r5
 8012a6c:	6060      	str	r0, [r4, #4]
 8012a6e:	6863      	ldr	r3, [r4, #4]
 8012a70:	6123      	str	r3, [r4, #16]
 8012a72:	2300      	movs	r3, #0
 8012a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a78:	e7aa      	b.n	80129d0 <_printf_i+0x14c>
 8012a7a:	6923      	ldr	r3, [r4, #16]
 8012a7c:	462a      	mov	r2, r5
 8012a7e:	4649      	mov	r1, r9
 8012a80:	4640      	mov	r0, r8
 8012a82:	47d0      	blx	sl
 8012a84:	3001      	adds	r0, #1
 8012a86:	d0ad      	beq.n	80129e4 <_printf_i+0x160>
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	079b      	lsls	r3, r3, #30
 8012a8c:	d413      	bmi.n	8012ab6 <_printf_i+0x232>
 8012a8e:	68e0      	ldr	r0, [r4, #12]
 8012a90:	9b03      	ldr	r3, [sp, #12]
 8012a92:	4298      	cmp	r0, r3
 8012a94:	bfb8      	it	lt
 8012a96:	4618      	movlt	r0, r3
 8012a98:	e7a6      	b.n	80129e8 <_printf_i+0x164>
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	4649      	mov	r1, r9
 8012aa0:	4640      	mov	r0, r8
 8012aa2:	47d0      	blx	sl
 8012aa4:	3001      	adds	r0, #1
 8012aa6:	d09d      	beq.n	80129e4 <_printf_i+0x160>
 8012aa8:	3501      	adds	r5, #1
 8012aaa:	68e3      	ldr	r3, [r4, #12]
 8012aac:	9903      	ldr	r1, [sp, #12]
 8012aae:	1a5b      	subs	r3, r3, r1
 8012ab0:	42ab      	cmp	r3, r5
 8012ab2:	dcf2      	bgt.n	8012a9a <_printf_i+0x216>
 8012ab4:	e7eb      	b.n	8012a8e <_printf_i+0x20a>
 8012ab6:	2500      	movs	r5, #0
 8012ab8:	f104 0619 	add.w	r6, r4, #25
 8012abc:	e7f5      	b.n	8012aaa <_printf_i+0x226>
 8012abe:	bf00      	nop
 8012ac0:	08016c4e 	.word	0x08016c4e
 8012ac4:	08016c5f 	.word	0x08016c5f

08012ac8 <_scanf_float>:
 8012ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012acc:	b087      	sub	sp, #28
 8012ace:	4617      	mov	r7, r2
 8012ad0:	9303      	str	r3, [sp, #12]
 8012ad2:	688b      	ldr	r3, [r1, #8]
 8012ad4:	1e5a      	subs	r2, r3, #1
 8012ad6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012ada:	bf83      	ittte	hi
 8012adc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012ae0:	195b      	addhi	r3, r3, r5
 8012ae2:	9302      	strhi	r3, [sp, #8]
 8012ae4:	2300      	movls	r3, #0
 8012ae6:	bf86      	itte	hi
 8012ae8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012aec:	608b      	strhi	r3, [r1, #8]
 8012aee:	9302      	strls	r3, [sp, #8]
 8012af0:	680b      	ldr	r3, [r1, #0]
 8012af2:	468b      	mov	fp, r1
 8012af4:	2500      	movs	r5, #0
 8012af6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012afa:	f84b 3b1c 	str.w	r3, [fp], #28
 8012afe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012b02:	4680      	mov	r8, r0
 8012b04:	460c      	mov	r4, r1
 8012b06:	465e      	mov	r6, fp
 8012b08:	46aa      	mov	sl, r5
 8012b0a:	46a9      	mov	r9, r5
 8012b0c:	9501      	str	r5, [sp, #4]
 8012b0e:	68a2      	ldr	r2, [r4, #8]
 8012b10:	b152      	cbz	r2, 8012b28 <_scanf_float+0x60>
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	2b4e      	cmp	r3, #78	; 0x4e
 8012b18:	d864      	bhi.n	8012be4 <_scanf_float+0x11c>
 8012b1a:	2b40      	cmp	r3, #64	; 0x40
 8012b1c:	d83c      	bhi.n	8012b98 <_scanf_float+0xd0>
 8012b1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012b22:	b2c8      	uxtb	r0, r1
 8012b24:	280e      	cmp	r0, #14
 8012b26:	d93a      	bls.n	8012b9e <_scanf_float+0xd6>
 8012b28:	f1b9 0f00 	cmp.w	r9, #0
 8012b2c:	d003      	beq.n	8012b36 <_scanf_float+0x6e>
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b3a:	f1ba 0f01 	cmp.w	sl, #1
 8012b3e:	f200 8113 	bhi.w	8012d68 <_scanf_float+0x2a0>
 8012b42:	455e      	cmp	r6, fp
 8012b44:	f200 8105 	bhi.w	8012d52 <_scanf_float+0x28a>
 8012b48:	2501      	movs	r5, #1
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	b007      	add	sp, #28
 8012b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012b56:	2a0d      	cmp	r2, #13
 8012b58:	d8e6      	bhi.n	8012b28 <_scanf_float+0x60>
 8012b5a:	a101      	add	r1, pc, #4	; (adr r1, 8012b60 <_scanf_float+0x98>)
 8012b5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012b60:	08012c9f 	.word	0x08012c9f
 8012b64:	08012b29 	.word	0x08012b29
 8012b68:	08012b29 	.word	0x08012b29
 8012b6c:	08012b29 	.word	0x08012b29
 8012b70:	08012cff 	.word	0x08012cff
 8012b74:	08012cd7 	.word	0x08012cd7
 8012b78:	08012b29 	.word	0x08012b29
 8012b7c:	08012b29 	.word	0x08012b29
 8012b80:	08012cad 	.word	0x08012cad
 8012b84:	08012b29 	.word	0x08012b29
 8012b88:	08012b29 	.word	0x08012b29
 8012b8c:	08012b29 	.word	0x08012b29
 8012b90:	08012b29 	.word	0x08012b29
 8012b94:	08012c65 	.word	0x08012c65
 8012b98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012b9c:	e7db      	b.n	8012b56 <_scanf_float+0x8e>
 8012b9e:	290e      	cmp	r1, #14
 8012ba0:	d8c2      	bhi.n	8012b28 <_scanf_float+0x60>
 8012ba2:	a001      	add	r0, pc, #4	; (adr r0, 8012ba8 <_scanf_float+0xe0>)
 8012ba4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012ba8:	08012c57 	.word	0x08012c57
 8012bac:	08012b29 	.word	0x08012b29
 8012bb0:	08012c57 	.word	0x08012c57
 8012bb4:	08012ceb 	.word	0x08012ceb
 8012bb8:	08012b29 	.word	0x08012b29
 8012bbc:	08012c05 	.word	0x08012c05
 8012bc0:	08012c41 	.word	0x08012c41
 8012bc4:	08012c41 	.word	0x08012c41
 8012bc8:	08012c41 	.word	0x08012c41
 8012bcc:	08012c41 	.word	0x08012c41
 8012bd0:	08012c41 	.word	0x08012c41
 8012bd4:	08012c41 	.word	0x08012c41
 8012bd8:	08012c41 	.word	0x08012c41
 8012bdc:	08012c41 	.word	0x08012c41
 8012be0:	08012c41 	.word	0x08012c41
 8012be4:	2b6e      	cmp	r3, #110	; 0x6e
 8012be6:	d809      	bhi.n	8012bfc <_scanf_float+0x134>
 8012be8:	2b60      	cmp	r3, #96	; 0x60
 8012bea:	d8b2      	bhi.n	8012b52 <_scanf_float+0x8a>
 8012bec:	2b54      	cmp	r3, #84	; 0x54
 8012bee:	d077      	beq.n	8012ce0 <_scanf_float+0x218>
 8012bf0:	2b59      	cmp	r3, #89	; 0x59
 8012bf2:	d199      	bne.n	8012b28 <_scanf_float+0x60>
 8012bf4:	2d07      	cmp	r5, #7
 8012bf6:	d197      	bne.n	8012b28 <_scanf_float+0x60>
 8012bf8:	2508      	movs	r5, #8
 8012bfa:	e029      	b.n	8012c50 <_scanf_float+0x188>
 8012bfc:	2b74      	cmp	r3, #116	; 0x74
 8012bfe:	d06f      	beq.n	8012ce0 <_scanf_float+0x218>
 8012c00:	2b79      	cmp	r3, #121	; 0x79
 8012c02:	e7f6      	b.n	8012bf2 <_scanf_float+0x12a>
 8012c04:	6821      	ldr	r1, [r4, #0]
 8012c06:	05c8      	lsls	r0, r1, #23
 8012c08:	d51a      	bpl.n	8012c40 <_scanf_float+0x178>
 8012c0a:	9b02      	ldr	r3, [sp, #8]
 8012c0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012c10:	6021      	str	r1, [r4, #0]
 8012c12:	f109 0901 	add.w	r9, r9, #1
 8012c16:	b11b      	cbz	r3, 8012c20 <_scanf_float+0x158>
 8012c18:	3b01      	subs	r3, #1
 8012c1a:	3201      	adds	r2, #1
 8012c1c:	9302      	str	r3, [sp, #8]
 8012c1e:	60a2      	str	r2, [r4, #8]
 8012c20:	68a3      	ldr	r3, [r4, #8]
 8012c22:	3b01      	subs	r3, #1
 8012c24:	60a3      	str	r3, [r4, #8]
 8012c26:	6923      	ldr	r3, [r4, #16]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	6123      	str	r3, [r4, #16]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	3b01      	subs	r3, #1
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	607b      	str	r3, [r7, #4]
 8012c34:	f340 8084 	ble.w	8012d40 <_scanf_float+0x278>
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	603b      	str	r3, [r7, #0]
 8012c3e:	e766      	b.n	8012b0e <_scanf_float+0x46>
 8012c40:	eb1a 0f05 	cmn.w	sl, r5
 8012c44:	f47f af70 	bne.w	8012b28 <_scanf_float+0x60>
 8012c48:	6822      	ldr	r2, [r4, #0]
 8012c4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012c4e:	6022      	str	r2, [r4, #0]
 8012c50:	f806 3b01 	strb.w	r3, [r6], #1
 8012c54:	e7e4      	b.n	8012c20 <_scanf_float+0x158>
 8012c56:	6822      	ldr	r2, [r4, #0]
 8012c58:	0610      	lsls	r0, r2, #24
 8012c5a:	f57f af65 	bpl.w	8012b28 <_scanf_float+0x60>
 8012c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012c62:	e7f4      	b.n	8012c4e <_scanf_float+0x186>
 8012c64:	f1ba 0f00 	cmp.w	sl, #0
 8012c68:	d10e      	bne.n	8012c88 <_scanf_float+0x1c0>
 8012c6a:	f1b9 0f00 	cmp.w	r9, #0
 8012c6e:	d10e      	bne.n	8012c8e <_scanf_float+0x1c6>
 8012c70:	6822      	ldr	r2, [r4, #0]
 8012c72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012c76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012c7a:	d108      	bne.n	8012c8e <_scanf_float+0x1c6>
 8012c7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012c80:	6022      	str	r2, [r4, #0]
 8012c82:	f04f 0a01 	mov.w	sl, #1
 8012c86:	e7e3      	b.n	8012c50 <_scanf_float+0x188>
 8012c88:	f1ba 0f02 	cmp.w	sl, #2
 8012c8c:	d055      	beq.n	8012d3a <_scanf_float+0x272>
 8012c8e:	2d01      	cmp	r5, #1
 8012c90:	d002      	beq.n	8012c98 <_scanf_float+0x1d0>
 8012c92:	2d04      	cmp	r5, #4
 8012c94:	f47f af48 	bne.w	8012b28 <_scanf_float+0x60>
 8012c98:	3501      	adds	r5, #1
 8012c9a:	b2ed      	uxtb	r5, r5
 8012c9c:	e7d8      	b.n	8012c50 <_scanf_float+0x188>
 8012c9e:	f1ba 0f01 	cmp.w	sl, #1
 8012ca2:	f47f af41 	bne.w	8012b28 <_scanf_float+0x60>
 8012ca6:	f04f 0a02 	mov.w	sl, #2
 8012caa:	e7d1      	b.n	8012c50 <_scanf_float+0x188>
 8012cac:	b97d      	cbnz	r5, 8012cce <_scanf_float+0x206>
 8012cae:	f1b9 0f00 	cmp.w	r9, #0
 8012cb2:	f47f af3c 	bne.w	8012b2e <_scanf_float+0x66>
 8012cb6:	6822      	ldr	r2, [r4, #0]
 8012cb8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012cbc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012cc0:	f47f af39 	bne.w	8012b36 <_scanf_float+0x6e>
 8012cc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012cc8:	6022      	str	r2, [r4, #0]
 8012cca:	2501      	movs	r5, #1
 8012ccc:	e7c0      	b.n	8012c50 <_scanf_float+0x188>
 8012cce:	2d03      	cmp	r5, #3
 8012cd0:	d0e2      	beq.n	8012c98 <_scanf_float+0x1d0>
 8012cd2:	2d05      	cmp	r5, #5
 8012cd4:	e7de      	b.n	8012c94 <_scanf_float+0x1cc>
 8012cd6:	2d02      	cmp	r5, #2
 8012cd8:	f47f af26 	bne.w	8012b28 <_scanf_float+0x60>
 8012cdc:	2503      	movs	r5, #3
 8012cde:	e7b7      	b.n	8012c50 <_scanf_float+0x188>
 8012ce0:	2d06      	cmp	r5, #6
 8012ce2:	f47f af21 	bne.w	8012b28 <_scanf_float+0x60>
 8012ce6:	2507      	movs	r5, #7
 8012ce8:	e7b2      	b.n	8012c50 <_scanf_float+0x188>
 8012cea:	6822      	ldr	r2, [r4, #0]
 8012cec:	0591      	lsls	r1, r2, #22
 8012cee:	f57f af1b 	bpl.w	8012b28 <_scanf_float+0x60>
 8012cf2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012cf6:	6022      	str	r2, [r4, #0]
 8012cf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8012cfc:	e7a8      	b.n	8012c50 <_scanf_float+0x188>
 8012cfe:	6822      	ldr	r2, [r4, #0]
 8012d00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012d04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012d08:	d006      	beq.n	8012d18 <_scanf_float+0x250>
 8012d0a:	0550      	lsls	r0, r2, #21
 8012d0c:	f57f af0c 	bpl.w	8012b28 <_scanf_float+0x60>
 8012d10:	f1b9 0f00 	cmp.w	r9, #0
 8012d14:	f43f af0f 	beq.w	8012b36 <_scanf_float+0x6e>
 8012d18:	0591      	lsls	r1, r2, #22
 8012d1a:	bf58      	it	pl
 8012d1c:	9901      	ldrpl	r1, [sp, #4]
 8012d1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012d22:	bf58      	it	pl
 8012d24:	eba9 0101 	subpl.w	r1, r9, r1
 8012d28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012d2c:	bf58      	it	pl
 8012d2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012d32:	6022      	str	r2, [r4, #0]
 8012d34:	f04f 0900 	mov.w	r9, #0
 8012d38:	e78a      	b.n	8012c50 <_scanf_float+0x188>
 8012d3a:	f04f 0a03 	mov.w	sl, #3
 8012d3e:	e787      	b.n	8012c50 <_scanf_float+0x188>
 8012d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012d44:	4639      	mov	r1, r7
 8012d46:	4640      	mov	r0, r8
 8012d48:	4798      	blx	r3
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	f43f aedf 	beq.w	8012b0e <_scanf_float+0x46>
 8012d50:	e6ea      	b.n	8012b28 <_scanf_float+0x60>
 8012d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012d5a:	463a      	mov	r2, r7
 8012d5c:	4640      	mov	r0, r8
 8012d5e:	4798      	blx	r3
 8012d60:	6923      	ldr	r3, [r4, #16]
 8012d62:	3b01      	subs	r3, #1
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	e6ec      	b.n	8012b42 <_scanf_float+0x7a>
 8012d68:	1e6b      	subs	r3, r5, #1
 8012d6a:	2b06      	cmp	r3, #6
 8012d6c:	d825      	bhi.n	8012dba <_scanf_float+0x2f2>
 8012d6e:	2d02      	cmp	r5, #2
 8012d70:	d836      	bhi.n	8012de0 <_scanf_float+0x318>
 8012d72:	455e      	cmp	r6, fp
 8012d74:	f67f aee8 	bls.w	8012b48 <_scanf_float+0x80>
 8012d78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012d80:	463a      	mov	r2, r7
 8012d82:	4640      	mov	r0, r8
 8012d84:	4798      	blx	r3
 8012d86:	6923      	ldr	r3, [r4, #16]
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	6123      	str	r3, [r4, #16]
 8012d8c:	e7f1      	b.n	8012d72 <_scanf_float+0x2aa>
 8012d8e:	9802      	ldr	r0, [sp, #8]
 8012d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012d98:	9002      	str	r0, [sp, #8]
 8012d9a:	463a      	mov	r2, r7
 8012d9c:	4640      	mov	r0, r8
 8012d9e:	4798      	blx	r3
 8012da0:	6923      	ldr	r3, [r4, #16]
 8012da2:	3b01      	subs	r3, #1
 8012da4:	6123      	str	r3, [r4, #16]
 8012da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012daa:	fa5f fa8a 	uxtb.w	sl, sl
 8012dae:	f1ba 0f02 	cmp.w	sl, #2
 8012db2:	d1ec      	bne.n	8012d8e <_scanf_float+0x2c6>
 8012db4:	3d03      	subs	r5, #3
 8012db6:	b2ed      	uxtb	r5, r5
 8012db8:	1b76      	subs	r6, r6, r5
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	05da      	lsls	r2, r3, #23
 8012dbe:	d52f      	bpl.n	8012e20 <_scanf_float+0x358>
 8012dc0:	055b      	lsls	r3, r3, #21
 8012dc2:	d510      	bpl.n	8012de6 <_scanf_float+0x31e>
 8012dc4:	455e      	cmp	r6, fp
 8012dc6:	f67f aebf 	bls.w	8012b48 <_scanf_float+0x80>
 8012dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012dd2:	463a      	mov	r2, r7
 8012dd4:	4640      	mov	r0, r8
 8012dd6:	4798      	blx	r3
 8012dd8:	6923      	ldr	r3, [r4, #16]
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	6123      	str	r3, [r4, #16]
 8012dde:	e7f1      	b.n	8012dc4 <_scanf_float+0x2fc>
 8012de0:	46aa      	mov	sl, r5
 8012de2:	9602      	str	r6, [sp, #8]
 8012de4:	e7df      	b.n	8012da6 <_scanf_float+0x2de>
 8012de6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012dea:	6923      	ldr	r3, [r4, #16]
 8012dec:	2965      	cmp	r1, #101	; 0x65
 8012dee:	f103 33ff 	add.w	r3, r3, #4294967295
 8012df2:	f106 35ff 	add.w	r5, r6, #4294967295
 8012df6:	6123      	str	r3, [r4, #16]
 8012df8:	d00c      	beq.n	8012e14 <_scanf_float+0x34c>
 8012dfa:	2945      	cmp	r1, #69	; 0x45
 8012dfc:	d00a      	beq.n	8012e14 <_scanf_float+0x34c>
 8012dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e02:	463a      	mov	r2, r7
 8012e04:	4640      	mov	r0, r8
 8012e06:	4798      	blx	r3
 8012e08:	6923      	ldr	r3, [r4, #16]
 8012e0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	1eb5      	subs	r5, r6, #2
 8012e12:	6123      	str	r3, [r4, #16]
 8012e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e18:	463a      	mov	r2, r7
 8012e1a:	4640      	mov	r0, r8
 8012e1c:	4798      	blx	r3
 8012e1e:	462e      	mov	r6, r5
 8012e20:	6825      	ldr	r5, [r4, #0]
 8012e22:	f015 0510 	ands.w	r5, r5, #16
 8012e26:	d158      	bne.n	8012eda <_scanf_float+0x412>
 8012e28:	7035      	strb	r5, [r6, #0]
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e34:	d11c      	bne.n	8012e70 <_scanf_float+0x3a8>
 8012e36:	9b01      	ldr	r3, [sp, #4]
 8012e38:	454b      	cmp	r3, r9
 8012e3a:	eba3 0209 	sub.w	r2, r3, r9
 8012e3e:	d124      	bne.n	8012e8a <_scanf_float+0x3c2>
 8012e40:	2200      	movs	r2, #0
 8012e42:	4659      	mov	r1, fp
 8012e44:	4640      	mov	r0, r8
 8012e46:	f002 fbbb 	bl	80155c0 <_strtod_r>
 8012e4a:	9b03      	ldr	r3, [sp, #12]
 8012e4c:	6821      	ldr	r1, [r4, #0]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	f011 0f02 	tst.w	r1, #2
 8012e54:	ec57 6b10 	vmov	r6, r7, d0
 8012e58:	f103 0204 	add.w	r2, r3, #4
 8012e5c:	d020      	beq.n	8012ea0 <_scanf_float+0x3d8>
 8012e5e:	9903      	ldr	r1, [sp, #12]
 8012e60:	600a      	str	r2, [r1, #0]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	e9c3 6700 	strd	r6, r7, [r3]
 8012e68:	68e3      	ldr	r3, [r4, #12]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	60e3      	str	r3, [r4, #12]
 8012e6e:	e66c      	b.n	8012b4a <_scanf_float+0x82>
 8012e70:	9b04      	ldr	r3, [sp, #16]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d0e4      	beq.n	8012e40 <_scanf_float+0x378>
 8012e76:	9905      	ldr	r1, [sp, #20]
 8012e78:	230a      	movs	r3, #10
 8012e7a:	462a      	mov	r2, r5
 8012e7c:	3101      	adds	r1, #1
 8012e7e:	4640      	mov	r0, r8
 8012e80:	f002 fc26 	bl	80156d0 <_strtol_r>
 8012e84:	9b04      	ldr	r3, [sp, #16]
 8012e86:	9e05      	ldr	r6, [sp, #20]
 8012e88:	1ac2      	subs	r2, r0, r3
 8012e8a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012e8e:	429e      	cmp	r6, r3
 8012e90:	bf28      	it	cs
 8012e92:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012e96:	4912      	ldr	r1, [pc, #72]	; (8012ee0 <_scanf_float+0x418>)
 8012e98:	4630      	mov	r0, r6
 8012e9a:	f000 f909 	bl	80130b0 <siprintf>
 8012e9e:	e7cf      	b.n	8012e40 <_scanf_float+0x378>
 8012ea0:	f011 0f04 	tst.w	r1, #4
 8012ea4:	9903      	ldr	r1, [sp, #12]
 8012ea6:	600a      	str	r2, [r1, #0]
 8012ea8:	d1db      	bne.n	8012e62 <_scanf_float+0x39a>
 8012eaa:	f8d3 8000 	ldr.w	r8, [r3]
 8012eae:	ee10 2a10 	vmov	r2, s0
 8012eb2:	ee10 0a10 	vmov	r0, s0
 8012eb6:	463b      	mov	r3, r7
 8012eb8:	4639      	mov	r1, r7
 8012eba:	f7ed fe37 	bl	8000b2c <__aeabi_dcmpun>
 8012ebe:	b128      	cbz	r0, 8012ecc <_scanf_float+0x404>
 8012ec0:	4808      	ldr	r0, [pc, #32]	; (8012ee4 <_scanf_float+0x41c>)
 8012ec2:	f000 f9f5 	bl	80132b0 <nanf>
 8012ec6:	ed88 0a00 	vstr	s0, [r8]
 8012eca:	e7cd      	b.n	8012e68 <_scanf_float+0x3a0>
 8012ecc:	4630      	mov	r0, r6
 8012ece:	4639      	mov	r1, r7
 8012ed0:	f7ed fe8a 	bl	8000be8 <__aeabi_d2f>
 8012ed4:	f8c8 0000 	str.w	r0, [r8]
 8012ed8:	e7c6      	b.n	8012e68 <_scanf_float+0x3a0>
 8012eda:	2500      	movs	r5, #0
 8012edc:	e635      	b.n	8012b4a <_scanf_float+0x82>
 8012ede:	bf00      	nop
 8012ee0:	08016c70 	.word	0x08016c70
 8012ee4:	08017005 	.word	0x08017005

08012ee8 <std>:
 8012ee8:	2300      	movs	r3, #0
 8012eea:	b510      	push	{r4, lr}
 8012eec:	4604      	mov	r4, r0
 8012eee:	e9c0 3300 	strd	r3, r3, [r0]
 8012ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ef6:	6083      	str	r3, [r0, #8]
 8012ef8:	8181      	strh	r1, [r0, #12]
 8012efa:	6643      	str	r3, [r0, #100]	; 0x64
 8012efc:	81c2      	strh	r2, [r0, #14]
 8012efe:	6183      	str	r3, [r0, #24]
 8012f00:	4619      	mov	r1, r3
 8012f02:	2208      	movs	r2, #8
 8012f04:	305c      	adds	r0, #92	; 0x5c
 8012f06:	f000 f936 	bl	8013176 <memset>
 8012f0a:	4b05      	ldr	r3, [pc, #20]	; (8012f20 <std+0x38>)
 8012f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8012f0e:	4b05      	ldr	r3, [pc, #20]	; (8012f24 <std+0x3c>)
 8012f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f12:	4b05      	ldr	r3, [pc, #20]	; (8012f28 <std+0x40>)
 8012f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f16:	4b05      	ldr	r3, [pc, #20]	; (8012f2c <std+0x44>)
 8012f18:	6224      	str	r4, [r4, #32]
 8012f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8012f1c:	bd10      	pop	{r4, pc}
 8012f1e:	bf00      	nop
 8012f20:	080130f1 	.word	0x080130f1
 8012f24:	08013113 	.word	0x08013113
 8012f28:	0801314b 	.word	0x0801314b
 8012f2c:	0801316f 	.word	0x0801316f

08012f30 <stdio_exit_handler>:
 8012f30:	4a02      	ldr	r2, [pc, #8]	; (8012f3c <stdio_exit_handler+0xc>)
 8012f32:	4903      	ldr	r1, [pc, #12]	; (8012f40 <stdio_exit_handler+0x10>)
 8012f34:	4803      	ldr	r0, [pc, #12]	; (8012f44 <stdio_exit_handler+0x14>)
 8012f36:	f000 b869 	b.w	801300c <_fwalk_sglue>
 8012f3a:	bf00      	nop
 8012f3c:	2000010c 	.word	0x2000010c
 8012f40:	08015a91 	.word	0x08015a91
 8012f44:	20000118 	.word	0x20000118

08012f48 <cleanup_stdio>:
 8012f48:	6841      	ldr	r1, [r0, #4]
 8012f4a:	4b0c      	ldr	r3, [pc, #48]	; (8012f7c <cleanup_stdio+0x34>)
 8012f4c:	4299      	cmp	r1, r3
 8012f4e:	b510      	push	{r4, lr}
 8012f50:	4604      	mov	r4, r0
 8012f52:	d001      	beq.n	8012f58 <cleanup_stdio+0x10>
 8012f54:	f002 fd9c 	bl	8015a90 <_fflush_r>
 8012f58:	68a1      	ldr	r1, [r4, #8]
 8012f5a:	4b09      	ldr	r3, [pc, #36]	; (8012f80 <cleanup_stdio+0x38>)
 8012f5c:	4299      	cmp	r1, r3
 8012f5e:	d002      	beq.n	8012f66 <cleanup_stdio+0x1e>
 8012f60:	4620      	mov	r0, r4
 8012f62:	f002 fd95 	bl	8015a90 <_fflush_r>
 8012f66:	68e1      	ldr	r1, [r4, #12]
 8012f68:	4b06      	ldr	r3, [pc, #24]	; (8012f84 <cleanup_stdio+0x3c>)
 8012f6a:	4299      	cmp	r1, r3
 8012f6c:	d004      	beq.n	8012f78 <cleanup_stdio+0x30>
 8012f6e:	4620      	mov	r0, r4
 8012f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f74:	f002 bd8c 	b.w	8015a90 <_fflush_r>
 8012f78:	bd10      	pop	{r4, pc}
 8012f7a:	bf00      	nop
 8012f7c:	2000ed7c 	.word	0x2000ed7c
 8012f80:	2000ede4 	.word	0x2000ede4
 8012f84:	2000ee4c 	.word	0x2000ee4c

08012f88 <global_stdio_init.part.0>:
 8012f88:	b510      	push	{r4, lr}
 8012f8a:	4b0b      	ldr	r3, [pc, #44]	; (8012fb8 <global_stdio_init.part.0+0x30>)
 8012f8c:	4c0b      	ldr	r4, [pc, #44]	; (8012fbc <global_stdio_init.part.0+0x34>)
 8012f8e:	4a0c      	ldr	r2, [pc, #48]	; (8012fc0 <global_stdio_init.part.0+0x38>)
 8012f90:	601a      	str	r2, [r3, #0]
 8012f92:	4620      	mov	r0, r4
 8012f94:	2200      	movs	r2, #0
 8012f96:	2104      	movs	r1, #4
 8012f98:	f7ff ffa6 	bl	8012ee8 <std>
 8012f9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	2109      	movs	r1, #9
 8012fa4:	f7ff ffa0 	bl	8012ee8 <std>
 8012fa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012fac:	2202      	movs	r2, #2
 8012fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fb2:	2112      	movs	r1, #18
 8012fb4:	f7ff bf98 	b.w	8012ee8 <std>
 8012fb8:	2000eeb4 	.word	0x2000eeb4
 8012fbc:	2000ed7c 	.word	0x2000ed7c
 8012fc0:	08012f31 	.word	0x08012f31

08012fc4 <__sfp_lock_acquire>:
 8012fc4:	4801      	ldr	r0, [pc, #4]	; (8012fcc <__sfp_lock_acquire+0x8>)
 8012fc6:	f000 b963 	b.w	8013290 <__retarget_lock_acquire_recursive>
 8012fca:	bf00      	nop
 8012fcc:	2000eebd 	.word	0x2000eebd

08012fd0 <__sfp_lock_release>:
 8012fd0:	4801      	ldr	r0, [pc, #4]	; (8012fd8 <__sfp_lock_release+0x8>)
 8012fd2:	f000 b95e 	b.w	8013292 <__retarget_lock_release_recursive>
 8012fd6:	bf00      	nop
 8012fd8:	2000eebd 	.word	0x2000eebd

08012fdc <__sinit>:
 8012fdc:	b510      	push	{r4, lr}
 8012fde:	4604      	mov	r4, r0
 8012fe0:	f7ff fff0 	bl	8012fc4 <__sfp_lock_acquire>
 8012fe4:	6a23      	ldr	r3, [r4, #32]
 8012fe6:	b11b      	cbz	r3, 8012ff0 <__sinit+0x14>
 8012fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fec:	f7ff bff0 	b.w	8012fd0 <__sfp_lock_release>
 8012ff0:	4b04      	ldr	r3, [pc, #16]	; (8013004 <__sinit+0x28>)
 8012ff2:	6223      	str	r3, [r4, #32]
 8012ff4:	4b04      	ldr	r3, [pc, #16]	; (8013008 <__sinit+0x2c>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1f5      	bne.n	8012fe8 <__sinit+0xc>
 8012ffc:	f7ff ffc4 	bl	8012f88 <global_stdio_init.part.0>
 8013000:	e7f2      	b.n	8012fe8 <__sinit+0xc>
 8013002:	bf00      	nop
 8013004:	08012f49 	.word	0x08012f49
 8013008:	2000eeb4 	.word	0x2000eeb4

0801300c <_fwalk_sglue>:
 801300c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013010:	4607      	mov	r7, r0
 8013012:	4688      	mov	r8, r1
 8013014:	4614      	mov	r4, r2
 8013016:	2600      	movs	r6, #0
 8013018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801301c:	f1b9 0901 	subs.w	r9, r9, #1
 8013020:	d505      	bpl.n	801302e <_fwalk_sglue+0x22>
 8013022:	6824      	ldr	r4, [r4, #0]
 8013024:	2c00      	cmp	r4, #0
 8013026:	d1f7      	bne.n	8013018 <_fwalk_sglue+0xc>
 8013028:	4630      	mov	r0, r6
 801302a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801302e:	89ab      	ldrh	r3, [r5, #12]
 8013030:	2b01      	cmp	r3, #1
 8013032:	d907      	bls.n	8013044 <_fwalk_sglue+0x38>
 8013034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013038:	3301      	adds	r3, #1
 801303a:	d003      	beq.n	8013044 <_fwalk_sglue+0x38>
 801303c:	4629      	mov	r1, r5
 801303e:	4638      	mov	r0, r7
 8013040:	47c0      	blx	r8
 8013042:	4306      	orrs	r6, r0
 8013044:	3568      	adds	r5, #104	; 0x68
 8013046:	e7e9      	b.n	801301c <_fwalk_sglue+0x10>

08013048 <sniprintf>:
 8013048:	b40c      	push	{r2, r3}
 801304a:	b530      	push	{r4, r5, lr}
 801304c:	4b17      	ldr	r3, [pc, #92]	; (80130ac <sniprintf+0x64>)
 801304e:	1e0c      	subs	r4, r1, #0
 8013050:	681d      	ldr	r5, [r3, #0]
 8013052:	b09d      	sub	sp, #116	; 0x74
 8013054:	da08      	bge.n	8013068 <sniprintf+0x20>
 8013056:	238b      	movs	r3, #139	; 0x8b
 8013058:	602b      	str	r3, [r5, #0]
 801305a:	f04f 30ff 	mov.w	r0, #4294967295
 801305e:	b01d      	add	sp, #116	; 0x74
 8013060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013064:	b002      	add	sp, #8
 8013066:	4770      	bx	lr
 8013068:	f44f 7302 	mov.w	r3, #520	; 0x208
 801306c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013070:	bf14      	ite	ne
 8013072:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013076:	4623      	moveq	r3, r4
 8013078:	9304      	str	r3, [sp, #16]
 801307a:	9307      	str	r3, [sp, #28]
 801307c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013080:	9002      	str	r0, [sp, #8]
 8013082:	9006      	str	r0, [sp, #24]
 8013084:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013088:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801308a:	ab21      	add	r3, sp, #132	; 0x84
 801308c:	a902      	add	r1, sp, #8
 801308e:	4628      	mov	r0, r5
 8013090:	9301      	str	r3, [sp, #4]
 8013092:	f002 fb79 	bl	8015788 <_svfiprintf_r>
 8013096:	1c43      	adds	r3, r0, #1
 8013098:	bfbc      	itt	lt
 801309a:	238b      	movlt	r3, #139	; 0x8b
 801309c:	602b      	strlt	r3, [r5, #0]
 801309e:	2c00      	cmp	r4, #0
 80130a0:	d0dd      	beq.n	801305e <sniprintf+0x16>
 80130a2:	9b02      	ldr	r3, [sp, #8]
 80130a4:	2200      	movs	r2, #0
 80130a6:	701a      	strb	r2, [r3, #0]
 80130a8:	e7d9      	b.n	801305e <sniprintf+0x16>
 80130aa:	bf00      	nop
 80130ac:	20000164 	.word	0x20000164

080130b0 <siprintf>:
 80130b0:	b40e      	push	{r1, r2, r3}
 80130b2:	b500      	push	{lr}
 80130b4:	b09c      	sub	sp, #112	; 0x70
 80130b6:	ab1d      	add	r3, sp, #116	; 0x74
 80130b8:	9002      	str	r0, [sp, #8]
 80130ba:	9006      	str	r0, [sp, #24]
 80130bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130c0:	4809      	ldr	r0, [pc, #36]	; (80130e8 <siprintf+0x38>)
 80130c2:	9107      	str	r1, [sp, #28]
 80130c4:	9104      	str	r1, [sp, #16]
 80130c6:	4909      	ldr	r1, [pc, #36]	; (80130ec <siprintf+0x3c>)
 80130c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80130cc:	9105      	str	r1, [sp, #20]
 80130ce:	6800      	ldr	r0, [r0, #0]
 80130d0:	9301      	str	r3, [sp, #4]
 80130d2:	a902      	add	r1, sp, #8
 80130d4:	f002 fb58 	bl	8015788 <_svfiprintf_r>
 80130d8:	9b02      	ldr	r3, [sp, #8]
 80130da:	2200      	movs	r2, #0
 80130dc:	701a      	strb	r2, [r3, #0]
 80130de:	b01c      	add	sp, #112	; 0x70
 80130e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130e4:	b003      	add	sp, #12
 80130e6:	4770      	bx	lr
 80130e8:	20000164 	.word	0x20000164
 80130ec:	ffff0208 	.word	0xffff0208

080130f0 <__sread>:
 80130f0:	b510      	push	{r4, lr}
 80130f2:	460c      	mov	r4, r1
 80130f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130f8:	f000 f86c 	bl	80131d4 <_read_r>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	bfab      	itete	ge
 8013100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013102:	89a3      	ldrhlt	r3, [r4, #12]
 8013104:	181b      	addge	r3, r3, r0
 8013106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801310a:	bfac      	ite	ge
 801310c:	6563      	strge	r3, [r4, #84]	; 0x54
 801310e:	81a3      	strhlt	r3, [r4, #12]
 8013110:	bd10      	pop	{r4, pc}

08013112 <__swrite>:
 8013112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013116:	461f      	mov	r7, r3
 8013118:	898b      	ldrh	r3, [r1, #12]
 801311a:	05db      	lsls	r3, r3, #23
 801311c:	4605      	mov	r5, r0
 801311e:	460c      	mov	r4, r1
 8013120:	4616      	mov	r6, r2
 8013122:	d505      	bpl.n	8013130 <__swrite+0x1e>
 8013124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013128:	2302      	movs	r3, #2
 801312a:	2200      	movs	r2, #0
 801312c:	f000 f840 	bl	80131b0 <_lseek_r>
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801313a:	81a3      	strh	r3, [r4, #12]
 801313c:	4632      	mov	r2, r6
 801313e:	463b      	mov	r3, r7
 8013140:	4628      	mov	r0, r5
 8013142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013146:	f000 b867 	b.w	8013218 <_write_r>

0801314a <__sseek>:
 801314a:	b510      	push	{r4, lr}
 801314c:	460c      	mov	r4, r1
 801314e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013152:	f000 f82d 	bl	80131b0 <_lseek_r>
 8013156:	1c43      	adds	r3, r0, #1
 8013158:	89a3      	ldrh	r3, [r4, #12]
 801315a:	bf15      	itete	ne
 801315c:	6560      	strne	r0, [r4, #84]	; 0x54
 801315e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013166:	81a3      	strheq	r3, [r4, #12]
 8013168:	bf18      	it	ne
 801316a:	81a3      	strhne	r3, [r4, #12]
 801316c:	bd10      	pop	{r4, pc}

0801316e <__sclose>:
 801316e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013172:	f000 b80d 	b.w	8013190 <_close_r>

08013176 <memset>:
 8013176:	4402      	add	r2, r0
 8013178:	4603      	mov	r3, r0
 801317a:	4293      	cmp	r3, r2
 801317c:	d100      	bne.n	8013180 <memset+0xa>
 801317e:	4770      	bx	lr
 8013180:	f803 1b01 	strb.w	r1, [r3], #1
 8013184:	e7f9      	b.n	801317a <memset+0x4>
	...

08013188 <_localeconv_r>:
 8013188:	4800      	ldr	r0, [pc, #0]	; (801318c <_localeconv_r+0x4>)
 801318a:	4770      	bx	lr
 801318c:	20000258 	.word	0x20000258

08013190 <_close_r>:
 8013190:	b538      	push	{r3, r4, r5, lr}
 8013192:	4d06      	ldr	r5, [pc, #24]	; (80131ac <_close_r+0x1c>)
 8013194:	2300      	movs	r3, #0
 8013196:	4604      	mov	r4, r0
 8013198:	4608      	mov	r0, r1
 801319a:	602b      	str	r3, [r5, #0]
 801319c:	f7f0 fb73 	bl	8003886 <_close>
 80131a0:	1c43      	adds	r3, r0, #1
 80131a2:	d102      	bne.n	80131aa <_close_r+0x1a>
 80131a4:	682b      	ldr	r3, [r5, #0]
 80131a6:	b103      	cbz	r3, 80131aa <_close_r+0x1a>
 80131a8:	6023      	str	r3, [r4, #0]
 80131aa:	bd38      	pop	{r3, r4, r5, pc}
 80131ac:	2000eeb8 	.word	0x2000eeb8

080131b0 <_lseek_r>:
 80131b0:	b538      	push	{r3, r4, r5, lr}
 80131b2:	4d07      	ldr	r5, [pc, #28]	; (80131d0 <_lseek_r+0x20>)
 80131b4:	4604      	mov	r4, r0
 80131b6:	4608      	mov	r0, r1
 80131b8:	4611      	mov	r1, r2
 80131ba:	2200      	movs	r2, #0
 80131bc:	602a      	str	r2, [r5, #0]
 80131be:	461a      	mov	r2, r3
 80131c0:	f7f0 fb88 	bl	80038d4 <_lseek>
 80131c4:	1c43      	adds	r3, r0, #1
 80131c6:	d102      	bne.n	80131ce <_lseek_r+0x1e>
 80131c8:	682b      	ldr	r3, [r5, #0]
 80131ca:	b103      	cbz	r3, 80131ce <_lseek_r+0x1e>
 80131cc:	6023      	str	r3, [r4, #0]
 80131ce:	bd38      	pop	{r3, r4, r5, pc}
 80131d0:	2000eeb8 	.word	0x2000eeb8

080131d4 <_read_r>:
 80131d4:	b538      	push	{r3, r4, r5, lr}
 80131d6:	4d07      	ldr	r5, [pc, #28]	; (80131f4 <_read_r+0x20>)
 80131d8:	4604      	mov	r4, r0
 80131da:	4608      	mov	r0, r1
 80131dc:	4611      	mov	r1, r2
 80131de:	2200      	movs	r2, #0
 80131e0:	602a      	str	r2, [r5, #0]
 80131e2:	461a      	mov	r2, r3
 80131e4:	f7f0 fb16 	bl	8003814 <_read>
 80131e8:	1c43      	adds	r3, r0, #1
 80131ea:	d102      	bne.n	80131f2 <_read_r+0x1e>
 80131ec:	682b      	ldr	r3, [r5, #0]
 80131ee:	b103      	cbz	r3, 80131f2 <_read_r+0x1e>
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	bd38      	pop	{r3, r4, r5, pc}
 80131f4:	2000eeb8 	.word	0x2000eeb8

080131f8 <_sbrk_r>:
 80131f8:	b538      	push	{r3, r4, r5, lr}
 80131fa:	4d06      	ldr	r5, [pc, #24]	; (8013214 <_sbrk_r+0x1c>)
 80131fc:	2300      	movs	r3, #0
 80131fe:	4604      	mov	r4, r0
 8013200:	4608      	mov	r0, r1
 8013202:	602b      	str	r3, [r5, #0]
 8013204:	f7f0 fb74 	bl	80038f0 <_sbrk>
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	d102      	bne.n	8013212 <_sbrk_r+0x1a>
 801320c:	682b      	ldr	r3, [r5, #0]
 801320e:	b103      	cbz	r3, 8013212 <_sbrk_r+0x1a>
 8013210:	6023      	str	r3, [r4, #0]
 8013212:	bd38      	pop	{r3, r4, r5, pc}
 8013214:	2000eeb8 	.word	0x2000eeb8

08013218 <_write_r>:
 8013218:	b538      	push	{r3, r4, r5, lr}
 801321a:	4d07      	ldr	r5, [pc, #28]	; (8013238 <_write_r+0x20>)
 801321c:	4604      	mov	r4, r0
 801321e:	4608      	mov	r0, r1
 8013220:	4611      	mov	r1, r2
 8013222:	2200      	movs	r2, #0
 8013224:	602a      	str	r2, [r5, #0]
 8013226:	461a      	mov	r2, r3
 8013228:	f7f0 fb11 	bl	800384e <_write>
 801322c:	1c43      	adds	r3, r0, #1
 801322e:	d102      	bne.n	8013236 <_write_r+0x1e>
 8013230:	682b      	ldr	r3, [r5, #0]
 8013232:	b103      	cbz	r3, 8013236 <_write_r+0x1e>
 8013234:	6023      	str	r3, [r4, #0]
 8013236:	bd38      	pop	{r3, r4, r5, pc}
 8013238:	2000eeb8 	.word	0x2000eeb8

0801323c <__errno>:
 801323c:	4b01      	ldr	r3, [pc, #4]	; (8013244 <__errno+0x8>)
 801323e:	6818      	ldr	r0, [r3, #0]
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	20000164 	.word	0x20000164

08013248 <__libc_init_array>:
 8013248:	b570      	push	{r4, r5, r6, lr}
 801324a:	4d0d      	ldr	r5, [pc, #52]	; (8013280 <__libc_init_array+0x38>)
 801324c:	4c0d      	ldr	r4, [pc, #52]	; (8013284 <__libc_init_array+0x3c>)
 801324e:	1b64      	subs	r4, r4, r5
 8013250:	10a4      	asrs	r4, r4, #2
 8013252:	2600      	movs	r6, #0
 8013254:	42a6      	cmp	r6, r4
 8013256:	d109      	bne.n	801326c <__libc_init_array+0x24>
 8013258:	4d0b      	ldr	r5, [pc, #44]	; (8013288 <__libc_init_array+0x40>)
 801325a:	4c0c      	ldr	r4, [pc, #48]	; (801328c <__libc_init_array+0x44>)
 801325c:	f003 fb10 	bl	8016880 <_init>
 8013260:	1b64      	subs	r4, r4, r5
 8013262:	10a4      	asrs	r4, r4, #2
 8013264:	2600      	movs	r6, #0
 8013266:	42a6      	cmp	r6, r4
 8013268:	d105      	bne.n	8013276 <__libc_init_array+0x2e>
 801326a:	bd70      	pop	{r4, r5, r6, pc}
 801326c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013270:	4798      	blx	r3
 8013272:	3601      	adds	r6, #1
 8013274:	e7ee      	b.n	8013254 <__libc_init_array+0xc>
 8013276:	f855 3b04 	ldr.w	r3, [r5], #4
 801327a:	4798      	blx	r3
 801327c:	3601      	adds	r6, #1
 801327e:	e7f2      	b.n	8013266 <__libc_init_array+0x1e>
 8013280:	08017068 	.word	0x08017068
 8013284:	08017068 	.word	0x08017068
 8013288:	08017068 	.word	0x08017068
 801328c:	0801706c 	.word	0x0801706c

08013290 <__retarget_lock_acquire_recursive>:
 8013290:	4770      	bx	lr

08013292 <__retarget_lock_release_recursive>:
 8013292:	4770      	bx	lr

08013294 <memcpy>:
 8013294:	440a      	add	r2, r1
 8013296:	4291      	cmp	r1, r2
 8013298:	f100 33ff 	add.w	r3, r0, #4294967295
 801329c:	d100      	bne.n	80132a0 <memcpy+0xc>
 801329e:	4770      	bx	lr
 80132a0:	b510      	push	{r4, lr}
 80132a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132aa:	4291      	cmp	r1, r2
 80132ac:	d1f9      	bne.n	80132a2 <memcpy+0xe>
 80132ae:	bd10      	pop	{r4, pc}

080132b0 <nanf>:
 80132b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80132b8 <nanf+0x8>
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop
 80132b8:	7fc00000 	.word	0x7fc00000

080132bc <quorem>:
 80132bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c0:	6903      	ldr	r3, [r0, #16]
 80132c2:	690c      	ldr	r4, [r1, #16]
 80132c4:	42a3      	cmp	r3, r4
 80132c6:	4607      	mov	r7, r0
 80132c8:	db7e      	blt.n	80133c8 <quorem+0x10c>
 80132ca:	3c01      	subs	r4, #1
 80132cc:	f101 0814 	add.w	r8, r1, #20
 80132d0:	f100 0514 	add.w	r5, r0, #20
 80132d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132d8:	9301      	str	r3, [sp, #4]
 80132da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80132de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132e2:	3301      	adds	r3, #1
 80132e4:	429a      	cmp	r2, r3
 80132e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80132ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80132ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80132f2:	d331      	bcc.n	8013358 <quorem+0x9c>
 80132f4:	f04f 0e00 	mov.w	lr, #0
 80132f8:	4640      	mov	r0, r8
 80132fa:	46ac      	mov	ip, r5
 80132fc:	46f2      	mov	sl, lr
 80132fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8013302:	b293      	uxth	r3, r2
 8013304:	fb06 e303 	mla	r3, r6, r3, lr
 8013308:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801330c:	0c1a      	lsrs	r2, r3, #16
 801330e:	b29b      	uxth	r3, r3
 8013310:	ebaa 0303 	sub.w	r3, sl, r3
 8013314:	f8dc a000 	ldr.w	sl, [ip]
 8013318:	fa13 f38a 	uxtah	r3, r3, sl
 801331c:	fb06 220e 	mla	r2, r6, lr, r2
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	9b00      	ldr	r3, [sp, #0]
 8013324:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013328:	b292      	uxth	r2, r2
 801332a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801332e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013332:	f8bd 3000 	ldrh.w	r3, [sp]
 8013336:	4581      	cmp	r9, r0
 8013338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801333c:	f84c 3b04 	str.w	r3, [ip], #4
 8013340:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013344:	d2db      	bcs.n	80132fe <quorem+0x42>
 8013346:	f855 300b 	ldr.w	r3, [r5, fp]
 801334a:	b92b      	cbnz	r3, 8013358 <quorem+0x9c>
 801334c:	9b01      	ldr	r3, [sp, #4]
 801334e:	3b04      	subs	r3, #4
 8013350:	429d      	cmp	r5, r3
 8013352:	461a      	mov	r2, r3
 8013354:	d32c      	bcc.n	80133b0 <quorem+0xf4>
 8013356:	613c      	str	r4, [r7, #16]
 8013358:	4638      	mov	r0, r7
 801335a:	f001 f93d 	bl	80145d8 <__mcmp>
 801335e:	2800      	cmp	r0, #0
 8013360:	db22      	blt.n	80133a8 <quorem+0xec>
 8013362:	3601      	adds	r6, #1
 8013364:	4629      	mov	r1, r5
 8013366:	2000      	movs	r0, #0
 8013368:	f858 2b04 	ldr.w	r2, [r8], #4
 801336c:	f8d1 c000 	ldr.w	ip, [r1]
 8013370:	b293      	uxth	r3, r2
 8013372:	1ac3      	subs	r3, r0, r3
 8013374:	0c12      	lsrs	r2, r2, #16
 8013376:	fa13 f38c 	uxtah	r3, r3, ip
 801337a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801337e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013382:	b29b      	uxth	r3, r3
 8013384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013388:	45c1      	cmp	r9, r8
 801338a:	f841 3b04 	str.w	r3, [r1], #4
 801338e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013392:	d2e9      	bcs.n	8013368 <quorem+0xac>
 8013394:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013398:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801339c:	b922      	cbnz	r2, 80133a8 <quorem+0xec>
 801339e:	3b04      	subs	r3, #4
 80133a0:	429d      	cmp	r5, r3
 80133a2:	461a      	mov	r2, r3
 80133a4:	d30a      	bcc.n	80133bc <quorem+0x100>
 80133a6:	613c      	str	r4, [r7, #16]
 80133a8:	4630      	mov	r0, r6
 80133aa:	b003      	add	sp, #12
 80133ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b0:	6812      	ldr	r2, [r2, #0]
 80133b2:	3b04      	subs	r3, #4
 80133b4:	2a00      	cmp	r2, #0
 80133b6:	d1ce      	bne.n	8013356 <quorem+0x9a>
 80133b8:	3c01      	subs	r4, #1
 80133ba:	e7c9      	b.n	8013350 <quorem+0x94>
 80133bc:	6812      	ldr	r2, [r2, #0]
 80133be:	3b04      	subs	r3, #4
 80133c0:	2a00      	cmp	r2, #0
 80133c2:	d1f0      	bne.n	80133a6 <quorem+0xea>
 80133c4:	3c01      	subs	r4, #1
 80133c6:	e7eb      	b.n	80133a0 <quorem+0xe4>
 80133c8:	2000      	movs	r0, #0
 80133ca:	e7ee      	b.n	80133aa <quorem+0xee>
 80133cc:	0000      	movs	r0, r0
	...

080133d0 <_dtoa_r>:
 80133d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d4:	ed2d 8b04 	vpush	{d8-d9}
 80133d8:	69c5      	ldr	r5, [r0, #28]
 80133da:	b093      	sub	sp, #76	; 0x4c
 80133dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80133e0:	ec57 6b10 	vmov	r6, r7, d0
 80133e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80133e8:	9107      	str	r1, [sp, #28]
 80133ea:	4604      	mov	r4, r0
 80133ec:	920a      	str	r2, [sp, #40]	; 0x28
 80133ee:	930d      	str	r3, [sp, #52]	; 0x34
 80133f0:	b975      	cbnz	r5, 8013410 <_dtoa_r+0x40>
 80133f2:	2010      	movs	r0, #16
 80133f4:	f7fe fe4e 	bl	8012094 <malloc>
 80133f8:	4602      	mov	r2, r0
 80133fa:	61e0      	str	r0, [r4, #28]
 80133fc:	b920      	cbnz	r0, 8013408 <_dtoa_r+0x38>
 80133fe:	4bae      	ldr	r3, [pc, #696]	; (80136b8 <_dtoa_r+0x2e8>)
 8013400:	21ef      	movs	r1, #239	; 0xef
 8013402:	48ae      	ldr	r0, [pc, #696]	; (80136bc <_dtoa_r+0x2ec>)
 8013404:	f002 fba0 	bl	8015b48 <__assert_func>
 8013408:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801340c:	6005      	str	r5, [r0, #0]
 801340e:	60c5      	str	r5, [r0, #12]
 8013410:	69e3      	ldr	r3, [r4, #28]
 8013412:	6819      	ldr	r1, [r3, #0]
 8013414:	b151      	cbz	r1, 801342c <_dtoa_r+0x5c>
 8013416:	685a      	ldr	r2, [r3, #4]
 8013418:	604a      	str	r2, [r1, #4]
 801341a:	2301      	movs	r3, #1
 801341c:	4093      	lsls	r3, r2
 801341e:	608b      	str	r3, [r1, #8]
 8013420:	4620      	mov	r0, r4
 8013422:	f000 fe53 	bl	80140cc <_Bfree>
 8013426:	69e3      	ldr	r3, [r4, #28]
 8013428:	2200      	movs	r2, #0
 801342a:	601a      	str	r2, [r3, #0]
 801342c:	1e3b      	subs	r3, r7, #0
 801342e:	bfbb      	ittet	lt
 8013430:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013434:	9303      	strlt	r3, [sp, #12]
 8013436:	2300      	movge	r3, #0
 8013438:	2201      	movlt	r2, #1
 801343a:	bfac      	ite	ge
 801343c:	f8c8 3000 	strge.w	r3, [r8]
 8013440:	f8c8 2000 	strlt.w	r2, [r8]
 8013444:	4b9e      	ldr	r3, [pc, #632]	; (80136c0 <_dtoa_r+0x2f0>)
 8013446:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801344a:	ea33 0308 	bics.w	r3, r3, r8
 801344e:	d11b      	bne.n	8013488 <_dtoa_r+0xb8>
 8013450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013452:	f242 730f 	movw	r3, #9999	; 0x270f
 8013456:	6013      	str	r3, [r2, #0]
 8013458:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801345c:	4333      	orrs	r3, r6
 801345e:	f000 8593 	beq.w	8013f88 <_dtoa_r+0xbb8>
 8013462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013464:	b963      	cbnz	r3, 8013480 <_dtoa_r+0xb0>
 8013466:	4b97      	ldr	r3, [pc, #604]	; (80136c4 <_dtoa_r+0x2f4>)
 8013468:	e027      	b.n	80134ba <_dtoa_r+0xea>
 801346a:	4b97      	ldr	r3, [pc, #604]	; (80136c8 <_dtoa_r+0x2f8>)
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	3308      	adds	r3, #8
 8013470:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013472:	6013      	str	r3, [r2, #0]
 8013474:	9800      	ldr	r0, [sp, #0]
 8013476:	b013      	add	sp, #76	; 0x4c
 8013478:	ecbd 8b04 	vpop	{d8-d9}
 801347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013480:	4b90      	ldr	r3, [pc, #576]	; (80136c4 <_dtoa_r+0x2f4>)
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	3303      	adds	r3, #3
 8013486:	e7f3      	b.n	8013470 <_dtoa_r+0xa0>
 8013488:	ed9d 7b02 	vldr	d7, [sp, #8]
 801348c:	2200      	movs	r2, #0
 801348e:	ec51 0b17 	vmov	r0, r1, d7
 8013492:	eeb0 8a47 	vmov.f32	s16, s14
 8013496:	eef0 8a67 	vmov.f32	s17, s15
 801349a:	2300      	movs	r3, #0
 801349c:	f7ed fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80134a0:	4681      	mov	r9, r0
 80134a2:	b160      	cbz	r0, 80134be <_dtoa_r+0xee>
 80134a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134a6:	2301      	movs	r3, #1
 80134a8:	6013      	str	r3, [r2, #0]
 80134aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 8568 	beq.w	8013f82 <_dtoa_r+0xbb2>
 80134b2:	4b86      	ldr	r3, [pc, #536]	; (80136cc <_dtoa_r+0x2fc>)
 80134b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134b6:	6013      	str	r3, [r2, #0]
 80134b8:	3b01      	subs	r3, #1
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	e7da      	b.n	8013474 <_dtoa_r+0xa4>
 80134be:	aa10      	add	r2, sp, #64	; 0x40
 80134c0:	a911      	add	r1, sp, #68	; 0x44
 80134c2:	4620      	mov	r0, r4
 80134c4:	eeb0 0a48 	vmov.f32	s0, s16
 80134c8:	eef0 0a68 	vmov.f32	s1, s17
 80134cc:	f001 f99a 	bl	8014804 <__d2b>
 80134d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80134d4:	4682      	mov	sl, r0
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	d07f      	beq.n	80135da <_dtoa_r+0x20a>
 80134da:	ee18 3a90 	vmov	r3, s17
 80134de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80134e6:	ec51 0b18 	vmov	r0, r1, d8
 80134ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80134ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80134f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80134f6:	4619      	mov	r1, r3
 80134f8:	2200      	movs	r2, #0
 80134fa:	4b75      	ldr	r3, [pc, #468]	; (80136d0 <_dtoa_r+0x300>)
 80134fc:	f7ec fec4 	bl	8000288 <__aeabi_dsub>
 8013500:	a367      	add	r3, pc, #412	; (adr r3, 80136a0 <_dtoa_r+0x2d0>)
 8013502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013506:	f7ed f877 	bl	80005f8 <__aeabi_dmul>
 801350a:	a367      	add	r3, pc, #412	; (adr r3, 80136a8 <_dtoa_r+0x2d8>)
 801350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013510:	f7ec febc 	bl	800028c <__adddf3>
 8013514:	4606      	mov	r6, r0
 8013516:	4628      	mov	r0, r5
 8013518:	460f      	mov	r7, r1
 801351a:	f7ed f803 	bl	8000524 <__aeabi_i2d>
 801351e:	a364      	add	r3, pc, #400	; (adr r3, 80136b0 <_dtoa_r+0x2e0>)
 8013520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013524:	f7ed f868 	bl	80005f8 <__aeabi_dmul>
 8013528:	4602      	mov	r2, r0
 801352a:	460b      	mov	r3, r1
 801352c:	4630      	mov	r0, r6
 801352e:	4639      	mov	r1, r7
 8013530:	f7ec feac 	bl	800028c <__adddf3>
 8013534:	4606      	mov	r6, r0
 8013536:	460f      	mov	r7, r1
 8013538:	f7ed fb0e 	bl	8000b58 <__aeabi_d2iz>
 801353c:	2200      	movs	r2, #0
 801353e:	4683      	mov	fp, r0
 8013540:	2300      	movs	r3, #0
 8013542:	4630      	mov	r0, r6
 8013544:	4639      	mov	r1, r7
 8013546:	f7ed fac9 	bl	8000adc <__aeabi_dcmplt>
 801354a:	b148      	cbz	r0, 8013560 <_dtoa_r+0x190>
 801354c:	4658      	mov	r0, fp
 801354e:	f7ec ffe9 	bl	8000524 <__aeabi_i2d>
 8013552:	4632      	mov	r2, r6
 8013554:	463b      	mov	r3, r7
 8013556:	f7ed fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 801355a:	b908      	cbnz	r0, 8013560 <_dtoa_r+0x190>
 801355c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013560:	f1bb 0f16 	cmp.w	fp, #22
 8013564:	d857      	bhi.n	8013616 <_dtoa_r+0x246>
 8013566:	4b5b      	ldr	r3, [pc, #364]	; (80136d4 <_dtoa_r+0x304>)
 8013568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013570:	ec51 0b18 	vmov	r0, r1, d8
 8013574:	f7ed fab2 	bl	8000adc <__aeabi_dcmplt>
 8013578:	2800      	cmp	r0, #0
 801357a:	d04e      	beq.n	801361a <_dtoa_r+0x24a>
 801357c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013580:	2300      	movs	r3, #0
 8013582:	930c      	str	r3, [sp, #48]	; 0x30
 8013584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013586:	1b5b      	subs	r3, r3, r5
 8013588:	1e5a      	subs	r2, r3, #1
 801358a:	bf45      	ittet	mi
 801358c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013590:	9305      	strmi	r3, [sp, #20]
 8013592:	2300      	movpl	r3, #0
 8013594:	2300      	movmi	r3, #0
 8013596:	9206      	str	r2, [sp, #24]
 8013598:	bf54      	ite	pl
 801359a:	9305      	strpl	r3, [sp, #20]
 801359c:	9306      	strmi	r3, [sp, #24]
 801359e:	f1bb 0f00 	cmp.w	fp, #0
 80135a2:	db3c      	blt.n	801361e <_dtoa_r+0x24e>
 80135a4:	9b06      	ldr	r3, [sp, #24]
 80135a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80135aa:	445b      	add	r3, fp
 80135ac:	9306      	str	r3, [sp, #24]
 80135ae:	2300      	movs	r3, #0
 80135b0:	9308      	str	r3, [sp, #32]
 80135b2:	9b07      	ldr	r3, [sp, #28]
 80135b4:	2b09      	cmp	r3, #9
 80135b6:	d868      	bhi.n	801368a <_dtoa_r+0x2ba>
 80135b8:	2b05      	cmp	r3, #5
 80135ba:	bfc4      	itt	gt
 80135bc:	3b04      	subgt	r3, #4
 80135be:	9307      	strgt	r3, [sp, #28]
 80135c0:	9b07      	ldr	r3, [sp, #28]
 80135c2:	f1a3 0302 	sub.w	r3, r3, #2
 80135c6:	bfcc      	ite	gt
 80135c8:	2500      	movgt	r5, #0
 80135ca:	2501      	movle	r5, #1
 80135cc:	2b03      	cmp	r3, #3
 80135ce:	f200 8085 	bhi.w	80136dc <_dtoa_r+0x30c>
 80135d2:	e8df f003 	tbb	[pc, r3]
 80135d6:	3b2e      	.short	0x3b2e
 80135d8:	5839      	.short	0x5839
 80135da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80135de:	441d      	add	r5, r3
 80135e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80135e4:	2b20      	cmp	r3, #32
 80135e6:	bfc1      	itttt	gt
 80135e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80135ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80135f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80135f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80135f8:	bfd6      	itet	le
 80135fa:	f1c3 0320 	rsble	r3, r3, #32
 80135fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8013602:	fa06 f003 	lslle.w	r0, r6, r3
 8013606:	f7ec ff7d 	bl	8000504 <__aeabi_ui2d>
 801360a:	2201      	movs	r2, #1
 801360c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013610:	3d01      	subs	r5, #1
 8013612:	920e      	str	r2, [sp, #56]	; 0x38
 8013614:	e76f      	b.n	80134f6 <_dtoa_r+0x126>
 8013616:	2301      	movs	r3, #1
 8013618:	e7b3      	b.n	8013582 <_dtoa_r+0x1b2>
 801361a:	900c      	str	r0, [sp, #48]	; 0x30
 801361c:	e7b2      	b.n	8013584 <_dtoa_r+0x1b4>
 801361e:	9b05      	ldr	r3, [sp, #20]
 8013620:	eba3 030b 	sub.w	r3, r3, fp
 8013624:	9305      	str	r3, [sp, #20]
 8013626:	f1cb 0300 	rsb	r3, fp, #0
 801362a:	9308      	str	r3, [sp, #32]
 801362c:	2300      	movs	r3, #0
 801362e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013630:	e7bf      	b.n	80135b2 <_dtoa_r+0x1e2>
 8013632:	2300      	movs	r3, #0
 8013634:	9309      	str	r3, [sp, #36]	; 0x24
 8013636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013638:	2b00      	cmp	r3, #0
 801363a:	dc52      	bgt.n	80136e2 <_dtoa_r+0x312>
 801363c:	2301      	movs	r3, #1
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	9304      	str	r3, [sp, #16]
 8013642:	461a      	mov	r2, r3
 8013644:	920a      	str	r2, [sp, #40]	; 0x28
 8013646:	e00b      	b.n	8013660 <_dtoa_r+0x290>
 8013648:	2301      	movs	r3, #1
 801364a:	e7f3      	b.n	8013634 <_dtoa_r+0x264>
 801364c:	2300      	movs	r3, #0
 801364e:	9309      	str	r3, [sp, #36]	; 0x24
 8013650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013652:	445b      	add	r3, fp
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	3301      	adds	r3, #1
 8013658:	2b01      	cmp	r3, #1
 801365a:	9304      	str	r3, [sp, #16]
 801365c:	bfb8      	it	lt
 801365e:	2301      	movlt	r3, #1
 8013660:	69e0      	ldr	r0, [r4, #28]
 8013662:	2100      	movs	r1, #0
 8013664:	2204      	movs	r2, #4
 8013666:	f102 0614 	add.w	r6, r2, #20
 801366a:	429e      	cmp	r6, r3
 801366c:	d93d      	bls.n	80136ea <_dtoa_r+0x31a>
 801366e:	6041      	str	r1, [r0, #4]
 8013670:	4620      	mov	r0, r4
 8013672:	f000 fceb 	bl	801404c <_Balloc>
 8013676:	9000      	str	r0, [sp, #0]
 8013678:	2800      	cmp	r0, #0
 801367a:	d139      	bne.n	80136f0 <_dtoa_r+0x320>
 801367c:	4b16      	ldr	r3, [pc, #88]	; (80136d8 <_dtoa_r+0x308>)
 801367e:	4602      	mov	r2, r0
 8013680:	f240 11af 	movw	r1, #431	; 0x1af
 8013684:	e6bd      	b.n	8013402 <_dtoa_r+0x32>
 8013686:	2301      	movs	r3, #1
 8013688:	e7e1      	b.n	801364e <_dtoa_r+0x27e>
 801368a:	2501      	movs	r5, #1
 801368c:	2300      	movs	r3, #0
 801368e:	9307      	str	r3, [sp, #28]
 8013690:	9509      	str	r5, [sp, #36]	; 0x24
 8013692:	f04f 33ff 	mov.w	r3, #4294967295
 8013696:	9301      	str	r3, [sp, #4]
 8013698:	9304      	str	r3, [sp, #16]
 801369a:	2200      	movs	r2, #0
 801369c:	2312      	movs	r3, #18
 801369e:	e7d1      	b.n	8013644 <_dtoa_r+0x274>
 80136a0:	636f4361 	.word	0x636f4361
 80136a4:	3fd287a7 	.word	0x3fd287a7
 80136a8:	8b60c8b3 	.word	0x8b60c8b3
 80136ac:	3fc68a28 	.word	0x3fc68a28
 80136b0:	509f79fb 	.word	0x509f79fb
 80136b4:	3fd34413 	.word	0x3fd34413
 80136b8:	08016c82 	.word	0x08016c82
 80136bc:	08016c99 	.word	0x08016c99
 80136c0:	7ff00000 	.word	0x7ff00000
 80136c4:	08016c7e 	.word	0x08016c7e
 80136c8:	08016c75 	.word	0x08016c75
 80136cc:	08016c4d 	.word	0x08016c4d
 80136d0:	3ff80000 	.word	0x3ff80000
 80136d4:	08016d88 	.word	0x08016d88
 80136d8:	08016cf1 	.word	0x08016cf1
 80136dc:	2301      	movs	r3, #1
 80136de:	9309      	str	r3, [sp, #36]	; 0x24
 80136e0:	e7d7      	b.n	8013692 <_dtoa_r+0x2c2>
 80136e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e4:	9301      	str	r3, [sp, #4]
 80136e6:	9304      	str	r3, [sp, #16]
 80136e8:	e7ba      	b.n	8013660 <_dtoa_r+0x290>
 80136ea:	3101      	adds	r1, #1
 80136ec:	0052      	lsls	r2, r2, #1
 80136ee:	e7ba      	b.n	8013666 <_dtoa_r+0x296>
 80136f0:	69e3      	ldr	r3, [r4, #28]
 80136f2:	9a00      	ldr	r2, [sp, #0]
 80136f4:	601a      	str	r2, [r3, #0]
 80136f6:	9b04      	ldr	r3, [sp, #16]
 80136f8:	2b0e      	cmp	r3, #14
 80136fa:	f200 80a8 	bhi.w	801384e <_dtoa_r+0x47e>
 80136fe:	2d00      	cmp	r5, #0
 8013700:	f000 80a5 	beq.w	801384e <_dtoa_r+0x47e>
 8013704:	f1bb 0f00 	cmp.w	fp, #0
 8013708:	dd38      	ble.n	801377c <_dtoa_r+0x3ac>
 801370a:	4bc0      	ldr	r3, [pc, #768]	; (8013a0c <_dtoa_r+0x63c>)
 801370c:	f00b 020f 	and.w	r2, fp, #15
 8013710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013714:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013718:	e9d3 6700 	ldrd	r6, r7, [r3]
 801371c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013720:	d019      	beq.n	8013756 <_dtoa_r+0x386>
 8013722:	4bbb      	ldr	r3, [pc, #748]	; (8013a10 <_dtoa_r+0x640>)
 8013724:	ec51 0b18 	vmov	r0, r1, d8
 8013728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801372c:	f7ed f88e 	bl	800084c <__aeabi_ddiv>
 8013730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013734:	f008 080f 	and.w	r8, r8, #15
 8013738:	2503      	movs	r5, #3
 801373a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013a10 <_dtoa_r+0x640>
 801373e:	f1b8 0f00 	cmp.w	r8, #0
 8013742:	d10a      	bne.n	801375a <_dtoa_r+0x38a>
 8013744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013748:	4632      	mov	r2, r6
 801374a:	463b      	mov	r3, r7
 801374c:	f7ed f87e 	bl	800084c <__aeabi_ddiv>
 8013750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013754:	e02b      	b.n	80137ae <_dtoa_r+0x3de>
 8013756:	2502      	movs	r5, #2
 8013758:	e7ef      	b.n	801373a <_dtoa_r+0x36a>
 801375a:	f018 0f01 	tst.w	r8, #1
 801375e:	d008      	beq.n	8013772 <_dtoa_r+0x3a2>
 8013760:	4630      	mov	r0, r6
 8013762:	4639      	mov	r1, r7
 8013764:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013768:	f7ec ff46 	bl	80005f8 <__aeabi_dmul>
 801376c:	3501      	adds	r5, #1
 801376e:	4606      	mov	r6, r0
 8013770:	460f      	mov	r7, r1
 8013772:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013776:	f109 0908 	add.w	r9, r9, #8
 801377a:	e7e0      	b.n	801373e <_dtoa_r+0x36e>
 801377c:	f000 809f 	beq.w	80138be <_dtoa_r+0x4ee>
 8013780:	f1cb 0600 	rsb	r6, fp, #0
 8013784:	4ba1      	ldr	r3, [pc, #644]	; (8013a0c <_dtoa_r+0x63c>)
 8013786:	4fa2      	ldr	r7, [pc, #648]	; (8013a10 <_dtoa_r+0x640>)
 8013788:	f006 020f 	and.w	r2, r6, #15
 801378c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	ec51 0b18 	vmov	r0, r1, d8
 8013798:	f7ec ff2e 	bl	80005f8 <__aeabi_dmul>
 801379c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137a0:	1136      	asrs	r6, r6, #4
 80137a2:	2300      	movs	r3, #0
 80137a4:	2502      	movs	r5, #2
 80137a6:	2e00      	cmp	r6, #0
 80137a8:	d17e      	bne.n	80138a8 <_dtoa_r+0x4d8>
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d1d0      	bne.n	8013750 <_dtoa_r+0x380>
 80137ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f000 8084 	beq.w	80138c2 <_dtoa_r+0x4f2>
 80137ba:	4b96      	ldr	r3, [pc, #600]	; (8013a14 <_dtoa_r+0x644>)
 80137bc:	2200      	movs	r2, #0
 80137be:	4640      	mov	r0, r8
 80137c0:	4649      	mov	r1, r9
 80137c2:	f7ed f98b 	bl	8000adc <__aeabi_dcmplt>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d07b      	beq.n	80138c2 <_dtoa_r+0x4f2>
 80137ca:	9b04      	ldr	r3, [sp, #16]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d078      	beq.n	80138c2 <_dtoa_r+0x4f2>
 80137d0:	9b01      	ldr	r3, [sp, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	dd39      	ble.n	801384a <_dtoa_r+0x47a>
 80137d6:	4b90      	ldr	r3, [pc, #576]	; (8013a18 <_dtoa_r+0x648>)
 80137d8:	2200      	movs	r2, #0
 80137da:	4640      	mov	r0, r8
 80137dc:	4649      	mov	r1, r9
 80137de:	f7ec ff0b 	bl	80005f8 <__aeabi_dmul>
 80137e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137e6:	9e01      	ldr	r6, [sp, #4]
 80137e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80137ec:	3501      	adds	r5, #1
 80137ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80137f2:	4628      	mov	r0, r5
 80137f4:	f7ec fe96 	bl	8000524 <__aeabi_i2d>
 80137f8:	4642      	mov	r2, r8
 80137fa:	464b      	mov	r3, r9
 80137fc:	f7ec fefc 	bl	80005f8 <__aeabi_dmul>
 8013800:	4b86      	ldr	r3, [pc, #536]	; (8013a1c <_dtoa_r+0x64c>)
 8013802:	2200      	movs	r2, #0
 8013804:	f7ec fd42 	bl	800028c <__adddf3>
 8013808:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801380c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013810:	9303      	str	r3, [sp, #12]
 8013812:	2e00      	cmp	r6, #0
 8013814:	d158      	bne.n	80138c8 <_dtoa_r+0x4f8>
 8013816:	4b82      	ldr	r3, [pc, #520]	; (8013a20 <_dtoa_r+0x650>)
 8013818:	2200      	movs	r2, #0
 801381a:	4640      	mov	r0, r8
 801381c:	4649      	mov	r1, r9
 801381e:	f7ec fd33 	bl	8000288 <__aeabi_dsub>
 8013822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013826:	4680      	mov	r8, r0
 8013828:	4689      	mov	r9, r1
 801382a:	f7ed f975 	bl	8000b18 <__aeabi_dcmpgt>
 801382e:	2800      	cmp	r0, #0
 8013830:	f040 8296 	bne.w	8013d60 <_dtoa_r+0x990>
 8013834:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013838:	4640      	mov	r0, r8
 801383a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801383e:	4649      	mov	r1, r9
 8013840:	f7ed f94c 	bl	8000adc <__aeabi_dcmplt>
 8013844:	2800      	cmp	r0, #0
 8013846:	f040 8289 	bne.w	8013d5c <_dtoa_r+0x98c>
 801384a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801384e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013850:	2b00      	cmp	r3, #0
 8013852:	f2c0 814e 	blt.w	8013af2 <_dtoa_r+0x722>
 8013856:	f1bb 0f0e 	cmp.w	fp, #14
 801385a:	f300 814a 	bgt.w	8013af2 <_dtoa_r+0x722>
 801385e:	4b6b      	ldr	r3, [pc, #428]	; (8013a0c <_dtoa_r+0x63c>)
 8013860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013864:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801386a:	2b00      	cmp	r3, #0
 801386c:	f280 80dc 	bge.w	8013a28 <_dtoa_r+0x658>
 8013870:	9b04      	ldr	r3, [sp, #16]
 8013872:	2b00      	cmp	r3, #0
 8013874:	f300 80d8 	bgt.w	8013a28 <_dtoa_r+0x658>
 8013878:	f040 826f 	bne.w	8013d5a <_dtoa_r+0x98a>
 801387c:	4b68      	ldr	r3, [pc, #416]	; (8013a20 <_dtoa_r+0x650>)
 801387e:	2200      	movs	r2, #0
 8013880:	4640      	mov	r0, r8
 8013882:	4649      	mov	r1, r9
 8013884:	f7ec feb8 	bl	80005f8 <__aeabi_dmul>
 8013888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801388c:	f7ed f93a 	bl	8000b04 <__aeabi_dcmpge>
 8013890:	9e04      	ldr	r6, [sp, #16]
 8013892:	4637      	mov	r7, r6
 8013894:	2800      	cmp	r0, #0
 8013896:	f040 8245 	bne.w	8013d24 <_dtoa_r+0x954>
 801389a:	9d00      	ldr	r5, [sp, #0]
 801389c:	2331      	movs	r3, #49	; 0x31
 801389e:	f805 3b01 	strb.w	r3, [r5], #1
 80138a2:	f10b 0b01 	add.w	fp, fp, #1
 80138a6:	e241      	b.n	8013d2c <_dtoa_r+0x95c>
 80138a8:	07f2      	lsls	r2, r6, #31
 80138aa:	d505      	bpl.n	80138b8 <_dtoa_r+0x4e8>
 80138ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138b0:	f7ec fea2 	bl	80005f8 <__aeabi_dmul>
 80138b4:	3501      	adds	r5, #1
 80138b6:	2301      	movs	r3, #1
 80138b8:	1076      	asrs	r6, r6, #1
 80138ba:	3708      	adds	r7, #8
 80138bc:	e773      	b.n	80137a6 <_dtoa_r+0x3d6>
 80138be:	2502      	movs	r5, #2
 80138c0:	e775      	b.n	80137ae <_dtoa_r+0x3de>
 80138c2:	9e04      	ldr	r6, [sp, #16]
 80138c4:	465f      	mov	r7, fp
 80138c6:	e792      	b.n	80137ee <_dtoa_r+0x41e>
 80138c8:	9900      	ldr	r1, [sp, #0]
 80138ca:	4b50      	ldr	r3, [pc, #320]	; (8013a0c <_dtoa_r+0x63c>)
 80138cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138d0:	4431      	add	r1, r6
 80138d2:	9102      	str	r1, [sp, #8]
 80138d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138d6:	eeb0 9a47 	vmov.f32	s18, s14
 80138da:	eef0 9a67 	vmov.f32	s19, s15
 80138de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80138e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80138e6:	2900      	cmp	r1, #0
 80138e8:	d044      	beq.n	8013974 <_dtoa_r+0x5a4>
 80138ea:	494e      	ldr	r1, [pc, #312]	; (8013a24 <_dtoa_r+0x654>)
 80138ec:	2000      	movs	r0, #0
 80138ee:	f7ec ffad 	bl	800084c <__aeabi_ddiv>
 80138f2:	ec53 2b19 	vmov	r2, r3, d9
 80138f6:	f7ec fcc7 	bl	8000288 <__aeabi_dsub>
 80138fa:	9d00      	ldr	r5, [sp, #0]
 80138fc:	ec41 0b19 	vmov	d9, r0, r1
 8013900:	4649      	mov	r1, r9
 8013902:	4640      	mov	r0, r8
 8013904:	f7ed f928 	bl	8000b58 <__aeabi_d2iz>
 8013908:	4606      	mov	r6, r0
 801390a:	f7ec fe0b 	bl	8000524 <__aeabi_i2d>
 801390e:	4602      	mov	r2, r0
 8013910:	460b      	mov	r3, r1
 8013912:	4640      	mov	r0, r8
 8013914:	4649      	mov	r1, r9
 8013916:	f7ec fcb7 	bl	8000288 <__aeabi_dsub>
 801391a:	3630      	adds	r6, #48	; 0x30
 801391c:	f805 6b01 	strb.w	r6, [r5], #1
 8013920:	ec53 2b19 	vmov	r2, r3, d9
 8013924:	4680      	mov	r8, r0
 8013926:	4689      	mov	r9, r1
 8013928:	f7ed f8d8 	bl	8000adc <__aeabi_dcmplt>
 801392c:	2800      	cmp	r0, #0
 801392e:	d164      	bne.n	80139fa <_dtoa_r+0x62a>
 8013930:	4642      	mov	r2, r8
 8013932:	464b      	mov	r3, r9
 8013934:	4937      	ldr	r1, [pc, #220]	; (8013a14 <_dtoa_r+0x644>)
 8013936:	2000      	movs	r0, #0
 8013938:	f7ec fca6 	bl	8000288 <__aeabi_dsub>
 801393c:	ec53 2b19 	vmov	r2, r3, d9
 8013940:	f7ed f8cc 	bl	8000adc <__aeabi_dcmplt>
 8013944:	2800      	cmp	r0, #0
 8013946:	f040 80b6 	bne.w	8013ab6 <_dtoa_r+0x6e6>
 801394a:	9b02      	ldr	r3, [sp, #8]
 801394c:	429d      	cmp	r5, r3
 801394e:	f43f af7c 	beq.w	801384a <_dtoa_r+0x47a>
 8013952:	4b31      	ldr	r3, [pc, #196]	; (8013a18 <_dtoa_r+0x648>)
 8013954:	ec51 0b19 	vmov	r0, r1, d9
 8013958:	2200      	movs	r2, #0
 801395a:	f7ec fe4d 	bl	80005f8 <__aeabi_dmul>
 801395e:	4b2e      	ldr	r3, [pc, #184]	; (8013a18 <_dtoa_r+0x648>)
 8013960:	ec41 0b19 	vmov	d9, r0, r1
 8013964:	2200      	movs	r2, #0
 8013966:	4640      	mov	r0, r8
 8013968:	4649      	mov	r1, r9
 801396a:	f7ec fe45 	bl	80005f8 <__aeabi_dmul>
 801396e:	4680      	mov	r8, r0
 8013970:	4689      	mov	r9, r1
 8013972:	e7c5      	b.n	8013900 <_dtoa_r+0x530>
 8013974:	ec51 0b17 	vmov	r0, r1, d7
 8013978:	f7ec fe3e 	bl	80005f8 <__aeabi_dmul>
 801397c:	9b02      	ldr	r3, [sp, #8]
 801397e:	9d00      	ldr	r5, [sp, #0]
 8013980:	930f      	str	r3, [sp, #60]	; 0x3c
 8013982:	ec41 0b19 	vmov	d9, r0, r1
 8013986:	4649      	mov	r1, r9
 8013988:	4640      	mov	r0, r8
 801398a:	f7ed f8e5 	bl	8000b58 <__aeabi_d2iz>
 801398e:	4606      	mov	r6, r0
 8013990:	f7ec fdc8 	bl	8000524 <__aeabi_i2d>
 8013994:	3630      	adds	r6, #48	; 0x30
 8013996:	4602      	mov	r2, r0
 8013998:	460b      	mov	r3, r1
 801399a:	4640      	mov	r0, r8
 801399c:	4649      	mov	r1, r9
 801399e:	f7ec fc73 	bl	8000288 <__aeabi_dsub>
 80139a2:	f805 6b01 	strb.w	r6, [r5], #1
 80139a6:	9b02      	ldr	r3, [sp, #8]
 80139a8:	429d      	cmp	r5, r3
 80139aa:	4680      	mov	r8, r0
 80139ac:	4689      	mov	r9, r1
 80139ae:	f04f 0200 	mov.w	r2, #0
 80139b2:	d124      	bne.n	80139fe <_dtoa_r+0x62e>
 80139b4:	4b1b      	ldr	r3, [pc, #108]	; (8013a24 <_dtoa_r+0x654>)
 80139b6:	ec51 0b19 	vmov	r0, r1, d9
 80139ba:	f7ec fc67 	bl	800028c <__adddf3>
 80139be:	4602      	mov	r2, r0
 80139c0:	460b      	mov	r3, r1
 80139c2:	4640      	mov	r0, r8
 80139c4:	4649      	mov	r1, r9
 80139c6:	f7ed f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 80139ca:	2800      	cmp	r0, #0
 80139cc:	d173      	bne.n	8013ab6 <_dtoa_r+0x6e6>
 80139ce:	ec53 2b19 	vmov	r2, r3, d9
 80139d2:	4914      	ldr	r1, [pc, #80]	; (8013a24 <_dtoa_r+0x654>)
 80139d4:	2000      	movs	r0, #0
 80139d6:	f7ec fc57 	bl	8000288 <__aeabi_dsub>
 80139da:	4602      	mov	r2, r0
 80139dc:	460b      	mov	r3, r1
 80139de:	4640      	mov	r0, r8
 80139e0:	4649      	mov	r1, r9
 80139e2:	f7ed f87b 	bl	8000adc <__aeabi_dcmplt>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	f43f af2f 	beq.w	801384a <_dtoa_r+0x47a>
 80139ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80139ee:	1e6b      	subs	r3, r5, #1
 80139f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80139f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80139f6:	2b30      	cmp	r3, #48	; 0x30
 80139f8:	d0f8      	beq.n	80139ec <_dtoa_r+0x61c>
 80139fa:	46bb      	mov	fp, r7
 80139fc:	e04a      	b.n	8013a94 <_dtoa_r+0x6c4>
 80139fe:	4b06      	ldr	r3, [pc, #24]	; (8013a18 <_dtoa_r+0x648>)
 8013a00:	f7ec fdfa 	bl	80005f8 <__aeabi_dmul>
 8013a04:	4680      	mov	r8, r0
 8013a06:	4689      	mov	r9, r1
 8013a08:	e7bd      	b.n	8013986 <_dtoa_r+0x5b6>
 8013a0a:	bf00      	nop
 8013a0c:	08016d88 	.word	0x08016d88
 8013a10:	08016d60 	.word	0x08016d60
 8013a14:	3ff00000 	.word	0x3ff00000
 8013a18:	40240000 	.word	0x40240000
 8013a1c:	401c0000 	.word	0x401c0000
 8013a20:	40140000 	.word	0x40140000
 8013a24:	3fe00000 	.word	0x3fe00000
 8013a28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013a2c:	9d00      	ldr	r5, [sp, #0]
 8013a2e:	4642      	mov	r2, r8
 8013a30:	464b      	mov	r3, r9
 8013a32:	4630      	mov	r0, r6
 8013a34:	4639      	mov	r1, r7
 8013a36:	f7ec ff09 	bl	800084c <__aeabi_ddiv>
 8013a3a:	f7ed f88d 	bl	8000b58 <__aeabi_d2iz>
 8013a3e:	9001      	str	r0, [sp, #4]
 8013a40:	f7ec fd70 	bl	8000524 <__aeabi_i2d>
 8013a44:	4642      	mov	r2, r8
 8013a46:	464b      	mov	r3, r9
 8013a48:	f7ec fdd6 	bl	80005f8 <__aeabi_dmul>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	460b      	mov	r3, r1
 8013a50:	4630      	mov	r0, r6
 8013a52:	4639      	mov	r1, r7
 8013a54:	f7ec fc18 	bl	8000288 <__aeabi_dsub>
 8013a58:	9e01      	ldr	r6, [sp, #4]
 8013a5a:	9f04      	ldr	r7, [sp, #16]
 8013a5c:	3630      	adds	r6, #48	; 0x30
 8013a5e:	f805 6b01 	strb.w	r6, [r5], #1
 8013a62:	9e00      	ldr	r6, [sp, #0]
 8013a64:	1bae      	subs	r6, r5, r6
 8013a66:	42b7      	cmp	r7, r6
 8013a68:	4602      	mov	r2, r0
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	d134      	bne.n	8013ad8 <_dtoa_r+0x708>
 8013a6e:	f7ec fc0d 	bl	800028c <__adddf3>
 8013a72:	4642      	mov	r2, r8
 8013a74:	464b      	mov	r3, r9
 8013a76:	4606      	mov	r6, r0
 8013a78:	460f      	mov	r7, r1
 8013a7a:	f7ed f84d 	bl	8000b18 <__aeabi_dcmpgt>
 8013a7e:	b9c8      	cbnz	r0, 8013ab4 <_dtoa_r+0x6e4>
 8013a80:	4642      	mov	r2, r8
 8013a82:	464b      	mov	r3, r9
 8013a84:	4630      	mov	r0, r6
 8013a86:	4639      	mov	r1, r7
 8013a88:	f7ed f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a8c:	b110      	cbz	r0, 8013a94 <_dtoa_r+0x6c4>
 8013a8e:	9b01      	ldr	r3, [sp, #4]
 8013a90:	07db      	lsls	r3, r3, #31
 8013a92:	d40f      	bmi.n	8013ab4 <_dtoa_r+0x6e4>
 8013a94:	4651      	mov	r1, sl
 8013a96:	4620      	mov	r0, r4
 8013a98:	f000 fb18 	bl	80140cc <_Bfree>
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013aa0:	702b      	strb	r3, [r5, #0]
 8013aa2:	f10b 0301 	add.w	r3, fp, #1
 8013aa6:	6013      	str	r3, [r2, #0]
 8013aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	f43f ace2 	beq.w	8013474 <_dtoa_r+0xa4>
 8013ab0:	601d      	str	r5, [r3, #0]
 8013ab2:	e4df      	b.n	8013474 <_dtoa_r+0xa4>
 8013ab4:	465f      	mov	r7, fp
 8013ab6:	462b      	mov	r3, r5
 8013ab8:	461d      	mov	r5, r3
 8013aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013abe:	2a39      	cmp	r2, #57	; 0x39
 8013ac0:	d106      	bne.n	8013ad0 <_dtoa_r+0x700>
 8013ac2:	9a00      	ldr	r2, [sp, #0]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d1f7      	bne.n	8013ab8 <_dtoa_r+0x6e8>
 8013ac8:	9900      	ldr	r1, [sp, #0]
 8013aca:	2230      	movs	r2, #48	; 0x30
 8013acc:	3701      	adds	r7, #1
 8013ace:	700a      	strb	r2, [r1, #0]
 8013ad0:	781a      	ldrb	r2, [r3, #0]
 8013ad2:	3201      	adds	r2, #1
 8013ad4:	701a      	strb	r2, [r3, #0]
 8013ad6:	e790      	b.n	80139fa <_dtoa_r+0x62a>
 8013ad8:	4ba3      	ldr	r3, [pc, #652]	; (8013d68 <_dtoa_r+0x998>)
 8013ada:	2200      	movs	r2, #0
 8013adc:	f7ec fd8c 	bl	80005f8 <__aeabi_dmul>
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	460f      	mov	r7, r1
 8013ae8:	f7ec ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 8013aec:	2800      	cmp	r0, #0
 8013aee:	d09e      	beq.n	8013a2e <_dtoa_r+0x65e>
 8013af0:	e7d0      	b.n	8013a94 <_dtoa_r+0x6c4>
 8013af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013af4:	2a00      	cmp	r2, #0
 8013af6:	f000 80ca 	beq.w	8013c8e <_dtoa_r+0x8be>
 8013afa:	9a07      	ldr	r2, [sp, #28]
 8013afc:	2a01      	cmp	r2, #1
 8013afe:	f300 80ad 	bgt.w	8013c5c <_dtoa_r+0x88c>
 8013b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b04:	2a00      	cmp	r2, #0
 8013b06:	f000 80a5 	beq.w	8013c54 <_dtoa_r+0x884>
 8013b0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013b0e:	9e08      	ldr	r6, [sp, #32]
 8013b10:	9d05      	ldr	r5, [sp, #20]
 8013b12:	9a05      	ldr	r2, [sp, #20]
 8013b14:	441a      	add	r2, r3
 8013b16:	9205      	str	r2, [sp, #20]
 8013b18:	9a06      	ldr	r2, [sp, #24]
 8013b1a:	2101      	movs	r1, #1
 8013b1c:	441a      	add	r2, r3
 8013b1e:	4620      	mov	r0, r4
 8013b20:	9206      	str	r2, [sp, #24]
 8013b22:	f000 fbd3 	bl	80142cc <__i2b>
 8013b26:	4607      	mov	r7, r0
 8013b28:	b165      	cbz	r5, 8013b44 <_dtoa_r+0x774>
 8013b2a:	9b06      	ldr	r3, [sp, #24]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	dd09      	ble.n	8013b44 <_dtoa_r+0x774>
 8013b30:	42ab      	cmp	r3, r5
 8013b32:	9a05      	ldr	r2, [sp, #20]
 8013b34:	bfa8      	it	ge
 8013b36:	462b      	movge	r3, r5
 8013b38:	1ad2      	subs	r2, r2, r3
 8013b3a:	9205      	str	r2, [sp, #20]
 8013b3c:	9a06      	ldr	r2, [sp, #24]
 8013b3e:	1aed      	subs	r5, r5, r3
 8013b40:	1ad3      	subs	r3, r2, r3
 8013b42:	9306      	str	r3, [sp, #24]
 8013b44:	9b08      	ldr	r3, [sp, #32]
 8013b46:	b1f3      	cbz	r3, 8013b86 <_dtoa_r+0x7b6>
 8013b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	f000 80a3 	beq.w	8013c96 <_dtoa_r+0x8c6>
 8013b50:	2e00      	cmp	r6, #0
 8013b52:	dd10      	ble.n	8013b76 <_dtoa_r+0x7a6>
 8013b54:	4639      	mov	r1, r7
 8013b56:	4632      	mov	r2, r6
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f000 fc77 	bl	801444c <__pow5mult>
 8013b5e:	4652      	mov	r2, sl
 8013b60:	4601      	mov	r1, r0
 8013b62:	4607      	mov	r7, r0
 8013b64:	4620      	mov	r0, r4
 8013b66:	f000 fbc7 	bl	80142f8 <__multiply>
 8013b6a:	4651      	mov	r1, sl
 8013b6c:	4680      	mov	r8, r0
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f000 faac 	bl	80140cc <_Bfree>
 8013b74:	46c2      	mov	sl, r8
 8013b76:	9b08      	ldr	r3, [sp, #32]
 8013b78:	1b9a      	subs	r2, r3, r6
 8013b7a:	d004      	beq.n	8013b86 <_dtoa_r+0x7b6>
 8013b7c:	4651      	mov	r1, sl
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f000 fc64 	bl	801444c <__pow5mult>
 8013b84:	4682      	mov	sl, r0
 8013b86:	2101      	movs	r1, #1
 8013b88:	4620      	mov	r0, r4
 8013b8a:	f000 fb9f 	bl	80142cc <__i2b>
 8013b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	4606      	mov	r6, r0
 8013b94:	f340 8081 	ble.w	8013c9a <_dtoa_r+0x8ca>
 8013b98:	461a      	mov	r2, r3
 8013b9a:	4601      	mov	r1, r0
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	f000 fc55 	bl	801444c <__pow5mult>
 8013ba2:	9b07      	ldr	r3, [sp, #28]
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	dd7a      	ble.n	8013ca0 <_dtoa_r+0x8d0>
 8013baa:	f04f 0800 	mov.w	r8, #0
 8013bae:	6933      	ldr	r3, [r6, #16]
 8013bb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013bb4:	6918      	ldr	r0, [r3, #16]
 8013bb6:	f000 fb3b 	bl	8014230 <__hi0bits>
 8013bba:	f1c0 0020 	rsb	r0, r0, #32
 8013bbe:	9b06      	ldr	r3, [sp, #24]
 8013bc0:	4418      	add	r0, r3
 8013bc2:	f010 001f 	ands.w	r0, r0, #31
 8013bc6:	f000 8094 	beq.w	8013cf2 <_dtoa_r+0x922>
 8013bca:	f1c0 0320 	rsb	r3, r0, #32
 8013bce:	2b04      	cmp	r3, #4
 8013bd0:	f340 8085 	ble.w	8013cde <_dtoa_r+0x90e>
 8013bd4:	9b05      	ldr	r3, [sp, #20]
 8013bd6:	f1c0 001c 	rsb	r0, r0, #28
 8013bda:	4403      	add	r3, r0
 8013bdc:	9305      	str	r3, [sp, #20]
 8013bde:	9b06      	ldr	r3, [sp, #24]
 8013be0:	4403      	add	r3, r0
 8013be2:	4405      	add	r5, r0
 8013be4:	9306      	str	r3, [sp, #24]
 8013be6:	9b05      	ldr	r3, [sp, #20]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	dd05      	ble.n	8013bf8 <_dtoa_r+0x828>
 8013bec:	4651      	mov	r1, sl
 8013bee:	461a      	mov	r2, r3
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f000 fc85 	bl	8014500 <__lshift>
 8013bf6:	4682      	mov	sl, r0
 8013bf8:	9b06      	ldr	r3, [sp, #24]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	dd05      	ble.n	8013c0a <_dtoa_r+0x83a>
 8013bfe:	4631      	mov	r1, r6
 8013c00:	461a      	mov	r2, r3
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 fc7c 	bl	8014500 <__lshift>
 8013c08:	4606      	mov	r6, r0
 8013c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d072      	beq.n	8013cf6 <_dtoa_r+0x926>
 8013c10:	4631      	mov	r1, r6
 8013c12:	4650      	mov	r0, sl
 8013c14:	f000 fce0 	bl	80145d8 <__mcmp>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	da6c      	bge.n	8013cf6 <_dtoa_r+0x926>
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	4651      	mov	r1, sl
 8013c20:	220a      	movs	r2, #10
 8013c22:	4620      	mov	r0, r4
 8013c24:	f000 fa74 	bl	8014110 <__multadd>
 8013c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013c2e:	4682      	mov	sl, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f000 81b0 	beq.w	8013f96 <_dtoa_r+0xbc6>
 8013c36:	2300      	movs	r3, #0
 8013c38:	4639      	mov	r1, r7
 8013c3a:	220a      	movs	r2, #10
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f000 fa67 	bl	8014110 <__multadd>
 8013c42:	9b01      	ldr	r3, [sp, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	4607      	mov	r7, r0
 8013c48:	f300 8096 	bgt.w	8013d78 <_dtoa_r+0x9a8>
 8013c4c:	9b07      	ldr	r3, [sp, #28]
 8013c4e:	2b02      	cmp	r3, #2
 8013c50:	dc59      	bgt.n	8013d06 <_dtoa_r+0x936>
 8013c52:	e091      	b.n	8013d78 <_dtoa_r+0x9a8>
 8013c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013c5a:	e758      	b.n	8013b0e <_dtoa_r+0x73e>
 8013c5c:	9b04      	ldr	r3, [sp, #16]
 8013c5e:	1e5e      	subs	r6, r3, #1
 8013c60:	9b08      	ldr	r3, [sp, #32]
 8013c62:	42b3      	cmp	r3, r6
 8013c64:	bfbf      	itttt	lt
 8013c66:	9b08      	ldrlt	r3, [sp, #32]
 8013c68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013c6a:	9608      	strlt	r6, [sp, #32]
 8013c6c:	1af3      	sublt	r3, r6, r3
 8013c6e:	bfb4      	ite	lt
 8013c70:	18d2      	addlt	r2, r2, r3
 8013c72:	1b9e      	subge	r6, r3, r6
 8013c74:	9b04      	ldr	r3, [sp, #16]
 8013c76:	bfbc      	itt	lt
 8013c78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013c7a:	2600      	movlt	r6, #0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	bfb7      	itett	lt
 8013c80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013c84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013c88:	1a9d      	sublt	r5, r3, r2
 8013c8a:	2300      	movlt	r3, #0
 8013c8c:	e741      	b.n	8013b12 <_dtoa_r+0x742>
 8013c8e:	9e08      	ldr	r6, [sp, #32]
 8013c90:	9d05      	ldr	r5, [sp, #20]
 8013c92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013c94:	e748      	b.n	8013b28 <_dtoa_r+0x758>
 8013c96:	9a08      	ldr	r2, [sp, #32]
 8013c98:	e770      	b.n	8013b7c <_dtoa_r+0x7ac>
 8013c9a:	9b07      	ldr	r3, [sp, #28]
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	dc19      	bgt.n	8013cd4 <_dtoa_r+0x904>
 8013ca0:	9b02      	ldr	r3, [sp, #8]
 8013ca2:	b9bb      	cbnz	r3, 8013cd4 <_dtoa_r+0x904>
 8013ca4:	9b03      	ldr	r3, [sp, #12]
 8013ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013caa:	b99b      	cbnz	r3, 8013cd4 <_dtoa_r+0x904>
 8013cac:	9b03      	ldr	r3, [sp, #12]
 8013cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013cb2:	0d1b      	lsrs	r3, r3, #20
 8013cb4:	051b      	lsls	r3, r3, #20
 8013cb6:	b183      	cbz	r3, 8013cda <_dtoa_r+0x90a>
 8013cb8:	9b05      	ldr	r3, [sp, #20]
 8013cba:	3301      	adds	r3, #1
 8013cbc:	9305      	str	r3, [sp, #20]
 8013cbe:	9b06      	ldr	r3, [sp, #24]
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	9306      	str	r3, [sp, #24]
 8013cc4:	f04f 0801 	mov.w	r8, #1
 8013cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f47f af6f 	bne.w	8013bae <_dtoa_r+0x7de>
 8013cd0:	2001      	movs	r0, #1
 8013cd2:	e774      	b.n	8013bbe <_dtoa_r+0x7ee>
 8013cd4:	f04f 0800 	mov.w	r8, #0
 8013cd8:	e7f6      	b.n	8013cc8 <_dtoa_r+0x8f8>
 8013cda:	4698      	mov	r8, r3
 8013cdc:	e7f4      	b.n	8013cc8 <_dtoa_r+0x8f8>
 8013cde:	d082      	beq.n	8013be6 <_dtoa_r+0x816>
 8013ce0:	9a05      	ldr	r2, [sp, #20]
 8013ce2:	331c      	adds	r3, #28
 8013ce4:	441a      	add	r2, r3
 8013ce6:	9205      	str	r2, [sp, #20]
 8013ce8:	9a06      	ldr	r2, [sp, #24]
 8013cea:	441a      	add	r2, r3
 8013cec:	441d      	add	r5, r3
 8013cee:	9206      	str	r2, [sp, #24]
 8013cf0:	e779      	b.n	8013be6 <_dtoa_r+0x816>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	e7f4      	b.n	8013ce0 <_dtoa_r+0x910>
 8013cf6:	9b04      	ldr	r3, [sp, #16]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	dc37      	bgt.n	8013d6c <_dtoa_r+0x99c>
 8013cfc:	9b07      	ldr	r3, [sp, #28]
 8013cfe:	2b02      	cmp	r3, #2
 8013d00:	dd34      	ble.n	8013d6c <_dtoa_r+0x99c>
 8013d02:	9b04      	ldr	r3, [sp, #16]
 8013d04:	9301      	str	r3, [sp, #4]
 8013d06:	9b01      	ldr	r3, [sp, #4]
 8013d08:	b963      	cbnz	r3, 8013d24 <_dtoa_r+0x954>
 8013d0a:	4631      	mov	r1, r6
 8013d0c:	2205      	movs	r2, #5
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f000 f9fe 	bl	8014110 <__multadd>
 8013d14:	4601      	mov	r1, r0
 8013d16:	4606      	mov	r6, r0
 8013d18:	4650      	mov	r0, sl
 8013d1a:	f000 fc5d 	bl	80145d8 <__mcmp>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	f73f adbb 	bgt.w	801389a <_dtoa_r+0x4ca>
 8013d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d26:	9d00      	ldr	r5, [sp, #0]
 8013d28:	ea6f 0b03 	mvn.w	fp, r3
 8013d2c:	f04f 0800 	mov.w	r8, #0
 8013d30:	4631      	mov	r1, r6
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 f9ca 	bl	80140cc <_Bfree>
 8013d38:	2f00      	cmp	r7, #0
 8013d3a:	f43f aeab 	beq.w	8013a94 <_dtoa_r+0x6c4>
 8013d3e:	f1b8 0f00 	cmp.w	r8, #0
 8013d42:	d005      	beq.n	8013d50 <_dtoa_r+0x980>
 8013d44:	45b8      	cmp	r8, r7
 8013d46:	d003      	beq.n	8013d50 <_dtoa_r+0x980>
 8013d48:	4641      	mov	r1, r8
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f000 f9be 	bl	80140cc <_Bfree>
 8013d50:	4639      	mov	r1, r7
 8013d52:	4620      	mov	r0, r4
 8013d54:	f000 f9ba 	bl	80140cc <_Bfree>
 8013d58:	e69c      	b.n	8013a94 <_dtoa_r+0x6c4>
 8013d5a:	2600      	movs	r6, #0
 8013d5c:	4637      	mov	r7, r6
 8013d5e:	e7e1      	b.n	8013d24 <_dtoa_r+0x954>
 8013d60:	46bb      	mov	fp, r7
 8013d62:	4637      	mov	r7, r6
 8013d64:	e599      	b.n	801389a <_dtoa_r+0x4ca>
 8013d66:	bf00      	nop
 8013d68:	40240000 	.word	0x40240000
 8013d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	f000 80c8 	beq.w	8013f04 <_dtoa_r+0xb34>
 8013d74:	9b04      	ldr	r3, [sp, #16]
 8013d76:	9301      	str	r3, [sp, #4]
 8013d78:	2d00      	cmp	r5, #0
 8013d7a:	dd05      	ble.n	8013d88 <_dtoa_r+0x9b8>
 8013d7c:	4639      	mov	r1, r7
 8013d7e:	462a      	mov	r2, r5
 8013d80:	4620      	mov	r0, r4
 8013d82:	f000 fbbd 	bl	8014500 <__lshift>
 8013d86:	4607      	mov	r7, r0
 8013d88:	f1b8 0f00 	cmp.w	r8, #0
 8013d8c:	d05b      	beq.n	8013e46 <_dtoa_r+0xa76>
 8013d8e:	6879      	ldr	r1, [r7, #4]
 8013d90:	4620      	mov	r0, r4
 8013d92:	f000 f95b 	bl	801404c <_Balloc>
 8013d96:	4605      	mov	r5, r0
 8013d98:	b928      	cbnz	r0, 8013da6 <_dtoa_r+0x9d6>
 8013d9a:	4b83      	ldr	r3, [pc, #524]	; (8013fa8 <_dtoa_r+0xbd8>)
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013da2:	f7ff bb2e 	b.w	8013402 <_dtoa_r+0x32>
 8013da6:	693a      	ldr	r2, [r7, #16]
 8013da8:	3202      	adds	r2, #2
 8013daa:	0092      	lsls	r2, r2, #2
 8013dac:	f107 010c 	add.w	r1, r7, #12
 8013db0:	300c      	adds	r0, #12
 8013db2:	f7ff fa6f 	bl	8013294 <memcpy>
 8013db6:	2201      	movs	r2, #1
 8013db8:	4629      	mov	r1, r5
 8013dba:	4620      	mov	r0, r4
 8013dbc:	f000 fba0 	bl	8014500 <__lshift>
 8013dc0:	9b00      	ldr	r3, [sp, #0]
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	9304      	str	r3, [sp, #16]
 8013dc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dca:	4413      	add	r3, r2
 8013dcc:	9308      	str	r3, [sp, #32]
 8013dce:	9b02      	ldr	r3, [sp, #8]
 8013dd0:	f003 0301 	and.w	r3, r3, #1
 8013dd4:	46b8      	mov	r8, r7
 8013dd6:	9306      	str	r3, [sp, #24]
 8013dd8:	4607      	mov	r7, r0
 8013dda:	9b04      	ldr	r3, [sp, #16]
 8013ddc:	4631      	mov	r1, r6
 8013dde:	3b01      	subs	r3, #1
 8013de0:	4650      	mov	r0, sl
 8013de2:	9301      	str	r3, [sp, #4]
 8013de4:	f7ff fa6a 	bl	80132bc <quorem>
 8013de8:	4641      	mov	r1, r8
 8013dea:	9002      	str	r0, [sp, #8]
 8013dec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013df0:	4650      	mov	r0, sl
 8013df2:	f000 fbf1 	bl	80145d8 <__mcmp>
 8013df6:	463a      	mov	r2, r7
 8013df8:	9005      	str	r0, [sp, #20]
 8013dfa:	4631      	mov	r1, r6
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f000 fc07 	bl	8014610 <__mdiff>
 8013e02:	68c2      	ldr	r2, [r0, #12]
 8013e04:	4605      	mov	r5, r0
 8013e06:	bb02      	cbnz	r2, 8013e4a <_dtoa_r+0xa7a>
 8013e08:	4601      	mov	r1, r0
 8013e0a:	4650      	mov	r0, sl
 8013e0c:	f000 fbe4 	bl	80145d8 <__mcmp>
 8013e10:	4602      	mov	r2, r0
 8013e12:	4629      	mov	r1, r5
 8013e14:	4620      	mov	r0, r4
 8013e16:	9209      	str	r2, [sp, #36]	; 0x24
 8013e18:	f000 f958 	bl	80140cc <_Bfree>
 8013e1c:	9b07      	ldr	r3, [sp, #28]
 8013e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e20:	9d04      	ldr	r5, [sp, #16]
 8013e22:	ea43 0102 	orr.w	r1, r3, r2
 8013e26:	9b06      	ldr	r3, [sp, #24]
 8013e28:	4319      	orrs	r1, r3
 8013e2a:	d110      	bne.n	8013e4e <_dtoa_r+0xa7e>
 8013e2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013e30:	d029      	beq.n	8013e86 <_dtoa_r+0xab6>
 8013e32:	9b05      	ldr	r3, [sp, #20]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	dd02      	ble.n	8013e3e <_dtoa_r+0xa6e>
 8013e38:	9b02      	ldr	r3, [sp, #8]
 8013e3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013e3e:	9b01      	ldr	r3, [sp, #4]
 8013e40:	f883 9000 	strb.w	r9, [r3]
 8013e44:	e774      	b.n	8013d30 <_dtoa_r+0x960>
 8013e46:	4638      	mov	r0, r7
 8013e48:	e7ba      	b.n	8013dc0 <_dtoa_r+0x9f0>
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	e7e1      	b.n	8013e12 <_dtoa_r+0xa42>
 8013e4e:	9b05      	ldr	r3, [sp, #20]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	db04      	blt.n	8013e5e <_dtoa_r+0xa8e>
 8013e54:	9907      	ldr	r1, [sp, #28]
 8013e56:	430b      	orrs	r3, r1
 8013e58:	9906      	ldr	r1, [sp, #24]
 8013e5a:	430b      	orrs	r3, r1
 8013e5c:	d120      	bne.n	8013ea0 <_dtoa_r+0xad0>
 8013e5e:	2a00      	cmp	r2, #0
 8013e60:	dded      	ble.n	8013e3e <_dtoa_r+0xa6e>
 8013e62:	4651      	mov	r1, sl
 8013e64:	2201      	movs	r2, #1
 8013e66:	4620      	mov	r0, r4
 8013e68:	f000 fb4a 	bl	8014500 <__lshift>
 8013e6c:	4631      	mov	r1, r6
 8013e6e:	4682      	mov	sl, r0
 8013e70:	f000 fbb2 	bl	80145d8 <__mcmp>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	dc03      	bgt.n	8013e80 <_dtoa_r+0xab0>
 8013e78:	d1e1      	bne.n	8013e3e <_dtoa_r+0xa6e>
 8013e7a:	f019 0f01 	tst.w	r9, #1
 8013e7e:	d0de      	beq.n	8013e3e <_dtoa_r+0xa6e>
 8013e80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013e84:	d1d8      	bne.n	8013e38 <_dtoa_r+0xa68>
 8013e86:	9a01      	ldr	r2, [sp, #4]
 8013e88:	2339      	movs	r3, #57	; 0x39
 8013e8a:	7013      	strb	r3, [r2, #0]
 8013e8c:	462b      	mov	r3, r5
 8013e8e:	461d      	mov	r5, r3
 8013e90:	3b01      	subs	r3, #1
 8013e92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013e96:	2a39      	cmp	r2, #57	; 0x39
 8013e98:	d06c      	beq.n	8013f74 <_dtoa_r+0xba4>
 8013e9a:	3201      	adds	r2, #1
 8013e9c:	701a      	strb	r2, [r3, #0]
 8013e9e:	e747      	b.n	8013d30 <_dtoa_r+0x960>
 8013ea0:	2a00      	cmp	r2, #0
 8013ea2:	dd07      	ble.n	8013eb4 <_dtoa_r+0xae4>
 8013ea4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013ea8:	d0ed      	beq.n	8013e86 <_dtoa_r+0xab6>
 8013eaa:	9a01      	ldr	r2, [sp, #4]
 8013eac:	f109 0301 	add.w	r3, r9, #1
 8013eb0:	7013      	strb	r3, [r2, #0]
 8013eb2:	e73d      	b.n	8013d30 <_dtoa_r+0x960>
 8013eb4:	9b04      	ldr	r3, [sp, #16]
 8013eb6:	9a08      	ldr	r2, [sp, #32]
 8013eb8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d043      	beq.n	8013f48 <_dtoa_r+0xb78>
 8013ec0:	4651      	mov	r1, sl
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	220a      	movs	r2, #10
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f000 f922 	bl	8014110 <__multadd>
 8013ecc:	45b8      	cmp	r8, r7
 8013ece:	4682      	mov	sl, r0
 8013ed0:	f04f 0300 	mov.w	r3, #0
 8013ed4:	f04f 020a 	mov.w	r2, #10
 8013ed8:	4641      	mov	r1, r8
 8013eda:	4620      	mov	r0, r4
 8013edc:	d107      	bne.n	8013eee <_dtoa_r+0xb1e>
 8013ede:	f000 f917 	bl	8014110 <__multadd>
 8013ee2:	4680      	mov	r8, r0
 8013ee4:	4607      	mov	r7, r0
 8013ee6:	9b04      	ldr	r3, [sp, #16]
 8013ee8:	3301      	adds	r3, #1
 8013eea:	9304      	str	r3, [sp, #16]
 8013eec:	e775      	b.n	8013dda <_dtoa_r+0xa0a>
 8013eee:	f000 f90f 	bl	8014110 <__multadd>
 8013ef2:	4639      	mov	r1, r7
 8013ef4:	4680      	mov	r8, r0
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	220a      	movs	r2, #10
 8013efa:	4620      	mov	r0, r4
 8013efc:	f000 f908 	bl	8014110 <__multadd>
 8013f00:	4607      	mov	r7, r0
 8013f02:	e7f0      	b.n	8013ee6 <_dtoa_r+0xb16>
 8013f04:	9b04      	ldr	r3, [sp, #16]
 8013f06:	9301      	str	r3, [sp, #4]
 8013f08:	9d00      	ldr	r5, [sp, #0]
 8013f0a:	4631      	mov	r1, r6
 8013f0c:	4650      	mov	r0, sl
 8013f0e:	f7ff f9d5 	bl	80132bc <quorem>
 8013f12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013f16:	9b00      	ldr	r3, [sp, #0]
 8013f18:	f805 9b01 	strb.w	r9, [r5], #1
 8013f1c:	1aea      	subs	r2, r5, r3
 8013f1e:	9b01      	ldr	r3, [sp, #4]
 8013f20:	4293      	cmp	r3, r2
 8013f22:	dd07      	ble.n	8013f34 <_dtoa_r+0xb64>
 8013f24:	4651      	mov	r1, sl
 8013f26:	2300      	movs	r3, #0
 8013f28:	220a      	movs	r2, #10
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	f000 f8f0 	bl	8014110 <__multadd>
 8013f30:	4682      	mov	sl, r0
 8013f32:	e7ea      	b.n	8013f0a <_dtoa_r+0xb3a>
 8013f34:	9b01      	ldr	r3, [sp, #4]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	bfc8      	it	gt
 8013f3a:	461d      	movgt	r5, r3
 8013f3c:	9b00      	ldr	r3, [sp, #0]
 8013f3e:	bfd8      	it	le
 8013f40:	2501      	movle	r5, #1
 8013f42:	441d      	add	r5, r3
 8013f44:	f04f 0800 	mov.w	r8, #0
 8013f48:	4651      	mov	r1, sl
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f000 fad7 	bl	8014500 <__lshift>
 8013f52:	4631      	mov	r1, r6
 8013f54:	4682      	mov	sl, r0
 8013f56:	f000 fb3f 	bl	80145d8 <__mcmp>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	dc96      	bgt.n	8013e8c <_dtoa_r+0xabc>
 8013f5e:	d102      	bne.n	8013f66 <_dtoa_r+0xb96>
 8013f60:	f019 0f01 	tst.w	r9, #1
 8013f64:	d192      	bne.n	8013e8c <_dtoa_r+0xabc>
 8013f66:	462b      	mov	r3, r5
 8013f68:	461d      	mov	r5, r3
 8013f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f6e:	2a30      	cmp	r2, #48	; 0x30
 8013f70:	d0fa      	beq.n	8013f68 <_dtoa_r+0xb98>
 8013f72:	e6dd      	b.n	8013d30 <_dtoa_r+0x960>
 8013f74:	9a00      	ldr	r2, [sp, #0]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d189      	bne.n	8013e8e <_dtoa_r+0xabe>
 8013f7a:	f10b 0b01 	add.w	fp, fp, #1
 8013f7e:	2331      	movs	r3, #49	; 0x31
 8013f80:	e796      	b.n	8013eb0 <_dtoa_r+0xae0>
 8013f82:	4b0a      	ldr	r3, [pc, #40]	; (8013fac <_dtoa_r+0xbdc>)
 8013f84:	f7ff ba99 	b.w	80134ba <_dtoa_r+0xea>
 8013f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	f47f aa6d 	bne.w	801346a <_dtoa_r+0x9a>
 8013f90:	4b07      	ldr	r3, [pc, #28]	; (8013fb0 <_dtoa_r+0xbe0>)
 8013f92:	f7ff ba92 	b.w	80134ba <_dtoa_r+0xea>
 8013f96:	9b01      	ldr	r3, [sp, #4]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	dcb5      	bgt.n	8013f08 <_dtoa_r+0xb38>
 8013f9c:	9b07      	ldr	r3, [sp, #28]
 8013f9e:	2b02      	cmp	r3, #2
 8013fa0:	f73f aeb1 	bgt.w	8013d06 <_dtoa_r+0x936>
 8013fa4:	e7b0      	b.n	8013f08 <_dtoa_r+0xb38>
 8013fa6:	bf00      	nop
 8013fa8:	08016cf1 	.word	0x08016cf1
 8013fac:	08016c4c 	.word	0x08016c4c
 8013fb0:	08016c75 	.word	0x08016c75

08013fb4 <_free_r>:
 8013fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fb6:	2900      	cmp	r1, #0
 8013fb8:	d044      	beq.n	8014044 <_free_r+0x90>
 8013fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fbe:	9001      	str	r0, [sp, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8013fc6:	bfb8      	it	lt
 8013fc8:	18e4      	addlt	r4, r4, r3
 8013fca:	f7fe f90b 	bl	80121e4 <__malloc_lock>
 8013fce:	4a1e      	ldr	r2, [pc, #120]	; (8014048 <_free_r+0x94>)
 8013fd0:	9801      	ldr	r0, [sp, #4]
 8013fd2:	6813      	ldr	r3, [r2, #0]
 8013fd4:	b933      	cbnz	r3, 8013fe4 <_free_r+0x30>
 8013fd6:	6063      	str	r3, [r4, #4]
 8013fd8:	6014      	str	r4, [r2, #0]
 8013fda:	b003      	add	sp, #12
 8013fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fe0:	f7fe b906 	b.w	80121f0 <__malloc_unlock>
 8013fe4:	42a3      	cmp	r3, r4
 8013fe6:	d908      	bls.n	8013ffa <_free_r+0x46>
 8013fe8:	6825      	ldr	r5, [r4, #0]
 8013fea:	1961      	adds	r1, r4, r5
 8013fec:	428b      	cmp	r3, r1
 8013fee:	bf01      	itttt	eq
 8013ff0:	6819      	ldreq	r1, [r3, #0]
 8013ff2:	685b      	ldreq	r3, [r3, #4]
 8013ff4:	1949      	addeq	r1, r1, r5
 8013ff6:	6021      	streq	r1, [r4, #0]
 8013ff8:	e7ed      	b.n	8013fd6 <_free_r+0x22>
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	b10b      	cbz	r3, 8014004 <_free_r+0x50>
 8014000:	42a3      	cmp	r3, r4
 8014002:	d9fa      	bls.n	8013ffa <_free_r+0x46>
 8014004:	6811      	ldr	r1, [r2, #0]
 8014006:	1855      	adds	r5, r2, r1
 8014008:	42a5      	cmp	r5, r4
 801400a:	d10b      	bne.n	8014024 <_free_r+0x70>
 801400c:	6824      	ldr	r4, [r4, #0]
 801400e:	4421      	add	r1, r4
 8014010:	1854      	adds	r4, r2, r1
 8014012:	42a3      	cmp	r3, r4
 8014014:	6011      	str	r1, [r2, #0]
 8014016:	d1e0      	bne.n	8013fda <_free_r+0x26>
 8014018:	681c      	ldr	r4, [r3, #0]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	6053      	str	r3, [r2, #4]
 801401e:	440c      	add	r4, r1
 8014020:	6014      	str	r4, [r2, #0]
 8014022:	e7da      	b.n	8013fda <_free_r+0x26>
 8014024:	d902      	bls.n	801402c <_free_r+0x78>
 8014026:	230c      	movs	r3, #12
 8014028:	6003      	str	r3, [r0, #0]
 801402a:	e7d6      	b.n	8013fda <_free_r+0x26>
 801402c:	6825      	ldr	r5, [r4, #0]
 801402e:	1961      	adds	r1, r4, r5
 8014030:	428b      	cmp	r3, r1
 8014032:	bf04      	itt	eq
 8014034:	6819      	ldreq	r1, [r3, #0]
 8014036:	685b      	ldreq	r3, [r3, #4]
 8014038:	6063      	str	r3, [r4, #4]
 801403a:	bf04      	itt	eq
 801403c:	1949      	addeq	r1, r1, r5
 801403e:	6021      	streq	r1, [r4, #0]
 8014040:	6054      	str	r4, [r2, #4]
 8014042:	e7ca      	b.n	8013fda <_free_r+0x26>
 8014044:	b003      	add	sp, #12
 8014046:	bd30      	pop	{r4, r5, pc}
 8014048:	2000ed74 	.word	0x2000ed74

0801404c <_Balloc>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	69c6      	ldr	r6, [r0, #28]
 8014050:	4604      	mov	r4, r0
 8014052:	460d      	mov	r5, r1
 8014054:	b976      	cbnz	r6, 8014074 <_Balloc+0x28>
 8014056:	2010      	movs	r0, #16
 8014058:	f7fe f81c 	bl	8012094 <malloc>
 801405c:	4602      	mov	r2, r0
 801405e:	61e0      	str	r0, [r4, #28]
 8014060:	b920      	cbnz	r0, 801406c <_Balloc+0x20>
 8014062:	4b18      	ldr	r3, [pc, #96]	; (80140c4 <_Balloc+0x78>)
 8014064:	4818      	ldr	r0, [pc, #96]	; (80140c8 <_Balloc+0x7c>)
 8014066:	216b      	movs	r1, #107	; 0x6b
 8014068:	f001 fd6e 	bl	8015b48 <__assert_func>
 801406c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014070:	6006      	str	r6, [r0, #0]
 8014072:	60c6      	str	r6, [r0, #12]
 8014074:	69e6      	ldr	r6, [r4, #28]
 8014076:	68f3      	ldr	r3, [r6, #12]
 8014078:	b183      	cbz	r3, 801409c <_Balloc+0x50>
 801407a:	69e3      	ldr	r3, [r4, #28]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014082:	b9b8      	cbnz	r0, 80140b4 <_Balloc+0x68>
 8014084:	2101      	movs	r1, #1
 8014086:	fa01 f605 	lsl.w	r6, r1, r5
 801408a:	1d72      	adds	r2, r6, #5
 801408c:	0092      	lsls	r2, r2, #2
 801408e:	4620      	mov	r0, r4
 8014090:	f001 fd78 	bl	8015b84 <_calloc_r>
 8014094:	b160      	cbz	r0, 80140b0 <_Balloc+0x64>
 8014096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801409a:	e00e      	b.n	80140ba <_Balloc+0x6e>
 801409c:	2221      	movs	r2, #33	; 0x21
 801409e:	2104      	movs	r1, #4
 80140a0:	4620      	mov	r0, r4
 80140a2:	f001 fd6f 	bl	8015b84 <_calloc_r>
 80140a6:	69e3      	ldr	r3, [r4, #28]
 80140a8:	60f0      	str	r0, [r6, #12]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d1e4      	bne.n	801407a <_Balloc+0x2e>
 80140b0:	2000      	movs	r0, #0
 80140b2:	bd70      	pop	{r4, r5, r6, pc}
 80140b4:	6802      	ldr	r2, [r0, #0]
 80140b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140ba:	2300      	movs	r3, #0
 80140bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140c0:	e7f7      	b.n	80140b2 <_Balloc+0x66>
 80140c2:	bf00      	nop
 80140c4:	08016c82 	.word	0x08016c82
 80140c8:	08016d02 	.word	0x08016d02

080140cc <_Bfree>:
 80140cc:	b570      	push	{r4, r5, r6, lr}
 80140ce:	69c6      	ldr	r6, [r0, #28]
 80140d0:	4605      	mov	r5, r0
 80140d2:	460c      	mov	r4, r1
 80140d4:	b976      	cbnz	r6, 80140f4 <_Bfree+0x28>
 80140d6:	2010      	movs	r0, #16
 80140d8:	f7fd ffdc 	bl	8012094 <malloc>
 80140dc:	4602      	mov	r2, r0
 80140de:	61e8      	str	r0, [r5, #28]
 80140e0:	b920      	cbnz	r0, 80140ec <_Bfree+0x20>
 80140e2:	4b09      	ldr	r3, [pc, #36]	; (8014108 <_Bfree+0x3c>)
 80140e4:	4809      	ldr	r0, [pc, #36]	; (801410c <_Bfree+0x40>)
 80140e6:	218f      	movs	r1, #143	; 0x8f
 80140e8:	f001 fd2e 	bl	8015b48 <__assert_func>
 80140ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140f0:	6006      	str	r6, [r0, #0]
 80140f2:	60c6      	str	r6, [r0, #12]
 80140f4:	b13c      	cbz	r4, 8014106 <_Bfree+0x3a>
 80140f6:	69eb      	ldr	r3, [r5, #28]
 80140f8:	6862      	ldr	r2, [r4, #4]
 80140fa:	68db      	ldr	r3, [r3, #12]
 80140fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014100:	6021      	str	r1, [r4, #0]
 8014102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014106:	bd70      	pop	{r4, r5, r6, pc}
 8014108:	08016c82 	.word	0x08016c82
 801410c:	08016d02 	.word	0x08016d02

08014110 <__multadd>:
 8014110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014114:	690d      	ldr	r5, [r1, #16]
 8014116:	4607      	mov	r7, r0
 8014118:	460c      	mov	r4, r1
 801411a:	461e      	mov	r6, r3
 801411c:	f101 0c14 	add.w	ip, r1, #20
 8014120:	2000      	movs	r0, #0
 8014122:	f8dc 3000 	ldr.w	r3, [ip]
 8014126:	b299      	uxth	r1, r3
 8014128:	fb02 6101 	mla	r1, r2, r1, r6
 801412c:	0c1e      	lsrs	r6, r3, #16
 801412e:	0c0b      	lsrs	r3, r1, #16
 8014130:	fb02 3306 	mla	r3, r2, r6, r3
 8014134:	b289      	uxth	r1, r1
 8014136:	3001      	adds	r0, #1
 8014138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801413c:	4285      	cmp	r5, r0
 801413e:	f84c 1b04 	str.w	r1, [ip], #4
 8014142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014146:	dcec      	bgt.n	8014122 <__multadd+0x12>
 8014148:	b30e      	cbz	r6, 801418e <__multadd+0x7e>
 801414a:	68a3      	ldr	r3, [r4, #8]
 801414c:	42ab      	cmp	r3, r5
 801414e:	dc19      	bgt.n	8014184 <__multadd+0x74>
 8014150:	6861      	ldr	r1, [r4, #4]
 8014152:	4638      	mov	r0, r7
 8014154:	3101      	adds	r1, #1
 8014156:	f7ff ff79 	bl	801404c <_Balloc>
 801415a:	4680      	mov	r8, r0
 801415c:	b928      	cbnz	r0, 801416a <__multadd+0x5a>
 801415e:	4602      	mov	r2, r0
 8014160:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <__multadd+0x84>)
 8014162:	480d      	ldr	r0, [pc, #52]	; (8014198 <__multadd+0x88>)
 8014164:	21ba      	movs	r1, #186	; 0xba
 8014166:	f001 fcef 	bl	8015b48 <__assert_func>
 801416a:	6922      	ldr	r2, [r4, #16]
 801416c:	3202      	adds	r2, #2
 801416e:	f104 010c 	add.w	r1, r4, #12
 8014172:	0092      	lsls	r2, r2, #2
 8014174:	300c      	adds	r0, #12
 8014176:	f7ff f88d 	bl	8013294 <memcpy>
 801417a:	4621      	mov	r1, r4
 801417c:	4638      	mov	r0, r7
 801417e:	f7ff ffa5 	bl	80140cc <_Bfree>
 8014182:	4644      	mov	r4, r8
 8014184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014188:	3501      	adds	r5, #1
 801418a:	615e      	str	r6, [r3, #20]
 801418c:	6125      	str	r5, [r4, #16]
 801418e:	4620      	mov	r0, r4
 8014190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014194:	08016cf1 	.word	0x08016cf1
 8014198:	08016d02 	.word	0x08016d02

0801419c <__s2b>:
 801419c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141a0:	460c      	mov	r4, r1
 80141a2:	4615      	mov	r5, r2
 80141a4:	461f      	mov	r7, r3
 80141a6:	2209      	movs	r2, #9
 80141a8:	3308      	adds	r3, #8
 80141aa:	4606      	mov	r6, r0
 80141ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80141b0:	2100      	movs	r1, #0
 80141b2:	2201      	movs	r2, #1
 80141b4:	429a      	cmp	r2, r3
 80141b6:	db09      	blt.n	80141cc <__s2b+0x30>
 80141b8:	4630      	mov	r0, r6
 80141ba:	f7ff ff47 	bl	801404c <_Balloc>
 80141be:	b940      	cbnz	r0, 80141d2 <__s2b+0x36>
 80141c0:	4602      	mov	r2, r0
 80141c2:	4b19      	ldr	r3, [pc, #100]	; (8014228 <__s2b+0x8c>)
 80141c4:	4819      	ldr	r0, [pc, #100]	; (801422c <__s2b+0x90>)
 80141c6:	21d3      	movs	r1, #211	; 0xd3
 80141c8:	f001 fcbe 	bl	8015b48 <__assert_func>
 80141cc:	0052      	lsls	r2, r2, #1
 80141ce:	3101      	adds	r1, #1
 80141d0:	e7f0      	b.n	80141b4 <__s2b+0x18>
 80141d2:	9b08      	ldr	r3, [sp, #32]
 80141d4:	6143      	str	r3, [r0, #20]
 80141d6:	2d09      	cmp	r5, #9
 80141d8:	f04f 0301 	mov.w	r3, #1
 80141dc:	6103      	str	r3, [r0, #16]
 80141de:	dd16      	ble.n	801420e <__s2b+0x72>
 80141e0:	f104 0909 	add.w	r9, r4, #9
 80141e4:	46c8      	mov	r8, r9
 80141e6:	442c      	add	r4, r5
 80141e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80141ec:	4601      	mov	r1, r0
 80141ee:	3b30      	subs	r3, #48	; 0x30
 80141f0:	220a      	movs	r2, #10
 80141f2:	4630      	mov	r0, r6
 80141f4:	f7ff ff8c 	bl	8014110 <__multadd>
 80141f8:	45a0      	cmp	r8, r4
 80141fa:	d1f5      	bne.n	80141e8 <__s2b+0x4c>
 80141fc:	f1a5 0408 	sub.w	r4, r5, #8
 8014200:	444c      	add	r4, r9
 8014202:	1b2d      	subs	r5, r5, r4
 8014204:	1963      	adds	r3, r4, r5
 8014206:	42bb      	cmp	r3, r7
 8014208:	db04      	blt.n	8014214 <__s2b+0x78>
 801420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801420e:	340a      	adds	r4, #10
 8014210:	2509      	movs	r5, #9
 8014212:	e7f6      	b.n	8014202 <__s2b+0x66>
 8014214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014218:	4601      	mov	r1, r0
 801421a:	3b30      	subs	r3, #48	; 0x30
 801421c:	220a      	movs	r2, #10
 801421e:	4630      	mov	r0, r6
 8014220:	f7ff ff76 	bl	8014110 <__multadd>
 8014224:	e7ee      	b.n	8014204 <__s2b+0x68>
 8014226:	bf00      	nop
 8014228:	08016cf1 	.word	0x08016cf1
 801422c:	08016d02 	.word	0x08016d02

08014230 <__hi0bits>:
 8014230:	0c03      	lsrs	r3, r0, #16
 8014232:	041b      	lsls	r3, r3, #16
 8014234:	b9d3      	cbnz	r3, 801426c <__hi0bits+0x3c>
 8014236:	0400      	lsls	r0, r0, #16
 8014238:	2310      	movs	r3, #16
 801423a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801423e:	bf04      	itt	eq
 8014240:	0200      	lsleq	r0, r0, #8
 8014242:	3308      	addeq	r3, #8
 8014244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014248:	bf04      	itt	eq
 801424a:	0100      	lsleq	r0, r0, #4
 801424c:	3304      	addeq	r3, #4
 801424e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014252:	bf04      	itt	eq
 8014254:	0080      	lsleq	r0, r0, #2
 8014256:	3302      	addeq	r3, #2
 8014258:	2800      	cmp	r0, #0
 801425a:	db05      	blt.n	8014268 <__hi0bits+0x38>
 801425c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014260:	f103 0301 	add.w	r3, r3, #1
 8014264:	bf08      	it	eq
 8014266:	2320      	moveq	r3, #32
 8014268:	4618      	mov	r0, r3
 801426a:	4770      	bx	lr
 801426c:	2300      	movs	r3, #0
 801426e:	e7e4      	b.n	801423a <__hi0bits+0xa>

08014270 <__lo0bits>:
 8014270:	6803      	ldr	r3, [r0, #0]
 8014272:	f013 0207 	ands.w	r2, r3, #7
 8014276:	d00c      	beq.n	8014292 <__lo0bits+0x22>
 8014278:	07d9      	lsls	r1, r3, #31
 801427a:	d422      	bmi.n	80142c2 <__lo0bits+0x52>
 801427c:	079a      	lsls	r2, r3, #30
 801427e:	bf49      	itett	mi
 8014280:	085b      	lsrmi	r3, r3, #1
 8014282:	089b      	lsrpl	r3, r3, #2
 8014284:	6003      	strmi	r3, [r0, #0]
 8014286:	2201      	movmi	r2, #1
 8014288:	bf5c      	itt	pl
 801428a:	6003      	strpl	r3, [r0, #0]
 801428c:	2202      	movpl	r2, #2
 801428e:	4610      	mov	r0, r2
 8014290:	4770      	bx	lr
 8014292:	b299      	uxth	r1, r3
 8014294:	b909      	cbnz	r1, 801429a <__lo0bits+0x2a>
 8014296:	0c1b      	lsrs	r3, r3, #16
 8014298:	2210      	movs	r2, #16
 801429a:	b2d9      	uxtb	r1, r3
 801429c:	b909      	cbnz	r1, 80142a2 <__lo0bits+0x32>
 801429e:	3208      	adds	r2, #8
 80142a0:	0a1b      	lsrs	r3, r3, #8
 80142a2:	0719      	lsls	r1, r3, #28
 80142a4:	bf04      	itt	eq
 80142a6:	091b      	lsreq	r3, r3, #4
 80142a8:	3204      	addeq	r2, #4
 80142aa:	0799      	lsls	r1, r3, #30
 80142ac:	bf04      	itt	eq
 80142ae:	089b      	lsreq	r3, r3, #2
 80142b0:	3202      	addeq	r2, #2
 80142b2:	07d9      	lsls	r1, r3, #31
 80142b4:	d403      	bmi.n	80142be <__lo0bits+0x4e>
 80142b6:	085b      	lsrs	r3, r3, #1
 80142b8:	f102 0201 	add.w	r2, r2, #1
 80142bc:	d003      	beq.n	80142c6 <__lo0bits+0x56>
 80142be:	6003      	str	r3, [r0, #0]
 80142c0:	e7e5      	b.n	801428e <__lo0bits+0x1e>
 80142c2:	2200      	movs	r2, #0
 80142c4:	e7e3      	b.n	801428e <__lo0bits+0x1e>
 80142c6:	2220      	movs	r2, #32
 80142c8:	e7e1      	b.n	801428e <__lo0bits+0x1e>
	...

080142cc <__i2b>:
 80142cc:	b510      	push	{r4, lr}
 80142ce:	460c      	mov	r4, r1
 80142d0:	2101      	movs	r1, #1
 80142d2:	f7ff febb 	bl	801404c <_Balloc>
 80142d6:	4602      	mov	r2, r0
 80142d8:	b928      	cbnz	r0, 80142e6 <__i2b+0x1a>
 80142da:	4b05      	ldr	r3, [pc, #20]	; (80142f0 <__i2b+0x24>)
 80142dc:	4805      	ldr	r0, [pc, #20]	; (80142f4 <__i2b+0x28>)
 80142de:	f240 1145 	movw	r1, #325	; 0x145
 80142e2:	f001 fc31 	bl	8015b48 <__assert_func>
 80142e6:	2301      	movs	r3, #1
 80142e8:	6144      	str	r4, [r0, #20]
 80142ea:	6103      	str	r3, [r0, #16]
 80142ec:	bd10      	pop	{r4, pc}
 80142ee:	bf00      	nop
 80142f0:	08016cf1 	.word	0x08016cf1
 80142f4:	08016d02 	.word	0x08016d02

080142f8 <__multiply>:
 80142f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142fc:	4691      	mov	r9, r2
 80142fe:	690a      	ldr	r2, [r1, #16]
 8014300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014304:	429a      	cmp	r2, r3
 8014306:	bfb8      	it	lt
 8014308:	460b      	movlt	r3, r1
 801430a:	460c      	mov	r4, r1
 801430c:	bfbc      	itt	lt
 801430e:	464c      	movlt	r4, r9
 8014310:	4699      	movlt	r9, r3
 8014312:	6927      	ldr	r7, [r4, #16]
 8014314:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014318:	68a3      	ldr	r3, [r4, #8]
 801431a:	6861      	ldr	r1, [r4, #4]
 801431c:	eb07 060a 	add.w	r6, r7, sl
 8014320:	42b3      	cmp	r3, r6
 8014322:	b085      	sub	sp, #20
 8014324:	bfb8      	it	lt
 8014326:	3101      	addlt	r1, #1
 8014328:	f7ff fe90 	bl	801404c <_Balloc>
 801432c:	b930      	cbnz	r0, 801433c <__multiply+0x44>
 801432e:	4602      	mov	r2, r0
 8014330:	4b44      	ldr	r3, [pc, #272]	; (8014444 <__multiply+0x14c>)
 8014332:	4845      	ldr	r0, [pc, #276]	; (8014448 <__multiply+0x150>)
 8014334:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014338:	f001 fc06 	bl	8015b48 <__assert_func>
 801433c:	f100 0514 	add.w	r5, r0, #20
 8014340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014344:	462b      	mov	r3, r5
 8014346:	2200      	movs	r2, #0
 8014348:	4543      	cmp	r3, r8
 801434a:	d321      	bcc.n	8014390 <__multiply+0x98>
 801434c:	f104 0314 	add.w	r3, r4, #20
 8014350:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014354:	f109 0314 	add.w	r3, r9, #20
 8014358:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801435c:	9202      	str	r2, [sp, #8]
 801435e:	1b3a      	subs	r2, r7, r4
 8014360:	3a15      	subs	r2, #21
 8014362:	f022 0203 	bic.w	r2, r2, #3
 8014366:	3204      	adds	r2, #4
 8014368:	f104 0115 	add.w	r1, r4, #21
 801436c:	428f      	cmp	r7, r1
 801436e:	bf38      	it	cc
 8014370:	2204      	movcc	r2, #4
 8014372:	9201      	str	r2, [sp, #4]
 8014374:	9a02      	ldr	r2, [sp, #8]
 8014376:	9303      	str	r3, [sp, #12]
 8014378:	429a      	cmp	r2, r3
 801437a:	d80c      	bhi.n	8014396 <__multiply+0x9e>
 801437c:	2e00      	cmp	r6, #0
 801437e:	dd03      	ble.n	8014388 <__multiply+0x90>
 8014380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014384:	2b00      	cmp	r3, #0
 8014386:	d05b      	beq.n	8014440 <__multiply+0x148>
 8014388:	6106      	str	r6, [r0, #16]
 801438a:	b005      	add	sp, #20
 801438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014390:	f843 2b04 	str.w	r2, [r3], #4
 8014394:	e7d8      	b.n	8014348 <__multiply+0x50>
 8014396:	f8b3 a000 	ldrh.w	sl, [r3]
 801439a:	f1ba 0f00 	cmp.w	sl, #0
 801439e:	d024      	beq.n	80143ea <__multiply+0xf2>
 80143a0:	f104 0e14 	add.w	lr, r4, #20
 80143a4:	46a9      	mov	r9, r5
 80143a6:	f04f 0c00 	mov.w	ip, #0
 80143aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80143ae:	f8d9 1000 	ldr.w	r1, [r9]
 80143b2:	fa1f fb82 	uxth.w	fp, r2
 80143b6:	b289      	uxth	r1, r1
 80143b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80143bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80143c0:	f8d9 2000 	ldr.w	r2, [r9]
 80143c4:	4461      	add	r1, ip
 80143c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80143ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80143ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80143d2:	b289      	uxth	r1, r1
 80143d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80143d8:	4577      	cmp	r7, lr
 80143da:	f849 1b04 	str.w	r1, [r9], #4
 80143de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80143e2:	d8e2      	bhi.n	80143aa <__multiply+0xb2>
 80143e4:	9a01      	ldr	r2, [sp, #4]
 80143e6:	f845 c002 	str.w	ip, [r5, r2]
 80143ea:	9a03      	ldr	r2, [sp, #12]
 80143ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80143f0:	3304      	adds	r3, #4
 80143f2:	f1b9 0f00 	cmp.w	r9, #0
 80143f6:	d021      	beq.n	801443c <__multiply+0x144>
 80143f8:	6829      	ldr	r1, [r5, #0]
 80143fa:	f104 0c14 	add.w	ip, r4, #20
 80143fe:	46ae      	mov	lr, r5
 8014400:	f04f 0a00 	mov.w	sl, #0
 8014404:	f8bc b000 	ldrh.w	fp, [ip]
 8014408:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801440c:	fb09 220b 	mla	r2, r9, fp, r2
 8014410:	4452      	add	r2, sl
 8014412:	b289      	uxth	r1, r1
 8014414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014418:	f84e 1b04 	str.w	r1, [lr], #4
 801441c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014420:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014424:	f8be 1000 	ldrh.w	r1, [lr]
 8014428:	fb09 110a 	mla	r1, r9, sl, r1
 801442c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014430:	4567      	cmp	r7, ip
 8014432:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014436:	d8e5      	bhi.n	8014404 <__multiply+0x10c>
 8014438:	9a01      	ldr	r2, [sp, #4]
 801443a:	50a9      	str	r1, [r5, r2]
 801443c:	3504      	adds	r5, #4
 801443e:	e799      	b.n	8014374 <__multiply+0x7c>
 8014440:	3e01      	subs	r6, #1
 8014442:	e79b      	b.n	801437c <__multiply+0x84>
 8014444:	08016cf1 	.word	0x08016cf1
 8014448:	08016d02 	.word	0x08016d02

0801444c <__pow5mult>:
 801444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014450:	4615      	mov	r5, r2
 8014452:	f012 0203 	ands.w	r2, r2, #3
 8014456:	4606      	mov	r6, r0
 8014458:	460f      	mov	r7, r1
 801445a:	d007      	beq.n	801446c <__pow5mult+0x20>
 801445c:	4c25      	ldr	r4, [pc, #148]	; (80144f4 <__pow5mult+0xa8>)
 801445e:	3a01      	subs	r2, #1
 8014460:	2300      	movs	r3, #0
 8014462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014466:	f7ff fe53 	bl	8014110 <__multadd>
 801446a:	4607      	mov	r7, r0
 801446c:	10ad      	asrs	r5, r5, #2
 801446e:	d03d      	beq.n	80144ec <__pow5mult+0xa0>
 8014470:	69f4      	ldr	r4, [r6, #28]
 8014472:	b97c      	cbnz	r4, 8014494 <__pow5mult+0x48>
 8014474:	2010      	movs	r0, #16
 8014476:	f7fd fe0d 	bl	8012094 <malloc>
 801447a:	4602      	mov	r2, r0
 801447c:	61f0      	str	r0, [r6, #28]
 801447e:	b928      	cbnz	r0, 801448c <__pow5mult+0x40>
 8014480:	4b1d      	ldr	r3, [pc, #116]	; (80144f8 <__pow5mult+0xac>)
 8014482:	481e      	ldr	r0, [pc, #120]	; (80144fc <__pow5mult+0xb0>)
 8014484:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014488:	f001 fb5e 	bl	8015b48 <__assert_func>
 801448c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014490:	6004      	str	r4, [r0, #0]
 8014492:	60c4      	str	r4, [r0, #12]
 8014494:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801449c:	b94c      	cbnz	r4, 80144b2 <__pow5mult+0x66>
 801449e:	f240 2171 	movw	r1, #625	; 0x271
 80144a2:	4630      	mov	r0, r6
 80144a4:	f7ff ff12 	bl	80142cc <__i2b>
 80144a8:	2300      	movs	r3, #0
 80144aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80144ae:	4604      	mov	r4, r0
 80144b0:	6003      	str	r3, [r0, #0]
 80144b2:	f04f 0900 	mov.w	r9, #0
 80144b6:	07eb      	lsls	r3, r5, #31
 80144b8:	d50a      	bpl.n	80144d0 <__pow5mult+0x84>
 80144ba:	4639      	mov	r1, r7
 80144bc:	4622      	mov	r2, r4
 80144be:	4630      	mov	r0, r6
 80144c0:	f7ff ff1a 	bl	80142f8 <__multiply>
 80144c4:	4639      	mov	r1, r7
 80144c6:	4680      	mov	r8, r0
 80144c8:	4630      	mov	r0, r6
 80144ca:	f7ff fdff 	bl	80140cc <_Bfree>
 80144ce:	4647      	mov	r7, r8
 80144d0:	106d      	asrs	r5, r5, #1
 80144d2:	d00b      	beq.n	80144ec <__pow5mult+0xa0>
 80144d4:	6820      	ldr	r0, [r4, #0]
 80144d6:	b938      	cbnz	r0, 80144e8 <__pow5mult+0x9c>
 80144d8:	4622      	mov	r2, r4
 80144da:	4621      	mov	r1, r4
 80144dc:	4630      	mov	r0, r6
 80144de:	f7ff ff0b 	bl	80142f8 <__multiply>
 80144e2:	6020      	str	r0, [r4, #0]
 80144e4:	f8c0 9000 	str.w	r9, [r0]
 80144e8:	4604      	mov	r4, r0
 80144ea:	e7e4      	b.n	80144b6 <__pow5mult+0x6a>
 80144ec:	4638      	mov	r0, r7
 80144ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144f2:	bf00      	nop
 80144f4:	08016e50 	.word	0x08016e50
 80144f8:	08016c82 	.word	0x08016c82
 80144fc:	08016d02 	.word	0x08016d02

08014500 <__lshift>:
 8014500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014504:	460c      	mov	r4, r1
 8014506:	6849      	ldr	r1, [r1, #4]
 8014508:	6923      	ldr	r3, [r4, #16]
 801450a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801450e:	68a3      	ldr	r3, [r4, #8]
 8014510:	4607      	mov	r7, r0
 8014512:	4691      	mov	r9, r2
 8014514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014518:	f108 0601 	add.w	r6, r8, #1
 801451c:	42b3      	cmp	r3, r6
 801451e:	db0b      	blt.n	8014538 <__lshift+0x38>
 8014520:	4638      	mov	r0, r7
 8014522:	f7ff fd93 	bl	801404c <_Balloc>
 8014526:	4605      	mov	r5, r0
 8014528:	b948      	cbnz	r0, 801453e <__lshift+0x3e>
 801452a:	4602      	mov	r2, r0
 801452c:	4b28      	ldr	r3, [pc, #160]	; (80145d0 <__lshift+0xd0>)
 801452e:	4829      	ldr	r0, [pc, #164]	; (80145d4 <__lshift+0xd4>)
 8014530:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014534:	f001 fb08 	bl	8015b48 <__assert_func>
 8014538:	3101      	adds	r1, #1
 801453a:	005b      	lsls	r3, r3, #1
 801453c:	e7ee      	b.n	801451c <__lshift+0x1c>
 801453e:	2300      	movs	r3, #0
 8014540:	f100 0114 	add.w	r1, r0, #20
 8014544:	f100 0210 	add.w	r2, r0, #16
 8014548:	4618      	mov	r0, r3
 801454a:	4553      	cmp	r3, sl
 801454c:	db33      	blt.n	80145b6 <__lshift+0xb6>
 801454e:	6920      	ldr	r0, [r4, #16]
 8014550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014554:	f104 0314 	add.w	r3, r4, #20
 8014558:	f019 091f 	ands.w	r9, r9, #31
 801455c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014564:	d02b      	beq.n	80145be <__lshift+0xbe>
 8014566:	f1c9 0e20 	rsb	lr, r9, #32
 801456a:	468a      	mov	sl, r1
 801456c:	2200      	movs	r2, #0
 801456e:	6818      	ldr	r0, [r3, #0]
 8014570:	fa00 f009 	lsl.w	r0, r0, r9
 8014574:	4310      	orrs	r0, r2
 8014576:	f84a 0b04 	str.w	r0, [sl], #4
 801457a:	f853 2b04 	ldr.w	r2, [r3], #4
 801457e:	459c      	cmp	ip, r3
 8014580:	fa22 f20e 	lsr.w	r2, r2, lr
 8014584:	d8f3      	bhi.n	801456e <__lshift+0x6e>
 8014586:	ebac 0304 	sub.w	r3, ip, r4
 801458a:	3b15      	subs	r3, #21
 801458c:	f023 0303 	bic.w	r3, r3, #3
 8014590:	3304      	adds	r3, #4
 8014592:	f104 0015 	add.w	r0, r4, #21
 8014596:	4584      	cmp	ip, r0
 8014598:	bf38      	it	cc
 801459a:	2304      	movcc	r3, #4
 801459c:	50ca      	str	r2, [r1, r3]
 801459e:	b10a      	cbz	r2, 80145a4 <__lshift+0xa4>
 80145a0:	f108 0602 	add.w	r6, r8, #2
 80145a4:	3e01      	subs	r6, #1
 80145a6:	4638      	mov	r0, r7
 80145a8:	612e      	str	r6, [r5, #16]
 80145aa:	4621      	mov	r1, r4
 80145ac:	f7ff fd8e 	bl	80140cc <_Bfree>
 80145b0:	4628      	mov	r0, r5
 80145b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80145ba:	3301      	adds	r3, #1
 80145bc:	e7c5      	b.n	801454a <__lshift+0x4a>
 80145be:	3904      	subs	r1, #4
 80145c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80145c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80145c8:	459c      	cmp	ip, r3
 80145ca:	d8f9      	bhi.n	80145c0 <__lshift+0xc0>
 80145cc:	e7ea      	b.n	80145a4 <__lshift+0xa4>
 80145ce:	bf00      	nop
 80145d0:	08016cf1 	.word	0x08016cf1
 80145d4:	08016d02 	.word	0x08016d02

080145d8 <__mcmp>:
 80145d8:	b530      	push	{r4, r5, lr}
 80145da:	6902      	ldr	r2, [r0, #16]
 80145dc:	690c      	ldr	r4, [r1, #16]
 80145de:	1b12      	subs	r2, r2, r4
 80145e0:	d10e      	bne.n	8014600 <__mcmp+0x28>
 80145e2:	f100 0314 	add.w	r3, r0, #20
 80145e6:	3114      	adds	r1, #20
 80145e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80145ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80145f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80145f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80145f8:	42a5      	cmp	r5, r4
 80145fa:	d003      	beq.n	8014604 <__mcmp+0x2c>
 80145fc:	d305      	bcc.n	801460a <__mcmp+0x32>
 80145fe:	2201      	movs	r2, #1
 8014600:	4610      	mov	r0, r2
 8014602:	bd30      	pop	{r4, r5, pc}
 8014604:	4283      	cmp	r3, r0
 8014606:	d3f3      	bcc.n	80145f0 <__mcmp+0x18>
 8014608:	e7fa      	b.n	8014600 <__mcmp+0x28>
 801460a:	f04f 32ff 	mov.w	r2, #4294967295
 801460e:	e7f7      	b.n	8014600 <__mcmp+0x28>

08014610 <__mdiff>:
 8014610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014614:	460c      	mov	r4, r1
 8014616:	4606      	mov	r6, r0
 8014618:	4611      	mov	r1, r2
 801461a:	4620      	mov	r0, r4
 801461c:	4690      	mov	r8, r2
 801461e:	f7ff ffdb 	bl	80145d8 <__mcmp>
 8014622:	1e05      	subs	r5, r0, #0
 8014624:	d110      	bne.n	8014648 <__mdiff+0x38>
 8014626:	4629      	mov	r1, r5
 8014628:	4630      	mov	r0, r6
 801462a:	f7ff fd0f 	bl	801404c <_Balloc>
 801462e:	b930      	cbnz	r0, 801463e <__mdiff+0x2e>
 8014630:	4b3a      	ldr	r3, [pc, #232]	; (801471c <__mdiff+0x10c>)
 8014632:	4602      	mov	r2, r0
 8014634:	f240 2137 	movw	r1, #567	; 0x237
 8014638:	4839      	ldr	r0, [pc, #228]	; (8014720 <__mdiff+0x110>)
 801463a:	f001 fa85 	bl	8015b48 <__assert_func>
 801463e:	2301      	movs	r3, #1
 8014640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014648:	bfa4      	itt	ge
 801464a:	4643      	movge	r3, r8
 801464c:	46a0      	movge	r8, r4
 801464e:	4630      	mov	r0, r6
 8014650:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014654:	bfa6      	itte	ge
 8014656:	461c      	movge	r4, r3
 8014658:	2500      	movge	r5, #0
 801465a:	2501      	movlt	r5, #1
 801465c:	f7ff fcf6 	bl	801404c <_Balloc>
 8014660:	b920      	cbnz	r0, 801466c <__mdiff+0x5c>
 8014662:	4b2e      	ldr	r3, [pc, #184]	; (801471c <__mdiff+0x10c>)
 8014664:	4602      	mov	r2, r0
 8014666:	f240 2145 	movw	r1, #581	; 0x245
 801466a:	e7e5      	b.n	8014638 <__mdiff+0x28>
 801466c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014670:	6926      	ldr	r6, [r4, #16]
 8014672:	60c5      	str	r5, [r0, #12]
 8014674:	f104 0914 	add.w	r9, r4, #20
 8014678:	f108 0514 	add.w	r5, r8, #20
 801467c:	f100 0e14 	add.w	lr, r0, #20
 8014680:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014684:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014688:	f108 0210 	add.w	r2, r8, #16
 801468c:	46f2      	mov	sl, lr
 801468e:	2100      	movs	r1, #0
 8014690:	f859 3b04 	ldr.w	r3, [r9], #4
 8014694:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014698:	fa11 f88b 	uxtah	r8, r1, fp
 801469c:	b299      	uxth	r1, r3
 801469e:	0c1b      	lsrs	r3, r3, #16
 80146a0:	eba8 0801 	sub.w	r8, r8, r1
 80146a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80146a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80146ac:	fa1f f888 	uxth.w	r8, r8
 80146b0:	1419      	asrs	r1, r3, #16
 80146b2:	454e      	cmp	r6, r9
 80146b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80146b8:	f84a 3b04 	str.w	r3, [sl], #4
 80146bc:	d8e8      	bhi.n	8014690 <__mdiff+0x80>
 80146be:	1b33      	subs	r3, r6, r4
 80146c0:	3b15      	subs	r3, #21
 80146c2:	f023 0303 	bic.w	r3, r3, #3
 80146c6:	3304      	adds	r3, #4
 80146c8:	3415      	adds	r4, #21
 80146ca:	42a6      	cmp	r6, r4
 80146cc:	bf38      	it	cc
 80146ce:	2304      	movcc	r3, #4
 80146d0:	441d      	add	r5, r3
 80146d2:	4473      	add	r3, lr
 80146d4:	469e      	mov	lr, r3
 80146d6:	462e      	mov	r6, r5
 80146d8:	4566      	cmp	r6, ip
 80146da:	d30e      	bcc.n	80146fa <__mdiff+0xea>
 80146dc:	f10c 0203 	add.w	r2, ip, #3
 80146e0:	1b52      	subs	r2, r2, r5
 80146e2:	f022 0203 	bic.w	r2, r2, #3
 80146e6:	3d03      	subs	r5, #3
 80146e8:	45ac      	cmp	ip, r5
 80146ea:	bf38      	it	cc
 80146ec:	2200      	movcc	r2, #0
 80146ee:	4413      	add	r3, r2
 80146f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80146f4:	b17a      	cbz	r2, 8014716 <__mdiff+0x106>
 80146f6:	6107      	str	r7, [r0, #16]
 80146f8:	e7a4      	b.n	8014644 <__mdiff+0x34>
 80146fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80146fe:	fa11 f288 	uxtah	r2, r1, r8
 8014702:	1414      	asrs	r4, r2, #16
 8014704:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014708:	b292      	uxth	r2, r2
 801470a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801470e:	f84e 2b04 	str.w	r2, [lr], #4
 8014712:	1421      	asrs	r1, r4, #16
 8014714:	e7e0      	b.n	80146d8 <__mdiff+0xc8>
 8014716:	3f01      	subs	r7, #1
 8014718:	e7ea      	b.n	80146f0 <__mdiff+0xe0>
 801471a:	bf00      	nop
 801471c:	08016cf1 	.word	0x08016cf1
 8014720:	08016d02 	.word	0x08016d02

08014724 <__ulp>:
 8014724:	b082      	sub	sp, #8
 8014726:	ed8d 0b00 	vstr	d0, [sp]
 801472a:	9a01      	ldr	r2, [sp, #4]
 801472c:	4b0f      	ldr	r3, [pc, #60]	; (801476c <__ulp+0x48>)
 801472e:	4013      	ands	r3, r2
 8014730:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014734:	2b00      	cmp	r3, #0
 8014736:	dc08      	bgt.n	801474a <__ulp+0x26>
 8014738:	425b      	negs	r3, r3
 801473a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801473e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014742:	da04      	bge.n	801474e <__ulp+0x2a>
 8014744:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014748:	4113      	asrs	r3, r2
 801474a:	2200      	movs	r2, #0
 801474c:	e008      	b.n	8014760 <__ulp+0x3c>
 801474e:	f1a2 0314 	sub.w	r3, r2, #20
 8014752:	2b1e      	cmp	r3, #30
 8014754:	bfda      	itte	le
 8014756:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801475a:	40da      	lsrle	r2, r3
 801475c:	2201      	movgt	r2, #1
 801475e:	2300      	movs	r3, #0
 8014760:	4619      	mov	r1, r3
 8014762:	4610      	mov	r0, r2
 8014764:	ec41 0b10 	vmov	d0, r0, r1
 8014768:	b002      	add	sp, #8
 801476a:	4770      	bx	lr
 801476c:	7ff00000 	.word	0x7ff00000

08014770 <__b2d>:
 8014770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014774:	6906      	ldr	r6, [r0, #16]
 8014776:	f100 0814 	add.w	r8, r0, #20
 801477a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801477e:	1f37      	subs	r7, r6, #4
 8014780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014784:	4610      	mov	r0, r2
 8014786:	f7ff fd53 	bl	8014230 <__hi0bits>
 801478a:	f1c0 0320 	rsb	r3, r0, #32
 801478e:	280a      	cmp	r0, #10
 8014790:	600b      	str	r3, [r1, #0]
 8014792:	491b      	ldr	r1, [pc, #108]	; (8014800 <__b2d+0x90>)
 8014794:	dc15      	bgt.n	80147c2 <__b2d+0x52>
 8014796:	f1c0 0c0b 	rsb	ip, r0, #11
 801479a:	fa22 f30c 	lsr.w	r3, r2, ip
 801479e:	45b8      	cmp	r8, r7
 80147a0:	ea43 0501 	orr.w	r5, r3, r1
 80147a4:	bf34      	ite	cc
 80147a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80147aa:	2300      	movcs	r3, #0
 80147ac:	3015      	adds	r0, #21
 80147ae:	fa02 f000 	lsl.w	r0, r2, r0
 80147b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80147b6:	4303      	orrs	r3, r0
 80147b8:	461c      	mov	r4, r3
 80147ba:	ec45 4b10 	vmov	d0, r4, r5
 80147be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c2:	45b8      	cmp	r8, r7
 80147c4:	bf3a      	itte	cc
 80147c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80147ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80147ce:	2300      	movcs	r3, #0
 80147d0:	380b      	subs	r0, #11
 80147d2:	d012      	beq.n	80147fa <__b2d+0x8a>
 80147d4:	f1c0 0120 	rsb	r1, r0, #32
 80147d8:	fa23 f401 	lsr.w	r4, r3, r1
 80147dc:	4082      	lsls	r2, r0
 80147de:	4322      	orrs	r2, r4
 80147e0:	4547      	cmp	r7, r8
 80147e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80147e6:	bf8c      	ite	hi
 80147e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80147ec:	2200      	movls	r2, #0
 80147ee:	4083      	lsls	r3, r0
 80147f0:	40ca      	lsrs	r2, r1
 80147f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80147f6:	4313      	orrs	r3, r2
 80147f8:	e7de      	b.n	80147b8 <__b2d+0x48>
 80147fa:	ea42 0501 	orr.w	r5, r2, r1
 80147fe:	e7db      	b.n	80147b8 <__b2d+0x48>
 8014800:	3ff00000 	.word	0x3ff00000

08014804 <__d2b>:
 8014804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014808:	460f      	mov	r7, r1
 801480a:	2101      	movs	r1, #1
 801480c:	ec59 8b10 	vmov	r8, r9, d0
 8014810:	4616      	mov	r6, r2
 8014812:	f7ff fc1b 	bl	801404c <_Balloc>
 8014816:	4604      	mov	r4, r0
 8014818:	b930      	cbnz	r0, 8014828 <__d2b+0x24>
 801481a:	4602      	mov	r2, r0
 801481c:	4b24      	ldr	r3, [pc, #144]	; (80148b0 <__d2b+0xac>)
 801481e:	4825      	ldr	r0, [pc, #148]	; (80148b4 <__d2b+0xb0>)
 8014820:	f240 310f 	movw	r1, #783	; 0x30f
 8014824:	f001 f990 	bl	8015b48 <__assert_func>
 8014828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801482c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014830:	bb2d      	cbnz	r5, 801487e <__d2b+0x7a>
 8014832:	9301      	str	r3, [sp, #4]
 8014834:	f1b8 0300 	subs.w	r3, r8, #0
 8014838:	d026      	beq.n	8014888 <__d2b+0x84>
 801483a:	4668      	mov	r0, sp
 801483c:	9300      	str	r3, [sp, #0]
 801483e:	f7ff fd17 	bl	8014270 <__lo0bits>
 8014842:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014846:	b1e8      	cbz	r0, 8014884 <__d2b+0x80>
 8014848:	f1c0 0320 	rsb	r3, r0, #32
 801484c:	fa02 f303 	lsl.w	r3, r2, r3
 8014850:	430b      	orrs	r3, r1
 8014852:	40c2      	lsrs	r2, r0
 8014854:	6163      	str	r3, [r4, #20]
 8014856:	9201      	str	r2, [sp, #4]
 8014858:	9b01      	ldr	r3, [sp, #4]
 801485a:	61a3      	str	r3, [r4, #24]
 801485c:	2b00      	cmp	r3, #0
 801485e:	bf14      	ite	ne
 8014860:	2202      	movne	r2, #2
 8014862:	2201      	moveq	r2, #1
 8014864:	6122      	str	r2, [r4, #16]
 8014866:	b1bd      	cbz	r5, 8014898 <__d2b+0x94>
 8014868:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801486c:	4405      	add	r5, r0
 801486e:	603d      	str	r5, [r7, #0]
 8014870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014874:	6030      	str	r0, [r6, #0]
 8014876:	4620      	mov	r0, r4
 8014878:	b003      	add	sp, #12
 801487a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014882:	e7d6      	b.n	8014832 <__d2b+0x2e>
 8014884:	6161      	str	r1, [r4, #20]
 8014886:	e7e7      	b.n	8014858 <__d2b+0x54>
 8014888:	a801      	add	r0, sp, #4
 801488a:	f7ff fcf1 	bl	8014270 <__lo0bits>
 801488e:	9b01      	ldr	r3, [sp, #4]
 8014890:	6163      	str	r3, [r4, #20]
 8014892:	3020      	adds	r0, #32
 8014894:	2201      	movs	r2, #1
 8014896:	e7e5      	b.n	8014864 <__d2b+0x60>
 8014898:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801489c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80148a0:	6038      	str	r0, [r7, #0]
 80148a2:	6918      	ldr	r0, [r3, #16]
 80148a4:	f7ff fcc4 	bl	8014230 <__hi0bits>
 80148a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80148ac:	e7e2      	b.n	8014874 <__d2b+0x70>
 80148ae:	bf00      	nop
 80148b0:	08016cf1 	.word	0x08016cf1
 80148b4:	08016d02 	.word	0x08016d02

080148b8 <__ratio>:
 80148b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148bc:	4688      	mov	r8, r1
 80148be:	4669      	mov	r1, sp
 80148c0:	4681      	mov	r9, r0
 80148c2:	f7ff ff55 	bl	8014770 <__b2d>
 80148c6:	a901      	add	r1, sp, #4
 80148c8:	4640      	mov	r0, r8
 80148ca:	ec55 4b10 	vmov	r4, r5, d0
 80148ce:	f7ff ff4f 	bl	8014770 <__b2d>
 80148d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80148d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80148da:	eba3 0c02 	sub.w	ip, r3, r2
 80148de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80148e2:	1a9b      	subs	r3, r3, r2
 80148e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80148e8:	ec51 0b10 	vmov	r0, r1, d0
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	bfd6      	itet	le
 80148f0:	460a      	movle	r2, r1
 80148f2:	462a      	movgt	r2, r5
 80148f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80148f8:	468b      	mov	fp, r1
 80148fa:	462f      	mov	r7, r5
 80148fc:	bfd4      	ite	le
 80148fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014902:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014906:	4620      	mov	r0, r4
 8014908:	ee10 2a10 	vmov	r2, s0
 801490c:	465b      	mov	r3, fp
 801490e:	4639      	mov	r1, r7
 8014910:	f7eb ff9c 	bl	800084c <__aeabi_ddiv>
 8014914:	ec41 0b10 	vmov	d0, r0, r1
 8014918:	b003      	add	sp, #12
 801491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801491e <__copybits>:
 801491e:	3901      	subs	r1, #1
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	1149      	asrs	r1, r1, #5
 8014924:	6914      	ldr	r4, [r2, #16]
 8014926:	3101      	adds	r1, #1
 8014928:	f102 0314 	add.w	r3, r2, #20
 801492c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014930:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014934:	1f05      	subs	r5, r0, #4
 8014936:	42a3      	cmp	r3, r4
 8014938:	d30c      	bcc.n	8014954 <__copybits+0x36>
 801493a:	1aa3      	subs	r3, r4, r2
 801493c:	3b11      	subs	r3, #17
 801493e:	f023 0303 	bic.w	r3, r3, #3
 8014942:	3211      	adds	r2, #17
 8014944:	42a2      	cmp	r2, r4
 8014946:	bf88      	it	hi
 8014948:	2300      	movhi	r3, #0
 801494a:	4418      	add	r0, r3
 801494c:	2300      	movs	r3, #0
 801494e:	4288      	cmp	r0, r1
 8014950:	d305      	bcc.n	801495e <__copybits+0x40>
 8014952:	bd70      	pop	{r4, r5, r6, pc}
 8014954:	f853 6b04 	ldr.w	r6, [r3], #4
 8014958:	f845 6f04 	str.w	r6, [r5, #4]!
 801495c:	e7eb      	b.n	8014936 <__copybits+0x18>
 801495e:	f840 3b04 	str.w	r3, [r0], #4
 8014962:	e7f4      	b.n	801494e <__copybits+0x30>

08014964 <__any_on>:
 8014964:	f100 0214 	add.w	r2, r0, #20
 8014968:	6900      	ldr	r0, [r0, #16]
 801496a:	114b      	asrs	r3, r1, #5
 801496c:	4298      	cmp	r0, r3
 801496e:	b510      	push	{r4, lr}
 8014970:	db11      	blt.n	8014996 <__any_on+0x32>
 8014972:	dd0a      	ble.n	801498a <__any_on+0x26>
 8014974:	f011 011f 	ands.w	r1, r1, #31
 8014978:	d007      	beq.n	801498a <__any_on+0x26>
 801497a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801497e:	fa24 f001 	lsr.w	r0, r4, r1
 8014982:	fa00 f101 	lsl.w	r1, r0, r1
 8014986:	428c      	cmp	r4, r1
 8014988:	d10b      	bne.n	80149a2 <__any_on+0x3e>
 801498a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801498e:	4293      	cmp	r3, r2
 8014990:	d803      	bhi.n	801499a <__any_on+0x36>
 8014992:	2000      	movs	r0, #0
 8014994:	bd10      	pop	{r4, pc}
 8014996:	4603      	mov	r3, r0
 8014998:	e7f7      	b.n	801498a <__any_on+0x26>
 801499a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801499e:	2900      	cmp	r1, #0
 80149a0:	d0f5      	beq.n	801498e <__any_on+0x2a>
 80149a2:	2001      	movs	r0, #1
 80149a4:	e7f6      	b.n	8014994 <__any_on+0x30>

080149a6 <sulp>:
 80149a6:	b570      	push	{r4, r5, r6, lr}
 80149a8:	4604      	mov	r4, r0
 80149aa:	460d      	mov	r5, r1
 80149ac:	ec45 4b10 	vmov	d0, r4, r5
 80149b0:	4616      	mov	r6, r2
 80149b2:	f7ff feb7 	bl	8014724 <__ulp>
 80149b6:	ec51 0b10 	vmov	r0, r1, d0
 80149ba:	b17e      	cbz	r6, 80149dc <sulp+0x36>
 80149bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80149c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	dd09      	ble.n	80149dc <sulp+0x36>
 80149c8:	051b      	lsls	r3, r3, #20
 80149ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80149ce:	2400      	movs	r4, #0
 80149d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80149d4:	4622      	mov	r2, r4
 80149d6:	462b      	mov	r3, r5
 80149d8:	f7eb fe0e 	bl	80005f8 <__aeabi_dmul>
 80149dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080149e0 <_strtod_l>:
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	ed2d 8b02 	vpush	{d8}
 80149e8:	b09b      	sub	sp, #108	; 0x6c
 80149ea:	4604      	mov	r4, r0
 80149ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80149ee:	2200      	movs	r2, #0
 80149f0:	9216      	str	r2, [sp, #88]	; 0x58
 80149f2:	460d      	mov	r5, r1
 80149f4:	f04f 0800 	mov.w	r8, #0
 80149f8:	f04f 0900 	mov.w	r9, #0
 80149fc:	460a      	mov	r2, r1
 80149fe:	9215      	str	r2, [sp, #84]	; 0x54
 8014a00:	7811      	ldrb	r1, [r2, #0]
 8014a02:	292b      	cmp	r1, #43	; 0x2b
 8014a04:	d04c      	beq.n	8014aa0 <_strtod_l+0xc0>
 8014a06:	d83a      	bhi.n	8014a7e <_strtod_l+0x9e>
 8014a08:	290d      	cmp	r1, #13
 8014a0a:	d834      	bhi.n	8014a76 <_strtod_l+0x96>
 8014a0c:	2908      	cmp	r1, #8
 8014a0e:	d834      	bhi.n	8014a7a <_strtod_l+0x9a>
 8014a10:	2900      	cmp	r1, #0
 8014a12:	d03d      	beq.n	8014a90 <_strtod_l+0xb0>
 8014a14:	2200      	movs	r2, #0
 8014a16:	920a      	str	r2, [sp, #40]	; 0x28
 8014a18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014a1a:	7832      	ldrb	r2, [r6, #0]
 8014a1c:	2a30      	cmp	r2, #48	; 0x30
 8014a1e:	f040 80b4 	bne.w	8014b8a <_strtod_l+0x1aa>
 8014a22:	7872      	ldrb	r2, [r6, #1]
 8014a24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014a28:	2a58      	cmp	r2, #88	; 0x58
 8014a2a:	d170      	bne.n	8014b0e <_strtod_l+0x12e>
 8014a2c:	9302      	str	r3, [sp, #8]
 8014a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a30:	9301      	str	r3, [sp, #4]
 8014a32:	ab16      	add	r3, sp, #88	; 0x58
 8014a34:	9300      	str	r3, [sp, #0]
 8014a36:	4a8e      	ldr	r2, [pc, #568]	; (8014c70 <_strtod_l+0x290>)
 8014a38:	ab17      	add	r3, sp, #92	; 0x5c
 8014a3a:	a915      	add	r1, sp, #84	; 0x54
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	f001 f91f 	bl	8015c80 <__gethex>
 8014a42:	f010 070f 	ands.w	r7, r0, #15
 8014a46:	4605      	mov	r5, r0
 8014a48:	d005      	beq.n	8014a56 <_strtod_l+0x76>
 8014a4a:	2f06      	cmp	r7, #6
 8014a4c:	d12a      	bne.n	8014aa4 <_strtod_l+0xc4>
 8014a4e:	3601      	adds	r6, #1
 8014a50:	2300      	movs	r3, #0
 8014a52:	9615      	str	r6, [sp, #84]	; 0x54
 8014a54:	930a      	str	r3, [sp, #40]	; 0x28
 8014a56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f040 857f 	bne.w	801555c <_strtod_l+0xb7c>
 8014a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a60:	b1db      	cbz	r3, 8014a9a <_strtod_l+0xba>
 8014a62:	4642      	mov	r2, r8
 8014a64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014a68:	ec43 2b10 	vmov	d0, r2, r3
 8014a6c:	b01b      	add	sp, #108	; 0x6c
 8014a6e:	ecbd 8b02 	vpop	{d8}
 8014a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a76:	2920      	cmp	r1, #32
 8014a78:	d1cc      	bne.n	8014a14 <_strtod_l+0x34>
 8014a7a:	3201      	adds	r2, #1
 8014a7c:	e7bf      	b.n	80149fe <_strtod_l+0x1e>
 8014a7e:	292d      	cmp	r1, #45	; 0x2d
 8014a80:	d1c8      	bne.n	8014a14 <_strtod_l+0x34>
 8014a82:	2101      	movs	r1, #1
 8014a84:	910a      	str	r1, [sp, #40]	; 0x28
 8014a86:	1c51      	adds	r1, r2, #1
 8014a88:	9115      	str	r1, [sp, #84]	; 0x54
 8014a8a:	7852      	ldrb	r2, [r2, #1]
 8014a8c:	2a00      	cmp	r2, #0
 8014a8e:	d1c3      	bne.n	8014a18 <_strtod_l+0x38>
 8014a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a92:	9515      	str	r5, [sp, #84]	; 0x54
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f040 855f 	bne.w	8015558 <_strtod_l+0xb78>
 8014a9a:	4642      	mov	r2, r8
 8014a9c:	464b      	mov	r3, r9
 8014a9e:	e7e3      	b.n	8014a68 <_strtod_l+0x88>
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	e7ef      	b.n	8014a84 <_strtod_l+0xa4>
 8014aa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014aa6:	b13a      	cbz	r2, 8014ab8 <_strtod_l+0xd8>
 8014aa8:	2135      	movs	r1, #53	; 0x35
 8014aaa:	a818      	add	r0, sp, #96	; 0x60
 8014aac:	f7ff ff37 	bl	801491e <__copybits>
 8014ab0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	f7ff fb0a 	bl	80140cc <_Bfree>
 8014ab8:	3f01      	subs	r7, #1
 8014aba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014abc:	2f04      	cmp	r7, #4
 8014abe:	d806      	bhi.n	8014ace <_strtod_l+0xee>
 8014ac0:	e8df f007 	tbb	[pc, r7]
 8014ac4:	201d0314 	.word	0x201d0314
 8014ac8:	14          	.byte	0x14
 8014ac9:	00          	.byte	0x00
 8014aca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014ace:	05e9      	lsls	r1, r5, #23
 8014ad0:	bf48      	it	mi
 8014ad2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ada:	0d1b      	lsrs	r3, r3, #20
 8014adc:	051b      	lsls	r3, r3, #20
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1b9      	bne.n	8014a56 <_strtod_l+0x76>
 8014ae2:	f7fe fbab 	bl	801323c <__errno>
 8014ae6:	2322      	movs	r3, #34	; 0x22
 8014ae8:	6003      	str	r3, [r0, #0]
 8014aea:	e7b4      	b.n	8014a56 <_strtod_l+0x76>
 8014aec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014af0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014af4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014af8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014afc:	e7e7      	b.n	8014ace <_strtod_l+0xee>
 8014afe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014c78 <_strtod_l+0x298>
 8014b02:	e7e4      	b.n	8014ace <_strtod_l+0xee>
 8014b04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014b08:	f04f 38ff 	mov.w	r8, #4294967295
 8014b0c:	e7df      	b.n	8014ace <_strtod_l+0xee>
 8014b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b10:	1c5a      	adds	r2, r3, #1
 8014b12:	9215      	str	r2, [sp, #84]	; 0x54
 8014b14:	785b      	ldrb	r3, [r3, #1]
 8014b16:	2b30      	cmp	r3, #48	; 0x30
 8014b18:	d0f9      	beq.n	8014b0e <_strtod_l+0x12e>
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d09b      	beq.n	8014a56 <_strtod_l+0x76>
 8014b1e:	2301      	movs	r3, #1
 8014b20:	f04f 0a00 	mov.w	sl, #0
 8014b24:	9304      	str	r3, [sp, #16]
 8014b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b2e:	46d3      	mov	fp, sl
 8014b30:	220a      	movs	r2, #10
 8014b32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014b34:	7806      	ldrb	r6, [r0, #0]
 8014b36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014b3a:	b2d9      	uxtb	r1, r3
 8014b3c:	2909      	cmp	r1, #9
 8014b3e:	d926      	bls.n	8014b8e <_strtod_l+0x1ae>
 8014b40:	494c      	ldr	r1, [pc, #304]	; (8014c74 <_strtod_l+0x294>)
 8014b42:	2201      	movs	r2, #1
 8014b44:	f000 ffe6 	bl	8015b14 <strncmp>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	d030      	beq.n	8014bae <_strtod_l+0x1ce>
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	4632      	mov	r2, r6
 8014b50:	9005      	str	r0, [sp, #20]
 8014b52:	465e      	mov	r6, fp
 8014b54:	4603      	mov	r3, r0
 8014b56:	2a65      	cmp	r2, #101	; 0x65
 8014b58:	d001      	beq.n	8014b5e <_strtod_l+0x17e>
 8014b5a:	2a45      	cmp	r2, #69	; 0x45
 8014b5c:	d113      	bne.n	8014b86 <_strtod_l+0x1a6>
 8014b5e:	b91e      	cbnz	r6, 8014b68 <_strtod_l+0x188>
 8014b60:	9a04      	ldr	r2, [sp, #16]
 8014b62:	4302      	orrs	r2, r0
 8014b64:	d094      	beq.n	8014a90 <_strtod_l+0xb0>
 8014b66:	2600      	movs	r6, #0
 8014b68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014b6a:	1c6a      	adds	r2, r5, #1
 8014b6c:	9215      	str	r2, [sp, #84]	; 0x54
 8014b6e:	786a      	ldrb	r2, [r5, #1]
 8014b70:	2a2b      	cmp	r2, #43	; 0x2b
 8014b72:	d074      	beq.n	8014c5e <_strtod_l+0x27e>
 8014b74:	2a2d      	cmp	r2, #45	; 0x2d
 8014b76:	d078      	beq.n	8014c6a <_strtod_l+0x28a>
 8014b78:	f04f 0c00 	mov.w	ip, #0
 8014b7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014b80:	2909      	cmp	r1, #9
 8014b82:	d97f      	bls.n	8014c84 <_strtod_l+0x2a4>
 8014b84:	9515      	str	r5, [sp, #84]	; 0x54
 8014b86:	2700      	movs	r7, #0
 8014b88:	e09e      	b.n	8014cc8 <_strtod_l+0x2e8>
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	e7c8      	b.n	8014b20 <_strtod_l+0x140>
 8014b8e:	f1bb 0f08 	cmp.w	fp, #8
 8014b92:	bfd8      	it	le
 8014b94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014b96:	f100 0001 	add.w	r0, r0, #1
 8014b9a:	bfda      	itte	le
 8014b9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014ba0:	9309      	strle	r3, [sp, #36]	; 0x24
 8014ba2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014ba6:	f10b 0b01 	add.w	fp, fp, #1
 8014baa:	9015      	str	r0, [sp, #84]	; 0x54
 8014bac:	e7c1      	b.n	8014b32 <_strtod_l+0x152>
 8014bae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bb0:	1c5a      	adds	r2, r3, #1
 8014bb2:	9215      	str	r2, [sp, #84]	; 0x54
 8014bb4:	785a      	ldrb	r2, [r3, #1]
 8014bb6:	f1bb 0f00 	cmp.w	fp, #0
 8014bba:	d037      	beq.n	8014c2c <_strtod_l+0x24c>
 8014bbc:	9005      	str	r0, [sp, #20]
 8014bbe:	465e      	mov	r6, fp
 8014bc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014bc4:	2b09      	cmp	r3, #9
 8014bc6:	d912      	bls.n	8014bee <_strtod_l+0x20e>
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e7c4      	b.n	8014b56 <_strtod_l+0x176>
 8014bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bce:	1c5a      	adds	r2, r3, #1
 8014bd0:	9215      	str	r2, [sp, #84]	; 0x54
 8014bd2:	785a      	ldrb	r2, [r3, #1]
 8014bd4:	3001      	adds	r0, #1
 8014bd6:	2a30      	cmp	r2, #48	; 0x30
 8014bd8:	d0f8      	beq.n	8014bcc <_strtod_l+0x1ec>
 8014bda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014bde:	2b08      	cmp	r3, #8
 8014be0:	f200 84c1 	bhi.w	8015566 <_strtod_l+0xb86>
 8014be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014be6:	9005      	str	r0, [sp, #20]
 8014be8:	2000      	movs	r0, #0
 8014bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bec:	4606      	mov	r6, r0
 8014bee:	3a30      	subs	r2, #48	; 0x30
 8014bf0:	f100 0301 	add.w	r3, r0, #1
 8014bf4:	d014      	beq.n	8014c20 <_strtod_l+0x240>
 8014bf6:	9905      	ldr	r1, [sp, #20]
 8014bf8:	4419      	add	r1, r3
 8014bfa:	9105      	str	r1, [sp, #20]
 8014bfc:	4633      	mov	r3, r6
 8014bfe:	eb00 0c06 	add.w	ip, r0, r6
 8014c02:	210a      	movs	r1, #10
 8014c04:	4563      	cmp	r3, ip
 8014c06:	d113      	bne.n	8014c30 <_strtod_l+0x250>
 8014c08:	1833      	adds	r3, r6, r0
 8014c0a:	2b08      	cmp	r3, #8
 8014c0c:	f106 0601 	add.w	r6, r6, #1
 8014c10:	4406      	add	r6, r0
 8014c12:	dc1a      	bgt.n	8014c4a <_strtod_l+0x26a>
 8014c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c16:	230a      	movs	r3, #10
 8014c18:	fb03 2301 	mla	r3, r3, r1, r2
 8014c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c1e:	2300      	movs	r3, #0
 8014c20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c22:	1c51      	adds	r1, r2, #1
 8014c24:	9115      	str	r1, [sp, #84]	; 0x54
 8014c26:	7852      	ldrb	r2, [r2, #1]
 8014c28:	4618      	mov	r0, r3
 8014c2a:	e7c9      	b.n	8014bc0 <_strtod_l+0x1e0>
 8014c2c:	4658      	mov	r0, fp
 8014c2e:	e7d2      	b.n	8014bd6 <_strtod_l+0x1f6>
 8014c30:	2b08      	cmp	r3, #8
 8014c32:	f103 0301 	add.w	r3, r3, #1
 8014c36:	dc03      	bgt.n	8014c40 <_strtod_l+0x260>
 8014c38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014c3a:	434f      	muls	r7, r1
 8014c3c:	9709      	str	r7, [sp, #36]	; 0x24
 8014c3e:	e7e1      	b.n	8014c04 <_strtod_l+0x224>
 8014c40:	2b10      	cmp	r3, #16
 8014c42:	bfd8      	it	le
 8014c44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014c48:	e7dc      	b.n	8014c04 <_strtod_l+0x224>
 8014c4a:	2e10      	cmp	r6, #16
 8014c4c:	bfdc      	itt	le
 8014c4e:	230a      	movle	r3, #10
 8014c50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014c54:	e7e3      	b.n	8014c1e <_strtod_l+0x23e>
 8014c56:	2300      	movs	r3, #0
 8014c58:	9305      	str	r3, [sp, #20]
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	e780      	b.n	8014b60 <_strtod_l+0x180>
 8014c5e:	f04f 0c00 	mov.w	ip, #0
 8014c62:	1caa      	adds	r2, r5, #2
 8014c64:	9215      	str	r2, [sp, #84]	; 0x54
 8014c66:	78aa      	ldrb	r2, [r5, #2]
 8014c68:	e788      	b.n	8014b7c <_strtod_l+0x19c>
 8014c6a:	f04f 0c01 	mov.w	ip, #1
 8014c6e:	e7f8      	b.n	8014c62 <_strtod_l+0x282>
 8014c70:	08016e60 	.word	0x08016e60
 8014c74:	08016e5c 	.word	0x08016e5c
 8014c78:	7ff00000 	.word	0x7ff00000
 8014c7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c7e:	1c51      	adds	r1, r2, #1
 8014c80:	9115      	str	r1, [sp, #84]	; 0x54
 8014c82:	7852      	ldrb	r2, [r2, #1]
 8014c84:	2a30      	cmp	r2, #48	; 0x30
 8014c86:	d0f9      	beq.n	8014c7c <_strtod_l+0x29c>
 8014c88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014c8c:	2908      	cmp	r1, #8
 8014c8e:	f63f af7a 	bhi.w	8014b86 <_strtod_l+0x1a6>
 8014c92:	3a30      	subs	r2, #48	; 0x30
 8014c94:	9208      	str	r2, [sp, #32]
 8014c96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c98:	920c      	str	r2, [sp, #48]	; 0x30
 8014c9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c9c:	1c57      	adds	r7, r2, #1
 8014c9e:	9715      	str	r7, [sp, #84]	; 0x54
 8014ca0:	7852      	ldrb	r2, [r2, #1]
 8014ca2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014ca6:	f1be 0f09 	cmp.w	lr, #9
 8014caa:	d938      	bls.n	8014d1e <_strtod_l+0x33e>
 8014cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cae:	1a7f      	subs	r7, r7, r1
 8014cb0:	2f08      	cmp	r7, #8
 8014cb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014cb6:	dc03      	bgt.n	8014cc0 <_strtod_l+0x2e0>
 8014cb8:	9908      	ldr	r1, [sp, #32]
 8014cba:	428f      	cmp	r7, r1
 8014cbc:	bfa8      	it	ge
 8014cbe:	460f      	movge	r7, r1
 8014cc0:	f1bc 0f00 	cmp.w	ip, #0
 8014cc4:	d000      	beq.n	8014cc8 <_strtod_l+0x2e8>
 8014cc6:	427f      	negs	r7, r7
 8014cc8:	2e00      	cmp	r6, #0
 8014cca:	d14f      	bne.n	8014d6c <_strtod_l+0x38c>
 8014ccc:	9904      	ldr	r1, [sp, #16]
 8014cce:	4301      	orrs	r1, r0
 8014cd0:	f47f aec1 	bne.w	8014a56 <_strtod_l+0x76>
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	f47f aedb 	bne.w	8014a90 <_strtod_l+0xb0>
 8014cda:	2a69      	cmp	r2, #105	; 0x69
 8014cdc:	d029      	beq.n	8014d32 <_strtod_l+0x352>
 8014cde:	dc26      	bgt.n	8014d2e <_strtod_l+0x34e>
 8014ce0:	2a49      	cmp	r2, #73	; 0x49
 8014ce2:	d026      	beq.n	8014d32 <_strtod_l+0x352>
 8014ce4:	2a4e      	cmp	r2, #78	; 0x4e
 8014ce6:	f47f aed3 	bne.w	8014a90 <_strtod_l+0xb0>
 8014cea:	499b      	ldr	r1, [pc, #620]	; (8014f58 <_strtod_l+0x578>)
 8014cec:	a815      	add	r0, sp, #84	; 0x54
 8014cee:	f001 fa07 	bl	8016100 <__match>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	f43f aecc 	beq.w	8014a90 <_strtod_l+0xb0>
 8014cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	2b28      	cmp	r3, #40	; 0x28
 8014cfe:	d12f      	bne.n	8014d60 <_strtod_l+0x380>
 8014d00:	4996      	ldr	r1, [pc, #600]	; (8014f5c <_strtod_l+0x57c>)
 8014d02:	aa18      	add	r2, sp, #96	; 0x60
 8014d04:	a815      	add	r0, sp, #84	; 0x54
 8014d06:	f001 fa0f 	bl	8016128 <__hexnan>
 8014d0a:	2805      	cmp	r0, #5
 8014d0c:	d128      	bne.n	8014d60 <_strtod_l+0x380>
 8014d0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014d14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014d18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014d1c:	e69b      	b.n	8014a56 <_strtod_l+0x76>
 8014d1e:	9f08      	ldr	r7, [sp, #32]
 8014d20:	210a      	movs	r1, #10
 8014d22:	fb01 2107 	mla	r1, r1, r7, r2
 8014d26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014d2a:	9208      	str	r2, [sp, #32]
 8014d2c:	e7b5      	b.n	8014c9a <_strtod_l+0x2ba>
 8014d2e:	2a6e      	cmp	r2, #110	; 0x6e
 8014d30:	e7d9      	b.n	8014ce6 <_strtod_l+0x306>
 8014d32:	498b      	ldr	r1, [pc, #556]	; (8014f60 <_strtod_l+0x580>)
 8014d34:	a815      	add	r0, sp, #84	; 0x54
 8014d36:	f001 f9e3 	bl	8016100 <__match>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	f43f aea8 	beq.w	8014a90 <_strtod_l+0xb0>
 8014d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d42:	4988      	ldr	r1, [pc, #544]	; (8014f64 <_strtod_l+0x584>)
 8014d44:	3b01      	subs	r3, #1
 8014d46:	a815      	add	r0, sp, #84	; 0x54
 8014d48:	9315      	str	r3, [sp, #84]	; 0x54
 8014d4a:	f001 f9d9 	bl	8016100 <__match>
 8014d4e:	b910      	cbnz	r0, 8014d56 <_strtod_l+0x376>
 8014d50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d52:	3301      	adds	r3, #1
 8014d54:	9315      	str	r3, [sp, #84]	; 0x54
 8014d56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014f74 <_strtod_l+0x594>
 8014d5a:	f04f 0800 	mov.w	r8, #0
 8014d5e:	e67a      	b.n	8014a56 <_strtod_l+0x76>
 8014d60:	4881      	ldr	r0, [pc, #516]	; (8014f68 <_strtod_l+0x588>)
 8014d62:	f000 fee9 	bl	8015b38 <nan>
 8014d66:	ec59 8b10 	vmov	r8, r9, d0
 8014d6a:	e674      	b.n	8014a56 <_strtod_l+0x76>
 8014d6c:	9b05      	ldr	r3, [sp, #20]
 8014d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d70:	1afb      	subs	r3, r7, r3
 8014d72:	f1bb 0f00 	cmp.w	fp, #0
 8014d76:	bf08      	it	eq
 8014d78:	46b3      	moveq	fp, r6
 8014d7a:	2e10      	cmp	r6, #16
 8014d7c:	9308      	str	r3, [sp, #32]
 8014d7e:	4635      	mov	r5, r6
 8014d80:	bfa8      	it	ge
 8014d82:	2510      	movge	r5, #16
 8014d84:	f7eb fbbe 	bl	8000504 <__aeabi_ui2d>
 8014d88:	2e09      	cmp	r6, #9
 8014d8a:	4680      	mov	r8, r0
 8014d8c:	4689      	mov	r9, r1
 8014d8e:	dd13      	ble.n	8014db8 <_strtod_l+0x3d8>
 8014d90:	4b76      	ldr	r3, [pc, #472]	; (8014f6c <_strtod_l+0x58c>)
 8014d92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014d96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014d9a:	f7eb fc2d 	bl	80005f8 <__aeabi_dmul>
 8014d9e:	4680      	mov	r8, r0
 8014da0:	4650      	mov	r0, sl
 8014da2:	4689      	mov	r9, r1
 8014da4:	f7eb fbae 	bl	8000504 <__aeabi_ui2d>
 8014da8:	4602      	mov	r2, r0
 8014daa:	460b      	mov	r3, r1
 8014dac:	4640      	mov	r0, r8
 8014dae:	4649      	mov	r1, r9
 8014db0:	f7eb fa6c 	bl	800028c <__adddf3>
 8014db4:	4680      	mov	r8, r0
 8014db6:	4689      	mov	r9, r1
 8014db8:	2e0f      	cmp	r6, #15
 8014dba:	dc38      	bgt.n	8014e2e <_strtod_l+0x44e>
 8014dbc:	9b08      	ldr	r3, [sp, #32]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	f43f ae49 	beq.w	8014a56 <_strtod_l+0x76>
 8014dc4:	dd24      	ble.n	8014e10 <_strtod_l+0x430>
 8014dc6:	2b16      	cmp	r3, #22
 8014dc8:	dc0b      	bgt.n	8014de2 <_strtod_l+0x402>
 8014dca:	4968      	ldr	r1, [pc, #416]	; (8014f6c <_strtod_l+0x58c>)
 8014dcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dd4:	4642      	mov	r2, r8
 8014dd6:	464b      	mov	r3, r9
 8014dd8:	f7eb fc0e 	bl	80005f8 <__aeabi_dmul>
 8014ddc:	4680      	mov	r8, r0
 8014dde:	4689      	mov	r9, r1
 8014de0:	e639      	b.n	8014a56 <_strtod_l+0x76>
 8014de2:	9a08      	ldr	r2, [sp, #32]
 8014de4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014de8:	4293      	cmp	r3, r2
 8014dea:	db20      	blt.n	8014e2e <_strtod_l+0x44e>
 8014dec:	4c5f      	ldr	r4, [pc, #380]	; (8014f6c <_strtod_l+0x58c>)
 8014dee:	f1c6 060f 	rsb	r6, r6, #15
 8014df2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014df6:	4642      	mov	r2, r8
 8014df8:	464b      	mov	r3, r9
 8014dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dfe:	f7eb fbfb 	bl	80005f8 <__aeabi_dmul>
 8014e02:	9b08      	ldr	r3, [sp, #32]
 8014e04:	1b9e      	subs	r6, r3, r6
 8014e06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014e0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e0e:	e7e3      	b.n	8014dd8 <_strtod_l+0x3f8>
 8014e10:	9b08      	ldr	r3, [sp, #32]
 8014e12:	3316      	adds	r3, #22
 8014e14:	db0b      	blt.n	8014e2e <_strtod_l+0x44e>
 8014e16:	9b05      	ldr	r3, [sp, #20]
 8014e18:	1bdf      	subs	r7, r3, r7
 8014e1a:	4b54      	ldr	r3, [pc, #336]	; (8014f6c <_strtod_l+0x58c>)
 8014e1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e24:	4640      	mov	r0, r8
 8014e26:	4649      	mov	r1, r9
 8014e28:	f7eb fd10 	bl	800084c <__aeabi_ddiv>
 8014e2c:	e7d6      	b.n	8014ddc <_strtod_l+0x3fc>
 8014e2e:	9b08      	ldr	r3, [sp, #32]
 8014e30:	1b75      	subs	r5, r6, r5
 8014e32:	441d      	add	r5, r3
 8014e34:	2d00      	cmp	r5, #0
 8014e36:	dd70      	ble.n	8014f1a <_strtod_l+0x53a>
 8014e38:	f015 030f 	ands.w	r3, r5, #15
 8014e3c:	d00a      	beq.n	8014e54 <_strtod_l+0x474>
 8014e3e:	494b      	ldr	r1, [pc, #300]	; (8014f6c <_strtod_l+0x58c>)
 8014e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e44:	4642      	mov	r2, r8
 8014e46:	464b      	mov	r3, r9
 8014e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e4c:	f7eb fbd4 	bl	80005f8 <__aeabi_dmul>
 8014e50:	4680      	mov	r8, r0
 8014e52:	4689      	mov	r9, r1
 8014e54:	f035 050f 	bics.w	r5, r5, #15
 8014e58:	d04d      	beq.n	8014ef6 <_strtod_l+0x516>
 8014e5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014e5e:	dd22      	ble.n	8014ea6 <_strtod_l+0x4c6>
 8014e60:	2500      	movs	r5, #0
 8014e62:	46ab      	mov	fp, r5
 8014e64:	9509      	str	r5, [sp, #36]	; 0x24
 8014e66:	9505      	str	r5, [sp, #20]
 8014e68:	2322      	movs	r3, #34	; 0x22
 8014e6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014f74 <_strtod_l+0x594>
 8014e6e:	6023      	str	r3, [r4, #0]
 8014e70:	f04f 0800 	mov.w	r8, #0
 8014e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f43f aded 	beq.w	8014a56 <_strtod_l+0x76>
 8014e7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f7ff f924 	bl	80140cc <_Bfree>
 8014e84:	9905      	ldr	r1, [sp, #20]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f7ff f920 	bl	80140cc <_Bfree>
 8014e8c:	4659      	mov	r1, fp
 8014e8e:	4620      	mov	r0, r4
 8014e90:	f7ff f91c 	bl	80140cc <_Bfree>
 8014e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e96:	4620      	mov	r0, r4
 8014e98:	f7ff f918 	bl	80140cc <_Bfree>
 8014e9c:	4629      	mov	r1, r5
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f7ff f914 	bl	80140cc <_Bfree>
 8014ea4:	e5d7      	b.n	8014a56 <_strtod_l+0x76>
 8014ea6:	4b32      	ldr	r3, [pc, #200]	; (8014f70 <_strtod_l+0x590>)
 8014ea8:	9304      	str	r3, [sp, #16]
 8014eaa:	2300      	movs	r3, #0
 8014eac:	112d      	asrs	r5, r5, #4
 8014eae:	4640      	mov	r0, r8
 8014eb0:	4649      	mov	r1, r9
 8014eb2:	469a      	mov	sl, r3
 8014eb4:	2d01      	cmp	r5, #1
 8014eb6:	dc21      	bgt.n	8014efc <_strtod_l+0x51c>
 8014eb8:	b10b      	cbz	r3, 8014ebe <_strtod_l+0x4de>
 8014eba:	4680      	mov	r8, r0
 8014ebc:	4689      	mov	r9, r1
 8014ebe:	492c      	ldr	r1, [pc, #176]	; (8014f70 <_strtod_l+0x590>)
 8014ec0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014ec4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014ec8:	4642      	mov	r2, r8
 8014eca:	464b      	mov	r3, r9
 8014ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ed0:	f7eb fb92 	bl	80005f8 <__aeabi_dmul>
 8014ed4:	4b27      	ldr	r3, [pc, #156]	; (8014f74 <_strtod_l+0x594>)
 8014ed6:	460a      	mov	r2, r1
 8014ed8:	400b      	ands	r3, r1
 8014eda:	4927      	ldr	r1, [pc, #156]	; (8014f78 <_strtod_l+0x598>)
 8014edc:	428b      	cmp	r3, r1
 8014ede:	4680      	mov	r8, r0
 8014ee0:	d8be      	bhi.n	8014e60 <_strtod_l+0x480>
 8014ee2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014ee6:	428b      	cmp	r3, r1
 8014ee8:	bf86      	itte	hi
 8014eea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014f7c <_strtod_l+0x59c>
 8014eee:	f04f 38ff 	movhi.w	r8, #4294967295
 8014ef2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	9304      	str	r3, [sp, #16]
 8014efa:	e07b      	b.n	8014ff4 <_strtod_l+0x614>
 8014efc:	07ea      	lsls	r2, r5, #31
 8014efe:	d505      	bpl.n	8014f0c <_strtod_l+0x52c>
 8014f00:	9b04      	ldr	r3, [sp, #16]
 8014f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f06:	f7eb fb77 	bl	80005f8 <__aeabi_dmul>
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	9a04      	ldr	r2, [sp, #16]
 8014f0e:	3208      	adds	r2, #8
 8014f10:	f10a 0a01 	add.w	sl, sl, #1
 8014f14:	106d      	asrs	r5, r5, #1
 8014f16:	9204      	str	r2, [sp, #16]
 8014f18:	e7cc      	b.n	8014eb4 <_strtod_l+0x4d4>
 8014f1a:	d0ec      	beq.n	8014ef6 <_strtod_l+0x516>
 8014f1c:	426d      	negs	r5, r5
 8014f1e:	f015 020f 	ands.w	r2, r5, #15
 8014f22:	d00a      	beq.n	8014f3a <_strtod_l+0x55a>
 8014f24:	4b11      	ldr	r3, [pc, #68]	; (8014f6c <_strtod_l+0x58c>)
 8014f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f2a:	4640      	mov	r0, r8
 8014f2c:	4649      	mov	r1, r9
 8014f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f32:	f7eb fc8b 	bl	800084c <__aeabi_ddiv>
 8014f36:	4680      	mov	r8, r0
 8014f38:	4689      	mov	r9, r1
 8014f3a:	112d      	asrs	r5, r5, #4
 8014f3c:	d0db      	beq.n	8014ef6 <_strtod_l+0x516>
 8014f3e:	2d1f      	cmp	r5, #31
 8014f40:	dd1e      	ble.n	8014f80 <_strtod_l+0x5a0>
 8014f42:	2500      	movs	r5, #0
 8014f44:	46ab      	mov	fp, r5
 8014f46:	9509      	str	r5, [sp, #36]	; 0x24
 8014f48:	9505      	str	r5, [sp, #20]
 8014f4a:	2322      	movs	r3, #34	; 0x22
 8014f4c:	f04f 0800 	mov.w	r8, #0
 8014f50:	f04f 0900 	mov.w	r9, #0
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	e78d      	b.n	8014e74 <_strtod_l+0x494>
 8014f58:	08016c49 	.word	0x08016c49
 8014f5c:	08016e74 	.word	0x08016e74
 8014f60:	08016c41 	.word	0x08016c41
 8014f64:	08016c78 	.word	0x08016c78
 8014f68:	08017005 	.word	0x08017005
 8014f6c:	08016d88 	.word	0x08016d88
 8014f70:	08016d60 	.word	0x08016d60
 8014f74:	7ff00000 	.word	0x7ff00000
 8014f78:	7ca00000 	.word	0x7ca00000
 8014f7c:	7fefffff 	.word	0x7fefffff
 8014f80:	f015 0310 	ands.w	r3, r5, #16
 8014f84:	bf18      	it	ne
 8014f86:	236a      	movne	r3, #106	; 0x6a
 8014f88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801532c <_strtod_l+0x94c>
 8014f8c:	9304      	str	r3, [sp, #16]
 8014f8e:	4640      	mov	r0, r8
 8014f90:	4649      	mov	r1, r9
 8014f92:	2300      	movs	r3, #0
 8014f94:	07ea      	lsls	r2, r5, #31
 8014f96:	d504      	bpl.n	8014fa2 <_strtod_l+0x5c2>
 8014f98:	e9da 2300 	ldrd	r2, r3, [sl]
 8014f9c:	f7eb fb2c 	bl	80005f8 <__aeabi_dmul>
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	106d      	asrs	r5, r5, #1
 8014fa4:	f10a 0a08 	add.w	sl, sl, #8
 8014fa8:	d1f4      	bne.n	8014f94 <_strtod_l+0x5b4>
 8014faa:	b10b      	cbz	r3, 8014fb0 <_strtod_l+0x5d0>
 8014fac:	4680      	mov	r8, r0
 8014fae:	4689      	mov	r9, r1
 8014fb0:	9b04      	ldr	r3, [sp, #16]
 8014fb2:	b1bb      	cbz	r3, 8014fe4 <_strtod_l+0x604>
 8014fb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014fb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	4649      	mov	r1, r9
 8014fc0:	dd10      	ble.n	8014fe4 <_strtod_l+0x604>
 8014fc2:	2b1f      	cmp	r3, #31
 8014fc4:	f340 811e 	ble.w	8015204 <_strtod_l+0x824>
 8014fc8:	2b34      	cmp	r3, #52	; 0x34
 8014fca:	bfde      	ittt	le
 8014fcc:	f04f 33ff 	movle.w	r3, #4294967295
 8014fd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014fd4:	4093      	lslle	r3, r2
 8014fd6:	f04f 0800 	mov.w	r8, #0
 8014fda:	bfcc      	ite	gt
 8014fdc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014fe0:	ea03 0901 	andle.w	r9, r3, r1
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	4640      	mov	r0, r8
 8014fea:	4649      	mov	r1, r9
 8014fec:	f7eb fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d1a6      	bne.n	8014f42 <_strtod_l+0x562>
 8014ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ff6:	9300      	str	r3, [sp, #0]
 8014ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ffa:	4633      	mov	r3, r6
 8014ffc:	465a      	mov	r2, fp
 8014ffe:	4620      	mov	r0, r4
 8015000:	f7ff f8cc 	bl	801419c <__s2b>
 8015004:	9009      	str	r0, [sp, #36]	; 0x24
 8015006:	2800      	cmp	r0, #0
 8015008:	f43f af2a 	beq.w	8014e60 <_strtod_l+0x480>
 801500c:	9a08      	ldr	r2, [sp, #32]
 801500e:	9b05      	ldr	r3, [sp, #20]
 8015010:	2a00      	cmp	r2, #0
 8015012:	eba3 0307 	sub.w	r3, r3, r7
 8015016:	bfa8      	it	ge
 8015018:	2300      	movge	r3, #0
 801501a:	930c      	str	r3, [sp, #48]	; 0x30
 801501c:	2500      	movs	r5, #0
 801501e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015022:	9312      	str	r3, [sp, #72]	; 0x48
 8015024:	46ab      	mov	fp, r5
 8015026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015028:	4620      	mov	r0, r4
 801502a:	6859      	ldr	r1, [r3, #4]
 801502c:	f7ff f80e 	bl	801404c <_Balloc>
 8015030:	9005      	str	r0, [sp, #20]
 8015032:	2800      	cmp	r0, #0
 8015034:	f43f af18 	beq.w	8014e68 <_strtod_l+0x488>
 8015038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801503a:	691a      	ldr	r2, [r3, #16]
 801503c:	3202      	adds	r2, #2
 801503e:	f103 010c 	add.w	r1, r3, #12
 8015042:	0092      	lsls	r2, r2, #2
 8015044:	300c      	adds	r0, #12
 8015046:	f7fe f925 	bl	8013294 <memcpy>
 801504a:	ec49 8b10 	vmov	d0, r8, r9
 801504e:	aa18      	add	r2, sp, #96	; 0x60
 8015050:	a917      	add	r1, sp, #92	; 0x5c
 8015052:	4620      	mov	r0, r4
 8015054:	f7ff fbd6 	bl	8014804 <__d2b>
 8015058:	ec49 8b18 	vmov	d8, r8, r9
 801505c:	9016      	str	r0, [sp, #88]	; 0x58
 801505e:	2800      	cmp	r0, #0
 8015060:	f43f af02 	beq.w	8014e68 <_strtod_l+0x488>
 8015064:	2101      	movs	r1, #1
 8015066:	4620      	mov	r0, r4
 8015068:	f7ff f930 	bl	80142cc <__i2b>
 801506c:	4683      	mov	fp, r0
 801506e:	2800      	cmp	r0, #0
 8015070:	f43f aefa 	beq.w	8014e68 <_strtod_l+0x488>
 8015074:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015076:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015078:	2e00      	cmp	r6, #0
 801507a:	bfab      	itete	ge
 801507c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801507e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015080:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015082:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015086:	bfac      	ite	ge
 8015088:	eb06 0a03 	addge.w	sl, r6, r3
 801508c:	1b9f      	sublt	r7, r3, r6
 801508e:	9b04      	ldr	r3, [sp, #16]
 8015090:	1af6      	subs	r6, r6, r3
 8015092:	4416      	add	r6, r2
 8015094:	4ba0      	ldr	r3, [pc, #640]	; (8015318 <_strtod_l+0x938>)
 8015096:	3e01      	subs	r6, #1
 8015098:	429e      	cmp	r6, r3
 801509a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801509e:	f280 80c4 	bge.w	801522a <_strtod_l+0x84a>
 80150a2:	1b9b      	subs	r3, r3, r6
 80150a4:	2b1f      	cmp	r3, #31
 80150a6:	eba2 0203 	sub.w	r2, r2, r3
 80150aa:	f04f 0101 	mov.w	r1, #1
 80150ae:	f300 80b0 	bgt.w	8015212 <_strtod_l+0x832>
 80150b2:	fa01 f303 	lsl.w	r3, r1, r3
 80150b6:	930e      	str	r3, [sp, #56]	; 0x38
 80150b8:	2300      	movs	r3, #0
 80150ba:	930d      	str	r3, [sp, #52]	; 0x34
 80150bc:	eb0a 0602 	add.w	r6, sl, r2
 80150c0:	9b04      	ldr	r3, [sp, #16]
 80150c2:	45b2      	cmp	sl, r6
 80150c4:	4417      	add	r7, r2
 80150c6:	441f      	add	r7, r3
 80150c8:	4653      	mov	r3, sl
 80150ca:	bfa8      	it	ge
 80150cc:	4633      	movge	r3, r6
 80150ce:	42bb      	cmp	r3, r7
 80150d0:	bfa8      	it	ge
 80150d2:	463b      	movge	r3, r7
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	bfc2      	ittt	gt
 80150d8:	1af6      	subgt	r6, r6, r3
 80150da:	1aff      	subgt	r7, r7, r3
 80150dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80150e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	dd17      	ble.n	8015116 <_strtod_l+0x736>
 80150e6:	4659      	mov	r1, fp
 80150e8:	461a      	mov	r2, r3
 80150ea:	4620      	mov	r0, r4
 80150ec:	f7ff f9ae 	bl	801444c <__pow5mult>
 80150f0:	4683      	mov	fp, r0
 80150f2:	2800      	cmp	r0, #0
 80150f4:	f43f aeb8 	beq.w	8014e68 <_strtod_l+0x488>
 80150f8:	4601      	mov	r1, r0
 80150fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80150fc:	4620      	mov	r0, r4
 80150fe:	f7ff f8fb 	bl	80142f8 <__multiply>
 8015102:	900b      	str	r0, [sp, #44]	; 0x2c
 8015104:	2800      	cmp	r0, #0
 8015106:	f43f aeaf 	beq.w	8014e68 <_strtod_l+0x488>
 801510a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801510c:	4620      	mov	r0, r4
 801510e:	f7fe ffdd 	bl	80140cc <_Bfree>
 8015112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015114:	9316      	str	r3, [sp, #88]	; 0x58
 8015116:	2e00      	cmp	r6, #0
 8015118:	f300 808c 	bgt.w	8015234 <_strtod_l+0x854>
 801511c:	9b08      	ldr	r3, [sp, #32]
 801511e:	2b00      	cmp	r3, #0
 8015120:	dd08      	ble.n	8015134 <_strtod_l+0x754>
 8015122:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015124:	9905      	ldr	r1, [sp, #20]
 8015126:	4620      	mov	r0, r4
 8015128:	f7ff f990 	bl	801444c <__pow5mult>
 801512c:	9005      	str	r0, [sp, #20]
 801512e:	2800      	cmp	r0, #0
 8015130:	f43f ae9a 	beq.w	8014e68 <_strtod_l+0x488>
 8015134:	2f00      	cmp	r7, #0
 8015136:	dd08      	ble.n	801514a <_strtod_l+0x76a>
 8015138:	9905      	ldr	r1, [sp, #20]
 801513a:	463a      	mov	r2, r7
 801513c:	4620      	mov	r0, r4
 801513e:	f7ff f9df 	bl	8014500 <__lshift>
 8015142:	9005      	str	r0, [sp, #20]
 8015144:	2800      	cmp	r0, #0
 8015146:	f43f ae8f 	beq.w	8014e68 <_strtod_l+0x488>
 801514a:	f1ba 0f00 	cmp.w	sl, #0
 801514e:	dd08      	ble.n	8015162 <_strtod_l+0x782>
 8015150:	4659      	mov	r1, fp
 8015152:	4652      	mov	r2, sl
 8015154:	4620      	mov	r0, r4
 8015156:	f7ff f9d3 	bl	8014500 <__lshift>
 801515a:	4683      	mov	fp, r0
 801515c:	2800      	cmp	r0, #0
 801515e:	f43f ae83 	beq.w	8014e68 <_strtod_l+0x488>
 8015162:	9a05      	ldr	r2, [sp, #20]
 8015164:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015166:	4620      	mov	r0, r4
 8015168:	f7ff fa52 	bl	8014610 <__mdiff>
 801516c:	4605      	mov	r5, r0
 801516e:	2800      	cmp	r0, #0
 8015170:	f43f ae7a 	beq.w	8014e68 <_strtod_l+0x488>
 8015174:	68c3      	ldr	r3, [r0, #12]
 8015176:	930b      	str	r3, [sp, #44]	; 0x2c
 8015178:	2300      	movs	r3, #0
 801517a:	60c3      	str	r3, [r0, #12]
 801517c:	4659      	mov	r1, fp
 801517e:	f7ff fa2b 	bl	80145d8 <__mcmp>
 8015182:	2800      	cmp	r0, #0
 8015184:	da60      	bge.n	8015248 <_strtod_l+0x868>
 8015186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015188:	ea53 0308 	orrs.w	r3, r3, r8
 801518c:	f040 8084 	bne.w	8015298 <_strtod_l+0x8b8>
 8015190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015194:	2b00      	cmp	r3, #0
 8015196:	d17f      	bne.n	8015298 <_strtod_l+0x8b8>
 8015198:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801519c:	0d1b      	lsrs	r3, r3, #20
 801519e:	051b      	lsls	r3, r3, #20
 80151a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80151a4:	d978      	bls.n	8015298 <_strtod_l+0x8b8>
 80151a6:	696b      	ldr	r3, [r5, #20]
 80151a8:	b913      	cbnz	r3, 80151b0 <_strtod_l+0x7d0>
 80151aa:	692b      	ldr	r3, [r5, #16]
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	dd73      	ble.n	8015298 <_strtod_l+0x8b8>
 80151b0:	4629      	mov	r1, r5
 80151b2:	2201      	movs	r2, #1
 80151b4:	4620      	mov	r0, r4
 80151b6:	f7ff f9a3 	bl	8014500 <__lshift>
 80151ba:	4659      	mov	r1, fp
 80151bc:	4605      	mov	r5, r0
 80151be:	f7ff fa0b 	bl	80145d8 <__mcmp>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	dd68      	ble.n	8015298 <_strtod_l+0x8b8>
 80151c6:	9904      	ldr	r1, [sp, #16]
 80151c8:	4a54      	ldr	r2, [pc, #336]	; (801531c <_strtod_l+0x93c>)
 80151ca:	464b      	mov	r3, r9
 80151cc:	2900      	cmp	r1, #0
 80151ce:	f000 8084 	beq.w	80152da <_strtod_l+0x8fa>
 80151d2:	ea02 0109 	and.w	r1, r2, r9
 80151d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80151da:	dc7e      	bgt.n	80152da <_strtod_l+0x8fa>
 80151dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80151e0:	f77f aeb3 	ble.w	8014f4a <_strtod_l+0x56a>
 80151e4:	4b4e      	ldr	r3, [pc, #312]	; (8015320 <_strtod_l+0x940>)
 80151e6:	4640      	mov	r0, r8
 80151e8:	4649      	mov	r1, r9
 80151ea:	2200      	movs	r2, #0
 80151ec:	f7eb fa04 	bl	80005f8 <__aeabi_dmul>
 80151f0:	4b4a      	ldr	r3, [pc, #296]	; (801531c <_strtod_l+0x93c>)
 80151f2:	400b      	ands	r3, r1
 80151f4:	4680      	mov	r8, r0
 80151f6:	4689      	mov	r9, r1
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f47f ae3f 	bne.w	8014e7c <_strtod_l+0x49c>
 80151fe:	2322      	movs	r3, #34	; 0x22
 8015200:	6023      	str	r3, [r4, #0]
 8015202:	e63b      	b.n	8014e7c <_strtod_l+0x49c>
 8015204:	f04f 32ff 	mov.w	r2, #4294967295
 8015208:	fa02 f303 	lsl.w	r3, r2, r3
 801520c:	ea03 0808 	and.w	r8, r3, r8
 8015210:	e6e8      	b.n	8014fe4 <_strtod_l+0x604>
 8015212:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015216:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801521a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801521e:	36e2      	adds	r6, #226	; 0xe2
 8015220:	fa01 f306 	lsl.w	r3, r1, r6
 8015224:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015228:	e748      	b.n	80150bc <_strtod_l+0x6dc>
 801522a:	2100      	movs	r1, #0
 801522c:	2301      	movs	r3, #1
 801522e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015232:	e743      	b.n	80150bc <_strtod_l+0x6dc>
 8015234:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015236:	4632      	mov	r2, r6
 8015238:	4620      	mov	r0, r4
 801523a:	f7ff f961 	bl	8014500 <__lshift>
 801523e:	9016      	str	r0, [sp, #88]	; 0x58
 8015240:	2800      	cmp	r0, #0
 8015242:	f47f af6b 	bne.w	801511c <_strtod_l+0x73c>
 8015246:	e60f      	b.n	8014e68 <_strtod_l+0x488>
 8015248:	46ca      	mov	sl, r9
 801524a:	d171      	bne.n	8015330 <_strtod_l+0x950>
 801524c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801524e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015252:	b352      	cbz	r2, 80152aa <_strtod_l+0x8ca>
 8015254:	4a33      	ldr	r2, [pc, #204]	; (8015324 <_strtod_l+0x944>)
 8015256:	4293      	cmp	r3, r2
 8015258:	d12a      	bne.n	80152b0 <_strtod_l+0x8d0>
 801525a:	9b04      	ldr	r3, [sp, #16]
 801525c:	4641      	mov	r1, r8
 801525e:	b1fb      	cbz	r3, 80152a0 <_strtod_l+0x8c0>
 8015260:	4b2e      	ldr	r3, [pc, #184]	; (801531c <_strtod_l+0x93c>)
 8015262:	ea09 0303 	and.w	r3, r9, r3
 8015266:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801526a:	f04f 32ff 	mov.w	r2, #4294967295
 801526e:	d81a      	bhi.n	80152a6 <_strtod_l+0x8c6>
 8015270:	0d1b      	lsrs	r3, r3, #20
 8015272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015276:	fa02 f303 	lsl.w	r3, r2, r3
 801527a:	4299      	cmp	r1, r3
 801527c:	d118      	bne.n	80152b0 <_strtod_l+0x8d0>
 801527e:	4b2a      	ldr	r3, [pc, #168]	; (8015328 <_strtod_l+0x948>)
 8015280:	459a      	cmp	sl, r3
 8015282:	d102      	bne.n	801528a <_strtod_l+0x8aa>
 8015284:	3101      	adds	r1, #1
 8015286:	f43f adef 	beq.w	8014e68 <_strtod_l+0x488>
 801528a:	4b24      	ldr	r3, [pc, #144]	; (801531c <_strtod_l+0x93c>)
 801528c:	ea0a 0303 	and.w	r3, sl, r3
 8015290:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015294:	f04f 0800 	mov.w	r8, #0
 8015298:	9b04      	ldr	r3, [sp, #16]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1a2      	bne.n	80151e4 <_strtod_l+0x804>
 801529e:	e5ed      	b.n	8014e7c <_strtod_l+0x49c>
 80152a0:	f04f 33ff 	mov.w	r3, #4294967295
 80152a4:	e7e9      	b.n	801527a <_strtod_l+0x89a>
 80152a6:	4613      	mov	r3, r2
 80152a8:	e7e7      	b.n	801527a <_strtod_l+0x89a>
 80152aa:	ea53 0308 	orrs.w	r3, r3, r8
 80152ae:	d08a      	beq.n	80151c6 <_strtod_l+0x7e6>
 80152b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152b2:	b1e3      	cbz	r3, 80152ee <_strtod_l+0x90e>
 80152b4:	ea13 0f0a 	tst.w	r3, sl
 80152b8:	d0ee      	beq.n	8015298 <_strtod_l+0x8b8>
 80152ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152bc:	9a04      	ldr	r2, [sp, #16]
 80152be:	4640      	mov	r0, r8
 80152c0:	4649      	mov	r1, r9
 80152c2:	b1c3      	cbz	r3, 80152f6 <_strtod_l+0x916>
 80152c4:	f7ff fb6f 	bl	80149a6 <sulp>
 80152c8:	4602      	mov	r2, r0
 80152ca:	460b      	mov	r3, r1
 80152cc:	ec51 0b18 	vmov	r0, r1, d8
 80152d0:	f7ea ffdc 	bl	800028c <__adddf3>
 80152d4:	4680      	mov	r8, r0
 80152d6:	4689      	mov	r9, r1
 80152d8:	e7de      	b.n	8015298 <_strtod_l+0x8b8>
 80152da:	4013      	ands	r3, r2
 80152dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80152e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80152e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80152e8:	f04f 38ff 	mov.w	r8, #4294967295
 80152ec:	e7d4      	b.n	8015298 <_strtod_l+0x8b8>
 80152ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152f0:	ea13 0f08 	tst.w	r3, r8
 80152f4:	e7e0      	b.n	80152b8 <_strtod_l+0x8d8>
 80152f6:	f7ff fb56 	bl	80149a6 <sulp>
 80152fa:	4602      	mov	r2, r0
 80152fc:	460b      	mov	r3, r1
 80152fe:	ec51 0b18 	vmov	r0, r1, d8
 8015302:	f7ea ffc1 	bl	8000288 <__aeabi_dsub>
 8015306:	2200      	movs	r2, #0
 8015308:	2300      	movs	r3, #0
 801530a:	4680      	mov	r8, r0
 801530c:	4689      	mov	r9, r1
 801530e:	f7eb fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8015312:	2800      	cmp	r0, #0
 8015314:	d0c0      	beq.n	8015298 <_strtod_l+0x8b8>
 8015316:	e618      	b.n	8014f4a <_strtod_l+0x56a>
 8015318:	fffffc02 	.word	0xfffffc02
 801531c:	7ff00000 	.word	0x7ff00000
 8015320:	39500000 	.word	0x39500000
 8015324:	000fffff 	.word	0x000fffff
 8015328:	7fefffff 	.word	0x7fefffff
 801532c:	08016e88 	.word	0x08016e88
 8015330:	4659      	mov	r1, fp
 8015332:	4628      	mov	r0, r5
 8015334:	f7ff fac0 	bl	80148b8 <__ratio>
 8015338:	ec57 6b10 	vmov	r6, r7, d0
 801533c:	ee10 0a10 	vmov	r0, s0
 8015340:	2200      	movs	r2, #0
 8015342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015346:	4639      	mov	r1, r7
 8015348:	f7eb fbd2 	bl	8000af0 <__aeabi_dcmple>
 801534c:	2800      	cmp	r0, #0
 801534e:	d071      	beq.n	8015434 <_strtod_l+0xa54>
 8015350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015352:	2b00      	cmp	r3, #0
 8015354:	d17c      	bne.n	8015450 <_strtod_l+0xa70>
 8015356:	f1b8 0f00 	cmp.w	r8, #0
 801535a:	d15a      	bne.n	8015412 <_strtod_l+0xa32>
 801535c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015360:	2b00      	cmp	r3, #0
 8015362:	d15d      	bne.n	8015420 <_strtod_l+0xa40>
 8015364:	4b90      	ldr	r3, [pc, #576]	; (80155a8 <_strtod_l+0xbc8>)
 8015366:	2200      	movs	r2, #0
 8015368:	4630      	mov	r0, r6
 801536a:	4639      	mov	r1, r7
 801536c:	f7eb fbb6 	bl	8000adc <__aeabi_dcmplt>
 8015370:	2800      	cmp	r0, #0
 8015372:	d15c      	bne.n	801542e <_strtod_l+0xa4e>
 8015374:	4630      	mov	r0, r6
 8015376:	4639      	mov	r1, r7
 8015378:	4b8c      	ldr	r3, [pc, #560]	; (80155ac <_strtod_l+0xbcc>)
 801537a:	2200      	movs	r2, #0
 801537c:	f7eb f93c 	bl	80005f8 <__aeabi_dmul>
 8015380:	4606      	mov	r6, r0
 8015382:	460f      	mov	r7, r1
 8015384:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015388:	9606      	str	r6, [sp, #24]
 801538a:	9307      	str	r3, [sp, #28]
 801538c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015390:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015394:	4b86      	ldr	r3, [pc, #536]	; (80155b0 <_strtod_l+0xbd0>)
 8015396:	ea0a 0303 	and.w	r3, sl, r3
 801539a:	930d      	str	r3, [sp, #52]	; 0x34
 801539c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801539e:	4b85      	ldr	r3, [pc, #532]	; (80155b4 <_strtod_l+0xbd4>)
 80153a0:	429a      	cmp	r2, r3
 80153a2:	f040 8090 	bne.w	80154c6 <_strtod_l+0xae6>
 80153a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80153aa:	ec49 8b10 	vmov	d0, r8, r9
 80153ae:	f7ff f9b9 	bl	8014724 <__ulp>
 80153b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153b6:	ec51 0b10 	vmov	r0, r1, d0
 80153ba:	f7eb f91d 	bl	80005f8 <__aeabi_dmul>
 80153be:	4642      	mov	r2, r8
 80153c0:	464b      	mov	r3, r9
 80153c2:	f7ea ff63 	bl	800028c <__adddf3>
 80153c6:	460b      	mov	r3, r1
 80153c8:	4979      	ldr	r1, [pc, #484]	; (80155b0 <_strtod_l+0xbd0>)
 80153ca:	4a7b      	ldr	r2, [pc, #492]	; (80155b8 <_strtod_l+0xbd8>)
 80153cc:	4019      	ands	r1, r3
 80153ce:	4291      	cmp	r1, r2
 80153d0:	4680      	mov	r8, r0
 80153d2:	d944      	bls.n	801545e <_strtod_l+0xa7e>
 80153d4:	ee18 2a90 	vmov	r2, s17
 80153d8:	4b78      	ldr	r3, [pc, #480]	; (80155bc <_strtod_l+0xbdc>)
 80153da:	429a      	cmp	r2, r3
 80153dc:	d104      	bne.n	80153e8 <_strtod_l+0xa08>
 80153de:	ee18 3a10 	vmov	r3, s16
 80153e2:	3301      	adds	r3, #1
 80153e4:	f43f ad40 	beq.w	8014e68 <_strtod_l+0x488>
 80153e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80155bc <_strtod_l+0xbdc>
 80153ec:	f04f 38ff 	mov.w	r8, #4294967295
 80153f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80153f2:	4620      	mov	r0, r4
 80153f4:	f7fe fe6a 	bl	80140cc <_Bfree>
 80153f8:	9905      	ldr	r1, [sp, #20]
 80153fa:	4620      	mov	r0, r4
 80153fc:	f7fe fe66 	bl	80140cc <_Bfree>
 8015400:	4659      	mov	r1, fp
 8015402:	4620      	mov	r0, r4
 8015404:	f7fe fe62 	bl	80140cc <_Bfree>
 8015408:	4629      	mov	r1, r5
 801540a:	4620      	mov	r0, r4
 801540c:	f7fe fe5e 	bl	80140cc <_Bfree>
 8015410:	e609      	b.n	8015026 <_strtod_l+0x646>
 8015412:	f1b8 0f01 	cmp.w	r8, #1
 8015416:	d103      	bne.n	8015420 <_strtod_l+0xa40>
 8015418:	f1b9 0f00 	cmp.w	r9, #0
 801541c:	f43f ad95 	beq.w	8014f4a <_strtod_l+0x56a>
 8015420:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015578 <_strtod_l+0xb98>
 8015424:	4f60      	ldr	r7, [pc, #384]	; (80155a8 <_strtod_l+0xbc8>)
 8015426:	ed8d 7b06 	vstr	d7, [sp, #24]
 801542a:	2600      	movs	r6, #0
 801542c:	e7ae      	b.n	801538c <_strtod_l+0x9ac>
 801542e:	4f5f      	ldr	r7, [pc, #380]	; (80155ac <_strtod_l+0xbcc>)
 8015430:	2600      	movs	r6, #0
 8015432:	e7a7      	b.n	8015384 <_strtod_l+0x9a4>
 8015434:	4b5d      	ldr	r3, [pc, #372]	; (80155ac <_strtod_l+0xbcc>)
 8015436:	4630      	mov	r0, r6
 8015438:	4639      	mov	r1, r7
 801543a:	2200      	movs	r2, #0
 801543c:	f7eb f8dc 	bl	80005f8 <__aeabi_dmul>
 8015440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015442:	4606      	mov	r6, r0
 8015444:	460f      	mov	r7, r1
 8015446:	2b00      	cmp	r3, #0
 8015448:	d09c      	beq.n	8015384 <_strtod_l+0x9a4>
 801544a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801544e:	e79d      	b.n	801538c <_strtod_l+0x9ac>
 8015450:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015580 <_strtod_l+0xba0>
 8015454:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015458:	ec57 6b17 	vmov	r6, r7, d7
 801545c:	e796      	b.n	801538c <_strtod_l+0x9ac>
 801545e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015462:	9b04      	ldr	r3, [sp, #16]
 8015464:	46ca      	mov	sl, r9
 8015466:	2b00      	cmp	r3, #0
 8015468:	d1c2      	bne.n	80153f0 <_strtod_l+0xa10>
 801546a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801546e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015470:	0d1b      	lsrs	r3, r3, #20
 8015472:	051b      	lsls	r3, r3, #20
 8015474:	429a      	cmp	r2, r3
 8015476:	d1bb      	bne.n	80153f0 <_strtod_l+0xa10>
 8015478:	4630      	mov	r0, r6
 801547a:	4639      	mov	r1, r7
 801547c:	f7eb fc04 	bl	8000c88 <__aeabi_d2lz>
 8015480:	f7eb f88c 	bl	800059c <__aeabi_l2d>
 8015484:	4602      	mov	r2, r0
 8015486:	460b      	mov	r3, r1
 8015488:	4630      	mov	r0, r6
 801548a:	4639      	mov	r1, r7
 801548c:	f7ea fefc 	bl	8000288 <__aeabi_dsub>
 8015490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015492:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015496:	ea43 0308 	orr.w	r3, r3, r8
 801549a:	4313      	orrs	r3, r2
 801549c:	4606      	mov	r6, r0
 801549e:	460f      	mov	r7, r1
 80154a0:	d054      	beq.n	801554c <_strtod_l+0xb6c>
 80154a2:	a339      	add	r3, pc, #228	; (adr r3, 8015588 <_strtod_l+0xba8>)
 80154a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a8:	f7eb fb18 	bl	8000adc <__aeabi_dcmplt>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	f47f ace5 	bne.w	8014e7c <_strtod_l+0x49c>
 80154b2:	a337      	add	r3, pc, #220	; (adr r3, 8015590 <_strtod_l+0xbb0>)
 80154b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b8:	4630      	mov	r0, r6
 80154ba:	4639      	mov	r1, r7
 80154bc:	f7eb fb2c 	bl	8000b18 <__aeabi_dcmpgt>
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d095      	beq.n	80153f0 <_strtod_l+0xa10>
 80154c4:	e4da      	b.n	8014e7c <_strtod_l+0x49c>
 80154c6:	9b04      	ldr	r3, [sp, #16]
 80154c8:	b333      	cbz	r3, 8015518 <_strtod_l+0xb38>
 80154ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80154d0:	d822      	bhi.n	8015518 <_strtod_l+0xb38>
 80154d2:	a331      	add	r3, pc, #196	; (adr r3, 8015598 <_strtod_l+0xbb8>)
 80154d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d8:	4630      	mov	r0, r6
 80154da:	4639      	mov	r1, r7
 80154dc:	f7eb fb08 	bl	8000af0 <__aeabi_dcmple>
 80154e0:	b1a0      	cbz	r0, 801550c <_strtod_l+0xb2c>
 80154e2:	4639      	mov	r1, r7
 80154e4:	4630      	mov	r0, r6
 80154e6:	f7eb fb5f 	bl	8000ba8 <__aeabi_d2uiz>
 80154ea:	2801      	cmp	r0, #1
 80154ec:	bf38      	it	cc
 80154ee:	2001      	movcc	r0, #1
 80154f0:	f7eb f808 	bl	8000504 <__aeabi_ui2d>
 80154f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154f6:	4606      	mov	r6, r0
 80154f8:	460f      	mov	r7, r1
 80154fa:	bb23      	cbnz	r3, 8015546 <_strtod_l+0xb66>
 80154fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015500:	9010      	str	r0, [sp, #64]	; 0x40
 8015502:	9311      	str	r3, [sp, #68]	; 0x44
 8015504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015508:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801550c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801550e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015510:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015514:	1a9b      	subs	r3, r3, r2
 8015516:	930f      	str	r3, [sp, #60]	; 0x3c
 8015518:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801551c:	eeb0 0a48 	vmov.f32	s0, s16
 8015520:	eef0 0a68 	vmov.f32	s1, s17
 8015524:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015528:	f7ff f8fc 	bl	8014724 <__ulp>
 801552c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015530:	ec53 2b10 	vmov	r2, r3, d0
 8015534:	f7eb f860 	bl	80005f8 <__aeabi_dmul>
 8015538:	ec53 2b18 	vmov	r2, r3, d8
 801553c:	f7ea fea6 	bl	800028c <__adddf3>
 8015540:	4680      	mov	r8, r0
 8015542:	4689      	mov	r9, r1
 8015544:	e78d      	b.n	8015462 <_strtod_l+0xa82>
 8015546:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801554a:	e7db      	b.n	8015504 <_strtod_l+0xb24>
 801554c:	a314      	add	r3, pc, #80	; (adr r3, 80155a0 <_strtod_l+0xbc0>)
 801554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015552:	f7eb fac3 	bl	8000adc <__aeabi_dcmplt>
 8015556:	e7b3      	b.n	80154c0 <_strtod_l+0xae0>
 8015558:	2300      	movs	r3, #0
 801555a:	930a      	str	r3, [sp, #40]	; 0x28
 801555c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801555e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015560:	6013      	str	r3, [r2, #0]
 8015562:	f7ff ba7c 	b.w	8014a5e <_strtod_l+0x7e>
 8015566:	2a65      	cmp	r2, #101	; 0x65
 8015568:	f43f ab75 	beq.w	8014c56 <_strtod_l+0x276>
 801556c:	2a45      	cmp	r2, #69	; 0x45
 801556e:	f43f ab72 	beq.w	8014c56 <_strtod_l+0x276>
 8015572:	2301      	movs	r3, #1
 8015574:	f7ff bbaa 	b.w	8014ccc <_strtod_l+0x2ec>
 8015578:	00000000 	.word	0x00000000
 801557c:	bff00000 	.word	0xbff00000
 8015580:	00000000 	.word	0x00000000
 8015584:	3ff00000 	.word	0x3ff00000
 8015588:	94a03595 	.word	0x94a03595
 801558c:	3fdfffff 	.word	0x3fdfffff
 8015590:	35afe535 	.word	0x35afe535
 8015594:	3fe00000 	.word	0x3fe00000
 8015598:	ffc00000 	.word	0xffc00000
 801559c:	41dfffff 	.word	0x41dfffff
 80155a0:	94a03595 	.word	0x94a03595
 80155a4:	3fcfffff 	.word	0x3fcfffff
 80155a8:	3ff00000 	.word	0x3ff00000
 80155ac:	3fe00000 	.word	0x3fe00000
 80155b0:	7ff00000 	.word	0x7ff00000
 80155b4:	7fe00000 	.word	0x7fe00000
 80155b8:	7c9fffff 	.word	0x7c9fffff
 80155bc:	7fefffff 	.word	0x7fefffff

080155c0 <_strtod_r>:
 80155c0:	4b01      	ldr	r3, [pc, #4]	; (80155c8 <_strtod_r+0x8>)
 80155c2:	f7ff ba0d 	b.w	80149e0 <_strtod_l>
 80155c6:	bf00      	nop
 80155c8:	20000168 	.word	0x20000168

080155cc <_strtol_l.constprop.0>:
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d2:	d001      	beq.n	80155d8 <_strtol_l.constprop.0+0xc>
 80155d4:	2b24      	cmp	r3, #36	; 0x24
 80155d6:	d906      	bls.n	80155e6 <_strtol_l.constprop.0+0x1a>
 80155d8:	f7fd fe30 	bl	801323c <__errno>
 80155dc:	2316      	movs	r3, #22
 80155de:	6003      	str	r3, [r0, #0]
 80155e0:	2000      	movs	r0, #0
 80155e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80156cc <_strtol_l.constprop.0+0x100>
 80155ea:	460d      	mov	r5, r1
 80155ec:	462e      	mov	r6, r5
 80155ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80155f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80155f6:	f017 0708 	ands.w	r7, r7, #8
 80155fa:	d1f7      	bne.n	80155ec <_strtol_l.constprop.0+0x20>
 80155fc:	2c2d      	cmp	r4, #45	; 0x2d
 80155fe:	d132      	bne.n	8015666 <_strtol_l.constprop.0+0x9a>
 8015600:	782c      	ldrb	r4, [r5, #0]
 8015602:	2701      	movs	r7, #1
 8015604:	1cb5      	adds	r5, r6, #2
 8015606:	2b00      	cmp	r3, #0
 8015608:	d05b      	beq.n	80156c2 <_strtol_l.constprop.0+0xf6>
 801560a:	2b10      	cmp	r3, #16
 801560c:	d109      	bne.n	8015622 <_strtol_l.constprop.0+0x56>
 801560e:	2c30      	cmp	r4, #48	; 0x30
 8015610:	d107      	bne.n	8015622 <_strtol_l.constprop.0+0x56>
 8015612:	782c      	ldrb	r4, [r5, #0]
 8015614:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015618:	2c58      	cmp	r4, #88	; 0x58
 801561a:	d14d      	bne.n	80156b8 <_strtol_l.constprop.0+0xec>
 801561c:	786c      	ldrb	r4, [r5, #1]
 801561e:	2310      	movs	r3, #16
 8015620:	3502      	adds	r5, #2
 8015622:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015626:	f108 38ff 	add.w	r8, r8, #4294967295
 801562a:	f04f 0e00 	mov.w	lr, #0
 801562e:	fbb8 f9f3 	udiv	r9, r8, r3
 8015632:	4676      	mov	r6, lr
 8015634:	fb03 8a19 	mls	sl, r3, r9, r8
 8015638:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801563c:	f1bc 0f09 	cmp.w	ip, #9
 8015640:	d816      	bhi.n	8015670 <_strtol_l.constprop.0+0xa4>
 8015642:	4664      	mov	r4, ip
 8015644:	42a3      	cmp	r3, r4
 8015646:	dd24      	ble.n	8015692 <_strtol_l.constprop.0+0xc6>
 8015648:	f1be 3fff 	cmp.w	lr, #4294967295
 801564c:	d008      	beq.n	8015660 <_strtol_l.constprop.0+0x94>
 801564e:	45b1      	cmp	r9, r6
 8015650:	d31c      	bcc.n	801568c <_strtol_l.constprop.0+0xc0>
 8015652:	d101      	bne.n	8015658 <_strtol_l.constprop.0+0x8c>
 8015654:	45a2      	cmp	sl, r4
 8015656:	db19      	blt.n	801568c <_strtol_l.constprop.0+0xc0>
 8015658:	fb06 4603 	mla	r6, r6, r3, r4
 801565c:	f04f 0e01 	mov.w	lr, #1
 8015660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015664:	e7e8      	b.n	8015638 <_strtol_l.constprop.0+0x6c>
 8015666:	2c2b      	cmp	r4, #43	; 0x2b
 8015668:	bf04      	itt	eq
 801566a:	782c      	ldrbeq	r4, [r5, #0]
 801566c:	1cb5      	addeq	r5, r6, #2
 801566e:	e7ca      	b.n	8015606 <_strtol_l.constprop.0+0x3a>
 8015670:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015674:	f1bc 0f19 	cmp.w	ip, #25
 8015678:	d801      	bhi.n	801567e <_strtol_l.constprop.0+0xb2>
 801567a:	3c37      	subs	r4, #55	; 0x37
 801567c:	e7e2      	b.n	8015644 <_strtol_l.constprop.0+0x78>
 801567e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015682:	f1bc 0f19 	cmp.w	ip, #25
 8015686:	d804      	bhi.n	8015692 <_strtol_l.constprop.0+0xc6>
 8015688:	3c57      	subs	r4, #87	; 0x57
 801568a:	e7db      	b.n	8015644 <_strtol_l.constprop.0+0x78>
 801568c:	f04f 3eff 	mov.w	lr, #4294967295
 8015690:	e7e6      	b.n	8015660 <_strtol_l.constprop.0+0x94>
 8015692:	f1be 3fff 	cmp.w	lr, #4294967295
 8015696:	d105      	bne.n	80156a4 <_strtol_l.constprop.0+0xd8>
 8015698:	2322      	movs	r3, #34	; 0x22
 801569a:	6003      	str	r3, [r0, #0]
 801569c:	4646      	mov	r6, r8
 801569e:	b942      	cbnz	r2, 80156b2 <_strtol_l.constprop.0+0xe6>
 80156a0:	4630      	mov	r0, r6
 80156a2:	e79e      	b.n	80155e2 <_strtol_l.constprop.0+0x16>
 80156a4:	b107      	cbz	r7, 80156a8 <_strtol_l.constprop.0+0xdc>
 80156a6:	4276      	negs	r6, r6
 80156a8:	2a00      	cmp	r2, #0
 80156aa:	d0f9      	beq.n	80156a0 <_strtol_l.constprop.0+0xd4>
 80156ac:	f1be 0f00 	cmp.w	lr, #0
 80156b0:	d000      	beq.n	80156b4 <_strtol_l.constprop.0+0xe8>
 80156b2:	1e69      	subs	r1, r5, #1
 80156b4:	6011      	str	r1, [r2, #0]
 80156b6:	e7f3      	b.n	80156a0 <_strtol_l.constprop.0+0xd4>
 80156b8:	2430      	movs	r4, #48	; 0x30
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d1b1      	bne.n	8015622 <_strtol_l.constprop.0+0x56>
 80156be:	2308      	movs	r3, #8
 80156c0:	e7af      	b.n	8015622 <_strtol_l.constprop.0+0x56>
 80156c2:	2c30      	cmp	r4, #48	; 0x30
 80156c4:	d0a5      	beq.n	8015612 <_strtol_l.constprop.0+0x46>
 80156c6:	230a      	movs	r3, #10
 80156c8:	e7ab      	b.n	8015622 <_strtol_l.constprop.0+0x56>
 80156ca:	bf00      	nop
 80156cc:	08016eb1 	.word	0x08016eb1

080156d0 <_strtol_r>:
 80156d0:	f7ff bf7c 	b.w	80155cc <_strtol_l.constprop.0>

080156d4 <__ssputs_r>:
 80156d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156d8:	688e      	ldr	r6, [r1, #8]
 80156da:	461f      	mov	r7, r3
 80156dc:	42be      	cmp	r6, r7
 80156de:	680b      	ldr	r3, [r1, #0]
 80156e0:	4682      	mov	sl, r0
 80156e2:	460c      	mov	r4, r1
 80156e4:	4690      	mov	r8, r2
 80156e6:	d82c      	bhi.n	8015742 <__ssputs_r+0x6e>
 80156e8:	898a      	ldrh	r2, [r1, #12]
 80156ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80156ee:	d026      	beq.n	801573e <__ssputs_r+0x6a>
 80156f0:	6965      	ldr	r5, [r4, #20]
 80156f2:	6909      	ldr	r1, [r1, #16]
 80156f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80156f8:	eba3 0901 	sub.w	r9, r3, r1
 80156fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015700:	1c7b      	adds	r3, r7, #1
 8015702:	444b      	add	r3, r9
 8015704:	106d      	asrs	r5, r5, #1
 8015706:	429d      	cmp	r5, r3
 8015708:	bf38      	it	cc
 801570a:	461d      	movcc	r5, r3
 801570c:	0553      	lsls	r3, r2, #21
 801570e:	d527      	bpl.n	8015760 <__ssputs_r+0x8c>
 8015710:	4629      	mov	r1, r5
 8015712:	f7fc fce7 	bl	80120e4 <_malloc_r>
 8015716:	4606      	mov	r6, r0
 8015718:	b360      	cbz	r0, 8015774 <__ssputs_r+0xa0>
 801571a:	6921      	ldr	r1, [r4, #16]
 801571c:	464a      	mov	r2, r9
 801571e:	f7fd fdb9 	bl	8013294 <memcpy>
 8015722:	89a3      	ldrh	r3, [r4, #12]
 8015724:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801572c:	81a3      	strh	r3, [r4, #12]
 801572e:	6126      	str	r6, [r4, #16]
 8015730:	6165      	str	r5, [r4, #20]
 8015732:	444e      	add	r6, r9
 8015734:	eba5 0509 	sub.w	r5, r5, r9
 8015738:	6026      	str	r6, [r4, #0]
 801573a:	60a5      	str	r5, [r4, #8]
 801573c:	463e      	mov	r6, r7
 801573e:	42be      	cmp	r6, r7
 8015740:	d900      	bls.n	8015744 <__ssputs_r+0x70>
 8015742:	463e      	mov	r6, r7
 8015744:	6820      	ldr	r0, [r4, #0]
 8015746:	4632      	mov	r2, r6
 8015748:	4641      	mov	r1, r8
 801574a:	f000 f9c9 	bl	8015ae0 <memmove>
 801574e:	68a3      	ldr	r3, [r4, #8]
 8015750:	1b9b      	subs	r3, r3, r6
 8015752:	60a3      	str	r3, [r4, #8]
 8015754:	6823      	ldr	r3, [r4, #0]
 8015756:	4433      	add	r3, r6
 8015758:	6023      	str	r3, [r4, #0]
 801575a:	2000      	movs	r0, #0
 801575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015760:	462a      	mov	r2, r5
 8015762:	f000 fd8e 	bl	8016282 <_realloc_r>
 8015766:	4606      	mov	r6, r0
 8015768:	2800      	cmp	r0, #0
 801576a:	d1e0      	bne.n	801572e <__ssputs_r+0x5a>
 801576c:	6921      	ldr	r1, [r4, #16]
 801576e:	4650      	mov	r0, sl
 8015770:	f7fe fc20 	bl	8013fb4 <_free_r>
 8015774:	230c      	movs	r3, #12
 8015776:	f8ca 3000 	str.w	r3, [sl]
 801577a:	89a3      	ldrh	r3, [r4, #12]
 801577c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015780:	81a3      	strh	r3, [r4, #12]
 8015782:	f04f 30ff 	mov.w	r0, #4294967295
 8015786:	e7e9      	b.n	801575c <__ssputs_r+0x88>

08015788 <_svfiprintf_r>:
 8015788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578c:	4698      	mov	r8, r3
 801578e:	898b      	ldrh	r3, [r1, #12]
 8015790:	061b      	lsls	r3, r3, #24
 8015792:	b09d      	sub	sp, #116	; 0x74
 8015794:	4607      	mov	r7, r0
 8015796:	460d      	mov	r5, r1
 8015798:	4614      	mov	r4, r2
 801579a:	d50e      	bpl.n	80157ba <_svfiprintf_r+0x32>
 801579c:	690b      	ldr	r3, [r1, #16]
 801579e:	b963      	cbnz	r3, 80157ba <_svfiprintf_r+0x32>
 80157a0:	2140      	movs	r1, #64	; 0x40
 80157a2:	f7fc fc9f 	bl	80120e4 <_malloc_r>
 80157a6:	6028      	str	r0, [r5, #0]
 80157a8:	6128      	str	r0, [r5, #16]
 80157aa:	b920      	cbnz	r0, 80157b6 <_svfiprintf_r+0x2e>
 80157ac:	230c      	movs	r3, #12
 80157ae:	603b      	str	r3, [r7, #0]
 80157b0:	f04f 30ff 	mov.w	r0, #4294967295
 80157b4:	e0d0      	b.n	8015958 <_svfiprintf_r+0x1d0>
 80157b6:	2340      	movs	r3, #64	; 0x40
 80157b8:	616b      	str	r3, [r5, #20]
 80157ba:	2300      	movs	r3, #0
 80157bc:	9309      	str	r3, [sp, #36]	; 0x24
 80157be:	2320      	movs	r3, #32
 80157c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80157c8:	2330      	movs	r3, #48	; 0x30
 80157ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015970 <_svfiprintf_r+0x1e8>
 80157ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80157d2:	f04f 0901 	mov.w	r9, #1
 80157d6:	4623      	mov	r3, r4
 80157d8:	469a      	mov	sl, r3
 80157da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157de:	b10a      	cbz	r2, 80157e4 <_svfiprintf_r+0x5c>
 80157e0:	2a25      	cmp	r2, #37	; 0x25
 80157e2:	d1f9      	bne.n	80157d8 <_svfiprintf_r+0x50>
 80157e4:	ebba 0b04 	subs.w	fp, sl, r4
 80157e8:	d00b      	beq.n	8015802 <_svfiprintf_r+0x7a>
 80157ea:	465b      	mov	r3, fp
 80157ec:	4622      	mov	r2, r4
 80157ee:	4629      	mov	r1, r5
 80157f0:	4638      	mov	r0, r7
 80157f2:	f7ff ff6f 	bl	80156d4 <__ssputs_r>
 80157f6:	3001      	adds	r0, #1
 80157f8:	f000 80a9 	beq.w	801594e <_svfiprintf_r+0x1c6>
 80157fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157fe:	445a      	add	r2, fp
 8015800:	9209      	str	r2, [sp, #36]	; 0x24
 8015802:	f89a 3000 	ldrb.w	r3, [sl]
 8015806:	2b00      	cmp	r3, #0
 8015808:	f000 80a1 	beq.w	801594e <_svfiprintf_r+0x1c6>
 801580c:	2300      	movs	r3, #0
 801580e:	f04f 32ff 	mov.w	r2, #4294967295
 8015812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015816:	f10a 0a01 	add.w	sl, sl, #1
 801581a:	9304      	str	r3, [sp, #16]
 801581c:	9307      	str	r3, [sp, #28]
 801581e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015822:	931a      	str	r3, [sp, #104]	; 0x68
 8015824:	4654      	mov	r4, sl
 8015826:	2205      	movs	r2, #5
 8015828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801582c:	4850      	ldr	r0, [pc, #320]	; (8015970 <_svfiprintf_r+0x1e8>)
 801582e:	f7ea fccf 	bl	80001d0 <memchr>
 8015832:	9a04      	ldr	r2, [sp, #16]
 8015834:	b9d8      	cbnz	r0, 801586e <_svfiprintf_r+0xe6>
 8015836:	06d0      	lsls	r0, r2, #27
 8015838:	bf44      	itt	mi
 801583a:	2320      	movmi	r3, #32
 801583c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015840:	0711      	lsls	r1, r2, #28
 8015842:	bf44      	itt	mi
 8015844:	232b      	movmi	r3, #43	; 0x2b
 8015846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801584a:	f89a 3000 	ldrb.w	r3, [sl]
 801584e:	2b2a      	cmp	r3, #42	; 0x2a
 8015850:	d015      	beq.n	801587e <_svfiprintf_r+0xf6>
 8015852:	9a07      	ldr	r2, [sp, #28]
 8015854:	4654      	mov	r4, sl
 8015856:	2000      	movs	r0, #0
 8015858:	f04f 0c0a 	mov.w	ip, #10
 801585c:	4621      	mov	r1, r4
 801585e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015862:	3b30      	subs	r3, #48	; 0x30
 8015864:	2b09      	cmp	r3, #9
 8015866:	d94d      	bls.n	8015904 <_svfiprintf_r+0x17c>
 8015868:	b1b0      	cbz	r0, 8015898 <_svfiprintf_r+0x110>
 801586a:	9207      	str	r2, [sp, #28]
 801586c:	e014      	b.n	8015898 <_svfiprintf_r+0x110>
 801586e:	eba0 0308 	sub.w	r3, r0, r8
 8015872:	fa09 f303 	lsl.w	r3, r9, r3
 8015876:	4313      	orrs	r3, r2
 8015878:	9304      	str	r3, [sp, #16]
 801587a:	46a2      	mov	sl, r4
 801587c:	e7d2      	b.n	8015824 <_svfiprintf_r+0x9c>
 801587e:	9b03      	ldr	r3, [sp, #12]
 8015880:	1d19      	adds	r1, r3, #4
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	9103      	str	r1, [sp, #12]
 8015886:	2b00      	cmp	r3, #0
 8015888:	bfbb      	ittet	lt
 801588a:	425b      	neglt	r3, r3
 801588c:	f042 0202 	orrlt.w	r2, r2, #2
 8015890:	9307      	strge	r3, [sp, #28]
 8015892:	9307      	strlt	r3, [sp, #28]
 8015894:	bfb8      	it	lt
 8015896:	9204      	strlt	r2, [sp, #16]
 8015898:	7823      	ldrb	r3, [r4, #0]
 801589a:	2b2e      	cmp	r3, #46	; 0x2e
 801589c:	d10c      	bne.n	80158b8 <_svfiprintf_r+0x130>
 801589e:	7863      	ldrb	r3, [r4, #1]
 80158a0:	2b2a      	cmp	r3, #42	; 0x2a
 80158a2:	d134      	bne.n	801590e <_svfiprintf_r+0x186>
 80158a4:	9b03      	ldr	r3, [sp, #12]
 80158a6:	1d1a      	adds	r2, r3, #4
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	9203      	str	r2, [sp, #12]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	bfb8      	it	lt
 80158b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80158b4:	3402      	adds	r4, #2
 80158b6:	9305      	str	r3, [sp, #20]
 80158b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015980 <_svfiprintf_r+0x1f8>
 80158bc:	7821      	ldrb	r1, [r4, #0]
 80158be:	2203      	movs	r2, #3
 80158c0:	4650      	mov	r0, sl
 80158c2:	f7ea fc85 	bl	80001d0 <memchr>
 80158c6:	b138      	cbz	r0, 80158d8 <_svfiprintf_r+0x150>
 80158c8:	9b04      	ldr	r3, [sp, #16]
 80158ca:	eba0 000a 	sub.w	r0, r0, sl
 80158ce:	2240      	movs	r2, #64	; 0x40
 80158d0:	4082      	lsls	r2, r0
 80158d2:	4313      	orrs	r3, r2
 80158d4:	3401      	adds	r4, #1
 80158d6:	9304      	str	r3, [sp, #16]
 80158d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158dc:	4825      	ldr	r0, [pc, #148]	; (8015974 <_svfiprintf_r+0x1ec>)
 80158de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80158e2:	2206      	movs	r2, #6
 80158e4:	f7ea fc74 	bl	80001d0 <memchr>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d038      	beq.n	801595e <_svfiprintf_r+0x1d6>
 80158ec:	4b22      	ldr	r3, [pc, #136]	; (8015978 <_svfiprintf_r+0x1f0>)
 80158ee:	bb1b      	cbnz	r3, 8015938 <_svfiprintf_r+0x1b0>
 80158f0:	9b03      	ldr	r3, [sp, #12]
 80158f2:	3307      	adds	r3, #7
 80158f4:	f023 0307 	bic.w	r3, r3, #7
 80158f8:	3308      	adds	r3, #8
 80158fa:	9303      	str	r3, [sp, #12]
 80158fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158fe:	4433      	add	r3, r6
 8015900:	9309      	str	r3, [sp, #36]	; 0x24
 8015902:	e768      	b.n	80157d6 <_svfiprintf_r+0x4e>
 8015904:	fb0c 3202 	mla	r2, ip, r2, r3
 8015908:	460c      	mov	r4, r1
 801590a:	2001      	movs	r0, #1
 801590c:	e7a6      	b.n	801585c <_svfiprintf_r+0xd4>
 801590e:	2300      	movs	r3, #0
 8015910:	3401      	adds	r4, #1
 8015912:	9305      	str	r3, [sp, #20]
 8015914:	4619      	mov	r1, r3
 8015916:	f04f 0c0a 	mov.w	ip, #10
 801591a:	4620      	mov	r0, r4
 801591c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015920:	3a30      	subs	r2, #48	; 0x30
 8015922:	2a09      	cmp	r2, #9
 8015924:	d903      	bls.n	801592e <_svfiprintf_r+0x1a6>
 8015926:	2b00      	cmp	r3, #0
 8015928:	d0c6      	beq.n	80158b8 <_svfiprintf_r+0x130>
 801592a:	9105      	str	r1, [sp, #20]
 801592c:	e7c4      	b.n	80158b8 <_svfiprintf_r+0x130>
 801592e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015932:	4604      	mov	r4, r0
 8015934:	2301      	movs	r3, #1
 8015936:	e7f0      	b.n	801591a <_svfiprintf_r+0x192>
 8015938:	ab03      	add	r3, sp, #12
 801593a:	9300      	str	r3, [sp, #0]
 801593c:	462a      	mov	r2, r5
 801593e:	4b0f      	ldr	r3, [pc, #60]	; (801597c <_svfiprintf_r+0x1f4>)
 8015940:	a904      	add	r1, sp, #16
 8015942:	4638      	mov	r0, r7
 8015944:	f7fc fcfa 	bl	801233c <_printf_float>
 8015948:	1c42      	adds	r2, r0, #1
 801594a:	4606      	mov	r6, r0
 801594c:	d1d6      	bne.n	80158fc <_svfiprintf_r+0x174>
 801594e:	89ab      	ldrh	r3, [r5, #12]
 8015950:	065b      	lsls	r3, r3, #25
 8015952:	f53f af2d 	bmi.w	80157b0 <_svfiprintf_r+0x28>
 8015956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015958:	b01d      	add	sp, #116	; 0x74
 801595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801595e:	ab03      	add	r3, sp, #12
 8015960:	9300      	str	r3, [sp, #0]
 8015962:	462a      	mov	r2, r5
 8015964:	4b05      	ldr	r3, [pc, #20]	; (801597c <_svfiprintf_r+0x1f4>)
 8015966:	a904      	add	r1, sp, #16
 8015968:	4638      	mov	r0, r7
 801596a:	f7fc ff8b 	bl	8012884 <_printf_i>
 801596e:	e7eb      	b.n	8015948 <_svfiprintf_r+0x1c0>
 8015970:	08016fb1 	.word	0x08016fb1
 8015974:	08016fbb 	.word	0x08016fbb
 8015978:	0801233d 	.word	0x0801233d
 801597c:	080156d5 	.word	0x080156d5
 8015980:	08016fb7 	.word	0x08016fb7

08015984 <__sflush_r>:
 8015984:	898a      	ldrh	r2, [r1, #12]
 8015986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801598a:	4605      	mov	r5, r0
 801598c:	0710      	lsls	r0, r2, #28
 801598e:	460c      	mov	r4, r1
 8015990:	d458      	bmi.n	8015a44 <__sflush_r+0xc0>
 8015992:	684b      	ldr	r3, [r1, #4]
 8015994:	2b00      	cmp	r3, #0
 8015996:	dc05      	bgt.n	80159a4 <__sflush_r+0x20>
 8015998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801599a:	2b00      	cmp	r3, #0
 801599c:	dc02      	bgt.n	80159a4 <__sflush_r+0x20>
 801599e:	2000      	movs	r0, #0
 80159a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159a6:	2e00      	cmp	r6, #0
 80159a8:	d0f9      	beq.n	801599e <__sflush_r+0x1a>
 80159aa:	2300      	movs	r3, #0
 80159ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159b0:	682f      	ldr	r7, [r5, #0]
 80159b2:	6a21      	ldr	r1, [r4, #32]
 80159b4:	602b      	str	r3, [r5, #0]
 80159b6:	d032      	beq.n	8015a1e <__sflush_r+0x9a>
 80159b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159ba:	89a3      	ldrh	r3, [r4, #12]
 80159bc:	075a      	lsls	r2, r3, #29
 80159be:	d505      	bpl.n	80159cc <__sflush_r+0x48>
 80159c0:	6863      	ldr	r3, [r4, #4]
 80159c2:	1ac0      	subs	r0, r0, r3
 80159c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159c6:	b10b      	cbz	r3, 80159cc <__sflush_r+0x48>
 80159c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159ca:	1ac0      	subs	r0, r0, r3
 80159cc:	2300      	movs	r3, #0
 80159ce:	4602      	mov	r2, r0
 80159d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159d2:	6a21      	ldr	r1, [r4, #32]
 80159d4:	4628      	mov	r0, r5
 80159d6:	47b0      	blx	r6
 80159d8:	1c43      	adds	r3, r0, #1
 80159da:	89a3      	ldrh	r3, [r4, #12]
 80159dc:	d106      	bne.n	80159ec <__sflush_r+0x68>
 80159de:	6829      	ldr	r1, [r5, #0]
 80159e0:	291d      	cmp	r1, #29
 80159e2:	d82b      	bhi.n	8015a3c <__sflush_r+0xb8>
 80159e4:	4a29      	ldr	r2, [pc, #164]	; (8015a8c <__sflush_r+0x108>)
 80159e6:	410a      	asrs	r2, r1
 80159e8:	07d6      	lsls	r6, r2, #31
 80159ea:	d427      	bmi.n	8015a3c <__sflush_r+0xb8>
 80159ec:	2200      	movs	r2, #0
 80159ee:	6062      	str	r2, [r4, #4]
 80159f0:	04d9      	lsls	r1, r3, #19
 80159f2:	6922      	ldr	r2, [r4, #16]
 80159f4:	6022      	str	r2, [r4, #0]
 80159f6:	d504      	bpl.n	8015a02 <__sflush_r+0x7e>
 80159f8:	1c42      	adds	r2, r0, #1
 80159fa:	d101      	bne.n	8015a00 <__sflush_r+0x7c>
 80159fc:	682b      	ldr	r3, [r5, #0]
 80159fe:	b903      	cbnz	r3, 8015a02 <__sflush_r+0x7e>
 8015a00:	6560      	str	r0, [r4, #84]	; 0x54
 8015a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a04:	602f      	str	r7, [r5, #0]
 8015a06:	2900      	cmp	r1, #0
 8015a08:	d0c9      	beq.n	801599e <__sflush_r+0x1a>
 8015a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a0e:	4299      	cmp	r1, r3
 8015a10:	d002      	beq.n	8015a18 <__sflush_r+0x94>
 8015a12:	4628      	mov	r0, r5
 8015a14:	f7fe face 	bl	8013fb4 <_free_r>
 8015a18:	2000      	movs	r0, #0
 8015a1a:	6360      	str	r0, [r4, #52]	; 0x34
 8015a1c:	e7c0      	b.n	80159a0 <__sflush_r+0x1c>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	4628      	mov	r0, r5
 8015a22:	47b0      	blx	r6
 8015a24:	1c41      	adds	r1, r0, #1
 8015a26:	d1c8      	bne.n	80159ba <__sflush_r+0x36>
 8015a28:	682b      	ldr	r3, [r5, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d0c5      	beq.n	80159ba <__sflush_r+0x36>
 8015a2e:	2b1d      	cmp	r3, #29
 8015a30:	d001      	beq.n	8015a36 <__sflush_r+0xb2>
 8015a32:	2b16      	cmp	r3, #22
 8015a34:	d101      	bne.n	8015a3a <__sflush_r+0xb6>
 8015a36:	602f      	str	r7, [r5, #0]
 8015a38:	e7b1      	b.n	801599e <__sflush_r+0x1a>
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a40:	81a3      	strh	r3, [r4, #12]
 8015a42:	e7ad      	b.n	80159a0 <__sflush_r+0x1c>
 8015a44:	690f      	ldr	r7, [r1, #16]
 8015a46:	2f00      	cmp	r7, #0
 8015a48:	d0a9      	beq.n	801599e <__sflush_r+0x1a>
 8015a4a:	0793      	lsls	r3, r2, #30
 8015a4c:	680e      	ldr	r6, [r1, #0]
 8015a4e:	bf08      	it	eq
 8015a50:	694b      	ldreq	r3, [r1, #20]
 8015a52:	600f      	str	r7, [r1, #0]
 8015a54:	bf18      	it	ne
 8015a56:	2300      	movne	r3, #0
 8015a58:	eba6 0807 	sub.w	r8, r6, r7
 8015a5c:	608b      	str	r3, [r1, #8]
 8015a5e:	f1b8 0f00 	cmp.w	r8, #0
 8015a62:	dd9c      	ble.n	801599e <__sflush_r+0x1a>
 8015a64:	6a21      	ldr	r1, [r4, #32]
 8015a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a68:	4643      	mov	r3, r8
 8015a6a:	463a      	mov	r2, r7
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	47b0      	blx	r6
 8015a70:	2800      	cmp	r0, #0
 8015a72:	dc06      	bgt.n	8015a82 <__sflush_r+0xfe>
 8015a74:	89a3      	ldrh	r3, [r4, #12]
 8015a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a7a:	81a3      	strh	r3, [r4, #12]
 8015a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a80:	e78e      	b.n	80159a0 <__sflush_r+0x1c>
 8015a82:	4407      	add	r7, r0
 8015a84:	eba8 0800 	sub.w	r8, r8, r0
 8015a88:	e7e9      	b.n	8015a5e <__sflush_r+0xda>
 8015a8a:	bf00      	nop
 8015a8c:	dfbffffe 	.word	0xdfbffffe

08015a90 <_fflush_r>:
 8015a90:	b538      	push	{r3, r4, r5, lr}
 8015a92:	690b      	ldr	r3, [r1, #16]
 8015a94:	4605      	mov	r5, r0
 8015a96:	460c      	mov	r4, r1
 8015a98:	b913      	cbnz	r3, 8015aa0 <_fflush_r+0x10>
 8015a9a:	2500      	movs	r5, #0
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	bd38      	pop	{r3, r4, r5, pc}
 8015aa0:	b118      	cbz	r0, 8015aaa <_fflush_r+0x1a>
 8015aa2:	6a03      	ldr	r3, [r0, #32]
 8015aa4:	b90b      	cbnz	r3, 8015aaa <_fflush_r+0x1a>
 8015aa6:	f7fd fa99 	bl	8012fdc <__sinit>
 8015aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d0f3      	beq.n	8015a9a <_fflush_r+0xa>
 8015ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ab4:	07d0      	lsls	r0, r2, #31
 8015ab6:	d404      	bmi.n	8015ac2 <_fflush_r+0x32>
 8015ab8:	0599      	lsls	r1, r3, #22
 8015aba:	d402      	bmi.n	8015ac2 <_fflush_r+0x32>
 8015abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015abe:	f7fd fbe7 	bl	8013290 <__retarget_lock_acquire_recursive>
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	4621      	mov	r1, r4
 8015ac6:	f7ff ff5d 	bl	8015984 <__sflush_r>
 8015aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015acc:	07da      	lsls	r2, r3, #31
 8015ace:	4605      	mov	r5, r0
 8015ad0:	d4e4      	bmi.n	8015a9c <_fflush_r+0xc>
 8015ad2:	89a3      	ldrh	r3, [r4, #12]
 8015ad4:	059b      	lsls	r3, r3, #22
 8015ad6:	d4e1      	bmi.n	8015a9c <_fflush_r+0xc>
 8015ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ada:	f7fd fbda 	bl	8013292 <__retarget_lock_release_recursive>
 8015ade:	e7dd      	b.n	8015a9c <_fflush_r+0xc>

08015ae0 <memmove>:
 8015ae0:	4288      	cmp	r0, r1
 8015ae2:	b510      	push	{r4, lr}
 8015ae4:	eb01 0402 	add.w	r4, r1, r2
 8015ae8:	d902      	bls.n	8015af0 <memmove+0x10>
 8015aea:	4284      	cmp	r4, r0
 8015aec:	4623      	mov	r3, r4
 8015aee:	d807      	bhi.n	8015b00 <memmove+0x20>
 8015af0:	1e43      	subs	r3, r0, #1
 8015af2:	42a1      	cmp	r1, r4
 8015af4:	d008      	beq.n	8015b08 <memmove+0x28>
 8015af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015afe:	e7f8      	b.n	8015af2 <memmove+0x12>
 8015b00:	4402      	add	r2, r0
 8015b02:	4601      	mov	r1, r0
 8015b04:	428a      	cmp	r2, r1
 8015b06:	d100      	bne.n	8015b0a <memmove+0x2a>
 8015b08:	bd10      	pop	{r4, pc}
 8015b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b12:	e7f7      	b.n	8015b04 <memmove+0x24>

08015b14 <strncmp>:
 8015b14:	b510      	push	{r4, lr}
 8015b16:	b16a      	cbz	r2, 8015b34 <strncmp+0x20>
 8015b18:	3901      	subs	r1, #1
 8015b1a:	1884      	adds	r4, r0, r2
 8015b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d103      	bne.n	8015b30 <strncmp+0x1c>
 8015b28:	42a0      	cmp	r0, r4
 8015b2a:	d001      	beq.n	8015b30 <strncmp+0x1c>
 8015b2c:	2a00      	cmp	r2, #0
 8015b2e:	d1f5      	bne.n	8015b1c <strncmp+0x8>
 8015b30:	1ad0      	subs	r0, r2, r3
 8015b32:	bd10      	pop	{r4, pc}
 8015b34:	4610      	mov	r0, r2
 8015b36:	e7fc      	b.n	8015b32 <strncmp+0x1e>

08015b38 <nan>:
 8015b38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015b40 <nan+0x8>
 8015b3c:	4770      	bx	lr
 8015b3e:	bf00      	nop
 8015b40:	00000000 	.word	0x00000000
 8015b44:	7ff80000 	.word	0x7ff80000

08015b48 <__assert_func>:
 8015b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b4a:	4614      	mov	r4, r2
 8015b4c:	461a      	mov	r2, r3
 8015b4e:	4b09      	ldr	r3, [pc, #36]	; (8015b74 <__assert_func+0x2c>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4605      	mov	r5, r0
 8015b54:	68d8      	ldr	r0, [r3, #12]
 8015b56:	b14c      	cbz	r4, 8015b6c <__assert_func+0x24>
 8015b58:	4b07      	ldr	r3, [pc, #28]	; (8015b78 <__assert_func+0x30>)
 8015b5a:	9100      	str	r1, [sp, #0]
 8015b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b60:	4906      	ldr	r1, [pc, #24]	; (8015b7c <__assert_func+0x34>)
 8015b62:	462b      	mov	r3, r5
 8015b64:	f000 fbca 	bl	80162fc <fiprintf>
 8015b68:	f000 fbda 	bl	8016320 <abort>
 8015b6c:	4b04      	ldr	r3, [pc, #16]	; (8015b80 <__assert_func+0x38>)
 8015b6e:	461c      	mov	r4, r3
 8015b70:	e7f3      	b.n	8015b5a <__assert_func+0x12>
 8015b72:	bf00      	nop
 8015b74:	20000164 	.word	0x20000164
 8015b78:	08016fca 	.word	0x08016fca
 8015b7c:	08016fd7 	.word	0x08016fd7
 8015b80:	08017005 	.word	0x08017005

08015b84 <_calloc_r>:
 8015b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b86:	fba1 2402 	umull	r2, r4, r1, r2
 8015b8a:	b94c      	cbnz	r4, 8015ba0 <_calloc_r+0x1c>
 8015b8c:	4611      	mov	r1, r2
 8015b8e:	9201      	str	r2, [sp, #4]
 8015b90:	f7fc faa8 	bl	80120e4 <_malloc_r>
 8015b94:	9a01      	ldr	r2, [sp, #4]
 8015b96:	4605      	mov	r5, r0
 8015b98:	b930      	cbnz	r0, 8015ba8 <_calloc_r+0x24>
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	b003      	add	sp, #12
 8015b9e:	bd30      	pop	{r4, r5, pc}
 8015ba0:	220c      	movs	r2, #12
 8015ba2:	6002      	str	r2, [r0, #0]
 8015ba4:	2500      	movs	r5, #0
 8015ba6:	e7f8      	b.n	8015b9a <_calloc_r+0x16>
 8015ba8:	4621      	mov	r1, r4
 8015baa:	f7fd fae4 	bl	8013176 <memset>
 8015bae:	e7f4      	b.n	8015b9a <_calloc_r+0x16>

08015bb0 <rshift>:
 8015bb0:	6903      	ldr	r3, [r0, #16]
 8015bb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015bb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015bbe:	f100 0414 	add.w	r4, r0, #20
 8015bc2:	dd45      	ble.n	8015c50 <rshift+0xa0>
 8015bc4:	f011 011f 	ands.w	r1, r1, #31
 8015bc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015bcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015bd0:	d10c      	bne.n	8015bec <rshift+0x3c>
 8015bd2:	f100 0710 	add.w	r7, r0, #16
 8015bd6:	4629      	mov	r1, r5
 8015bd8:	42b1      	cmp	r1, r6
 8015bda:	d334      	bcc.n	8015c46 <rshift+0x96>
 8015bdc:	1a9b      	subs	r3, r3, r2
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	1eea      	subs	r2, r5, #3
 8015be2:	4296      	cmp	r6, r2
 8015be4:	bf38      	it	cc
 8015be6:	2300      	movcc	r3, #0
 8015be8:	4423      	add	r3, r4
 8015bea:	e015      	b.n	8015c18 <rshift+0x68>
 8015bec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015bf0:	f1c1 0820 	rsb	r8, r1, #32
 8015bf4:	40cf      	lsrs	r7, r1
 8015bf6:	f105 0e04 	add.w	lr, r5, #4
 8015bfa:	46a1      	mov	r9, r4
 8015bfc:	4576      	cmp	r6, lr
 8015bfe:	46f4      	mov	ip, lr
 8015c00:	d815      	bhi.n	8015c2e <rshift+0x7e>
 8015c02:	1a9a      	subs	r2, r3, r2
 8015c04:	0092      	lsls	r2, r2, #2
 8015c06:	3a04      	subs	r2, #4
 8015c08:	3501      	adds	r5, #1
 8015c0a:	42ae      	cmp	r6, r5
 8015c0c:	bf38      	it	cc
 8015c0e:	2200      	movcc	r2, #0
 8015c10:	18a3      	adds	r3, r4, r2
 8015c12:	50a7      	str	r7, [r4, r2]
 8015c14:	b107      	cbz	r7, 8015c18 <rshift+0x68>
 8015c16:	3304      	adds	r3, #4
 8015c18:	1b1a      	subs	r2, r3, r4
 8015c1a:	42a3      	cmp	r3, r4
 8015c1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015c20:	bf08      	it	eq
 8015c22:	2300      	moveq	r3, #0
 8015c24:	6102      	str	r2, [r0, #16]
 8015c26:	bf08      	it	eq
 8015c28:	6143      	streq	r3, [r0, #20]
 8015c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c2e:	f8dc c000 	ldr.w	ip, [ip]
 8015c32:	fa0c fc08 	lsl.w	ip, ip, r8
 8015c36:	ea4c 0707 	orr.w	r7, ip, r7
 8015c3a:	f849 7b04 	str.w	r7, [r9], #4
 8015c3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015c42:	40cf      	lsrs	r7, r1
 8015c44:	e7da      	b.n	8015bfc <rshift+0x4c>
 8015c46:	f851 cb04 	ldr.w	ip, [r1], #4
 8015c4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8015c4e:	e7c3      	b.n	8015bd8 <rshift+0x28>
 8015c50:	4623      	mov	r3, r4
 8015c52:	e7e1      	b.n	8015c18 <rshift+0x68>

08015c54 <__hexdig_fun>:
 8015c54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015c58:	2b09      	cmp	r3, #9
 8015c5a:	d802      	bhi.n	8015c62 <__hexdig_fun+0xe>
 8015c5c:	3820      	subs	r0, #32
 8015c5e:	b2c0      	uxtb	r0, r0
 8015c60:	4770      	bx	lr
 8015c62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015c66:	2b05      	cmp	r3, #5
 8015c68:	d801      	bhi.n	8015c6e <__hexdig_fun+0x1a>
 8015c6a:	3847      	subs	r0, #71	; 0x47
 8015c6c:	e7f7      	b.n	8015c5e <__hexdig_fun+0xa>
 8015c6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015c72:	2b05      	cmp	r3, #5
 8015c74:	d801      	bhi.n	8015c7a <__hexdig_fun+0x26>
 8015c76:	3827      	subs	r0, #39	; 0x27
 8015c78:	e7f1      	b.n	8015c5e <__hexdig_fun+0xa>
 8015c7a:	2000      	movs	r0, #0
 8015c7c:	4770      	bx	lr
	...

08015c80 <__gethex>:
 8015c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c84:	4617      	mov	r7, r2
 8015c86:	680a      	ldr	r2, [r1, #0]
 8015c88:	b085      	sub	sp, #20
 8015c8a:	f102 0b02 	add.w	fp, r2, #2
 8015c8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015c92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015c96:	4681      	mov	r9, r0
 8015c98:	468a      	mov	sl, r1
 8015c9a:	9302      	str	r3, [sp, #8]
 8015c9c:	32fe      	adds	r2, #254	; 0xfe
 8015c9e:	eb02 030b 	add.w	r3, r2, fp
 8015ca2:	46d8      	mov	r8, fp
 8015ca4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8015ca8:	9301      	str	r3, [sp, #4]
 8015caa:	2830      	cmp	r0, #48	; 0x30
 8015cac:	d0f7      	beq.n	8015c9e <__gethex+0x1e>
 8015cae:	f7ff ffd1 	bl	8015c54 <__hexdig_fun>
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	d138      	bne.n	8015d2a <__gethex+0xaa>
 8015cb8:	49a7      	ldr	r1, [pc, #668]	; (8015f58 <__gethex+0x2d8>)
 8015cba:	2201      	movs	r2, #1
 8015cbc:	4640      	mov	r0, r8
 8015cbe:	f7ff ff29 	bl	8015b14 <strncmp>
 8015cc2:	4606      	mov	r6, r0
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d169      	bne.n	8015d9c <__gethex+0x11c>
 8015cc8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015ccc:	465d      	mov	r5, fp
 8015cce:	f7ff ffc1 	bl	8015c54 <__hexdig_fun>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d064      	beq.n	8015da0 <__gethex+0x120>
 8015cd6:	465a      	mov	r2, fp
 8015cd8:	7810      	ldrb	r0, [r2, #0]
 8015cda:	2830      	cmp	r0, #48	; 0x30
 8015cdc:	4690      	mov	r8, r2
 8015cde:	f102 0201 	add.w	r2, r2, #1
 8015ce2:	d0f9      	beq.n	8015cd8 <__gethex+0x58>
 8015ce4:	f7ff ffb6 	bl	8015c54 <__hexdig_fun>
 8015ce8:	2301      	movs	r3, #1
 8015cea:	fab0 f480 	clz	r4, r0
 8015cee:	0964      	lsrs	r4, r4, #5
 8015cf0:	465e      	mov	r6, fp
 8015cf2:	9301      	str	r3, [sp, #4]
 8015cf4:	4642      	mov	r2, r8
 8015cf6:	4615      	mov	r5, r2
 8015cf8:	3201      	adds	r2, #1
 8015cfa:	7828      	ldrb	r0, [r5, #0]
 8015cfc:	f7ff ffaa 	bl	8015c54 <__hexdig_fun>
 8015d00:	2800      	cmp	r0, #0
 8015d02:	d1f8      	bne.n	8015cf6 <__gethex+0x76>
 8015d04:	4994      	ldr	r1, [pc, #592]	; (8015f58 <__gethex+0x2d8>)
 8015d06:	2201      	movs	r2, #1
 8015d08:	4628      	mov	r0, r5
 8015d0a:	f7ff ff03 	bl	8015b14 <strncmp>
 8015d0e:	b978      	cbnz	r0, 8015d30 <__gethex+0xb0>
 8015d10:	b946      	cbnz	r6, 8015d24 <__gethex+0xa4>
 8015d12:	1c6e      	adds	r6, r5, #1
 8015d14:	4632      	mov	r2, r6
 8015d16:	4615      	mov	r5, r2
 8015d18:	3201      	adds	r2, #1
 8015d1a:	7828      	ldrb	r0, [r5, #0]
 8015d1c:	f7ff ff9a 	bl	8015c54 <__hexdig_fun>
 8015d20:	2800      	cmp	r0, #0
 8015d22:	d1f8      	bne.n	8015d16 <__gethex+0x96>
 8015d24:	1b73      	subs	r3, r6, r5
 8015d26:	009e      	lsls	r6, r3, #2
 8015d28:	e004      	b.n	8015d34 <__gethex+0xb4>
 8015d2a:	2400      	movs	r4, #0
 8015d2c:	4626      	mov	r6, r4
 8015d2e:	e7e1      	b.n	8015cf4 <__gethex+0x74>
 8015d30:	2e00      	cmp	r6, #0
 8015d32:	d1f7      	bne.n	8015d24 <__gethex+0xa4>
 8015d34:	782b      	ldrb	r3, [r5, #0]
 8015d36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015d3a:	2b50      	cmp	r3, #80	; 0x50
 8015d3c:	d13d      	bne.n	8015dba <__gethex+0x13a>
 8015d3e:	786b      	ldrb	r3, [r5, #1]
 8015d40:	2b2b      	cmp	r3, #43	; 0x2b
 8015d42:	d02f      	beq.n	8015da4 <__gethex+0x124>
 8015d44:	2b2d      	cmp	r3, #45	; 0x2d
 8015d46:	d031      	beq.n	8015dac <__gethex+0x12c>
 8015d48:	1c69      	adds	r1, r5, #1
 8015d4a:	f04f 0b00 	mov.w	fp, #0
 8015d4e:	7808      	ldrb	r0, [r1, #0]
 8015d50:	f7ff ff80 	bl	8015c54 <__hexdig_fun>
 8015d54:	1e42      	subs	r2, r0, #1
 8015d56:	b2d2      	uxtb	r2, r2
 8015d58:	2a18      	cmp	r2, #24
 8015d5a:	d82e      	bhi.n	8015dba <__gethex+0x13a>
 8015d5c:	f1a0 0210 	sub.w	r2, r0, #16
 8015d60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015d64:	f7ff ff76 	bl	8015c54 <__hexdig_fun>
 8015d68:	f100 3cff 	add.w	ip, r0, #4294967295
 8015d6c:	fa5f fc8c 	uxtb.w	ip, ip
 8015d70:	f1bc 0f18 	cmp.w	ip, #24
 8015d74:	d91d      	bls.n	8015db2 <__gethex+0x132>
 8015d76:	f1bb 0f00 	cmp.w	fp, #0
 8015d7a:	d000      	beq.n	8015d7e <__gethex+0xfe>
 8015d7c:	4252      	negs	r2, r2
 8015d7e:	4416      	add	r6, r2
 8015d80:	f8ca 1000 	str.w	r1, [sl]
 8015d84:	b1dc      	cbz	r4, 8015dbe <__gethex+0x13e>
 8015d86:	9b01      	ldr	r3, [sp, #4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	bf14      	ite	ne
 8015d8c:	f04f 0800 	movne.w	r8, #0
 8015d90:	f04f 0806 	moveq.w	r8, #6
 8015d94:	4640      	mov	r0, r8
 8015d96:	b005      	add	sp, #20
 8015d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d9c:	4645      	mov	r5, r8
 8015d9e:	4626      	mov	r6, r4
 8015da0:	2401      	movs	r4, #1
 8015da2:	e7c7      	b.n	8015d34 <__gethex+0xb4>
 8015da4:	f04f 0b00 	mov.w	fp, #0
 8015da8:	1ca9      	adds	r1, r5, #2
 8015daa:	e7d0      	b.n	8015d4e <__gethex+0xce>
 8015dac:	f04f 0b01 	mov.w	fp, #1
 8015db0:	e7fa      	b.n	8015da8 <__gethex+0x128>
 8015db2:	230a      	movs	r3, #10
 8015db4:	fb03 0002 	mla	r0, r3, r2, r0
 8015db8:	e7d0      	b.n	8015d5c <__gethex+0xdc>
 8015dba:	4629      	mov	r1, r5
 8015dbc:	e7e0      	b.n	8015d80 <__gethex+0x100>
 8015dbe:	eba5 0308 	sub.w	r3, r5, r8
 8015dc2:	3b01      	subs	r3, #1
 8015dc4:	4621      	mov	r1, r4
 8015dc6:	2b07      	cmp	r3, #7
 8015dc8:	dc0a      	bgt.n	8015de0 <__gethex+0x160>
 8015dca:	4648      	mov	r0, r9
 8015dcc:	f7fe f93e 	bl	801404c <_Balloc>
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	b940      	cbnz	r0, 8015de6 <__gethex+0x166>
 8015dd4:	4b61      	ldr	r3, [pc, #388]	; (8015f5c <__gethex+0x2dc>)
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	21e4      	movs	r1, #228	; 0xe4
 8015dda:	4861      	ldr	r0, [pc, #388]	; (8015f60 <__gethex+0x2e0>)
 8015ddc:	f7ff feb4 	bl	8015b48 <__assert_func>
 8015de0:	3101      	adds	r1, #1
 8015de2:	105b      	asrs	r3, r3, #1
 8015de4:	e7ef      	b.n	8015dc6 <__gethex+0x146>
 8015de6:	f100 0a14 	add.w	sl, r0, #20
 8015dea:	2300      	movs	r3, #0
 8015dec:	495a      	ldr	r1, [pc, #360]	; (8015f58 <__gethex+0x2d8>)
 8015dee:	f8cd a004 	str.w	sl, [sp, #4]
 8015df2:	469b      	mov	fp, r3
 8015df4:	45a8      	cmp	r8, r5
 8015df6:	d342      	bcc.n	8015e7e <__gethex+0x1fe>
 8015df8:	9801      	ldr	r0, [sp, #4]
 8015dfa:	f840 bb04 	str.w	fp, [r0], #4
 8015dfe:	eba0 000a 	sub.w	r0, r0, sl
 8015e02:	1080      	asrs	r0, r0, #2
 8015e04:	6120      	str	r0, [r4, #16]
 8015e06:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015e0a:	4658      	mov	r0, fp
 8015e0c:	f7fe fa10 	bl	8014230 <__hi0bits>
 8015e10:	683d      	ldr	r5, [r7, #0]
 8015e12:	eba8 0000 	sub.w	r0, r8, r0
 8015e16:	42a8      	cmp	r0, r5
 8015e18:	dd59      	ble.n	8015ece <__gethex+0x24e>
 8015e1a:	eba0 0805 	sub.w	r8, r0, r5
 8015e1e:	4641      	mov	r1, r8
 8015e20:	4620      	mov	r0, r4
 8015e22:	f7fe fd9f 	bl	8014964 <__any_on>
 8015e26:	4683      	mov	fp, r0
 8015e28:	b1b8      	cbz	r0, 8015e5a <__gethex+0x1da>
 8015e2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8015e2e:	1159      	asrs	r1, r3, #5
 8015e30:	f003 021f 	and.w	r2, r3, #31
 8015e34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015e38:	f04f 0b01 	mov.w	fp, #1
 8015e3c:	fa0b f202 	lsl.w	r2, fp, r2
 8015e40:	420a      	tst	r2, r1
 8015e42:	d00a      	beq.n	8015e5a <__gethex+0x1da>
 8015e44:	455b      	cmp	r3, fp
 8015e46:	dd06      	ble.n	8015e56 <__gethex+0x1d6>
 8015e48:	f1a8 0102 	sub.w	r1, r8, #2
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f7fe fd89 	bl	8014964 <__any_on>
 8015e52:	2800      	cmp	r0, #0
 8015e54:	d138      	bne.n	8015ec8 <__gethex+0x248>
 8015e56:	f04f 0b02 	mov.w	fp, #2
 8015e5a:	4641      	mov	r1, r8
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	f7ff fea7 	bl	8015bb0 <rshift>
 8015e62:	4446      	add	r6, r8
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	42b3      	cmp	r3, r6
 8015e68:	da41      	bge.n	8015eee <__gethex+0x26e>
 8015e6a:	4621      	mov	r1, r4
 8015e6c:	4648      	mov	r0, r9
 8015e6e:	f7fe f92d 	bl	80140cc <_Bfree>
 8015e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e74:	2300      	movs	r3, #0
 8015e76:	6013      	str	r3, [r2, #0]
 8015e78:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015e7c:	e78a      	b.n	8015d94 <__gethex+0x114>
 8015e7e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015e82:	2a2e      	cmp	r2, #46	; 0x2e
 8015e84:	d014      	beq.n	8015eb0 <__gethex+0x230>
 8015e86:	2b20      	cmp	r3, #32
 8015e88:	d106      	bne.n	8015e98 <__gethex+0x218>
 8015e8a:	9b01      	ldr	r3, [sp, #4]
 8015e8c:	f843 bb04 	str.w	fp, [r3], #4
 8015e90:	f04f 0b00 	mov.w	fp, #0
 8015e94:	9301      	str	r3, [sp, #4]
 8015e96:	465b      	mov	r3, fp
 8015e98:	7828      	ldrb	r0, [r5, #0]
 8015e9a:	9303      	str	r3, [sp, #12]
 8015e9c:	f7ff feda 	bl	8015c54 <__hexdig_fun>
 8015ea0:	9b03      	ldr	r3, [sp, #12]
 8015ea2:	f000 000f 	and.w	r0, r0, #15
 8015ea6:	4098      	lsls	r0, r3
 8015ea8:	ea4b 0b00 	orr.w	fp, fp, r0
 8015eac:	3304      	adds	r3, #4
 8015eae:	e7a1      	b.n	8015df4 <__gethex+0x174>
 8015eb0:	45a8      	cmp	r8, r5
 8015eb2:	d8e8      	bhi.n	8015e86 <__gethex+0x206>
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	4628      	mov	r0, r5
 8015eb8:	9303      	str	r3, [sp, #12]
 8015eba:	f7ff fe2b 	bl	8015b14 <strncmp>
 8015ebe:	4926      	ldr	r1, [pc, #152]	; (8015f58 <__gethex+0x2d8>)
 8015ec0:	9b03      	ldr	r3, [sp, #12]
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d1df      	bne.n	8015e86 <__gethex+0x206>
 8015ec6:	e795      	b.n	8015df4 <__gethex+0x174>
 8015ec8:	f04f 0b03 	mov.w	fp, #3
 8015ecc:	e7c5      	b.n	8015e5a <__gethex+0x1da>
 8015ece:	da0b      	bge.n	8015ee8 <__gethex+0x268>
 8015ed0:	eba5 0800 	sub.w	r8, r5, r0
 8015ed4:	4621      	mov	r1, r4
 8015ed6:	4642      	mov	r2, r8
 8015ed8:	4648      	mov	r0, r9
 8015eda:	f7fe fb11 	bl	8014500 <__lshift>
 8015ede:	eba6 0608 	sub.w	r6, r6, r8
 8015ee2:	4604      	mov	r4, r0
 8015ee4:	f100 0a14 	add.w	sl, r0, #20
 8015ee8:	f04f 0b00 	mov.w	fp, #0
 8015eec:	e7ba      	b.n	8015e64 <__gethex+0x1e4>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	42b3      	cmp	r3, r6
 8015ef2:	dd73      	ble.n	8015fdc <__gethex+0x35c>
 8015ef4:	1b9e      	subs	r6, r3, r6
 8015ef6:	42b5      	cmp	r5, r6
 8015ef8:	dc34      	bgt.n	8015f64 <__gethex+0x2e4>
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2b02      	cmp	r3, #2
 8015efe:	d023      	beq.n	8015f48 <__gethex+0x2c8>
 8015f00:	2b03      	cmp	r3, #3
 8015f02:	d025      	beq.n	8015f50 <__gethex+0x2d0>
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d115      	bne.n	8015f34 <__gethex+0x2b4>
 8015f08:	42b5      	cmp	r5, r6
 8015f0a:	d113      	bne.n	8015f34 <__gethex+0x2b4>
 8015f0c:	2d01      	cmp	r5, #1
 8015f0e:	d10b      	bne.n	8015f28 <__gethex+0x2a8>
 8015f10:	9a02      	ldr	r2, [sp, #8]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6013      	str	r3, [r2, #0]
 8015f16:	2301      	movs	r3, #1
 8015f18:	6123      	str	r3, [r4, #16]
 8015f1a:	f8ca 3000 	str.w	r3, [sl]
 8015f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f20:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015f24:	601c      	str	r4, [r3, #0]
 8015f26:	e735      	b.n	8015d94 <__gethex+0x114>
 8015f28:	1e69      	subs	r1, r5, #1
 8015f2a:	4620      	mov	r0, r4
 8015f2c:	f7fe fd1a 	bl	8014964 <__any_on>
 8015f30:	2800      	cmp	r0, #0
 8015f32:	d1ed      	bne.n	8015f10 <__gethex+0x290>
 8015f34:	4621      	mov	r1, r4
 8015f36:	4648      	mov	r0, r9
 8015f38:	f7fe f8c8 	bl	80140cc <_Bfree>
 8015f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f3e:	2300      	movs	r3, #0
 8015f40:	6013      	str	r3, [r2, #0]
 8015f42:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015f46:	e725      	b.n	8015d94 <__gethex+0x114>
 8015f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d1f2      	bne.n	8015f34 <__gethex+0x2b4>
 8015f4e:	e7df      	b.n	8015f10 <__gethex+0x290>
 8015f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d1dc      	bne.n	8015f10 <__gethex+0x290>
 8015f56:	e7ed      	b.n	8015f34 <__gethex+0x2b4>
 8015f58:	08016e5c 	.word	0x08016e5c
 8015f5c:	08016cf1 	.word	0x08016cf1
 8015f60:	08017006 	.word	0x08017006
 8015f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8015f68:	f1bb 0f00 	cmp.w	fp, #0
 8015f6c:	d133      	bne.n	8015fd6 <__gethex+0x356>
 8015f6e:	f1b8 0f00 	cmp.w	r8, #0
 8015f72:	d004      	beq.n	8015f7e <__gethex+0x2fe>
 8015f74:	4641      	mov	r1, r8
 8015f76:	4620      	mov	r0, r4
 8015f78:	f7fe fcf4 	bl	8014964 <__any_on>
 8015f7c:	4683      	mov	fp, r0
 8015f7e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015f82:	2301      	movs	r3, #1
 8015f84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015f88:	f008 081f 	and.w	r8, r8, #31
 8015f8c:	fa03 f308 	lsl.w	r3, r3, r8
 8015f90:	4213      	tst	r3, r2
 8015f92:	4631      	mov	r1, r6
 8015f94:	4620      	mov	r0, r4
 8015f96:	bf18      	it	ne
 8015f98:	f04b 0b02 	orrne.w	fp, fp, #2
 8015f9c:	1bad      	subs	r5, r5, r6
 8015f9e:	f7ff fe07 	bl	8015bb0 <rshift>
 8015fa2:	687e      	ldr	r6, [r7, #4]
 8015fa4:	f04f 0802 	mov.w	r8, #2
 8015fa8:	f1bb 0f00 	cmp.w	fp, #0
 8015fac:	d04a      	beq.n	8016044 <__gethex+0x3c4>
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2b02      	cmp	r3, #2
 8015fb2:	d016      	beq.n	8015fe2 <__gethex+0x362>
 8015fb4:	2b03      	cmp	r3, #3
 8015fb6:	d018      	beq.n	8015fea <__gethex+0x36a>
 8015fb8:	2b01      	cmp	r3, #1
 8015fba:	d109      	bne.n	8015fd0 <__gethex+0x350>
 8015fbc:	f01b 0f02 	tst.w	fp, #2
 8015fc0:	d006      	beq.n	8015fd0 <__gethex+0x350>
 8015fc2:	f8da 3000 	ldr.w	r3, [sl]
 8015fc6:	ea4b 0b03 	orr.w	fp, fp, r3
 8015fca:	f01b 0f01 	tst.w	fp, #1
 8015fce:	d10f      	bne.n	8015ff0 <__gethex+0x370>
 8015fd0:	f048 0810 	orr.w	r8, r8, #16
 8015fd4:	e036      	b.n	8016044 <__gethex+0x3c4>
 8015fd6:	f04f 0b01 	mov.w	fp, #1
 8015fda:	e7d0      	b.n	8015f7e <__gethex+0x2fe>
 8015fdc:	f04f 0801 	mov.w	r8, #1
 8015fe0:	e7e2      	b.n	8015fa8 <__gethex+0x328>
 8015fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fe4:	f1c3 0301 	rsb	r3, r3, #1
 8015fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d0ef      	beq.n	8015fd0 <__gethex+0x350>
 8015ff0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ff4:	f104 0214 	add.w	r2, r4, #20
 8015ff8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015ffc:	9301      	str	r3, [sp, #4]
 8015ffe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8016002:	2300      	movs	r3, #0
 8016004:	4694      	mov	ip, r2
 8016006:	f852 1b04 	ldr.w	r1, [r2], #4
 801600a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801600e:	d01e      	beq.n	801604e <__gethex+0x3ce>
 8016010:	3101      	adds	r1, #1
 8016012:	f8cc 1000 	str.w	r1, [ip]
 8016016:	f1b8 0f02 	cmp.w	r8, #2
 801601a:	f104 0214 	add.w	r2, r4, #20
 801601e:	d13d      	bne.n	801609c <__gethex+0x41c>
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	3b01      	subs	r3, #1
 8016024:	42ab      	cmp	r3, r5
 8016026:	d10b      	bne.n	8016040 <__gethex+0x3c0>
 8016028:	1169      	asrs	r1, r5, #5
 801602a:	2301      	movs	r3, #1
 801602c:	f005 051f 	and.w	r5, r5, #31
 8016030:	fa03 f505 	lsl.w	r5, r3, r5
 8016034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016038:	421d      	tst	r5, r3
 801603a:	bf18      	it	ne
 801603c:	f04f 0801 	movne.w	r8, #1
 8016040:	f048 0820 	orr.w	r8, r8, #32
 8016044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016046:	601c      	str	r4, [r3, #0]
 8016048:	9b02      	ldr	r3, [sp, #8]
 801604a:	601e      	str	r6, [r3, #0]
 801604c:	e6a2      	b.n	8015d94 <__gethex+0x114>
 801604e:	4290      	cmp	r0, r2
 8016050:	f842 3c04 	str.w	r3, [r2, #-4]
 8016054:	d8d6      	bhi.n	8016004 <__gethex+0x384>
 8016056:	68a2      	ldr	r2, [r4, #8]
 8016058:	4593      	cmp	fp, r2
 801605a:	db17      	blt.n	801608c <__gethex+0x40c>
 801605c:	6861      	ldr	r1, [r4, #4]
 801605e:	4648      	mov	r0, r9
 8016060:	3101      	adds	r1, #1
 8016062:	f7fd fff3 	bl	801404c <_Balloc>
 8016066:	4682      	mov	sl, r0
 8016068:	b918      	cbnz	r0, 8016072 <__gethex+0x3f2>
 801606a:	4b1b      	ldr	r3, [pc, #108]	; (80160d8 <__gethex+0x458>)
 801606c:	4602      	mov	r2, r0
 801606e:	2184      	movs	r1, #132	; 0x84
 8016070:	e6b3      	b.n	8015dda <__gethex+0x15a>
 8016072:	6922      	ldr	r2, [r4, #16]
 8016074:	3202      	adds	r2, #2
 8016076:	f104 010c 	add.w	r1, r4, #12
 801607a:	0092      	lsls	r2, r2, #2
 801607c:	300c      	adds	r0, #12
 801607e:	f7fd f909 	bl	8013294 <memcpy>
 8016082:	4621      	mov	r1, r4
 8016084:	4648      	mov	r0, r9
 8016086:	f7fe f821 	bl	80140cc <_Bfree>
 801608a:	4654      	mov	r4, sl
 801608c:	6922      	ldr	r2, [r4, #16]
 801608e:	1c51      	adds	r1, r2, #1
 8016090:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016094:	6121      	str	r1, [r4, #16]
 8016096:	2101      	movs	r1, #1
 8016098:	6151      	str	r1, [r2, #20]
 801609a:	e7bc      	b.n	8016016 <__gethex+0x396>
 801609c:	6921      	ldr	r1, [r4, #16]
 801609e:	4559      	cmp	r1, fp
 80160a0:	dd0b      	ble.n	80160ba <__gethex+0x43a>
 80160a2:	2101      	movs	r1, #1
 80160a4:	4620      	mov	r0, r4
 80160a6:	f7ff fd83 	bl	8015bb0 <rshift>
 80160aa:	68bb      	ldr	r3, [r7, #8]
 80160ac:	3601      	adds	r6, #1
 80160ae:	42b3      	cmp	r3, r6
 80160b0:	f6ff aedb 	blt.w	8015e6a <__gethex+0x1ea>
 80160b4:	f04f 0801 	mov.w	r8, #1
 80160b8:	e7c2      	b.n	8016040 <__gethex+0x3c0>
 80160ba:	f015 051f 	ands.w	r5, r5, #31
 80160be:	d0f9      	beq.n	80160b4 <__gethex+0x434>
 80160c0:	9b01      	ldr	r3, [sp, #4]
 80160c2:	441a      	add	r2, r3
 80160c4:	f1c5 0520 	rsb	r5, r5, #32
 80160c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80160cc:	f7fe f8b0 	bl	8014230 <__hi0bits>
 80160d0:	42a8      	cmp	r0, r5
 80160d2:	dbe6      	blt.n	80160a2 <__gethex+0x422>
 80160d4:	e7ee      	b.n	80160b4 <__gethex+0x434>
 80160d6:	bf00      	nop
 80160d8:	08016cf1 	.word	0x08016cf1

080160dc <L_shift>:
 80160dc:	f1c2 0208 	rsb	r2, r2, #8
 80160e0:	0092      	lsls	r2, r2, #2
 80160e2:	b570      	push	{r4, r5, r6, lr}
 80160e4:	f1c2 0620 	rsb	r6, r2, #32
 80160e8:	6843      	ldr	r3, [r0, #4]
 80160ea:	6804      	ldr	r4, [r0, #0]
 80160ec:	fa03 f506 	lsl.w	r5, r3, r6
 80160f0:	432c      	orrs	r4, r5
 80160f2:	40d3      	lsrs	r3, r2
 80160f4:	6004      	str	r4, [r0, #0]
 80160f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80160fa:	4288      	cmp	r0, r1
 80160fc:	d3f4      	bcc.n	80160e8 <L_shift+0xc>
 80160fe:	bd70      	pop	{r4, r5, r6, pc}

08016100 <__match>:
 8016100:	b530      	push	{r4, r5, lr}
 8016102:	6803      	ldr	r3, [r0, #0]
 8016104:	3301      	adds	r3, #1
 8016106:	f811 4b01 	ldrb.w	r4, [r1], #1
 801610a:	b914      	cbnz	r4, 8016112 <__match+0x12>
 801610c:	6003      	str	r3, [r0, #0]
 801610e:	2001      	movs	r0, #1
 8016110:	bd30      	pop	{r4, r5, pc}
 8016112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016116:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801611a:	2d19      	cmp	r5, #25
 801611c:	bf98      	it	ls
 801611e:	3220      	addls	r2, #32
 8016120:	42a2      	cmp	r2, r4
 8016122:	d0f0      	beq.n	8016106 <__match+0x6>
 8016124:	2000      	movs	r0, #0
 8016126:	e7f3      	b.n	8016110 <__match+0x10>

08016128 <__hexnan>:
 8016128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801612c:	680b      	ldr	r3, [r1, #0]
 801612e:	6801      	ldr	r1, [r0, #0]
 8016130:	115e      	asrs	r6, r3, #5
 8016132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016136:	f013 031f 	ands.w	r3, r3, #31
 801613a:	b087      	sub	sp, #28
 801613c:	bf18      	it	ne
 801613e:	3604      	addne	r6, #4
 8016140:	2500      	movs	r5, #0
 8016142:	1f37      	subs	r7, r6, #4
 8016144:	4682      	mov	sl, r0
 8016146:	4690      	mov	r8, r2
 8016148:	9301      	str	r3, [sp, #4]
 801614a:	f846 5c04 	str.w	r5, [r6, #-4]
 801614e:	46b9      	mov	r9, r7
 8016150:	463c      	mov	r4, r7
 8016152:	9502      	str	r5, [sp, #8]
 8016154:	46ab      	mov	fp, r5
 8016156:	784a      	ldrb	r2, [r1, #1]
 8016158:	1c4b      	adds	r3, r1, #1
 801615a:	9303      	str	r3, [sp, #12]
 801615c:	b342      	cbz	r2, 80161b0 <__hexnan+0x88>
 801615e:	4610      	mov	r0, r2
 8016160:	9105      	str	r1, [sp, #20]
 8016162:	9204      	str	r2, [sp, #16]
 8016164:	f7ff fd76 	bl	8015c54 <__hexdig_fun>
 8016168:	2800      	cmp	r0, #0
 801616a:	d14f      	bne.n	801620c <__hexnan+0xe4>
 801616c:	9a04      	ldr	r2, [sp, #16]
 801616e:	9905      	ldr	r1, [sp, #20]
 8016170:	2a20      	cmp	r2, #32
 8016172:	d818      	bhi.n	80161a6 <__hexnan+0x7e>
 8016174:	9b02      	ldr	r3, [sp, #8]
 8016176:	459b      	cmp	fp, r3
 8016178:	dd13      	ble.n	80161a2 <__hexnan+0x7a>
 801617a:	454c      	cmp	r4, r9
 801617c:	d206      	bcs.n	801618c <__hexnan+0x64>
 801617e:	2d07      	cmp	r5, #7
 8016180:	dc04      	bgt.n	801618c <__hexnan+0x64>
 8016182:	462a      	mov	r2, r5
 8016184:	4649      	mov	r1, r9
 8016186:	4620      	mov	r0, r4
 8016188:	f7ff ffa8 	bl	80160dc <L_shift>
 801618c:	4544      	cmp	r4, r8
 801618e:	d950      	bls.n	8016232 <__hexnan+0x10a>
 8016190:	2300      	movs	r3, #0
 8016192:	f1a4 0904 	sub.w	r9, r4, #4
 8016196:	f844 3c04 	str.w	r3, [r4, #-4]
 801619a:	f8cd b008 	str.w	fp, [sp, #8]
 801619e:	464c      	mov	r4, r9
 80161a0:	461d      	mov	r5, r3
 80161a2:	9903      	ldr	r1, [sp, #12]
 80161a4:	e7d7      	b.n	8016156 <__hexnan+0x2e>
 80161a6:	2a29      	cmp	r2, #41	; 0x29
 80161a8:	d155      	bne.n	8016256 <__hexnan+0x12e>
 80161aa:	3102      	adds	r1, #2
 80161ac:	f8ca 1000 	str.w	r1, [sl]
 80161b0:	f1bb 0f00 	cmp.w	fp, #0
 80161b4:	d04f      	beq.n	8016256 <__hexnan+0x12e>
 80161b6:	454c      	cmp	r4, r9
 80161b8:	d206      	bcs.n	80161c8 <__hexnan+0xa0>
 80161ba:	2d07      	cmp	r5, #7
 80161bc:	dc04      	bgt.n	80161c8 <__hexnan+0xa0>
 80161be:	462a      	mov	r2, r5
 80161c0:	4649      	mov	r1, r9
 80161c2:	4620      	mov	r0, r4
 80161c4:	f7ff ff8a 	bl	80160dc <L_shift>
 80161c8:	4544      	cmp	r4, r8
 80161ca:	d934      	bls.n	8016236 <__hexnan+0x10e>
 80161cc:	f1a8 0204 	sub.w	r2, r8, #4
 80161d0:	4623      	mov	r3, r4
 80161d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80161d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80161da:	429f      	cmp	r7, r3
 80161dc:	d2f9      	bcs.n	80161d2 <__hexnan+0xaa>
 80161de:	1b3b      	subs	r3, r7, r4
 80161e0:	f023 0303 	bic.w	r3, r3, #3
 80161e4:	3304      	adds	r3, #4
 80161e6:	3e03      	subs	r6, #3
 80161e8:	3401      	adds	r4, #1
 80161ea:	42a6      	cmp	r6, r4
 80161ec:	bf38      	it	cc
 80161ee:	2304      	movcc	r3, #4
 80161f0:	4443      	add	r3, r8
 80161f2:	2200      	movs	r2, #0
 80161f4:	f843 2b04 	str.w	r2, [r3], #4
 80161f8:	429f      	cmp	r7, r3
 80161fa:	d2fb      	bcs.n	80161f4 <__hexnan+0xcc>
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	b91b      	cbnz	r3, 8016208 <__hexnan+0xe0>
 8016200:	4547      	cmp	r7, r8
 8016202:	d126      	bne.n	8016252 <__hexnan+0x12a>
 8016204:	2301      	movs	r3, #1
 8016206:	603b      	str	r3, [r7, #0]
 8016208:	2005      	movs	r0, #5
 801620a:	e025      	b.n	8016258 <__hexnan+0x130>
 801620c:	3501      	adds	r5, #1
 801620e:	2d08      	cmp	r5, #8
 8016210:	f10b 0b01 	add.w	fp, fp, #1
 8016214:	dd06      	ble.n	8016224 <__hexnan+0xfc>
 8016216:	4544      	cmp	r4, r8
 8016218:	d9c3      	bls.n	80161a2 <__hexnan+0x7a>
 801621a:	2300      	movs	r3, #0
 801621c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016220:	2501      	movs	r5, #1
 8016222:	3c04      	subs	r4, #4
 8016224:	6822      	ldr	r2, [r4, #0]
 8016226:	f000 000f 	and.w	r0, r0, #15
 801622a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801622e:	6020      	str	r0, [r4, #0]
 8016230:	e7b7      	b.n	80161a2 <__hexnan+0x7a>
 8016232:	2508      	movs	r5, #8
 8016234:	e7b5      	b.n	80161a2 <__hexnan+0x7a>
 8016236:	9b01      	ldr	r3, [sp, #4]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d0df      	beq.n	80161fc <__hexnan+0xd4>
 801623c:	f1c3 0320 	rsb	r3, r3, #32
 8016240:	f04f 32ff 	mov.w	r2, #4294967295
 8016244:	40da      	lsrs	r2, r3
 8016246:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801624a:	4013      	ands	r3, r2
 801624c:	f846 3c04 	str.w	r3, [r6, #-4]
 8016250:	e7d4      	b.n	80161fc <__hexnan+0xd4>
 8016252:	3f04      	subs	r7, #4
 8016254:	e7d2      	b.n	80161fc <__hexnan+0xd4>
 8016256:	2004      	movs	r0, #4
 8016258:	b007      	add	sp, #28
 801625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801625e <__ascii_mbtowc>:
 801625e:	b082      	sub	sp, #8
 8016260:	b901      	cbnz	r1, 8016264 <__ascii_mbtowc+0x6>
 8016262:	a901      	add	r1, sp, #4
 8016264:	b142      	cbz	r2, 8016278 <__ascii_mbtowc+0x1a>
 8016266:	b14b      	cbz	r3, 801627c <__ascii_mbtowc+0x1e>
 8016268:	7813      	ldrb	r3, [r2, #0]
 801626a:	600b      	str	r3, [r1, #0]
 801626c:	7812      	ldrb	r2, [r2, #0]
 801626e:	1e10      	subs	r0, r2, #0
 8016270:	bf18      	it	ne
 8016272:	2001      	movne	r0, #1
 8016274:	b002      	add	sp, #8
 8016276:	4770      	bx	lr
 8016278:	4610      	mov	r0, r2
 801627a:	e7fb      	b.n	8016274 <__ascii_mbtowc+0x16>
 801627c:	f06f 0001 	mvn.w	r0, #1
 8016280:	e7f8      	b.n	8016274 <__ascii_mbtowc+0x16>

08016282 <_realloc_r>:
 8016282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016286:	4680      	mov	r8, r0
 8016288:	4614      	mov	r4, r2
 801628a:	460e      	mov	r6, r1
 801628c:	b921      	cbnz	r1, 8016298 <_realloc_r+0x16>
 801628e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016292:	4611      	mov	r1, r2
 8016294:	f7fb bf26 	b.w	80120e4 <_malloc_r>
 8016298:	b92a      	cbnz	r2, 80162a6 <_realloc_r+0x24>
 801629a:	f7fd fe8b 	bl	8013fb4 <_free_r>
 801629e:	4625      	mov	r5, r4
 80162a0:	4628      	mov	r0, r5
 80162a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a6:	f000 f842 	bl	801632e <_malloc_usable_size_r>
 80162aa:	4284      	cmp	r4, r0
 80162ac:	4607      	mov	r7, r0
 80162ae:	d802      	bhi.n	80162b6 <_realloc_r+0x34>
 80162b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162b4:	d812      	bhi.n	80162dc <_realloc_r+0x5a>
 80162b6:	4621      	mov	r1, r4
 80162b8:	4640      	mov	r0, r8
 80162ba:	f7fb ff13 	bl	80120e4 <_malloc_r>
 80162be:	4605      	mov	r5, r0
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d0ed      	beq.n	80162a0 <_realloc_r+0x1e>
 80162c4:	42bc      	cmp	r4, r7
 80162c6:	4622      	mov	r2, r4
 80162c8:	4631      	mov	r1, r6
 80162ca:	bf28      	it	cs
 80162cc:	463a      	movcs	r2, r7
 80162ce:	f7fc ffe1 	bl	8013294 <memcpy>
 80162d2:	4631      	mov	r1, r6
 80162d4:	4640      	mov	r0, r8
 80162d6:	f7fd fe6d 	bl	8013fb4 <_free_r>
 80162da:	e7e1      	b.n	80162a0 <_realloc_r+0x1e>
 80162dc:	4635      	mov	r5, r6
 80162de:	e7df      	b.n	80162a0 <_realloc_r+0x1e>

080162e0 <__ascii_wctomb>:
 80162e0:	b149      	cbz	r1, 80162f6 <__ascii_wctomb+0x16>
 80162e2:	2aff      	cmp	r2, #255	; 0xff
 80162e4:	bf85      	ittet	hi
 80162e6:	238a      	movhi	r3, #138	; 0x8a
 80162e8:	6003      	strhi	r3, [r0, #0]
 80162ea:	700a      	strbls	r2, [r1, #0]
 80162ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80162f0:	bf98      	it	ls
 80162f2:	2001      	movls	r0, #1
 80162f4:	4770      	bx	lr
 80162f6:	4608      	mov	r0, r1
 80162f8:	4770      	bx	lr
	...

080162fc <fiprintf>:
 80162fc:	b40e      	push	{r1, r2, r3}
 80162fe:	b503      	push	{r0, r1, lr}
 8016300:	4601      	mov	r1, r0
 8016302:	ab03      	add	r3, sp, #12
 8016304:	4805      	ldr	r0, [pc, #20]	; (801631c <fiprintf+0x20>)
 8016306:	f853 2b04 	ldr.w	r2, [r3], #4
 801630a:	6800      	ldr	r0, [r0, #0]
 801630c:	9301      	str	r3, [sp, #4]
 801630e:	f000 f83f 	bl	8016390 <_vfiprintf_r>
 8016312:	b002      	add	sp, #8
 8016314:	f85d eb04 	ldr.w	lr, [sp], #4
 8016318:	b003      	add	sp, #12
 801631a:	4770      	bx	lr
 801631c:	20000164 	.word	0x20000164

08016320 <abort>:
 8016320:	b508      	push	{r3, lr}
 8016322:	2006      	movs	r0, #6
 8016324:	f000 fa0c 	bl	8016740 <raise>
 8016328:	2001      	movs	r0, #1
 801632a:	f7ed fa69 	bl	8003800 <_exit>

0801632e <_malloc_usable_size_r>:
 801632e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016332:	1f18      	subs	r0, r3, #4
 8016334:	2b00      	cmp	r3, #0
 8016336:	bfbc      	itt	lt
 8016338:	580b      	ldrlt	r3, [r1, r0]
 801633a:	18c0      	addlt	r0, r0, r3
 801633c:	4770      	bx	lr

0801633e <__sfputc_r>:
 801633e:	6893      	ldr	r3, [r2, #8]
 8016340:	3b01      	subs	r3, #1
 8016342:	2b00      	cmp	r3, #0
 8016344:	b410      	push	{r4}
 8016346:	6093      	str	r3, [r2, #8]
 8016348:	da08      	bge.n	801635c <__sfputc_r+0x1e>
 801634a:	6994      	ldr	r4, [r2, #24]
 801634c:	42a3      	cmp	r3, r4
 801634e:	db01      	blt.n	8016354 <__sfputc_r+0x16>
 8016350:	290a      	cmp	r1, #10
 8016352:	d103      	bne.n	801635c <__sfputc_r+0x1e>
 8016354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016358:	f000 b934 	b.w	80165c4 <__swbuf_r>
 801635c:	6813      	ldr	r3, [r2, #0]
 801635e:	1c58      	adds	r0, r3, #1
 8016360:	6010      	str	r0, [r2, #0]
 8016362:	7019      	strb	r1, [r3, #0]
 8016364:	4608      	mov	r0, r1
 8016366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801636a:	4770      	bx	lr

0801636c <__sfputs_r>:
 801636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801636e:	4606      	mov	r6, r0
 8016370:	460f      	mov	r7, r1
 8016372:	4614      	mov	r4, r2
 8016374:	18d5      	adds	r5, r2, r3
 8016376:	42ac      	cmp	r4, r5
 8016378:	d101      	bne.n	801637e <__sfputs_r+0x12>
 801637a:	2000      	movs	r0, #0
 801637c:	e007      	b.n	801638e <__sfputs_r+0x22>
 801637e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016382:	463a      	mov	r2, r7
 8016384:	4630      	mov	r0, r6
 8016386:	f7ff ffda 	bl	801633e <__sfputc_r>
 801638a:	1c43      	adds	r3, r0, #1
 801638c:	d1f3      	bne.n	8016376 <__sfputs_r+0xa>
 801638e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016390 <_vfiprintf_r>:
 8016390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016394:	460d      	mov	r5, r1
 8016396:	b09d      	sub	sp, #116	; 0x74
 8016398:	4614      	mov	r4, r2
 801639a:	4698      	mov	r8, r3
 801639c:	4606      	mov	r6, r0
 801639e:	b118      	cbz	r0, 80163a8 <_vfiprintf_r+0x18>
 80163a0:	6a03      	ldr	r3, [r0, #32]
 80163a2:	b90b      	cbnz	r3, 80163a8 <_vfiprintf_r+0x18>
 80163a4:	f7fc fe1a 	bl	8012fdc <__sinit>
 80163a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163aa:	07d9      	lsls	r1, r3, #31
 80163ac:	d405      	bmi.n	80163ba <_vfiprintf_r+0x2a>
 80163ae:	89ab      	ldrh	r3, [r5, #12]
 80163b0:	059a      	lsls	r2, r3, #22
 80163b2:	d402      	bmi.n	80163ba <_vfiprintf_r+0x2a>
 80163b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163b6:	f7fc ff6b 	bl	8013290 <__retarget_lock_acquire_recursive>
 80163ba:	89ab      	ldrh	r3, [r5, #12]
 80163bc:	071b      	lsls	r3, r3, #28
 80163be:	d501      	bpl.n	80163c4 <_vfiprintf_r+0x34>
 80163c0:	692b      	ldr	r3, [r5, #16]
 80163c2:	b99b      	cbnz	r3, 80163ec <_vfiprintf_r+0x5c>
 80163c4:	4629      	mov	r1, r5
 80163c6:	4630      	mov	r0, r6
 80163c8:	f000 f93a 	bl	8016640 <__swsetup_r>
 80163cc:	b170      	cbz	r0, 80163ec <_vfiprintf_r+0x5c>
 80163ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163d0:	07dc      	lsls	r4, r3, #31
 80163d2:	d504      	bpl.n	80163de <_vfiprintf_r+0x4e>
 80163d4:	f04f 30ff 	mov.w	r0, #4294967295
 80163d8:	b01d      	add	sp, #116	; 0x74
 80163da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163de:	89ab      	ldrh	r3, [r5, #12]
 80163e0:	0598      	lsls	r0, r3, #22
 80163e2:	d4f7      	bmi.n	80163d4 <_vfiprintf_r+0x44>
 80163e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163e6:	f7fc ff54 	bl	8013292 <__retarget_lock_release_recursive>
 80163ea:	e7f3      	b.n	80163d4 <_vfiprintf_r+0x44>
 80163ec:	2300      	movs	r3, #0
 80163ee:	9309      	str	r3, [sp, #36]	; 0x24
 80163f0:	2320      	movs	r3, #32
 80163f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80163fa:	2330      	movs	r3, #48	; 0x30
 80163fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80165b0 <_vfiprintf_r+0x220>
 8016400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016404:	f04f 0901 	mov.w	r9, #1
 8016408:	4623      	mov	r3, r4
 801640a:	469a      	mov	sl, r3
 801640c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016410:	b10a      	cbz	r2, 8016416 <_vfiprintf_r+0x86>
 8016412:	2a25      	cmp	r2, #37	; 0x25
 8016414:	d1f9      	bne.n	801640a <_vfiprintf_r+0x7a>
 8016416:	ebba 0b04 	subs.w	fp, sl, r4
 801641a:	d00b      	beq.n	8016434 <_vfiprintf_r+0xa4>
 801641c:	465b      	mov	r3, fp
 801641e:	4622      	mov	r2, r4
 8016420:	4629      	mov	r1, r5
 8016422:	4630      	mov	r0, r6
 8016424:	f7ff ffa2 	bl	801636c <__sfputs_r>
 8016428:	3001      	adds	r0, #1
 801642a:	f000 80a9 	beq.w	8016580 <_vfiprintf_r+0x1f0>
 801642e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016430:	445a      	add	r2, fp
 8016432:	9209      	str	r2, [sp, #36]	; 0x24
 8016434:	f89a 3000 	ldrb.w	r3, [sl]
 8016438:	2b00      	cmp	r3, #0
 801643a:	f000 80a1 	beq.w	8016580 <_vfiprintf_r+0x1f0>
 801643e:	2300      	movs	r3, #0
 8016440:	f04f 32ff 	mov.w	r2, #4294967295
 8016444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016448:	f10a 0a01 	add.w	sl, sl, #1
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	9307      	str	r3, [sp, #28]
 8016450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016454:	931a      	str	r3, [sp, #104]	; 0x68
 8016456:	4654      	mov	r4, sl
 8016458:	2205      	movs	r2, #5
 801645a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801645e:	4854      	ldr	r0, [pc, #336]	; (80165b0 <_vfiprintf_r+0x220>)
 8016460:	f7e9 feb6 	bl	80001d0 <memchr>
 8016464:	9a04      	ldr	r2, [sp, #16]
 8016466:	b9d8      	cbnz	r0, 80164a0 <_vfiprintf_r+0x110>
 8016468:	06d1      	lsls	r1, r2, #27
 801646a:	bf44      	itt	mi
 801646c:	2320      	movmi	r3, #32
 801646e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016472:	0713      	lsls	r3, r2, #28
 8016474:	bf44      	itt	mi
 8016476:	232b      	movmi	r3, #43	; 0x2b
 8016478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801647c:	f89a 3000 	ldrb.w	r3, [sl]
 8016480:	2b2a      	cmp	r3, #42	; 0x2a
 8016482:	d015      	beq.n	80164b0 <_vfiprintf_r+0x120>
 8016484:	9a07      	ldr	r2, [sp, #28]
 8016486:	4654      	mov	r4, sl
 8016488:	2000      	movs	r0, #0
 801648a:	f04f 0c0a 	mov.w	ip, #10
 801648e:	4621      	mov	r1, r4
 8016490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016494:	3b30      	subs	r3, #48	; 0x30
 8016496:	2b09      	cmp	r3, #9
 8016498:	d94d      	bls.n	8016536 <_vfiprintf_r+0x1a6>
 801649a:	b1b0      	cbz	r0, 80164ca <_vfiprintf_r+0x13a>
 801649c:	9207      	str	r2, [sp, #28]
 801649e:	e014      	b.n	80164ca <_vfiprintf_r+0x13a>
 80164a0:	eba0 0308 	sub.w	r3, r0, r8
 80164a4:	fa09 f303 	lsl.w	r3, r9, r3
 80164a8:	4313      	orrs	r3, r2
 80164aa:	9304      	str	r3, [sp, #16]
 80164ac:	46a2      	mov	sl, r4
 80164ae:	e7d2      	b.n	8016456 <_vfiprintf_r+0xc6>
 80164b0:	9b03      	ldr	r3, [sp, #12]
 80164b2:	1d19      	adds	r1, r3, #4
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	9103      	str	r1, [sp, #12]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	bfbb      	ittet	lt
 80164bc:	425b      	neglt	r3, r3
 80164be:	f042 0202 	orrlt.w	r2, r2, #2
 80164c2:	9307      	strge	r3, [sp, #28]
 80164c4:	9307      	strlt	r3, [sp, #28]
 80164c6:	bfb8      	it	lt
 80164c8:	9204      	strlt	r2, [sp, #16]
 80164ca:	7823      	ldrb	r3, [r4, #0]
 80164cc:	2b2e      	cmp	r3, #46	; 0x2e
 80164ce:	d10c      	bne.n	80164ea <_vfiprintf_r+0x15a>
 80164d0:	7863      	ldrb	r3, [r4, #1]
 80164d2:	2b2a      	cmp	r3, #42	; 0x2a
 80164d4:	d134      	bne.n	8016540 <_vfiprintf_r+0x1b0>
 80164d6:	9b03      	ldr	r3, [sp, #12]
 80164d8:	1d1a      	adds	r2, r3, #4
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	9203      	str	r2, [sp, #12]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	bfb8      	it	lt
 80164e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80164e6:	3402      	adds	r4, #2
 80164e8:	9305      	str	r3, [sp, #20]
 80164ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80165c0 <_vfiprintf_r+0x230>
 80164ee:	7821      	ldrb	r1, [r4, #0]
 80164f0:	2203      	movs	r2, #3
 80164f2:	4650      	mov	r0, sl
 80164f4:	f7e9 fe6c 	bl	80001d0 <memchr>
 80164f8:	b138      	cbz	r0, 801650a <_vfiprintf_r+0x17a>
 80164fa:	9b04      	ldr	r3, [sp, #16]
 80164fc:	eba0 000a 	sub.w	r0, r0, sl
 8016500:	2240      	movs	r2, #64	; 0x40
 8016502:	4082      	lsls	r2, r0
 8016504:	4313      	orrs	r3, r2
 8016506:	3401      	adds	r4, #1
 8016508:	9304      	str	r3, [sp, #16]
 801650a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801650e:	4829      	ldr	r0, [pc, #164]	; (80165b4 <_vfiprintf_r+0x224>)
 8016510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016514:	2206      	movs	r2, #6
 8016516:	f7e9 fe5b 	bl	80001d0 <memchr>
 801651a:	2800      	cmp	r0, #0
 801651c:	d03f      	beq.n	801659e <_vfiprintf_r+0x20e>
 801651e:	4b26      	ldr	r3, [pc, #152]	; (80165b8 <_vfiprintf_r+0x228>)
 8016520:	bb1b      	cbnz	r3, 801656a <_vfiprintf_r+0x1da>
 8016522:	9b03      	ldr	r3, [sp, #12]
 8016524:	3307      	adds	r3, #7
 8016526:	f023 0307 	bic.w	r3, r3, #7
 801652a:	3308      	adds	r3, #8
 801652c:	9303      	str	r3, [sp, #12]
 801652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016530:	443b      	add	r3, r7
 8016532:	9309      	str	r3, [sp, #36]	; 0x24
 8016534:	e768      	b.n	8016408 <_vfiprintf_r+0x78>
 8016536:	fb0c 3202 	mla	r2, ip, r2, r3
 801653a:	460c      	mov	r4, r1
 801653c:	2001      	movs	r0, #1
 801653e:	e7a6      	b.n	801648e <_vfiprintf_r+0xfe>
 8016540:	2300      	movs	r3, #0
 8016542:	3401      	adds	r4, #1
 8016544:	9305      	str	r3, [sp, #20]
 8016546:	4619      	mov	r1, r3
 8016548:	f04f 0c0a 	mov.w	ip, #10
 801654c:	4620      	mov	r0, r4
 801654e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016552:	3a30      	subs	r2, #48	; 0x30
 8016554:	2a09      	cmp	r2, #9
 8016556:	d903      	bls.n	8016560 <_vfiprintf_r+0x1d0>
 8016558:	2b00      	cmp	r3, #0
 801655a:	d0c6      	beq.n	80164ea <_vfiprintf_r+0x15a>
 801655c:	9105      	str	r1, [sp, #20]
 801655e:	e7c4      	b.n	80164ea <_vfiprintf_r+0x15a>
 8016560:	fb0c 2101 	mla	r1, ip, r1, r2
 8016564:	4604      	mov	r4, r0
 8016566:	2301      	movs	r3, #1
 8016568:	e7f0      	b.n	801654c <_vfiprintf_r+0x1bc>
 801656a:	ab03      	add	r3, sp, #12
 801656c:	9300      	str	r3, [sp, #0]
 801656e:	462a      	mov	r2, r5
 8016570:	4b12      	ldr	r3, [pc, #72]	; (80165bc <_vfiprintf_r+0x22c>)
 8016572:	a904      	add	r1, sp, #16
 8016574:	4630      	mov	r0, r6
 8016576:	f7fb fee1 	bl	801233c <_printf_float>
 801657a:	4607      	mov	r7, r0
 801657c:	1c78      	adds	r0, r7, #1
 801657e:	d1d6      	bne.n	801652e <_vfiprintf_r+0x19e>
 8016580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016582:	07d9      	lsls	r1, r3, #31
 8016584:	d405      	bmi.n	8016592 <_vfiprintf_r+0x202>
 8016586:	89ab      	ldrh	r3, [r5, #12]
 8016588:	059a      	lsls	r2, r3, #22
 801658a:	d402      	bmi.n	8016592 <_vfiprintf_r+0x202>
 801658c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801658e:	f7fc fe80 	bl	8013292 <__retarget_lock_release_recursive>
 8016592:	89ab      	ldrh	r3, [r5, #12]
 8016594:	065b      	lsls	r3, r3, #25
 8016596:	f53f af1d 	bmi.w	80163d4 <_vfiprintf_r+0x44>
 801659a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801659c:	e71c      	b.n	80163d8 <_vfiprintf_r+0x48>
 801659e:	ab03      	add	r3, sp, #12
 80165a0:	9300      	str	r3, [sp, #0]
 80165a2:	462a      	mov	r2, r5
 80165a4:	4b05      	ldr	r3, [pc, #20]	; (80165bc <_vfiprintf_r+0x22c>)
 80165a6:	a904      	add	r1, sp, #16
 80165a8:	4630      	mov	r0, r6
 80165aa:	f7fc f96b 	bl	8012884 <_printf_i>
 80165ae:	e7e4      	b.n	801657a <_vfiprintf_r+0x1ea>
 80165b0:	08016fb1 	.word	0x08016fb1
 80165b4:	08016fbb 	.word	0x08016fbb
 80165b8:	0801233d 	.word	0x0801233d
 80165bc:	0801636d 	.word	0x0801636d
 80165c0:	08016fb7 	.word	0x08016fb7

080165c4 <__swbuf_r>:
 80165c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165c6:	460e      	mov	r6, r1
 80165c8:	4614      	mov	r4, r2
 80165ca:	4605      	mov	r5, r0
 80165cc:	b118      	cbz	r0, 80165d6 <__swbuf_r+0x12>
 80165ce:	6a03      	ldr	r3, [r0, #32]
 80165d0:	b90b      	cbnz	r3, 80165d6 <__swbuf_r+0x12>
 80165d2:	f7fc fd03 	bl	8012fdc <__sinit>
 80165d6:	69a3      	ldr	r3, [r4, #24]
 80165d8:	60a3      	str	r3, [r4, #8]
 80165da:	89a3      	ldrh	r3, [r4, #12]
 80165dc:	071a      	lsls	r2, r3, #28
 80165de:	d525      	bpl.n	801662c <__swbuf_r+0x68>
 80165e0:	6923      	ldr	r3, [r4, #16]
 80165e2:	b31b      	cbz	r3, 801662c <__swbuf_r+0x68>
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	6922      	ldr	r2, [r4, #16]
 80165e8:	1a98      	subs	r0, r3, r2
 80165ea:	6963      	ldr	r3, [r4, #20]
 80165ec:	b2f6      	uxtb	r6, r6
 80165ee:	4283      	cmp	r3, r0
 80165f0:	4637      	mov	r7, r6
 80165f2:	dc04      	bgt.n	80165fe <__swbuf_r+0x3a>
 80165f4:	4621      	mov	r1, r4
 80165f6:	4628      	mov	r0, r5
 80165f8:	f7ff fa4a 	bl	8015a90 <_fflush_r>
 80165fc:	b9e0      	cbnz	r0, 8016638 <__swbuf_r+0x74>
 80165fe:	68a3      	ldr	r3, [r4, #8]
 8016600:	3b01      	subs	r3, #1
 8016602:	60a3      	str	r3, [r4, #8]
 8016604:	6823      	ldr	r3, [r4, #0]
 8016606:	1c5a      	adds	r2, r3, #1
 8016608:	6022      	str	r2, [r4, #0]
 801660a:	701e      	strb	r6, [r3, #0]
 801660c:	6962      	ldr	r2, [r4, #20]
 801660e:	1c43      	adds	r3, r0, #1
 8016610:	429a      	cmp	r2, r3
 8016612:	d004      	beq.n	801661e <__swbuf_r+0x5a>
 8016614:	89a3      	ldrh	r3, [r4, #12]
 8016616:	07db      	lsls	r3, r3, #31
 8016618:	d506      	bpl.n	8016628 <__swbuf_r+0x64>
 801661a:	2e0a      	cmp	r6, #10
 801661c:	d104      	bne.n	8016628 <__swbuf_r+0x64>
 801661e:	4621      	mov	r1, r4
 8016620:	4628      	mov	r0, r5
 8016622:	f7ff fa35 	bl	8015a90 <_fflush_r>
 8016626:	b938      	cbnz	r0, 8016638 <__swbuf_r+0x74>
 8016628:	4638      	mov	r0, r7
 801662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801662c:	4621      	mov	r1, r4
 801662e:	4628      	mov	r0, r5
 8016630:	f000 f806 	bl	8016640 <__swsetup_r>
 8016634:	2800      	cmp	r0, #0
 8016636:	d0d5      	beq.n	80165e4 <__swbuf_r+0x20>
 8016638:	f04f 37ff 	mov.w	r7, #4294967295
 801663c:	e7f4      	b.n	8016628 <__swbuf_r+0x64>
	...

08016640 <__swsetup_r>:
 8016640:	b538      	push	{r3, r4, r5, lr}
 8016642:	4b2a      	ldr	r3, [pc, #168]	; (80166ec <__swsetup_r+0xac>)
 8016644:	4605      	mov	r5, r0
 8016646:	6818      	ldr	r0, [r3, #0]
 8016648:	460c      	mov	r4, r1
 801664a:	b118      	cbz	r0, 8016654 <__swsetup_r+0x14>
 801664c:	6a03      	ldr	r3, [r0, #32]
 801664e:	b90b      	cbnz	r3, 8016654 <__swsetup_r+0x14>
 8016650:	f7fc fcc4 	bl	8012fdc <__sinit>
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801665a:	0718      	lsls	r0, r3, #28
 801665c:	d422      	bmi.n	80166a4 <__swsetup_r+0x64>
 801665e:	06d9      	lsls	r1, r3, #27
 8016660:	d407      	bmi.n	8016672 <__swsetup_r+0x32>
 8016662:	2309      	movs	r3, #9
 8016664:	602b      	str	r3, [r5, #0]
 8016666:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801666a:	81a3      	strh	r3, [r4, #12]
 801666c:	f04f 30ff 	mov.w	r0, #4294967295
 8016670:	e034      	b.n	80166dc <__swsetup_r+0x9c>
 8016672:	0758      	lsls	r0, r3, #29
 8016674:	d512      	bpl.n	801669c <__swsetup_r+0x5c>
 8016676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016678:	b141      	cbz	r1, 801668c <__swsetup_r+0x4c>
 801667a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801667e:	4299      	cmp	r1, r3
 8016680:	d002      	beq.n	8016688 <__swsetup_r+0x48>
 8016682:	4628      	mov	r0, r5
 8016684:	f7fd fc96 	bl	8013fb4 <_free_r>
 8016688:	2300      	movs	r3, #0
 801668a:	6363      	str	r3, [r4, #52]	; 0x34
 801668c:	89a3      	ldrh	r3, [r4, #12]
 801668e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016692:	81a3      	strh	r3, [r4, #12]
 8016694:	2300      	movs	r3, #0
 8016696:	6063      	str	r3, [r4, #4]
 8016698:	6923      	ldr	r3, [r4, #16]
 801669a:	6023      	str	r3, [r4, #0]
 801669c:	89a3      	ldrh	r3, [r4, #12]
 801669e:	f043 0308 	orr.w	r3, r3, #8
 80166a2:	81a3      	strh	r3, [r4, #12]
 80166a4:	6923      	ldr	r3, [r4, #16]
 80166a6:	b94b      	cbnz	r3, 80166bc <__swsetup_r+0x7c>
 80166a8:	89a3      	ldrh	r3, [r4, #12]
 80166aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80166ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166b2:	d003      	beq.n	80166bc <__swsetup_r+0x7c>
 80166b4:	4621      	mov	r1, r4
 80166b6:	4628      	mov	r0, r5
 80166b8:	f000 f884 	bl	80167c4 <__smakebuf_r>
 80166bc:	89a0      	ldrh	r0, [r4, #12]
 80166be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166c2:	f010 0301 	ands.w	r3, r0, #1
 80166c6:	d00a      	beq.n	80166de <__swsetup_r+0x9e>
 80166c8:	2300      	movs	r3, #0
 80166ca:	60a3      	str	r3, [r4, #8]
 80166cc:	6963      	ldr	r3, [r4, #20]
 80166ce:	425b      	negs	r3, r3
 80166d0:	61a3      	str	r3, [r4, #24]
 80166d2:	6923      	ldr	r3, [r4, #16]
 80166d4:	b943      	cbnz	r3, 80166e8 <__swsetup_r+0xa8>
 80166d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166da:	d1c4      	bne.n	8016666 <__swsetup_r+0x26>
 80166dc:	bd38      	pop	{r3, r4, r5, pc}
 80166de:	0781      	lsls	r1, r0, #30
 80166e0:	bf58      	it	pl
 80166e2:	6963      	ldrpl	r3, [r4, #20]
 80166e4:	60a3      	str	r3, [r4, #8]
 80166e6:	e7f4      	b.n	80166d2 <__swsetup_r+0x92>
 80166e8:	2000      	movs	r0, #0
 80166ea:	e7f7      	b.n	80166dc <__swsetup_r+0x9c>
 80166ec:	20000164 	.word	0x20000164

080166f0 <_raise_r>:
 80166f0:	291f      	cmp	r1, #31
 80166f2:	b538      	push	{r3, r4, r5, lr}
 80166f4:	4604      	mov	r4, r0
 80166f6:	460d      	mov	r5, r1
 80166f8:	d904      	bls.n	8016704 <_raise_r+0x14>
 80166fa:	2316      	movs	r3, #22
 80166fc:	6003      	str	r3, [r0, #0]
 80166fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016702:	bd38      	pop	{r3, r4, r5, pc}
 8016704:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016706:	b112      	cbz	r2, 801670e <_raise_r+0x1e>
 8016708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801670c:	b94b      	cbnz	r3, 8016722 <_raise_r+0x32>
 801670e:	4620      	mov	r0, r4
 8016710:	f000 f830 	bl	8016774 <_getpid_r>
 8016714:	462a      	mov	r2, r5
 8016716:	4601      	mov	r1, r0
 8016718:	4620      	mov	r0, r4
 801671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801671e:	f000 b817 	b.w	8016750 <_kill_r>
 8016722:	2b01      	cmp	r3, #1
 8016724:	d00a      	beq.n	801673c <_raise_r+0x4c>
 8016726:	1c59      	adds	r1, r3, #1
 8016728:	d103      	bne.n	8016732 <_raise_r+0x42>
 801672a:	2316      	movs	r3, #22
 801672c:	6003      	str	r3, [r0, #0]
 801672e:	2001      	movs	r0, #1
 8016730:	e7e7      	b.n	8016702 <_raise_r+0x12>
 8016732:	2400      	movs	r4, #0
 8016734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016738:	4628      	mov	r0, r5
 801673a:	4798      	blx	r3
 801673c:	2000      	movs	r0, #0
 801673e:	e7e0      	b.n	8016702 <_raise_r+0x12>

08016740 <raise>:
 8016740:	4b02      	ldr	r3, [pc, #8]	; (801674c <raise+0xc>)
 8016742:	4601      	mov	r1, r0
 8016744:	6818      	ldr	r0, [r3, #0]
 8016746:	f7ff bfd3 	b.w	80166f0 <_raise_r>
 801674a:	bf00      	nop
 801674c:	20000164 	.word	0x20000164

08016750 <_kill_r>:
 8016750:	b538      	push	{r3, r4, r5, lr}
 8016752:	4d07      	ldr	r5, [pc, #28]	; (8016770 <_kill_r+0x20>)
 8016754:	2300      	movs	r3, #0
 8016756:	4604      	mov	r4, r0
 8016758:	4608      	mov	r0, r1
 801675a:	4611      	mov	r1, r2
 801675c:	602b      	str	r3, [r5, #0]
 801675e:	f7ed f83f 	bl	80037e0 <_kill>
 8016762:	1c43      	adds	r3, r0, #1
 8016764:	d102      	bne.n	801676c <_kill_r+0x1c>
 8016766:	682b      	ldr	r3, [r5, #0]
 8016768:	b103      	cbz	r3, 801676c <_kill_r+0x1c>
 801676a:	6023      	str	r3, [r4, #0]
 801676c:	bd38      	pop	{r3, r4, r5, pc}
 801676e:	bf00      	nop
 8016770:	2000eeb8 	.word	0x2000eeb8

08016774 <_getpid_r>:
 8016774:	f7ed b82c 	b.w	80037d0 <_getpid>

08016778 <__swhatbuf_r>:
 8016778:	b570      	push	{r4, r5, r6, lr}
 801677a:	460c      	mov	r4, r1
 801677c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016780:	2900      	cmp	r1, #0
 8016782:	b096      	sub	sp, #88	; 0x58
 8016784:	4615      	mov	r5, r2
 8016786:	461e      	mov	r6, r3
 8016788:	da0d      	bge.n	80167a6 <__swhatbuf_r+0x2e>
 801678a:	89a3      	ldrh	r3, [r4, #12]
 801678c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016790:	f04f 0100 	mov.w	r1, #0
 8016794:	bf0c      	ite	eq
 8016796:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801679a:	2340      	movne	r3, #64	; 0x40
 801679c:	2000      	movs	r0, #0
 801679e:	6031      	str	r1, [r6, #0]
 80167a0:	602b      	str	r3, [r5, #0]
 80167a2:	b016      	add	sp, #88	; 0x58
 80167a4:	bd70      	pop	{r4, r5, r6, pc}
 80167a6:	466a      	mov	r2, sp
 80167a8:	f000 f848 	bl	801683c <_fstat_r>
 80167ac:	2800      	cmp	r0, #0
 80167ae:	dbec      	blt.n	801678a <__swhatbuf_r+0x12>
 80167b0:	9901      	ldr	r1, [sp, #4]
 80167b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80167b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80167ba:	4259      	negs	r1, r3
 80167bc:	4159      	adcs	r1, r3
 80167be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80167c2:	e7eb      	b.n	801679c <__swhatbuf_r+0x24>

080167c4 <__smakebuf_r>:
 80167c4:	898b      	ldrh	r3, [r1, #12]
 80167c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80167c8:	079d      	lsls	r5, r3, #30
 80167ca:	4606      	mov	r6, r0
 80167cc:	460c      	mov	r4, r1
 80167ce:	d507      	bpl.n	80167e0 <__smakebuf_r+0x1c>
 80167d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	6123      	str	r3, [r4, #16]
 80167d8:	2301      	movs	r3, #1
 80167da:	6163      	str	r3, [r4, #20]
 80167dc:	b002      	add	sp, #8
 80167de:	bd70      	pop	{r4, r5, r6, pc}
 80167e0:	ab01      	add	r3, sp, #4
 80167e2:	466a      	mov	r2, sp
 80167e4:	f7ff ffc8 	bl	8016778 <__swhatbuf_r>
 80167e8:	9900      	ldr	r1, [sp, #0]
 80167ea:	4605      	mov	r5, r0
 80167ec:	4630      	mov	r0, r6
 80167ee:	f7fb fc79 	bl	80120e4 <_malloc_r>
 80167f2:	b948      	cbnz	r0, 8016808 <__smakebuf_r+0x44>
 80167f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167f8:	059a      	lsls	r2, r3, #22
 80167fa:	d4ef      	bmi.n	80167dc <__smakebuf_r+0x18>
 80167fc:	f023 0303 	bic.w	r3, r3, #3
 8016800:	f043 0302 	orr.w	r3, r3, #2
 8016804:	81a3      	strh	r3, [r4, #12]
 8016806:	e7e3      	b.n	80167d0 <__smakebuf_r+0xc>
 8016808:	89a3      	ldrh	r3, [r4, #12]
 801680a:	6020      	str	r0, [r4, #0]
 801680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016810:	81a3      	strh	r3, [r4, #12]
 8016812:	9b00      	ldr	r3, [sp, #0]
 8016814:	6163      	str	r3, [r4, #20]
 8016816:	9b01      	ldr	r3, [sp, #4]
 8016818:	6120      	str	r0, [r4, #16]
 801681a:	b15b      	cbz	r3, 8016834 <__smakebuf_r+0x70>
 801681c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016820:	4630      	mov	r0, r6
 8016822:	f000 f81d 	bl	8016860 <_isatty_r>
 8016826:	b128      	cbz	r0, 8016834 <__smakebuf_r+0x70>
 8016828:	89a3      	ldrh	r3, [r4, #12]
 801682a:	f023 0303 	bic.w	r3, r3, #3
 801682e:	f043 0301 	orr.w	r3, r3, #1
 8016832:	81a3      	strh	r3, [r4, #12]
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	431d      	orrs	r5, r3
 8016838:	81a5      	strh	r5, [r4, #12]
 801683a:	e7cf      	b.n	80167dc <__smakebuf_r+0x18>

0801683c <_fstat_r>:
 801683c:	b538      	push	{r3, r4, r5, lr}
 801683e:	4d07      	ldr	r5, [pc, #28]	; (801685c <_fstat_r+0x20>)
 8016840:	2300      	movs	r3, #0
 8016842:	4604      	mov	r4, r0
 8016844:	4608      	mov	r0, r1
 8016846:	4611      	mov	r1, r2
 8016848:	602b      	str	r3, [r5, #0]
 801684a:	f7ed f828 	bl	800389e <_fstat>
 801684e:	1c43      	adds	r3, r0, #1
 8016850:	d102      	bne.n	8016858 <_fstat_r+0x1c>
 8016852:	682b      	ldr	r3, [r5, #0]
 8016854:	b103      	cbz	r3, 8016858 <_fstat_r+0x1c>
 8016856:	6023      	str	r3, [r4, #0]
 8016858:	bd38      	pop	{r3, r4, r5, pc}
 801685a:	bf00      	nop
 801685c:	2000eeb8 	.word	0x2000eeb8

08016860 <_isatty_r>:
 8016860:	b538      	push	{r3, r4, r5, lr}
 8016862:	4d06      	ldr	r5, [pc, #24]	; (801687c <_isatty_r+0x1c>)
 8016864:	2300      	movs	r3, #0
 8016866:	4604      	mov	r4, r0
 8016868:	4608      	mov	r0, r1
 801686a:	602b      	str	r3, [r5, #0]
 801686c:	f7ed f827 	bl	80038be <_isatty>
 8016870:	1c43      	adds	r3, r0, #1
 8016872:	d102      	bne.n	801687a <_isatty_r+0x1a>
 8016874:	682b      	ldr	r3, [r5, #0]
 8016876:	b103      	cbz	r3, 801687a <_isatty_r+0x1a>
 8016878:	6023      	str	r3, [r4, #0]
 801687a:	bd38      	pop	{r3, r4, r5, pc}
 801687c:	2000eeb8 	.word	0x2000eeb8

08016880 <_init>:
 8016880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016882:	bf00      	nop
 8016884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016886:	bc08      	pop	{r3}
 8016888:	469e      	mov	lr, r3
 801688a:	4770      	bx	lr

0801688c <_fini>:
 801688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801688e:	bf00      	nop
 8016890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016892:	bc08      	pop	{r3}
 8016894:	469e      	mov	lr, r3
 8016896:	4770      	bx	lr
