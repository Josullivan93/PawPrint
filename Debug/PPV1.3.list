
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080165d0  080165d0  000265d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016db8  08016db8  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08016db8  08016db8  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016db8  08016db8  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016db8  08016db8  00026db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016dbc  08016dbc  00026dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08016dc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011dec  200002d4  08017094  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200120c0  08017094  000320c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ec6  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005735  00000000  00000000  0005120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  00056948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b9  00000000  00000000  000584b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ee07  00000000  00000000  00059971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026f39  00000000  00000000  00088778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbf4c  00000000  00000000  000af6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008500  00000000  00000000  001ab600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b3b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080165b8 	.word	0x080165b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	080165b8 	.word	0x080165b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f003 fe6f 	bl	80049fc <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f003 fd41 	bl	80047d4 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f003 fe3b 	bl	80049fc <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f003 fe1d 	bl	80049fc <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f003 fcef 	bl	80047d4 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]

	// Over Temp gets priority
	if (GPIO_Pin == TEMP_INT_Pin){
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d103      	bne.n	8000e18 <HAL_GPIO_EXTI_Callback+0x18>

		OVERTEMP = 1;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
		//while(1){
		//CDC_Transmit_FS((uint8_t *) FIFOFULL, strlen(FIFOFULL));
		//HAL_Delay(1000);
		//}
	}
}
 8000e16:	e005      	b.n	8000e24 <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == IMU_INT_Pin){
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d102      	bne.n	8000e24 <HAL_GPIO_EXTI_Callback+0x24>
		LSM6DSO_FIFO_RDY = 1;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000435 	.word	0x20000435
 8000e34:	20000434 	.word	0x20000434

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f002 fe71 	bl	8003b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f868 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f000 f996 	bl	8001174 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e48:	f000 f976 	bl	8001138 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e4c:	f000 f8b4 	bl	8000fb8 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e50:	f000 f94e 	bl	80010f0 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e54:	f010 f97e 	bl	8011154 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e58:	f000 f8ee 	bl	8001038 <MX_RTC_Init>
  MX_FATFS_Init();
 8000e5c:	f00b fae8 	bl	800c430 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	491f      	ldr	r1, [pc, #124]	; (8000ee0 <main+0xa8>)
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <main+0xac>)
 8000e66:	f00f fa63 	bl	8010330 <f_mount>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <main+0xb0>)
 8000e70:	701a      	strb	r2, [r3, #0]
  if ( mountStatus != FR_OK){
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <main+0xb0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <main+0x46>
	  Error_Handler();
 8000e7a:	f000 f9f5 	bl	8001268 <Error_Handler>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
  if ( volMakeStatus != FR_OK){
	  Error_Handler();
  }*/
  HAL_Delay(500);
 8000e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e82:	f002 fec3 	bl	8003c0c <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000e86:	220a      	movs	r2, #10
 8000e88:	4918      	ldr	r1, [pc, #96]	; (8000eec <main+0xb4>)
 8000e8a:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <main+0xb8>)
 8000e8c:	f00f fa96 	bl	80103bc <f_open>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <main+0xbc>)
 8000e96:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <main+0xbc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <main+0x6c>
	  Error_Handler();
 8000ea0:	f000 f9e2 	bl	8001268 <Error_Handler>
  }

  f_printf(&SDFile,"TimeStamp,Tag,X,Y,Z,Temp\n");
 8000ea4:	4914      	ldr	r1, [pc, #80]	; (8000ef8 <main+0xc0>)
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <main+0xb8>)
 8000ea8:	f00f feda 	bl	8010c60 <f_printf>

  f_close( &SDFile );
 8000eac:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <main+0xb8>)
 8000eae:	f00f fe36 	bl	8010b1e <f_close>
  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */
  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <main+0xc4>)
 8000eb4:	f000 f9dd 	bl	8001272 <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <main+0xc8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <main+0xcc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <main+0x92>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000ec6:	f005 fc1d 	bl	8006704 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

//	  if (LSM6DSO_FIFO_RDY == 1 ){
		  pawprint_readFIFO(&hi2c3, &outBUF, &bufferLength, &writeIndex);
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <main+0xd0>)
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <main+0xd4>)
 8000ece:	4910      	ldr	r1, [pc, #64]	; (8000f10 <main+0xd8>)
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <main+0xc4>)
 8000ed2:	f000 fbe7 	bl	80016a4 <pawprint_readFIFO>
		  //FIFO_out;
		  // Reset pin
		  LSM6DSO_FIFO_RDY = 0;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <main+0xc8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	  if ( OVERTEMP == 1){
 8000edc:	e7ef      	b.n	8000ebe <main+0x86>
 8000ede:	bf00      	nop
 8000ee0:	2000fec8 	.word	0x2000fec8
 8000ee4:	2000fecc 	.word	0x2000fecc
 8000ee8:	2000fe40 	.word	0x2000fe40
 8000eec:	080165d0 	.word	0x080165d0
 8000ef0:	200100fc 	.word	0x200100fc
 8000ef4:	2000fe41 	.word	0x2000fe41
 8000ef8:	080165d8 	.word	0x080165d8
 8000efc:	200002f0 	.word	0x200002f0
 8000f00:	20000434 	.word	0x20000434
 8000f04:	20000435 	.word	0x20000435
 8000f08:	2000043c 	.word	0x2000043c
 8000f0c:	20000438 	.word	0x20000438
 8000f10:	20000440 	.word	0x20000440

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2244      	movs	r2, #68	; 0x44
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f011 ffc5 	bl	8012eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3a:	f005 fb7d 	bl	8006638 <HAL_PWREx_ControlVoltageScaling>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f44:	f000 f990 	bl	8001268 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f48:	2309      	movs	r3, #9
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f62:	2308      	movs	r3, #8
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f66:	2307      	movs	r3, #7
 8000f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fbde 	bl	8006738 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f82:	f000 f971 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	230f      	movs	r3, #15
 8000f88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 ffa6 	bl	8006ef0 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000faa:	f000 f95d 	bl	8001268 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3758      	adds	r7, #88	; 0x58
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_I2C3_Init+0x74>)
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <MX_I2C3_Init+0x78>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_I2C3_Init+0x74>)
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <MX_I2C3_Init+0x7c>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_I2C3_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_I2C3_Init+0x74>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_I2C3_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_I2C3_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_I2C3_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_I2C3_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_I2C3_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ff2:	480e      	ldr	r0, [pc, #56]	; (800102c <MX_I2C3_Init+0x74>)
 8000ff4:	f003 fb52 	bl	800469c <HAL_I2C_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ffe:	f000 f933 	bl	8001268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_I2C3_Init+0x74>)
 8001006:	f004 f8cb 	bl	80051a0 <HAL_I2CEx_ConfigAnalogFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001010:	f000 f92a 	bl	8001268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_I2C3_Init+0x74>)
 8001018:	f004 f90d 	bl	8005236 <HAL_I2CEx_ConfigDigitalFilter>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001022:	f000 f921 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200002f0 	.word	0x200002f0
 8001030:	40005c00 	.word	0x40005c00
 8001034:	20303e5d 	.word	0x20303e5d

08001038 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_RTC_Init+0xb0>)
 8001052:	4a26      	ldr	r2, [pc, #152]	; (80010ec <MX_RTC_Init+0xb4>)
 8001054:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_RTC_Init+0xb0>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_RTC_Init+0xb0>)
 800105e:	227f      	movs	r2, #127	; 0x7f
 8001060:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_RTC_Init+0xb0>)
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_RTC_Init+0xb0>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_RTC_Init+0xb0>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_RTC_Init+0xb0>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_RTC_Init+0xb0>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001080:	4819      	ldr	r0, [pc, #100]	; (80010e8 <MX_RTC_Init+0xb0>)
 8001082:	f007 fc73 	bl	800896c <HAL_RTC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800108c:	f000 f8ec 	bl	8001268 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	480f      	ldr	r0, [pc, #60]	; (80010e8 <MX_RTC_Init+0xb0>)
 80010ac:	f007 fce6 	bl	8008a7c <HAL_RTC_SetTime>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80010b6:	f000 f8d7 	bl	8001268 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010ba:	2301      	movs	r3, #1
 80010bc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010be:	2301      	movs	r3, #1
 80010c0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_RTC_Init+0xb0>)
 80010d2:	f007 fd70 	bl	8008bb6 <HAL_RTC_SetDate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80010dc:	f000 f8c4 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000344 	.word	0x20000344
 80010ec:	40002800 	.word	0x40002800

080010f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <MX_SDMMC1_SD_Init+0x44>)
 80010f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 1;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 800111a:	2201      	movs	r2, #1
 800111c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <MX_SDMMC1_SD_Init+0x40>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDMMC1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000368 	.word	0x20000368
 8001134:	40012800 	.word	0x40012800

08001138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_DMA_Init+0x38>)
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <MX_DMA_Init+0x38>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6493      	str	r3, [r2, #72]	; 0x48
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_DMA_Init+0x38>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	203b      	movs	r0, #59	; 0x3b
 800115c:	f002 fe55 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001160:	203b      	movs	r0, #59	; 0x3b
 8001162:	f002 fe6e 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <MX_GPIO_Init+0xec>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a34      	ldr	r2, [pc, #208]	; (8001260 <MX_GPIO_Init+0xec>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <MX_GPIO_Init+0xec>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_GPIO_Init+0xec>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <MX_GPIO_Init+0xec>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_GPIO_Init+0xec>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_GPIO_Init+0xec>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <MX_GPIO_Init+0xec>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_GPIO_Init+0xec>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_GPIO_Init+0xec>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <MX_GPIO_Init+0xec>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_GPIO_Init+0xec>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80011ea:	2304      	movs	r3, #4
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4819      	ldr	r0, [pc, #100]	; (8001264 <MX_GPIO_Init+0xf0>)
 8001200:	f003 f872 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 8001204:	2308      	movs	r3, #8
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001208:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4812      	ldr	r0, [pc, #72]	; (8001264 <MX_GPIO_Init+0xf0>)
 800121a:	f003 f865 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_GPIO_Init+0xf0>)
 8001232:	f003 f859 	bl	80042e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2008      	movs	r0, #8
 800123c:	f002 fde5 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001240:	2008      	movs	r0, #8
 8001242:	f002 fdfe 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2009      	movs	r0, #9
 800124c:	f002 fddd 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001250:	2009      	movs	r0, #9
 8001252:	f002 fdf6 	bl	8003e42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	48000800 	.word	0x48000800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>

08001272 <pawprint_init>:
//static st_fifo_out_slot acc_slot[126];
//static st_fifo_out_slot gyr_slot[126];

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800127a:	2014      	movs	r0, #20
 800127c:	f002 fcc6 	bl	8003c0c <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001280:	2300      	movs	r3, #0
 8001282:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001284:	f107 030d 	add.w	r3, r7, #13
 8001288:	461a      	mov	r2, r3
 800128a:	2101      	movs	r1, #1
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fd9d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001292:	2305      	movs	r3, #5
 8001294:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 8001296:	f107 030d 	add.w	r3, r7, #13
 800129a:	461a      	mov	r2, r3
 800129c:	2112      	movs	r1, #18
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd94 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f002 fcb1 	bl	8003c0c <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 80012aa:	f107 030f 	add.w	r3, r7, #15
 80012ae:	461a      	mov	r2, r3
 80012b0:	210f      	movs	r1, #15
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fd52 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 80012bc:	f107 030d 	add.w	r3, r7, #13
 80012c0:	461a      	mov	r2, r3
 80012c2:	2101      	movs	r1, #1
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd81 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 80012ca:	f107 030e 	add.w	r3, r7, #14
 80012ce:	461a      	mov	r2, r3
 80012d0:	2114      	movs	r1, #20
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd42 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 80012e2:	f107 030e 	add.w	r3, r7, #14
 80012e6:	461a      	mov	r2, r3
 80012e8:	2114      	movs	r1, #20
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd6e 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80012f0:	2005      	movs	r0, #5
 80012f2:	f002 fc8b 	bl	8003c0c <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 8001306:	f107 030e 	add.w	r3, r7, #14
 800130a:	461a      	mov	r2, r3
 800130c:	2114      	movs	r1, #20
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd5c 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 800131e:	f107 030e 	add.w	r3, r7, #14
 8001322:	461a      	mov	r2, r3
 8001324:	2114      	movs	r1, #20
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fd50 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 8001336:	f107 030e 	add.w	r3, r7, #14
 800133a:	461a      	mov	r2, r3
 800133c:	2114      	movs	r1, #20
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fd44 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 8001344:	2310      	movs	r3, #16
 8001346:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8001348:	f107 030e 	add.w	r3, r7, #14
 800134c:	461a      	mov	r2, r3
 800134e:	2114      	movs	r1, #20
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fd3b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800135a:	f107 030d 	add.w	r3, r7, #13
 800135e:	461a      	mov	r2, r3
 8001360:	2101      	movs	r1, #1
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd32 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	461a      	mov	r2, r3
 800136e:	214f      	movs	r1, #79	; 0x4f
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fcbf 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001376:	e001      	b.n	800137c <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 8001378:	2323      	movs	r3, #35	; 0x23
 800137a:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	d1fa      	bne.n	8001378 <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001382:	f107 030d 	add.w	r3, r7, #13
 8001386:	461a      	mov	r2, r3
 8001388:	2160      	movs	r1, #96	; 0x60
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fccc 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001390:	2005      	movs	r0, #5
 8001392:	f002 fc3b 	bl	8003c0c <HAL_Delay>
	RegDat = 0x43;
 8001396:	2343      	movs	r3, #67	; 0x43
 8001398:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800139a:	f107 030d 	add.w	r3, r7, #13
 800139e:	461a      	mov	r2, r3
 80013a0:	2160      	movs	r1, #96	; 0x60
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fcc0 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 80013a8:	2014      	movs	r0, #20
 80013aa:	f002 fc2f 	bl	8003c0c <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 80013ae:	2310      	movs	r3, #16
 80013b0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 80013b2:	f107 030d 	add.w	r3, r7, #13
 80013b6:	461a      	mov	r2, r3
 80013b8:	2162      	movs	r1, #98	; 0x62
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fcb4 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 80013c0:	238c      	movs	r3, #140	; 0x8c
 80013c2:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 80013c4:	f107 030d 	add.w	r3, r7, #13
 80013c8:	461a      	mov	r2, r3
 80013ca:	2160      	movs	r1, #96	; 0x60
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fcab 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 80013d2:	f107 030b 	add.w	r3, r7, #11
 80013d6:	461a      	mov	r2, r3
 80013d8:	21fd      	movs	r1, #253	; 0xfd
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f002 fa86 	bl	80038ec <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 80013e0:	f107 030a 	add.w	r3, r7, #10
 80013e4:	461a      	mov	r2, r3
 80013e6:	21fe      	movs	r1, #254	; 0xfe
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f002 fa7f 	bl	80038ec <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80013ee:	e001      	b.n	80013f4 <pawprint_init+0x182>

	RegDat = 0x04;
 80013f0:	2304      	movs	r3, #4
 80013f2:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <pawprint_init+0x18e>
 80013fa:	7abb      	ldrb	r3, [r7, #10]
 80013fc:	2b53      	cmp	r3, #83	; 0x53
 80013fe:	d1f7      	bne.n	80013f0 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 8001400:	f107 030d 	add.w	r3, r7, #13
 8001404:	461a      	mov	r2, r3
 8001406:	2104      	movs	r1, #4
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fc8d 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 800140e:	234b      	movs	r3, #75	; 0x4b
 8001410:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 8001412:	f107 030d 	add.w	r3, r7, #13
 8001416:	461a      	mov	r2, r3
 8001418:	2105      	movs	r1, #5
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fc84 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 8001420:	f107 030d 	add.w	r3, r7, #13
 8001424:	461a      	mov	r2, r3
 8001426:	2120      	movs	r1, #32
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fc7d 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 800142e:	2300      	movs	r3, #0
 8001430:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 8001432:	f107 030d 	add.w	r3, r7, #13
 8001436:	461a      	mov	r2, r3
 8001438:	2106      	movs	r1, #6
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fc74 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001440:	f107 030d 	add.w	r3, r7, #13
 8001444:	461a      	mov	r2, r3
 8001446:	2107      	movs	r1, #7
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fc6d 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 800144e:	f107 030d 	add.w	r3, r7, #13
 8001452:	461a      	mov	r2, r3
 8001454:	2108      	movs	r1, #8
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fc66 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 800145c:	f107 030d 	add.w	r3, r7, #13
 8001460:	461a      	mov	r2, r3
 8001462:	2103      	movs	r1, #3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fc5f 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800146e:	f107 030d 	add.w	r3, r7, #13
 8001472:	461a      	mov	r2, r3
 8001474:	2101      	movs	r1, #1
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fca8 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 800147c:	2064      	movs	r0, #100	; 0x64
 800147e:	f002 fbc5 	bl	8003c0c <HAL_Delay>
	RegDat = 0x00;
 8001482:	2300      	movs	r3, #0
 8001484:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 8001486:	f107 030d 	add.w	r3, r7, #13
 800148a:	461a      	mov	r2, r3
 800148c:	2114      	movs	r1, #20
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fc9c 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001494:	f107 030d 	add.w	r3, r7, #13
 8001498:	461a      	mov	r2, r3
 800149a:	2101      	movs	r1, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fc95 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 80014a2:	23e2      	movs	r3, #226	; 0xe2
 80014a4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 80014a6:	f107 030d 	add.w	r3, r7, #13
 80014aa:	461a      	mov	r2, r3
 80014ac:	2118      	movs	r1, #24
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc8c 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 80014b8:	f107 030d 	add.w	r3, r7, #13
 80014bc:	461a      	mov	r2, r3
 80014be:	2110      	movs	r1, #16
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fc83 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 80014c6:	f107 030d 	add.w	r3, r7, #13
 80014ca:	461a      	mov	r2, r3
 80014cc:	2111      	movs	r1, #17
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc7c 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x2C;
 80014d4:	232c      	movs	r3, #44	; 0x2c
 80014d6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 300
 80014d8:	f107 030d 	add.w	r3, r7, #13
 80014dc:	461a      	mov	r2, r3
 80014de:	2107      	movs	r1, #7
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fc73 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x01;
 80014e6:	2301      	movs	r3, #1
 80014e8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 80014ea:	f107 030d 	add.w	r3, r7, #13
 80014ee:	461a      	mov	r2, r3
 80014f0:	2108      	movs	r1, #8
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fc6a 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 80014f8:	2344      	movs	r3, #68	; 0x44
 80014fa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 80014fc:	f107 030d 	add.w	r3, r7, #13
 8001500:	461a      	mov	r2, r3
 8001502:	2109      	movs	r1, #9
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fc61 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x56;
 800150a:	2356      	movs	r3, #86	; 0x56
 800150c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);// Set to continuous mode & batch Temp and Timestamp
 800150e:	f107 030d 	add.w	r3, r7, #13
 8001512:	461a      	mov	r2, r3
 8001514:	210a      	movs	r1, #10
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fc58 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x41;
 800151c:	2341      	movs	r3, #65	; 0x41
 800151e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 8001520:	f107 030d 	add.w	r3, r7, #13
 8001524:	461a      	mov	r2, r3
 8001526:	2156      	movs	r1, #86	; 0x56
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fc4f 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 800152e:	2338      	movs	r3, #56	; 0x38
 8001530:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 8001532:	f107 030d 	add.w	r3, r7, #13
 8001536:	461a      	mov	r2, r3
 8001538:	210d      	movs	r1, #13
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fc46 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 8001544:	f107 030d 	add.w	r3, r7, #13
 8001548:	461a      	mov	r2, r3
 800154a:	2101      	movs	r1, #1
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fc3d 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001552:	233d      	movs	r3, #61	; 0x3d
 8001554:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 8001556:	f107 030d 	add.w	r3, r7, #13
 800155a:	461a      	mov	r2, r3
 800155c:	2115      	movs	r1, #21
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fc34 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001564:	2368      	movs	r3, #104	; 0x68
 8001566:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 8001568:	f107 030d 	add.w	r3, r7, #13
 800156c:	461a      	mov	r2, r3
 800156e:	2116      	movs	r1, #22
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fc2b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0E;
 8001576:	230e      	movs	r3, #14
 8001578:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read
 800157a:	f107 030d 	add.w	r3, r7, #13
 800157e:	461a      	mov	r2, r3
 8001580:	2117      	movs	r1, #23
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fc22 	bl	8000dcc <LSM6DSO_WriteReg>

	// STTS751 Peripheral enable
	RegDat = STTS751_I2C_ADDR;
 8001588:	2372      	movs	r3, #114	; 0x72
 800158a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
 800158c:	f107 030d 	add.w	r3, r7, #13
 8001590:	461a      	mov	r2, r3
 8001592:	2118      	movs	r1, #24
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fc19 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = STTS751_REG_TEMP_H;
 800159a:	2300      	movs	r3, #0
 800159c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
 800159e:	f107 030d 	add.w	r3, r7, #13
 80015a2:	461a      	mov	r2, r3
 80015a4:	2119      	movs	r1, #25
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fc10 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0B;
 80015ac:	230b      	movs	r3, #11
 80015ae:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
 80015b0:	f107 030d 	add.w	r3, r7, #13
 80015b4:	461a      	mov	r2, r3
 80015b6:	211a      	movs	r1, #26
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fc07 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 80015c2:	f107 030d 	add.w	r3, r7, #13
 80015c6:	461a      	mov	r2, r3
 80015c8:	2101      	movs	r1, #1
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fbfe 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 80015d0:	2344      	movs	r3, #68	; 0x44
 80015d2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 80015d4:	f107 030d 	add.w	r3, r7, #13
 80015d8:	461a      	mov	r2, r3
 80015da:	2112      	movs	r1, #18
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fbf5 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 80015e2:	2328      	movs	r3, #40	; 0x28
 80015e4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 80015e6:	f107 030d 	add.w	r3, r7, #13
 80015ea:	461a      	mov	r2, r3
 80015ec:	2113      	movs	r1, #19
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fbec 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 80015f4:	2310      	movs	r3, #16
 80015f6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 80015f8:	f107 030d 	add.w	r3, r7, #13
 80015fc:	461a      	mov	r2, r3
 80015fe:	2115      	movs	r1, #21
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fbe3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 800160a:	f107 030d 	add.w	r3, r7, #13
 800160e:	461a      	mov	r2, r3
 8001610:	2116      	movs	r1, #22
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fbda 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 8001618:	2320      	movs	r3, #32
 800161a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 800161c:	f107 030d 	add.w	r3, r7, #13
 8001620:	461a      	mov	r2, r3
 8001622:	2119      	movs	r1, #25
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fbd1 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 800162e:	f107 030d 	add.w	r3, r7, #13
 8001632:	461a      	mov	r2, r3
 8001634:	2110      	movs	r1, #16
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fbc8 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 8001640:	f107 030d 	add.w	r3, r7, #13
 8001644:	461a      	mov	r2, r3
 8001646:	2111      	movs	r1, #17
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fbbf 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 8001652:	f107 030d 	add.w	r3, r7, #13
 8001656:	461a      	mov	r2, r3
 8001658:	2101      	movs	r1, #1
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fbb6 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x09;
 8001660:	2309      	movs	r3, #9
 8001662:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 8001664:	f107 030d 	add.w	r3, r7, #13
 8001668:	461a      	mov	r2, r3
 800166a:	2114      	movs	r1, #20
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fbad 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = (RegDat ^ 0x04);
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	f083 0304 	eor.w	r3, r3, #4
 8001678:	b2db      	uxtb	r3, r3
 800167a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable I2C Master
 800167c:	f107 030d 	add.w	r3, r7, #13
 8001680:	461a      	mov	r2, r3
 8001682:	2114      	movs	r1, #20
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fba1 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800168a:	2300      	movs	r3, #0
 800168c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 800168e:	f107 030d 	add.w	r3, r7, #13
 8001692:	461a      	mov	r2, r3
 8001694:	2101      	movs	r1, #1
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fb98 	bl	8000dcc <LSM6DSO_WriteReg>

}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <pawprint_readFIFO>:

/* FIFO read and decode - uses st_fifo repo from STMicro git */

void pawprint_readFIFO( I2C_HandleTypeDef *i2cHandle , char *outBUFFER, int *bufferLength, int *writeIndex){
 80016a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016a8:	b0a8      	sub	sp, #160	; 0xa0
 80016aa:	af08      	add	r7, sp, #32
 80016ac:	6178      	str	r0, [r7, #20]
 80016ae:	6139      	str	r1, [r7, #16]
 80016b0:	60fa      	str	r2, [r7, #12]
 80016b2:	60bb      	str	r3, [r7, #8]

	st_fifo_conf FIFOconf;
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	//FIFO_out_file FIFO_out[512];

	FIFOconf.device = ST_FIFO_LSM6DSO;
 80016ba:	2305      	movs	r3, #5
 80016bc:	f887 3020 	strb.w	r3, [r7, #32]
	FIFOconf.bdr_xl = 104; // 104 - as batching timestamp can set to 0
 80016c0:	4bbf      	ldr	r3, [pc, #764]	; (80019c0 <pawprint_readFIFO+0x31c>)
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
	FIFOconf.bdr_gy = 104;
 80016c4:	4bbe      	ldr	r3, [pc, #760]	; (80019c0 <pawprint_readFIFO+0x31c>)
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
	FIFOconf.bdr_vsens = 104;
 80016c8:	4bbd      	ldr	r3, [pc, #756]	; (80019c0 <pawprint_readFIFO+0x31c>)
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	st_fifo_init(&FIFOconf);
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fbc5 	bl	8001e60 <st_fifo_init>
	st_fifo_out_slot *out_slot;
	uint16_t out_slot_size;


	/* Confirm watermark has been met LSM6DSO_REG_FIFO_STATUS2 */
	LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[0], 2);
 80016d6:	f107 021c 	add.w	r2, r7, #28
 80016da:	2302      	movs	r3, #2
 80016dc:	213a      	movs	r1, #58	; 0x3a
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff fb56 	bl	8000d90 <LSM6DSO_ReadRegs>

	if (((FIFOstatus[1] >> 7)  & 0x01)||((FIFOstatus[1] >> 6)  & 0x01)||((FIFOstatus[1] >> 5)  & 0x01)){ // Check WTM threshold bit, overrun bit and full bit
 80016e4:	7f7b      	ldrb	r3, [r7, #29]
 80016e6:	09db      	lsrs	r3, r3, #7
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10e      	bne.n	8001710 <pawprint_readFIFO+0x6c>
 80016f2:	7f7b      	ldrb	r3, [r7, #29]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <pawprint_readFIFO+0x6c>
 8001700:	7f7b      	ldrb	r3, [r7, #29]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 833f 	beq.w	8001d8e <pawprint_readFIFO+0x6ea>
		/* Get number of samples in FIFO*/
		//LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[1]);
		FIFOdepth = ((((uint16_t)FIFOstatus[1] & 0x03) << 8) + (uint16_t)FIFOstatus[0]);
 8001710:	7f7b      	ldrb	r3, [r7, #29]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29b      	uxth	r3, r3
 8001716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800171a:	b29a      	uxth	r2, r3
 800171c:	7f3b      	ldrb	r3, [r7, #28]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

		raw_slot = malloc(FIFOdepth * sizeof(st_fifo_raw_slot));
 8001726:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f010 fb4d 	bl	8011dd0 <malloc>
 8001736:	4603      	mov	r3, r0
 8001738:	65fb      	str	r3, [r7, #92]	; 0x5c
		out_slot = malloc(FIFOdepth * 3 * sizeof(st_fifo_out_slot));
 800173a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4618      	mov	r0, r3
 8001748:	f010 fb42 	bl	8011dd0 <malloc>
 800174c:	4603      	mov	r3, r0
 800174e:	65bb      	str	r3, [r7, #88]	; 0x58

		int slots = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	67bb      	str	r3, [r7, #120]	; 0x78

		while(FIFOdepth--) {
 8001754:	e00e      	b.n	8001774 <pawprint_readFIFO+0xd0>
//
			LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &raw_slot[slots].fifo_data_out[0],7 );
 8001756:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001760:	4413      	add	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	2307      	movs	r3, #7
 8001766:	2178      	movs	r1, #120	; 0x78
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f7ff fb11 	bl	8000d90 <LSM6DSO_ReadRegs>
//
			slots++;
 800176e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001770:	3301      	adds	r3, #1
 8001772:	67bb      	str	r3, [r7, #120]	; 0x78
		while(FIFOdepth--) {
 8001774:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e9      	bne.n	8001756 <pawprint_readFIFO+0xb2>
		}

		st_fifo_decode(out_slot, raw_slot, &out_slot_size, FIFOdepth);
 8001782:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001786:	f107 021a 	add.w	r2, r7, #26
 800178a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800178c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800178e:	f000 fc5b 	bl	8002048 <st_fifo_decode>
		st_fifo_sort(out_slot, out_slot_size);
 8001792:	8b7b      	ldrh	r3, [r7, #26]
 8001794:	4619      	mov	r1, r3
 8001796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001798:	f001 fc04 	bl	8002fa4 <st_fifo_sort>

		uint16_t acc_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 800179c:	8b7b      	ldrh	r3, [r7, #26]
 800179e:	2201      	movs	r2, #1
 80017a0:	4619      	mov	r1, r3
 80017a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017a4:	f001 fc5a 	bl	800305c <st_fifo_get_sensor_occurrence>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t gyr_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 80017ae:	8b7b      	ldrh	r3, [r7, #26]
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017b6:	f001 fc51 	bl	800305c <st_fifo_get_sensor_occurrence>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		uint16_t temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
 80017c0:	8b7b      	ldrh	r3, [r7, #26]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4619      	mov	r1, r3
 80017c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017c8:	f001 fc48 	bl	800305c <st_fifo_get_sensor_occurrence>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		uint16_t mag_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 80017d2:	8b7b      	ldrh	r3, [r7, #26]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4619      	mov	r1, r3
 80017d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017da:	f001 fc3f 	bl	800305c <st_fifo_get_sensor_occurrence>
 80017de:	4603      	mov	r3, r0
 80017e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t ext_temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR1);
 80017e4:	8b7b      	ldrh	r3, [r7, #26]
 80017e6:	2204      	movs	r2, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017ec:	f001 fc36 	bl	800305c <st_fifo_get_sensor_occurrence>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		st_fifo_out_slot *acc_slot = malloc(acc_samples * sizeof(st_fifo_out_slot));
 80017f6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4618      	mov	r0, r3
 8001804:	f010 fae4 	bl	8011dd0 <malloc>
 8001808:	4603      	mov	r3, r0
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
		st_fifo_out_slot *gyr_slot = malloc(gyr_samples * sizeof(st_fifo_out_slot));
 800180c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f010 fad9 	bl	8011dd0 <malloc>
 800181e:	4603      	mov	r3, r0
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
		st_fifo_out_slot *temp_slot = malloc(temp_samples * sizeof(st_fifo_out_slot));
 8001822:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f010 face 	bl	8011dd0 <malloc>
 8001834:	4603      	mov	r3, r0
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
		st_fifo_out_slot *mag_slot = malloc(mag_samples * sizeof(st_fifo_out_slot));
 8001838:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f010 fac3 	bl	8011dd0 <malloc>
 800184a:	4603      	mov	r3, r0
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
		st_fifo_out_slot *ext_temp_slot = malloc(ext_temp_samples * sizeof(st_fifo_out_slot));
 800184e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4618      	mov	r0, r3
 800185c:	f010 fab8 	bl	8011dd0 <malloc>
 8001860:	4603      	mov	r3, r0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38

		st_fifo_extract_sensor(acc_slot, out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 8001864:	8b7a      	ldrh	r2, [r7, #26]
 8001866:	2301      	movs	r3, #1
 8001868:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800186a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800186c:	f001 fc20 	bl	80030b0 <st_fifo_extract_sensor>
		st_fifo_extract_sensor(gyr_slot, out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 8001870:	8b7a      	ldrh	r2, [r7, #26]
 8001872:	2300      	movs	r3, #0
 8001874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001876:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001878:	f001 fc1a 	bl	80030b0 <st_fifo_extract_sensor>
		st_fifo_extract_sensor(temp_slot, out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
 800187c:	8b7a      	ldrh	r2, [r7, #26]
 800187e:	2302      	movs	r3, #2
 8001880:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001882:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001884:	f001 fc14 	bl	80030b0 <st_fifo_extract_sensor>
		st_fifo_extract_sensor(mag_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 8001888:	8b7a      	ldrh	r2, [r7, #26]
 800188a:	2303      	movs	r3, #3
 800188c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800188e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001890:	f001 fc0e 	bl	80030b0 <st_fifo_extract_sensor>
		st_fifo_extract_sensor(ext_temp_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR1);
 8001894:	8b7a      	ldrh	r2, [r7, #26]
 8001896:	2304      	movs	r3, #4
 8001898:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800189a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800189c:	f001 fc08 	bl	80030b0 <st_fifo_extract_sensor>

		uint32_t row_count = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	677b      	str	r3, [r7, #116]	; 0x74

		// Convert to real units & add to formatted strings
	    for (int i = 0; i < acc_samples; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	673b      	str	r3, [r7, #112]	; 0x70
 80018a8:	e081      	b.n	80019ae <pawprint_readFIFO+0x30a>
	    	uint8_t outLength = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
//	    	FIFO_out[row_count].sensor_data.x = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x);
//	    	FIFO_out[row_count].sensor_data.y = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y);
//	    	FIFO_out[row_count].sensor_data.z = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*bufferLength)) ,"%lu,%u,%.3f,%.3f,%.3f,NA\n",
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	189e      	adds	r6, r3, r2
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f5c3 437a 	rsb	r3, r3, #64000	; 0xfa00
 80018c2:	469a      	mov	sl, r3
	    		    			acc_slot[i].timestamp,
 80018c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	461a      	mov	r2, r3
 80018d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d2:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*bufferLength)) ,"%lu,%u,%.3f,%.3f,%.3f,NA\n",
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	607b      	str	r3, [r7, #4]
	    						acc_slot[i].sensor_tag,
 80018d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	461a      	mov	r2, r3
 80018e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e6:	4413      	add	r3, r2
 80018e8:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*bufferLength)) ,"%lu,%u,%.3f,%.3f,%.3f,NA\n",
 80018ea:	603b      	str	r3, [r7, #0]
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x),
 80018ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	461a      	mov	r2, r3
 80018f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018fa:	4413      	add	r3, r2
 80018fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fa4b 	bl	8001d9c <lsm6dso_from_fs2_to_mg>
 8001906:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*bufferLength)) ,"%lu,%u,%.3f,%.3f,%.3f,NA\n",
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe1c 	bl	8000548 <__aeabi_f2d>
 8001910:	4604      	mov	r4, r0
 8001912:	460d      	mov	r5, r1
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y),
 8001914:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	461a      	mov	r2, r3
 8001920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001922:	4413      	add	r3, r2
 8001924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fa37 	bl	8001d9c <lsm6dso_from_fs2_to_mg>
 800192e:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*bufferLength)) ,"%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe08 	bl	8000548 <__aeabi_f2d>
 8001938:	4680      	mov	r8, r0
 800193a:	4689      	mov	r9, r1
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z));
 800193c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	461a      	mov	r2, r3
 8001948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800194a:	4413      	add	r3, r2
 800194c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fa23 	bl	8001d9c <lsm6dso_from_fs2_to_mg>
 8001956:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*bufferLength)) ,"%lu,%u,%.3f,%.3f,%.3f,NA\n",
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001968:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800196c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <pawprint_readFIFO+0x320>)
 8001978:	4651      	mov	r1, sl
 800197a:	4630      	mov	r0, r6
 800197c:	f011 fa02 	bl	8012d84 <sniprintf>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	    	*bufferLength += outLength;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800198e:	441a      	add	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199c:	441a      	add	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	601a      	str	r2, [r3, #0]
	    	row_count++;
 80019a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a4:	3301      	adds	r3, #1
 80019a6:	677b      	str	r3, [r7, #116]	; 0x74
	    for (int i = 0; i < acc_samples; i++) {
 80019a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019aa:	3301      	adds	r3, #1
 80019ac:	673b      	str	r3, [r7, #112]	; 0x70
 80019ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80019b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f6ff af78 	blt.w	80018aa <pawprint_readFIFO+0x206>
	    }

	    for (int i = 0; i < gyr_samples; i++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019be:	e085      	b.n	8001acc <pawprint_readFIFO+0x428>
 80019c0:	42d00000 	.word	0x42d00000
 80019c4:	080165f4 	.word	0x080165f4
	    	uint8_t outLength = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
//	    	FIFO_out[row_count].sensor_data.x = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.x);
//	    	FIFO_out[row_count].sensor_data.y = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.y);
//	    	FIFO_out[row_count].sensor_data.z = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	189e      	adds	r6, r3, r2
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f5c3 437a 	rsb	r3, r3, #64000	; 0xfa00
 80019e0:	469a      	mov	sl, r3
	    		    		    			gyr_slot[i].timestamp,
 80019e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	461a      	mov	r2, r3
 80019ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f0:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	607b      	str	r3, [r7, #4]
	    		    						gyr_slot[i].sensor_tag,
 80019f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	461a      	mov	r2, r3
 8001a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a04:	4413      	add	r3, r2
 8001a06:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001a08:	603b      	str	r3, [r7, #0]
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.x),
 8001a0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	461a      	mov	r2, r3
 8001a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a18:	4413      	add	r3, r2
 8001a1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f9d4 	bl	8001dcc <lsm6dso_from_fs125_to_mdps>
 8001a24:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd8d 	bl	8000548 <__aeabi_f2d>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460d      	mov	r5, r1
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.y),
 8001a32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	4413      	add	r3, r2
 8001a42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f9c0 	bl	8001dcc <lsm6dso_from_fs125_to_mdps>
 8001a4c:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd79 	bl	8000548 <__aeabi_f2d>
 8001a56:	4680      	mov	r8, r0
 8001a58:	4689      	mov	r9, r1
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.z));
 8001a5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	461a      	mov	r2, r3
 8001a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a68:	4413      	add	r3, r2
 8001a6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f9ac 	bl	8001dcc <lsm6dso_from_fs125_to_mdps>
 8001a74:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd65 	bl	8000548 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a86:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a85      	ldr	r2, [pc, #532]	; (8001cac <pawprint_readFIFO+0x608>)
 8001a96:	4651      	mov	r1, sl
 8001a98:	4630      	mov	r0, r6
 8001a9a:	f011 f973 	bl	8012d84 <sniprintf>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	    	*bufferLength += outLength;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001aac:	441a      	add	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001aba:	441a      	add	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	601a      	str	r2, [r3, #0]
	    	row_count++;
 8001ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	677b      	str	r3, [r7, #116]	; 0x74
	    for (int i = 0; i < gyr_samples; i++) {
 8001ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac8:	3301      	adds	r3, #1
 8001aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001acc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	f6ff af78 	blt.w	80019c8 <pawprint_readFIFO+0x324>
	    }

	    for (int i = 0; i < mag_samples; i++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8001adc:	e081      	b.n	8001be2 <pawprint_readFIFO+0x53e>
	    	uint8_t outLength = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//	    	FIFO_out[row_count].sensor_data.y = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.y);
//	    	FIFO_out[row_count].sensor_data.z = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;


	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	189e      	adds	r6, r3, r2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f5c3 437a 	rsb	r3, r3, #64000	; 0xfa00
 8001af6:	469a      	mov	sl, r3
	    		    		    			mag_slot[i].timestamp,
 8001af8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	461a      	mov	r2, r3
 8001b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b06:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	607b      	str	r3, [r7, #4]
	    		    						mag_slot[i].sensor_tag,
 8001b0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	461a      	mov	r2, r3
 8001b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1a:	4413      	add	r3, r2
 8001b1c:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001b1e:	603b      	str	r3, [r7, #0]
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.x),
 8001b20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2e:	4413      	add	r3, r2
 8001b30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f961 	bl	8001dfc <lis2mdl_from_lsb_to_mgauss>
 8001b3a:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	4604      	mov	r4, r0
 8001b46:	460d      	mov	r5, r1
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.y),
 8001b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b56:	4413      	add	r3, r2
 8001b58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f94d 	bl	8001dfc <lis2mdl_from_lsb_to_mgauss>
 8001b62:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcee 	bl	8000548 <__aeabi_f2d>
 8001b6c:	4680      	mov	r8, r0
 8001b6e:	4689      	mov	r9, r1
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z)
 8001b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7e:	4413      	add	r3, r2
 8001b80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f939 	bl	8001dfc <lis2mdl_from_lsb_to_mgauss>
 8001b8a:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,%.3f,%.3f,%.3f,NA\n",
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcda 	bl	8000548 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b9c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001ba0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a40      	ldr	r2, [pc, #256]	; (8001cac <pawprint_readFIFO+0x608>)
 8001bac:	4651      	mov	r1, sl
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f011 f8e8 	bl	8012d84 <sniprintf>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											);

	    	*bufferLength += outLength;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001bc2:	441a      	add	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	601a      	str	r2, [r3, #0]
	    	row_count++;
 8001bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd8:	3301      	adds	r3, #1
 8001bda:	677b      	str	r3, [r7, #116]	; 0x74
	    for (int i = 0; i < mag_samples; i++) {
 8001bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bde:	3301      	adds	r3, #1
 8001be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001be2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001be6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f6ff af78 	blt.w	8001ade <pawprint_readFIFO+0x43a>
	    }

	    for (int i = 0; i < temp_samples; i++) {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8001bf2:	e053      	b.n	8001c9c <pawprint_readFIFO+0x5f8>
	    	uint8_t outLength = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//	    	FIFO_out[row_count].sensor_data.temp = lsm6dso_from_lsb_to_celsius(temp_slot[i].sensor_data.temp);
//	    	FIFO_out[row_count].sensor_data.x = 0;
//	    	FIFO_out[row_count].sensor_data.y = 0;
//	    	FIFO_out[row_count].sensor_data.z = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	189c      	adds	r4, r3, r2
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f5c3 437a 	rsb	r3, r3, #64000	; 0xfa00
 8001c0c:	4698      	mov	r8, r3
	    		    		    			temp_slot[i].timestamp,
 8001c0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1c:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001c1e:	681d      	ldr	r5, [r3, #0]
	    		    						temp_slot[i].sensor_tag,
 8001c20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2e:	4413      	add	r3, r2
 8001c30:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001c32:	461e      	mov	r6, r3
											lsm6dso_from_lsb_to_celsius(temp_slot[i].sensor_data.temp)
 8001c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	461a      	mov	r2, r3
 8001c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c42:	4413      	add	r3, r2
 8001c44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f8ed 	bl	8001e28 <lsm6dso_from_lsb_to_celsius>
 8001c4e:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc78 	bl	8000548 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c60:	9600      	str	r6, [sp, #0]
 8001c62:	462b      	mov	r3, r5
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <pawprint_readFIFO+0x60c>)
 8001c66:	4641      	mov	r1, r8
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f011 f88b 	bl	8012d84 <sniprintf>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											);

	    	*bufferLength += outLength;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c7c:	441a      	add	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c8a:	441a      	add	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	601a      	str	r2, [r3, #0]
	    	row_count++;
 8001c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c92:	3301      	adds	r3, #1
 8001c94:	677b      	str	r3, [r7, #116]	; 0x74
	    for (int i = 0; i < temp_samples; i++) {
 8001c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c98:	3301      	adds	r3, #1
 8001c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ca0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dba6      	blt.n	8001bf4 <pawprint_readFIFO+0x550>
	    }

	    for (int i = 0; i < ext_temp_samples; i++) {
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8001caa:	e06b      	b.n	8001d84 <pawprint_readFIFO+0x6e0>
 8001cac:	080165f4 	.word	0x080165f4
 8001cb0:	08016610 	.word	0x08016610
	    	uint8_t outLength = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
//	    	FIFO_out[row_count].timestamp = ext_temp_slot[i].timestamp;
//	    	FIFO_out[row_count].sensor_tag = ext_temp_slot[i].sensor_tag;
	    	uint16_t temp_raw = (ext_temp_slot[i].sensor_data.x & 0xFF00) | (ext_temp_slot[i].sensor_data.y >> 8);
 8001cba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	4413      	add	r3, r2
 8001cca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cd2:	b219      	sxth	r1, r3
 8001cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ce8:	121b      	asrs	r3, r3, #8
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	430b      	orrs	r3, r1
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	86bb      	strh	r3, [r7, #52]	; 0x34
//	    	FIFO_out[row_count].sensor_data.temp = lsm6dso_from_lsb_to_celsius(temp_raw);
//	    	FIFO_out[row_count].sensor_data.x = 0;
//	    	FIFO_out[row_count].sensor_data.y = 0;
//	    	FIFO_out[row_count].sensor_data.z = 0;

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	189c      	adds	r4, r3, r2
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f5c3 437a 	rsb	r3, r3, #64000	; 0xfa00
 8001d04:	4698      	mov	r8, r3
	    			ext_temp_slot[i].timestamp,
 8001d06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	461a      	mov	r2, r3
 8001d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d14:	4413      	add	r3, r2
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001d16:	681d      	ldr	r5, [r3, #0]
					ext_temp_slot[i].sensor_tag,
 8001d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	4413      	add	r3, r2
 8001d28:	791b      	ldrb	r3, [r3, #4]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001d2a:	461e      	mov	r6, r3
					lsm6dso_from_lsb_to_celsius(temp_raw));
 8001d2c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f879 	bl	8001e28 <lsm6dso_from_lsb_to_celsius>
 8001d36:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*bufferLength) , "%lu,%u,NA,NA,NA,%.2f\n",
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc04 	bl	8000548 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d48:	9600      	str	r6, [sp, #0]
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <pawprint_readFIFO+0x6f4>)
 8001d4e:	4641      	mov	r1, r8
 8001d50:	4620      	mov	r0, r4
 8001d52:	f011 f817 	bl	8012d84 <sniprintf>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	    	*bufferLength += outLength;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d64:	441a      	add	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d72:	441a      	add	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	601a      	str	r2, [r3, #0]
	    	row_count++;
 8001d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	677b      	str	r3, [r7, #116]	; 0x74
	    for (int i = 0; i < ext_temp_samples; i++) {
 8001d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d80:	3301      	adds	r3, #1
 8001d82:	663b      	str	r3, [r7, #96]	; 0x60
 8001d84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	db92      	blt.n	8001cb4 <pawprint_readFIFO+0x610>
//		                lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z));
//		      }
//
//	}

}
 8001d8e:	bf00      	nop
 8001d90:	3780      	adds	r7, #128	; 0x80
 8001d92:	46bd      	mov	sp, r7
 8001d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d98:	08016610 	.word	0x08016610

08001d9c <lsm6dso_from_fs2_to_mg>:

float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001dc8 <lsm6dso_from_fs2_to_mg+0x2c>
 8001db6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	3d79db23 	.word	0x3d79db23

08001dcc <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001df8 <lsm6dso_from_fs125_to_mdps+0x2c>
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	408c0000 	.word	0x408c0000

08001dfc <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <lsm6dso_from_lsb_to_celsius>:

float_t lsm6dso_from_lsb_to_celsius(int16_t lsb)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001e5c <lsm6dso_from_lsb_to_celsius+0x34>
 8001e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e46:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	43800000 	.word	0x43800000

08001e60 <st_fifo_init>:
  *
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_init(st_fifo_conf *conf)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  float bdr_xl, bdr_gy, bdr_vsens, bdr_max;

  if (conf->bdr_xl < 0.0f || conf->bdr_gy < 0.0f || conf->bdr_vsens < 0.0f)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d40f      	bmi.n	8001e98 <st_fifo_init+0x38>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	d407      	bmi.n	8001e98 <st_fifo_init+0x38>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	d501      	bpl.n	8001e9c <st_fifo_init+0x3c>
  {
    return ST_FIFO_ERR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0b3      	b.n	8002004 <st_fifo_init+0x1a4>
  }

  if (conf->device < ST_FIFO_LSM6DSV)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d803      	bhi.n	8001eac <st_fifo_init+0x4c>
  {
    fifo_ver = 0;
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <st_fifo_init+0x1ac>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e002      	b.n	8001eb2 <st_fifo_init+0x52>
  }
  else
  {
    fifo_ver = 1;
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <st_fifo_init+0x1ac>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
  }

  tag_counter_old = 0;
 8001eb2:	4b57      	ldr	r3, [pc, #348]	; (8002010 <st_fifo_init+0x1b0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
  bdr_xl = conf->bdr_xl;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	61bb      	str	r3, [r7, #24]
  bdr_gy = conf->bdr_gy;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	617b      	str	r3, [r7, #20]
  bdr_vsens = conf->bdr_vsens;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	613b      	str	r3, [r7, #16]
  bdr_max = MAX(bdr_xl, bdr_gy);
 8001eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ece:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dd01      	ble.n	8001ee0 <st_fifo_init+0x80>
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	e000      	b.n	8001ee2 <st_fifo_init+0x82>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	60fb      	str	r3, [r7, #12]
  bdr_max = MAX(bdr_max, bdr_vsens);
 8001ee4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd01      	ble.n	8001efa <st_fifo_init+0x9a>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	e000      	b.n	8001efc <st_fifo_init+0x9c>
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	60fb      	str	r3, [r7, #12]
  dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 8001efe:	4b43      	ldr	r3, [pc, #268]	; (800200c <st_fifo_init+0x1ac>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461c      	mov	r4, r3
 8001f04:	4b41      	ldr	r3, [pc, #260]	; (800200c <st_fifo_init+0x1ac>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <st_fifo_init+0x1b4>)
 8001f14:	4413      	add	r3, r2
 8001f16:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 fa10 	bl	8003340 <bdr_get_index>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4619      	mov	r1, r3
 8001f24:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <st_fifo_init+0x1b4>)
 8001f26:	4623      	mov	r3, r4
 8001f28:	019b      	lsls	r3, r3, #6
 8001f2a:	4423      	add	r3, r4
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3330      	adds	r3, #48	; 0x30
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	4a38      	ldr	r2, [pc, #224]	; (8002018 <st_fifo_init+0x1b8>)
 8001f36:	6013      	str	r3, [r2, #0]
  dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <st_fifo_init+0x1ac>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <st_fifo_init+0x1ac>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4613      	mov	r3, r2
 8001f46:	019b      	lsls	r3, r3, #6
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4a31      	ldr	r2, [pc, #196]	; (8002014 <st_fifo_init+0x1b4>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f9f3 	bl	8003340 <bdr_get_index>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <st_fifo_init+0x1b4>)
 8001f60:	4623      	mov	r3, r4
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	4423      	add	r3, r4
 8001f66:	440b      	add	r3, r1
 8001f68:	3330      	adds	r3, #48	; 0x30
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	4a2b      	ldr	r2, [pc, #172]	; (800201c <st_fifo_init+0x1bc>)
 8001f70:	6013      	str	r3, [r2, #0]
  dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <st_fifo_init+0x1ac>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461c      	mov	r4, r3
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <st_fifo_init+0x1ac>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	3340      	adds	r3, #64	; 0x40
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <st_fifo_init+0x1b4>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 f9d5 	bl	8003340 <bdr_get_index>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <st_fifo_init+0x1b4>)
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	019b      	lsls	r3, r3, #6
 8001fa0:	4423      	add	r3, r4
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3330      	adds	r3, #48	; 0x30
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <st_fifo_init+0x1c0>)
 8001fac:	6013      	str	r3, [r2, #0]
  dtime_xl_old = dtime_xl;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <st_fifo_init+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <st_fifo_init+0x1c4>)
 8001fb4:	6013      	str	r3, [r2, #0]
  dtime_gy_old = dtime_gy;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <st_fifo_init+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <st_fifo_init+0x1c8>)
 8001fbc:	6013      	str	r3, [r2, #0]
  timestamp = 0;
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <st_fifo_init+0x1cc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  bdr_chg_xl_flag = 0;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <st_fifo_init+0x1d0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  bdr_chg_gy_flag = 0;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <st_fifo_init+0x1d4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
  last_timestamp_xl = 0;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <st_fifo_init+0x1d8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
  last_timestamp_gy = 0;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <st_fifo_init+0x1dc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

  for (uint8_t i = 0; i < 3u; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
 8001fe0:	e00c      	b.n	8001ffc <st_fifo_init+0x19c>
  {
    last_data_xl[i] = 0;
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <st_fifo_init+0x1e0>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    last_data_gy[i] = 0;
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <st_fifo_init+0x1e4>)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < 3u; i++)
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	77fb      	strb	r3, [r7, #31]
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d9ef      	bls.n	8001fe2 <st_fifo_init+0x182>
  }

  return ST_FIFO_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3724      	adds	r7, #36	; 0x24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	2000fe84 	.word	0x2000fe84
 8002010:	2000fe85 	.word	0x2000fe85
 8002014:	080166ac 	.word	0x080166ac
 8002018:	2000fe90 	.word	0x2000fe90
 800201c:	2000fe88 	.word	0x2000fe88
 8002020:	2000fe8c 	.word	0x2000fe8c
 8002024:	2000fe94 	.word	0x2000fe94
 8002028:	2000fe98 	.word	0x2000fe98
 800202c:	2000fe9c 	.word	0x2000fe9c
 8002030:	2000fea8 	.word	0x2000fea8
 8002034:	2000fea9 	.word	0x2000fea9
 8002038:	2000fea0 	.word	0x2000fea0
 800203c:	2000fea4 	.word	0x2000fea4
 8002040:	2000feac 	.word	0x2000feac
 8002044:	2000feb4 	.word	0x2000feb4

08002048 <st_fifo_decode>:
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_decode(st_fifo_out_slot *fifo_out_slot,
                              st_fifo_raw_slot *fifo_raw_slot, uint16_t *out_slot_size, uint16_t stream_size)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b09b      	sub	sp, #108	; 0x6c
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	807b      	strh	r3, [r7, #2]
  uint16_t j = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

  for (uint16_t i = 0; i < stream_size; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002062:	f000 bf87 	b.w	8002f74 <st_fifo_decode+0xf2c>
  {

    uint8_t tag = (fifo_raw_slot[i].fifo_data_out[0] & TAG_SENSOR_MASK) >> TAG_SENSOR_SHIFT;
 8002066:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	08db      	lsrs	r3, r3, #3
 8002078:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t tag_counter = (fifo_raw_slot[i].fifo_data_out[0] & TAG_COUNTER_MASK) >> TAG_COUNTER_SHIFT;
 800207c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    if (fifo_ver == 0u && has_even_parity(fifo_raw_slot[i].fifo_data_out[0]) == 0u)
 8002098:	4b99      	ldr	r3, [pc, #612]	; (8002300 <st_fifo_decode+0x2b8>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d110      	bne.n	80020c2 <st_fifo_decode+0x7a>
 80020a0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 f9a5 	bl	8003400 <has_even_parity>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <st_fifo_decode+0x7a>
    {
      return ST_FIFO_ERR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 bf60 	b.w	8002f82 <st_fifo_decode+0xf3a>
    }

    if (is_tag_valid(tag) == 0u)
 80020c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 f832 	bl	8003130 <is_tag_valid>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <st_fifo_decode+0x90>
    {
      return ST_FIFO_ERR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f000 bf55 	b.w	8002f82 <st_fifo_decode+0xf3a>
    }

    if ((tag_counter != (tag_counter_old)) && dtime_min != 0u)
 80020d8:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <st_fifo_decode+0x2bc>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d025      	beq.n	8002130 <st_fifo_decode+0xe8>
 80020e4:	4b88      	ldr	r3, [pc, #544]	; (8002308 <st_fifo_decode+0x2c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d021      	beq.n	8002130 <st_fifo_decode+0xe8>
    {
      uint8_t diff_tag_counter;

      if (tag_counter < tag_counter_old)
 80020ec:	4b85      	ldr	r3, [pc, #532]	; (8002304 <st_fifo_decode+0x2bc>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d209      	bcs.n	800210c <st_fifo_decode+0xc4>
      {
        diff_tag_counter = tag_counter + 4u - tag_counter_old;
 80020f8:	4b82      	ldr	r3, [pc, #520]	; (8002304 <st_fifo_decode+0x2bc>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3304      	adds	r3, #4
 8002106:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800210a:	e006      	b.n	800211a <st_fifo_decode+0xd2>
      }
      else
      {
        diff_tag_counter = tag_counter - tag_counter_old;
 800210c:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <st_fifo_decode+0x2bc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      }

      timestamp += dtime_min * diff_tag_counter;
 800211a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800211e:	4a7a      	ldr	r2, [pc, #488]	; (8002308 <st_fifo_decode+0x2c0>)
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	fb03 f202 	mul.w	r2, r3, r2
 8002126:	4b79      	ldr	r3, [pc, #484]	; (800230c <st_fifo_decode+0x2c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a77      	ldr	r2, [pc, #476]	; (800230c <st_fifo_decode+0x2c4>)
 800212e:	6013      	str	r3, [r2, #0]
    }

    if (tag == TAG_ODRCHG)
 8002130:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002134:	2b05      	cmp	r3, #5
 8002136:	f040 80d1 	bne.w	80022dc <st_fifo_decode+0x294>
    {

      uint8_t bdr_acc_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_XL_MASK) >> BDR_XL_SHIFT;
 800213a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	4413      	add	r3, r2
 8002148:	799b      	ldrb	r3, [r3, #6]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      uint8_t bdr_gyr_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_GY_MASK) >> BDR_GY_SHIFT;
 8002152:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	4413      	add	r3, r2
 8002160:	799b      	ldrb	r3, [r3, #6]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      uint8_t bdr_vsens_cfg = (fifo_raw_slot[i].fifo_data_out[4] & BDR_VSENS_MASK) >> BDR_VSENS_SHIFT;
 8002168:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	791b      	ldrb	r3, [r3, #4]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

      float bdr_xl = device[fifo_ver].bdr_acc[bdr_acc_cfg];
 8002180:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <st_fifo_decode+0x2b8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800218a:	4961      	ldr	r1, [pc, #388]	; (8002310 <st_fifo_decode+0x2c8>)
 800218c:	4603      	mov	r3, r0
 800218e:	019b      	lsls	r3, r3, #6
 8002190:	4403      	add	r3, r0
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
      float bdr_gy = device[fifo_ver].bdr_gyr[bdr_gyr_cfg];
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <st_fifo_decode+0x2b8>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80021a6:	495a      	ldr	r1, [pc, #360]	; (8002310 <st_fifo_decode+0x2c8>)
 80021a8:	4603      	mov	r3, r0
 80021aa:	019b      	lsls	r3, r3, #6
 80021ac:	4403      	add	r3, r0
 80021ae:	4413      	add	r3, r2
 80021b0:	3310      	adds	r3, #16
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
      float bdr_vsens = device[fifo_ver].bdr_vsens[bdr_vsens_cfg];
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <st_fifo_decode+0x2b8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80021c4:	4952      	ldr	r1, [pc, #328]	; (8002310 <st_fifo_decode+0x2c8>)
 80021c6:	4603      	mov	r3, r0
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	4403      	add	r3, r0
 80021cc:	4413      	add	r3, r2
 80021ce:	3320      	adds	r3, #32
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	637b      	str	r3, [r7, #52]	; 0x34
      float bdr_max = MAX(bdr_xl, bdr_gy);
 80021d8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80021dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	dd01      	ble.n	80021ee <st_fifo_decode+0x1a6>
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	e000      	b.n	80021f0 <st_fifo_decode+0x1a8>
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
      bdr_max = MAX(bdr_max, bdr_vsens);
 80021f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80021f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	dd01      	ble.n	8002208 <st_fifo_decode+0x1c0>
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	e000      	b.n	800220a <st_fifo_decode+0x1c2>
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	633b      	str	r3, [r7, #48]	; 0x30

      dtime_xl_old = dtime_xl;
 800220c:	4b41      	ldr	r3, [pc, #260]	; (8002314 <st_fifo_decode+0x2cc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a41      	ldr	r2, [pc, #260]	; (8002318 <st_fifo_decode+0x2d0>)
 8002212:	6013      	str	r3, [r2, #0]
      dtime_gy_old = dtime_gy;
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <st_fifo_decode+0x2d4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a41      	ldr	r2, [pc, #260]	; (8002320 <st_fifo_decode+0x2d8>)
 800221a:	6013      	str	r3, [r2, #0]
      dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 800221c:	4b38      	ldr	r3, [pc, #224]	; (8002300 <st_fifo_decode+0x2b8>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461c      	mov	r4, r3
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <st_fifo_decode+0x2b8>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4613      	mov	r3, r2
 800222a:	019b      	lsls	r3, r3, #6
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4a37      	ldr	r2, [pc, #220]	; (8002310 <st_fifo_decode+0x2c8>)
 8002232:	4413      	add	r3, r2
 8002234:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f881 	bl	8003340 <bdr_get_index>
 800223e:	4603      	mov	r3, r0
 8002240:	4619      	mov	r1, r3
 8002242:	4a33      	ldr	r2, [pc, #204]	; (8002310 <st_fifo_decode+0x2c8>)
 8002244:	4623      	mov	r3, r4
 8002246:	019b      	lsls	r3, r3, #6
 8002248:	4423      	add	r3, r4
 800224a:	440b      	add	r3, r1
 800224c:	3330      	adds	r3, #48	; 0x30
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <st_fifo_decode+0x2c0>)
 8002254:	6013      	str	r3, [r2, #0]
      dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <st_fifo_decode+0x2b8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461c      	mov	r4, r3
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <st_fifo_decode+0x2b8>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <st_fifo_decode+0x2c8>)
 800226c:	4413      	add	r3, r2
 800226e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002272:	4618      	mov	r0, r3
 8002274:	f001 f864 	bl	8003340 <bdr_get_index>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <st_fifo_decode+0x2c8>)
 800227e:	4623      	mov	r3, r4
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	4423      	add	r3, r4
 8002284:	440b      	add	r3, r1
 8002286:	3330      	adds	r3, #48	; 0x30
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	4a21      	ldr	r2, [pc, #132]	; (8002314 <st_fifo_decode+0x2cc>)
 800228e:	6013      	str	r3, [r2, #0]
      dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <st_fifo_decode+0x2b8>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461c      	mov	r4, r3
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <st_fifo_decode+0x2b8>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4613      	mov	r3, r2
 800229e:	019b      	lsls	r3, r3, #6
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	3340      	adds	r3, #64	; 0x40
 80022a6:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <st_fifo_decode+0x2c8>)
 80022a8:	4413      	add	r3, r2
 80022aa:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f846 	bl	8003340 <bdr_get_index>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <st_fifo_decode+0x2c8>)
 80022ba:	4623      	mov	r3, r4
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	4423      	add	r3, r4
 80022c0:	440b      	add	r3, r1
 80022c2:	3330      	adds	r3, #48	; 0x30
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <st_fifo_decode+0x2d4>)
 80022ca:	6013      	str	r3, [r2, #0]

      bdr_chg_xl_flag = 1;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <st_fifo_decode+0x2dc>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
      bdr_chg_gy_flag = 1;
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <st_fifo_decode+0x2e0>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	f000 be41 	b.w	8002f5e <st_fifo_decode+0xf16>

    }
    else if (tag == TAG_TS)
 80022dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d123      	bne.n	800232c <st_fifo_decode+0x2e4>
    {

      (void)memcpy(&timestamp, &fifo_raw_slot[i].fifo_data_out[1], 4);
 80022e4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	3301      	adds	r3, #1
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <st_fifo_decode+0x2c4>)
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f000 be2f 	b.w	8002f5e <st_fifo_decode+0xf16>
 8002300:	2000fe84 	.word	0x2000fe84
 8002304:	2000fe85 	.word	0x2000fe85
 8002308:	2000fe90 	.word	0x2000fe90
 800230c:	2000fe9c 	.word	0x2000fe9c
 8002310:	080166ac 	.word	0x080166ac
 8002314:	2000fe88 	.word	0x2000fe88
 8002318:	2000fe94 	.word	0x2000fe94
 800231c:	2000fe8c 	.word	0x2000fe8c
 8002320:	2000fe98 	.word	0x2000fe98
 8002324:	2000fea8 	.word	0x2000fea8
 8002328:	2000fea9 	.word	0x2000fea9

    }
    else
    {

      st_fifo_compression_type compression_type = get_compression_type(tag);
 800232c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002330:	4618      	mov	r0, r3
 8002332:	f000 ffc7 	bl	80032c4 <get_compression_type>
 8002336:	4603      	mov	r3, r0
 8002338:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      st_fifo_sensor_type sensor_type = get_sensor_type(tag);
 800233c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002340:	4618      	mov	r0, r3
 8002342:	f000 ff17 	bl	8003174 <get_sensor_type>
 8002346:	4603      	mov	r3, r0
 8002348:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

      if (compression_type == ST_FIFO_COMPRESSION_NC)
 800234c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002350:	2b00      	cmp	r3, #0
 8002352:	d16d      	bne.n	8002430 <st_fifo_decode+0x3e8>
      {

        if (tag == TAG_EMPTY)
 8002354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8605 	beq.w	8002f68 <st_fifo_decode+0xf20>
        {
          continue;
        }

        fifo_out_slot[j].timestamp = timestamp;
 800235e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	4ab1      	ldr	r2, [pc, #708]	; (8002638 <st_fifo_decode+0x5f0>)
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	601a      	str	r2, [r3, #0]

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002376:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800238c:	711a      	strb	r2, [r3, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800238e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 80023a2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	4413      	add	r3, r2
 80023b0:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80023b2:	2206      	movs	r2, #6
 80023b4:	4619      	mov	r1, r3
 80023b6:	f010 fe0b 	bl	8012fd0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80023ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d115      	bne.n	80023ee <st_fifo_decode+0x3a6>
        {
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80023c2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	3306      	adds	r3, #6
 80023d6:	2206      	movs	r2, #6
 80023d8:	4619      	mov	r1, r3
 80023da:	4898      	ldr	r0, [pc, #608]	; (800263c <st_fifo_decode+0x5f4>)
 80023dc:	f010 fdf8 	bl	8012fd0 <memcpy>
          last_timestamp_xl = timestamp;
 80023e0:	4b95      	ldr	r3, [pc, #596]	; (8002638 <st_fifo_decode+0x5f0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a96      	ldr	r2, [pc, #600]	; (8002640 <st_fifo_decode+0x5f8>)
 80023e6:	6013      	str	r3, [r2, #0]
          bdr_chg_xl_flag = 0;
 80023e8:	4b96      	ldr	r3, [pc, #600]	; (8002644 <st_fifo_decode+0x5fc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80023ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <st_fifo_decode+0x3da>
        {
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80023f6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	3306      	adds	r3, #6
 800240a:	2206      	movs	r2, #6
 800240c:	4619      	mov	r1, r3
 800240e:	488e      	ldr	r0, [pc, #568]	; (8002648 <st_fifo_decode+0x600>)
 8002410:	f010 fdde 	bl	8012fd0 <memcpy>
          last_timestamp_gy = timestamp;
 8002414:	4b88      	ldr	r3, [pc, #544]	; (8002638 <st_fifo_decode+0x5f0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a8c      	ldr	r2, [pc, #560]	; (800264c <st_fifo_decode+0x604>)
 800241a:	6013      	str	r3, [r2, #0]
          bdr_chg_gy_flag = 0;
 800241c:	4b8c      	ldr	r3, [pc, #560]	; (8002650 <st_fifo_decode+0x608>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
        }

        j++;
 8002422:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002426:	3301      	adds	r3, #1
 8002428:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800242c:	f000 bd93 	b.w	8002f56 <st_fifo_decode+0xf0e>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_1)
 8002430:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 8091 	bne.w	800255c <st_fifo_decode+0x514>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 800243a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	189c      	adds	r4, r3, r2
 800244c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fe8f 	bl	8003174 <get_sensor_type>
 8002456:	4603      	mov	r3, r0
 8002458:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800245a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 800246e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4413      	add	r3, r2
 800247c:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800247e:	2206      	movs	r2, #6
 8002480:	4619      	mov	r1, r3
 8002482:	f010 fda5 	bl	8012fd0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002486:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d12d      	bne.n	80024ea <st_fifo_decode+0x4a2>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 800248e:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <st_fifo_decode+0x5fc>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d106      	bne.n	80024a4 <st_fifo_decode+0x45c>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <st_fifo_decode+0x5f8>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <st_fifo_decode+0x60c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024a2:	e005      	b.n	80024b0 <st_fifo_decode+0x468>
          }
          else
          {
            last_timestamp = timestamp - dtime_xl;
 80024a4:	4b64      	ldr	r3, [pc, #400]	; (8002638 <st_fifo_decode+0x5f0>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <st_fifo_decode+0x610>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	65fb      	str	r3, [r7, #92]	; 0x5c
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 80024b0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80024c4:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80024c6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	3306      	adds	r3, #6
 80024da:	2206      	movs	r2, #6
 80024dc:	4619      	mov	r1, r3
 80024de:	4857      	ldr	r0, [pc, #348]	; (800263c <st_fifo_decode+0x5f4>)
 80024e0:	f010 fd76 	bl	8012fd0 <memcpy>
          last_timestamp_xl = last_timestamp;
 80024e4:	4a56      	ldr	r2, [pc, #344]	; (8002640 <st_fifo_decode+0x5f8>)
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80024ea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d12d      	bne.n	800254e <st_fifo_decode+0x506>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 80024f2:	4b57      	ldr	r3, [pc, #348]	; (8002650 <st_fifo_decode+0x608>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d106      	bne.n	8002508 <st_fifo_decode+0x4c0>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <st_fifo_decode+0x604>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <st_fifo_decode+0x614>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
 8002506:	e005      	b.n	8002514 <st_fifo_decode+0x4cc>
          }
          else
          {
            last_timestamp = timestamp - dtime_gy;
 8002508:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <st_fifo_decode+0x5f0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b54      	ldr	r3, [pc, #336]	; (8002660 <st_fifo_decode+0x618>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	65bb      	str	r3, [r7, #88]	; 0x58
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002514:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4413      	add	r3, r2
 8002526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002528:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 800252a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	3306      	adds	r3, #6
 800253e:	2206      	movs	r2, #6
 8002540:	4619      	mov	r1, r3
 8002542:	4841      	ldr	r0, [pc, #260]	; (8002648 <st_fifo_decode+0x600>)
 8002544:	f010 fd44 	bl	8012fd0 <memcpy>
          last_timestamp_gy = last_timestamp;
 8002548:	4a40      	ldr	r2, [pc, #256]	; (800264c <st_fifo_decode+0x604>)
 800254a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254c:	6013      	str	r3, [r2, #0]
        }

        j++;
 800254e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002552:	3301      	adds	r3, #1
 8002554:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002558:	f000 bcfd 	b.w	8002f56 <st_fifo_decode+0xf0e>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_2)
 800255c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002560:	2b02      	cmp	r3, #2
 8002562:	f040 80b3 	bne.w	80026cc <st_fifo_decode+0x684>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 8002566:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	189c      	adds	r4, r3, r2
 8002578:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fdf9 	bl	8003174 <get_sensor_type>
 8002582:	4603      	mov	r3, r0
 8002584:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002586:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 800259a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80025aa:	2206      	movs	r2, #6
 80025ac:	4619      	mov	r1, r3
 80025ae:	f010 fd0f 	bl	8012fd0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80025b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d12e      	bne.n	8002618 <st_fifo_decode+0x5d0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <st_fifo_decode+0x5fc>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <st_fifo_decode+0x588>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <st_fifo_decode+0x5f8>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b23      	ldr	r3, [pc, #140]	; (8002654 <st_fifo_decode+0x60c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	657b      	str	r3, [r7, #84]	; 0x54
 80025ce:	e006      	b.n	80025de <st_fifo_decode+0x596>
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_xl;
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <st_fifo_decode+0x5f0>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <st_fifo_decode+0x610>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	657b      	str	r3, [r7, #84]	; 0x54
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 80025de:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025f2:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80025f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4413      	add	r3, r2
 8002606:	3306      	adds	r3, #6
 8002608:	2206      	movs	r2, #6
 800260a:	4619      	mov	r1, r3
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <st_fifo_decode+0x5f4>)
 800260e:	f010 fcdf 	bl	8012fd0 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <st_fifo_decode+0x5f8>)
 8002614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002616:	6013      	str	r3, [r2, #0]
        }
        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002618:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d145      	bne.n	80026ac <st_fifo_decode+0x664>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <st_fifo_decode+0x608>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d11d      	bne.n	8002664 <st_fifo_decode+0x61c>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <st_fifo_decode+0x604>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <st_fifo_decode+0x614>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4413      	add	r3, r2
 8002632:	653b      	str	r3, [r7, #80]	; 0x50
 8002634:	e01d      	b.n	8002672 <st_fifo_decode+0x62a>
 8002636:	bf00      	nop
 8002638:	2000fe9c 	.word	0x2000fe9c
 800263c:	2000feac 	.word	0x2000feac
 8002640:	2000fea0 	.word	0x2000fea0
 8002644:	2000fea8 	.word	0x2000fea8
 8002648:	2000feb4 	.word	0x2000feb4
 800264c:	2000fea4 	.word	0x2000fea4
 8002650:	2000fea9 	.word	0x2000fea9
 8002654:	2000fe94 	.word	0x2000fe94
 8002658:	2000fe88 	.word	0x2000fe88
 800265c:	2000fe98 	.word	0x2000fe98
 8002660:	2000fe8c 	.word	0x2000fe8c
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_gy;
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <st_fifo_decode+0x674>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <st_fifo_decode+0x678>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	653b      	str	r3, [r7, #80]	; 0x50
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002672:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002686:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002688:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	461a      	mov	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	3306      	adds	r3, #6
 800269c:	2206      	movs	r2, #6
 800269e:	4619      	mov	r1, r3
 80026a0:	4808      	ldr	r0, [pc, #32]	; (80026c4 <st_fifo_decode+0x67c>)
 80026a2:	f010 fc95 	bl	8012fd0 <memcpy>
          last_timestamp_gy = last_timestamp;
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <st_fifo_decode+0x680>)
 80026a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026aa:	6013      	str	r3, [r2, #0]
        }

        j++;
 80026ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80026b0:	3301      	adds	r3, #1
 80026b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80026b6:	f000 bc4e 	b.w	8002f56 <st_fifo_decode+0xf0e>
 80026ba:	bf00      	nop
 80026bc:	2000fe9c 	.word	0x2000fe9c
 80026c0:	2000fe8c 	.word	0x2000fe8c
 80026c4:	2000feb4 	.word	0x2000feb4
 80026c8:	2000fea4 	.word	0x2000fea4

      }
      else if (compression_type == ST_FIFO_COMPRESSION_2X)
 80026cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	f040 81c7 	bne.w	8002a64 <st_fifo_decode+0xa1c>
      {

        int16_t diff[6];
        get_diff_2x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 80026d6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4413      	add	r3, r2
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 feb2 	bl	8003456 <get_diff_2x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 80026f2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002708:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 800270a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d15a      	bne.n	80027c8 <st_fifo_decode+0x780>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002712:	4bbf      	ldr	r3, [pc, #764]	; (8002a10 <st_fifo_decode+0x9c8>)
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	b29a      	uxth	r2, r3
 800271a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800271e:	b29b      	uxth	r3, r3
 8002720:	4413      	add	r3, r2
 8002722:	b299      	uxth	r1, r3
 8002724:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	b20a      	sxth	r2, r1
 8002738:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 800273a:	4bb5      	ldr	r3, [pc, #724]	; (8002a10 <st_fifo_decode+0x9c8>)
 800273c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002740:	b29a      	uxth	r2, r3
 8002742:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002746:	b29b      	uxth	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	b299      	uxth	r1, r3
 800274c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	461a      	mov	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	b20a      	sxth	r2, r1
 8002760:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002762:	4bab      	ldr	r3, [pc, #684]	; (8002a10 <st_fifo_decode+0x9c8>)
 8002764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002768:	b29a      	uxth	r2, r3
 800276a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b299      	uxth	r1, r3
 8002774:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4413      	add	r3, r2
 8002786:	b20a      	sxth	r2, r1
 8002788:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 800278a:	4ba2      	ldr	r3, [pc, #648]	; (8002a14 <st_fifo_decode+0x9cc>)
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	4ba2      	ldr	r3, [pc, #648]	; (8002a18 <st_fifo_decode+0x9d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0059      	lsls	r1, r3, #1
 8002794:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	461a      	mov	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4413      	add	r3, r2
 80027a6:	1a42      	subs	r2, r0, r1
 80027a8:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80027aa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	3306      	adds	r3, #6
 80027be:	2206      	movs	r2, #6
 80027c0:	4619      	mov	r1, r3
 80027c2:	4893      	ldr	r0, [pc, #588]	; (8002a10 <st_fifo_decode+0x9c8>)
 80027c4:	f010 fc04 	bl	8012fd0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80027c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d15a      	bne.n	8002886 <st_fifo_decode+0x83e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <st_fifo_decode+0x9d4>)
 80027d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4413      	add	r3, r2
 80027e0:	b299      	uxth	r1, r3
 80027e2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	b20a      	sxth	r2, r1
 80027f6:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <st_fifo_decode+0x9d4>)
 80027fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002804:	b29b      	uxth	r3, r3
 8002806:	4413      	add	r3, r2
 8002808:	b299      	uxth	r1, r3
 800280a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	b20a      	sxth	r2, r1
 800281e:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <st_fifo_decode+0x9d4>)
 8002822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002826:	b29a      	uxth	r2, r3
 8002828:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800282c:	b29b      	uxth	r3, r3
 800282e:	4413      	add	r3, r2
 8002830:	b299      	uxth	r1, r3
 8002832:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	b20a      	sxth	r2, r1
 8002846:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002848:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <st_fifo_decode+0x9cc>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <st_fifo_decode+0x9d8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0059      	lsls	r1, r3, #1
 8002852:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	1a42      	subs	r2, r0, r1
 8002866:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002868:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	461a      	mov	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	3306      	adds	r3, #6
 800287c:	2206      	movs	r2, #6
 800287e:	4619      	mov	r1, r3
 8002880:	4866      	ldr	r0, [pc, #408]	; (8002a1c <st_fifo_decode+0x9d4>)
 8002882:	f010 fba5 	bl	8012fd0 <memcpy>
        }

        j++;
 8002886:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800288a:	3301      	adds	r3, #1
 800288c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002890:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80028a6:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80028a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d15e      	bne.n	800296e <st_fifo_decode+0x926>
        {
          uint32_t last_timestamp = timestamp - dtime_xl;
 80028b0:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <st_fifo_decode+0x9cc>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <st_fifo_decode+0x9d0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	64bb      	str	r3, [r7, #72]	; 0x48
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 80028bc:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <st_fifo_decode+0x9c8>)
 80028be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	b299      	uxth	r1, r3
 80028ce:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	b20a      	sxth	r2, r1
 80028e2:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 80028e4:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <st_fifo_decode+0x9c8>)
 80028e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	b299      	uxth	r1, r3
 80028f6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	b20a      	sxth	r2, r1
 800290a:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 800290c:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <st_fifo_decode+0x9c8>)
 800290e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002912:	b29a      	uxth	r2, r3
 8002914:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b299      	uxth	r1, r3
 800291e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	b20a      	sxth	r2, r1
 8002932:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 8002934:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	461a      	mov	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4413      	add	r3, r2
 8002946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002948:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 800294a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	3306      	adds	r3, #6
 800295e:	2206      	movs	r2, #6
 8002960:	4619      	mov	r1, r3
 8002962:	482b      	ldr	r0, [pc, #172]	; (8002a10 <st_fifo_decode+0x9c8>)
 8002964:	f010 fb34 	bl	8012fd0 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002968:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <st_fifo_decode+0x9dc>)
 800296a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296c:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 800296e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d16c      	bne.n	8002a50 <st_fifo_decode+0xa08>
        {
          uint32_t last_timestamp = timestamp - dtime_gy;
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <st_fifo_decode+0x9cc>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <st_fifo_decode+0x9d8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <st_fifo_decode+0x9d4>)
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	b29a      	uxth	r2, r3
 800298a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	b299      	uxth	r1, r3
 8002994:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	b20a      	sxth	r2, r1
 80029a8:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <st_fifo_decode+0x9d4>)
 80029ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	b299      	uxth	r1, r3
 80029bc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	461a      	mov	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	b20a      	sxth	r2, r1
 80029d0:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <st_fifo_decode+0x9d4>)
 80029d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	b299      	uxth	r1, r3
 80029e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	b20a      	sxth	r2, r1
 80029f8:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 80029fa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	e00c      	b.n	8002a28 <st_fifo_decode+0x9e0>
 8002a0e:	bf00      	nop
 8002a10:	2000feac 	.word	0x2000feac
 8002a14:	2000fe9c 	.word	0x2000fe9c
 8002a18:	2000fe88 	.word	0x2000fe88
 8002a1c:	2000feb4 	.word	0x2000feb4
 8002a20:	2000fe8c 	.word	0x2000fe8c
 8002a24:	2000fea0 	.word	0x2000fea0
 8002a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2a:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002a2c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3306      	adds	r3, #6
 8002a40:	2206      	movs	r2, #6
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	; (8002a5c <st_fifo_decode+0xa14>)
 8002a46:	f010 fac3 	bl	8012fd0 <memcpy>
          last_timestamp_gy = last_timestamp;
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <st_fifo_decode+0xa18>)
 8002a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4e:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002a50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a54:	3301      	adds	r3, #1
 8002a56:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002a5a:	e27c      	b.n	8002f56 <st_fifo_decode+0xf0e>
 8002a5c:	2000feb4 	.word	0x2000feb4
 8002a60:	2000fea4 	.word	0x2000fea4

      }
      else /* compression_type == ST_FIFO_COMPRESSION_3X */
      {
        int16_t diff[9];
        get_diff_3x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8002a64:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4413      	add	r3, r2
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd1b 	bl	80034b6 <get_diff_3x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002a80:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002a96:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002a98:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d15a      	bne.n	8002b56 <st_fifo_decode+0xb0e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002aa0:	4bc1      	ldr	r3, [pc, #772]	; (8002da8 <st_fifo_decode+0xd60>)
 8002aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	b299      	uxth	r1, r3
 8002ab2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b20a      	sxth	r2, r1
 8002ac6:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8002ac8:	4bb7      	ldr	r3, [pc, #732]	; (8002da8 <st_fifo_decode+0xd60>)
 8002aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b299      	uxth	r1, r3
 8002ada:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	b20a      	sxth	r2, r1
 8002aee:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002af0:	4bad      	ldr	r3, [pc, #692]	; (8002da8 <st_fifo_decode+0xd60>)
 8002af2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	b299      	uxth	r1, r3
 8002b02:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	b20a      	sxth	r2, r1
 8002b16:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 8002b18:	4ba4      	ldr	r3, [pc, #656]	; (8002dac <st_fifo_decode+0xd64>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	4ba4      	ldr	r3, [pc, #656]	; (8002db0 <st_fifo_decode+0xd68>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0059      	lsls	r1, r3, #1
 8002b22:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	1a42      	subs	r2, r0, r1
 8002b36:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002b38:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3306      	adds	r3, #6
 8002b4c:	2206      	movs	r2, #6
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4895      	ldr	r0, [pc, #596]	; (8002da8 <st_fifo_decode+0xd60>)
 8002b52:	f010 fa3d 	bl	8012fd0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002b56:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d15a      	bne.n	8002c14 <st_fifo_decode+0xbcc>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002b5e:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b299      	uxth	r1, r3
 8002b70:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	b20a      	sxth	r2, r1
 8002b84:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002b86:	4b8b      	ldr	r3, [pc, #556]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002b88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	b299      	uxth	r1, r3
 8002b98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	b20a      	sxth	r2, r1
 8002bac:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002bb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b299      	uxth	r1, r3
 8002bc0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b20a      	sxth	r2, r1
 8002bd4:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002bd6:	4b75      	ldr	r3, [pc, #468]	; (8002dac <st_fifo_decode+0xd64>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <st_fifo_decode+0xd70>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0059      	lsls	r1, r3, #1
 8002be0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	461a      	mov	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	1a42      	subs	r2, r0, r1
 8002bf4:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002bf6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	3306      	adds	r3, #6
 8002c0a:	2206      	movs	r2, #6
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4869      	ldr	r0, [pc, #420]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002c10:	f010 f9de 	bl	8012fd0 <memcpy>
        }

        j++;
 8002c14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002c1e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002c34:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002c36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d159      	bne.n	8002cf2 <st_fifo_decode+0xcaa>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <st_fifo_decode+0xd60>)
 8002c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b299      	uxth	r1, r3
 8002c50:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	b20a      	sxth	r2, r1
 8002c64:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002c66:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <st_fifo_decode+0xd60>)
 8002c68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	b299      	uxth	r1, r3
 8002c78:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	461a      	mov	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	b20a      	sxth	r2, r1
 8002c8c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 8002c8e:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <st_fifo_decode+0xd60>)
 8002c90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b299      	uxth	r1, r3
 8002ca0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	461a      	mov	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b20a      	sxth	r2, r1
 8002cb4:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_xl;
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <st_fifo_decode+0xd64>)
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <st_fifo_decode+0xd68>)
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	1a42      	subs	r2, r0, r1
 8002cd2:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002cd4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3306      	adds	r3, #6
 8002ce8:	2206      	movs	r2, #6
 8002cea:	4619      	mov	r1, r3
 8002cec:	482e      	ldr	r0, [pc, #184]	; (8002da8 <st_fifo_decode+0xd60>)
 8002cee:	f010 f96f 	bl	8012fd0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002cf2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d165      	bne.n	8002dc6 <st_fifo_decode+0xd7e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002cfa:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	b20a      	sxth	r2, r1
 8002d20:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002d24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	b299      	uxth	r1, r3
 8002d34:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	b20a      	sxth	r2, r1
 8002d48:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <st_fifo_decode+0xd6c>)
 8002d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	b299      	uxth	r1, r3
 8002d5c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b20a      	sxth	r2, r1
 8002d70:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_gy;
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <st_fifo_decode+0xd64>)
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <st_fifo_decode+0xd70>)
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	1a42      	subs	r2, r0, r1
 8002d8e:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002d90:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4413      	add	r3, r2
 8002da2:	3306      	adds	r3, #6
 8002da4:	e00a      	b.n	8002dbc <st_fifo_decode+0xd74>
 8002da6:	bf00      	nop
 8002da8:	2000feac 	.word	0x2000feac
 8002dac:	2000fe9c 	.word	0x2000fe9c
 8002db0:	2000fe88 	.word	0x2000fe88
 8002db4:	2000feb4 	.word	0x2000feb4
 8002db8:	2000fe8c 	.word	0x2000fe8c
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4872      	ldr	r0, [pc, #456]	; (8002f8c <st_fifo_decode+0xf44>)
 8002dc2:	f010 f905 	bl	8012fd0 <memcpy>
        }

        j++;
 8002dc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].timestamp = timestamp;
 8002dd0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a6b      	ldr	r2, [pc, #428]	; (8002f90 <st_fifo_decode+0xf48>)
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	601a      	str	r2, [r3, #0]
        fifo_out_slot[j].sensor_tag = sensor_type;
 8002de8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	461a      	mov	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002dfe:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002e00:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d14e      	bne.n	8002ea6 <st_fifo_decode+0xe5e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[6];
 8002e08:	4b62      	ldr	r3, [pc, #392]	; (8002f94 <st_fifo_decode+0xf4c>)
 8002e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b20a      	sxth	r2, r1
 8002e2e:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[7];
 8002e30:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <st_fifo_decode+0xf4c>)
 8002e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	b299      	uxth	r1, r3
 8002e42:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	b20a      	sxth	r2, r1
 8002e56:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[8];
 8002e58:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <st_fifo_decode+0xf4c>)
 8002e5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b20a      	sxth	r2, r1
 8002e7e:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002e80:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	3306      	adds	r3, #6
 8002e94:	2206      	movs	r2, #6
 8002e96:	4619      	mov	r1, r3
 8002e98:	483e      	ldr	r0, [pc, #248]	; (8002f94 <st_fifo_decode+0xf4c>)
 8002e9a:	f010 f899 	bl	8012fd0 <memcpy>
          last_timestamp_xl = timestamp;
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <st_fifo_decode+0xf48>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3d      	ldr	r2, [pc, #244]	; (8002f98 <st_fifo_decode+0xf50>)
 8002ea4:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002ea6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d14e      	bne.n	8002f4c <st_fifo_decode+0xf04>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[6];
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <st_fifo_decode+0xf44>)
 8002eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b299      	uxth	r1, r3
 8002ec0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b20a      	sxth	r2, r1
 8002ed4:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[7];
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <st_fifo_decode+0xf44>)
 8002ed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	b20a      	sxth	r2, r1
 8002efc:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[8];
 8002efe:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <st_fifo_decode+0xf44>)
 8002f00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	b20a      	sxth	r2, r1
 8002f24:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002f26:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	3306      	adds	r3, #6
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4813      	ldr	r0, [pc, #76]	; (8002f8c <st_fifo_decode+0xf44>)
 8002f40:	f010 f846 	bl	8012fd0 <memcpy>
          last_timestamp_gy = timestamp;
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <st_fifo_decode+0xf48>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <st_fifo_decode+0xf54>)
 8002f4a:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002f4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002f50:	3301      	adds	r3, #1
 8002f52:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      *out_slot_size = j;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f5c:	801a      	strh	r2, [r3, #0]
    }

    tag_counter_old = tag_counter;
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <st_fifo_decode+0xf58>)
 8002f60:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f64:	7013      	strb	r3, [r2, #0]
 8002f66:	e000      	b.n	8002f6a <st_fifo_decode+0xf22>
          continue;
 8002f68:	bf00      	nop
  for (uint16_t i = 0; i < stream_size; i++)
 8002f6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002f74:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	f4ff a873 	bcc.w	8002066 <st_fifo_decode+0x1e>
  }

  return ST_FIFO_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	376c      	adds	r7, #108	; 0x6c
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd90      	pop	{r4, r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000feb4 	.word	0x2000feb4
 8002f90:	2000fe9c 	.word	0x2000fe9c
 8002f94:	2000feac 	.word	0x2000feac
 8002f98:	2000fea0 	.word	0x2000fea0
 8002f9c:	2000fea4 	.word	0x2000fea4
 8002fa0:	2000fe85 	.word	0x2000fe85

08002fa4 <st_fifo_sort>:
  * @param  fifo_out_slot     decoded output stream to sort.(ptr)
  * @param  out_slot_size     decoded stream size.
  *
  */
void st_fifo_sort(st_fifo_out_slot *fifo_out_slot, uint16_t out_slot_size)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
  int32_t i;
  int32_t j;
  st_fifo_out_slot temp;

  for (i = 1; i < (int32_t)out_slot_size; i++)
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	e04a      	b.n	800304c <st_fifo_sort+0xa8>
  {
    (void)memcpy(&temp, &fifo_out_slot[i], sizeof(st_fifo_out_slot));
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1899      	adds	r1, r3, r2
 8002fc6:	f107 030c 	add.w	r3, r7, #12
 8002fca:	220c      	movs	r2, #12
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f00f ffff 	bl	8012fd0 <memcpy>

    j = i - 1;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]

    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 8002fd8:	e017      	b.n	800300a <st_fifo_sort+0x66>
    {
      (void)memcpy(&fifo_out_slot[j + 1], &fifo_out_slot[j],
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1898      	adds	r0, r3, r2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	220c      	movs	r2, #12
 8002ffe:	4619      	mov	r1, r3
 8003000:	f00f ffe6 	bl	8012fd0 <memcpy>
                   sizeof(st_fifo_out_slot));
      j--;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3b01      	subs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0b      	blt.n	8003028 <st_fifo_sort+0x84>
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d8d8      	bhi.n	8002fda <st_fifo_sort+0x36>
    }

    (void)memcpy(&fifo_out_slot[j + 1], &temp, sizeof(st_fifo_out_slot));
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	f107 010c 	add.w	r1, r7, #12
 800303e:	220c      	movs	r2, #12
 8003040:	4618      	mov	r0, r3
 8003042:	f00f ffc5 	bl	8012fd0 <memcpy>
  for (i = 1; i < (int32_t)out_slot_size; i++)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3301      	adds	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	429a      	cmp	r2, r3
 8003052:	dbb0      	blt.n	8002fb6 <st_fifo_sort+0x12>
  }

  return;
 8003054:	bf00      	nop
}
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <st_fifo_get_sensor_occurrence>:
  *                           decoded FIFO stream.
  *
  */
uint16_t st_fifo_get_sensor_occurrence(st_fifo_out_slot *fifo_out_slot,
                                       uint16_t out_slot_size, st_fifo_sensor_type sensor_type)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  uint16_t occurrence = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	81fb      	strh	r3, [r7, #14]

  for (uint16_t i = 0; i < out_slot_size; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	81bb      	strh	r3, [r7, #12]
 8003074:	e011      	b.n	800309a <st_fifo_get_sensor_occurrence+0x3e>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 8003076:	89ba      	ldrh	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	791b      	ldrb	r3, [r3, #4]
 8003088:	787a      	ldrb	r2, [r7, #1]
 800308a:	429a      	cmp	r2, r3
 800308c:	d102      	bne.n	8003094 <st_fifo_get_sensor_occurrence+0x38>
    {
      occurrence++;
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	3301      	adds	r3, #1
 8003092:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	3301      	adds	r3, #1
 8003098:	81bb      	strh	r3, [r7, #12]
 800309a:	89ba      	ldrh	r2, [r7, #12]
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d3e9      	bcc.n	8003076 <st_fifo_get_sensor_occurrence+0x1a>
    }
  }

  return occurrence;
 80030a2:	89fb      	ldrh	r3, [r7, #14]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <st_fifo_extract_sensor>:
  *
  */
void st_fifo_extract_sensor(st_fifo_out_slot *sensor_out_slot,
                            st_fifo_out_slot *fifo_out_slot, uint16_t  out_slot_size,
                            st_fifo_sensor_type sensor_type)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	460b      	mov	r3, r1
 80030c0:	80fb      	strh	r3, [r7, #6]
 80030c2:	4613      	mov	r3, r2
 80030c4:	717b      	strb	r3, [r7, #5]
  uint16_t temp_i = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	82fb      	strh	r3, [r7, #22]

  for (uint16_t i = 0; i < out_slot_size; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	82bb      	strh	r3, [r7, #20]
 80030ce:	e025      	b.n	800311c <st_fifo_extract_sensor+0x6c>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 80030d0:	8aba      	ldrh	r2, [r7, #20]
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4413      	add	r3, r2
 80030e0:	791b      	ldrb	r3, [r3, #4]
 80030e2:	797a      	ldrb	r2, [r7, #5]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d116      	bne.n	8003116 <st_fifo_extract_sensor+0x66>
    {
      (void)memcpy(&sensor_out_slot[temp_i], &fifo_out_slot[i],
 80030e8:	8afa      	ldrh	r2, [r7, #22]
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1898      	adds	r0, r3, r2
 80030f8:	8aba      	ldrh	r2, [r7, #20]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4413      	add	r3, r2
 8003108:	220c      	movs	r2, #12
 800310a:	4619      	mov	r1, r3
 800310c:	f00f ff60 	bl	8012fd0 <memcpy>
                   sizeof(st_fifo_out_slot));
      temp_i++;
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	3301      	adds	r3, #1
 8003114:	82fb      	strh	r3, [r7, #22]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8003116:	8abb      	ldrh	r3, [r7, #20]
 8003118:	3301      	adds	r3, #1
 800311a:	82bb      	strh	r3, [r7, #20]
 800311c:	8aba      	ldrh	r2, [r7, #20]
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	429a      	cmp	r2, r3
 8003122:	d3d5      	bcc.n	80030d0 <st_fifo_extract_sensor+0x20>
    }
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <is_tag_valid>:
  *
  * @retval uint8_t           valid (1) or invalid (0) tag.
  *
  */
static uint8_t is_tag_valid(uint8_t tag)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if (tag > device[fifo_ver].tag_valid_limit)
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <is_tag_valid+0x3c>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <is_tag_valid+0x40>)
 8003142:	460b      	mov	r3, r1
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	440b      	add	r3, r1
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	79fa      	ldrb	r2, [r7, #7]
 8003154:	429a      	cmp	r2, r3
 8003156:	d901      	bls.n	800315c <is_tag_valid+0x2c>
  {
    return 0;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <is_tag_valid+0x2e>
  }
  else
  {
    return 1;
 800315c:	2301      	movs	r3, #1
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	2000fe84 	.word	0x2000fe84
 8003170:	080166ac 	.word	0x080166ac

08003174 <get_sensor_type>:
  *
  * @retval st_fifo_sensor_type    sensor type.
  *
  */
static st_fifo_sensor_type get_sensor_type(uint8_t tag)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  st_fifo_sensor_type type;

  switch (tag)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	3b01      	subs	r3, #1
 8003182:	2b1d      	cmp	r3, #29
 8003184:	f200 8094 	bhi.w	80032b0 <get_sensor_type+0x13c>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <get_sensor_type+0x1c>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	08003209 	.word	0x08003209
 8003194:	0800320f 	.word	0x0800320f
 8003198:	08003215 	.word	0x08003215
 800319c:	080032b1 	.word	0x080032b1
 80031a0:	080032b1 	.word	0x080032b1
 80031a4:	08003239 	.word	0x08003239
 80031a8:	0800323f 	.word	0x0800323f
 80031ac:	08003245 	.word	0x08003245
 80031b0:	0800324b 	.word	0x0800324b
 80031b4:	08003251 	.word	0x08003251
 80031b8:	08003257 	.word	0x08003257
 80031bc:	0800325d 	.word	0x0800325d
 80031c0:	08003263 	.word	0x08003263
 80031c4:	0800321b 	.word	0x0800321b
 80031c8:	08003221 	.word	0x08003221
 80031cc:	08003227 	.word	0x08003227
 80031d0:	0800322d 	.word	0x0800322d
 80031d4:	08003233 	.word	0x08003233
 80031d8:	08003269 	.word	0x08003269
 80031dc:	0800326f 	.word	0x0800326f
 80031e0:	08003275 	.word	0x08003275
 80031e4:	0800327b 	.word	0x0800327b
 80031e8:	08003281 	.word	0x08003281
 80031ec:	08003287 	.word	0x08003287
 80031f0:	0800328d 	.word	0x0800328d
 80031f4:	08003293 	.word	0x08003293
 80031f8:	08003299 	.word	0x08003299
 80031fc:	0800329f 	.word	0x0800329f
 8003200:	080032a5 	.word	0x080032a5
 8003204:	080032ab 	.word	0x080032ab
  {
    case TAG_GY:
      type = ST_FIFO_GYROSCOPE;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e053      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_XL:
      type = ST_FIFO_ACCELEROMETER;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      break;
 8003212:	e050      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_TEMP:
      type = ST_FIFO_TEMPERATURE;
 8003214:	2302      	movs	r3, #2
 8003216:	73fb      	strb	r3, [r7, #15]
      break;
 8003218:	e04d      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_EXT_SENS_0:
      type = ST_FIFO_EXT_SENSOR0;
 800321a:	2303      	movs	r3, #3
 800321c:	73fb      	strb	r3, [r7, #15]
      break;
 800321e:	e04a      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_EXT_SENS_1:
      type = ST_FIFO_EXT_SENSOR1;
 8003220:	2304      	movs	r3, #4
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e047      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_EXT_SENS_2:
      type = ST_FIFO_EXT_SENSOR2;
 8003226:	2305      	movs	r3, #5
 8003228:	73fb      	strb	r3, [r7, #15]
      break;
 800322a:	e044      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_EXT_SENS_3:
      type = ST_FIFO_EXT_SENSOR3;
 800322c:	2306      	movs	r3, #6
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e041      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_STEP_COUNTER:
      type = ST_FIFO_STEP_COUNTER;
 8003232:	2307      	movs	r3, #7
 8003234:	73fb      	strb	r3, [r7, #15]
      break;
 8003236:	e03e      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_ACCELEROMETER;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      break;
 800323c:	e03b      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_ACCELEROMETER;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      break;
 8003242:	e038      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_ACCELEROMETER;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      break;
 8003248:	e035      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_ACCELEROMETER;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      break;
 800324e:	e032      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_GYROSCOPE;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e02f      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_GYROSCOPE;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
      break;
 800325a:	e02c      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_GYROSCOPE;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
      break;
 8003260:	e029      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_GYROSCOPE;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
      break;
 8003266:	e026      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GAME_RV:
      type = ST_FIFO_6X_GAME_RV;
 8003268:	2308      	movs	r3, #8
 800326a:	73fb      	strb	r3, [r7, #15]
      break;
 800326c:	e023      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GEOM_RV:
      type = ST_FIFO_6X_GEOM_RV;
 800326e:	2309      	movs	r3, #9
 8003270:	73fb      	strb	r3, [r7, #15]
      break;
 8003272:	e020      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_NORM_RV:
      type = ST_FIFO_9X_RV;
 8003274:	230a      	movs	r3, #10
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e01d      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GYRO_BIAS:
      type = ST_FIFO_GYRO_BIAS;
 800327a:	230b      	movs	r3, #11
 800327c:	73fb      	strb	r3, [r7, #15]
      break;
 800327e:	e01a      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_GRAVITIY:
      type = ST_FIFO_GRAVITY;
 8003280:	230c      	movs	r3, #12
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e017      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_MAG_CAL:
      type = ST_FIFO_MAGNETOMETER_CALIB;
 8003286:	230d      	movs	r3, #13
 8003288:	73fb      	strb	r3, [r7, #15]
      break;
 800328a:	e014      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_EXT_SENS_NACK:
      type = ST_FIFO_EXT_SENSOR_NACK;
 800328c:	230e      	movs	r3, #14
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e011      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_MLC_RESULT:
      type = ST_FIFO_MLC_RESULT;
 8003292:	230f      	movs	r3, #15
 8003294:	73fb      	strb	r3, [r7, #15]
      break;
 8003296:	e00e      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_MLC_FILTER:
      type = ST_FIFO_MLC_FILTER;
 8003298:	2310      	movs	r3, #16
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e00b      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_MLC_FEATURE:
      type = ST_FIFO_MLC_FEATURE;
 800329e:	2311      	movs	r3, #17
 80032a0:	73fb      	strb	r3, [r7, #15]
      break;
 80032a2:	e008      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_DUALC_XL:
      type = ST_FIFO_DUALC_ACCELEROMETER;
 80032a4:	2312      	movs	r3, #18
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e005      	b.n	80032b6 <get_sensor_type+0x142>
    case TAG_EIS_GY:
      type = ST_FIFO_EIS_GYROSCOPE;
 80032aa:	2313      	movs	r3, #19
 80032ac:	73fb      	strb	r3, [r7, #15]
      break;
 80032ae:	e002      	b.n	80032b6 <get_sensor_type+0x142>
    default:
      type = ST_FIFO_NONE;
 80032b0:	2314      	movs	r3, #20
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	bf00      	nop
  }

  return type;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <get_compression_type>:
  *
  * @retval st_fifo_compression_type    compression type.
  *
  */
static st_fifo_compression_type get_compression_type(uint8_t tag)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  st_fifo_compression_type type;

  switch (tag)
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	3b06      	subs	r3, #6
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d82a      	bhi.n	800332c <get_compression_type+0x68>
 80032d6:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <get_compression_type+0x18>)
 80032d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032dc:	080032fd 	.word	0x080032fd
 80032e0:	08003303 	.word	0x08003303
 80032e4:	08003309 	.word	0x08003309
 80032e8:	0800330f 	.word	0x0800330f
 80032ec:	08003315 	.word	0x08003315
 80032f0:	0800331b 	.word	0x0800331b
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003327 	.word	0x08003327
  {
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 80032fc:	2302      	movs	r3, #2
 80032fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003300:	e017      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
      break;
 8003306:	e014      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 8003308:	2303      	movs	r3, #3
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e011      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 800330e:	2304      	movs	r3, #4
 8003310:	73fb      	strb	r3, [r7, #15]
      break;
 8003312:	e00e      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8003314:	2302      	movs	r3, #2
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e00b      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      break;
 800331e:	e008      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 8003320:	2303      	movs	r3, #3
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e005      	b.n	8003332 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 8003326:	2304      	movs	r3, #4
 8003328:	73fb      	strb	r3, [r7, #15]
      break;
 800332a:	e002      	b.n	8003332 <get_compression_type+0x6e>
    default:
      type = ST_FIFO_COMPRESSION_NC;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	bf00      	nop
  }

  return type;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <bdr_get_index>:
  *
  * @retval uint8_t           index of the nearest BDR.
  *
  */
static uint8_t bdr_get_index(const float *bdr, float n)
{
 8003340:	b480      	push	{r7}
 8003342:	b095      	sub	sp, #84	; 0x54
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	ed87 0a00 	vstr	s0, [r7]
  float diff[16], min = FLT_MAX;
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <bdr_get_index+0xbc>)
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t idx = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  for (uint8_t i = 0; i < 16u; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800335c:	e019      	b.n	8003392 <bdr_get_index+0x52>
  {
    diff[i] = fabsf(bdr[i] - n);
 800335e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	ed93 7a00 	vldr	s14, [r3]
 800336c:	edd7 7a00 	vldr	s15, [r7]
 8003370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003374:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003378:	eef0 7ae7 	vabs.f32	s15, s15
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3350      	adds	r3, #80	; 0x50
 8003380:	443b      	add	r3, r7
 8003382:	3b48      	subs	r3, #72	; 0x48
 8003384:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 16u; i++)
 8003388:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800338c:	3301      	adds	r3, #1
 800338e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003392:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d9e1      	bls.n	800335e <bdr_get_index+0x1e>
  }

  for (uint8_t i = 0; i < 16u; i++)
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80033a0:	e01f      	b.n	80033e2 <bdr_get_index+0xa2>
  {
    if (diff[i] < min)
 80033a2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	3350      	adds	r3, #80	; 0x50
 80033aa:	443b      	add	r3, r7
 80033ac:	3b48      	subs	r3, #72	; 0x48
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80033b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd0b      	ble.n	80033d8 <bdr_get_index+0x98>
    {
      min = diff[i];
 80033c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3350      	adds	r3, #80	; 0x50
 80033c8:	443b      	add	r3, r7
 80033ca:	3b48      	subs	r3, #72	; 0x48
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      idx = i;
 80033d0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80033d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  for (uint8_t i = 0; i < 16u; i++)
 80033d8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80033dc:	3301      	adds	r3, #1
 80033de:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80033e2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d9db      	bls.n	80033a2 <bdr_get_index+0x62>
    }
  }

  return idx;
 80033ea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3754      	adds	r7, #84	; 0x54
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	7f7fffff 	.word	0x7f7fffff

08003400 <has_even_parity>:
  *
  * @retval uint8_t           the byte has even parity (1) or not (0).
  *
  */
static uint8_t has_even_parity(uint8_t x)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0x00, b = 0x01;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	2301      	movs	r3, #1
 8003410:	737b      	strb	r3, [r7, #13]

  for (uint8_t i = 0; i < 8u; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	73bb      	strb	r3, [r7, #14]
 8003416:	e00d      	b.n	8003434 <has_even_parity+0x34>
  {
    if ((x & (b << i)) != 0x00u)
 8003418:	79fa      	ldrb	r2, [r7, #7]
 800341a:	7b79      	ldrb	r1, [r7, #13]
 800341c:	7bbb      	ldrb	r3, [r7, #14]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <has_even_parity+0x2e>
    {
      count++;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 8u; i++)
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	3301      	adds	r3, #1
 8003432:	73bb      	strb	r3, [r7, #14]
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	2b07      	cmp	r3, #7
 8003438:	d9ee      	bls.n	8003418 <has_even_parity+0x18>
    }
  }

  if ((count & 0x01u) == 0x01u)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <has_even_parity+0x48>
  {
    return 0;
 8003444:	2300      	movs	r3, #0
 8003446:	e000      	b.n	800344a <has_even_parity+0x4a>
  }

  return 1;
 8003448:	2301      	movs	r3, #1
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <get_diff_2x>:
  * @param  diff[6]           compressed data (2x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_2x(int16_t diff[6], uint8_t input[6])
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 6u; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e01d      	b.n	80034a2 <get_diff_2x+0x4c>
  {
    diff[i] = input[i] < 128u ? (int16_t)input[i] : (int16_t)input[i] - 256;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b25b      	sxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	db05      	blt.n	8003480 <get_diff_2x+0x2a>
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b21b      	sxth	r3, r3
 800347e:	e008      	b.n	8003492 <get_diff_2x+0x3c>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800348e:	b29b      	uxth	r3, r3
 8003490:	b21b      	sxth	r3, r3
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	0052      	lsls	r2, r2, #1
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	440a      	add	r2, r1
 800349a:	8013      	strh	r3, [r2, #0]
  for (uint8_t i = 0; i < 6u; i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d9de      	bls.n	8003466 <get_diff_2x+0x10>
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <get_diff_3x>:
  * @param  diff[6]           compressed data (3x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_3x(int16_t diff[9], uint8_t input[6])
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint16_t decode_tmp;

  for (uint8_t i = 0; i < 3u; i++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e03a      	b.n	800353c <get_diff_3x+0x86>
  {

    (void)memcpy(&decode_tmp, &input[2u * i], 2);
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	813b      	strh	r3, [r7, #8]

    for (uint8_t j = 0; j < 3u; j++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	73bb      	strb	r3, [r7, #14]
 80034d8:	e02a      	b.n	8003530 <get_diff_3x+0x7a>
    {
      uint16_t utmp = (decode_tmp & ((uint16_t)0x1Fu << (5u * j))) >> (5u * j);
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	4619      	mov	r1, r3
 80034de:	7bba      	ldrb	r2, [r7, #14]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	221f      	movs	r2, #31
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	4019      	ands	r1, r3
 80034ee:	7bba      	ldrb	r2, [r7, #14]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	fa41 f303 	asr.w	r3, r1, r3
 80034fa:	81bb      	strh	r3, [r7, #12]
      int16_t tmp = (int16_t)utmp;
 80034fc:	89bb      	ldrh	r3, [r7, #12]
 80034fe:	817b      	strh	r3, [r7, #10]
      diff[j + 3u * i] = tmp < 16 ? tmp : (tmp - 32);
 8003500:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003504:	2b0f      	cmp	r3, #15
 8003506:	dd04      	ble.n	8003512 <get_diff_3x+0x5c>
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	3b20      	subs	r3, #32
 800350c:	b29b      	uxth	r3, r3
 800350e:	b21a      	sxth	r2, r3
 8003510:	e001      	b.n	8003516 <get_diff_3x+0x60>
 8003512:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003516:	7bb8      	ldrb	r0, [r7, #14]
 8003518:	7bf9      	ldrb	r1, [r7, #15]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	4403      	add	r3, r0
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	440b      	add	r3, r1
 8003528:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 3u; j++)
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	3301      	adds	r3, #1
 800352e:	73bb      	strb	r3, [r7, #14]
 8003530:	7bbb      	ldrb	r3, [r7, #14]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d9d1      	bls.n	80034da <get_diff_3x+0x24>
  for (uint8_t i = 0; i < 3u; i++)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3301      	adds	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d9c1      	bls.n	80034c6 <get_diff_3x+0x10>
    }
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_MspInit+0x44>)
 8003558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355a:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <HAL_MspInit+0x44>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6613      	str	r3, [r2, #96]	; 0x60
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_MspInit+0x44>)
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_MspInit+0x44>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <HAL_MspInit+0x44>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6593      	str	r3, [r2, #88]	; 0x58
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_MspInit+0x44>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0ac      	sub	sp, #176	; 0xb0
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2288      	movs	r2, #136	; 0x88
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00f fc7a 	bl	8012eb2 <memset>
  if(hi2c->Instance==I2C3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_I2C_MspInit+0xb0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d13b      	bne.n	8003640 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80035c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80035ce:	2300      	movs	r3, #0
 80035d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 feae 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035e2:	f7fd fe41 	bl	8001268 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_I2C_MspInit+0xb4>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_I2C_MspInit+0xb4>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_I2C_MspInit+0xb4>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80035fe:	2303      	movs	r3, #3
 8003600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003604:	2312      	movs	r3, #18
 8003606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003616:	2304      	movs	r3, #4
 8003618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003620:	4619      	mov	r1, r3
 8003622:	480b      	ldr	r0, [pc, #44]	; (8003650 <HAL_I2C_MspInit+0xb8>)
 8003624:	f000 fe60 	bl	80042e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_I2C_MspInit+0xb4>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_I2C_MspInit+0xb4>)
 800362e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003632:	6593      	str	r3, [r2, #88]	; 0x58
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_I2C_MspInit+0xb4>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003640:	bf00      	nop
 8003642:	37b0      	adds	r7, #176	; 0xb0
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40005c00 	.word	0x40005c00
 800364c:	40021000 	.word	0x40021000
 8003650:	48000800 	.word	0x48000800

08003654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0a4      	sub	sp, #144	; 0x90
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	2288      	movs	r2, #136	; 0x88
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f00f fc24 	bl	8012eb2 <memset>
  if(hrtc->Instance==RTC)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_RTC_MspInit+0x5c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d118      	bne.n	80036a6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003678:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800367a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003682:	f107 0308 	add.w	r3, r7, #8
 8003686:	4618      	mov	r0, r3
 8003688:	f003 fe56 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003692:	f7fd fde9 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_RTC_MspInit+0x60>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_RTC_MspInit+0x60>)
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036a6:	bf00      	nop
 80036a8:	3790      	adds	r7, #144	; 0x90
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40002800 	.word	0x40002800
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0ac      	sub	sp, #176	; 0xb0
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	2288      	movs	r2, #136	; 0x88
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f00f fbea 	bl	8012eb2 <memset>
  if(hsd->Instance==SDMMC1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a51      	ldr	r2, [pc, #324]	; (8003828 <HAL_SD_MspInit+0x170>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	f040 809a 	bne.w	800381e <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80036ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 80036f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 fe1b 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003708:	f7fd fdae 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800370c:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_SD_MspInit+0x174>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	4a46      	ldr	r2, [pc, #280]	; (800382c <HAL_SD_MspInit+0x174>)
 8003712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003716:	6613      	str	r3, [r2, #96]	; 0x60
 8003718:	4b44      	ldr	r3, [pc, #272]	; (800382c <HAL_SD_MspInit+0x174>)
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_SD_MspInit+0x174>)
 8003726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003728:	4a40      	ldr	r2, [pc, #256]	; (800382c <HAL_SD_MspInit+0x174>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003730:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_SD_MspInit+0x174>)
 8003732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800373c:	4b3b      	ldr	r3, [pc, #236]	; (800382c <HAL_SD_MspInit+0x174>)
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	4a3a      	ldr	r2, [pc, #232]	; (800382c <HAL_SD_MspInit+0x174>)
 8003742:	f043 0308 	orr.w	r3, r3, #8
 8003746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003748:	4b38      	ldr	r3, [pc, #224]	; (800382c <HAL_SD_MspInit+0x174>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003754:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800376e:	230c      	movs	r3, #12
 8003770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003774:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003778:	4619      	mov	r1, r3
 800377a:	482d      	ldr	r0, [pc, #180]	; (8003830 <HAL_SD_MspInit+0x178>)
 800377c:	f000 fdb4 	bl	80042e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003780:	2304      	movs	r3, #4
 8003782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003798:	230c      	movs	r3, #12
 800379a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800379e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037a2:	4619      	mov	r1, r3
 80037a4:	4823      	ldr	r0, [pc, #140]	; (8003834 <HAL_SD_MspInit+0x17c>)
 80037a6:	f000 fd9f 	bl	80042e8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_SD_MspInit+0x184>)
 80037ae:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037b2:	2207      	movs	r2, #7
 80037b4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ce:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 80037d8:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 80037e6:	4814      	ldr	r0, [pc, #80]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037e8:	f000 fb46 	bl	8003e78 <HAL_DMA_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 80037f2:	f7fd fd39 	bl	8001268 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_SD_MspInit+0x180>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <HAL_SD_MspInit+0x180>)
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
 8003808:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <HAL_SD_MspInit+0x180>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	2031      	movs	r0, #49	; 0x31
 8003814:	f000 faf9 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003818:	2031      	movs	r0, #49	; 0x31
 800381a:	f000 fb12 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800381e:	bf00      	nop
 8003820:	37b0      	adds	r7, #176	; 0xb0
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40012800 	.word	0x40012800
 800382c:	40021000 	.word	0x40021000
 8003830:	48000800 	.word	0x48000800
 8003834:	48000c00 	.word	0x48000c00
 8003838:	200003ec 	.word	0x200003ec
 800383c:	40020444 	.word	0x40020444

08003840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003844:	e7fe      	b.n	8003844 <NMI_Handler+0x4>

08003846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800384a:	e7fe      	b.n	800384a <HardFault_Handler+0x4>

0800384c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <MemManage_Handler+0x4>

08003852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003856:	e7fe      	b.n	8003856 <BusFault_Handler+0x4>

08003858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <UsageFault_Handler+0x4>

0800385e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800388c:	f000 f99e 	bl	8003bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}

08003894 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003898:	2004      	movs	r0, #4
 800389a:	f000 fee7 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 80038a6:	2008      	movs	r0, #8
 80038a8:	f000 fee0 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <SDMMC1_IRQHandler+0x10>)
 80038b6:	f005 fd25 	bl	8009304 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000368 	.word	0x20000368

080038c4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA2_Channel4_IRQHandler+0x10>)
 80038ca:	f000 fc2e 	bl	800412a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200003ec 	.word	0x200003ec

080038d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <OTG_FS_IRQHandler+0x10>)
 80038de:	f001 fe49 	bl	8005574 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20011848 	.word	0x20011848

080038ec <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	460b      	mov	r3, r1
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	2301      	movs	r3, #1
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2301      	movs	r3, #1
 800390e:	2172      	movs	r1, #114	; 0x72
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f001 f873 	bl	80049fc <HAL_I2C_Mem_Read>
 8003916:	4603      	mov	r3, r0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return 1;
 8003924:	2301      	movs	r3, #1
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <_kill>:

int _kill(int pid, int sig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800393a:	f00f fb1d 	bl	8012f78 <__errno>
 800393e:	4603      	mov	r3, r0
 8003940:	2216      	movs	r2, #22
 8003942:	601a      	str	r2, [r3, #0]
  return -1;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_exit>:

void _exit (int status)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffe7 	bl	8003930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003962:	e7fe      	b.n	8003962 <_exit+0x12>

08003964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e00a      	b.n	800398c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003976:	f3af 8000 	nop.w
 800397a:	4601      	mov	r1, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	60ba      	str	r2, [r7, #8]
 8003982:	b2ca      	uxtb	r2, r1
 8003984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	dbf0      	blt.n	8003976 <_read+0x12>
  }

  return len;
 8003994:	687b      	ldr	r3, [r7, #4]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e009      	b.n	80039c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3301      	adds	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dbf1      	blt.n	80039b0 <_write+0x12>
  }
  return len;
 80039cc:	687b      	ldr	r3, [r7, #4]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <_close>:

int _close(int file)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_isatty>:

int _isatty(int file)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a16:	2301      	movs	r3, #1
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a70:	f00f fa82 	bl	8012f78 <__errno>
 8003a74:	4603      	mov	r3, r0
 8003a76:	220c      	movs	r2, #12
 8003a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e009      	b.n	8003a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <_sbrk+0x64>)
 8003a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20018000 	.word	0x20018000
 8003aa0:	00000800 	.word	0x00000800
 8003aa4:	2000febc 	.word	0x2000febc
 8003aa8:	200120c0 	.word	0x200120c0

08003aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <SystemInit+0x20>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <SystemInit+0x20>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ad4:	f7ff ffea 	bl	8003aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <LoopForever+0xe>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af0:	4c0a      	ldr	r4, [pc, #40]	; (8003b1c <LoopForever+0x16>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003afe:	f00f fa41 	bl	8012f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b02:	f7fd f999 	bl	8000e38 <main>

08003b06 <LoopForever>:

LoopForever:
    b LoopForever
 8003b06:	e7fe      	b.n	8003b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003b14:	08016dc0 	.word	0x08016dc0
  ldr r2, =_sbss
 8003b18:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003b1c:	200120c0 	.word	0x200120c0

08003b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC1_2_IRQHandler>

08003b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f000 f961 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b32:	200f      	movs	r0, #15
 8003b34:	f000 f80e 	bl	8003b54 <HAL_InitTick>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	71fb      	strb	r3, [r7, #7]
 8003b42:	e001      	b.n	8003b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b44:	f7ff fd04 	bl	8003550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b48:	79fb      	ldrb	r3, [r7, #7]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <HAL_InitTick+0x6c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d023      	beq.n	8003bb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <HAL_InitTick+0x70>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <HAL_InitTick+0x6c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f96d 	bl	8003e5e <HAL_SYSTICK_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d809      	bhi.n	8003ba4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b90:	2200      	movs	r2, #0
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f000 f937 	bl	8003e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_InitTick+0x74>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e007      	b.n	8003bb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e004      	b.n	8003bb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	e001      	b.n	8003bb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000008 	.word	0x20000008
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	20000004 	.word	0x20000004

08003bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x20>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_IncTick+0x24>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <HAL_IncTick+0x24>)
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	2000fec0 	.word	0x2000fec0

08003bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_GetTick+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	2000fec0 	.word	0x2000fec0

08003c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7ff ffee 	bl	8003bf4 <HAL_GetTick>
 8003c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d005      	beq.n	8003c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_Delay+0x44>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c32:	bf00      	nop
 8003c34:	f7ff ffde 	bl	8003bf4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d8f7      	bhi.n	8003c34 <HAL_Delay+0x28>
  {
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000008 	.word	0x20000008

08003c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c70:	4013      	ands	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c86:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	60d3      	str	r3, [r2, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	f003 0307 	and.w	r3, r3, #7
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db0b      	blt.n	8003ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <__NVIC_EnableIRQ+0x38>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	2001      	movs	r0, #1
 8003cda:	fa00 f202 	lsl.w	r2, r0, r2
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db0a      	blt.n	8003d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <__NVIC_SetPriority+0x4c>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d1c:	e00a      	b.n	8003d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <__NVIC_SetPriority+0x50>)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	440b      	add	r3, r1
 8003d32:	761a      	strb	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f1c3 0307 	rsb	r3, r3, #7
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf28      	it	cs
 8003d66:	2304      	movcs	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d902      	bls.n	8003d78 <NVIC_EncodePriority+0x30>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3b03      	subs	r3, #3
 8003d76:	e000      	b.n	8003d7a <NVIC_EncodePriority+0x32>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43d9      	mvns	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	4313      	orrs	r3, r2
         );
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d301      	bcc.n	8003dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00f      	b.n	8003de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <SysTick_Config+0x40>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dce:	210f      	movs	r1, #15
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	f7ff ff8e 	bl	8003cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <SysTick_Config+0x40>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <SysTick_Config+0x40>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff29 	bl	8003c54 <__NVIC_SetPriorityGrouping>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1c:	f7ff ff3e 	bl	8003c9c <__NVIC_GetPriorityGrouping>
 8003e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7ff ff8e 	bl	8003d48 <NVIC_EncodePriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5d 	bl	8003cf4 <__NVIC_SetPriority>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff31 	bl	8003cb8 <__NVIC_EnableIRQ>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ffa2 	bl	8003db0 <SysTick_Config>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e098      	b.n	8003fbc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <HAL_DMA_Init+0x150>)
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d80f      	bhi.n	8003eb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b4b      	ldr	r3, [pc, #300]	; (8003fcc <HAL_DMA_Init+0x154>)
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4a4b      	ldr	r2, [pc, #300]	; (8003fd0 <HAL_DMA_Init+0x158>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	009a      	lsls	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a48      	ldr	r2, [pc, #288]	; (8003fd4 <HAL_DMA_Init+0x15c>)
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8003eb4:	e00e      	b.n	8003ed4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_DMA_Init+0x160>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a43      	ldr	r2, [pc, #268]	; (8003fd0 <HAL_DMA_Init+0x158>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	009a      	lsls	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	; (8003fdc <HAL_DMA_Init+0x164>)
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f2e:	d039      	beq.n	8003fa4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_DMA_Init+0x15c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d11a      	bne.n	8003f70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f3a:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_DMA_Init+0x168>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 031c 	and.w	r3, r3, #28
 8003f46:	210f      	movs	r1, #15
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	4924      	ldr	r1, [pc, #144]	; (8003fe0 <HAL_DMA_Init+0x168>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f54:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <HAL_DMA_Init+0x168>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f003 031c 	and.w	r3, r3, #28
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	491d      	ldr	r1, [pc, #116]	; (8003fe0 <HAL_DMA_Init+0x168>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
 8003f6e:	e019      	b.n	8003fa4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_DMA_Init+0x16c>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	f003 031c 	and.w	r3, r3, #28
 8003f7c:	210f      	movs	r1, #15
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	4917      	ldr	r1, [pc, #92]	; (8003fe4 <HAL_DMA_Init+0x16c>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_DMA_Init+0x16c>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f003 031c 	and.w	r3, r3, #28
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	4911      	ldr	r1, [pc, #68]	; (8003fe4 <HAL_DMA_Init+0x16c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40020407 	.word	0x40020407
 8003fcc:	bffdfff8 	.word	0xbffdfff8
 8003fd0:	cccccccd 	.word	0xcccccccd
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	bffdfbf8 	.word	0xbffdfbf8
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	400200a8 	.word	0x400200a8
 8003fe4:	400204a8 	.word	0x400204a8

08003fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_DMA_Start_IT+0x20>
 8004004:	2302      	movs	r3, #2
 8004006:	e04b      	b.n	80040a0 <HAL_DMA_Start_IT+0xb8>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d13a      	bne.n	8004092 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f921 	bl	8004288 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 020e 	orr.w	r2, r2, #14
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e00f      	b.n	8004080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 020a 	orr.w	r2, r2, #10
 800407e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e005      	b.n	800409e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d005      	beq.n	80040cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	e029      	b.n	8004120 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 020e 	bic.w	r2, r2, #14
 80040da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	f003 021c 	and.w	r2, r3, #28
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f202 	lsl.w	r2, r1, r2
 80040fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
    }
  }
  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f003 031c 	and.w	r3, r3, #28
 800414a:	2204      	movs	r2, #4
 800414c:	409a      	lsls	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d026      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x7a>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d021      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0204 	bic.w	r2, r2, #4
 800417c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f003 021c 	and.w	r2, r3, #28
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2104      	movs	r1, #4
 800418c:	fa01 f202 	lsl.w	r2, r1, r2
 8004190:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	2b00      	cmp	r3, #0
 8004198:	d071      	beq.n	800427e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80041a2:	e06c      	b.n	800427e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f003 031c 	and.w	r3, r3, #28
 80041ac:	2202      	movs	r2, #2
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02e      	beq.n	8004216 <HAL_DMA_IRQHandler+0xec>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d029      	beq.n	8004216 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020a 	bic.w	r2, r2, #10
 80041de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f003 021c 	and.w	r2, r3, #28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2102      	movs	r1, #2
 80041f6:	fa01 f202 	lsl.w	r2, r1, r2
 80041fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d038      	beq.n	800427e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004214:	e033      	b.n	800427e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f003 031c 	and.w	r3, r3, #28
 800421e:	2208      	movs	r2, #8
 8004220:	409a      	lsls	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02a      	beq.n	8004280 <HAL_DMA_IRQHandler+0x156>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d025      	beq.n	8004280 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 020e 	bic.w	r2, r2, #14
 8004242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	f003 021c 	and.w	r2, r3, #28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f202 	lsl.w	r2, r1, r2
 8004256:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800427e:	bf00      	nop
 8004280:	bf00      	nop
}
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 021c 	and.w	r2, r3, #28
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2101      	movs	r1, #1
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d108      	bne.n	80042cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ca:	e007      	b.n	80042dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f6:	e17f      	b.n	80045f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8171 	beq.w	80045f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d005      	beq.n	8004328 <HAL_GPIO_Init+0x40>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d130      	bne.n	800438a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800435e:	2201      	movs	r2, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 0201 	and.w	r2, r3, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b03      	cmp	r3, #3
 8004394:	d118      	bne.n	80043c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800439c:	2201      	movs	r2, #1
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f003 0201 	and.w	r2, r3, #1
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d017      	beq.n	8004404 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	2203      	movs	r2, #3
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d123      	bne.n	8004458 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	08da      	lsrs	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3208      	adds	r2, #8
 8004418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	220f      	movs	r2, #15
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	08da      	lsrs	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3208      	adds	r2, #8
 8004452:	6939      	ldr	r1, [r7, #16]
 8004454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2203      	movs	r2, #3
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4013      	ands	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0203 	and.w	r2, r3, #3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80ac 	beq.w	80045f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_GPIO_Init+0x330>)
 800449c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449e:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <HAL_GPIO_Init+0x330>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6613      	str	r3, [r2, #96]	; 0x60
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_GPIO_Init+0x330>)
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044b2:	4a5a      	ldr	r2, [pc, #360]	; (800461c <HAL_GPIO_Init+0x334>)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	3302      	adds	r3, #2
 80044ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	220f      	movs	r2, #15
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x242>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4f      	ldr	r2, [pc, #316]	; (8004620 <HAL_GPIO_Init+0x338>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x23e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4e      	ldr	r2, [pc, #312]	; (8004624 <HAL_GPIO_Init+0x33c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x23a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4d      	ldr	r2, [pc, #308]	; (8004628 <HAL_GPIO_Init+0x340>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x236>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4c      	ldr	r2, [pc, #304]	; (800462c <HAL_GPIO_Init+0x344>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x232>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4b      	ldr	r2, [pc, #300]	; (8004630 <HAL_GPIO_Init+0x348>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x22e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4a      	ldr	r2, [pc, #296]	; (8004634 <HAL_GPIO_Init+0x34c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x22a>
 800450e:	2306      	movs	r3, #6
 8004510:	e00c      	b.n	800452c <HAL_GPIO_Init+0x244>
 8004512:	2307      	movs	r3, #7
 8004514:	e00a      	b.n	800452c <HAL_GPIO_Init+0x244>
 8004516:	2305      	movs	r3, #5
 8004518:	e008      	b.n	800452c <HAL_GPIO_Init+0x244>
 800451a:	2304      	movs	r3, #4
 800451c:	e006      	b.n	800452c <HAL_GPIO_Init+0x244>
 800451e:	2303      	movs	r3, #3
 8004520:	e004      	b.n	800452c <HAL_GPIO_Init+0x244>
 8004522:	2302      	movs	r3, #2
 8004524:	e002      	b.n	800452c <HAL_GPIO_Init+0x244>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_GPIO_Init+0x244>
 800452a:	2300      	movs	r3, #0
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	f002 0203 	and.w	r2, r2, #3
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	4093      	lsls	r3, r2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800453c:	4937      	ldr	r1, [pc, #220]	; (800461c <HAL_GPIO_Init+0x334>)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	3302      	adds	r3, #2
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_GPIO_Init+0x350>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800456e:	4a32      	ldr	r2, [pc, #200]	; (8004638 <HAL_GPIO_Init+0x350>)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004574:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_GPIO_Init+0x350>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <HAL_GPIO_Init+0x350>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <HAL_GPIO_Init+0x350>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_GPIO_Init+0x350>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_GPIO_Init+0x350>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ec:	4a12      	ldr	r2, [pc, #72]	; (8004638 <HAL_GPIO_Init+0x350>)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	3301      	adds	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	f47f ae78 	bne.w	80042f8 <HAL_GPIO_Init+0x10>
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	40010000 	.word	0x40010000
 8004620:	48000400 	.word	0x48000400
 8004624:	48000800 	.word	0x48000800
 8004628:	48000c00 	.word	0x48000c00
 800462c:	48001000 	.word	0x48001000
 8004630:	48001400 	.word	0x48001400
 8004634:	48001800 	.word	0x48001800
 8004638:	40010400 	.word	0x40010400

0800463c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	e001      	b.n	800465e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fc fbb8 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010400 	.word	0x40010400

0800469c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e08d      	b.n	80047ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe ff68 	bl	8003598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d107      	bne.n	8004716 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	e006      	b.n	8004724 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004722:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d108      	bne.n	800473e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	e007      	b.n	800474e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800475c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	460b      	mov	r3, r1
 80047e8:	813b      	strh	r3, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	f040 80f9 	bne.w	80049ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_I2C_Mem_Write+0x34>
 8004802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0ed      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_I2C_Mem_Write+0x4e>
 800481e:	2302      	movs	r3, #2
 8004820:	e0e6      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800482a:	f7ff f9e3 	bl	8003bf4 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2319      	movs	r3, #25
 8004836:	2201      	movs	r2, #1
 8004838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fac3 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0d1      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004874:	88f8      	ldrh	r0, [r7, #6]
 8004876:	893a      	ldrh	r2, [r7, #8]
 8004878:	8979      	ldrh	r1, [r7, #10]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	4603      	mov	r3, r0
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f9d3 	bl	8004c30 <I2C_RequestMemoryWrite>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0a9      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2bff      	cmp	r3, #255	; 0xff
 80048a4:	d90e      	bls.n	80048c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	22ff      	movs	r2, #255	; 0xff
 80048aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	8979      	ldrh	r1, [r7, #10]
 80048b4:	2300      	movs	r3, #0
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fc3d 	bl	800513c <I2C_TransferConfig>
 80048c2:	e00f      	b.n	80048e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	8979      	ldrh	r1, [r7, #10]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fc2c 	bl	800513c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fabc 	bl	8004e66 <I2C_WaitOnTXISFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e07b      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d034      	beq.n	800499c <HAL_I2C_Mem_Write+0x1c8>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d130      	bne.n	800499c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	2200      	movs	r2, #0
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fa3f 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e04d      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2bff      	cmp	r3, #255	; 0xff
 800495c:	d90e      	bls.n	800497c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	22ff      	movs	r2, #255	; 0xff
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	b2da      	uxtb	r2, r3
 800496a:	8979      	ldrh	r1, [r7, #10]
 800496c:	2300      	movs	r3, #0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fbe1 	bl	800513c <I2C_TransferConfig>
 800497a:	e00f      	b.n	800499c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	b2da      	uxtb	r2, r3
 800498c:	8979      	ldrh	r1, [r7, #10]
 800498e:	2300      	movs	r3, #0
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fbd0 	bl	800513c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d19e      	bne.n	80048e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 faa2 	bl	8004ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e01a      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2220      	movs	r2, #32
 80049c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <HAL_I2C_Mem_Write+0x224>)
 80049ce:	400b      	ands	r3, r1
 80049d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	fe00e800 	.word	0xfe00e800

080049fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	813b      	strh	r3, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	f040 80fd 	bne.w	8004c1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_I2C_Mem_Read+0x34>
 8004a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0f1      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x4e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ea      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a52:	f7ff f8cf 	bl	8003bf4 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2319      	movs	r3, #25
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f9af 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0d5      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2222      	movs	r2, #34	; 0x22
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2240      	movs	r2, #64	; 0x40
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a9c:	88f8      	ldrh	r0, [r7, #6]
 8004a9e:	893a      	ldrh	r2, [r7, #8]
 8004aa0:	8979      	ldrh	r1, [r7, #10]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4603      	mov	r3, r0
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f913 	bl	8004cd8 <I2C_RequestMemoryRead>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0ad      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2bff      	cmp	r3, #255	; 0xff
 8004acc:	d90e      	bls.n	8004aec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	22ff      	movs	r2, #255	; 0xff
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	8979      	ldrh	r1, [r7, #10]
 8004adc:	4b52      	ldr	r3, [pc, #328]	; (8004c28 <HAL_I2C_Mem_Read+0x22c>)
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fb29 	bl	800513c <I2C_TransferConfig>
 8004aea:	e00f      	b.n	8004b0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_I2C_Mem_Read+0x22c>)
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fb18 	bl	800513c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	2200      	movs	r2, #0
 8004b14:	2104      	movs	r1, #4
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f956 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07c      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d034      	beq.n	8004bcc <HAL_I2C_Mem_Read+0x1d0>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d130      	bne.n	8004bcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f927 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e04d      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2bff      	cmp	r3, #255	; 0xff
 8004b8c:	d90e      	bls.n	8004bac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	22ff      	movs	r2, #255	; 0xff
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	8979      	ldrh	r1, [r7, #10]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fac9 	bl	800513c <I2C_TransferConfig>
 8004baa:	e00f      	b.n	8004bcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	8979      	ldrh	r1, [r7, #10]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fab8 	bl	800513c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d19a      	bne.n	8004b0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f98a 	bl	8004ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e01a      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_I2C_Mem_Read+0x230>)
 8004bfe:	400b      	ands	r3, r1
 8004c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	80002400 	.word	0x80002400
 8004c2c:	fe00e800 	.word	0xfe00e800

08004c30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	817b      	strh	r3, [r7, #10]
 8004c42:	460b      	mov	r3, r1
 8004c44:	813b      	strh	r3, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	8979      	ldrh	r1, [r7, #10]
 8004c50:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <I2C_RequestMemoryWrite+0xa4>)
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa6f 	bl	800513c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f8ff 	bl	8004e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e02c      	b.n	8004ccc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
 8004c82:	e015      	b.n	8004cb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f8e5 	bl	8004e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e012      	b.n	8004ccc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca6:	893b      	ldrh	r3, [r7, #8]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f884 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	80002000 	.word	0x80002000

08004cd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	817b      	strh	r3, [r7, #10]
 8004cea:	460b      	mov	r3, r1
 8004cec:	813b      	strh	r3, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <I2C_RequestMemoryRead+0xa4>)
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fa1c 	bl	800513c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	69b9      	ldr	r1, [r7, #24]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f8ac 	bl	8004e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e02c      	b.n	8004d72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
 8004d28:	e015      	b.n	8004d56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d2a:	893b      	ldrh	r3, [r7, #8]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	69b9      	ldr	r1, [r7, #24]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f892 	bl	8004e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e012      	b.n	8004d72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2140      	movs	r1, #64	; 0x40
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f831 	bl	8004dc8 <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	80002000 	.word	0x80002000

08004d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d103      	bne.n	8004d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d007      	beq.n	8004dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	619a      	str	r2, [r3, #24]
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd8:	e031      	b.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d02d      	beq.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de2:	f7fe ff07 	bl	8003bf4 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d122      	bne.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d113      	bne.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	f043 0220 	orr.w	r2, r3, #32
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e00f      	b.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	bf0c      	ite	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	2300      	movne	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d0be      	beq.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e72:	e033      	b.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f87f 	bl	8004f7c <I2C_IsErrorOccurred>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e031      	b.n	8004eec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d025      	beq.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e90:	f7fe feb0 	bl	8003bf4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11a      	bne.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d013      	beq.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d1c4      	bne.n	8004e74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f00:	e02f      	b.n	8004f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f838 	bl	8004f7c <I2C_IsErrorOccurred>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e02d      	b.n	8004f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f16:	f7fe fe6d 	bl	8003bf4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11a      	bne.n	8004f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d013      	beq.n	8004f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e007      	b.n	8004f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d1c8      	bne.n	8004f02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d068      	beq.n	800507a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2210      	movs	r2, #16
 8004fae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fb0:	e049      	b.n	8005046 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d045      	beq.n	8005046 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fe fe1b 	bl	8003bf4 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_IsErrorOccurred+0x54>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d13a      	bne.n	8005046 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff2:	d121      	bne.n	8005038 <I2C_IsErrorOccurred+0xbc>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ffa:	d01d      	beq.n	8005038 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d01a      	beq.n	8005038 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005010:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005012:	f7fe fdef 	bl	8003bf4 <HAL_GetTick>
 8005016:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005018:	e00e      	b.n	8005038 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800501a:	f7fe fdeb 	bl	8003bf4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b19      	cmp	r3, #25
 8005026:	d907      	bls.n	8005038 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005036:	e006      	b.n	8005046 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d1e9      	bne.n	800501a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b20      	cmp	r3, #32
 8005052:	d003      	beq.n	800505c <I2C_IsErrorOccurred+0xe0>
 8005054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0aa      	beq.n	8004fb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800505c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005060:	2b00      	cmp	r3, #0
 8005062:	d103      	bne.n	800506c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2220      	movs	r2, #32
 800506a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800509c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f043 0308 	orr.w	r3, r3, #8
 80050b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	f043 0302 	orr.w	r3, r3, #2
 80050d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80050e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01c      	beq.n	800512a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff fe45 	bl	8004d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <I2C_IsErrorOccurred+0x1bc>)
 8005102:	400b      	ands	r3, r1
 8005104:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800512a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800512e:	4618      	mov	r0, r3
 8005130:	3728      	adds	r7, #40	; 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	fe00e800 	.word	0xfe00e800

0800513c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	817b      	strh	r3, [r7, #10]
 800514a:	4613      	mov	r3, r2
 800514c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800514e:	897b      	ldrh	r3, [r7, #10]
 8005150:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005154:	7a7b      	ldrb	r3, [r7, #9]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800515c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	4313      	orrs	r3, r2
 8005166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800516a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	0d5b      	lsrs	r3, r3, #21
 8005176:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800517a:	4b08      	ldr	r3, [pc, #32]	; (800519c <I2C_TransferConfig+0x60>)
 800517c:	430b      	orrs	r3, r1
 800517e:	43db      	mvns	r3, r3
 8005180:	ea02 0103 	and.w	r1, r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	03ff63ff 	.word	0x03ff63ff

080051a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d138      	bne.n	8005228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e032      	b.n	800522a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2224      	movs	r2, #36	; 0x24
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005228:	2302      	movs	r3, #2
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b20      	cmp	r3, #32
 800524a:	d139      	bne.n	80052c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005256:	2302      	movs	r3, #2
 8005258:	e033      	b.n	80052c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2224      	movs	r2, #36	; 0x24
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005288:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d0:	b08f      	sub	sp, #60	; 0x3c
 80052d2:	af0a      	add	r7, sp, #40	; 0x28
 80052d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e116      	b.n	800550e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f00c f932 	bl	8011564 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2203      	movs	r2, #3
 8005304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f005 fefd 	bl	800b11e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	687e      	ldr	r6, [r7, #4]
 800532c:	466d      	mov	r5, sp
 800532e:	f106 0410 	add.w	r4, r6, #16
 8005332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800533a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800533e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005342:	1d33      	adds	r3, r6, #4
 8005344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005346:	6838      	ldr	r0, [r7, #0]
 8005348:	f005 fe10 	bl	800af6c <USB_CoreInit>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e0d7      	b.n	800550e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2100      	movs	r1, #0
 8005364:	4618      	mov	r0, r3
 8005366:	f005 feeb 	bl	800b140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e04a      	b.n	8005406 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	333d      	adds	r3, #61	; 0x3d
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	333c      	adds	r3, #60	; 0x3c
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	b298      	uxth	r0, r3
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3356      	adds	r3, #86	; 0x56
 80053ac:	4602      	mov	r2, r0
 80053ae:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	3340      	adds	r3, #64	; 0x40
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	3344      	adds	r3, #68	; 0x44
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3348      	adds	r3, #72	; 0x48
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053ec:	7bfa      	ldrb	r2, [r7, #15]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	334c      	adds	r3, #76	; 0x4c
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	3301      	adds	r3, #1
 8005404:	73fb      	strb	r3, [r7, #15]
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d3af      	bcc.n	8005370 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e044      	b.n	80054a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800542c:	7bfa      	ldrb	r2, [r7, #15]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005442:	7bfa      	ldrb	r2, [r7, #15]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005458:	7bfa      	ldrb	r2, [r7, #15]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800546e:	7bfa      	ldrb	r2, [r7, #15]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005484:	7bfa      	ldrb	r2, [r7, #15]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	3301      	adds	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d3b5      	bcc.n	8005416 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	687e      	ldr	r6, [r7, #4]
 80054b2:	466d      	mov	r5, sp
 80054b4:	f106 0410 	add.w	r4, r6, #16
 80054b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80054c8:	1d33      	adds	r3, r6, #4
 80054ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054cc:	6838      	ldr	r0, [r7, #0]
 80054ce:	f005 fe83 	bl	800b1d8 <USB_DevInit>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e014      	b.n	800550e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d102      	bne.n	8005502 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 f869 	bl	80065d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f006 fe31 	bl	800c16e <USB_DevDisconnect>

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005516 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_PCD_Start+0x1c>
 800552e:	2302      	movs	r3, #2
 8005530:	e01c      	b.n	800556c <HAL_PCD_Start+0x56>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f005 fdd2 	bl	800b0fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f006 fde5 	bl	800c12c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b08d      	sub	sp, #52	; 0x34
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f006 fea3 	bl	800c2d6 <USB_GetMode>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 847e 	bne.w	8005e94 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f006 fe07 	bl	800c1b0 <USB_ReadInterrupts>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8474 	beq.w	8005e92 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f006 fdf4 	bl	800c1b0 <USB_ReadInterrupts>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d107      	bne.n	80055e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f002 0202 	and.w	r2, r2, #2
 80055e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f006 fde2 	bl	800c1b0 <USB_ReadInterrupts>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d161      	bne.n	80056ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0210 	bic.w	r2, r2, #16
 8005604:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f003 020f 	and.w	r2, r3, #15
 8005612:	4613      	mov	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	3304      	adds	r3, #4
 8005624:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	0c5b      	lsrs	r3, r3, #17
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	2b02      	cmp	r3, #2
 8005630:	d124      	bne.n	800567c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d035      	beq.n	80056aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800564c:	b29b      	uxth	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	6a38      	ldr	r0, [r7, #32]
 8005652:	f006 fc19 	bl	800be88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005662:	441a      	add	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005674:	441a      	add	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	615a      	str	r2, [r3, #20]
 800567a:	e016      	b.n	80056aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	0c5b      	lsrs	r3, r3, #17
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2b06      	cmp	r3, #6
 8005686:	d110      	bne.n	80056aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800568e:	2208      	movs	r2, #8
 8005690:	4619      	mov	r1, r3
 8005692:	6a38      	ldr	r0, [r7, #32]
 8005694:	f006 fbf8 	bl	800be88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a4:	441a      	add	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0210 	orr.w	r2, r2, #16
 80056b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f006 fd76 	bl	800c1b0 <USB_ReadInterrupts>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056ce:	f040 80a7 	bne.w	8005820 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f006 fd7b 	bl	800c1d6 <USB_ReadDevAllOutEpInterrupt>
 80056e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80056e2:	e099      	b.n	8005818 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 808e 	beq.w	800580c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f006 fd9f 	bl	800c23e <USB_ReadDevOutEPInterrupt>
 8005700:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	461a      	mov	r2, r3
 800571a:	2301      	movs	r3, #1
 800571c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800571e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fe7d 	bl	8006420 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	2308      	movs	r3, #8
 8005740:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 feb9 	bl	80064bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	2310      	movs	r3, #16
 8005764:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d030      	beq.n	80057d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d109      	bne.n	8005790 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800578e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	78db      	ldrb	r3, [r3, #3]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d108      	bne.n	80057c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f00c f818 	bl	80117f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	2302      	movs	r3, #2
 80057d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	461a      	mov	r2, r3
 80057ea:	2320      	movs	r3, #32
 80057ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	461a      	mov	r2, r3
 8005806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800580a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	3301      	adds	r3, #1
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	f47f af62 	bne.w	80056e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f006 fcc3 	bl	800c1b0 <USB_ReadInterrupts>
 800582a:	4603      	mov	r3, r0
 800582c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005834:	f040 80a4 	bne.w	8005980 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f006 fce4 	bl	800c20a <USB_ReadDevAllInEpInterrupt>
 8005842:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005848:	e096      	b.n	8005978 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 808b 	beq.w	800596c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f006 fd0a 	bl	800c27a <USB_ReadDevInEPInterrupt>
 8005866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d020      	beq.n	80058b4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	2201      	movs	r2, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43db      	mvns	r3, r3
 800588c:	69f9      	ldr	r1, [r7, #28]
 800588e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005892:	4013      	ands	r3, r2
 8005894:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	461a      	mov	r2, r3
 80058a4:	2301      	movs	r3, #1
 80058a6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f00b ff09 	bl	80116c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ca:	461a      	mov	r2, r3
 80058cc:	2308      	movs	r3, #8
 80058ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	461a      	mov	r2, r3
 80058e8:	2310      	movs	r3, #16
 80058ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	461a      	mov	r2, r3
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d023      	beq.n	800595a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005914:	6a38      	ldr	r0, [r7, #32]
 8005916:	f005 fda1 	bl	800b45c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	3338      	adds	r3, #56	; 0x38
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	3304      	adds	r3, #4
 800592c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	b2db      	uxtb	r3, r3
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f00b ff66 	bl	8011814 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	461a      	mov	r2, r3
 8005956:	2302      	movs	r3, #2
 8005958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fcd2 	bl	8006310 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	f47f af65 	bne.w	800584a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f006 fc13 	bl	800c1b0 <USB_ReadInterrupts>
 800598a:	4603      	mov	r3, r0
 800598c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005994:	d122      	bne.n	80059dc <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d108      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059bc:	2100      	movs	r1, #0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f00c f99a 	bl	8011cf8 <HAL_PCDEx_LPM_Callback>
 80059c4:	e002      	b.n	80059cc <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f00b feea 	bl	80117a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80059da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f006 fbe5 	bl	800c1b0 <USB_ReadInterrupts>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f0:	d112      	bne.n	8005a18 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f00b fea6 	bl	8011754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f006 fbc7 	bl	800c1b0 <USB_ReadInterrupts>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d121      	bne.n	8005a72 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005a3c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d111      	bne.n	8005a6c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a62:	2101      	movs	r1, #1
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f00c f947 	bl	8011cf8 <HAL_PCDEx_LPM_Callback>
 8005a6a:	e002      	b.n	8005a72 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f00b fe71 	bl	8011754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f006 fb9a 	bl	800c1b0 <USB_ReadInterrupts>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	f040 80b5 	bne.w	8005bf4 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2110      	movs	r1, #16
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f005 fcd9 	bl	800b45c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aae:	e046      	b.n	8005b3e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	461a      	mov	r2, r3
 8005abe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ae2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	461a      	mov	r2, r3
 8005af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d3b3      	bcc.n	8005ab0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d016      	beq.n	8005b92 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b74:	f043 030b 	orr.w	r3, r3, #11
 8005b78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8a:	f043 030b 	orr.w	r3, r3, #11
 8005b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8005b90:	e015      	b.n	8005bbe <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ba4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005ba8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb8:	f043 030b 	orr.w	r3, r3, #11
 8005bbc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bd0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f006 fbaa 	bl	800c338 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f006 fad9 	bl	800c1b0 <USB_ReadInterrupts>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d124      	bne.n	8005c54 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f006 fb6f 	bl	800c2f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f005 fc9c 	bl	800b556 <USB_GetDevSpeed>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	f001 faed 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8005c2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f005 f9c3 	bl	800afc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f00b fd69 	bl	8011716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f006 faa9 	bl	800c1b0 <USB_ReadInterrupts>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d10a      	bne.n	8005c7e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f00b fd46 	bl	80116fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f002 0208 	and.w	r2, r2, #8
 8005c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f006 fa94 	bl	800c1b0 <USB_ReadInterrupts>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d122      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	e014      	b.n	8005cce <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d105      	bne.n	8005cc8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 faf3 	bl	80062ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	3301      	adds	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d3e5      	bcc.n	8005ca4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f006 fa67 	bl	800c1b0 <USB_ReadInterrupts>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cec:	d13b      	bne.n	8005d66 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cee:	2301      	movs	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	e02b      	b.n	8005d4c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	3340      	adds	r3, #64	; 0x40
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d115      	bne.n	8005d46 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da12      	bge.n	8005d46 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	333f      	adds	r3, #63	; 0x3f
 8005d30:	2201      	movs	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fab4 	bl	80062ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	3301      	adds	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d3ce      	bcc.n	8005cf4 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f006 fa20 	bl	800c1b0 <USB_ReadInterrupts>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d7a:	d155      	bne.n	8005e28 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	e045      	b.n	8005e0e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d12e      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005daa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	da2b      	bge.n	8005e08 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005dbc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d121      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e04:	6053      	str	r3, [r2, #4]
            break;
 8005e06:	e007      	b.n	8005e18 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d3b4      	bcc.n	8005d82 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f006 f9bf 	bl	800c1b0 <USB_ReadInterrupts>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d10a      	bne.n	8005e54 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f00b fcfa 	bl	8011838 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f006 f9a9 	bl	800c1b0 <USB_ReadInterrupts>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d115      	bne.n	8005e94 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f00b fcea 	bl	8011854 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	e000      	b.n	8005e94 <HAL_PCD_IRQHandler+0x920>
      return;
 8005e92:	bf00      	nop
    }
  }
}
 8005e94:	3734      	adds	r7, #52	; 0x34
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd90      	pop	{r4, r7, pc}

08005e9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_PCD_SetAddress+0x1a>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e013      	b.n	8005edc <HAL_PCD_SetAddress+0x42>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f006 f907 	bl	800c0e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	70fb      	strb	r3, [r7, #3]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	803b      	strh	r3, [r7, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da0f      	bge.n	8005f2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	4613      	mov	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	3338      	adds	r3, #56	; 0x38
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	705a      	strb	r2, [r3, #1]
 8005f28:	e00f      	b.n	8005f4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 020f 	and.w	r2, r3, #15
 8005f30:	4613      	mov	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3304      	adds	r3, #4
 8005f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f56:	883a      	ldrh	r2, [r7, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	78ba      	ldrb	r2, [r7, #2]
 8005f60:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f74:	78bb      	ldrb	r3, [r7, #2]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d102      	bne.n	8005f80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_PCD_EP_Open+0xaa>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e00e      	b.n	8005fac <HAL_PCD_EP_Open+0xc8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f005 faf9 	bl	800b594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005faa:	7afb      	ldrb	r3, [r7, #11]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da0f      	bge.n	8005fe8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	f003 020f 	and.w	r2, r3, #15
 8005fce:	4613      	mov	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	3338      	adds	r3, #56	; 0x38
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4413      	add	r3, r2
 8005fdc:	3304      	adds	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	705a      	strb	r2, [r3, #1]
 8005fe6:	e00f      	b.n	8006008 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3304      	adds	r3, #4
 8006000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_PCD_EP_Close+0x6e>
 800601e:	2302      	movs	r3, #2
 8006020:	e00e      	b.n	8006040 <HAL_PCD_EP_Close+0x8c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	4618      	mov	r0, r3
 8006032:	f005 fb37 	bl	800b6a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	460b      	mov	r3, r1
 8006056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	3304      	adds	r3, #4
 8006070:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	b2da      	uxtb	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6979      	ldr	r1, [r7, #20]
 800609c:	4618      	mov	r0, r3
 800609e:	f005 fbdd 	bl	800b85c <USB_EPStartXfer>

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	460b      	mov	r3, r1
 80060ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	f003 020f 	and.w	r2, r3, #15
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	3338      	adds	r3, #56	; 0x38
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	3304      	adds	r3, #4
 8006102:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2200      	movs	r2, #0
 8006114:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2201      	movs	r2, #1
 800611a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	b2da      	uxtb	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6979      	ldr	r1, [r7, #20]
 800612e:	4618      	mov	r0, r3
 8006130:	f005 fb94 	bl	800b85c <USB_EPStartXfer>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d901      	bls.n	800615c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04e      	b.n	80061fa <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800615c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	da0f      	bge.n	8006184 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	3338      	adds	r3, #56	; 0x38
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	705a      	strb	r2, [r3, #1]
 8006182:	e00d      	b.n	80061a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_PCD_EP_SetStall+0x82>
 80061bc:	2302      	movs	r3, #2
 80061be:	e01c      	b.n	80061fa <HAL_PCD_EP_SetStall+0xbc>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f005 feb2 	bl	800bf38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d108      	bne.n	80061f0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f006 f8a4 	bl	800c338 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	f003 020f 	and.w	r2, r3, #15
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	429a      	cmp	r2, r3
 800621a:	d901      	bls.n	8006220 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e042      	b.n	80062a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	da0f      	bge.n	8006248 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	3338      	adds	r3, #56	; 0x38
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	705a      	strb	r2, [r3, #1]
 8006246:	e00f      	b.n	8006268 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_PCD_EP_ClrStall+0x86>
 8006284:	2302      	movs	r3, #2
 8006286:	e00e      	b.n	80062a6 <HAL_PCD_EP_ClrStall+0xa4>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68f9      	ldr	r1, [r7, #12]
 8006296:	4618      	mov	r0, r3
 8006298:	f005 febc 	bl	800c014 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	da0c      	bge.n	80062dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	f003 020f 	and.w	r2, r3, #15
 80062c8:	4613      	mov	r3, r2
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	3338      	adds	r3, #56	; 0x38
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	4413      	add	r3, r2
 80062d6:	3304      	adds	r3, #4
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e00c      	b.n	80062f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	f003 020f 	and.w	r2, r3, #15
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f005 fcdf 	bl	800bcc0 <USB_EPStopXfer>
 8006302:	4603      	mov	r3, r0
 8006304:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006306:	7afb      	ldrb	r3, [r7, #11]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	3338      	adds	r3, #56	; 0x38
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	4413      	add	r3, r2
 8006334:	3304      	adds	r3, #4
 8006336:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	429a      	cmp	r2, r3
 8006342:	d901      	bls.n	8006348 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e067      	b.n	8006418 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	429a      	cmp	r2, r3
 800635c:	d902      	bls.n	8006364 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3303      	adds	r3, #3
 8006368:	089b      	lsrs	r3, r3, #2
 800636a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800636c:	e026      	b.n	80063bc <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	429a      	cmp	r2, r3
 8006382:	d902      	bls.n	800638a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3303      	adds	r3, #3
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68d9      	ldr	r1, [r3, #12]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	b2da      	uxtb	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	b29b      	uxth	r3, r3
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	f005 fd38 	bl	800be14 <USB_WritePacket>

    ep->xfer_buff  += len;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	441a      	add	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d809      	bhi.n	80063e6 <PCD_WriteEmptyTxFifo+0xd6>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063da:	429a      	cmp	r2, r3
 80063dc:	d203      	bcs.n	80063e6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1c3      	bne.n	800636e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d811      	bhi.n	8006416 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	2201      	movs	r2, #1
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	43db      	mvns	r3, r3
 800640c:	6939      	ldr	r1, [r7, #16]
 800640e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006412:	4013      	ands	r3, r2
 8006414:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	333c      	adds	r3, #60	; 0x3c
 8006438:	3304      	adds	r3, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <PCD_EP_OutXfrComplete_int+0x98>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d124      	bne.n	80064a0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	6093      	str	r3, [r2, #8]
 8006474:	e01a      	b.n	80064ac <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	461a      	mov	r2, r3
 800648e:	2320      	movs	r3, #32
 8006490:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f00b f8f9 	bl	8011690 <HAL_PCD_DataOutStageCallback>
 800649e:	e005      	b.n	80064ac <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f00b f8f2 	bl	8011690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	4f54310a 	.word	0x4f54310a

080064bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	333c      	adds	r3, #60	; 0x3c
 80064d4:	3304      	adds	r3, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <PCD_EP_OutSetupPacket_int+0x64>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d90e      	bls.n	8006510 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	461a      	mov	r2, r3
 800650a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f00b f8ab 	bl	801166c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	4f54300a 	.word	0x4f54300a

08006524 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
 8006530:	4613      	mov	r3, r2
 8006532:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006542:	883b      	ldrh	r3, [r7, #0]
 8006544:	0419      	lsls	r1, r3, #16
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	430a      	orrs	r2, r1
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
 8006550:	e028      	b.n	80065a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4413      	add	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	e00d      	b.n	8006582 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	3340      	adds	r3, #64	; 0x40
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4413      	add	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	3301      	adds	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	3b01      	subs	r3, #1
 8006588:	429a      	cmp	r2, r3
 800658a:	d3ec      	bcc.n	8006566 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800658c:	883b      	ldrh	r3, [r7, #0]
 800658e:	0418      	lsls	r0, r3, #16
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	3b01      	subs	r3, #1
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	4302      	orrs	r2, r0
 800659c:	3340      	adds	r3, #64	; 0x40
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006606:	f043 0303 	orr.w	r3, r3, #3
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <HAL_PWREx_GetVoltageRange+0x18>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40007000 	.word	0x40007000

08006638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006646:	d130      	bne.n	80066aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006648:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006654:	d038      	beq.n	80066c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006656:	4b20      	ldr	r3, [pc, #128]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800665e:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006664:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006666:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2232      	movs	r2, #50	; 0x32
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	0c9b      	lsrs	r3, r3, #18
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800667c:	e002      	b.n	8006684 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3b01      	subs	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006684:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006690:	d102      	bne.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f2      	bne.n	800667e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d110      	bne.n	80066c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e00f      	b.n	80066ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b6:	d007      	beq.n	80066c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066b8:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066c0:	4a05      	ldr	r2, [pc, #20]	; (80066d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40007000 	.word	0x40007000
 80066dc:	20000000 	.word	0x20000000
 80066e0:	431bde83 	.word	0x431bde83

080066e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_PWREx_EnableVddUSB+0x1c>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a04      	ldr	r2, [pc, #16]	; (8006700 <HAL_PWREx_EnableVddUSB+0x1c>)
 80066ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f2:	6053      	str	r3, [r2, #4]
}
 80066f4:	bf00      	nop
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40007000 	.word	0x40007000

08006704 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f023 0307 	bic.w	r3, r3, #7
 8006710:	4a07      	ldr	r2, [pc, #28]	; (8006730 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8006712:	f043 0304 	orr.w	r3, r3, #4
 8006716:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	4a05      	ldr	r2, [pc, #20]	; (8006734 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800671e:	f043 0304 	orr.w	r3, r3, #4
 8006722:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006724:	bf30      	wfi
}
 8006726:	bf00      	nop
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40007000 	.word	0x40007000
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e3ca      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800674a:	4b97      	ldr	r3, [pc, #604]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006754:	4b94      	ldr	r3, [pc, #592]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80e4 	beq.w	8006934 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <HAL_RCC_OscConfig+0x4a>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b0c      	cmp	r3, #12
 8006776:	f040 808b 	bne.w	8006890 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b01      	cmp	r3, #1
 800677e:	f040 8087 	bne.w	8006890 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006782:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_RCC_OscConfig+0x62>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e3a2      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1a      	ldr	r2, [r3, #32]
 800679e:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_RCC_OscConfig+0x7c>
 80067aa:	4b7f      	ldr	r3, [pc, #508]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b2:	e005      	b.n	80067c0 <HAL_RCC_OscConfig+0x88>
 80067b4:	4b7c      	ldr	r3, [pc, #496]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d223      	bcs.n	800680c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fd55 	bl	8007278 <RCC_SetFlashLatencyFromMSIRange>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e383      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067d8:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a72      	ldr	r2, [pc, #456]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067de:	f043 0308 	orr.w	r3, r3, #8
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b70      	ldr	r3, [pc, #448]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	496d      	ldr	r1, [pc, #436]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067f6:	4b6c      	ldr	r3, [pc, #432]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	4968      	ldr	r1, [pc, #416]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006806:	4313      	orrs	r3, r2
 8006808:	604b      	str	r3, [r1, #4]
 800680a:	e025      	b.n	8006858 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800680c:	4b66      	ldr	r3, [pc, #408]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a65      	ldr	r2, [pc, #404]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006812:	f043 0308 	orr.w	r3, r3, #8
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	4960      	ldr	r1, [pc, #384]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006826:	4313      	orrs	r3, r2
 8006828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800682a:	4b5f      	ldr	r3, [pc, #380]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	495b      	ldr	r1, [pc, #364]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800683a:	4313      	orrs	r3, r2
 800683c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fd15 	bl	8007278 <RCC_SetFlashLatencyFromMSIRange>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e343      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006858:	f000 fc4a 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 800685c:	4602      	mov	r2, r0
 800685e:	4b52      	ldr	r3, [pc, #328]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	091b      	lsrs	r3, r3, #4
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	4950      	ldr	r1, [pc, #320]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800686a:	5ccb      	ldrb	r3, [r1, r3]
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	4a4e      	ldr	r2, [pc, #312]	; (80069b0 <HAL_RCC_OscConfig+0x278>)
 8006876:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006878:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <HAL_RCC_OscConfig+0x27c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd f969 	bl	8003b54 <HAL_InitTick>
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d052      	beq.n	8006932 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	e327      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d032      	beq.n	80068fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006898:	4b43      	ldr	r3, [pc, #268]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a42      	ldr	r2, [pc, #264]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068a4:	f7fd f9a6 	bl	8003bf4 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068ac:	f7fd f9a2 	bl	8003bf4 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e310      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068be:	4b3a      	ldr	r3, [pc, #232]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ca:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a36      	ldr	r2, [pc, #216]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068d0:	f043 0308 	orr.w	r3, r3, #8
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	4b34      	ldr	r3, [pc, #208]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	4931      	ldr	r1, [pc, #196]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068e8:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	492c      	ldr	r1, [pc, #176]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]
 80068fc:	e01a      	b.n	8006934 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80068fe:	4b2a      	ldr	r3, [pc, #168]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a29      	ldr	r2, [pc, #164]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800690a:	f7fd f973 	bl	8003bf4 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006912:	f7fd f96f 	bl	8003bf4 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e2dd      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006924:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f0      	bne.n	8006912 <HAL_RCC_OscConfig+0x1da>
 8006930:	e000      	b.n	8006934 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d074      	beq.n	8006a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b08      	cmp	r3, #8
 8006944:	d005      	beq.n	8006952 <HAL_RCC_OscConfig+0x21a>
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d10e      	bne.n	800696a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b03      	cmp	r3, #3
 8006950:	d10b      	bne.n	800696a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d064      	beq.n	8006a28 <HAL_RCC_OscConfig+0x2f0>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d160      	bne.n	8006a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e2ba      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x24a>
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0b      	ldr	r2, [pc, #44]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800697a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e026      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800698a:	d115      	bne.n	80069b8 <HAL_RCC_OscConfig+0x280>
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 8006992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a02      	ldr	r2, [pc, #8]	; (80069a8 <HAL_RCC_OscConfig+0x270>)
 800699e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	e014      	b.n	80069d0 <HAL_RCC_OscConfig+0x298>
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
 80069ac:	080168b4 	.word	0x080168b4
 80069b0:	20000000 	.word	0x20000000
 80069b4:	20000004 	.word	0x20000004
 80069b8:	4ba0      	ldr	r3, [pc, #640]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a9f      	ldr	r2, [pc, #636]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 80069be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	4b9d      	ldr	r3, [pc, #628]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a9c      	ldr	r2, [pc, #624]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 80069ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d013      	beq.n	8006a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fd f90c 	bl	8003bf4 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e0:	f7fd f908 	bl	8003bf4 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b64      	cmp	r3, #100	; 0x64
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e276      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f2:	4b92      	ldr	r3, [pc, #584]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x2a8>
 80069fe:	e014      	b.n	8006a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fd f8f8 	bl	8003bf4 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a08:	f7fd f8f4 	bl	8003bf4 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b64      	cmp	r3, #100	; 0x64
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e262      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a1a:	4b88      	ldr	r3, [pc, #544]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f0      	bne.n	8006a08 <HAL_RCC_OscConfig+0x2d0>
 8006a26:	e000      	b.n	8006a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d060      	beq.n	8006af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCC_OscConfig+0x310>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b0c      	cmp	r3, #12
 8006a40:	d119      	bne.n	8006a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d116      	bne.n	8006a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a48:	4b7c      	ldr	r3, [pc, #496]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_RCC_OscConfig+0x328>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e23f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a60:	4b76      	ldr	r3, [pc, #472]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	4973      	ldr	r1, [pc, #460]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a74:	e040      	b.n	8006af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d023      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a7e:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a6e      	ldr	r2, [pc, #440]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8a:	f7fd f8b3 	bl	8003bf4 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a92:	f7fd f8af 	bl	8003bf4 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e21d      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aa4:	4b65      	ldr	r3, [pc, #404]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f0      	beq.n	8006a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab0:	4b62      	ldr	r3, [pc, #392]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	061b      	lsls	r3, r3, #24
 8006abe:	495f      	ldr	r1, [pc, #380]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	604b      	str	r3, [r1, #4]
 8006ac4:	e018      	b.n	8006af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ac6:	4b5d      	ldr	r3, [pc, #372]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a5c      	ldr	r2, [pc, #368]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad2:	f7fd f88f 	bl	8003bf4 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ada:	f7fd f88b 	bl	8003bf4 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e1f9      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aec:	4b53      	ldr	r3, [pc, #332]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f0      	bne.n	8006ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d03c      	beq.n	8006b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01c      	beq.n	8006b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b0c:	4b4b      	ldr	r3, [pc, #300]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b12:	4a4a      	ldr	r2, [pc, #296]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fd f86a 	bl	8003bf4 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b24:	f7fd f866 	bl	8003bf4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e1d4      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b36:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0ef      	beq.n	8006b24 <HAL_RCC_OscConfig+0x3ec>
 8006b44:	e01b      	b.n	8006b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b46:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4c:	4a3b      	ldr	r2, [pc, #236]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b56:	f7fd f84d 	bl	8003bf4 <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b5e:	f7fd f849 	bl	8003bf4 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e1b7      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b70:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1ef      	bne.n	8006b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80a6 	beq.w	8006cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006b90:	4b2a      	ldr	r3, [pc, #168]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10d      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b9c:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba0:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ba8:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb8:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <HAL_RCC_OscConfig+0x508>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d118      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc4:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <HAL_RCC_OscConfig+0x508>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <HAL_RCC_OscConfig+0x508>)
 8006bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd0:	f7fd f810 	bl	8003bf4 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd8:	f7fd f80c 	bl	8003bf4 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e17a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <HAL_RCC_OscConfig+0x508>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0f0      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d108      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4d8>
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c0e:	e029      	b.n	8006c64 <HAL_RCC_OscConfig+0x52c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b05      	cmp	r3, #5
 8006c16:	d115      	bne.n	8006c44 <HAL_RCC_OscConfig+0x50c>
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006c20:	f043 0304 	orr.w	r3, r3, #4
 8006c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c28:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2e:	4a03      	ldr	r2, [pc, #12]	; (8006c3c <HAL_RCC_OscConfig+0x504>)
 8006c30:	f043 0301 	orr.w	r3, r3, #1
 8006c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c38:	e014      	b.n	8006c64 <HAL_RCC_OscConfig+0x52c>
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	40007000 	.word	0x40007000
 8006c44:	4b9c      	ldr	r3, [pc, #624]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	4a9b      	ldr	r2, [pc, #620]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c54:	4b98      	ldr	r3, [pc, #608]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	4a97      	ldr	r2, [pc, #604]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006c5c:	f023 0304 	bic.w	r3, r3, #4
 8006c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d016      	beq.n	8006c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6c:	f7fc ffc2 	bl	8003bf4 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c72:	e00a      	b.n	8006c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c74:	f7fc ffbe 	bl	8003bf4 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e12a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c8a:	4b8b      	ldr	r3, [pc, #556]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0ed      	beq.n	8006c74 <HAL_RCC_OscConfig+0x53c>
 8006c98:	e015      	b.n	8006cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9a:	f7fc ffab 	bl	8003bf4 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ca0:	e00a      	b.n	8006cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca2:	f7fc ffa7 	bl	8003bf4 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e113      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cb8:	4b7f      	ldr	r3, [pc, #508]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1ed      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cc6:	7ffb      	ldrb	r3, [r7, #31]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d105      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ccc:	4b7a      	ldr	r3, [pc, #488]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd0:	4a79      	ldr	r2, [pc, #484]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80fe 	beq.w	8006ede <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	f040 80d0 	bne.w	8006e8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006cec:	4b72      	ldr	r3, [pc, #456]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f003 0203 	and.w	r2, r3, #3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d130      	bne.n	8006d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d127      	bne.n	8006d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d11f      	bne.n	8006d62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d2c:	2a07      	cmp	r2, #7
 8006d2e:	bf14      	ite	ne
 8006d30:	2201      	movne	r2, #1
 8006d32:	2200      	moveq	r2, #0
 8006d34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d113      	bne.n	8006d62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	3b01      	subs	r3, #1
 8006d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d109      	bne.n	8006d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d06e      	beq.n	8006e40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b0c      	cmp	r3, #12
 8006d66:	d069      	beq.n	8006e3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d68:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0ad      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d84:	4b4c      	ldr	r3, [pc, #304]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a4b      	ldr	r2, [pc, #300]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d90:	f7fc ff30 	bl	8003bf4 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d98:	f7fc ff2c 	bl	8003bf4 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e09a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006daa:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db6:	4b40      	ldr	r3, [pc, #256]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <HAL_RCC_OscConfig+0x784>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006dc6:	3a01      	subs	r2, #1
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	4311      	orrs	r1, r2
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dd0:	0212      	lsls	r2, r2, #8
 8006dd2:	4311      	orrs	r1, r2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dd8:	0852      	lsrs	r2, r2, #1
 8006dda:	3a01      	subs	r2, #1
 8006ddc:	0552      	lsls	r2, r2, #21
 8006dde:	4311      	orrs	r1, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006de4:	0852      	lsrs	r2, r2, #1
 8006de6:	3a01      	subs	r2, #1
 8006de8:	0652      	lsls	r2, r2, #25
 8006dea:	4311      	orrs	r1, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006df0:	0912      	lsrs	r2, r2, #4
 8006df2:	0452      	lsls	r2, r2, #17
 8006df4:	430a      	orrs	r2, r1
 8006df6:	4930      	ldr	r1, [pc, #192]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006dfc:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e08:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e14:	f7fc feee 	bl	8003bf4 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fc feea 	bl	8003bf4 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e058      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e2e:	4b22      	ldr	r3, [pc, #136]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e3a:	e050      	b.n	8006ede <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e04f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d148      	bne.n	8006ede <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e64:	f7fc fec6 	bl	8003bf4 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fc fec2 	bl	8003bf4 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e030      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x734>
 8006e8a:	e028      	b.n	8006ede <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b0c      	cmp	r3, #12
 8006e90:	d023      	beq.n	8006eda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <HAL_RCC_OscConfig+0x780>)
 8006e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fc fea9 	bl	8003bf4 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ea4:	e00c      	b.n	8006ec0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fc fea5 	bl	8003bf4 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d905      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e013      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <HAL_RCC_OscConfig+0x7b0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ec      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <HAL_RCC_OscConfig+0x7b0>)
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	4905      	ldr	r1, [pc, #20]	; (8006ee8 <HAL_RCC_OscConfig+0x7b0>)
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_RCC_OscConfig+0x7b4>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	60cb      	str	r3, [r1, #12]
 8006ed8:	e001      	b.n	8006ede <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	feeefffc 	.word	0xfeeefffc

08006ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0e7      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f04:	4b75      	ldr	r3, [pc, #468]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d910      	bls.n	8006f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f12:	4b72      	ldr	r3, [pc, #456]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f023 0207 	bic.w	r2, r3, #7
 8006f1a:	4970      	ldr	r1, [pc, #448]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f22:	4b6e      	ldr	r3, [pc, #440]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e0cf      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d010      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	4b66      	ldr	r3, [pc, #408]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d908      	bls.n	8006f62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f50:	4b63      	ldr	r3, [pc, #396]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4960      	ldr	r1, [pc, #384]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d04c      	beq.n	8007008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d107      	bne.n	8006f86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f76:	4b5a      	ldr	r3, [pc, #360]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d121      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e0a6      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8e:	4b54      	ldr	r3, [pc, #336]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d115      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e09a      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fa6:	4b4e      	ldr	r3, [pc, #312]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e08e      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fb6:	4b4a      	ldr	r3, [pc, #296]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e086      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fc6:	4b46      	ldr	r3, [pc, #280]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 0203 	bic.w	r2, r3, #3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4943      	ldr	r1, [pc, #268]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd8:	f7fc fe0c 	bl	8003bf4 <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe0:	f7fc fe08 	bl	8003bf4 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e06e      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	4b3a      	ldr	r3, [pc, #232]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 020c 	and.w	r2, r3, #12
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	429a      	cmp	r2, r3
 8007006:	d1eb      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	4b31      	ldr	r3, [pc, #196]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007020:	429a      	cmp	r2, r3
 8007022:	d208      	bcs.n	8007036 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	4b2e      	ldr	r3, [pc, #184]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	492b      	ldr	r1, [pc, #172]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007036:	4b29      	ldr	r3, [pc, #164]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d210      	bcs.n	8007066 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f023 0207 	bic.w	r2, r3, #7
 800704c:	4923      	ldr	r1, [pc, #140]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007054:	4b21      	ldr	r3, [pc, #132]	; (80070dc <HAL_RCC_ClockConfig+0x1ec>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d001      	beq.n	8007066 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e036      	b.n	80070d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d008      	beq.n	8007084 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007072:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4918      	ldr	r1, [pc, #96]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007080:	4313      	orrs	r3, r2
 8007082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	4910      	ldr	r1, [pc, #64]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070a4:	f000 f824 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <HAL_RCC_ClockConfig+0x1f0>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	091b      	lsrs	r3, r3, #4
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	490b      	ldr	r1, [pc, #44]	; (80070e4 <HAL_RCC_ClockConfig+0x1f4>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <HAL_RCC_ClockConfig+0x1f8>)
 80070c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCC_ClockConfig+0x1fc>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc fd43 	bl	8003b54 <HAL_InitTick>
 80070ce:	4603      	mov	r3, r0
 80070d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80070d2:	7afb      	ldrb	r3, [r7, #11]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40022000 	.word	0x40022000
 80070e0:	40021000 	.word	0x40021000
 80070e4:	080168b4 	.word	0x080168b4
 80070e8:	20000000 	.word	0x20000000
 80070ec:	20000004 	.word	0x20000004

080070f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	; 0x24
 80070f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fe:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007108:	4b3b      	ldr	r3, [pc, #236]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0x34>
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2b0c      	cmp	r3, #12
 800711c:	d121      	bne.n	8007162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d11e      	bne.n	8007162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007124:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007130:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	e005      	b.n	800714c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007140:	4b2d      	ldr	r3, [pc, #180]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800714c:	4a2b      	ldr	r2, [pc, #172]	; (80071fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10d      	bne.n	8007178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007160:	e00a      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d102      	bne.n	800716e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <HAL_RCC_GetSysClockFreq+0x110>)
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	e004      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d101      	bne.n	8007178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007174:	4b23      	ldr	r3, [pc, #140]	; (8007204 <HAL_RCC_GetSysClockFreq+0x114>)
 8007176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b0c      	cmp	r3, #12
 800717c:	d134      	bne.n	80071e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800717e:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d003      	beq.n	8007196 <HAL_RCC_GetSysClockFreq+0xa6>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d003      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0xac>
 8007194:	e005      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007196:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <HAL_RCC_GetSysClockFreq+0x110>)
 8007198:	617b      	str	r3, [r7, #20]
      break;
 800719a:	e005      	b.n	80071a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800719c:	4b19      	ldr	r3, [pc, #100]	; (8007204 <HAL_RCC_GetSysClockFreq+0x114>)
 800719e:	617b      	str	r3, [r7, #20]
      break;
 80071a0:	e002      	b.n	80071a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	617b      	str	r3, [r7, #20]
      break;
 80071a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071a8:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	091b      	lsrs	r3, r3, #4
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	3301      	adds	r3, #1
 80071b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	fb03 f202 	mul.w	r2, r3, r2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	0e5b      	lsrs	r3, r3, #25
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	3301      	adds	r3, #1
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80071e8:	69bb      	ldr	r3, [r7, #24]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3724      	adds	r7, #36	; 0x24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	080168cc 	.word	0x080168cc
 8007200:	00f42400 	.word	0x00f42400
 8007204:	00b71b00 	.word	0x00b71b00

08007208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <HAL_RCC_GetHCLKFreq+0x14>)
 800720e:	681b      	ldr	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000000 	.word	0x20000000

08007220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007224:	f7ff fff0 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007228:	4602      	mov	r2, r0
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	4904      	ldr	r1, [pc, #16]	; (8007248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007236:	5ccb      	ldrb	r3, [r1, r3]
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40021000 	.word	0x40021000
 8007248:	080168c4 	.word	0x080168c4

0800724c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007250:	f7ff ffda 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	0adb      	lsrs	r3, r3, #11
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4904      	ldr	r1, [pc, #16]	; (8007274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40021000 	.word	0x40021000
 8007274:	080168c4 	.word	0x080168c4

08007278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007284:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007290:	f7ff f9c4 	bl	800661c <HAL_PWREx_GetVoltageRange>
 8007294:	6178      	str	r0, [r7, #20]
 8007296:	e014      	b.n	80072c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007298:	4b25      	ldr	r3, [pc, #148]	; (8007330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	4a24      	ldr	r2, [pc, #144]	; (8007330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800729e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a2:	6593      	str	r3, [r2, #88]	; 0x58
 80072a4:	4b22      	ldr	r3, [pc, #136]	; (8007330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80072b0:	f7ff f9b4 	bl	800661c <HAL_PWREx_GetVoltageRange>
 80072b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80072b6:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c8:	d10b      	bne.n	80072e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d919      	bls.n	8007304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2ba0      	cmp	r3, #160	; 0xa0
 80072d4:	d902      	bls.n	80072dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80072d6:	2302      	movs	r3, #2
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	e013      	b.n	8007304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80072dc:	2301      	movs	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	e010      	b.n	8007304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b80      	cmp	r3, #128	; 0x80
 80072e6:	d902      	bls.n	80072ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80072e8:	2303      	movs	r3, #3
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	e00a      	b.n	8007304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b80      	cmp	r3, #128	; 0x80
 80072f2:	d102      	bne.n	80072fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80072f4:	2302      	movs	r3, #2
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	e004      	b.n	8007304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b70      	cmp	r3, #112	; 0x70
 80072fe:	d101      	bne.n	8007304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007300:	2301      	movs	r3, #1
 8007302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f023 0207 	bic.w	r2, r3, #7
 800730c:	4909      	ldr	r1, [pc, #36]	; (8007334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	429a      	cmp	r2, r3
 8007320:	d001      	beq.n	8007326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40021000 	.word	0x40021000
 8007334:	40022000 	.word	0x40022000

08007338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007340:	2300      	movs	r3, #0
 8007342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007344:	2300      	movs	r3, #0
 8007346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007350:	2b00      	cmp	r3, #0
 8007352:	d041      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800735c:	d02a      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800735e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007362:	d824      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007368:	d008      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800736a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800736e:	d81e      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007378:	d010      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800737a:	e018      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800737c:	4b86      	ldr	r3, [pc, #536]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4a85      	ldr	r2, [pc, #532]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007386:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007388:	e015      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3304      	adds	r3, #4
 800738e:	2100      	movs	r1, #0
 8007390:	4618      	mov	r0, r3
 8007392:	f001 f829 	bl	80083e8 <RCCEx_PLLSAI1_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800739a:	e00c      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3320      	adds	r3, #32
 80073a0:	2100      	movs	r1, #0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 f914 	bl	80085d0 <RCCEx_PLLSAI2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	74fb      	strb	r3, [r7, #19]
      break;
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80073b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b6:	7cfb      	ldrb	r3, [r7, #19]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10b      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073bc:	4b76      	ldr	r3, [pc, #472]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ca:	4973      	ldr	r1, [pc, #460]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80073d2:	e001      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	7cfb      	ldrb	r3, [r7, #19]
 80073d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d041      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073ec:	d02a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80073ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073f2:	d824      	bhi.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80073f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073f8:	d008      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073fe:	d81e      	bhi.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007408:	d010      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800740a:	e018      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800740c:	4b62      	ldr	r3, [pc, #392]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4a61      	ldr	r2, [pc, #388]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007416:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007418:	e015      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f000 ffe1 	bl	80083e8 <RCCEx_PLLSAI1_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800742a:	e00c      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3320      	adds	r3, #32
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f001 f8cc 	bl	80085d0 <RCCEx_PLLSAI2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800743c:	e003      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	74fb      	strb	r3, [r7, #19]
      break;
 8007442:	e000      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007446:	7cfb      	ldrb	r3, [r7, #19]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800744c:	4b52      	ldr	r3, [pc, #328]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800744e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007452:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745a:	494f      	ldr	r1, [pc, #316]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745c:	4313      	orrs	r3, r2
 800745e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007462:	e001      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	7cfb      	ldrb	r3, [r7, #19]
 8007466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80a0 	beq.w	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007476:	2300      	movs	r3, #0
 8007478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800747a:	4b47      	ldr	r3, [pc, #284]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800748a:	2300      	movs	r3, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007490:	4b41      	ldr	r3, [pc, #260]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007494:	4a40      	ldr	r2, [pc, #256]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800749a:	6593      	str	r3, [r2, #88]	; 0x58
 800749c:	4b3e      	ldr	r3, [pc, #248]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800749e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074a8:	2301      	movs	r3, #1
 80074aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ac:	4b3b      	ldr	r3, [pc, #236]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a3a      	ldr	r2, [pc, #232]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074b8:	f7fc fb9c 	bl	8003bf4 <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074be:	e009      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c0:	f7fc fb98 	bl	8003bf4 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d902      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	74fb      	strb	r3, [r7, #19]
        break;
 80074d2:	e005      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074d4:	4b31      	ldr	r3, [pc, #196]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0ef      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d15c      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074e6:	4b2c      	ldr	r3, [pc, #176]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01f      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	429a      	cmp	r2, r3
 8007502:	d019      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007510:	4b21      	ldr	r3, [pc, #132]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007516:	4a20      	ldr	r2, [pc, #128]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007520:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007530:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007542:	f7fc fb57 	bl	8003bf4 <HAL_GetTick>
 8007546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007548:	e00b      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800754a:	f7fc fb53 	bl	8003bf4 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f241 3288 	movw	r2, #5000	; 0x1388
 8007558:	4293      	cmp	r3, r2
 800755a:	d902      	bls.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	74fb      	strb	r3, [r7, #19]
            break;
 8007560:	e006      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0ec      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007570:	7cfb      	ldrb	r3, [r7, #19]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007586:	4904      	ldr	r1, [pc, #16]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800758e:	e009      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007590:	7cfb      	ldrb	r3, [r7, #19]
 8007592:	74bb      	strb	r3, [r7, #18]
 8007594:	e006      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007596:	bf00      	nop
 8007598:	40021000 	.word	0x40021000
 800759c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075a4:	7c7b      	ldrb	r3, [r7, #17]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d105      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075aa:	4b9e      	ldr	r3, [pc, #632]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	4a9d      	ldr	r2, [pc, #628]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075c2:	4b98      	ldr	r3, [pc, #608]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c8:	f023 0203 	bic.w	r2, r3, #3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	4994      	ldr	r1, [pc, #592]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075e4:	4b8f      	ldr	r3, [pc, #572]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	f023 020c 	bic.w	r2, r3, #12
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	498c      	ldr	r1, [pc, #560]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007606:	4b87      	ldr	r3, [pc, #540]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	4983      	ldr	r1, [pc, #524]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007628:	4b7e      	ldr	r3, [pc, #504]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	497b      	ldr	r1, [pc, #492]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800764a:	4b76      	ldr	r3, [pc, #472]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007658:	4972      	ldr	r1, [pc, #456]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800766c:	4b6d      	ldr	r3, [pc, #436]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767a:	496a      	ldr	r1, [pc, #424]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800768e:	4b65      	ldr	r3, [pc, #404]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769c:	4961      	ldr	r1, [pc, #388]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076b0:	4b5c      	ldr	r3, [pc, #368]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076be:	4959      	ldr	r1, [pc, #356]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076d2:	4b54      	ldr	r3, [pc, #336]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e0:	4950      	ldr	r1, [pc, #320]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076f4:	4b4b      	ldr	r3, [pc, #300]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	4948      	ldr	r1, [pc, #288]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007716:	4b43      	ldr	r3, [pc, #268]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007724:	493f      	ldr	r1, [pc, #252]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d028      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007738:	4b3a      	ldr	r3, [pc, #232]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007746:	4937      	ldr	r1, [pc, #220]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007756:	d106      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b32      	ldr	r3, [pc, #200]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a31      	ldr	r2, [pc, #196]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
 8007764:	e011      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800776e:	d10c      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	2101      	movs	r1, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fe36 	bl	80083e8 <RCCEx_PLLSAI1_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007780:	7cfb      	ldrb	r3, [r7, #19]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d028      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007796:	4b23      	ldr	r3, [pc, #140]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	491f      	ldr	r1, [pc, #124]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b4:	d106      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b6:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	4a1a      	ldr	r2, [pc, #104]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c0:	60d3      	str	r3, [r2, #12]
 80077c2:	e011      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3304      	adds	r3, #4
 80077d2:	2101      	movs	r1, #1
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fe07 	bl	80083e8 <RCCEx_PLLSAI1_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077de:	7cfb      	ldrb	r3, [r7, #19]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02b      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	4908      	ldr	r1, [pc, #32]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007804:	4313      	orrs	r3, r2
 8007806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007812:	d109      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007814:	4b03      	ldr	r3, [pc, #12]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4a02      	ldr	r2, [pc, #8]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800781a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781e:	60d3      	str	r3, [r2, #12]
 8007820:	e014      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800782c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007830:	d10c      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3304      	adds	r3, #4
 8007836:	2101      	movs	r1, #1
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fdd5 	bl	80083e8 <RCCEx_PLLSAI1_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007842:	7cfb      	ldrb	r3, [r7, #19]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007848:	7cfb      	ldrb	r3, [r7, #19]
 800784a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02f      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007858:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007866:	4928      	ldr	r1, [pc, #160]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007868:	4313      	orrs	r3, r2
 800786a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007876:	d10d      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	2102      	movs	r1, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fdb2 	bl	80083e8 <RCCEx_PLLSAI1_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007888:	7cfb      	ldrb	r3, [r7, #19]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d014      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800788e:	7cfb      	ldrb	r3, [r7, #19]
 8007890:	74bb      	strb	r3, [r7, #18]
 8007892:	e011      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3320      	adds	r3, #32
 80078a2:	2102      	movs	r1, #2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fe93 	bl	80085d0 <RCCEx_PLLSAI2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078ae:	7cfb      	ldrb	r3, [r7, #19]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80078b4:	7cfb      	ldrb	r3, [r7, #19]
 80078b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078d2:	490d      	ldr	r1, [pc, #52]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078e6:	4b08      	ldr	r3, [pc, #32]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f6:	4904      	ldr	r1, [pc, #16]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80078fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40021000 	.word	0x40021000

0800790c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800791e:	d13e      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007920:	4bb2      	ldr	r3, [pc, #712]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d028      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793a:	f200 8542 	bhi.w	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007944:	d005      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794c:	d00e      	beq.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800794e:	f000 bd38 	b.w	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007952:	4ba6      	ldr	r3, [pc, #664]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	f040 8532 	bne.w	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8007962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007966:	61fb      	str	r3, [r7, #28]
      break;
 8007968:	f000 bd2d 	b.w	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800796c:	4b9f      	ldr	r3, [pc, #636]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800796e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	f040 8527 	bne.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800797c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007980:	61fb      	str	r3, [r7, #28]
      break;
 8007982:	f000 bd22 	b.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007986:	4b99      	ldr	r3, [pc, #612]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007992:	f040 851c 	bne.w	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8007996:	4b96      	ldr	r3, [pc, #600]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007998:	61fb      	str	r3, [r7, #28]
      break;
 800799a:	f000 bd18 	b.w	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800799e:	4b93      	ldr	r3, [pc, #588]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d036      	beq.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d840      	bhi.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d003      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d020      	beq.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80079c0:	e039      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80079c2:	4b8a      	ldr	r3, [pc, #552]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d116      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80079ce:	4b87      	ldr	r3, [pc, #540]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80079da:	4b84      	ldr	r3, [pc, #528]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	e005      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80079e6:	4b81      	ldr	r3, [pc, #516]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	4a80      	ldr	r2, [pc, #512]	; (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80079f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80079fa:	e01f      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
      break;
 8007a00:	e01c      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a02:	4b7a      	ldr	r3, [pc, #488]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0e:	d102      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007a10:	4b79      	ldr	r3, [pc, #484]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a12:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007a14:	e012      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61bb      	str	r3, [r7, #24]
      break;
 8007a1a:	e00f      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a1c:	4b73      	ldr	r3, [pc, #460]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a28:	d102      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007a2a:	4b74      	ldr	r3, [pc, #464]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007a2e:	e005      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61bb      	str	r3, [r7, #24]
      break;
 8007a34:	e002      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61bb      	str	r3, [r7, #24]
      break;
 8007a3a:	bf00      	nop
    }

    switch(PeriphClk)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a42:	f000 80dd 	beq.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a4c:	f200 84c1 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a56:	f000 80d3 	beq.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a60:	f200 84b7 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6a:	f000 835f 	beq.w	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a74:	f200 84ad 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7e:	f000 847e 	beq.w	800837e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a88:	f200 84a3 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a92:	f000 82cd 	beq.w	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a9c:	f200 8499 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa6:	f000 80ab 	beq.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab0:	f200 848f 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aba:	f000 8090 	beq.w	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac4:	f200 8485 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ace:	d07f      	beq.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad6:	f200 847c 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae0:	f000 8403 	beq.w	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aea:	f200 8472 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af4:	f000 83af 	beq.w	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afe:	f200 8468 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b08:	f000 8379 	beq.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b12:	f200 845e 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	f000 8344 	beq.w	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	f200 8456 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d84b      	bhi.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 844f 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2b1f      	cmp	r3, #31
 8007b3a:	f200 844a 	bhi.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b3e:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007d2d 	.word	0x08007d2d
 8007b48:	08007d9b 	.word	0x08007d9b
 8007b4c:	080083d3 	.word	0x080083d3
 8007b50:	08007e2f 	.word	0x08007e2f
 8007b54:	080083d3 	.word	0x080083d3
 8007b58:	080083d3 	.word	0x080083d3
 8007b5c:	080083d3 	.word	0x080083d3
 8007b60:	08007eb5 	.word	0x08007eb5
 8007b64:	080083d3 	.word	0x080083d3
 8007b68:	080083d3 	.word	0x080083d3
 8007b6c:	080083d3 	.word	0x080083d3
 8007b70:	080083d3 	.word	0x080083d3
 8007b74:	080083d3 	.word	0x080083d3
 8007b78:	080083d3 	.word	0x080083d3
 8007b7c:	080083d3 	.word	0x080083d3
 8007b80:	08007f2d 	.word	0x08007f2d
 8007b84:	080083d3 	.word	0x080083d3
 8007b88:	080083d3 	.word	0x080083d3
 8007b8c:	080083d3 	.word	0x080083d3
 8007b90:	080083d3 	.word	0x080083d3
 8007b94:	080083d3 	.word	0x080083d3
 8007b98:	080083d3 	.word	0x080083d3
 8007b9c:	080083d3 	.word	0x080083d3
 8007ba0:	080083d3 	.word	0x080083d3
 8007ba4:	080083d3 	.word	0x080083d3
 8007ba8:	080083d3 	.word	0x080083d3
 8007bac:	080083d3 	.word	0x080083d3
 8007bb0:	080083d3 	.word	0x080083d3
 8007bb4:	080083d3 	.word	0x080083d3
 8007bb8:	080083d3 	.word	0x080083d3
 8007bbc:	080083d3 	.word	0x080083d3
 8007bc0:	08007faf 	.word	0x08007faf
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b40      	cmp	r3, #64	; 0x40
 8007bc8:	f000 82c1 	beq.w	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007bcc:	f000 bc01 	b.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007bd6:	f000 fdd9 	bl	800878c <RCCEx_GetSAIxPeriphCLKFreq>
 8007bda:	61f8      	str	r0, [r7, #28]
      break;
 8007bdc:	e3fa      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007bde:	69b9      	ldr	r1, [r7, #24]
 8007be0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007be4:	f000 fdd2 	bl	800878c <RCCEx_GetSAIxPeriphCLKFreq>
 8007be8:	61f8      	str	r0, [r7, #28]
      break;
 8007bea:	e3f3      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	0005b8d8 	.word	0x0005b8d8
 8007bf4:	080168cc 	.word	0x080168cc
 8007bf8:	00f42400 	.word	0x00f42400
 8007bfc:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007c00:	4ba9      	ldr	r3, [pc, #676]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c06:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c12:	d00c      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c1a:	d87f      	bhi.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c22:	d04e      	beq.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c2a:	d01d      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8007c2c:	e076      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c2e:	4b9e      	ldr	r3, [pc, #632]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d172      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c3a:	4b9b      	ldr	r3, [pc, #620]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8007c46:	4b98      	ldr	r3, [pc, #608]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	091b      	lsrs	r3, r3, #4
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	e005      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8007c52:	4b95      	ldr	r3, [pc, #596]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	4a93      	ldr	r2, [pc, #588]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c64:	61fb      	str	r3, [r7, #28]
          break;
 8007c66:	e05b      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c68:	4b8f      	ldr	r3, [pc, #572]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c74:	d156      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007c76:	4b8c      	ldr	r3, [pc, #560]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c82:	d14f      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007c84:	4b88      	ldr	r3, [pc, #544]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	0a1b      	lsrs	r3, r3, #8
 8007c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c8e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	fb03 f202 	mul.w	r2, r3, r2
 8007c98:	4b83      	ldr	r3, [pc, #524]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007caa:	4b7f      	ldr	r3, [pc, #508]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	0d5b      	lsrs	r3, r3, #21
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	61fb      	str	r3, [r7, #28]
          break;
 8007cc0:	e030      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007cc2:	4b79      	ldr	r3, [pc, #484]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cce:	d12b      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007cd0:	4b75      	ldr	r3, [pc, #468]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cdc:	d124      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007cde:	4b72      	ldr	r3, [pc, #456]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	0a1b      	lsrs	r3, r3, #8
 8007ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	fb03 f202 	mul.w	r2, r3, r2
 8007cf2:	4b6d      	ldr	r3, [pc, #436]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	091b      	lsrs	r3, r3, #4
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d02:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007d04:	4b68      	ldr	r3, [pc, #416]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	0d5b      	lsrs	r3, r3, #21
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	61fb      	str	r3, [r7, #28]
          break;
 8007d1a:	e005      	b.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8007d1c:	bf00      	nop
 8007d1e:	e359      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d20:	bf00      	nop
 8007d22:	e357      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d24:	bf00      	nop
 8007d26:	e355      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d28:	bf00      	nop
        break;
 8007d2a:	e353      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007d2c:	4b5e      	ldr	r3, [pc, #376]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d827      	bhi.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d5d 	.word	0x08007d5d
 8007d4c:	08007d65 	.word	0x08007d65
 8007d50:	08007d79 	.word	0x08007d79
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7ff fa7a 	bl	800724c <HAL_RCC_GetPCLK2Freq>
 8007d58:	61f8      	str	r0, [r7, #28]
          break;
 8007d5a:	e01d      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d5c:	f7ff f9c8 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007d60:	61f8      	str	r0, [r7, #28]
          break;
 8007d62:	e019      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d64:	4b50      	ldr	r3, [pc, #320]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d70:	d10f      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8007d72:	4b4f      	ldr	r3, [pc, #316]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007d74:	61fb      	str	r3, [r7, #28]
          break;
 8007d76:	e00c      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d78:	4b4b      	ldr	r3, [pc, #300]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d107      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8007d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8a:	61fb      	str	r3, [r7, #28]
          break;
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8007d8e:	bf00      	nop
 8007d90:	e320      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d92:	bf00      	nop
 8007d94:	e31e      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d96:	bf00      	nop
        break;
 8007d98:	e31c      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007d9a:	4b43      	ldr	r3, [pc, #268]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da0:	f003 030c 	and.w	r3, r3, #12
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b0c      	cmp	r3, #12
 8007daa:	d83a      	bhi.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007de9 	.word	0x08007de9
 8007db8:	08007e23 	.word	0x08007e23
 8007dbc:	08007e23 	.word	0x08007e23
 8007dc0:	08007e23 	.word	0x08007e23
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	08007e23 	.word	0x08007e23
 8007dcc:	08007e23 	.word	0x08007e23
 8007dd0:	08007e23 	.word	0x08007e23
 8007dd4:	08007df9 	.word	0x08007df9
 8007dd8:	08007e23 	.word	0x08007e23
 8007ddc:	08007e23 	.word	0x08007e23
 8007de0:	08007e23 	.word	0x08007e23
 8007de4:	08007e0d 	.word	0x08007e0d
          frequency = HAL_RCC_GetPCLK1Freq();
 8007de8:	f7ff fa1a 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8007dec:	61f8      	str	r0, [r7, #28]
          break;
 8007dee:	e01d      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8007df0:	f7ff f97e 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007df4:	61f8      	str	r0, [r7, #28]
          break;
 8007df6:	e019      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007df8:	4b2b      	ldr	r3, [pc, #172]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e04:	d10f      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8007e06:	4b2a      	ldr	r3, [pc, #168]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007e08:	61fb      	str	r3, [r7, #28]
          break;
 8007e0a:	e00c      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e0c:	4b26      	ldr	r3, [pc, #152]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d107      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1e:	61fb      	str	r3, [r7, #28]
          break;
 8007e20:	e003      	b.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8007e22:	bf00      	nop
 8007e24:	e2d6      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e26:	bf00      	nop
 8007e28:	e2d4      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e2a:	bf00      	nop
        break;
 8007e2c:	e2d2      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007e2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b30      	cmp	r3, #48	; 0x30
 8007e3e:	d021      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	2b30      	cmp	r3, #48	; 0x30
 8007e44:	d829      	bhi.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d011      	beq.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d823      	bhi.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b10      	cmp	r3, #16
 8007e5c:	d004      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8007e5e:	e01c      	b.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e60:	f7ff f9de 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8007e64:	61f8      	str	r0, [r7, #28]
          break;
 8007e66:	e01d      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e68:	f7ff f942 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007e6c:	61f8      	str	r0, [r7, #28]
          break;
 8007e6e:	e019      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e70:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7c:	d10f      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8007e7e:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007e80:	61fb      	str	r3, [r7, #28]
          break;
 8007e82:	e00c      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e84:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d107      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8007e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e96:	61fb      	str	r3, [r7, #28]
          break;
 8007e98:	e003      	b.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8007e9a:	bf00      	nop
 8007e9c:	e29a      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e9e:	bf00      	nop
 8007ea0:	e298      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007ea2:	bf00      	nop
        break;
 8007ea4:	e296      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007ea6:	bf00      	nop
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	080168cc 	.word	0x080168cc
 8007eb0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007eb4:	4b9b      	ldr	r3, [pc, #620]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec4:	d021      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2bc0      	cmp	r3, #192	; 0xc0
 8007eca:	d829      	bhi.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d011      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d823      	bhi.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d004      	beq.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8007ee4:	e01c      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ee6:	f7ff f99b 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8007eea:	61f8      	str	r0, [r7, #28]
          break;
 8007eec:	e01d      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007eee:	f7ff f8ff 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007ef2:	61f8      	str	r0, [r7, #28]
          break;
 8007ef4:	e019      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef6:	4b8b      	ldr	r3, [pc, #556]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f02:	d10f      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8007f04:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007f06:	61fb      	str	r3, [r7, #28]
          break;
 8007f08:	e00c      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f0a:	4b86      	ldr	r3, [pc, #536]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d107      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8007f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1c:	61fb      	str	r3, [r7, #28]
          break;
 8007f1e:	e003      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8007f20:	bf00      	nop
 8007f22:	e257      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007f24:	bf00      	nop
 8007f26:	e255      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007f28:	bf00      	nop
        break;
 8007f2a:	e253      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007f2c:	4b7d      	ldr	r3, [pc, #500]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3e:	d025      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f46:	d82c      	bhi.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f4e:	d013      	beq.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f56:	d824      	bhi.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f64:	d004      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8007f66:	e01c      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f68:	f7ff f95a 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8007f6c:	61f8      	str	r0, [r7, #28]
          break;
 8007f6e:	e01d      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f70:	f7ff f8be 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007f74:	61f8      	str	r0, [r7, #28]
          break;
 8007f76:	e019      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f78:	4b6a      	ldr	r3, [pc, #424]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f84:	d10f      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8007f86:	4b68      	ldr	r3, [pc, #416]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007f88:	61fb      	str	r3, [r7, #28]
          break;
 8007f8a:	e00c      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f8c:	4b65      	ldr	r3, [pc, #404]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d107      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	61fb      	str	r3, [r7, #28]
          break;
 8007fa0:	e003      	b.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8007fa2:	bf00      	nop
 8007fa4:	e216      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007fa6:	bf00      	nop
 8007fa8:	e214      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007faa:	bf00      	nop
        break;
 8007fac:	e212      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007fae:	4b5d      	ldr	r3, [pc, #372]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fb8:	613b      	str	r3, [r7, #16]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fc0:	d025      	beq.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fc8:	d82c      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd0:	d013      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd8:	d824      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fe6:	d004      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8007fe8:	e01c      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fea:	f7ff f919 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8007fee:	61f8      	str	r0, [r7, #28]
          break;
 8007ff0:	e01d      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ff2:	f7ff f87d 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007ff6:	61f8      	str	r0, [r7, #28]
          break;
 8007ff8:	e019      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ffa:	4b4a      	ldr	r3, [pc, #296]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008006:	d10f      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008008:	4b47      	ldr	r3, [pc, #284]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800800a:	61fb      	str	r3, [r7, #28]
          break;
 800800c:	e00c      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800800e:	4b45      	ldr	r3, [pc, #276]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b02      	cmp	r3, #2
 800801a:	d107      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800801c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008020:	61fb      	str	r3, [r7, #28]
          break;
 8008022:	e003      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8008024:	bf00      	nop
 8008026:	e1d5      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008028:	bf00      	nop
 800802a:	e1d3      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800802c:	bf00      	nop
        break;
 800802e:	e1d1      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008030:	4b3c      	ldr	r3, [pc, #240]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008042:	d00c      	beq.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800804a:	d864      	bhi.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008052:	d008      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805a:	d030      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800805c:	e05b      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800805e:	f7ff f847 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8008062:	61f8      	str	r0, [r7, #28]
          break;
 8008064:	e05c      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008072:	d152      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8008074:	4b2b      	ldr	r3, [pc, #172]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d04c      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008080:	4b28      	ldr	r3, [pc, #160]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	fb03 f202 	mul.w	r2, r3, r2
 8008094:	4b23      	ldr	r3, [pc, #140]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	3301      	adds	r3, #1
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80080a6:	4b1f      	ldr	r3, [pc, #124]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	0e5b      	lsrs	r3, r3, #25
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	3301      	adds	r3, #1
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ba:	61fb      	str	r3, [r7, #28]
          break;
 80080bc:	e02d      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80080be:	4b19      	ldr	r3, [pc, #100]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ca:	d128      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80080cc:	4b15      	ldr	r3, [pc, #84]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d022      	beq.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80080d8:	4b12      	ldr	r3, [pc, #72]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	0a1b      	lsrs	r3, r3, #8
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	fb03 f202 	mul.w	r2, r3, r2
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	091b      	lsrs	r3, r3, #4
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	3301      	adds	r3, #1
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	0e5b      	lsrs	r3, r3, #25
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	3301      	adds	r3, #1
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	61fb      	str	r3, [r7, #28]
          break;
 8008114:	e003      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008116:	bf00      	nop
 8008118:	e15c      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800811a:	bf00      	nop
 800811c:	e15a      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800811e:	bf00      	nop
        break;
 8008120:	e158      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008122:	bf00      	nop
 8008124:	40021000 	.word	0x40021000
 8008128:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800812c:	4b9d      	ldr	r3, [pc, #628]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008136:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800813e:	f7ff f885 	bl	800724c <HAL_RCC_GetPCLK2Freq>
 8008142:	61f8      	str	r0, [r7, #28]
        break;
 8008144:	e146      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008146:	f7fe ffd3 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 800814a:	61f8      	str	r0, [r7, #28]
        break;
 800814c:	e142      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800814e:	4b95      	ldr	r3, [pc, #596]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008154:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008160:	d013      	beq.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008168:	d819      	bhi.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	d004      	beq.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8008178:	e011      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800817a:	f7ff f851 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 800817e:	61f8      	str	r0, [r7, #28]
          break;
 8008180:	e010      	b.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8008182:	f7fe ffb5 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8008186:	61f8      	str	r0, [r7, #28]
          break;
 8008188:	e00c      	b.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800818a:	4b86      	ldr	r3, [pc, #536]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008196:	d104      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8008198:	4b83      	ldr	r3, [pc, #524]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800819a:	61fb      	str	r3, [r7, #28]
          break;
 800819c:	e001      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800819e:	bf00      	nop
 80081a0:	e118      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80081a2:	bf00      	nop
        break;
 80081a4:	e116      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80081a6:	4b7f      	ldr	r3, [pc, #508]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80081a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081b0:	613b      	str	r3, [r7, #16]
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b8:	d013      	beq.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c0:	d819      	bhi.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ce:	d004      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80081d0:	e011      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081d2:	f7ff f825 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 80081d6:	61f8      	str	r0, [r7, #28]
          break;
 80081d8:	e010      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80081da:	f7fe ff89 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 80081de:	61f8      	str	r0, [r7, #28]
          break;
 80081e0:	e00c      	b.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081e2:	4b70      	ldr	r3, [pc, #448]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ee:	d104      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80081f0:	4b6d      	ldr	r3, [pc, #436]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80081f2:	61fb      	str	r3, [r7, #28]
          break;
 80081f4:	e001      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80081f6:	bf00      	nop
 80081f8:	e0ec      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80081fa:	bf00      	nop
        break;
 80081fc:	e0ea      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80081fe:	4b69      	ldr	r3, [pc, #420]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008210:	d013      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008218:	d819      	bhi.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008226:	d004      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8008228:	e011      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800822a:	f7fe fff9 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 800822e:	61f8      	str	r0, [r7, #28]
          break;
 8008230:	e010      	b.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8008232:	f7fe ff5d 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8008236:	61f8      	str	r0, [r7, #28]
          break;
 8008238:	e00c      	b.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800823a:	4b5a      	ldr	r3, [pc, #360]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008246:	d104      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8008248:	4b57      	ldr	r3, [pc, #348]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800824a:	61fb      	str	r3, [r7, #28]
          break;
 800824c:	e001      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800824e:	bf00      	nop
 8008250:	e0c0      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008252:	bf00      	nop
        break;
 8008254:	e0be      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008256:	4b53      	ldr	r3, [pc, #332]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008268:	d02c      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008270:	d833      	bhi.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008278:	d01a      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008280:	d82b      	bhi.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800828e:	d004      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8008290:	e023      	b.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008292:	f7fe ffc5 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8008296:	61f8      	str	r0, [r7, #28]
          break;
 8008298:	e026      	b.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800829a:	4b42      	ldr	r3, [pc, #264]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800829c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d11a      	bne.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80082a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80082ac:	61fb      	str	r3, [r7, #28]
          break;
 80082ae:	e016      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082b0:	4b3c      	ldr	r3, [pc, #240]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082bc:	d111      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80082be:	4b3a      	ldr	r3, [pc, #232]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80082c0:	61fb      	str	r3, [r7, #28]
          break;
 80082c2:	e00e      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082c4:	4b37      	ldr	r3, [pc, #220]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80082c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d109      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80082d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d6:	61fb      	str	r3, [r7, #28]
          break;
 80082d8:	e005      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80082da:	bf00      	nop
 80082dc:	e07a      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80082de:	bf00      	nop
 80082e0:	e078      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80082e2:	bf00      	nop
 80082e4:	e076      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80082e6:	bf00      	nop
        break;
 80082e8:	e074      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80082ea:	4b2e      	ldr	r3, [pc, #184]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80082ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082fc:	d02c      	beq.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008304:	d833      	bhi.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800830c:	d01a      	beq.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008314:	d82b      	bhi.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008322:	d004      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8008324:	e023      	b.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008326:	f7fe ff7b 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 800832a:	61f8      	str	r0, [r7, #28]
          break;
 800832c:	e026      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800832e:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b02      	cmp	r3, #2
 800833a:	d11a      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800833c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008340:	61fb      	str	r3, [r7, #28]
          break;
 8008342:	e016      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008344:	4b17      	ldr	r3, [pc, #92]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008350:	d111      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008354:	61fb      	str	r3, [r7, #28]
          break;
 8008356:	e00e      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008358:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800835a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d109      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8008366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836a:	61fb      	str	r3, [r7, #28]
          break;
 800836c:	e005      	b.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800836e:	bf00      	nop
 8008370:	e030      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008372:	bf00      	nop
 8008374:	e02e      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008376:	bf00      	nop
 8008378:	e02c      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800837a:	bf00      	nop
        break;
 800837c:	e02a      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008396:	d009      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8008398:	e012      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800839a:	f7fe ff41 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 800839e:	61f8      	str	r0, [r7, #28]
          break;
 80083a0:	e00e      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80083a2:	bf00      	nop
 80083a4:	40021000 	.word	0x40021000
 80083a8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083ac:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b8:	d101      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80083bc:	61fb      	str	r3, [r7, #28]
          break;
 80083be:	bf00      	nop
        break;
 80083c0:	e008      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083c2:	bf00      	nop
 80083c4:	e006      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083c6:	bf00      	nop
 80083c8:	e004      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083ca:	bf00      	nop
 80083cc:	e002      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083ce:	bf00      	nop
 80083d0:	e000      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083d2:	bf00      	nop
    }
  }

  return(frequency);
 80083d4:	69fb      	ldr	r3, [r7, #28]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3720      	adds	r7, #32
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	40021000 	.word	0x40021000
 80083e4:	00f42400 	.word	0x00f42400

080083e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80083f6:	4b75      	ldr	r3, [pc, #468]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d018      	beq.n	8008434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008402:	4b72      	ldr	r3, [pc, #456]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0203 	and.w	r2, r3, #3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d10d      	bne.n	800842e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
       ||
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800841a:	4b6c      	ldr	r3, [pc, #432]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	091b      	lsrs	r3, r3, #4
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
       ||
 800842a:	429a      	cmp	r2, r3
 800842c:	d047      	beq.n	80084be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	e044      	b.n	80084be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d018      	beq.n	800846e <RCCEx_PLLSAI1_Config+0x86>
 800843c:	2b03      	cmp	r3, #3
 800843e:	d825      	bhi.n	800848c <RCCEx_PLLSAI1_Config+0xa4>
 8008440:	2b01      	cmp	r3, #1
 8008442:	d002      	beq.n	800844a <RCCEx_PLLSAI1_Config+0x62>
 8008444:	2b02      	cmp	r3, #2
 8008446:	d009      	beq.n	800845c <RCCEx_PLLSAI1_Config+0x74>
 8008448:	e020      	b.n	800848c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800844a:	4b60      	ldr	r3, [pc, #384]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d11d      	bne.n	8008492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800845a:	e01a      	b.n	8008492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800845c:	4b5b      	ldr	r3, [pc, #364]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008464:	2b00      	cmp	r3, #0
 8008466:	d116      	bne.n	8008496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800846c:	e013      	b.n	8008496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800846e:	4b57      	ldr	r3, [pc, #348]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10f      	bne.n	800849a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800847a:	4b54      	ldr	r3, [pc, #336]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800848a:	e006      	b.n	800849a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
      break;
 8008490:	e004      	b.n	800849c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008492:	bf00      	nop
 8008494:	e002      	b.n	800849c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008496:	bf00      	nop
 8008498:	e000      	b.n	800849c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800849a:	bf00      	nop
    }

    if(status == HAL_OK)
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10d      	bne.n	80084be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80084a2:	4b4a      	ldr	r3, [pc, #296]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	430b      	orrs	r3, r1
 80084b8:	4944      	ldr	r1, [pc, #272]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d17d      	bne.n	80085c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084c4:	4b41      	ldr	r3, [pc, #260]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a40      	ldr	r2, [pc, #256]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80084ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d0:	f7fb fb90 	bl	8003bf4 <HAL_GetTick>
 80084d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084d6:	e009      	b.n	80084ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084d8:	f7fb fb8c 	bl	8003bf4 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d902      	bls.n	80084ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	73fb      	strb	r3, [r7, #15]
        break;
 80084ea:	e005      	b.n	80084f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084ec:	4b37      	ldr	r3, [pc, #220]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1ef      	bne.n	80084d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d160      	bne.n	80085c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d111      	bne.n	8008528 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008504:	4b31      	ldr	r3, [pc, #196]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800850c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6892      	ldr	r2, [r2, #8]
 8008514:	0211      	lsls	r1, r2, #8
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	68d2      	ldr	r2, [r2, #12]
 800851a:	0912      	lsrs	r2, r2, #4
 800851c:	0452      	lsls	r2, r2, #17
 800851e:	430a      	orrs	r2, r1
 8008520:	492a      	ldr	r1, [pc, #168]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008522:	4313      	orrs	r3, r2
 8008524:	610b      	str	r3, [r1, #16]
 8008526:	e027      	b.n	8008578 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d112      	bne.n	8008554 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800852e:	4b27      	ldr	r3, [pc, #156]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008536:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6892      	ldr	r2, [r2, #8]
 800853e:	0211      	lsls	r1, r2, #8
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6912      	ldr	r2, [r2, #16]
 8008544:	0852      	lsrs	r2, r2, #1
 8008546:	3a01      	subs	r2, #1
 8008548:	0552      	lsls	r2, r2, #21
 800854a:	430a      	orrs	r2, r1
 800854c:	491f      	ldr	r1, [pc, #124]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800854e:	4313      	orrs	r3, r2
 8008550:	610b      	str	r3, [r1, #16]
 8008552:	e011      	b.n	8008578 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008554:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800855c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6892      	ldr	r2, [r2, #8]
 8008564:	0211      	lsls	r1, r2, #8
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6952      	ldr	r2, [r2, #20]
 800856a:	0852      	lsrs	r2, r2, #1
 800856c:	3a01      	subs	r2, #1
 800856e:	0652      	lsls	r2, r2, #25
 8008570:	430a      	orrs	r2, r1
 8008572:	4916      	ldr	r1, [pc, #88]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008574:	4313      	orrs	r3, r2
 8008576:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008578:	4b14      	ldr	r3, [pc, #80]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a13      	ldr	r2, [pc, #76]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800857e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008582:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008584:	f7fb fb36 	bl	8003bf4 <HAL_GetTick>
 8008588:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800858a:	e009      	b.n	80085a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800858c:	f7fb fb32 	bl	8003bf4 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d902      	bls.n	80085a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	73fb      	strb	r3, [r7, #15]
          break;
 800859e:	e005      	b.n	80085ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0ef      	beq.n	800858c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085b2:	4b06      	ldr	r3, [pc, #24]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	4904      	ldr	r1, [pc, #16]	; (80085cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40021000 	.word	0x40021000

080085d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085de:	4b6a      	ldr	r3, [pc, #424]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d018      	beq.n	800861c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80085ea:	4b67      	ldr	r3, [pc, #412]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f003 0203 	and.w	r2, r3, #3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d10d      	bne.n	8008616 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
       ||
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008602:	4b61      	ldr	r3, [pc, #388]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	091b      	lsrs	r3, r3, #4
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
       ||
 8008612:	429a      	cmp	r2, r3
 8008614:	d047      	beq.n	80086a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	e044      	b.n	80086a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b03      	cmp	r3, #3
 8008622:	d018      	beq.n	8008656 <RCCEx_PLLSAI2_Config+0x86>
 8008624:	2b03      	cmp	r3, #3
 8008626:	d825      	bhi.n	8008674 <RCCEx_PLLSAI2_Config+0xa4>
 8008628:	2b01      	cmp	r3, #1
 800862a:	d002      	beq.n	8008632 <RCCEx_PLLSAI2_Config+0x62>
 800862c:	2b02      	cmp	r3, #2
 800862e:	d009      	beq.n	8008644 <RCCEx_PLLSAI2_Config+0x74>
 8008630:	e020      	b.n	8008674 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008632:	4b55      	ldr	r3, [pc, #340]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d11d      	bne.n	800867a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008642:	e01a      	b.n	800867a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008644:	4b50      	ldr	r3, [pc, #320]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800864c:	2b00      	cmp	r3, #0
 800864e:	d116      	bne.n	800867e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008654:	e013      	b.n	800867e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008656:	4b4c      	ldr	r3, [pc, #304]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10f      	bne.n	8008682 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008662:	4b49      	ldr	r3, [pc, #292]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d109      	bne.n	8008682 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008672:	e006      	b.n	8008682 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
      break;
 8008678:	e004      	b.n	8008684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800867a:	bf00      	nop
 800867c:	e002      	b.n	8008684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800867e:	bf00      	nop
 8008680:	e000      	b.n	8008684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008682:	bf00      	nop
    }

    if(status == HAL_OK)
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10d      	bne.n	80086a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800868a:	4b3f      	ldr	r3, [pc, #252]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6819      	ldr	r1, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	3b01      	subs	r3, #1
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	430b      	orrs	r3, r1
 80086a0:	4939      	ldr	r1, [pc, #228]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d167      	bne.n	800877c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80086ac:	4b36      	ldr	r3, [pc, #216]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a35      	ldr	r2, [pc, #212]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b8:	f7fb fa9c 	bl	8003bf4 <HAL_GetTick>
 80086bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086be:	e009      	b.n	80086d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086c0:	f7fb fa98 	bl	8003bf4 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d902      	bls.n	80086d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	73fb      	strb	r3, [r7, #15]
        break;
 80086d2:	e005      	b.n	80086e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086d4:	4b2c      	ldr	r3, [pc, #176]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1ef      	bne.n	80086c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d14a      	bne.n	800877c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d111      	bne.n	8008710 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086ec:	4b26      	ldr	r3, [pc, #152]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80086f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6892      	ldr	r2, [r2, #8]
 80086fc:	0211      	lsls	r1, r2, #8
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68d2      	ldr	r2, [r2, #12]
 8008702:	0912      	lsrs	r2, r2, #4
 8008704:	0452      	lsls	r2, r2, #17
 8008706:	430a      	orrs	r2, r1
 8008708:	491f      	ldr	r1, [pc, #124]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800870a:	4313      	orrs	r3, r2
 800870c:	614b      	str	r3, [r1, #20]
 800870e:	e011      	b.n	8008734 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008710:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008718:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6892      	ldr	r2, [r2, #8]
 8008720:	0211      	lsls	r1, r2, #8
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6912      	ldr	r2, [r2, #16]
 8008726:	0852      	lsrs	r2, r2, #1
 8008728:	3a01      	subs	r2, #1
 800872a:	0652      	lsls	r2, r2, #25
 800872c:	430a      	orrs	r2, r1
 800872e:	4916      	ldr	r1, [pc, #88]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008730:	4313      	orrs	r3, r2
 8008732:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008734:	4b14      	ldr	r3, [pc, #80]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800873a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008740:	f7fb fa58 	bl	8003bf4 <HAL_GetTick>
 8008744:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008746:	e009      	b.n	800875c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008748:	f7fb fa54 	bl	8003bf4 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d902      	bls.n	800875c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	73fb      	strb	r3, [r7, #15]
          break;
 800875a:	e005      	b.n	8008768 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800875c:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0ef      	beq.n	8008748 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008770:	695a      	ldr	r2, [r3, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	4904      	ldr	r1, [pc, #16]	; (8008788 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008778:	4313      	orrs	r3, r2
 800877a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40021000 	.word	0x40021000

0800878c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800878c:	b480      	push	{r7}
 800878e:	b089      	sub	sp, #36	; 0x24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a8:	d10c      	bne.n	80087c4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80087aa:	4b6e      	ldr	r3, [pc, #440]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80087b4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087bc:	d112      	bne.n	80087e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80087be:	4b6a      	ldr	r3, [pc, #424]	; (8008968 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80087c0:	61fb      	str	r3, [r7, #28]
 80087c2:	e00f      	b.n	80087e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ca:	d10b      	bne.n	80087e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80087cc:	4b65      	ldr	r3, [pc, #404]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80087d6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087de:	d101      	bne.n	80087e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80087e0:	4b61      	ldr	r3, [pc, #388]	; (8008968 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80087e2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f040 80b4 	bne.w	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087f6:	d003      	beq.n	8008800 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087fe:	d135      	bne.n	800886c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008800:	4b58      	ldr	r3, [pc, #352]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880c:	f040 80a1 	bne.w	8008952 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008810:	4b54      	ldr	r3, [pc, #336]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 809a 	beq.w	8008952 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800881e:	4b51      	ldr	r3, [pc, #324]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	091b      	lsrs	r3, r3, #4
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	3301      	adds	r3, #1
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008832:	4b4c      	ldr	r3, [pc, #304]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800883c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008844:	4b47      	ldr	r3, [pc, #284]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8008850:	2311      	movs	r3, #17
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	e001      	b.n	800885a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8008856:	2307      	movs	r3, #7
 8008858:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	fb03 f202 	mul.w	r2, r3, r2
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800886a:	e072      	b.n	8008952 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d133      	bne.n	80088da <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008872:	4b3c      	ldr	r3, [pc, #240]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800887a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800887e:	d169      	bne.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008880:	4b38      	ldr	r3, [pc, #224]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d063      	beq.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800888c:	4b35      	ldr	r3, [pc, #212]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	091b      	lsrs	r3, r3, #4
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	3301      	adds	r3, #1
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	fbb2 f3f3 	udiv	r3, r2, r3
 800889e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80088a0:	4b30      	ldr	r3, [pc, #192]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088aa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80088b2:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80088be:	2311      	movs	r3, #17
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	e001      	b.n	80088c8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80088c4:	2307      	movs	r3, #7
 80088c6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	fb03 f202 	mul.w	r2, r3, r2
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	e03c      	b.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088e0:	d003      	beq.n	80088ea <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088e8:	d134      	bne.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80088ea:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f6:	d12d      	bne.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80088f8:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d027      	beq.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008904:	4b17      	ldr	r3, [pc, #92]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	091b      	lsrs	r3, r3, #4
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	3301      	adds	r3, #1
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	fbb2 f3f3 	udiv	r3, r2, r3
 8008916:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008918:	4b12      	ldr	r3, [pc, #72]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	0a1b      	lsrs	r3, r3, #8
 800891e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008922:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10a      	bne.n	8008940 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800892a:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8008936:	2311      	movs	r3, #17
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	e001      	b.n	8008940 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800893c:	2307      	movs	r3, #7
 800893e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	fb03 f202 	mul.w	r2, r3, r2
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	fbb2 f3f3 	udiv	r3, r2, r3
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	e000      	b.n	8008954 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008952:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008954:	69fb      	ldr	r3, [r7, #28]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3724      	adds	r7, #36	; 0x24
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	40021000 	.word	0x40021000
 8008968:	001fff68 	.word	0x001fff68

0800896c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d079      	beq.n	8008a72 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fa fe5e 	bl	8003654 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b10      	cmp	r3, #16
 80089ac:	d058      	beq.n	8008a60 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	22ca      	movs	r2, #202	; 0xca
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2253      	movs	r2, #83	; 0x53
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f9a4 	bl	8008d0c <RTC_EnterInitMode>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d127      	bne.n	8008a1e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6899      	ldr	r1, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	68d2      	ldr	r2, [r2, #12]
 8008a08:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6919      	ldr	r1, [r3, #16]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	041a      	lsls	r2, r3, #16
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f9a8 	bl	8008d74 <RTC_ExitInitMode>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d113      	bne.n	8008a56 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0203 	bic.w	r2, r2, #3
 8008a3c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	22ff      	movs	r2, #255	; 0xff
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a5e:	e001      	b.n	8008a64 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d103      	bne.n	8008a72 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <HAL_RTC_SetTime+0x1a>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e08b      	b.n	8008bae <HAL_RTC_SetTime+0x132>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	22ca      	movs	r2, #202	; 0xca
 8008aac:	625a      	str	r2, [r3, #36]	; 0x24
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2253      	movs	r2, #83	; 0x53
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f928 	bl	8008d0c <RTC_EnterInitMode>
 8008abc:	4603      	mov	r3, r0
 8008abe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008ac0:	7cfb      	ldrb	r3, [r7, #19]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d163      	bne.n	8008b8e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d126      	bne.n	8008b1a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2200      	movs	r2, #0
 8008ade:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 f983 	bl	8008df0 <RTC_ByteToBcd2>
 8008aea:	4603      	mov	r3, r0
 8008aec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f97c 	bl	8008df0 <RTC_ByteToBcd2>
 8008af8:	4603      	mov	r3, r0
 8008afa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008afc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	789b      	ldrb	r3, [r3, #2]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 f974 	bl	8008df0 <RTC_ByteToBcd2>
 8008b08:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b0a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	78db      	ldrb	r3, [r3, #3]
 8008b12:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e018      	b.n	8008b4c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b3a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b40:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	78db      	ldrb	r3, [r3, #3]
 8008b46:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b5a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6899      	ldr	r1, [r3, #8]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 f8f5 	bl	8008d74 <RTC_ExitInitMode>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	22ff      	movs	r2, #255	; 0xff
 8008b94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008b96:	7cfb      	ldrb	r3, [r7, #19]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d103      	bne.n	8008ba4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008bac:	7cfb      	ldrb	r3, [r7, #19]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}

08008bb6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bb6:	b590      	push	{r4, r7, lr}
 8008bb8:	b087      	sub	sp, #28
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d101      	bne.n	8008bd0 <HAL_RTC_SetDate+0x1a>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	e075      	b.n	8008cbc <HAL_RTC_SetDate+0x106>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10e      	bne.n	8008c04 <HAL_RTC_SetDate+0x4e>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	f023 0310 	bic.w	r3, r3, #16
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	330a      	adds	r3, #10
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11c      	bne.n	8008c44 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	78db      	ldrb	r3, [r3, #3]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f8ee 	bl	8008df0 <RTC_ByteToBcd2>
 8008c14:	4603      	mov	r3, r0
 8008c16:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f8e7 	bl	8008df0 <RTC_ByteToBcd2>
 8008c22:	4603      	mov	r3, r0
 8008c24:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c26:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	789b      	ldrb	r3, [r3, #2]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 f8df 	bl	8008df0 <RTC_ByteToBcd2>
 8008c32:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c34:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	e00e      	b.n	8008c62 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	78db      	ldrb	r3, [r3, #3]
 8008c48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c50:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008c56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	22ca      	movs	r2, #202	; 0xca
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2253      	movs	r2, #83	; 0x53
 8008c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f84a 	bl	8008d0c <RTC_EnterInitMode>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008c7c:	7cfb      	ldrb	r3, [r7, #19]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10c      	bne.n	8008c9c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c90:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f86e 	bl	8008d74 <RTC_ExitInitMode>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	22ff      	movs	r2, #255	; 0xff
 8008ca2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008ca4:	7cfb      	ldrb	r3, [r7, #19]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008cba:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd90      	pop	{r4, r7, pc}

08008cc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a0d      	ldr	r2, [pc, #52]	; (8008d08 <HAL_RTC_WaitForSynchro+0x44>)
 8008cd2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008cd4:	f7fa ff8e 	bl	8003bf4 <HAL_GetTick>
 8008cd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cda:	e009      	b.n	8008cf0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cdc:	f7fa ff8a 	bl	8003bf4 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cea:	d901      	bls.n	8008cf0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e007      	b.n	8008d00 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0ee      	beq.n	8008cdc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	0003ff5f 	.word	0x0003ff5f

08008d0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d120      	bne.n	8008d68 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d30:	f7fa ff60 	bl	8003bf4 <HAL_GetTick>
 8008d34:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d36:	e00d      	b.n	8008d54 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d38:	f7fa ff5c 	bl	8003bf4 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d46:	d905      	bls.n	8008d54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2203      	movs	r2, #3
 8008d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <RTC_EnterInitMode+0x5c>
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d1e7      	bne.n	8008d38 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008d80:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4a19      	ldr	r2, [pc, #100]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d8a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008d8c:	4b17      	ldr	r3, [pc, #92]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10c      	bne.n	8008db2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ff93 	bl	8008cc4 <HAL_RTC_WaitForSynchro>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01e      	beq.n	8008de2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2203      	movs	r2, #3
 8008da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	e017      	b.n	8008de2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008db2:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	4a0d      	ldr	r2, [pc, #52]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008db8:	f023 0320 	bic.w	r3, r3, #32
 8008dbc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff ff80 	bl	8008cc4 <HAL_RTC_WaitForSynchro>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2203      	movs	r2, #3
 8008dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	4a04      	ldr	r2, [pc, #16]	; (8008dec <RTC_ExitInitMode+0x78>)
 8008ddc:	f043 0320 	orr.w	r3, r3, #32
 8008de0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40002800 	.word	0x40002800

08008df0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008e02:	e005      	b.n	8008e10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	3b0a      	subs	r3, #10
 8008e0e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d8f6      	bhi.n	8008e04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b2db      	uxtb	r3, r3
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e022      	b.n	8008e88 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7fa fc2f 	bl	80036b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f814 	bl	8008e90 <HAL_SD_InitCard>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e00a      	b.n	8008e88 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e90:	b5b0      	push	{r4, r5, r7, lr}
 8008e92:	b08e      	sub	sp, #56	; 0x38
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008eac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008eb0:	f7fe fd2c 	bl	800790c <HAL_RCCEx_GetPeriphCLKFreq>
 8008eb4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e07b      	b.n	8008fc8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	09db      	lsrs	r3, r3, #7
 8008ed4:	4a3e      	ldr	r2, [pc, #248]	; (8008fd0 <HAL_SD_InitCard+0x140>)
 8008ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eda:	091b      	lsrs	r3, r3, #4
 8008edc:	3b02      	subs	r3, #2
 8008ede:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681d      	ldr	r5, [r3, #0]
 8008ee4:	466c      	mov	r4, sp
 8008ee6:	f107 0314 	add.w	r3, r7, #20
 8008eea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ef2:	f107 0308 	add.w	r3, r7, #8
 8008ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f001 fac1 	bl	800a480 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f0c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 faff 	bl	800a516 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f26:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008f34:	4a27      	ldr	r2, [pc, #156]	; (8008fd4 <HAL_SD_InitCard+0x144>)
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fa fe64 	bl	8003c0c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 ffdf 	bl	8009f08 <SD_PowerON>
 8008f4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e02e      	b.n	8008fc8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fefe 	bl	8009d6c <SD_InitCard>
 8008f70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e01b      	b.n	8008fc8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fb4f 	bl	800a63c <SDMMC_CmdBlockLength>
 8008f9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00f      	beq.n	8008fc6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a0b      	ldr	r2, [pc, #44]	; (8008fd8 <HAL_SD_InitCard+0x148>)
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	431a      	orrs	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3728      	adds	r7, #40	; 0x28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd0:	014f8b59 	.word	0x014f8b59
 8008fd4:	00012110 	.word	0x00012110
 8008fd8:	004005ff 	.word	0x004005ff

08008fdc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08c      	sub	sp, #48	; 0x30
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d107      	bne.n	8009004 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e0a9      	b.n	8009158 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	f040 80a2 	bne.w	8009156 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	441a      	add	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009022:	429a      	cmp	r2, r3
 8009024:	d907      	bls.n	8009036 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e090      	b.n	8009158 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2203      	movs	r2, #3
 800903a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	4a45      	ldr	r2, [pc, #276]	; (8009160 <HAL_SD_ReadBlocks_DMA+0x184>)
 800904c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	4a44      	ldr	r2, [pc, #272]	; (8009164 <HAL_SD_ReadBlocks_DMA+0x188>)
 8009054:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2200      	movs	r2, #0
 800905c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3380      	adds	r3, #128	; 0x80
 8009068:	4619      	mov	r1, r3
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	025b      	lsls	r3, r3, #9
 8009070:	089b      	lsrs	r3, r3, #2
 8009072:	f7fa ffb9 	bl	8003fe8 <HAL_DMA_Start_IT>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00f      	beq.n	800909c <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a39      	ldr	r2, [pc, #228]	; (8009168 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8009082:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e05d      	b.n	8009158 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0208 	orr.w	r2, r2, #8
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d002      	beq.n	80090ba <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	025b      	lsls	r3, r3, #9
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ba:	f04f 33ff 	mov.w	r3, #4294967295
 80090be:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	025b      	lsls	r3, r3, #9
 80090c4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090c6:	2390      	movs	r3, #144	; 0x90
 80090c8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090ca:	2302      	movs	r3, #2
 80090cc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f107 0210 	add.w	r2, r7, #16
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f001 fa7f 	bl	800a5e4 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d90a      	bls.n	8009102 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2282      	movs	r2, #130	; 0x82
 80090f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 fae3 	bl	800a6c4 <SDMMC_CmdReadMultiBlock>
 80090fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009100:	e009      	b.n	8009116 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2281      	movs	r2, #129	; 0x81
 8009106:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800910e:	4618      	mov	r0, r3
 8009110:	f001 fab6 	bl	800a680 <SDMMC_CmdReadSingleBlock>
 8009114:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d012      	beq.n	8009142 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a11      	ldr	r2, [pc, #68]	; (8009168 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	431a      	orrs	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e00a      	b.n	8009158 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009150:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	e000      	b.n	8009158 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009156:	2302      	movs	r3, #2
  }
}
 8009158:	4618      	mov	r0, r3
 800915a:	3730      	adds	r7, #48	; 0x30
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	08009b87 	.word	0x08009b87
 8009164:	08009bf9 	.word	0x08009bf9
 8009168:	004005ff 	.word	0x004005ff

0800916c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08c      	sub	sp, #48	; 0x30
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d107      	bne.n	8009194 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e0ac      	b.n	80092ee <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b01      	cmp	r3, #1
 800919e:	f040 80a5 	bne.w	80092ec <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	441a      	add	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d907      	bls.n	80091c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e093      	b.n	80092ee <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2203      	movs	r2, #3
 80091ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2200      	movs	r2, #0
 80091d4:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091da:	4a47      	ldr	r2, [pc, #284]	; (80092f8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80091dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	4a46      	ldr	r2, [pc, #280]	; (80092fc <HAL_SD_WriteBlocks_DMA+0x190>)
 80091e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ea:	2200      	movs	r2, #0
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d002      	beq.n	80091fc <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	025b      	lsls	r3, r3, #9
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d90a      	bls.n	8009218 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	22a0      	movs	r2, #160	; 0xa0
 8009206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fa9c 	bl	800a74c <SDMMC_CmdWriteMultiBlock>
 8009214:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009216:	e009      	b.n	800922c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2290      	movs	r2, #144	; 0x90
 800921c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fa6f 	bl	800a708 <SDMMC_CmdWriteSingleBlock>
 800922a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d012      	beq.n	8009258 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a32      	ldr	r2, [pc, #200]	; (8009300 <HAL_SD_WriteBlocks_DMA+0x194>)
 8009238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	431a      	orrs	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e04a      	b.n	80092ee <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0208 	orr.w	r2, r2, #8
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3380      	adds	r3, #128	; 0x80
 8009274:	461a      	mov	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	025b      	lsls	r3, r3, #9
 800927a:	089b      	lsrs	r3, r3, #2
 800927c:	f7fa feb4 	bl	8003fe8 <HAL_DMA_Start_IT>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d012      	beq.n	80092ac <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1d      	ldr	r2, [pc, #116]	; (8009300 <HAL_SD_WriteBlocks_DMA+0x194>)
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e020      	b.n	80092ee <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092ac:	f04f 33ff 	mov.w	r3, #4294967295
 80092b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	025b      	lsls	r3, r3, #9
 80092b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092b8:	2390      	movs	r3, #144	; 0x90
 80092ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80092bc:	2300      	movs	r3, #0
 80092be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80092c4:	2301      	movs	r3, #1
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f107 0210 	add.w	r2, r7, #16
 80092d0:	4611      	mov	r1, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 f986 	bl	800a5e4 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 021a 	orr.w	r2, r2, #26
 80092e6:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	e000      	b.n	80092ee <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80092ec:	2302      	movs	r3, #2
  }
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3730      	adds	r7, #48	; 0x30
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	08009b5d 	.word	0x08009b5d
 80092fc:	08009bf9 	.word	0x08009bf9
 8009300:	004005ff 	.word	0x004005ff

08009304 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009310:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <HAL_SD_IRQHandler+0x2e>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 f802 	bl	800a334 <SD_Read_IT>
 8009330:	e155      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 808f 	beq.w	8009460 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800934a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6812      	ldr	r2, [r2, #0]
 8009356:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800935a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800935e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0201 	bic.w	r2, r2, #1
 800936e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d039      	beq.n	80093ee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <HAL_SD_IRQHandler+0x8a>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d011      	beq.n	80093b2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f001 f9fc 	bl	800a790 <SDMMC_CmdStopTransfer>
 8009398:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f91f 	bl	80095f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80093ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <HAL_SD_IRQHandler+0xda>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f003 f8fc 	bl	800c5dc <HAL_SD_RxCpltCallback>
 80093e4:	e0fb      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f003 f8ee 	bl	800c5c8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80093ec:	e0f7      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80f2 	beq.w	80095de <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f003 0320 	and.w	r3, r3, #32
 8009400:	2b00      	cmp	r3, #0
 8009402:	d011      	beq.n	8009428 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f9c1 	bl	800a790 <SDMMC_CmdStopTransfer>
 800940e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d008      	beq.n	8009428 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f8e4 	bl	80095f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	f040 80d5 	bne.w	80095de <HAL_SD_IRQHandler+0x2da>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	f040 80cf 	bne.w	80095de <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0208 	bic.w	r2, r2, #8
 800944e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f003 f8b5 	bl	800c5c8 <HAL_SD_TxCpltCallback>
}
 800945e:	e0be      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d008      	beq.n	8009480 <HAL_SD_IRQHandler+0x17c>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 ffac 	bl	800a3d6 <SD_Write_IT>
 800947e:	e0ae      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 80a7 	beq.w	80095de <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	f043 0202 	orr.w	r2, r3, #2
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	f043 0208 	orr.w	r2, r3, #8
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	f043 0220 	orr.w	r2, r3, #32
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	f043 0210 	orr.w	r2, r3, #16
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009510:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f001 f93a 	bl	800a790 <SDMMC_CmdStopTransfer>
 800951c:	4602      	mov	r2, r0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f855 	bl	80095f0 <HAL_SD_ErrorCallback>
}
 8009546:	e04a      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954e:	2b00      	cmp	r3, #0
 8009550:	d045      	beq.n	80095de <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <HAL_SD_IRQHandler+0x262>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d011      	beq.n	800958a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956a:	4a1f      	ldr	r2, [pc, #124]	; (80095e8 <HAL_SD_IRQHandler+0x2e4>)
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	4618      	mov	r0, r3
 8009574:	f7fa fd98 	bl	80040a8 <HAL_DMA_Abort_IT>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d02f      	beq.n	80095de <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fb84 	bl	8009c90 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009588:	e029      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d104      	bne.n	800959e <HAL_SD_IRQHandler+0x29a>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	4a12      	ldr	r2, [pc, #72]	; (80095ec <HAL_SD_IRQHandler+0x2e8>)
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fa fd7c 	bl	80040a8 <HAL_DMA_Abort_IT>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d013      	beq.n	80095de <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fb9f 	bl	8009cfe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80095c0:	e00d      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f002 ffec 	bl	800c5b4 <HAL_SD_AbortCallback>
}
 80095dc:	e7ff      	b.n	80095de <HAL_SD_IRQHandler+0x2da>
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	08009c91 	.word	0x08009c91
 80095ec:	08009cff 	.word	0x08009cff

080095f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009612:	0f9b      	lsrs	r3, r3, #30
 8009614:	b2da      	uxtb	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800961e:	0e9b      	lsrs	r3, r3, #26
 8009620:	b2db      	uxtb	r3, r3
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	b2da      	uxtb	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009630:	0e1b      	lsrs	r3, r3, #24
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f003 0303 	and.w	r3, r3, #3
 8009638:	b2da      	uxtb	r2, r3
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009642:	0c1b      	lsrs	r3, r3, #16
 8009644:	b2da      	uxtb	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	b2da      	uxtb	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800965a:	b2da      	uxtb	r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009664:	0d1b      	lsrs	r3, r3, #20
 8009666:	b29a      	uxth	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009670:	0c1b      	lsrs	r3, r3, #16
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	b2da      	uxtb	r2, r3
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009682:	0bdb      	lsrs	r3, r3, #15
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009694:	0b9b      	lsrs	r3, r3, #14
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	b2da      	uxtb	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a6:	0b5b      	lsrs	r3, r3, #13
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096b8:	0b1b      	lsrs	r3, r3, #12
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2200      	movs	r2, #0
 80096ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d163      	bne.n	800979c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d8:	009a      	lsls	r2, r3, #2
 80096da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80096de:	4013      	ands	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80096e4:	0f92      	lsrs	r2, r2, #30
 80096e6:	431a      	orrs	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	0edb      	lsrs	r3, r3, #27
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009702:	0e1b      	lsrs	r3, r3, #24
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	b2da      	uxtb	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009714:	0d5b      	lsrs	r3, r3, #21
 8009716:	b2db      	uxtb	r3, r3
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	b2da      	uxtb	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009726:	0c9b      	lsrs	r3, r3, #18
 8009728:	b2db      	uxtb	r3, r3
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	b2da      	uxtb	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009738:	0bdb      	lsrs	r3, r3, #15
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	b2da      	uxtb	r2, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	7e1b      	ldrb	r3, [r3, #24]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	3302      	adds	r3, #2
 800975c:	2201      	movs	r2, #1
 800975e:	fa02 f303 	lsl.w	r3, r2, r3
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009766:	fb03 f202 	mul.w	r2, r3, r2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	7a1b      	ldrb	r3, [r3, #8]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	2201      	movs	r2, #1
 800977a:	409a      	lsls	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009788:	0a52      	lsrs	r2, r2, #9
 800978a:	fb03 f202 	mul.w	r2, r3, r2
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009798:	661a      	str	r2, [r3, #96]	; 0x60
 800979a:	e031      	b.n	8009800 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d11d      	bne.n	80097e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097a8:	041b      	lsls	r3, r3, #16
 80097aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	431a      	orrs	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	3301      	adds	r3, #1
 80097c0:	029a      	lsls	r2, r3, #10
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	661a      	str	r2, [r3, #96]	; 0x60
 80097de:	e00f      	b.n	8009800 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a58      	ldr	r2, [pc, #352]	; (8009948 <HAL_SD_GetCardCSD+0x344>)
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e09d      	b.n	800993c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009804:	0b9b      	lsrs	r3, r3, #14
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	b2da      	uxtb	r2, r3
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009816:	09db      	lsrs	r3, r3, #7
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981e:	b2da      	uxtb	r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982e:	b2da      	uxtb	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009838:	0fdb      	lsrs	r3, r3, #31
 800983a:	b2da      	uxtb	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009844:	0f5b      	lsrs	r3, r3, #29
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	b2da      	uxtb	r2, r3
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	0e9b      	lsrs	r3, r3, #26
 8009858:	b2db      	uxtb	r3, r3
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	b2da      	uxtb	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009868:	0d9b      	lsrs	r3, r3, #22
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 030f 	and.w	r3, r3, #15
 8009870:	b2da      	uxtb	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	0d5b      	lsrs	r3, r3, #21
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	b2da      	uxtb	r2, r3
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	0c1b      	lsrs	r3, r3, #16
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098aa:	0bdb      	lsrs	r3, r3, #15
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	0b9b      	lsrs	r3, r3, #14
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	0b5b      	lsrs	r3, r3, #13
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e6:	0b1b      	lsrs	r3, r3, #12
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fa:	0a9b      	lsrs	r3, r3, #10
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	b2da      	uxtb	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992a:	b2da      	uxtb	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	004005ff 	.word	0x004005ff

0800994c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80099a4:	b5b0      	push	{r4, r5, r7, lr}
 80099a6:	b090      	sub	sp, #64	; 0x40
 80099a8:	af04      	add	r7, sp, #16
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2203      	movs	r2, #3
 80099b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d02e      	beq.n	8009a22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ca:	d106      	bne.n	80099da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38
 80099d8:	e029      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099e0:	d10a      	bne.n	80099f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fb46 	bl	800a074 <SD_WideBus_Enable>
 80099e8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	431a      	orrs	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
 80099f6:	e01a      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10a      	bne.n	8009a14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fb83 	bl	800a10a <SD_WideBus_Disable>
 8009a04:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	639a      	str	r2, [r3, #56]	; 0x38
 8009a12:	e00c      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8009a20:	e005      	b.n	8009a2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a35      	ldr	r2, [pc, #212]	; (8009b10 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009a3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a44:	e042      	b.n	8009acc <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009a46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009a4a:	f7fd ff5f 	bl	800790c <HAL_RCCEx_GetPeriphCLKFreq>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d031      	beq.n	8009aba <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	3302      	adds	r3, #2
 8009a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7e:	4a25      	ldr	r2, [pc, #148]	; (8009b14 <HAL_SD_ConfigWideBusOperation+0x170>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d907      	bls.n	8009a94 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	4a24      	ldr	r2, [pc, #144]	; (8009b18 <HAL_SD_ConfigWideBusOperation+0x174>)
 8009a88:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8c:	0ddb      	lsrs	r3, r3, #23
 8009a8e:	3b02      	subs	r3, #2
 8009a90:	623b      	str	r3, [r7, #32]
 8009a92:	e002      	b.n	8009a9a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681d      	ldr	r5, [r3, #0]
 8009a9e:	466c      	mov	r4, sp
 8009aa0:	f107 0318 	add.w	r3, r7, #24
 8009aa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 fce4 	bl	800a480 <SDMMC_Init>
 8009ab8:	e008      	b.n	8009acc <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fdb1 	bl	800a63c <SDMMC_CmdBlockLength>
 8009ada:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00c      	beq.n	8009afc <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	431a      	orrs	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3730      	adds	r7, #48	; 0x30
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b10:	004005ff 	.word	0x004005ff
 8009b14:	017d7840 	.word	0x017d7840
 8009b18:	55e63b89 	.word	0x55e63b89

08009b1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa78 	bl	800a024 <SD_SendStatus>
 8009b34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	431a      	orrs	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	0a5b      	lsrs	r3, r3, #9
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b52:	693b      	ldr	r3, [r7, #16]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009b7a:	bf00      	nop
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b98:	2b82      	cmp	r3, #130	; 0x82
 8009b9a:	d111      	bne.n	8009bc0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fdf5 	bl	800a790 <SDMMC_CmdStopTransfer>
 8009ba6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d008      	beq.n	8009bc0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fd18 	bl	80095f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 0208 	bic.w	r2, r2, #8
 8009bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f002 fcf7 	bl	800c5dc <HAL_SD_RxCpltCallback>
#endif
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c04:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c14:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d002      	beq.n	8009c22 <SD_DMAError+0x2a>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d12d      	bne.n	8009c7e <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a19      	ldr	r2, [pc, #100]	; (8009c8c <SD_DMAError+0x94>)
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8009c46:	6978      	ldr	r0, [r7, #20]
 8009c48:	f7ff ff68 	bl	8009b1c <HAL_SD_GetCardState>
 8009c4c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b06      	cmp	r3, #6
 8009c52:	d002      	beq.n	8009c5a <SD_DMAError+0x62>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b05      	cmp	r3, #5
 8009c58:	d10a      	bne.n	8009c70 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 fd96 	bl	800a790 <SDMMC_CmdStopTransfer>
 8009c64:	4602      	mov	r2, r0
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8009c7e:	6978      	ldr	r0, [r7, #20]
 8009c80:	f7ff fcb6 	bl	80095f0 <HAL_SD_ErrorCallback>
#endif
}
 8009c84:	bf00      	nop
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	004005ff 	.word	0x004005ff

08009c90 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff ff37 	bl	8009b1c <HAL_SD_GetCardState>
 8009cae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b06      	cmp	r3, #6
 8009cc2:	d002      	beq.n	8009cca <SD_DMATxAbort+0x3a>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b05      	cmp	r3, #5
 8009cc8:	d10a      	bne.n	8009ce0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fd5e 	bl	800a790 <SDMMC_CmdStopTransfer>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f002 fc63 	bl	800c5b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009cee:	e002      	b.n	8009cf6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff fc7d 	bl	80095f0 <HAL_SD_ErrorCallback>
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff ff00 	bl	8009b1c <HAL_SD_GetCardState>
 8009d1c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d002      	beq.n	8009d38 <SD_DMARxAbort+0x3a>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b05      	cmp	r3, #5
 8009d36:	d10a      	bne.n	8009d4e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fd27 	bl	800a790 <SDMMC_CmdStopTransfer>
 8009d42:	4602      	mov	r2, r0
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d103      	bne.n	8009d5e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f002 fc2c 	bl	800c5b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d5c:	e002      	b.n	8009d64 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff fc46 	bl	80095f0 <HAL_SD_ErrorCallback>
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d6c:	b5b0      	push	{r4, r5, r7, lr}
 8009d6e:	b094      	sub	sp, #80	; 0x50
 8009d70:	af04      	add	r7, sp, #16
 8009d72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d74:	2301      	movs	r3, #1
 8009d76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fbd9 	bl	800a534 <SDMMC_GetPowerState>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d8c:	e0b8      	b.n	8009f00 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d02f      	beq.n	8009df6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fe02 	bl	800a9a4 <SDMMC_CmdSendCID>
 8009da0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <SD_InitCard+0x40>
    {
      return errorstate;
 8009da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009daa:	e0a9      	b.n	8009f00 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 fc03 	bl	800a5be <SDMMC_GetResponse>
 8009db8:	4602      	mov	r2, r0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2104      	movs	r1, #4
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fbfa 	bl	800a5be <SDMMC_GetResponse>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fbf1 	bl	800a5be <SDMMC_GetResponse>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	210c      	movs	r1, #12
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fbe8 	bl	800a5be <SDMMC_GetResponse>
 8009dee:	4602      	mov	r2, r0
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d00d      	beq.n	8009e1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f107 020e 	add.w	r2, r7, #14
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 fe08 	bl	800aa1e <SDMMC_CmdSetRelAdd>
 8009e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <SD_InitCard+0xae>
    {
      return errorstate;
 8009e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e18:	e072      	b.n	8009f00 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d036      	beq.n	8009e90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e22:	89fb      	ldrh	r3, [r7, #14]
 8009e24:	461a      	mov	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f000 fdd2 	bl	800a9e0 <SDMMC_CmdSendCSD>
 8009e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e46:	e05b      	b.n	8009f00 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fbb5 	bl	800a5be <SDMMC_GetResponse>
 8009e54:	4602      	mov	r2, r0
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2104      	movs	r1, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fbac 	bl	800a5be <SDMMC_GetResponse>
 8009e66:	4602      	mov	r2, r0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2108      	movs	r1, #8
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 fba3 	bl	800a5be <SDMMC_GetResponse>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	210c      	movs	r1, #12
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fb9a 	bl	800a5be <SDMMC_GetResponse>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2104      	movs	r1, #4
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fb91 	bl	800a5be <SDMMC_GetResponse>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	0d1a      	lsrs	r2, r3, #20
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ea4:	f107 0310 	add.w	r3, r7, #16
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fbaa 	bl	8009604 <HAL_SD_GetCardCSD>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009eba:	e021      	b.n	8009f00 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec4:	041b      	lsls	r3, r3, #16
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	461c      	mov	r4, r3
 8009eca:	4615      	mov	r5, r2
 8009ecc:	4622      	mov	r2, r4
 8009ece:	462b      	mov	r3, r5
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	f000 fc7f 	bl	800a7d4 <SDMMC_CmdSelDesel>
 8009ed6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <SD_InitCard+0x176>
  {
    return errorstate;
 8009ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee0:	e00e      	b.n	8009f00 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681d      	ldr	r5, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	466c      	mov	r4, sp
 8009eea:	f103 0210 	add.w	r2, r3, #16
 8009eee:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ef0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f000 fac1 	bl	800a480 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3740      	adds	r7, #64	; 0x40
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bdb0      	pop	{r4, r5, r7, pc}

08009f08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fc7a 	bl	800a81a <SDMMC_CmdGoIdleState>
 8009f26:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	e072      	b.n	800a018 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fc8d 	bl	800a856 <SDMMC_CmdOperCond>
 8009f3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00d      	beq.n	8009f60 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fc63 	bl	800a81a <SDMMC_CmdGoIdleState>
 8009f54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	e05b      	b.n	800a018 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d137      	bne.n	8009fde <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fc8d 	bl	800a894 <SDMMC_CmdAppCommand>
 8009f7a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d02d      	beq.n	8009fde <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f86:	e047      	b.n	800a018 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 fc80 	bl	800a894 <SDMMC_CmdAppCommand>
 8009f94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <SD_PowerON+0x98>
    {
      return errorstate;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	e03b      	b.n	800a018 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	491e      	ldr	r1, [pc, #120]	; (800a020 <SD_PowerON+0x118>)
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fc96 	bl	800a8d8 <SDMMC_CmdAppOperCommand>
 8009fac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fb8:	e02e      	b.n	800a018 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fafc 	bl	800a5be <SDMMC_GetResponse>
 8009fc6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	0fdb      	lsrs	r3, r3, #31
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d101      	bne.n	8009fd4 <SD_PowerON+0xcc>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e000      	b.n	8009fd6 <SD_PowerON+0xce>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	613b      	str	r3, [r7, #16]

    count++;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d802      	bhi.n	8009fee <SD_PowerON+0xe6>
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0cc      	beq.n	8009f88 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d902      	bls.n	8009ffe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ffc:	e00c      	b.n	800a018 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	645a      	str	r2, [r3, #68]	; 0x44
 800a00e:	e002      	b.n	800a016 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	c1100000 	.word	0xc1100000

0800a024 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a038:	e018      	b.n	800a06c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a042:	041b      	lsls	r3, r3, #16
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f000 fd0a 	bl	800aa60 <SDMMC_CmdSendStatus>
 800a04c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	e009      	b.n	800a06c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 faad 	bl	800a5be <SDMMC_GetResponse>
 800a064:	4602      	mov	r2, r0
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	2300      	movs	r3, #0
 800a082:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2100      	movs	r1, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fa97 	bl	800a5be <SDMMC_GetResponse>
 800a090:	4603      	mov	r3, r0
 800a092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a09a:	d102      	bne.n	800a0a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a09c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0a0:	e02f      	b.n	800a102 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0a2:	f107 030c 	add.w	r3, r7, #12
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f879 	bl	800a1a0 <SD_FindSCR>
 800a0ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	e023      	b.n	800a102 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d01c      	beq.n	800a0fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0cc:	041b      	lsls	r3, r3, #16
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f000 fbdf 	bl	800a894 <SDMMC_CmdAppCommand>
 800a0d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	e00f      	b.n	800a102 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2102      	movs	r1, #2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fc18 	bl	800a91e <SDMMC_CmdBusWidth>
 800a0ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	e003      	b.n	800a102 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e001      	b.n	800a102 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b086      	sub	sp, #24
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	2300      	movs	r3, #0
 800a118:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2100      	movs	r1, #0
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fa4c 	bl	800a5be <SDMMC_GetResponse>
 800a126:	4603      	mov	r3, r0
 800a128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a12c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a130:	d102      	bne.n	800a138 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a136:	e02f      	b.n	800a198 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a138:	f107 030c 	add.w	r3, r7, #12
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f82e 	bl	800a1a0 <SD_FindSCR>
 800a144:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	e023      	b.n	800a198 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d01c      	beq.n	800a194 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f000 fb94 	bl	800a894 <SDMMC_CmdAppCommand>
 800a16c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	e00f      	b.n	800a198 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fbcd 	bl	800a91e <SDMMC_CmdBusWidth>
 800a184:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	e003      	b.n	800a198 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a190:	2300      	movs	r3, #0
 800a192:	e001      	b.n	800a198 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a194:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b08f      	sub	sp, #60	; 0x3c
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1aa:	f7f9 fd23 	bl	8003bf4 <HAL_GetTick>
 800a1ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60bb      	str	r3, [r7, #8]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2108      	movs	r1, #8
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fa38 	bl	800a63c <SDMMC_CmdBlockLength>
 800a1cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	e0a9      	b.n	800a32c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e0:	041b      	lsls	r3, r3, #16
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	f000 fb55 	bl	800a894 <SDMMC_CmdAppCommand>
 800a1ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	e09a      	b.n	800a32c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a200:	2330      	movs	r3, #48	; 0x30
 800a202:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a204:	2302      	movs	r3, #2
 800a206:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a208:	2300      	movs	r3, #0
 800a20a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a20c:	2301      	movs	r3, #1
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f107 0210 	add.w	r2, r7, #16
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f9e2 	bl	800a5e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fb9c 	bl	800a962 <SDMMC_CmdSendSCR>
 800a22a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d022      	beq.n	800a278 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	e07a      	b.n	800a32c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00e      	beq.n	800a262 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6819      	ldr	r1, [r3, #0]
 800a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	f107 0208 	add.w	r2, r7, #8
 800a250:	18d4      	adds	r4, r2, r3
 800a252:	4608      	mov	r0, r1
 800a254:	f000 f941 	bl	800a4da <SDMMC_ReadFIFO>
 800a258:	4603      	mov	r3, r0
 800a25a:	6023      	str	r3, [r4, #0]
      index++;
 800a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25e:	3301      	adds	r3, #1
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a262:	f7f9 fcc7 	bl	8003bf4 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d102      	bne.n	800a278 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a276:	e059      	b.n	800a32c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27e:	f240 432a 	movw	r3, #1066	; 0x42a
 800a282:	4013      	ands	r3, r2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0d6      	beq.n	800a236 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28e:	f003 0308 	and.w	r3, r3, #8
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2208      	movs	r2, #8
 800a29c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a29e:	2308      	movs	r3, #8
 800a2a0:	e044      	b.n	800a32c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e037      	b.n	800a32c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a2d2:	2320      	movs	r3, #32
 800a2d4:	e02a      	b.n	800a32c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f240 523a 	movw	r2, #1338	; 0x53a
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	061a      	lsls	r2, r3, #24
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	0a1b      	lsrs	r3, r3, #8
 800a2f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	0e1b      	lsrs	r3, r3, #24
 800a2fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	601a      	str	r2, [r3, #0]
    scr++;
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	3304      	adds	r3, #4
 800a306:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	061a      	lsls	r2, r3, #24
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a314:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	0a1b      	lsrs	r3, r3, #8
 800a31a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a31e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	0e1b      	lsrs	r3, r3, #24
 800a324:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	373c      	adds	r7, #60	; 0x3c
 800a330:	46bd      	mov	sp, r7
 800a332:	bd90      	pop	{r4, r7, pc}

0800a334 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a340:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d03f      	beq.n	800a3ce <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	e033      	b.n	800a3bc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 f8be 	bl	800a4da <SDMMC_ReadFIFO>
 800a35e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	b2da      	uxtb	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	3b01      	subs	r3, #1
 800a372:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	0a1b      	lsrs	r3, r3, #8
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	3b01      	subs	r3, #1
 800a388:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	0c1b      	lsrs	r3, r3, #16
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3301      	adds	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	0e1b      	lsrs	r3, r3, #24
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b07      	cmp	r3, #7
 800a3c0:	d9c8      	bls.n	800a354 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d043      	beq.n	800a478 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	e037      	b.n	800a466 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	3b01      	subs	r3, #1
 800a406:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	021a      	lsls	r2, r3, #8
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4313      	orrs	r3, r2
 800a412:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3301      	adds	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	041a      	lsls	r2, r3, #16
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4313      	orrs	r3, r2
 800a42a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3301      	adds	r3, #1
 800a430:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	3b01      	subs	r3, #1
 800a436:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	061a      	lsls	r2, r3, #24
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	4313      	orrs	r3, r2
 800a442:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f107 0208 	add.w	r2, r7, #8
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 f84a 	bl	800a4f4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2b07      	cmp	r3, #7
 800a46a:	d9c4      	bls.n	800a3f6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a478:	bf00      	nop
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a480:	b084      	sub	sp, #16
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	f107 001c 	add.w	r0, r7, #28
 800a48e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a49e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a4a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a4a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a4aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a4ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a4be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	b004      	add	sp, #16
 800a4d8:	4770      	bx	lr

0800a4da <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2203      	movs	r2, #3
 800a522:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a524:	2002      	movs	r0, #2
 800a526:	f7f9 fb71 	bl	8003c0c <HAL_Delay>

  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0303 	and.w	r3, r3, #3
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a56e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a574:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a57a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a58a:	f023 030f 	bic.w	r3, r3, #15
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	b2db      	uxtb	r3, r3
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3314      	adds	r3, #20
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a60a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a610:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a616:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	431a      	orrs	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a62e:	2300      	movs	r3, #0

}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a64a:	2310      	movs	r3, #16
 800a64c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a64e:	2340      	movs	r3, #64	; 0x40
 800a650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a65a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a65c:	f107 0308 	add.w	r3, r7, #8
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff ff74 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a668:	f241 3288 	movw	r2, #5000	; 0x1388
 800a66c:	2110      	movs	r1, #16
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fa18 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a676:	69fb      	ldr	r3, [r7, #28]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3720      	adds	r7, #32
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a68e:	2311      	movs	r3, #17
 800a690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a692:	2340      	movs	r3, #64	; 0x40
 800a694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a696:	2300      	movs	r3, #0
 800a698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a69a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a69e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6a0:	f107 0308 	add.w	r3, r7, #8
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff ff52 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b0:	2111      	movs	r1, #17
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f9f6 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a6b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ba:	69fb      	ldr	r3, [r7, #28]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3720      	adds	r7, #32
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a6d2:	2312      	movs	r3, #18
 800a6d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6d6:	2340      	movs	r3, #64	; 0x40
 800a6d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e4:	f107 0308 	add.w	r3, r7, #8
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff ff30 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f4:	2112      	movs	r1, #18
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f9d4 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a6fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fe:	69fb      	ldr	r3, [r7, #28]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a716:	2318      	movs	r3, #24
 800a718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71e:	2300      	movs	r3, #0
 800a720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff ff0e 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a734:	f241 3288 	movw	r2, #5000	; 0x1388
 800a738:	2118      	movs	r1, #24
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f9b2 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a742:	69fb      	ldr	r3, [r7, #28]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3720      	adds	r7, #32
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a75a:	2319      	movs	r3, #25
 800a75c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a762:	2300      	movs	r3, #0
 800a764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a76a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a76c:	f107 0308 	add.w	r3, r7, #8
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff feec 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a778:	f241 3288 	movw	r2, #5000	; 0x1388
 800a77c:	2119      	movs	r1, #25
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f990 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a786:	69fb      	ldr	r3, [r7, #28]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a79c:	230c      	movs	r3, #12
 800a79e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ac:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff fecb 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a7ba:	4a05      	ldr	r2, [pc, #20]	; (800a7d0 <SDMMC_CmdStopTransfer+0x40>)
 800a7bc:	210c      	movs	r1, #12
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f970 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a7c4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3720      	adds	r7, #32
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	05f5e100 	.word	0x05f5e100

0800a7d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a7e4:	2307      	movs	r3, #7
 800a7e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e8:	2340      	movs	r3, #64	; 0x40
 800a7ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f6:	f107 0310 	add.w	r3, r7, #16
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7ff fea7 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a802:	f241 3288 	movw	r2, #5000	; 0x1388
 800a806:	2107      	movs	r1, #7
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f94b 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a80e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a812:	4618      	mov	r0, r3
 800a814:	3728      	adds	r7, #40	; 0x28
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b088      	sub	sp, #32
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a82a:	2300      	movs	r3, #0
 800a82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a838:	f107 0308 	add.w	r3, r7, #8
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fe86 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb65 	bl	800af14 <SDMMC_GetCmdError>
 800a84a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a84c:	69fb      	ldr	r3, [r7, #28]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b088      	sub	sp, #32
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a85e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a864:	2308      	movs	r3, #8
 800a866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a868:	2340      	movs	r3, #64	; 0x40
 800a86a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7ff fe67 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 faf8 	bl	800ae78 <SDMMC_GetCmdResp7>
 800a888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a88a:	69fb      	ldr	r3, [r7, #28]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a8a2:	2337      	movs	r3, #55	; 0x37
 800a8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8b4:	f107 0308 	add.w	r3, r7, #8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fe48 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8c4:	2137      	movs	r1, #55	; 0x37
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f8ec 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a8cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3720      	adds	r7, #32
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8ec:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a8ee:	2329      	movs	r3, #41	; 0x29
 800a8f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a900:	f107 0308 	add.w	r3, r7, #8
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fe22 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f9ff 	bl	800ad10 <SDMMC_GetCmdResp3>
 800a912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a914:	69fb      	ldr	r3, [r7, #28]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b088      	sub	sp, #32
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a92c:	2306      	movs	r3, #6
 800a92e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a930:	2340      	movs	r3, #64	; 0x40
 800a932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a934:	2300      	movs	r3, #0
 800a936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a93c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a93e:	f107 0308 	add.w	r3, r7, #8
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff fe03 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a94a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a94e:	2106      	movs	r1, #6
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f8a7 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a958:	69fb      	ldr	r3, [r7, #28]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b088      	sub	sp, #32
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a96e:	2333      	movs	r3, #51	; 0x33
 800a970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a972:	2340      	movs	r3, #64	; 0x40
 800a974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a97a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a97e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a980:	f107 0308 	add.w	r3, r7, #8
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fde2 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a990:	2133      	movs	r1, #51	; 0x33
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f886 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800a998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a99a:	69fb      	ldr	r3, [r7, #28]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a9b4:	23c0      	movs	r3, #192	; 0xc0
 800a9b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9c2:	f107 0308 	add.w	r3, r7, #8
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff fdc1 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f956 	bl	800ac80 <SDMMC_GetCmdResp2>
 800a9d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3720      	adds	r7, #32
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a9ee:	2309      	movs	r3, #9
 800a9f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a9f2:	23c0      	movs	r3, #192	; 0xc0
 800a9f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa00:	f107 0308 	add.w	r3, r7, #8
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff fda2 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f937 	bl	800ac80 <SDMMC_GetCmdResp2>
 800aa12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa14:	69fb      	ldr	r3, [r7, #28]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b088      	sub	sp, #32
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa30:	2340      	movs	r3, #64	; 0x40
 800aa32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff fd83 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	2103      	movs	r1, #3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f99c 	bl	800ad8c <SDMMC_GetCmdResp6>
 800aa54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa56:	69fb      	ldr	r3, [r7, #28]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3720      	adds	r7, #32
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aa6e:	230d      	movs	r3, #13
 800aa70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa72:	2340      	movs	r3, #64	; 0x40
 800aa74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fd62 	bl	800a550 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aa8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa90:	210d      	movs	r1, #13
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f806 	bl	800aaa4 <SDMMC_GetCmdResp1>
 800aa98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	460b      	mov	r3, r1
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aab2:	4b70      	ldr	r3, [pc, #448]	; (800ac74 <SDMMC_GetCmdResp1+0x1d0>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a70      	ldr	r2, [pc, #448]	; (800ac78 <SDMMC_GetCmdResp1+0x1d4>)
 800aab8:	fba2 2303 	umull	r2, r3, r2, r3
 800aabc:	0a5a      	lsrs	r2, r3, #9
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	fb02 f303 	mul.w	r3, r2, r3
 800aac4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	1e5a      	subs	r2, r3, #1
 800aaca:	61fa      	str	r2, [r7, #28]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aad4:	e0c9      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0ef      	beq.n	800aac6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1ea      	bne.n	800aac6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2204      	movs	r2, #4
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab02:	2304      	movs	r3, #4
 800ab04:	e0b1      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e0a6      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	22c5      	movs	r2, #197	; 0xc5
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff fd3e 	bl	800a5a4 <SDMMC_GetCommandResponse>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d001      	beq.n	800ab36 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e099      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab36:	2100      	movs	r1, #0
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff fd40 	bl	800a5be <SDMMC_GetResponse>
 800ab3e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	4b4e      	ldr	r3, [pc, #312]	; (800ac7c <SDMMC_GetCmdResp1+0x1d8>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e08d      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	da02      	bge.n	800ab5a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab58:	e087      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab64:	2340      	movs	r3, #64	; 0x40
 800ab66:	e080      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab72:	2380      	movs	r3, #128	; 0x80
 800ab74:	e079      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab84:	e071      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab94:	e069      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba4:	e061      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800abb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abb4:	e059      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abc4:	e051      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abd4:	e049      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800abe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800abe4:	e041      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800abf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abf4:	e039      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac04:	e031      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac14:	e029      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac24:	e021      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac34:	e019      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac44:	e011      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac54:	e009      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f003 0308 	and.w	r3, r3, #8
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac64:	e001      	b.n	800ac6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20000000 	.word	0x20000000
 800ac78:	10624dd3 	.word	0x10624dd3
 800ac7c:	fdffe008 	.word	0xfdffe008

0800ac80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac88:	4b1f      	ldr	r3, [pc, #124]	; (800ad08 <SDMMC_GetCmdResp2+0x88>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a1f      	ldr	r2, [pc, #124]	; (800ad0c <SDMMC_GetCmdResp2+0x8c>)
 800ac8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac92:	0a5b      	lsrs	r3, r3, #9
 800ac94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac98:	fb02 f303 	mul.w	r3, r2, r3
 800ac9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	1e5a      	subs	r2, r3, #1
 800aca2:	60fa      	str	r2, [r7, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acac:	e026      	b.n	800acfc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0ef      	beq.n	800ac9e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1ea      	bne.n	800ac9e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d004      	beq.n	800acde <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2204      	movs	r2, #4
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acda:	2304      	movs	r3, #4
 800acdc:	e00e      	b.n	800acfc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d004      	beq.n	800acf4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e003      	b.n	800acfc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	22c5      	movs	r2, #197	; 0xc5
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	20000000 	.word	0x20000000
 800ad0c:	10624dd3 	.word	0x10624dd3

0800ad10 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad18:	4b1a      	ldr	r3, [pc, #104]	; (800ad84 <SDMMC_GetCmdResp3+0x74>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a1a      	ldr	r2, [pc, #104]	; (800ad88 <SDMMC_GetCmdResp3+0x78>)
 800ad1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad22:	0a5b      	lsrs	r3, r3, #9
 800ad24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad28:	fb02 f303 	mul.w	r3, r2, r3
 800ad2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	1e5a      	subs	r2, r3, #1
 800ad32:	60fa      	str	r2, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad3c:	e01b      	b.n	800ad76 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0ef      	beq.n	800ad2e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1ea      	bne.n	800ad2e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2204      	movs	r2, #4
 800ad68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad6a:	2304      	movs	r3, #4
 800ad6c:	e003      	b.n	800ad76 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	22c5      	movs	r2, #197	; 0xc5
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	20000000 	.word	0x20000000
 800ad88:	10624dd3 	.word	0x10624dd3

0800ad8c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	460b      	mov	r3, r1
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad9a:	4b35      	ldr	r3, [pc, #212]	; (800ae70 <SDMMC_GetCmdResp6+0xe4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a35      	ldr	r2, [pc, #212]	; (800ae74 <SDMMC_GetCmdResp6+0xe8>)
 800ada0:	fba2 2303 	umull	r2, r3, r2, r3
 800ada4:	0a5b      	lsrs	r3, r3, #9
 800ada6:	f241 3288 	movw	r2, #5000	; 0x1388
 800adaa:	fb02 f303 	mul.w	r3, r2, r3
 800adae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	1e5a      	subs	r2, r3, #1
 800adb4:	61fa      	str	r2, [r7, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adbe:	e052      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0ef      	beq.n	800adb0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1ea      	bne.n	800adb0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adde:	f003 0304 	and.w	r3, r3, #4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d004      	beq.n	800adf0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2204      	movs	r2, #4
 800adea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adec:	2304      	movs	r3, #4
 800adee:	e03a      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e02f      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff fbcc 	bl	800a5a4 <SDMMC_GetCommandResponse>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d001      	beq.n	800ae1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e025      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	22c5      	movs	r2, #197	; 0xc5
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ae20:	2100      	movs	r1, #0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7ff fbcb 	bl	800a5be <SDMMC_GetResponse>
 800ae28:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d106      	bne.n	800ae42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	0c1b      	lsrs	r3, r3, #16
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e011      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae50:	e009      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae60:	e001      	b.n	800ae66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000000 	.word	0x20000000
 800ae74:	10624dd3 	.word	0x10624dd3

0800ae78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae80:	4b22      	ldr	r3, [pc, #136]	; (800af0c <SDMMC_GetCmdResp7+0x94>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a22      	ldr	r2, [pc, #136]	; (800af10 <SDMMC_GetCmdResp7+0x98>)
 800ae86:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8a:	0a5b      	lsrs	r3, r3, #9
 800ae8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae90:	fb02 f303 	mul.w	r3, r2, r3
 800ae94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	60fa      	str	r2, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aea4:	e02c      	b.n	800af00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0ef      	beq.n	800ae96 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1ea      	bne.n	800ae96 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d004      	beq.n	800aed6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2204      	movs	r2, #4
 800aed0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aed2:	2304      	movs	r3, #4
 800aed4:	e014      	b.n	800af00 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d004      	beq.n	800aeec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e009      	b.n	800af00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2240      	movs	r2, #64	; 0x40
 800aefc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aefe:	2300      	movs	r3, #0

}
 800af00:	4618      	mov	r0, r3
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	20000000 	.word	0x20000000
 800af10:	10624dd3 	.word	0x10624dd3

0800af14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af1c:	4b11      	ldr	r3, [pc, #68]	; (800af64 <SDMMC_GetCmdError+0x50>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a11      	ldr	r2, [pc, #68]	; (800af68 <SDMMC_GetCmdError+0x54>)
 800af22:	fba2 2303 	umull	r2, r3, r2, r3
 800af26:	0a5b      	lsrs	r3, r3, #9
 800af28:	f241 3288 	movw	r2, #5000	; 0x1388
 800af2c:	fb02 f303 	mul.w	r3, r2, r3
 800af30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	1e5a      	subs	r2, r3, #1
 800af36:	60fa      	str	r2, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af40:	e009      	b.n	800af56 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0f1      	beq.n	800af32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	22c5      	movs	r2, #197	; 0xc5
 800af52:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000000 	.word	0x20000000
 800af68:	10624dd3 	.word	0x10624dd3

0800af6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af6c:	b084      	sub	sp, #16
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	f107 001c 	add.w	r0, r7, #28
 800af7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 fa1c 	bl	800c3c8 <USB_CoreReset>
 800af90:	4603      	mov	r3, r0
 800af92:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800af94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38
 800afa6:	e005      	b.n	800afb4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afc0:	b004      	add	sp, #16
 800afc2:	4770      	bx	lr

0800afc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d165      	bne.n	800b0a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	4a3e      	ldr	r2, [pc, #248]	; (800b0d4 <USB_SetTurnaroundTime+0x110>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d906      	bls.n	800afee <USB_SetTurnaroundTime+0x2a>
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	4a3d      	ldr	r2, [pc, #244]	; (800b0d8 <USB_SetTurnaroundTime+0x114>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d202      	bcs.n	800afee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800afe8:	230f      	movs	r3, #15
 800afea:	617b      	str	r3, [r7, #20]
 800afec:	e05c      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	4a39      	ldr	r2, [pc, #228]	; (800b0d8 <USB_SetTurnaroundTime+0x114>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d306      	bcc.n	800b004 <USB_SetTurnaroundTime+0x40>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	4a38      	ldr	r2, [pc, #224]	; (800b0dc <USB_SetTurnaroundTime+0x118>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d202      	bcs.n	800b004 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800affe:	230e      	movs	r3, #14
 800b000:	617b      	str	r3, [r7, #20]
 800b002:	e051      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	4a35      	ldr	r2, [pc, #212]	; (800b0dc <USB_SetTurnaroundTime+0x118>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d306      	bcc.n	800b01a <USB_SetTurnaroundTime+0x56>
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	4a34      	ldr	r2, [pc, #208]	; (800b0e0 <USB_SetTurnaroundTime+0x11c>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d202      	bcs.n	800b01a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b014:	230d      	movs	r3, #13
 800b016:	617b      	str	r3, [r7, #20]
 800b018:	e046      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	4a30      	ldr	r2, [pc, #192]	; (800b0e0 <USB_SetTurnaroundTime+0x11c>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d306      	bcc.n	800b030 <USB_SetTurnaroundTime+0x6c>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	4a2f      	ldr	r2, [pc, #188]	; (800b0e4 <USB_SetTurnaroundTime+0x120>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d802      	bhi.n	800b030 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b02a:	230c      	movs	r3, #12
 800b02c:	617b      	str	r3, [r7, #20]
 800b02e:	e03b      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4a2c      	ldr	r2, [pc, #176]	; (800b0e4 <USB_SetTurnaroundTime+0x120>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d906      	bls.n	800b046 <USB_SetTurnaroundTime+0x82>
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	4a2b      	ldr	r2, [pc, #172]	; (800b0e8 <USB_SetTurnaroundTime+0x124>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d802      	bhi.n	800b046 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b040:	230b      	movs	r3, #11
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	e030      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	4a27      	ldr	r2, [pc, #156]	; (800b0e8 <USB_SetTurnaroundTime+0x124>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d906      	bls.n	800b05c <USB_SetTurnaroundTime+0x98>
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4a26      	ldr	r2, [pc, #152]	; (800b0ec <USB_SetTurnaroundTime+0x128>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d802      	bhi.n	800b05c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b056:	230a      	movs	r3, #10
 800b058:	617b      	str	r3, [r7, #20]
 800b05a:	e025      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4a23      	ldr	r2, [pc, #140]	; (800b0ec <USB_SetTurnaroundTime+0x128>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d906      	bls.n	800b072 <USB_SetTurnaroundTime+0xae>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	4a22      	ldr	r2, [pc, #136]	; (800b0f0 <USB_SetTurnaroundTime+0x12c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d202      	bcs.n	800b072 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b06c:	2309      	movs	r3, #9
 800b06e:	617b      	str	r3, [r7, #20]
 800b070:	e01a      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	4a1e      	ldr	r2, [pc, #120]	; (800b0f0 <USB_SetTurnaroundTime+0x12c>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d306      	bcc.n	800b088 <USB_SetTurnaroundTime+0xc4>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <USB_SetTurnaroundTime+0x130>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d802      	bhi.n	800b088 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b082:	2308      	movs	r3, #8
 800b084:	617b      	str	r3, [r7, #20]
 800b086:	e00f      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <USB_SetTurnaroundTime+0x130>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d906      	bls.n	800b09e <USB_SetTurnaroundTime+0xda>
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4a19      	ldr	r2, [pc, #100]	; (800b0f8 <USB_SetTurnaroundTime+0x134>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d202      	bcs.n	800b09e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b098:	2307      	movs	r3, #7
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e004      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b09e:	2306      	movs	r3, #6
 800b0a0:	617b      	str	r3, [r7, #20]
 800b0a2:	e001      	b.n	800b0a8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b0a4:	2309      	movs	r3, #9
 800b0a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	029b      	lsls	r3, r3, #10
 800b0bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	371c      	adds	r7, #28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	00d8acbf 	.word	0x00d8acbf
 800b0d8:	00e4e1c0 	.word	0x00e4e1c0
 800b0dc:	00f42400 	.word	0x00f42400
 800b0e0:	01067380 	.word	0x01067380
 800b0e4:	011a499f 	.word	0x011a499f
 800b0e8:	01312cff 	.word	0x01312cff
 800b0ec:	014ca43f 	.word	0x014ca43f
 800b0f0:	016e3600 	.word	0x016e3600
 800b0f4:	01a6ab1f 	.word	0x01a6ab1f
 800b0f8:	01e84800 	.word	0x01e84800

0800b0fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f043 0201 	orr.w	r2, r3, #1
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f023 0201 	bic.w	r2, r3, #1
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d115      	bne.n	800b18e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b16e:	2001      	movs	r0, #1
 800b170:	f7f8 fd4c 	bl	8003c0c <HAL_Delay>
      ms++;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	3301      	adds	r3, #1
 800b178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f001 f8ab 	bl	800c2d6 <USB_GetMode>
 800b180:	4603      	mov	r3, r0
 800b182:	2b01      	cmp	r3, #1
 800b184:	d01e      	beq.n	800b1c4 <USB_SetCurrentMode+0x84>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b31      	cmp	r3, #49	; 0x31
 800b18a:	d9f0      	bls.n	800b16e <USB_SetCurrentMode+0x2e>
 800b18c:	e01a      	b.n	800b1c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b18e:	78fb      	ldrb	r3, [r7, #3]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d115      	bne.n	800b1c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	f7f8 fd33 	bl	8003c0c <HAL_Delay>
      ms++;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 f892 	bl	800c2d6 <USB_GetMode>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <USB_SetCurrentMode+0x84>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b31      	cmp	r3, #49	; 0x31
 800b1bc:	d9f0      	bls.n	800b1a0 <USB_SetCurrentMode+0x60>
 800b1be:	e001      	b.n	800b1c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e005      	b.n	800b1d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b32      	cmp	r3, #50	; 0x32
 800b1c8:	d101      	bne.n	800b1ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e000      	b.n	800b1d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1d8:	b084      	sub	sp, #16
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b086      	sub	sp, #24
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b1e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	613b      	str	r3, [r7, #16]
 800b1f6:	e009      	b.n	800b20c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	3340      	adds	r3, #64	; 0x40
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	2200      	movs	r2, #0
 800b204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	3301      	adds	r3, #1
 800b20a:	613b      	str	r3, [r7, #16]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2b0e      	cmp	r3, #14
 800b210:	d9f2      	bls.n	800b1f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d11c      	bne.n	800b252 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b226:	f043 0302 	orr.w	r3, r3, #2
 800b22a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	e005      	b.n	800b25e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b264:	461a      	mov	r2, r3
 800b266:	2300      	movs	r3, #0
 800b268:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b26a:	2103      	movs	r1, #3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f959 	bl	800b524 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b272:	2110      	movs	r1, #16
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f8f1 	bl	800b45c <USB_FlushTxFifo>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f91d 	bl	800b4c4 <USB_FlushRxFifo>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b29a:	461a      	mov	r2, r3
 800b29c:	2300      	movs	r3, #0
 800b29e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	613b      	str	r3, [r7, #16]
 800b2bc:	e043      	b.n	800b346 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	015a      	lsls	r2, r3, #5
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2d4:	d118      	bne.n	800b308 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	e013      	b.n	800b31a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fe:	461a      	mov	r2, r3
 800b300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b304:	6013      	str	r3, [r2, #0]
 800b306:	e008      	b.n	800b31a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b314:	461a      	mov	r2, r3
 800b316:	2300      	movs	r3, #0
 800b318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	015a      	lsls	r2, r3, #5
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	4413      	add	r3, r2
 800b322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b326:	461a      	mov	r2, r3
 800b328:	2300      	movs	r3, #0
 800b32a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4413      	add	r3, r2
 800b334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b338:	461a      	mov	r2, r3
 800b33a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b33e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	3301      	adds	r3, #1
 800b344:	613b      	str	r3, [r7, #16]
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d3b7      	bcc.n	800b2be <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b34e:	2300      	movs	r3, #0
 800b350:	613b      	str	r3, [r7, #16]
 800b352:	e043      	b.n	800b3dc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b36a:	d118      	bne.n	800b39e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10a      	bne.n	800b388 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37e:	461a      	mov	r2, r3
 800b380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	e013      	b.n	800b3b0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b394:	461a      	mov	r2, r3
 800b396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	e008      	b.n	800b3b0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3bc:	461a      	mov	r2, r3
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	613b      	str	r3, [r7, #16]
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d3b7      	bcc.n	800b354 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	f043 0210 	orr.w	r2, r3, #16
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	699a      	ldr	r2, [r3, #24]
 800b416:	4b10      	ldr	r3, [pc, #64]	; (800b458 <USB_DevInit+0x280>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	f043 0208 	orr.w	r2, r3, #8
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b432:	2b01      	cmp	r3, #1
 800b434:	d107      	bne.n	800b446 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b43e:	f043 0304 	orr.w	r3, r3, #4
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b452:	b004      	add	sp, #16
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	803c3800 	.word	0x803c3800

0800b45c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4a13      	ldr	r2, [pc, #76]	; (800b4c0 <USB_FlushTxFifo+0x64>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d901      	bls.n	800b47c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e01b      	b.n	800b4b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	daf2      	bge.n	800b46a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	019b      	lsls	r3, r3, #6
 800b48c:	f043 0220 	orr.w	r2, r3, #32
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3301      	adds	r3, #1
 800b498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4a08      	ldr	r2, [pc, #32]	; (800b4c0 <USB_FlushTxFifo+0x64>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d901      	bls.n	800b4a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e006      	b.n	800b4b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f003 0320 	and.w	r3, r3, #32
 800b4ae:	2b20      	cmp	r3, #32
 800b4b0:	d0f0      	beq.n	800b494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	00030d40 	.word	0x00030d40

0800b4c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4a11      	ldr	r2, [pc, #68]	; (800b520 <USB_FlushRxFifo+0x5c>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d901      	bls.n	800b4e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e018      	b.n	800b514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	daf2      	bge.n	800b4d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2210      	movs	r2, #16
 800b4f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	4a08      	ldr	r2, [pc, #32]	; (800b520 <USB_FlushRxFifo+0x5c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d901      	bls.n	800b506 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e006      	b.n	800b514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f003 0310 	and.w	r3, r3, #16
 800b50e:	2b10      	cmp	r3, #16
 800b510:	d0f0      	beq.n	800b4f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	00030d40 	.word	0x00030d40

0800b524 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b544:	4313      	orrs	r3, r2
 800b546:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b556:	b480      	push	{r7}
 800b558:	b087      	sub	sp, #28
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f003 0306 	and.w	r3, r3, #6
 800b56e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d002      	beq.n	800b57c <USB_GetDevSpeed+0x26>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b06      	cmp	r3, #6
 800b57a:	d102      	bne.n	800b582 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b57c:	2302      	movs	r3, #2
 800b57e:	75fb      	strb	r3, [r7, #23]
 800b580:	e001      	b.n	800b586 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b582:	230f      	movs	r3, #15
 800b584:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b586:	7dfb      	ldrb	r3, [r7, #23]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d13a      	bne.n	800b626 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b6:	69da      	ldr	r2, [r3, #28]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	68f9      	ldr	r1, [r7, #12]
 800b5ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d155      	bne.n	800b694 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	791b      	ldrb	r3, [r3, #4]
 800b602:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b604:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	059b      	lsls	r3, r3, #22
 800b60a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b60c:	4313      	orrs	r3, r2
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	0151      	lsls	r1, r2, #5
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	440a      	add	r2, r1
 800b616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b61a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	e036      	b.n	800b694 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62c:	69da      	ldr	r2, [r3, #28]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	2101      	movs	r1, #1
 800b638:	fa01 f303 	lsl.w	r3, r1, r3
 800b63c:	041b      	lsls	r3, r3, #16
 800b63e:	68f9      	ldr	r1, [r7, #12]
 800b640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b644:	4313      	orrs	r3, r2
 800b646:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d11a      	bne.n	800b694 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	015a      	lsls	r2, r3, #5
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4413      	add	r3, r2
 800b666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	791b      	ldrb	r3, [r3, #4]
 800b678:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b67a:	430b      	orrs	r3, r1
 800b67c:	4313      	orrs	r3, r2
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b68a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b68e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b692:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
	...

0800b6a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	785b      	ldrb	r3, [r3, #1]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d161      	bne.n	800b784 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6d6:	d11f      	bne.n	800b718 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	0151      	lsls	r1, r2, #5
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	440a      	add	r2, r1
 800b6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	0151      	lsls	r1, r2, #5
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	440a      	add	r2, r1
 800b70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	f003 030f 	and.w	r3, r3, #15
 800b728:	2101      	movs	r1, #1
 800b72a:	fa01 f303 	lsl.w	r3, r1, r3
 800b72e:	b29b      	uxth	r3, r3
 800b730:	43db      	mvns	r3, r3
 800b732:	68f9      	ldr	r1, [r7, #12]
 800b734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b738:	4013      	ands	r3, r2
 800b73a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b742:	69da      	ldr	r2, [r3, #28]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	f003 030f 	and.w	r3, r3, #15
 800b74c:	2101      	movs	r1, #1
 800b74e:	fa01 f303 	lsl.w	r3, r1, r3
 800b752:	b29b      	uxth	r3, r3
 800b754:	43db      	mvns	r3, r3
 800b756:	68f9      	ldr	r1, [r7, #12]
 800b758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b75c:	4013      	ands	r3, r2
 800b75e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	0159      	lsls	r1, r3, #5
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	440b      	add	r3, r1
 800b776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77a:	4619      	mov	r1, r3
 800b77c:	4b35      	ldr	r3, [pc, #212]	; (800b854 <USB_DeactivateEndpoint+0x1b0>)
 800b77e:	4013      	ands	r3, r2
 800b780:	600b      	str	r3, [r1, #0]
 800b782:	e060      	b.n	800b846 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b79a:	d11f      	bne.n	800b7dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	015a      	lsls	r2, r3, #5
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	0151      	lsls	r1, r2, #5
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	440a      	add	r2, r1
 800b7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	0151      	lsls	r1, r2, #5
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	440a      	add	r2, r1
 800b7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	f003 030f 	and.w	r3, r3, #15
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f2:	041b      	lsls	r3, r3, #16
 800b7f4:	43db      	mvns	r3, r3
 800b7f6:	68f9      	ldr	r1, [r7, #12]
 800b7f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b806:	69da      	ldr	r2, [r3, #28]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	f003 030f 	and.w	r3, r3, #15
 800b810:	2101      	movs	r1, #1
 800b812:	fa01 f303 	lsl.w	r3, r1, r3
 800b816:	041b      	lsls	r3, r3, #16
 800b818:	43db      	mvns	r3, r3
 800b81a:	68f9      	ldr	r1, [r7, #12]
 800b81c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b820:	4013      	ands	r3, r2
 800b822:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	015a      	lsls	r2, r3, #5
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	0159      	lsls	r1, r3, #5
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	440b      	add	r3, r1
 800b83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b83e:	4619      	mov	r1, r3
 800b840:	4b05      	ldr	r3, [pc, #20]	; (800b858 <USB_DeactivateEndpoint+0x1b4>)
 800b842:	4013      	ands	r3, r2
 800b844:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	ec337800 	.word	0xec337800
 800b858:	eff37800 	.word	0xeff37800

0800b85c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	785b      	ldrb	r3, [r3, #1]
 800b874:	2b01      	cmp	r3, #1
 800b876:	f040 8128 	bne.w	800baca <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d132      	bne.n	800b8e8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	015a      	lsls	r2, r3, #5
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	4413      	add	r3, r2
 800b88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	0151      	lsls	r1, r2, #5
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	440a      	add	r2, r1
 800b898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b89c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	0151      	lsls	r1, r2, #5
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	015a      	lsls	r2, r3, #5
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	0151      	lsls	r1, r2, #5
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	440a      	add	r2, r1
 800b8dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e0:	0cdb      	lsrs	r3, r3, #19
 800b8e2:	04db      	lsls	r3, r3, #19
 800b8e4:	6113      	str	r3, [r2, #16]
 800b8e6:	e092      	b.n	800ba0e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	0151      	lsls	r1, r2, #5
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	440a      	add	r2, r1
 800b8fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b902:	0cdb      	lsrs	r3, r3, #19
 800b904:	04db      	lsls	r3, r3, #19
 800b906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b922:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b926:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b92a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d11a      	bne.n	800b968 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	691a      	ldr	r2, [r3, #16]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d903      	bls.n	800b946 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	689a      	ldr	r2, [r3, #8]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	0151      	lsls	r1, r2, #5
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	440a      	add	r2, r1
 800b95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b964:	6113      	str	r3, [r2, #16]
 800b966:	e01b      	b.n	800b9a0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	6919      	ldr	r1, [r3, #16]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	440b      	add	r3, r1
 800b980:	1e59      	subs	r1, r3, #1
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	fbb1 f3f3 	udiv	r3, r1, r3
 800b98a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b98c:	4b8d      	ldr	r3, [pc, #564]	; (800bbc4 <USB_EPStartXfer+0x368>)
 800b98e:	400b      	ands	r3, r1
 800b990:	6939      	ldr	r1, [r7, #16]
 800b992:	0148      	lsls	r0, r1, #5
 800b994:	6979      	ldr	r1, [r7, #20]
 800b996:	4401      	add	r1, r0
 800b998:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b99c:	4313      	orrs	r3, r2
 800b99e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ac:	691a      	ldr	r2, [r3, #16]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9b6:	6939      	ldr	r1, [r7, #16]
 800b9b8:	0148      	lsls	r0, r1, #5
 800b9ba:	6979      	ldr	r1, [r7, #20]
 800b9bc:	4401      	add	r1, r0
 800b9be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	791b      	ldrb	r3, [r3, #4]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d11f      	bne.n	800ba0e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	015a      	lsls	r2, r3, #5
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	0151      	lsls	r1, r2, #5
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	440a      	add	r2, r1
 800b9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b9ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	0151      	lsls	r1, r2, #5
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	440a      	add	r2, r1
 800ba04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba0c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	0151      	lsls	r1, r2, #5
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	440a      	add	r2, r1
 800ba24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba2c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	791b      	ldrb	r3, [r3, #4]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d015      	beq.n	800ba62 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 8139 	beq.w	800bcb2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	2101      	movs	r1, #1
 800ba52:	fa01 f303 	lsl.w	r3, r1, r3
 800ba56:	6979      	ldr	r1, [r7, #20]
 800ba58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	634b      	str	r3, [r1, #52]	; 0x34
 800ba60:	e127      	b.n	800bcb2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d110      	bne.n	800ba94 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	0151      	lsls	r1, r2, #5
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	440a      	add	r2, r1
 800ba88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	e00f      	b.n	800bab4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	015a      	lsls	r2, r3, #5
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	0151      	lsls	r1, r2, #5
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	440a      	add	r2, r1
 800baaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bab2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	68d9      	ldr	r1, [r3, #12]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	781a      	ldrb	r2, [r3, #0]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f9a6 	bl	800be14 <USB_WritePacket>
 800bac8:	e0f3      	b.n	800bcb2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	697a      	ldr	r2, [r7, #20]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae4:	0cdb      	lsrs	r3, r3, #19
 800bae6:	04db      	lsls	r3, r3, #19
 800bae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	0151      	lsls	r1, r2, #5
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	440a      	add	r2, r1
 800bb00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb0c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d12f      	bne.n	800bb74 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	689a      	ldr	r2, [r3, #8]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	689a      	ldr	r2, [r3, #8]
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb38:	691a      	ldr	r2, [r3, #16]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb42:	6939      	ldr	r1, [r7, #16]
 800bb44:	0148      	lsls	r0, r1, #5
 800bb46:	6979      	ldr	r1, [r7, #20]
 800bb48:	4401      	add	r1, r0
 800bb4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	0151      	lsls	r1, r2, #5
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	440a      	add	r2, r1
 800bb68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb70:	6113      	str	r3, [r2, #16]
 800bb72:	e061      	b.n	800bc38 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d125      	bne.n	800bbc8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	015a      	lsls	r2, r3, #5
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	4413      	add	r3, r2
 800bb84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb92:	6939      	ldr	r1, [r7, #16]
 800bb94:	0148      	lsls	r0, r1, #5
 800bb96:	6979      	ldr	r1, [r7, #20]
 800bb98:	4401      	add	r1, r0
 800bb9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	0151      	lsls	r1, r2, #5
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	440a      	add	r2, r1
 800bbb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbc0:	6113      	str	r3, [r2, #16]
 800bbc2:	e039      	b.n	800bc38 <USB_EPStartXfer+0x3dc>
 800bbc4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	691a      	ldr	r2, [r3, #16]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	1e5a      	subs	r2, r3, #1
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbdc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	89fa      	ldrh	r2, [r7, #14]
 800bbe4:	fb03 f202 	mul.w	r2, r3, r2
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf8:	691a      	ldr	r2, [r3, #16]
 800bbfa:	89fb      	ldrh	r3, [r7, #14]
 800bbfc:	04d9      	lsls	r1, r3, #19
 800bbfe:	4b2f      	ldr	r3, [pc, #188]	; (800bcbc <USB_EPStartXfer+0x460>)
 800bc00:	400b      	ands	r3, r1
 800bc02:	6939      	ldr	r1, [r7, #16]
 800bc04:	0148      	lsls	r0, r1, #5
 800bc06:	6979      	ldr	r1, [r7, #20]
 800bc08:	4401      	add	r1, r0
 800bc0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1e:	691a      	ldr	r2, [r3, #16]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	6a1b      	ldr	r3, [r3, #32]
 800bc24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc28:	6939      	ldr	r1, [r7, #16]
 800bc2a:	0148      	lsls	r0, r1, #5
 800bc2c:	6979      	ldr	r1, [r7, #20]
 800bc2e:	4401      	add	r1, r0
 800bc30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc34:	4313      	orrs	r3, r2
 800bc36:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	791b      	ldrb	r3, [r3, #4]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d128      	bne.n	800bc92 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d110      	bne.n	800bc72 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	e00f      	b.n	800bc92 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	015a      	lsls	r2, r3, #5
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	4413      	add	r3, r2
 800bc7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	0151      	lsls	r1, r2, #5
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	440a      	add	r2, r1
 800bc88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc90:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bcb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	1ff80000 	.word	0x1ff80000

0800bcc0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b087      	sub	sp, #28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	785b      	ldrb	r3, [r3, #1]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d14a      	bne.n	800bd74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcf6:	f040 8086 	bne.w	800be06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	683a      	ldr	r2, [r7, #0]
 800bd0c:	7812      	ldrb	r2, [r2, #0]
 800bd0e:	0151      	lsls	r1, r2, #5
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	440a      	add	r2, r1
 800bd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	7812      	ldrb	r2, [r2, #0]
 800bd32:	0151      	lsls	r1, r2, #5
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	440a      	add	r2, r1
 800bd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3301      	adds	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f242 7210 	movw	r2, #10000	; 0x2710
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d902      	bls.n	800bd58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	75fb      	strb	r3, [r7, #23]
          break;
 800bd56:	e056      	b.n	800be06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	015a      	lsls	r2, r3, #5
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	4413      	add	r3, r2
 800bd62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd70:	d0e7      	beq.n	800bd42 <USB_EPStopXfer+0x82>
 800bd72:	e048      	b.n	800be06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd8c:	d13b      	bne.n	800be06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	015a      	lsls	r2, r3, #5
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	4413      	add	r3, r2
 800bd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	7812      	ldrb	r2, [r2, #0]
 800bda2:	0151      	lsls	r1, r2, #5
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	440a      	add	r2, r1
 800bda8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bdb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	7812      	ldrb	r2, [r2, #0]
 800bdc6:	0151      	lsls	r1, r2, #5
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	440a      	add	r2, r1
 800bdcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f242 7210 	movw	r2, #10000	; 0x2710
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d902      	bls.n	800bdec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	75fb      	strb	r3, [r7, #23]
          break;
 800bdea:	e00c      	b.n	800be06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be04:	d0e7      	beq.n	800bdd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	371c      	adds	r7, #28
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800be14:	b480      	push	{r7}
 800be16:	b089      	sub	sp, #36	; 0x24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	4611      	mov	r1, r2
 800be20:	461a      	mov	r2, r3
 800be22:	460b      	mov	r3, r1
 800be24:	71fb      	strb	r3, [r7, #7]
 800be26:	4613      	mov	r3, r2
 800be28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800be32:	88bb      	ldrh	r3, [r7, #4]
 800be34:	3303      	adds	r3, #3
 800be36:	089b      	lsrs	r3, r3, #2
 800be38:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800be3a:	2300      	movs	r3, #0
 800be3c:	61bb      	str	r3, [r7, #24]
 800be3e:	e018      	b.n	800be72 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	031a      	lsls	r2, r3, #12
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	4413      	add	r3, r2
 800be48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be4c:	461a      	mov	r2, r3
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6013      	str	r3, [r2, #0]
    pSrc++;
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	3301      	adds	r3, #1
 800be58:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	3301      	adds	r3, #1
 800be5e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	3301      	adds	r3, #1
 800be64:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	3301      	adds	r3, #1
 800be6a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	3301      	adds	r3, #1
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	429a      	cmp	r2, r3
 800be78:	d3e2      	bcc.n	800be40 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3724      	adds	r7, #36	; 0x24
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800be88:	b480      	push	{r7}
 800be8a:	b08b      	sub	sp, #44	; 0x2c
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4613      	mov	r3, r2
 800be94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	089b      	lsrs	r3, r3, #2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bea6:	88fb      	ldrh	r3, [r7, #6]
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800beae:	2300      	movs	r3, #0
 800beb0:	623b      	str	r3, [r7, #32]
 800beb2:	e014      	b.n	800bede <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	601a      	str	r2, [r3, #0]
    pDest++;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	3301      	adds	r3, #1
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	3301      	adds	r3, #1
 800beca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	3301      	adds	r3, #1
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	3301      	adds	r3, #1
 800bed6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	3301      	adds	r3, #1
 800bedc:	623b      	str	r3, [r7, #32]
 800bede:	6a3a      	ldr	r2, [r7, #32]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d3e6      	bcc.n	800beb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bee6:	8bfb      	ldrh	r3, [r7, #30]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01e      	beq.n	800bf2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef6:	461a      	mov	r2, r3
 800bef8:	f107 0310 	add.w	r3, r7, #16
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	fa22 f303 	lsr.w	r3, r2, r3
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	701a      	strb	r2, [r3, #0]
      i++;
 800bf12:	6a3b      	ldr	r3, [r7, #32]
 800bf14:	3301      	adds	r3, #1
 800bf16:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bf1e:	8bfb      	ldrh	r3, [r7, #30]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf24:	8bfb      	ldrh	r3, [r7, #30]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1ea      	bne.n	800bf00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	372c      	adds	r7, #44	; 0x2c
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d12c      	bne.n	800bfae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	db12      	blt.n	800bf8c <USB_EPSetStall+0x54>
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00f      	beq.n	800bf8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	0151      	lsls	r1, r2, #5
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	440a      	add	r2, r1
 800bf82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bf8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	015a      	lsls	r2, r3, #5
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	0151      	lsls	r1, r2, #5
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	440a      	add	r2, r1
 800bfa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfaa:	6013      	str	r3, [r2, #0]
 800bfac:	e02b      	b.n	800c006 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	db12      	blt.n	800bfe6 <USB_EPSetStall+0xae>
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00f      	beq.n	800bfe6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	015a      	lsls	r2, r3, #5
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	4413      	add	r3, r2
 800bfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	0151      	lsls	r1, r2, #5
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	440a      	add	r2, r1
 800bfdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfe4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	0151      	lsls	r1, r2, #5
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	440a      	add	r2, r1
 800bffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c004:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d128      	bne.n	800c082 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	015a      	lsls	r2, r3, #5
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	4413      	add	r3, r2
 800c038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	0151      	lsls	r1, r2, #5
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	440a      	add	r2, r1
 800c046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c04a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c04e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	791b      	ldrb	r3, [r3, #4]
 800c054:	2b03      	cmp	r3, #3
 800c056:	d003      	beq.n	800c060 <USB_EPClearStall+0x4c>
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	791b      	ldrb	r3, [r3, #4]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d138      	bne.n	800c0d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	0151      	lsls	r1, r2, #5
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	440a      	add	r2, r1
 800c076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c07a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	e027      	b.n	800c0d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	015a      	lsls	r2, r3, #5
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4413      	add	r3, r2
 800c08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	0151      	lsls	r1, r2, #5
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	440a      	add	r2, r1
 800c098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c09c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	791b      	ldrb	r3, [r3, #4]
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d003      	beq.n	800c0b2 <USB_EPClearStall+0x9e>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	791b      	ldrb	r3, [r3, #4]
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d10f      	bne.n	800c0d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c102:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	011b      	lsls	r3, r3, #4
 800c110:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c114:	68f9      	ldr	r1, [r7, #12]
 800c116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c11a:	4313      	orrs	r3, r2
 800c11c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c15a:	f023 0302 	bic.w	r3, r3, #2
 800c15e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c16e:	b480      	push	{r7}
 800c170:	b085      	sub	sp, #20
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c188:	f023 0303 	bic.w	r3, r3, #3
 800c18c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c19c:	f043 0302 	orr.w	r3, r3, #2
 800c1a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b085      	sub	sp, #20
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	0c1b      	lsrs	r3, r3, #16
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c20a:	b480      	push	{r7}
 800c20c:	b085      	sub	sp, #20
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	4013      	ands	r3, r2
 800c22c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	b29b      	uxth	r3, r3
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c24e:	78fb      	ldrb	r3, [r7, #3]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	4013      	ands	r3, r2
 800c26a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c26c:	68bb      	ldr	r3, [r7, #8]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b087      	sub	sp, #28
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	460b      	mov	r3, r1
 800c284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	f003 030f 	and.w	r3, r3, #15
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2aa:	01db      	lsls	r3, r3, #7
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b083      	sub	sp, #12
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b085      	sub	sp, #20
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c30c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c310:	f023 0307 	bic.w	r3, r3, #7
 800c314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	333c      	adds	r3, #60	; 0x3c
 800c34a:	3304      	adds	r3, #4
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	4a1c      	ldr	r2, [pc, #112]	; (800c3c4 <USB_EP0_OutStart+0x8c>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d90a      	bls.n	800c36e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c368:	d101      	bne.n	800c36e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e024      	b.n	800c3b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c374:	461a      	mov	r2, r3
 800c376:	2300      	movs	r3, #0
 800c378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c38c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c394:	691b      	ldr	r3, [r3, #16]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c39c:	f043 0318 	orr.w	r3, r3, #24
 800c3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c3b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	4f54300a 	.word	0x4f54300a

0800c3c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	4a13      	ldr	r2, [pc, #76]	; (800c42c <USB_CoreReset+0x64>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d901      	bls.n	800c3e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e01b      	b.n	800c41e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	daf2      	bge.n	800c3d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	f043 0201 	orr.w	r2, r3, #1
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4a09      	ldr	r2, [pc, #36]	; (800c42c <USB_CoreReset+0x64>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d901      	bls.n	800c410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e006      	b.n	800c41e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	f003 0301 	and.w	r3, r3, #1
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d0f0      	beq.n	800c3fe <USB_CoreReset+0x36>

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	00030d40 	.word	0x00030d40

0800c430 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c434:	4904      	ldr	r1, [pc, #16]	; (800c448 <MX_FATFS_Init+0x18>)
 800c436:	4805      	ldr	r0, [pc, #20]	; (800c44c <MX_FATFS_Init+0x1c>)
 800c438:	f004 fe7c 	bl	8011134 <FATFS_LinkDriver>
 800c43c:	4603      	mov	r3, r0
 800c43e:	461a      	mov	r2, r3
 800c440:	4b03      	ldr	r3, [pc, #12]	; (800c450 <MX_FATFS_Init+0x20>)
 800c442:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c444:	bf00      	nop
 800c446:	bd80      	pop	{r7, pc}
 800c448:	2000fec8 	.word	0x2000fec8
 800c44c:	080168fc 	.word	0x080168fc
 800c450:	2000fec4 	.word	0x2000fec4

0800c454 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c454:	b480      	push	{r7}
 800c456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c458:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c46e:	f000 f8c6 	bl	800c5fe <BSP_SD_IsDetected>
 800c472:	4603      	mov	r3, r0
 800c474:	2b01      	cmp	r3, #1
 800c476:	d001      	beq.n	800c47c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c478:	2302      	movs	r3, #2
 800c47a:	e012      	b.n	800c4a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c47c:	480b      	ldr	r0, [pc, #44]	; (800c4ac <BSP_SD_Init+0x48>)
 800c47e:	f7fc fcd7 	bl	8008e30 <HAL_SD_Init>
 800c482:	4603      	mov	r3, r0
 800c484:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d109      	bne.n	800c4a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c48c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c490:	4806      	ldr	r0, [pc, #24]	; (800c4ac <BSP_SD_Init+0x48>)
 800c492:	f7fd fa87 	bl	80099a4 <HAL_SD_ConfigWideBusOperation>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20000368 	.word	0x20000368

0800c4b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800c4c0:	4b13      	ldr	r3, [pc, #76]	; (800c510 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	4b11      	ldr	r3, [pc, #68]	; (800c510 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0201 	bic.w	r2, r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4d4:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d8:	2200      	movs	r2, #0
 800c4da:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800c4dc:	4b0c      	ldr	r3, [pc, #48]	; (800c510 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	4b0a      	ldr	r3, [pc, #40]	; (800c510 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 0210 	bic.w	r2, r2, #16
 800c4ee:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	68f9      	ldr	r1, [r7, #12]
 800c4f6:	4806      	ldr	r0, [pc, #24]	; (800c510 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4f8:	f7fc fd70 	bl	8008fdc <HAL_SD_ReadBlocks_DMA>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c506:	7dfb      	ldrb	r3, [r7, #23]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000368 	.word	0x20000368

0800c514 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800c524:	4b13      	ldr	r3, [pc, #76]	; (800c574 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	4b11      	ldr	r3, [pc, #68]	; (800c574 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 0201 	bic.w	r2, r2, #1
 800c536:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c538:	4b0e      	ldr	r3, [pc, #56]	; (800c574 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53c:	2210      	movs	r2, #16
 800c53e:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800c540:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	4b0a      	ldr	r3, [pc, #40]	; (800c574 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 0210 	orr.w	r2, r2, #16
 800c552:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	68f9      	ldr	r1, [r7, #12]
 800c55a:	4806      	ldr	r0, [pc, #24]	; (800c574 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c55c:	f7fc fe06 	bl	800916c <HAL_SD_WriteBlocks_DMA>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20000368 	.word	0x20000368

0800c578 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c57c:	4805      	ldr	r0, [pc, #20]	; (800c594 <BSP_SD_GetCardState+0x1c>)
 800c57e:	f7fd facd 	bl	8009b1c <HAL_SD_GetCardState>
 800c582:	4603      	mov	r3, r0
 800c584:	2b04      	cmp	r3, #4
 800c586:	bf14      	ite	ne
 800c588:	2301      	movne	r3, #1
 800c58a:	2300      	moveq	r3, #0
 800c58c:	b2db      	uxtb	r3, r3
}
 800c58e:	4618      	mov	r0, r3
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20000368 	.word	0x20000368

0800c598 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	4803      	ldr	r0, [pc, #12]	; (800c5b0 <BSP_SD_GetCardInfo+0x18>)
 800c5a4:	f7fd f9d2 	bl	800994c <HAL_SD_GetCardInfo>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20000368 	.word	0x20000368

0800c5b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c5bc:	f000 f818 	bl	800c5f0 <BSP_SD_AbortCallback>
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c5d0:	f000 f9a8 	bl	800c924 <BSP_SD_WriteCpltCallback>
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c5e4:	f000 f9aa 	bl	800c93c <BSP_SD_ReadCpltCallback>
}
 800c5e8:	bf00      	nop
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	af00      	add	r7, sp, #0

}
 800c5f4:	bf00      	nop
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c604:	2301      	movs	r3, #1
 800c606:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c608:	f000 f80c 	bl	800c624 <BSP_PlatformIsDetected>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c612:	2300      	movs	r3, #0
 800c614:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c616:	79fb      	ldrb	r3, [r7, #7]
 800c618:	b2db      	uxtb	r3, r3
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c62a:	2301      	movs	r3, #1
 800c62c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c62e:	2180      	movs	r1, #128	; 0x80
 800c630:	4806      	ldr	r0, [pc, #24]	; (800c64c <BSP_PlatformIsDetected+0x28>)
 800c632:	f7f8 f803 	bl	800463c <HAL_GPIO_ReadPin>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c63c:	2300      	movs	r3, #0
 800c63e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c640:	79fb      	ldrb	r3, [r7, #7]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	48000800 	.word	0x48000800

0800c650 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c658:	f7f7 facc 	bl	8003bf4 <HAL_GetTick>
 800c65c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c65e:	e006      	b.n	800c66e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c660:	f7ff ff8a 	bl	800c578 <BSP_SD_GetCardState>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	e009      	b.n	800c682 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c66e:	f7f7 fac1 	bl	8003bf4 <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d8f0      	bhi.n	800c660 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c67e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c696:	4b0b      	ldr	r3, [pc, #44]	; (800c6c4 <SD_CheckStatus+0x38>)
 800c698:	2201      	movs	r2, #1
 800c69a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c69c:	f7ff ff6c 	bl	800c578 <BSP_SD_GetCardState>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d107      	bne.n	800c6b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c6a6:	4b07      	ldr	r3, [pc, #28]	; (800c6c4 <SD_CheckStatus+0x38>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f023 0301 	bic.w	r3, r3, #1
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	4b04      	ldr	r3, [pc, #16]	; (800c6c4 <SD_CheckStatus+0x38>)
 800c6b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c6b6:	4b03      	ldr	r3, [pc, #12]	; (800c6c4 <SD_CheckStatus+0x38>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	b2db      	uxtb	r3, r3
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20000009 	.word	0x20000009

0800c6c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c6d2:	f7ff fec7 	bl	800c464 <BSP_SD_Init>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d107      	bne.n	800c6ec <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c6dc:	79fb      	ldrb	r3, [r7, #7]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff ffd4 	bl	800c68c <SD_CheckStatus>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	4b04      	ldr	r3, [pc, #16]	; (800c6fc <SD_initialize+0x34>)
 800c6ea:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c6ec:	4b03      	ldr	r3, [pc, #12]	; (800c6fc <SD_initialize+0x34>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	b2db      	uxtb	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20000009 	.word	0x20000009

0800c700 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7ff ffbd 	bl	800c68c <SD_CheckStatus>
 800c712:	4603      	mov	r3, r0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	607a      	str	r2, [r7, #4]
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	4603      	mov	r3, r0
 800c72a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c730:	f247 5030 	movw	r0, #30000	; 0x7530
 800c734:	f7ff ff8c 	bl	800c650 <SD_CheckStatusWithTimeout>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	da01      	bge.n	800c742 <SD_read+0x26>
  {
    return res;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	e03b      	b.n	800c7ba <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	68b8      	ldr	r0, [r7, #8]
 800c748:	f7ff feb2 	bl	800c4b0 <BSP_SD_ReadBlocks_DMA>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d132      	bne.n	800c7b8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c752:	4b1c      	ldr	r3, [pc, #112]	; (800c7c4 <SD_read+0xa8>)
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c758:	f7f7 fa4c 	bl	8003bf4 <HAL_GetTick>
 800c75c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c75e:	bf00      	nop
 800c760:	4b18      	ldr	r3, [pc, #96]	; (800c7c4 <SD_read+0xa8>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d108      	bne.n	800c77a <SD_read+0x5e>
 800c768:	f7f7 fa44 	bl	8003bf4 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	f247 522f 	movw	r2, #29999	; 0x752f
 800c776:	4293      	cmp	r3, r2
 800c778:	d9f2      	bls.n	800c760 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <SD_read+0xa8>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d102      	bne.n	800c788 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	75fb      	strb	r3, [r7, #23]
 800c786:	e017      	b.n	800c7b8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c788:	4b0e      	ldr	r3, [pc, #56]	; (800c7c4 <SD_read+0xa8>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c78e:	f7f7 fa31 	bl	8003bf4 <HAL_GetTick>
 800c792:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c794:	e007      	b.n	800c7a6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c796:	f7ff feef 	bl	800c578 <BSP_SD_GetCardState>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d102      	bne.n	800c7a6 <SD_read+0x8a>
          {
            res = RES_OK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c7a4:	e008      	b.n	800c7b8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c7a6:	f7f7 fa25 	bl	8003bf4 <HAL_GetTick>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d9ee      	bls.n	800c796 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20010330 	.word	0x20010330

0800c7c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c7dc:	4b24      	ldr	r3, [pc, #144]	; (800c870 <SD_write+0xa8>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c7e2:	f247 5030 	movw	r0, #30000	; 0x7530
 800c7e6:	f7ff ff33 	bl	800c650 <SD_CheckStatusWithTimeout>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	da01      	bge.n	800c7f4 <SD_write+0x2c>
  {
    return res;
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
 800c7f2:	e038      	b.n	800c866 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	68b8      	ldr	r0, [r7, #8]
 800c7fa:	f7ff fe8b 	bl	800c514 <BSP_SD_WriteBlocks_DMA>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d12f      	bne.n	800c864 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c804:	f7f7 f9f6 	bl	8003bf4 <HAL_GetTick>
 800c808:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c80a:	bf00      	nop
 800c80c:	4b18      	ldr	r3, [pc, #96]	; (800c870 <SD_write+0xa8>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d108      	bne.n	800c826 <SD_write+0x5e>
 800c814:	f7f7 f9ee 	bl	8003bf4 <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c822:	4293      	cmp	r3, r2
 800c824:	d9f2      	bls.n	800c80c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c826:	4b12      	ldr	r3, [pc, #72]	; (800c870 <SD_write+0xa8>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d102      	bne.n	800c834 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	75fb      	strb	r3, [r7, #23]
 800c832:	e017      	b.n	800c864 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c834:	4b0e      	ldr	r3, [pc, #56]	; (800c870 <SD_write+0xa8>)
 800c836:	2200      	movs	r2, #0
 800c838:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c83a:	f7f7 f9db 	bl	8003bf4 <HAL_GetTick>
 800c83e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c840:	e007      	b.n	800c852 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c842:	f7ff fe99 	bl	800c578 <BSP_SD_GetCardState>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <SD_write+0x8a>
          {
            res = RES_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
            break;
 800c850:	e008      	b.n	800c864 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c852:	f7f7 f9cf 	bl	8003bf4 <HAL_GetTick>
 800c856:	4602      	mov	r2, r0
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c860:	4293      	cmp	r3, r2
 800c862:	d9ee      	bls.n	800c842 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c864:	7dfb      	ldrb	r3, [r7, #23]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	2001032c 	.word	0x2001032c

0800c874 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	; 0x30
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	603a      	str	r2, [r7, #0]
 800c87e:	71fb      	strb	r3, [r7, #7]
 800c880:	460b      	mov	r3, r1
 800c882:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c88a:	4b25      	ldr	r3, [pc, #148]	; (800c920 <SD_ioctl+0xac>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	f003 0301 	and.w	r3, r3, #1
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <SD_ioctl+0x28>
 800c898:	2303      	movs	r3, #3
 800c89a:	e03c      	b.n	800c916 <SD_ioctl+0xa2>

  switch (cmd)
 800c89c:	79bb      	ldrb	r3, [r7, #6]
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d834      	bhi.n	800c90c <SD_ioctl+0x98>
 800c8a2:	a201      	add	r2, pc, #4	; (adr r2, 800c8a8 <SD_ioctl+0x34>)
 800c8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a8:	0800c8b9 	.word	0x0800c8b9
 800c8ac:	0800c8c1 	.word	0x0800c8c1
 800c8b0:	0800c8d9 	.word	0x0800c8d9
 800c8b4:	0800c8f3 	.word	0x0800c8f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8be:	e028      	b.n	800c912 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8c0:	f107 030c 	add.w	r3, r7, #12
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7ff fe67 	bl	800c598 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8d6:	e01c      	b.n	800c912 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8d8:	f107 030c 	add.w	r3, r7, #12
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff fe5b 	bl	800c598 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8f0:	e00f      	b.n	800c912 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8f2:	f107 030c 	add.w	r3, r7, #12
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff fe4e 	bl	800c598 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	0a5a      	lsrs	r2, r3, #9
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c90a:	e002      	b.n	800c912 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c90c:	2304      	movs	r3, #4
 800c90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c916:	4618      	mov	r0, r3
 800c918:	3730      	adds	r7, #48	; 0x30
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000009 	.word	0x20000009

0800c924 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c924:	b480      	push	{r7}
 800c926:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c928:	4b03      	ldr	r3, [pc, #12]	; (800c938 <BSP_SD_WriteCpltCallback+0x14>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	601a      	str	r2, [r3, #0]
}
 800c92e:	bf00      	nop
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr
 800c938:	2001032c 	.word	0x2001032c

0800c93c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c93c:	b480      	push	{r7}
 800c93e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c940:	4b03      	ldr	r3, [pc, #12]	; (800c950 <BSP_SD_ReadCpltCallback+0x14>)
 800c942:	2201      	movs	r2, #1
 800c944:	601a      	str	r2, [r3, #0]
}
 800c946:	bf00      	nop
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	20010330 	.word	0x20010330

0800c954 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c960:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c964:	f005 fa16 	bl	8011d94 <USBD_static_malloc>
 800c968:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	32b0      	adds	r2, #176	; 0xb0
 800c97a:	2100      	movs	r1, #0
 800c97c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c980:	2302      	movs	r3, #2
 800c982:	e0d4      	b.n	800cb2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c984:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c988:	2100      	movs	r1, #0
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f006 fa91 	bl	8012eb2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	32b0      	adds	r2, #176	; 0xb0
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	32b0      	adds	r2, #176	; 0xb0
 800c9aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	7c1b      	ldrb	r3, [r3, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d138      	bne.n	800ca2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c9bc:	4b5e      	ldr	r3, [pc, #376]	; (800cb38 <USBD_CDC_Init+0x1e4>)
 800c9be:	7819      	ldrb	r1, [r3, #0]
 800c9c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f004 ffd0 	bl	801196c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c9cc:	4b5a      	ldr	r3, [pc, #360]	; (800cb38 <USBD_CDC_Init+0x1e4>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	f003 020f 	and.w	r2, r3, #15
 800c9d4:	6879      	ldr	r1, [r7, #4]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	440b      	add	r3, r1
 800c9e0:	3324      	adds	r3, #36	; 0x24
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c9e6:	4b55      	ldr	r3, [pc, #340]	; (800cb3c <USBD_CDC_Init+0x1e8>)
 800c9e8:	7819      	ldrb	r1, [r3, #0]
 800c9ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f004 ffbb 	bl	801196c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c9f6:	4b51      	ldr	r3, [pc, #324]	; (800cb3c <USBD_CDC_Init+0x1e8>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	f003 020f 	and.w	r2, r3, #15
 800c9fe:	6879      	ldr	r1, [r7, #4]
 800ca00:	4613      	mov	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	440b      	add	r3, r1
 800ca0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca0e:	2201      	movs	r2, #1
 800ca10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca12:	4b4b      	ldr	r3, [pc, #300]	; (800cb40 <USBD_CDC_Init+0x1ec>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	f003 020f 	and.w	r2, r3, #15
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4413      	add	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	440b      	add	r3, r1
 800ca26:	3326      	adds	r3, #38	; 0x26
 800ca28:	2210      	movs	r2, #16
 800ca2a:	801a      	strh	r2, [r3, #0]
 800ca2c:	e035      	b.n	800ca9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca2e:	4b42      	ldr	r3, [pc, #264]	; (800cb38 <USBD_CDC_Init+0x1e4>)
 800ca30:	7819      	ldrb	r1, [r3, #0]
 800ca32:	2340      	movs	r3, #64	; 0x40
 800ca34:	2202      	movs	r2, #2
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f004 ff98 	bl	801196c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca3c:	4b3e      	ldr	r3, [pc, #248]	; (800cb38 <USBD_CDC_Init+0x1e4>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	f003 020f 	and.w	r2, r3, #15
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	440b      	add	r3, r1
 800ca50:	3324      	adds	r3, #36	; 0x24
 800ca52:	2201      	movs	r2, #1
 800ca54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca56:	4b39      	ldr	r3, [pc, #228]	; (800cb3c <USBD_CDC_Init+0x1e8>)
 800ca58:	7819      	ldrb	r1, [r3, #0]
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f004 ff84 	bl	801196c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca64:	4b35      	ldr	r3, [pc, #212]	; (800cb3c <USBD_CDC_Init+0x1e8>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f003 020f 	and.w	r2, r3, #15
 800ca6c:	6879      	ldr	r1, [r7, #4]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	440b      	add	r3, r1
 800ca78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ca80:	4b2f      	ldr	r3, [pc, #188]	; (800cb40 <USBD_CDC_Init+0x1ec>)
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	f003 020f 	and.w	r2, r3, #15
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	440b      	add	r3, r1
 800ca94:	3326      	adds	r3, #38	; 0x26
 800ca96:	2210      	movs	r2, #16
 800ca98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ca9a:	4b29      	ldr	r3, [pc, #164]	; (800cb40 <USBD_CDC_Init+0x1ec>)
 800ca9c:	7819      	ldrb	r1, [r3, #0]
 800ca9e:	2308      	movs	r3, #8
 800caa0:	2203      	movs	r2, #3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f004 ff62 	bl	801196c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800caa8:	4b25      	ldr	r3, [pc, #148]	; (800cb40 <USBD_CDC_Init+0x1ec>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	f003 020f 	and.w	r2, r3, #15
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	4613      	mov	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	440b      	add	r3, r1
 800cabc:	3324      	adds	r3, #36	; 0x24
 800cabe:	2201      	movs	r2, #1
 800cac0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	33b0      	adds	r3, #176	; 0xb0
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800caf8:	2302      	movs	r3, #2
 800cafa:	e018      	b.n	800cb2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7c1b      	ldrb	r3, [r3, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb04:	4b0d      	ldr	r3, [pc, #52]	; (800cb3c <USBD_CDC_Init+0x1e8>)
 800cb06:	7819      	ldrb	r1, [r3, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f005 f8a4 	bl	8011c60 <USBD_LL_PrepareReceive>
 800cb18:	e008      	b.n	800cb2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb1a:	4b08      	ldr	r3, [pc, #32]	; (800cb3c <USBD_CDC_Init+0x1e8>)
 800cb1c:	7819      	ldrb	r1, [r3, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f005 f89a 	bl	8011c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20000093 	.word	0x20000093
 800cb3c:	20000094 	.word	0x20000094
 800cb40:	20000095 	.word	0x20000095

0800cb44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cb50:	4b3a      	ldr	r3, [pc, #232]	; (800cc3c <USBD_CDC_DeInit+0xf8>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f004 ff46 	bl	80119e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cb5c:	4b37      	ldr	r3, [pc, #220]	; (800cc3c <USBD_CDC_DeInit+0xf8>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	f003 020f 	and.w	r2, r3, #15
 800cb64:	6879      	ldr	r1, [r7, #4]
 800cb66:	4613      	mov	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	440b      	add	r3, r1
 800cb70:	3324      	adds	r3, #36	; 0x24
 800cb72:	2200      	movs	r2, #0
 800cb74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cb76:	4b32      	ldr	r3, [pc, #200]	; (800cc40 <USBD_CDC_DeInit+0xfc>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f004 ff33 	bl	80119e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cb82:	4b2f      	ldr	r3, [pc, #188]	; (800cc40 <USBD_CDC_DeInit+0xfc>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	f003 020f 	and.w	r2, r3, #15
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cb9e:	4b29      	ldr	r3, [pc, #164]	; (800cc44 <USBD_CDC_DeInit+0x100>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f004 ff1f 	bl	80119e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cbaa:	4b26      	ldr	r3, [pc, #152]	; (800cc44 <USBD_CDC_DeInit+0x100>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 020f 	and.w	r2, r3, #15
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	3324      	adds	r3, #36	; 0x24
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cbc4:	4b1f      	ldr	r3, [pc, #124]	; (800cc44 <USBD_CDC_DeInit+0x100>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	f003 020f 	and.w	r2, r3, #15
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4413      	add	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	440b      	add	r3, r1
 800cbd8:	3326      	adds	r3, #38	; 0x26
 800cbda:	2200      	movs	r2, #0
 800cbdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	32b0      	adds	r2, #176	; 0xb0
 800cbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01f      	beq.n	800cc30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	33b0      	adds	r3, #176	; 0xb0
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	32b0      	adds	r2, #176	; 0xb0
 800cc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f005 f8cc 	bl	8011db0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	32b0      	adds	r2, #176	; 0xb0
 800cc22:	2100      	movs	r1, #0
 800cc24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000093 	.word	0x20000093
 800cc40:	20000094 	.word	0x20000094
 800cc44:	20000095 	.word	0x20000095

0800cc48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	32b0      	adds	r2, #176	; 0xb0
 800cc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cc66:	2300      	movs	r3, #0
 800cc68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e0bf      	b.n	800cdf8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d050      	beq.n	800cd26 <USBD_CDC_Setup+0xde>
 800cc84:	2b20      	cmp	r3, #32
 800cc86:	f040 80af 	bne.w	800cde8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	88db      	ldrh	r3, [r3, #6]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d03a      	beq.n	800cd08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	b25b      	sxtb	r3, r3
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	da1b      	bge.n	800ccd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	33b0      	adds	r3, #176	; 0xb0
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ccb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	88d2      	ldrh	r2, [r2, #6]
 800ccb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	88db      	ldrh	r3, [r3, #6]
 800ccbe:	2b07      	cmp	r3, #7
 800ccc0:	bf28      	it	cs
 800ccc2:	2307      	movcs	r3, #7
 800ccc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	89fa      	ldrh	r2, [r7, #14]
 800ccca:	4619      	mov	r1, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fd73 	bl	800e7b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ccd2:	e090      	b.n	800cdf6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	785a      	ldrb	r2, [r3, #1]
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	88db      	ldrh	r3, [r3, #6]
 800cce2:	2b3f      	cmp	r3, #63	; 0x3f
 800cce4:	d803      	bhi.n	800ccee <USBD_CDC_Setup+0xa6>
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	88db      	ldrh	r3, [r3, #6]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	e000      	b.n	800ccf0 <USBD_CDC_Setup+0xa8>
 800ccee:	2240      	movs	r2, #64	; 0x40
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ccf6:	6939      	ldr	r1, [r7, #16]
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f001 fd85 	bl	800e810 <USBD_CtlPrepareRx>
      break;
 800cd06:	e076      	b.n	800cdf6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	33b0      	adds	r3, #176	; 0xb0
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	7850      	ldrb	r0, [r2, #1]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	4798      	blx	r3
      break;
 800cd24:	e067      	b.n	800cdf6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	785b      	ldrb	r3, [r3, #1]
 800cd2a:	2b0b      	cmp	r3, #11
 800cd2c:	d851      	bhi.n	800cdd2 <USBD_CDC_Setup+0x18a>
 800cd2e:	a201      	add	r2, pc, #4	; (adr r2, 800cd34 <USBD_CDC_Setup+0xec>)
 800cd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd34:	0800cd65 	.word	0x0800cd65
 800cd38:	0800cde1 	.word	0x0800cde1
 800cd3c:	0800cdd3 	.word	0x0800cdd3
 800cd40:	0800cdd3 	.word	0x0800cdd3
 800cd44:	0800cdd3 	.word	0x0800cdd3
 800cd48:	0800cdd3 	.word	0x0800cdd3
 800cd4c:	0800cdd3 	.word	0x0800cdd3
 800cd50:	0800cdd3 	.word	0x0800cdd3
 800cd54:	0800cdd3 	.word	0x0800cdd3
 800cd58:	0800cdd3 	.word	0x0800cdd3
 800cd5c:	0800cd8f 	.word	0x0800cd8f
 800cd60:	0800cdb9 	.word	0x0800cdb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d107      	bne.n	800cd80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cd70:	f107 030a 	add.w	r3, r7, #10
 800cd74:	2202      	movs	r2, #2
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f001 fd1d 	bl	800e7b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd7e:	e032      	b.n	800cde6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f001 fca7 	bl	800e6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	75fb      	strb	r3, [r7, #23]
          break;
 800cd8c:	e02b      	b.n	800cde6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d107      	bne.n	800cdaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cd9a:	f107 030d 	add.w	r3, r7, #13
 800cd9e:	2201      	movs	r2, #1
 800cda0:	4619      	mov	r1, r3
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 fd08 	bl	800e7b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cda8:	e01d      	b.n	800cde6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f001 fc92 	bl	800e6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	75fb      	strb	r3, [r7, #23]
          break;
 800cdb6:	e016      	b.n	800cde6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d00f      	beq.n	800cde4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f001 fc85 	bl	800e6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cdd0:	e008      	b.n	800cde4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f001 fc7e 	bl	800e6d6 <USBD_CtlError>
          ret = USBD_FAIL;
 800cdda:	2303      	movs	r3, #3
 800cddc:	75fb      	strb	r3, [r7, #23]
          break;
 800cdde:	e002      	b.n	800cde6 <USBD_CDC_Setup+0x19e>
          break;
 800cde0:	bf00      	nop
 800cde2:	e008      	b.n	800cdf6 <USBD_CDC_Setup+0x1ae>
          break;
 800cde4:	bf00      	nop
      }
      break;
 800cde6:	e006      	b.n	800cdf6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f001 fc73 	bl	800e6d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	75fb      	strb	r3, [r7, #23]
      break;
 800cdf4:	bf00      	nop
  }

  return (uint8_t)ret;
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	32b0      	adds	r2, #176	; 0xb0
 800ce1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d101      	bne.n	800ce2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ce26:	2303      	movs	r3, #3
 800ce28:	e065      	b.n	800cef6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	32b0      	adds	r2, #176	; 0xb0
 800ce34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ce3a:	78fb      	ldrb	r3, [r7, #3]
 800ce3c:	f003 020f 	and.w	r2, r3, #15
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	4613      	mov	r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	4413      	add	r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	440b      	add	r3, r1
 800ce4c:	3318      	adds	r3, #24
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d02f      	beq.n	800ceb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ce54:	78fb      	ldrb	r3, [r7, #3]
 800ce56:	f003 020f 	and.w	r2, r3, #15
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	440b      	add	r3, r1
 800ce66:	3318      	adds	r3, #24
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	78fb      	ldrb	r3, [r7, #3]
 800ce6c:	f003 010f 	and.w	r1, r3, #15
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	460b      	mov	r3, r1
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4403      	add	r3, r0
 800ce7c:	3344      	adds	r3, #68	; 0x44
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	fbb2 f1f3 	udiv	r1, r2, r3
 800ce84:	fb01 f303 	mul.w	r3, r1, r3
 800ce88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d112      	bne.n	800ceb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	f003 020f 	and.w	r2, r3, #15
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	440b      	add	r3, r1
 800cea0:	3318      	adds	r3, #24
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cea6:	78f9      	ldrb	r1, [r7, #3]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	2200      	movs	r2, #0
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f004 fe9f 	bl	8011bf0 <USBD_LL_Transmit>
 800ceb2:	e01f      	b.n	800cef4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	33b0      	adds	r3, #176	; 0xb0
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d010      	beq.n	800cef4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	33b0      	adds	r3, #176	; 0xb0
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cef0:	78fa      	ldrb	r2, [r7, #3]
 800cef2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	32b0      	adds	r2, #176	; 0xb0
 800cf14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	32b0      	adds	r2, #176	; 0xb0
 800cf24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e01a      	b.n	800cf66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f004 fecb 	bl	8011cd0 <USBD_LL_GetRxDataSize>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	33b0      	adds	r3, #176	; 0xb0
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf60:	4611      	mov	r1, r2
 800cf62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b084      	sub	sp, #16
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	32b0      	adds	r2, #176	; 0xb0
 800cf80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e025      	b.n	800cfdc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	33b0      	adds	r3, #176	; 0xb0
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d01a      	beq.n	800cfda <USBD_CDC_EP0_RxReady+0x6c>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfaa:	2bff      	cmp	r3, #255	; 0xff
 800cfac:	d015      	beq.n	800cfda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	33b0      	adds	r3, #176	; 0xb0
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4413      	add	r3, r2
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cfc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cfce:	b292      	uxth	r2, r2
 800cfd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	22ff      	movs	r2, #255	; 0xff
 800cfd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cfec:	2182      	movs	r1, #130	; 0x82
 800cfee:	4818      	ldr	r0, [pc, #96]	; (800d050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cff0:	f000 fd0f 	bl	800da12 <USBD_GetEpDesc>
 800cff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cff6:	2101      	movs	r1, #1
 800cff8:	4815      	ldr	r0, [pc, #84]	; (800d050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cffa:	f000 fd0a 	bl	800da12 <USBD_GetEpDesc>
 800cffe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d000:	2181      	movs	r1, #129	; 0x81
 800d002:	4813      	ldr	r0, [pc, #76]	; (800d050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d004:	f000 fd05 	bl	800da12 <USBD_GetEpDesc>
 800d008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2210      	movs	r2, #16
 800d014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d006      	beq.n	800d02a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	2200      	movs	r2, #0
 800d020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d024:	711a      	strb	r2, [r3, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d006      	beq.n	800d03e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d038:	711a      	strb	r2, [r3, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2243      	movs	r2, #67	; 0x43
 800d042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d044:	4b02      	ldr	r3, [pc, #8]	; (800d050 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d046:	4618      	mov	r0, r3
 800d048:	3718      	adds	r7, #24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20000050 	.word	0x20000050

0800d054 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d05c:	2182      	movs	r1, #130	; 0x82
 800d05e:	4818      	ldr	r0, [pc, #96]	; (800d0c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d060:	f000 fcd7 	bl	800da12 <USBD_GetEpDesc>
 800d064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d066:	2101      	movs	r1, #1
 800d068:	4815      	ldr	r0, [pc, #84]	; (800d0c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d06a:	f000 fcd2 	bl	800da12 <USBD_GetEpDesc>
 800d06e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d070:	2181      	movs	r1, #129	; 0x81
 800d072:	4813      	ldr	r0, [pc, #76]	; (800d0c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d074:	f000 fccd 	bl	800da12 <USBD_GetEpDesc>
 800d078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	2210      	movs	r2, #16
 800d084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d006      	beq.n	800d09a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	2200      	movs	r2, #0
 800d090:	711a      	strb	r2, [r3, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f042 0202 	orr.w	r2, r2, #2
 800d098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d006      	beq.n	800d0ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	711a      	strb	r2, [r3, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f042 0202 	orr.w	r2, r2, #2
 800d0ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2243      	movs	r2, #67	; 0x43
 800d0b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0b4:	4b02      	ldr	r3, [pc, #8]	; (800d0c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20000050 	.word	0x20000050

0800d0c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0cc:	2182      	movs	r1, #130	; 0x82
 800d0ce:	4818      	ldr	r0, [pc, #96]	; (800d130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d0d0:	f000 fc9f 	bl	800da12 <USBD_GetEpDesc>
 800d0d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	4815      	ldr	r0, [pc, #84]	; (800d130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d0da:	f000 fc9a 	bl	800da12 <USBD_GetEpDesc>
 800d0de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0e0:	2181      	movs	r1, #129	; 0x81
 800d0e2:	4813      	ldr	r0, [pc, #76]	; (800d130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d0e4:	f000 fc95 	bl	800da12 <USBD_GetEpDesc>
 800d0e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2210      	movs	r2, #16
 800d0f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d006      	beq.n	800d10a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d104:	711a      	strb	r2, [r3, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d006      	beq.n	800d11e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d118:	711a      	strb	r2, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2243      	movs	r2, #67	; 0x43
 800d122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d124:	4b02      	ldr	r3, [pc, #8]	; (800d130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20000050 	.word	0x20000050

0800d134 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	220a      	movs	r2, #10
 800d140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d142:	4b03      	ldr	r3, [pc, #12]	; (800d150 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	2000000c 	.word	0x2000000c

0800d154 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d164:	2303      	movs	r3, #3
 800d166:	e009      	b.n	800d17c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	33b0      	adds	r3, #176	; 0xb0
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d188:	b480      	push	{r7}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	32b0      	adds	r2, #176	; 0xb0
 800d19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	e008      	b.n	800d1c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	371c      	adds	r7, #28
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	32b0      	adds	r2, #176	; 0xb0
 800d1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	e004      	b.n	800d1fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
	...

0800d208 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	32b0      	adds	r2, #176	; 0xb0
 800d21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	32b0      	adds	r2, #176	; 0xb0
 800d22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d232:	2303      	movs	r3, #3
 800d234:	e018      	b.n	800d268 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7c1b      	ldrb	r3, [r3, #16]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10a      	bne.n	800d254 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <USBD_CDC_ReceivePacket+0x68>)
 800d240:	7819      	ldrb	r1, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f004 fd07 	bl	8011c60 <USBD_LL_PrepareReceive>
 800d252:	e008      	b.n	800d266 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d254:	4b06      	ldr	r3, [pc, #24]	; (800d270 <USBD_CDC_ReceivePacket+0x68>)
 800d256:	7819      	ldrb	r1, [r3, #0]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d25e:	2340      	movs	r3, #64	; 0x40
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f004 fcfd 	bl	8011c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	20000094 	.word	0x20000094

0800d274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	4613      	mov	r3, r2
 800d280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d101      	bne.n	800d28c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d288:	2303      	movs	r3, #3
 800d28a:	e01f      	b.n	800d2cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d003      	beq.n	800d2b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	79fa      	ldrb	r2, [r7, #7]
 800d2be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f004 fad5 	bl	8011870 <USBD_LL_Init>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d101      	bne.n	800d2ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e025      	b.n	800d338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	32ae      	adds	r2, #174	; 0xae
 800d2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00f      	beq.n	800d328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	32ae      	adds	r2, #174	; 0xae
 800d312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	f107 020e 	add.w	r2, r7, #14
 800d31c:	4610      	mov	r0, r2
 800d31e:	4798      	blx	r3
 800d320:	4602      	mov	r2, r0
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d32e:	1c5a      	adds	r2, r3, #1
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f004 fadd 	bl	8011908 <USBD_LL_Start>
 800d34e:	4603      	mov	r3, r0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d362:	4618      	mov	r0, r3
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d37a:	2300      	movs	r3, #0
 800d37c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d384:	2b00      	cmp	r3, #0
 800d386:	d009      	beq.n	800d39c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	78fa      	ldrb	r2, [r7, #3]
 800d392:	4611      	mov	r1, r2
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	4798      	blx	r3
 800d398:	4603      	mov	r3, r0
 800d39a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	78fa      	ldrb	r2, [r7, #3]
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	4798      	blx	r3
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d3cc:	2303      	movs	r3, #3
 800d3ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b084      	sub	sp, #16
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f001 f938 	bl	800e662 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d400:	461a      	mov	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d40e:	f003 031f 	and.w	r3, r3, #31
 800d412:	2b02      	cmp	r3, #2
 800d414:	d01a      	beq.n	800d44c <USBD_LL_SetupStage+0x72>
 800d416:	2b02      	cmp	r3, #2
 800d418:	d822      	bhi.n	800d460 <USBD_LL_SetupStage+0x86>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <USBD_LL_SetupStage+0x4a>
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d00a      	beq.n	800d438 <USBD_LL_SetupStage+0x5e>
 800d422:	e01d      	b.n	800d460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d42a:	4619      	mov	r1, r3
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 fb65 	bl	800dafc <USBD_StdDevReq>
 800d432:	4603      	mov	r3, r0
 800d434:	73fb      	strb	r3, [r7, #15]
      break;
 800d436:	e020      	b.n	800d47a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fbcd 	bl	800dbe0 <USBD_StdItfReq>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]
      break;
 800d44a:	e016      	b.n	800d47a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d452:	4619      	mov	r1, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fc2f 	bl	800dcb8 <USBD_StdEPReq>
 800d45a:	4603      	mov	r3, r0
 800d45c:	73fb      	strb	r3, [r7, #15]
      break;
 800d45e:	e00c      	b.n	800d47a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	4619      	mov	r1, r3
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f004 faf0 	bl	8011a54 <USBD_LL_StallEP>
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]
      break;
 800d478:	bf00      	nop
  }

  return ret;
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	460b      	mov	r3, r1
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d496:	7afb      	ldrb	r3, [r7, #11]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d16e      	bne.n	800d57a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d4a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	f040 8098 	bne.w	800d5e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d913      	bls.n	800d4e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	689a      	ldr	r2, [r3, #8]
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	1ad2      	subs	r2, r2, r3
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	bf28      	it	cs
 800d4d6:	4613      	movcs	r3, r2
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6879      	ldr	r1, [r7, #4]
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f001 f9b4 	bl	800e84a <USBD_CtlContinueRx>
 800d4e2:	e07d      	b.n	800d5e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d4ea:	f003 031f 	and.w	r3, r3, #31
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d014      	beq.n	800d51c <USBD_LL_DataOutStage+0x98>
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d81d      	bhi.n	800d532 <USBD_LL_DataOutStage+0xae>
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d002      	beq.n	800d500 <USBD_LL_DataOutStage+0x7c>
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d003      	beq.n	800d506 <USBD_LL_DataOutStage+0x82>
 800d4fe:	e018      	b.n	800d532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	75bb      	strb	r3, [r7, #22]
            break;
 800d504:	e018      	b.n	800d538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	4619      	mov	r1, r3
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fa64 	bl	800d9de <USBD_CoreFindIF>
 800d516:	4603      	mov	r3, r0
 800d518:	75bb      	strb	r3, [r7, #22]
            break;
 800d51a:	e00d      	b.n	800d538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d522:	b2db      	uxtb	r3, r3
 800d524:	4619      	mov	r1, r3
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 fa66 	bl	800d9f8 <USBD_CoreFindEP>
 800d52c:	4603      	mov	r3, r0
 800d52e:	75bb      	strb	r3, [r7, #22]
            break;
 800d530:	e002      	b.n	800d538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d532:	2300      	movs	r3, #0
 800d534:	75bb      	strb	r3, [r7, #22]
            break;
 800d536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d538:	7dbb      	ldrb	r3, [r7, #22]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d119      	bne.n	800d572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b03      	cmp	r3, #3
 800d548:	d113      	bne.n	800d572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d54a:	7dba      	ldrb	r2, [r7, #22]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	32ae      	adds	r2, #174	; 0xae
 800d550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00b      	beq.n	800d572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d55a:	7dba      	ldrb	r2, [r7, #22]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d562:	7dba      	ldrb	r2, [r7, #22]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	32ae      	adds	r2, #174	; 0xae
 800d568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f001 f97a 	bl	800e86c <USBD_CtlSendStatus>
 800d578:	e032      	b.n	800d5e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d580:	b2db      	uxtb	r3, r3
 800d582:	4619      	mov	r1, r3
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f000 fa37 	bl	800d9f8 <USBD_CoreFindEP>
 800d58a:	4603      	mov	r3, r0
 800d58c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d58e:	7dbb      	ldrb	r3, [r7, #22]
 800d590:	2bff      	cmp	r3, #255	; 0xff
 800d592:	d025      	beq.n	800d5e0 <USBD_LL_DataOutStage+0x15c>
 800d594:	7dbb      	ldrb	r3, [r7, #22]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d122      	bne.n	800d5e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d117      	bne.n	800d5d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d5a6:	7dba      	ldrb	r2, [r7, #22]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	32ae      	adds	r2, #174	; 0xae
 800d5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00f      	beq.n	800d5d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d5b6:	7dba      	ldrb	r2, [r7, #22]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d5be:	7dba      	ldrb	r2, [r7, #22]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	32ae      	adds	r2, #174	; 0xae
 800d5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	7afa      	ldrb	r2, [r7, #11]
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	4798      	blx	r3
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	e000      	b.n	800d5e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b086      	sub	sp, #24
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	60f8      	str	r0, [r7, #12]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d5f8:	7afb      	ldrb	r3, [r7, #11]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d16f      	bne.n	800d6de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3314      	adds	r3, #20
 800d602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d15a      	bne.n	800d6c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	689a      	ldr	r2, [r3, #8]
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	429a      	cmp	r2, r3
 800d618:	d914      	bls.n	800d644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	689a      	ldr	r2, [r3, #8]
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	1ad2      	subs	r2, r2, r3
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	461a      	mov	r2, r3
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f001 f8dc 	bl	800e7ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d636:	2300      	movs	r3, #0
 800d638:	2200      	movs	r2, #0
 800d63a:	2100      	movs	r1, #0
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f004 fb0f 	bl	8011c60 <USBD_LL_PrepareReceive>
 800d642:	e03f      	b.n	800d6c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	68da      	ldr	r2, [r3, #12]
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d11c      	bne.n	800d68a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d658:	429a      	cmp	r2, r3
 800d65a:	d316      	bcc.n	800d68a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d666:	429a      	cmp	r2, r3
 800d668:	d20f      	bcs.n	800d68a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d66a:	2200      	movs	r2, #0
 800d66c:	2100      	movs	r1, #0
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f001 f8bd 	bl	800e7ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d67c:	2300      	movs	r3, #0
 800d67e:	2200      	movs	r2, #0
 800d680:	2100      	movs	r1, #0
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f004 faec 	bl	8011c60 <USBD_LL_PrepareReceive>
 800d688:	e01c      	b.n	800d6c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b03      	cmp	r3, #3
 800d694:	d10f      	bne.n	800d6b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d009      	beq.n	800d6b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6b6:	2180      	movs	r1, #128	; 0x80
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f004 f9cb 	bl	8011a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f001 f8e7 	bl	800e892 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d03a      	beq.n	800d744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7ff fe42 	bl	800d358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d6dc:	e032      	b.n	800d744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d6de:	7afb      	ldrb	r3, [r7, #11]
 800d6e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 f985 	bl	800d9f8 <USBD_CoreFindEP>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	2bff      	cmp	r3, #255	; 0xff
 800d6f6:	d025      	beq.n	800d744 <USBD_LL_DataInStage+0x15a>
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d122      	bne.n	800d744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b03      	cmp	r3, #3
 800d708:	d11c      	bne.n	800d744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d70a:	7dfa      	ldrb	r2, [r7, #23]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	32ae      	adds	r2, #174	; 0xae
 800d710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d014      	beq.n	800d744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d71a:	7dfa      	ldrb	r2, [r7, #23]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d722:	7dfa      	ldrb	r2, [r7, #23]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	32ae      	adds	r2, #174	; 0xae
 800d728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	7afa      	ldrb	r2, [r7, #11]
 800d730:	4611      	mov	r1, r2
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	4798      	blx	r3
 800d736:	4603      	mov	r3, r0
 800d738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d73a:	7dbb      	ldrb	r3, [r7, #22]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d740:	7dbb      	ldrb	r3, [r7, #22]
 800d742:	e000      	b.n	800d746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3718      	adds	r7, #24
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d786:	2b00      	cmp	r3, #0
 800d788:	d014      	beq.n	800d7b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00e      	beq.n	800d7b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	6852      	ldr	r2, [r2, #4]
 800d7a2:	b2d2      	uxtb	r2, r2
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	4798      	blx	r3
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7b4:	2340      	movs	r3, #64	; 0x40
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f004 f8d6 	bl	801196c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2240      	movs	r2, #64	; 0x40
 800d7cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7d0:	2340      	movs	r3, #64	; 0x40
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	2180      	movs	r1, #128	; 0x80
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f004 f8c8 	bl	801196c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2240      	movs	r2, #64	; 0x40
 800d7e6:	621a      	str	r2, [r3, #32]

  return ret;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	78fa      	ldrb	r2, [r7, #3]
 800d802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr

0800d812 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d812:	b480      	push	{r7}
 800d814:	b083      	sub	sp, #12
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b04      	cmp	r3, #4
 800d824:	d006      	beq.n	800d834 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2204      	movs	r2, #4
 800d838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d106      	bne.n	800d86c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d864:	b2da      	uxtb	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr

0800d87a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b082      	sub	sp, #8
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b03      	cmp	r3, #3
 800d88c:	d110      	bne.n	800d8b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00b      	beq.n	800d8b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d89e:	69db      	ldr	r3, [r3, #28]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8aa:	69db      	ldr	r3, [r3, #28]
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	32ae      	adds	r2, #174	; 0xae
 800d8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e01c      	b.n	800d916 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d115      	bne.n	800d914 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	32ae      	adds	r2, #174	; 0xae
 800d8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f6:	6a1b      	ldr	r3, [r3, #32]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00b      	beq.n	800d914 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	32ae      	adds	r2, #174	; 0xae
 800d906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90a:	6a1b      	ldr	r3, [r3, #32]
 800d90c:	78fa      	ldrb	r2, [r7, #3]
 800d90e:	4611      	mov	r1, r2
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	32ae      	adds	r2, #174	; 0xae
 800d934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d93c:	2303      	movs	r3, #3
 800d93e:	e01c      	b.n	800d97a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d946:	b2db      	uxtb	r3, r3
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d115      	bne.n	800d978 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	32ae      	adds	r2, #174	; 0xae
 800d956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00b      	beq.n	800d978 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	32ae      	adds	r2, #174	; 0xae
 800d96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d970:	78fa      	ldrb	r2, [r7, #3]
 800d972:	4611      	mov	r1, r2
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00e      	beq.n	800d9d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	6852      	ldr	r2, [r2, #4]
 800d9c2:	b2d2      	uxtb	r2, r2
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	4798      	blx	r3
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b083      	sub	sp, #12
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d9ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	460b      	mov	r3, r1
 800da02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800da04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b086      	sub	sp, #24
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	460b      	mov	r3, r1
 800da1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800da26:	2300      	movs	r3, #0
 800da28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	885b      	ldrh	r3, [r3, #2]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	b29b      	uxth	r3, r3
 800da36:	429a      	cmp	r2, r3
 800da38:	d920      	bls.n	800da7c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800da42:	e013      	b.n	800da6c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800da44:	f107 030a 	add.w	r3, r7, #10
 800da48:	4619      	mov	r1, r3
 800da4a:	6978      	ldr	r0, [r7, #20]
 800da4c:	f000 f81b 	bl	800da86 <USBD_GetNextDesc>
 800da50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	785b      	ldrb	r3, [r3, #1]
 800da56:	2b05      	cmp	r3, #5
 800da58:	d108      	bne.n	800da6c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	789b      	ldrb	r3, [r3, #2]
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	429a      	cmp	r2, r3
 800da66:	d008      	beq.n	800da7a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	885b      	ldrh	r3, [r3, #2]
 800da70:	b29a      	uxth	r2, r3
 800da72:	897b      	ldrh	r3, [r7, #10]
 800da74:	429a      	cmp	r2, r3
 800da76:	d8e5      	bhi.n	800da44 <USBD_GetEpDesc+0x32>
 800da78:	e000      	b.n	800da7c <USBD_GetEpDesc+0x6a>
          break;
 800da7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800da7c:	693b      	ldr	r3, [r7, #16]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800da86:	b480      	push	{r7}
 800da88:	b085      	sub	sp, #20
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	881a      	ldrh	r2, [r3, #0]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	4413      	add	r3, r2
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4413      	add	r3, r2
 800dab0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dab2:	68fb      	ldr	r3, [r7, #12]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	3301      	adds	r3, #1
 800dad6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dade:	8a3b      	ldrh	r3, [r7, #16]
 800dae0:	021b      	lsls	r3, r3, #8
 800dae2:	b21a      	sxth	r2, r3
 800dae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dae8:	4313      	orrs	r3, r2
 800daea:	b21b      	sxth	r3, r3
 800daec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800daee:	89fb      	ldrh	r3, [r7, #14]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	371c      	adds	r7, #28
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db12:	2b40      	cmp	r3, #64	; 0x40
 800db14:	d005      	beq.n	800db22 <USBD_StdDevReq+0x26>
 800db16:	2b40      	cmp	r3, #64	; 0x40
 800db18:	d857      	bhi.n	800dbca <USBD_StdDevReq+0xce>
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00f      	beq.n	800db3e <USBD_StdDevReq+0x42>
 800db1e:	2b20      	cmp	r3, #32
 800db20:	d153      	bne.n	800dbca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	32ae      	adds	r2, #174	; 0xae
 800db2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	6839      	ldr	r1, [r7, #0]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	4798      	blx	r3
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]
      break;
 800db3c:	e04a      	b.n	800dbd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	785b      	ldrb	r3, [r3, #1]
 800db42:	2b09      	cmp	r3, #9
 800db44:	d83b      	bhi.n	800dbbe <USBD_StdDevReq+0xc2>
 800db46:	a201      	add	r2, pc, #4	; (adr r2, 800db4c <USBD_StdDevReq+0x50>)
 800db48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4c:	0800dba1 	.word	0x0800dba1
 800db50:	0800dbb5 	.word	0x0800dbb5
 800db54:	0800dbbf 	.word	0x0800dbbf
 800db58:	0800dbab 	.word	0x0800dbab
 800db5c:	0800dbbf 	.word	0x0800dbbf
 800db60:	0800db7f 	.word	0x0800db7f
 800db64:	0800db75 	.word	0x0800db75
 800db68:	0800dbbf 	.word	0x0800dbbf
 800db6c:	0800db97 	.word	0x0800db97
 800db70:	0800db89 	.word	0x0800db89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fa3c 	bl	800dff4 <USBD_GetDescriptor>
          break;
 800db7c:	e024      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 fbcb 	bl	800e31c <USBD_SetAddress>
          break;
 800db86:	e01f      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fc0a 	bl	800e3a4 <USBD_SetConfig>
 800db90:	4603      	mov	r3, r0
 800db92:	73fb      	strb	r3, [r7, #15]
          break;
 800db94:	e018      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db96:	6839      	ldr	r1, [r7, #0]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 fcad 	bl	800e4f8 <USBD_GetConfig>
          break;
 800db9e:	e013      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 fcde 	bl	800e564 <USBD_GetStatus>
          break;
 800dba8:	e00e      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dbaa:	6839      	ldr	r1, [r7, #0]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fd0d 	bl	800e5cc <USBD_SetFeature>
          break;
 800dbb2:	e009      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fd31 	bl	800e61e <USBD_ClrFeature>
          break;
 800dbbc:	e004      	b.n	800dbc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fd88 	bl	800e6d6 <USBD_CtlError>
          break;
 800dbc6:	bf00      	nop
      }
      break;
 800dbc8:	e004      	b.n	800dbd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dbca:	6839      	ldr	r1, [r7, #0]
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fd82 	bl	800e6d6 <USBD_CtlError>
      break;
 800dbd2:	bf00      	nop
  }

  return ret;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop

0800dbe0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbf6:	2b40      	cmp	r3, #64	; 0x40
 800dbf8:	d005      	beq.n	800dc06 <USBD_StdItfReq+0x26>
 800dbfa:	2b40      	cmp	r3, #64	; 0x40
 800dbfc:	d852      	bhi.n	800dca4 <USBD_StdItfReq+0xc4>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <USBD_StdItfReq+0x26>
 800dc02:	2b20      	cmp	r3, #32
 800dc04:	d14e      	bne.n	800dca4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	d840      	bhi.n	800dc96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	889b      	ldrh	r3, [r3, #4]
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d836      	bhi.n	800dc8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	889b      	ldrh	r3, [r3, #4]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	4619      	mov	r1, r3
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7ff fed9 	bl	800d9de <USBD_CoreFindIF>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
 800dc32:	2bff      	cmp	r3, #255	; 0xff
 800dc34:	d01d      	beq.n	800dc72 <USBD_StdItfReq+0x92>
 800dc36:	7bbb      	ldrb	r3, [r7, #14]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d11a      	bne.n	800dc72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dc3c:	7bba      	ldrb	r2, [r7, #14]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	32ae      	adds	r2, #174	; 0xae
 800dc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00f      	beq.n	800dc6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dc4c:	7bba      	ldrb	r2, [r7, #14]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc54:	7bba      	ldrb	r2, [r7, #14]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	32ae      	adds	r2, #174	; 0xae
 800dc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	4798      	blx	r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc6a:	e004      	b.n	800dc76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc70:	e001      	b.n	800dc76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dc72:	2303      	movs	r3, #3
 800dc74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	88db      	ldrh	r3, [r3, #6]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d110      	bne.n	800dca0 <USBD_StdItfReq+0xc0>
 800dc7e:	7bfb      	ldrb	r3, [r7, #15]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d10d      	bne.n	800dca0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fdf1 	bl	800e86c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc8a:	e009      	b.n	800dca0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fd21 	bl	800e6d6 <USBD_CtlError>
          break;
 800dc94:	e004      	b.n	800dca0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fd1c 	bl	800e6d6 <USBD_CtlError>
          break;
 800dc9e:	e000      	b.n	800dca2 <USBD_StdItfReq+0xc2>
          break;
 800dca0:	bf00      	nop
      }
      break;
 800dca2:	e004      	b.n	800dcae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fd15 	bl	800e6d6 <USBD_CtlError>
      break;
 800dcac:	bf00      	nop
  }

  return ret;
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	889b      	ldrh	r3, [r3, #4]
 800dcca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcd4:	2b40      	cmp	r3, #64	; 0x40
 800dcd6:	d007      	beq.n	800dce8 <USBD_StdEPReq+0x30>
 800dcd8:	2b40      	cmp	r3, #64	; 0x40
 800dcda:	f200 817f 	bhi.w	800dfdc <USBD_StdEPReq+0x324>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d02a      	beq.n	800dd38 <USBD_StdEPReq+0x80>
 800dce2:	2b20      	cmp	r3, #32
 800dce4:	f040 817a 	bne.w	800dfdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dce8:	7bbb      	ldrb	r3, [r7, #14]
 800dcea:	4619      	mov	r1, r3
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fe83 	bl	800d9f8 <USBD_CoreFindEP>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcf6:	7b7b      	ldrb	r3, [r7, #13]
 800dcf8:	2bff      	cmp	r3, #255	; 0xff
 800dcfa:	f000 8174 	beq.w	800dfe6 <USBD_StdEPReq+0x32e>
 800dcfe:	7b7b      	ldrb	r3, [r7, #13]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f040 8170 	bne.w	800dfe6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dd06:	7b7a      	ldrb	r2, [r7, #13]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dd0e:	7b7a      	ldrb	r2, [r7, #13]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	32ae      	adds	r2, #174	; 0xae
 800dd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f000 8163 	beq.w	800dfe6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dd20:	7b7a      	ldrb	r2, [r7, #13]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	32ae      	adds	r2, #174	; 0xae
 800dd26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	4798      	blx	r3
 800dd32:	4603      	mov	r3, r0
 800dd34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dd36:	e156      	b.n	800dfe6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	785b      	ldrb	r3, [r3, #1]
 800dd3c:	2b03      	cmp	r3, #3
 800dd3e:	d008      	beq.n	800dd52 <USBD_StdEPReq+0x9a>
 800dd40:	2b03      	cmp	r3, #3
 800dd42:	f300 8145 	bgt.w	800dfd0 <USBD_StdEPReq+0x318>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 809b 	beq.w	800de82 <USBD_StdEPReq+0x1ca>
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d03c      	beq.n	800ddca <USBD_StdEPReq+0x112>
 800dd50:	e13e      	b.n	800dfd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d002      	beq.n	800dd64 <USBD_StdEPReq+0xac>
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	d016      	beq.n	800dd90 <USBD_StdEPReq+0xd8>
 800dd62:	e02c      	b.n	800ddbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd64:	7bbb      	ldrb	r3, [r7, #14]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00d      	beq.n	800dd86 <USBD_StdEPReq+0xce>
 800dd6a:	7bbb      	ldrb	r3, [r7, #14]
 800dd6c:	2b80      	cmp	r3, #128	; 0x80
 800dd6e:	d00a      	beq.n	800dd86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd70:	7bbb      	ldrb	r3, [r7, #14]
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f003 fe6d 	bl	8011a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd7a:	2180      	movs	r1, #128	; 0x80
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f003 fe69 	bl	8011a54 <USBD_LL_StallEP>
 800dd82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd84:	e020      	b.n	800ddc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 fca4 	bl	800e6d6 <USBD_CtlError>
              break;
 800dd8e:	e01b      	b.n	800ddc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	885b      	ldrh	r3, [r3, #2]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10e      	bne.n	800ddb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00b      	beq.n	800ddb6 <USBD_StdEPReq+0xfe>
 800dd9e:	7bbb      	ldrb	r3, [r7, #14]
 800dda0:	2b80      	cmp	r3, #128	; 0x80
 800dda2:	d008      	beq.n	800ddb6 <USBD_StdEPReq+0xfe>
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	88db      	ldrh	r3, [r3, #6]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddac:	7bbb      	ldrb	r3, [r7, #14]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f003 fe4f 	bl	8011a54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fd58 	bl	800e86c <USBD_CtlSendStatus>

              break;
 800ddbc:	e004      	b.n	800ddc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 fc88 	bl	800e6d6 <USBD_CtlError>
              break;
 800ddc6:	bf00      	nop
          }
          break;
 800ddc8:	e107      	b.n	800dfda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d002      	beq.n	800dddc <USBD_StdEPReq+0x124>
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d016      	beq.n	800de08 <USBD_StdEPReq+0x150>
 800ddda:	e04b      	b.n	800de74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dddc:	7bbb      	ldrb	r3, [r7, #14]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00d      	beq.n	800ddfe <USBD_StdEPReq+0x146>
 800dde2:	7bbb      	ldrb	r3, [r7, #14]
 800dde4:	2b80      	cmp	r3, #128	; 0x80
 800dde6:	d00a      	beq.n	800ddfe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f003 fe31 	bl	8011a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddf2:	2180      	movs	r1, #128	; 0x80
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f003 fe2d 	bl	8011a54 <USBD_LL_StallEP>
 800ddfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ddfc:	e040      	b.n	800de80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fc68 	bl	800e6d6 <USBD_CtlError>
              break;
 800de06:	e03b      	b.n	800de80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	885b      	ldrh	r3, [r3, #2]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d136      	bne.n	800de7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800de10:	7bbb      	ldrb	r3, [r7, #14]
 800de12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de16:	2b00      	cmp	r3, #0
 800de18:	d004      	beq.n	800de24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f003 fe4e 	bl	8011ac0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fd21 	bl	800e86c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800de2a:	7bbb      	ldrb	r3, [r7, #14]
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff fde2 	bl	800d9f8 <USBD_CoreFindEP>
 800de34:	4603      	mov	r3, r0
 800de36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de38:	7b7b      	ldrb	r3, [r7, #13]
 800de3a:	2bff      	cmp	r3, #255	; 0xff
 800de3c:	d01f      	beq.n	800de7e <USBD_StdEPReq+0x1c6>
 800de3e:	7b7b      	ldrb	r3, [r7, #13]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d11c      	bne.n	800de7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800de44:	7b7a      	ldrb	r2, [r7, #13]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800de4c:	7b7a      	ldrb	r2, [r7, #13]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	32ae      	adds	r2, #174	; 0xae
 800de52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d010      	beq.n	800de7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de5c:	7b7a      	ldrb	r2, [r7, #13]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	32ae      	adds	r2, #174	; 0xae
 800de62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	4798      	blx	r3
 800de6e:	4603      	mov	r3, r0
 800de70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800de72:	e004      	b.n	800de7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fc2d 	bl	800e6d6 <USBD_CtlError>
              break;
 800de7c:	e000      	b.n	800de80 <USBD_StdEPReq+0x1c8>
              break;
 800de7e:	bf00      	nop
          }
          break;
 800de80:	e0ab      	b.n	800dfda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d002      	beq.n	800de94 <USBD_StdEPReq+0x1dc>
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d032      	beq.n	800def8 <USBD_StdEPReq+0x240>
 800de92:	e097      	b.n	800dfc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <USBD_StdEPReq+0x1f2>
 800de9a:	7bbb      	ldrb	r3, [r7, #14]
 800de9c:	2b80      	cmp	r3, #128	; 0x80
 800de9e:	d004      	beq.n	800deaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dea0:	6839      	ldr	r1, [r7, #0]
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fc17 	bl	800e6d6 <USBD_CtlError>
                break;
 800dea8:	e091      	b.n	800dfce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	da0b      	bge.n	800deca <USBD_StdEPReq+0x212>
 800deb2:	7bbb      	ldrb	r3, [r7, #14]
 800deb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800deb8:	4613      	mov	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	3310      	adds	r3, #16
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	4413      	add	r3, r2
 800dec6:	3304      	adds	r3, #4
 800dec8:	e00b      	b.n	800dee2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	4413      	add	r3, r2
 800dee0:	3304      	adds	r3, #4
 800dee2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	2200      	movs	r2, #0
 800dee8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2202      	movs	r2, #2
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 fc61 	bl	800e7b8 <USBD_CtlSendData>
              break;
 800def6:	e06a      	b.n	800dfce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800def8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800defc:	2b00      	cmp	r3, #0
 800defe:	da11      	bge.n	800df24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df00:	7bbb      	ldrb	r3, [r7, #14]
 800df02:	f003 020f 	and.w	r2, r3, #15
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	4613      	mov	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	440b      	add	r3, r1
 800df12:	3324      	adds	r3, #36	; 0x24
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d117      	bne.n	800df4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fbda 	bl	800e6d6 <USBD_CtlError>
                  break;
 800df22:	e054      	b.n	800dfce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df24:	7bbb      	ldrb	r3, [r7, #14]
 800df26:	f003 020f 	and.w	r2, r3, #15
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	440b      	add	r3, r1
 800df36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d104      	bne.n	800df4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fbc7 	bl	800e6d6 <USBD_CtlError>
                  break;
 800df48:	e041      	b.n	800dfce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	da0b      	bge.n	800df6a <USBD_StdEPReq+0x2b2>
 800df52:	7bbb      	ldrb	r3, [r7, #14]
 800df54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df58:	4613      	mov	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	3310      	adds	r3, #16
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	4413      	add	r3, r2
 800df66:	3304      	adds	r3, #4
 800df68:	e00b      	b.n	800df82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	4413      	add	r3, r2
 800df80:	3304      	adds	r3, #4
 800df82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df84:	7bbb      	ldrb	r3, [r7, #14]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <USBD_StdEPReq+0x2d8>
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	2b80      	cmp	r3, #128	; 0x80
 800df8e:	d103      	bne.n	800df98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	e00e      	b.n	800dfb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df98:	7bbb      	ldrb	r3, [r7, #14]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f003 fdc5 	bl	8011b2c <USBD_LL_IsStallEP>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d003      	beq.n	800dfb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	e002      	b.n	800dfb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	4619      	mov	r1, r3
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 fbfb 	bl	800e7b8 <USBD_CtlSendData>
              break;
 800dfc2:	e004      	b.n	800dfce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fb85 	bl	800e6d6 <USBD_CtlError>
              break;
 800dfcc:	bf00      	nop
          }
          break;
 800dfce:	e004      	b.n	800dfda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fb7f 	bl	800e6d6 <USBD_CtlError>
          break;
 800dfd8:	bf00      	nop
      }
      break;
 800dfda:	e005      	b.n	800dfe8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fb79 	bl	800e6d6 <USBD_CtlError>
      break;
 800dfe4:	e000      	b.n	800dfe8 <USBD_StdEPReq+0x330>
      break;
 800dfe6:	bf00      	nop
  }

  return ret;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dffe:	2300      	movs	r3, #0
 800e000:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e002:	2300      	movs	r3, #0
 800e004:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e006:	2300      	movs	r3, #0
 800e008:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	885b      	ldrh	r3, [r3, #2]
 800e00e:	0a1b      	lsrs	r3, r3, #8
 800e010:	b29b      	uxth	r3, r3
 800e012:	3b01      	subs	r3, #1
 800e014:	2b0e      	cmp	r3, #14
 800e016:	f200 8152 	bhi.w	800e2be <USBD_GetDescriptor+0x2ca>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <USBD_GetDescriptor+0x2c>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e091 	.word	0x0800e091
 800e024:	0800e0a9 	.word	0x0800e0a9
 800e028:	0800e0e9 	.word	0x0800e0e9
 800e02c:	0800e2bf 	.word	0x0800e2bf
 800e030:	0800e2bf 	.word	0x0800e2bf
 800e034:	0800e25f 	.word	0x0800e25f
 800e038:	0800e28b 	.word	0x0800e28b
 800e03c:	0800e2bf 	.word	0x0800e2bf
 800e040:	0800e2bf 	.word	0x0800e2bf
 800e044:	0800e2bf 	.word	0x0800e2bf
 800e048:	0800e2bf 	.word	0x0800e2bf
 800e04c:	0800e2bf 	.word	0x0800e2bf
 800e050:	0800e2bf 	.word	0x0800e2bf
 800e054:	0800e2bf 	.word	0x0800e2bf
 800e058:	0800e05d 	.word	0x0800e05d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e062:	69db      	ldr	r3, [r3, #28]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00b      	beq.n	800e080 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	7c12      	ldrb	r2, [r2, #16]
 800e074:	f107 0108 	add.w	r1, r7, #8
 800e078:	4610      	mov	r0, r2
 800e07a:	4798      	blx	r3
 800e07c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e07e:	e126      	b.n	800e2ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 fb27 	bl	800e6d6 <USBD_CtlError>
        err++;
 800e088:	7afb      	ldrb	r3, [r7, #11]
 800e08a:	3301      	adds	r3, #1
 800e08c:	72fb      	strb	r3, [r7, #11]
      break;
 800e08e:	e11e      	b.n	800e2ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	7c12      	ldrb	r2, [r2, #16]
 800e09c:	f107 0108 	add.w	r1, r7, #8
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	4798      	blx	r3
 800e0a4:	60f8      	str	r0, [r7, #12]
      break;
 800e0a6:	e112      	b.n	800e2ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7c1b      	ldrb	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10d      	bne.n	800e0cc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b8:	f107 0208 	add.w	r2, r7, #8
 800e0bc:	4610      	mov	r0, r2
 800e0be:	4798      	blx	r3
 800e0c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e0ca:	e100      	b.n	800e2ce <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d4:	f107 0208 	add.w	r2, r7, #8
 800e0d8:	4610      	mov	r0, r2
 800e0da:	4798      	blx	r3
 800e0dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	701a      	strb	r2, [r3, #0]
      break;
 800e0e6:	e0f2      	b.n	800e2ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	885b      	ldrh	r3, [r3, #2]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b05      	cmp	r3, #5
 800e0f0:	f200 80ac 	bhi.w	800e24c <USBD_GetDescriptor+0x258>
 800e0f4:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <USBD_GetDescriptor+0x108>)
 800e0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fa:	bf00      	nop
 800e0fc:	0800e115 	.word	0x0800e115
 800e100:	0800e149 	.word	0x0800e149
 800e104:	0800e17d 	.word	0x0800e17d
 800e108:	0800e1b1 	.word	0x0800e1b1
 800e10c:	0800e1e5 	.word	0x0800e1e5
 800e110:	0800e219 	.word	0x0800e219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	7c12      	ldrb	r2, [r2, #16]
 800e12c:	f107 0108 	add.w	r1, r7, #8
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
 800e134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e136:	e091      	b.n	800e25c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 facb 	bl	800e6d6 <USBD_CtlError>
            err++;
 800e140:	7afb      	ldrb	r3, [r7, #11]
 800e142:	3301      	adds	r3, #1
 800e144:	72fb      	strb	r3, [r7, #11]
          break;
 800e146:	e089      	b.n	800e25c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00b      	beq.n	800e16c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	7c12      	ldrb	r2, [r2, #16]
 800e160:	f107 0108 	add.w	r1, r7, #8
 800e164:	4610      	mov	r0, r2
 800e166:	4798      	blx	r3
 800e168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16a:	e077      	b.n	800e25c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fab1 	bl	800e6d6 <USBD_CtlError>
            err++;
 800e174:	7afb      	ldrb	r3, [r7, #11]
 800e176:	3301      	adds	r3, #1
 800e178:	72fb      	strb	r3, [r7, #11]
          break;
 800e17a:	e06f      	b.n	800e25c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00b      	beq.n	800e1a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	7c12      	ldrb	r2, [r2, #16]
 800e194:	f107 0108 	add.w	r1, r7, #8
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
 800e19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e19e:	e05d      	b.n	800e25c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fa97 	bl	800e6d6 <USBD_CtlError>
            err++;
 800e1a8:	7afb      	ldrb	r3, [r7, #11]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e1ae:	e055      	b.n	800e25c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00b      	beq.n	800e1d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	7c12      	ldrb	r2, [r2, #16]
 800e1c8:	f107 0108 	add.w	r1, r7, #8
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	4798      	blx	r3
 800e1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1d2:	e043      	b.n	800e25c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fa7d 	bl	800e6d6 <USBD_CtlError>
            err++;
 800e1dc:	7afb      	ldrb	r3, [r7, #11]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1e2:	e03b      	b.n	800e25c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00b      	beq.n	800e208 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 0108 	add.w	r1, r7, #8
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e206:	e029      	b.n	800e25c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fa63 	bl	800e6d6 <USBD_CtlError>
            err++;
 800e210:	7afb      	ldrb	r3, [r7, #11]
 800e212:	3301      	adds	r3, #1
 800e214:	72fb      	strb	r3, [r7, #11]
          break;
 800e216:	e021      	b.n	800e25c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21e:	699b      	ldr	r3, [r3, #24]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00b      	beq.n	800e23c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	7c12      	ldrb	r2, [r2, #16]
 800e230:	f107 0108 	add.w	r1, r7, #8
 800e234:	4610      	mov	r0, r2
 800e236:	4798      	blx	r3
 800e238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e23a:	e00f      	b.n	800e25c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fa49 	bl	800e6d6 <USBD_CtlError>
            err++;
 800e244:	7afb      	ldrb	r3, [r7, #11]
 800e246:	3301      	adds	r3, #1
 800e248:	72fb      	strb	r3, [r7, #11]
          break;
 800e24a:	e007      	b.n	800e25c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fa41 	bl	800e6d6 <USBD_CtlError>
          err++;
 800e254:	7afb      	ldrb	r3, [r7, #11]
 800e256:	3301      	adds	r3, #1
 800e258:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e25a:	bf00      	nop
      }
      break;
 800e25c:	e037      	b.n	800e2ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	7c1b      	ldrb	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d109      	bne.n	800e27a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26e:	f107 0208 	add.w	r2, r7, #8
 800e272:	4610      	mov	r0, r2
 800e274:	4798      	blx	r3
 800e276:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e278:	e029      	b.n	800e2ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fa2a 	bl	800e6d6 <USBD_CtlError>
        err++;
 800e282:	7afb      	ldrb	r3, [r7, #11]
 800e284:	3301      	adds	r3, #1
 800e286:	72fb      	strb	r3, [r7, #11]
      break;
 800e288:	e021      	b.n	800e2ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7c1b      	ldrb	r3, [r3, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10d      	bne.n	800e2ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29a:	f107 0208 	add.w	r2, r7, #8
 800e29e:	4610      	mov	r0, r2
 800e2a0:	4798      	blx	r3
 800e2a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	2207      	movs	r2, #7
 800e2aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2ac:	e00f      	b.n	800e2ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e2ae:	6839      	ldr	r1, [r7, #0]
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 fa10 	bl	800e6d6 <USBD_CtlError>
        err++;
 800e2b6:	7afb      	ldrb	r3, [r7, #11]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	72fb      	strb	r3, [r7, #11]
      break;
 800e2bc:	e007      	b.n	800e2ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 fa08 	bl	800e6d6 <USBD_CtlError>
      err++;
 800e2c6:	7afb      	ldrb	r3, [r7, #11]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e2cc:	bf00      	nop
  }

  if (err != 0U)
 800e2ce:	7afb      	ldrb	r3, [r7, #11]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d11e      	bne.n	800e312 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	88db      	ldrh	r3, [r3, #6]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d016      	beq.n	800e30a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e2dc:	893b      	ldrh	r3, [r7, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00e      	beq.n	800e300 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	88da      	ldrh	r2, [r3, #6]
 800e2e6:	893b      	ldrh	r3, [r7, #8]
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	bf28      	it	cs
 800e2ec:	4613      	movcs	r3, r2
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e2f2:	893b      	ldrh	r3, [r7, #8]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	68f9      	ldr	r1, [r7, #12]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fa5d 	bl	800e7b8 <USBD_CtlSendData>
 800e2fe:	e009      	b.n	800e314 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f9e7 	bl	800e6d6 <USBD_CtlError>
 800e308:	e004      	b.n	800e314 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 faae 	bl	800e86c <USBD_CtlSendStatus>
 800e310:	e000      	b.n	800e314 <USBD_GetDescriptor+0x320>
    return;
 800e312:	bf00      	nop
  }
}
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop

0800e31c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	889b      	ldrh	r3, [r3, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d131      	bne.n	800e392 <USBD_SetAddress+0x76>
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	88db      	ldrh	r3, [r3, #6]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d12d      	bne.n	800e392 <USBD_SetAddress+0x76>
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	885b      	ldrh	r3, [r3, #2]
 800e33a:	2b7f      	cmp	r3, #127	; 0x7f
 800e33c:	d829      	bhi.n	800e392 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	885b      	ldrh	r3, [r3, #2]
 800e342:	b2db      	uxtb	r3, r3
 800e344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e348:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b03      	cmp	r3, #3
 800e354:	d104      	bne.n	800e360 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e356:	6839      	ldr	r1, [r7, #0]
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 f9bc 	bl	800e6d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e35e:	e01d      	b.n	800e39c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7bfa      	ldrb	r2, [r7, #15]
 800e364:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f003 fc09 	bl	8011b84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fa7a 	bl	800e86c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e378:	7bfb      	ldrb	r3, [r7, #15]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d004      	beq.n	800e388 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2202      	movs	r2, #2
 800e382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e386:	e009      	b.n	800e39c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e390:	e004      	b.n	800e39c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f99e 	bl	800e6d6 <USBD_CtlError>
  }
}
 800e39a:	bf00      	nop
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	885b      	ldrh	r3, [r3, #2]
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	4b4e      	ldr	r3, [pc, #312]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e3ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e3bc:	4b4d      	ldr	r3, [pc, #308]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d905      	bls.n	800e3d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f985 	bl	800e6d6 <USBD_CtlError>
    return USBD_FAIL;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	e08c      	b.n	800e4ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d002      	beq.n	800e3e2 <USBD_SetConfig+0x3e>
 800e3dc:	2b03      	cmp	r3, #3
 800e3de:	d029      	beq.n	800e434 <USBD_SetConfig+0x90>
 800e3e0:	e075      	b.n	800e4ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e3e2:	4b44      	ldr	r3, [pc, #272]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d020      	beq.n	800e42c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e3ea:	4b42      	ldr	r3, [pc, #264]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3f4:	4b3f      	ldr	r3, [pc, #252]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7fe ffb7 	bl	800d36e <USBD_SetClassConfig>
 800e400:	4603      	mov	r3, r0
 800e402:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e404:	7bfb      	ldrb	r3, [r7, #15]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d008      	beq.n	800e41c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e40a:	6839      	ldr	r1, [r7, #0]
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 f962 	bl	800e6d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2202      	movs	r2, #2
 800e416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e41a:	e065      	b.n	800e4e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fa25 	bl	800e86c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2203      	movs	r2, #3
 800e426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e42a:	e05d      	b.n	800e4e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fa1d 	bl	800e86c <USBD_CtlSendStatus>
      break;
 800e432:	e059      	b.n	800e4e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e434:	4b2f      	ldr	r3, [pc, #188]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d112      	bne.n	800e462 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2202      	movs	r2, #2
 800e440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e444:	4b2b      	ldr	r3, [pc, #172]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	461a      	mov	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e44e:	4b29      	ldr	r3, [pc, #164]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7fe ffa6 	bl	800d3a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 fa06 	bl	800e86c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e460:	e042      	b.n	800e4e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e462:	4b24      	ldr	r3, [pc, #144]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	461a      	mov	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d02a      	beq.n	800e4c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	b2db      	uxtb	r3, r3
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7fe ff94 	bl	800d3a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e47e:	4b1d      	ldr	r3, [pc, #116]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e488:	4b1a      	ldr	r3, [pc, #104]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7fe ff6d 	bl	800d36e <USBD_SetClassConfig>
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00f      	beq.n	800e4be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f918 	bl	800e6d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f7fe ff79 	bl	800d3a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4bc:	e014      	b.n	800e4e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f9d4 	bl	800e86c <USBD_CtlSendStatus>
      break;
 800e4c4:	e010      	b.n	800e4e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f9d0 	bl	800e86c <USBD_CtlSendStatus>
      break;
 800e4cc:	e00c      	b.n	800e4e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f900 	bl	800e6d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e4d6:	4b07      	ldr	r3, [pc, #28]	; (800e4f4 <USBD_SetConfig+0x150>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7fe ff62 	bl	800d3a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e4e6:	bf00      	nop
  }

  return ret;
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20010334 	.word	0x20010334

0800e4f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	88db      	ldrh	r3, [r3, #6]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d004      	beq.n	800e514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f8e2 	bl	800e6d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e512:	e023      	b.n	800e55c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	dc02      	bgt.n	800e526 <USBD_GetConfig+0x2e>
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc03      	bgt.n	800e52c <USBD_GetConfig+0x34>
 800e524:	e015      	b.n	800e552 <USBD_GetConfig+0x5a>
 800e526:	2b03      	cmp	r3, #3
 800e528:	d00b      	beq.n	800e542 <USBD_GetConfig+0x4a>
 800e52a:	e012      	b.n	800e552 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3308      	adds	r3, #8
 800e536:	2201      	movs	r2, #1
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f93c 	bl	800e7b8 <USBD_CtlSendData>
        break;
 800e540:	e00c      	b.n	800e55c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3304      	adds	r3, #4
 800e546:	2201      	movs	r2, #1
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f934 	bl	800e7b8 <USBD_CtlSendData>
        break;
 800e550:	e004      	b.n	800e55c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e552:	6839      	ldr	r1, [r7, #0]
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 f8be 	bl	800e6d6 <USBD_CtlError>
        break;
 800e55a:	bf00      	nop
}
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e574:	b2db      	uxtb	r3, r3
 800e576:	3b01      	subs	r3, #1
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d81e      	bhi.n	800e5ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	88db      	ldrh	r3, [r3, #6]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d004      	beq.n	800e58e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f8a5 	bl	800e6d6 <USBD_CtlError>
        break;
 800e58c:	e01a      	b.n	800e5c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d005      	beq.n	800e5aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	f043 0202 	orr.w	r2, r3, #2
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	330c      	adds	r3, #12
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f900 	bl	800e7b8 <USBD_CtlSendData>
      break;
 800e5b8:	e004      	b.n	800e5c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f88a 	bl	800e6d6 <USBD_CtlError>
      break;
 800e5c2:	bf00      	nop
  }
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	885b      	ldrh	r3, [r3, #2]
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d107      	bne.n	800e5ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f940 	bl	800e86c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e5ec:	e013      	b.n	800e616 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	885b      	ldrh	r3, [r3, #2]
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d10b      	bne.n	800e60e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	889b      	ldrh	r3, [r3, #4]
 800e5fa:	0a1b      	lsrs	r3, r3, #8
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f930 	bl	800e86c <USBD_CtlSendStatus>
}
 800e60c:	e003      	b.n	800e616 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f860 	bl	800e6d6 <USBD_CtlError>
}
 800e616:	bf00      	nop
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b082      	sub	sp, #8
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	3b01      	subs	r3, #1
 800e632:	2b02      	cmp	r3, #2
 800e634:	d80b      	bhi.n	800e64e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	885b      	ldrh	r3, [r3, #2]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d10c      	bne.n	800e658 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f910 	bl	800e86c <USBD_CtlSendStatus>
      }
      break;
 800e64c:	e004      	b.n	800e658 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f840 	bl	800e6d6 <USBD_CtlError>
      break;
 800e656:	e000      	b.n	800e65a <USBD_ClrFeature+0x3c>
      break;
 800e658:	bf00      	nop
  }
}
 800e65a:	bf00      	nop
 800e65c:	3708      	adds	r7, #8
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	781a      	ldrb	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3301      	adds	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	781a      	ldrb	r2, [r3, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	3301      	adds	r3, #1
 800e68a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f7ff fa17 	bl	800dac0 <SWAPBYTE>
 800e692:	4603      	mov	r3, r0
 800e694:	461a      	mov	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	3301      	adds	r3, #1
 800e69e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f7ff fa0a 	bl	800dac0 <SWAPBYTE>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f7ff f9fd 	bl	800dac0 <SWAPBYTE>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	80da      	strh	r2, [r3, #6]
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6e0:	2180      	movs	r1, #128	; 0x80
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f003 f9b6 	bl	8011a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f003 f9b2 	bl	8011a54 <USBD_LL_StallEP>
}
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e704:	2300      	movs	r3, #0
 800e706:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d036      	beq.n	800e77c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e712:	6938      	ldr	r0, [r7, #16]
 800e714:	f000 f836 	bl	800e784 <USBD_GetLen>
 800e718:	4603      	mov	r3, r0
 800e71a:	3301      	adds	r3, #1
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	005b      	lsls	r3, r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e726:	7dfb      	ldrb	r3, [r7, #23]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	4413      	add	r3, r2
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	7812      	ldrb	r2, [r2, #0]
 800e730:	701a      	strb	r2, [r3, #0]
  idx++;
 800e732:	7dfb      	ldrb	r3, [r7, #23]
 800e734:	3301      	adds	r3, #1
 800e736:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e738:	7dfb      	ldrb	r3, [r7, #23]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	4413      	add	r3, r2
 800e73e:	2203      	movs	r2, #3
 800e740:	701a      	strb	r2, [r3, #0]
  idx++;
 800e742:	7dfb      	ldrb	r3, [r7, #23]
 800e744:	3301      	adds	r3, #1
 800e746:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e748:	e013      	b.n	800e772 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	4413      	add	r3, r2
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	7812      	ldrb	r2, [r2, #0]
 800e754:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	3301      	adds	r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
    idx++;
 800e75c:	7dfb      	ldrb	r3, [r7, #23]
 800e75e:	3301      	adds	r3, #1
 800e760:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	4413      	add	r3, r2
 800e768:	2200      	movs	r2, #0
 800e76a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e76c:	7dfb      	ldrb	r3, [r7, #23]
 800e76e:	3301      	adds	r3, #1
 800e770:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1e7      	bne.n	800e74a <USBD_GetString+0x52>
 800e77a:	e000      	b.n	800e77e <USBD_GetString+0x86>
    return;
 800e77c:	bf00      	nop
  }
}
 800e77e:	3718      	adds	r7, #24
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e78c:	2300      	movs	r3, #0
 800e78e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e794:	e005      	b.n	800e7a2 <USBD_GetLen+0x1e>
  {
    len++;
 800e796:	7bfb      	ldrb	r3, [r7, #15]
 800e798:	3301      	adds	r3, #1
 800e79a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1f5      	bne.n	800e796 <USBD_GetLen+0x12>
  }

  return len;
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2202      	movs	r2, #2
 800e7c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	2100      	movs	r1, #0
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	f003 fa06 	bl	8011bf0 <USBD_LL_Transmit>

  return USBD_OK;
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	60f8      	str	r0, [r7, #12]
 800e7f6:	60b9      	str	r1, [r7, #8]
 800e7f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	2100      	movs	r1, #0
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f003 f9f5 	bl	8011bf0 <USBD_LL_Transmit>

  return USBD_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2203      	movs	r2, #3
 800e820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	2100      	movs	r1, #0
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f003 fa10 	bl	8011c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	2100      	movs	r1, #0
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f003 f9ff 	bl	8011c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2204      	movs	r2, #4
 800e878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e87c:	2300      	movs	r3, #0
 800e87e:	2200      	movs	r2, #0
 800e880:	2100      	movs	r1, #0
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f003 f9b4 	bl	8011bf0 <USBD_LL_Transmit>

  return USBD_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b082      	sub	sp, #8
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2205      	movs	r2, #5
 800e89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f003 f9d9 	bl	8011c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <disk_status+0x30>)
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	79fa      	ldrb	r2, [r7, #7]
 800e8d0:	4905      	ldr	r1, [pc, #20]	; (800e8e8 <disk_status+0x30>)
 800e8d2:	440a      	add	r2, r1
 800e8d4:	7a12      	ldrb	r2, [r2, #8]
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	4798      	blx	r3
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	20010360 	.word	0x20010360

0800e8ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	4a0d      	ldr	r2, [pc, #52]	; (800e934 <disk_initialize+0x48>)
 800e8fe:	5cd3      	ldrb	r3, [r2, r3]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d111      	bne.n	800e928 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	4a0b      	ldr	r2, [pc, #44]	; (800e934 <disk_initialize+0x48>)
 800e908:	2101      	movs	r1, #1
 800e90a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e90c:	79fb      	ldrb	r3, [r7, #7]
 800e90e:	4a09      	ldr	r2, [pc, #36]	; (800e934 <disk_initialize+0x48>)
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4413      	add	r3, r2
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	79fa      	ldrb	r2, [r7, #7]
 800e91a:	4906      	ldr	r1, [pc, #24]	; (800e934 <disk_initialize+0x48>)
 800e91c:	440a      	add	r2, r1
 800e91e:	7a12      	ldrb	r2, [r2, #8]
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3
 800e924:	4603      	mov	r3, r0
 800e926:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	20010360 	.word	0x20010360

0800e938 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e938:	b590      	push	{r4, r7, lr}
 800e93a:	b087      	sub	sp, #28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60b9      	str	r1, [r7, #8]
 800e940:	607a      	str	r2, [r7, #4]
 800e942:	603b      	str	r3, [r7, #0]
 800e944:	4603      	mov	r3, r0
 800e946:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e948:	7bfb      	ldrb	r3, [r7, #15]
 800e94a:	4a0a      	ldr	r2, [pc, #40]	; (800e974 <disk_read+0x3c>)
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4413      	add	r3, r2
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	689c      	ldr	r4, [r3, #8]
 800e954:	7bfb      	ldrb	r3, [r7, #15]
 800e956:	4a07      	ldr	r2, [pc, #28]	; (800e974 <disk_read+0x3c>)
 800e958:	4413      	add	r3, r2
 800e95a:	7a18      	ldrb	r0, [r3, #8]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	47a0      	blx	r4
 800e964:	4603      	mov	r3, r0
 800e966:	75fb      	strb	r3, [r7, #23]
  return res;
 800e968:	7dfb      	ldrb	r3, [r7, #23]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	371c      	adds	r7, #28
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd90      	pop	{r4, r7, pc}
 800e972:	bf00      	nop
 800e974:	20010360 	.word	0x20010360

0800e978 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e978:	b590      	push	{r4, r7, lr}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60b9      	str	r1, [r7, #8]
 800e980:	607a      	str	r2, [r7, #4]
 800e982:	603b      	str	r3, [r7, #0]
 800e984:	4603      	mov	r3, r0
 800e986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e988:	7bfb      	ldrb	r3, [r7, #15]
 800e98a:	4a0a      	ldr	r2, [pc, #40]	; (800e9b4 <disk_write+0x3c>)
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	68dc      	ldr	r4, [r3, #12]
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	4a07      	ldr	r2, [pc, #28]	; (800e9b4 <disk_write+0x3c>)
 800e998:	4413      	add	r3, r2
 800e99a:	7a18      	ldrb	r0, [r3, #8]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	68b9      	ldr	r1, [r7, #8]
 800e9a2:	47a0      	blx	r4
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	371c      	adds	r7, #28
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd90      	pop	{r4, r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20010360 	.word	0x20010360

0800e9b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	4603      	mov	r3, r0
 800e9c0:	603a      	str	r2, [r7, #0]
 800e9c2:	71fb      	strb	r3, [r7, #7]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e9c8:	79fb      	ldrb	r3, [r7, #7]
 800e9ca:	4a09      	ldr	r2, [pc, #36]	; (800e9f0 <disk_ioctl+0x38>)
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	79fa      	ldrb	r2, [r7, #7]
 800e9d6:	4906      	ldr	r1, [pc, #24]	; (800e9f0 <disk_ioctl+0x38>)
 800e9d8:	440a      	add	r2, r1
 800e9da:	7a10      	ldrb	r0, [r2, #8]
 800e9dc:	79b9      	ldrb	r1, [r7, #6]
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	4798      	blx	r3
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
  return res;
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3710      	adds	r7, #16
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20010360 	.word	0x20010360

0800e9f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ea04:	89fb      	ldrh	r3, [r7, #14]
 800ea06:	021b      	lsls	r3, r3, #8
 800ea08:	b21a      	sxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	b21b      	sxth	r3, r3
 800ea10:	4313      	orrs	r3, r2
 800ea12:	b21b      	sxth	r3, r3
 800ea14:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ea16:	89fb      	ldrh	r3, [r7, #14]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3303      	adds	r3, #3
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	021b      	lsls	r3, r3, #8
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	3202      	adds	r2, #2
 800ea3c:	7812      	ldrb	r2, [r2, #0]
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	021b      	lsls	r3, r3, #8
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	3201      	adds	r2, #1
 800ea4a:	7812      	ldrb	r2, [r2, #0]
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	021b      	lsls	r3, r3, #8
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	7812      	ldrb	r2, [r2, #0]
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	460b      	mov	r3, r1
 800ea74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	887a      	ldrh	r2, [r7, #2]
 800ea7e:	b2d2      	uxtb	r2, r2
 800ea80:	701a      	strb	r2, [r3, #0]
 800ea82:	887b      	ldrh	r3, [r7, #2]
 800ea84:	0a1b      	lsrs	r3, r3, #8
 800ea86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	607a      	str	r2, [r7, #4]
 800ea8e:	887a      	ldrh	r2, [r7, #2]
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	701a      	strb	r2, [r3, #0]
}
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	b2d2      	uxtb	r2, r2
 800eab4:	701a      	strb	r2, [r3, #0]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	0a1b      	lsrs	r3, r3, #8
 800eaba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1c5a      	adds	r2, r3, #1
 800eac0:	607a      	str	r2, [r7, #4]
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	b2d2      	uxtb	r2, r2
 800eac6:	701a      	strb	r2, [r3, #0]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	0a1b      	lsrs	r3, r3, #8
 800eacc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	b2d2      	uxtb	r2, r2
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	0a1b      	lsrs	r3, r3, #8
 800eade:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	1c5a      	adds	r2, r3, #1
 800eae4:	607a      	str	r2, [r7, #4]
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	b2d2      	uxtb	r2, r2
 800eaea:	701a      	strb	r2, [r3, #0]
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eaf8:	b480      	push	{r7}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00d      	beq.n	800eb2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	1c53      	adds	r3, r2, #1
 800eb16:	613b      	str	r3, [r7, #16]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	1c59      	adds	r1, r3, #1
 800eb1c:	6179      	str	r1, [r7, #20]
 800eb1e:	7812      	ldrb	r2, [r2, #0]
 800eb20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	607b      	str	r3, [r7, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1f1      	bne.n	800eb12 <mem_cpy+0x1a>
	}
}
 800eb2e:	bf00      	nop
 800eb30:	371c      	adds	r7, #28
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eb3a:	b480      	push	{r7}
 800eb3c:	b087      	sub	sp, #28
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	60f8      	str	r0, [r7, #12]
 800eb42:	60b9      	str	r1, [r7, #8]
 800eb44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	617a      	str	r2, [r7, #20]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	b2d2      	uxtb	r2, r2
 800eb54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	607b      	str	r3, [r7, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1f3      	bne.n	800eb4a <mem_set+0x10>
}
 800eb62:	bf00      	nop
 800eb64:	bf00      	nop
 800eb66:	371c      	adds	r7, #28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eb70:	b480      	push	{r7}
 800eb72:	b089      	sub	sp, #36	; 0x24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	61fb      	str	r3, [r7, #28]
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	61fa      	str	r2, [r7, #28]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	4619      	mov	r1, r3
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	1c5a      	adds	r2, r3, #1
 800eb96:	61ba      	str	r2, [r7, #24]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	1acb      	subs	r3, r1, r3
 800eb9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	607b      	str	r3, [r7, #4]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <mem_cmp+0x40>
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d0eb      	beq.n	800eb88 <mem_cmp+0x18>

	return r;
 800ebb0:	697b      	ldr	r3, [r7, #20]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3724      	adds	r7, #36	; 0x24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ebbe:	b480      	push	{r7}
 800ebc0:	b083      	sub	sp, #12
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
 800ebc6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ebc8:	e002      	b.n	800ebd0 <chk_chr+0x12>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	607b      	str	r3, [r7, #4]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d005      	beq.n	800ebe4 <chk_chr+0x26>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d1f2      	bne.n	800ebca <chk_chr+0xc>
	return *str;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ebfe:	2300      	movs	r3, #0
 800ec00:	60bb      	str	r3, [r7, #8]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e029      	b.n	800ec5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ec08:	4a27      	ldr	r2, [pc, #156]	; (800eca8 <chk_lock+0xb4>)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	011b      	lsls	r3, r3, #4
 800ec0e:	4413      	add	r3, r2
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d01d      	beq.n	800ec52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec16:	4a24      	ldr	r2, [pc, #144]	; (800eca8 <chk_lock+0xb4>)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	011b      	lsls	r3, r3, #4
 800ec1c:	4413      	add	r3, r2
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d116      	bne.n	800ec56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec28:	4a1f      	ldr	r2, [pc, #124]	; (800eca8 <chk_lock+0xb4>)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	011b      	lsls	r3, r3, #4
 800ec2e:	4413      	add	r3, r2
 800ec30:	3304      	adds	r3, #4
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d10c      	bne.n	800ec56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec3c:	4a1a      	ldr	r2, [pc, #104]	; (800eca8 <chk_lock+0xb4>)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	011b      	lsls	r3, r3, #4
 800ec42:	4413      	add	r3, r2
 800ec44:	3308      	adds	r3, #8
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d102      	bne.n	800ec56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec50:	e007      	b.n	800ec62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ec52:	2301      	movs	r3, #1
 800ec54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d9d2      	bls.n	800ec08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d109      	bne.n	800ec7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d102      	bne.n	800ec74 <chk_lock+0x80>
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d101      	bne.n	800ec78 <chk_lock+0x84>
 800ec74:	2300      	movs	r3, #0
 800ec76:	e010      	b.n	800ec9a <chk_lock+0xa6>
 800ec78:	2312      	movs	r3, #18
 800ec7a:	e00e      	b.n	800ec9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d108      	bne.n	800ec94 <chk_lock+0xa0>
 800ec82:	4a09      	ldr	r2, [pc, #36]	; (800eca8 <chk_lock+0xb4>)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	011b      	lsls	r3, r3, #4
 800ec88:	4413      	add	r3, r2
 800ec8a:	330c      	adds	r3, #12
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec92:	d101      	bne.n	800ec98 <chk_lock+0xa4>
 800ec94:	2310      	movs	r3, #16
 800ec96:	e000      	b.n	800ec9a <chk_lock+0xa6>
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	20010340 	.word	0x20010340

0800ecac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	607b      	str	r3, [r7, #4]
 800ecb6:	e002      	b.n	800ecbe <enq_lock+0x12>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	607b      	str	r3, [r7, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d806      	bhi.n	800ecd2 <enq_lock+0x26>
 800ecc4:	4a09      	ldr	r2, [pc, #36]	; (800ecec <enq_lock+0x40>)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	011b      	lsls	r3, r3, #4
 800ecca:	4413      	add	r3, r2
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1f2      	bne.n	800ecb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	bf14      	ite	ne
 800ecd8:	2301      	movne	r3, #1
 800ecda:	2300      	moveq	r3, #0
 800ecdc:	b2db      	uxtb	r3, r3
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop
 800ecec:	20010340 	.word	0x20010340

0800ecf0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	e01f      	b.n	800ed40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ed00:	4a41      	ldr	r2, [pc, #260]	; (800ee08 <inc_lock+0x118>)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	011b      	lsls	r3, r3, #4
 800ed06:	4413      	add	r3, r2
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d113      	bne.n	800ed3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ed12:	4a3d      	ldr	r2, [pc, #244]	; (800ee08 <inc_lock+0x118>)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	011b      	lsls	r3, r3, #4
 800ed18:	4413      	add	r3, r2
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d109      	bne.n	800ed3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ed26:	4a38      	ldr	r2, [pc, #224]	; (800ee08 <inc_lock+0x118>)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	4413      	add	r3, r2
 800ed2e:	3308      	adds	r3, #8
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d006      	beq.n	800ed48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d9dc      	bls.n	800ed00 <inc_lock+0x10>
 800ed46:	e000      	b.n	800ed4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ed48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d132      	bne.n	800edb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed50:	2300      	movs	r3, #0
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	e002      	b.n	800ed5c <inc_lock+0x6c>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	60fb      	str	r3, [r7, #12]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d806      	bhi.n	800ed70 <inc_lock+0x80>
 800ed62:	4a29      	ldr	r2, [pc, #164]	; (800ee08 <inc_lock+0x118>)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	011b      	lsls	r3, r3, #4
 800ed68:	4413      	add	r3, r2
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1f2      	bne.n	800ed56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d101      	bne.n	800ed7a <inc_lock+0x8a>
 800ed76:	2300      	movs	r3, #0
 800ed78:	e040      	b.n	800edfc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	4922      	ldr	r1, [pc, #136]	; (800ee08 <inc_lock+0x118>)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	011b      	lsls	r3, r3, #4
 800ed84:	440b      	add	r3, r1
 800ed86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	491e      	ldr	r1, [pc, #120]	; (800ee08 <inc_lock+0x118>)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	011b      	lsls	r3, r3, #4
 800ed92:	440b      	add	r3, r1
 800ed94:	3304      	adds	r3, #4
 800ed96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	695a      	ldr	r2, [r3, #20]
 800ed9c:	491a      	ldr	r1, [pc, #104]	; (800ee08 <inc_lock+0x118>)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	011b      	lsls	r3, r3, #4
 800eda2:	440b      	add	r3, r1
 800eda4:	3308      	adds	r3, #8
 800eda6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eda8:	4a17      	ldr	r2, [pc, #92]	; (800ee08 <inc_lock+0x118>)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	011b      	lsls	r3, r3, #4
 800edae:	4413      	add	r3, r2
 800edb0:	330c      	adds	r3, #12
 800edb2:	2200      	movs	r2, #0
 800edb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d009      	beq.n	800edd0 <inc_lock+0xe0>
 800edbc:	4a12      	ldr	r2, [pc, #72]	; (800ee08 <inc_lock+0x118>)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	011b      	lsls	r3, r3, #4
 800edc2:	4413      	add	r3, r2
 800edc4:	330c      	adds	r3, #12
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d001      	beq.n	800edd0 <inc_lock+0xe0>
 800edcc:	2300      	movs	r3, #0
 800edce:	e015      	b.n	800edfc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d108      	bne.n	800ede8 <inc_lock+0xf8>
 800edd6:	4a0c      	ldr	r2, [pc, #48]	; (800ee08 <inc_lock+0x118>)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	011b      	lsls	r3, r3, #4
 800eddc:	4413      	add	r3, r2
 800edde:	330c      	adds	r3, #12
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	e001      	b.n	800edec <inc_lock+0xfc>
 800ede8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edec:	4906      	ldr	r1, [pc, #24]	; (800ee08 <inc_lock+0x118>)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	011b      	lsls	r3, r3, #4
 800edf2:	440b      	add	r3, r1
 800edf4:	330c      	adds	r3, #12
 800edf6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3301      	adds	r3, #1
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3714      	adds	r7, #20
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr
 800ee08:	20010340 	.word	0x20010340

0800ee0c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	607b      	str	r3, [r7, #4]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d825      	bhi.n	800ee6c <dec_lock+0x60>
		n = Files[i].ctr;
 800ee20:	4a17      	ldr	r2, [pc, #92]	; (800ee80 <dec_lock+0x74>)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	4413      	add	r3, r2
 800ee28:	330c      	adds	r3, #12
 800ee2a:	881b      	ldrh	r3, [r3, #0]
 800ee2c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ee2e:	89fb      	ldrh	r3, [r7, #14]
 800ee30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee34:	d101      	bne.n	800ee3a <dec_lock+0x2e>
 800ee36:	2300      	movs	r3, #0
 800ee38:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ee3a:	89fb      	ldrh	r3, [r7, #14]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d002      	beq.n	800ee46 <dec_lock+0x3a>
 800ee40:	89fb      	ldrh	r3, [r7, #14]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ee46:	4a0e      	ldr	r2, [pc, #56]	; (800ee80 <dec_lock+0x74>)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	330c      	adds	r3, #12
 800ee50:	89fa      	ldrh	r2, [r7, #14]
 800ee52:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ee54:	89fb      	ldrh	r3, [r7, #14]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d105      	bne.n	800ee66 <dec_lock+0x5a>
 800ee5a:	4a09      	ldr	r2, [pc, #36]	; (800ee80 <dec_lock+0x74>)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	011b      	lsls	r3, r3, #4
 800ee60:	4413      	add	r3, r2
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	737b      	strb	r3, [r7, #13]
 800ee6a:	e001      	b.n	800ee70 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ee70:	7b7b      	ldrb	r3, [r7, #13]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3714      	adds	r7, #20
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	20010340 	.word	0x20010340

0800ee84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	60fb      	str	r3, [r7, #12]
 800ee90:	e010      	b.n	800eeb4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee92:	4a0d      	ldr	r2, [pc, #52]	; (800eec8 <clear_lock+0x44>)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	4413      	add	r3, r2
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d105      	bne.n	800eeae <clear_lock+0x2a>
 800eea2:	4a09      	ldr	r2, [pc, #36]	; (800eec8 <clear_lock+0x44>)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	011b      	lsls	r3, r3, #4
 800eea8:	4413      	add	r3, r2
 800eeaa:	2200      	movs	r2, #0
 800eeac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d9eb      	bls.n	800ee92 <clear_lock+0xe>
	}
}
 800eeba:	bf00      	nop
 800eebc:	bf00      	nop
 800eebe:	3714      	adds	r7, #20
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	20010340 	.word	0x20010340

0800eecc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	78db      	ldrb	r3, [r3, #3]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d034      	beq.n	800ef4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	7858      	ldrb	r0, [r3, #1]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eef0:	2301      	movs	r3, #1
 800eef2:	697a      	ldr	r2, [r7, #20]
 800eef4:	f7ff fd40 	bl	800e978 <disk_write>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <sync_window+0x38>
			res = FR_DISK_ERR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	73fb      	strb	r3, [r7, #15]
 800ef02:	e022      	b.n	800ef4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	1ad2      	subs	r2, r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	699b      	ldr	r3, [r3, #24]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d217      	bcs.n	800ef4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	789b      	ldrb	r3, [r3, #2]
 800ef1e:	613b      	str	r3, [r7, #16]
 800ef20:	e010      	b.n	800ef44 <sync_window+0x78>
					wsect += fs->fsize;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	699b      	ldr	r3, [r3, #24]
 800ef26:	697a      	ldr	r2, [r7, #20]
 800ef28:	4413      	add	r3, r2
 800ef2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	7858      	ldrb	r0, [r3, #1]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef36:	2301      	movs	r3, #1
 800ef38:	697a      	ldr	r2, [r7, #20]
 800ef3a:	f7ff fd1d 	bl	800e978 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	3b01      	subs	r3, #1
 800ef42:	613b      	str	r3, [r7, #16]
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d8eb      	bhi.n	800ef22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ef4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3718      	adds	r7, #24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d01b      	beq.n	800efa4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7ff ffad 	bl	800eecc <sync_window>
 800ef72:	4603      	mov	r3, r0
 800ef74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d113      	bne.n	800efa4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	7858      	ldrb	r0, [r3, #1]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef86:	2301      	movs	r3, #1
 800ef88:	683a      	ldr	r2, [r7, #0]
 800ef8a:	f7ff fcd5 	bl	800e938 <disk_read>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef94:	f04f 33ff 	mov.w	r3, #4294967295
 800ef98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800efa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff ff87 	bl	800eecc <sync_window>
 800efbe:	4603      	mov	r3, r0
 800efc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d158      	bne.n	800f07a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b03      	cmp	r3, #3
 800efce:	d148      	bne.n	800f062 <sync_fs+0xb2>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	791b      	ldrb	r3, [r3, #4]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d144      	bne.n	800f062 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3330      	adds	r3, #48	; 0x30
 800efdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efe0:	2100      	movs	r1, #0
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff fda9 	bl	800eb3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3330      	adds	r3, #48	; 0x30
 800efec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eff0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7ff fd38 	bl	800ea6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3330      	adds	r3, #48	; 0x30
 800effe:	4921      	ldr	r1, [pc, #132]	; (800f084 <sync_fs+0xd4>)
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff fd4d 	bl	800eaa0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3330      	adds	r3, #48	; 0x30
 800f00a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f00e:	491e      	ldr	r1, [pc, #120]	; (800f088 <sync_fs+0xd8>)
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fd45 	bl	800eaa0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	3330      	adds	r3, #48	; 0x30
 800f01a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	4619      	mov	r1, r3
 800f024:	4610      	mov	r0, r2
 800f026:	f7ff fd3b 	bl	800eaa0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	3330      	adds	r3, #48	; 0x30
 800f02e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	4619      	mov	r1, r3
 800f038:	4610      	mov	r0, r2
 800f03a:	f7ff fd31 	bl	800eaa0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	69db      	ldr	r3, [r3, #28]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7858      	ldrb	r0, [r3, #1]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f056:	2301      	movs	r3, #1
 800f058:	f7ff fc8e 	bl	800e978 <disk_write>
			fs->fsi_flag = 0;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	785b      	ldrb	r3, [r3, #1]
 800f066:	2200      	movs	r2, #0
 800f068:	2100      	movs	r1, #0
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fca4 	bl	800e9b8 <disk_ioctl>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <sync_fs+0xca>
 800f076:	2301      	movs	r3, #1
 800f078:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	41615252 	.word	0x41615252
 800f088:	61417272 	.word	0x61417272

0800f08c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	3b02      	subs	r3, #2
 800f09a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	3b02      	subs	r3, #2
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d301      	bcc.n	800f0ac <clust2sect+0x20>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e008      	b.n	800f0be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	895b      	ldrh	r3, [r3, #10]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	fb03 f202 	mul.w	r2, r3, r2
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0bc:	4413      	add	r3, r2
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b086      	sub	sp, #24
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d904      	bls.n	800f0ea <get_fat+0x20>
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	695b      	ldr	r3, [r3, #20]
 800f0e4:	683a      	ldr	r2, [r7, #0]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d302      	bcc.n	800f0f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	617b      	str	r3, [r7, #20]
 800f0ee:	e08f      	b.n	800f210 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d062      	beq.n	800f1c4 <get_fat+0xfa>
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	dc7c      	bgt.n	800f1fc <get_fat+0x132>
 800f102:	2b01      	cmp	r3, #1
 800f104:	d002      	beq.n	800f10c <get_fat+0x42>
 800f106:	2b02      	cmp	r3, #2
 800f108:	d042      	beq.n	800f190 <get_fat+0xc6>
 800f10a:	e077      	b.n	800f1fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	60fb      	str	r3, [r7, #12]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	085b      	lsrs	r3, r3, #1
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	4413      	add	r3, r2
 800f118:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	6a1a      	ldr	r2, [r3, #32]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	0a5b      	lsrs	r3, r3, #9
 800f122:	4413      	add	r3, r2
 800f124:	4619      	mov	r1, r3
 800f126:	6938      	ldr	r0, [r7, #16]
 800f128:	f7ff ff14 	bl	800ef54 <move_window>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d167      	bne.n	800f202 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	60fa      	str	r2, [r7, #12]
 800f138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f13c:	693a      	ldr	r2, [r7, #16]
 800f13e:	4413      	add	r3, r2
 800f140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f144:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	6a1a      	ldr	r2, [r3, #32]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	0a5b      	lsrs	r3, r3, #9
 800f14e:	4413      	add	r3, r2
 800f150:	4619      	mov	r1, r3
 800f152:	6938      	ldr	r0, [r7, #16]
 800f154:	f7ff fefe 	bl	800ef54 <move_window>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d153      	bne.n	800f206 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f164:	693a      	ldr	r2, [r7, #16]
 800f166:	4413      	add	r3, r2
 800f168:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f16c:	021b      	lsls	r3, r3, #8
 800f16e:	461a      	mov	r2, r3
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	4313      	orrs	r3, r2
 800f174:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	f003 0301 	and.w	r3, r3, #1
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d002      	beq.n	800f186 <get_fat+0xbc>
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	091b      	lsrs	r3, r3, #4
 800f184:	e002      	b.n	800f18c <get_fat+0xc2>
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f18c:	617b      	str	r3, [r7, #20]
			break;
 800f18e:	e03f      	b.n	800f210 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	6a1a      	ldr	r2, [r3, #32]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	0a1b      	lsrs	r3, r3, #8
 800f198:	4413      	add	r3, r2
 800f19a:	4619      	mov	r1, r3
 800f19c:	6938      	ldr	r0, [r7, #16]
 800f19e:	f7ff fed9 	bl	800ef54 <move_window>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d130      	bne.n	800f20a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f1b6:	4413      	add	r3, r2
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7ff fc1b 	bl	800e9f4 <ld_word>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	617b      	str	r3, [r7, #20]
			break;
 800f1c2:	e025      	b.n	800f210 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	6a1a      	ldr	r2, [r3, #32]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	09db      	lsrs	r3, r3, #7
 800f1cc:	4413      	add	r3, r2
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6938      	ldr	r0, [r7, #16]
 800f1d2:	f7ff febf 	bl	800ef54 <move_window>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d118      	bne.n	800f20e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f1ea:	4413      	add	r3, r2
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff fc19 	bl	800ea24 <ld_dword>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f1f8:	617b      	str	r3, [r7, #20]
			break;
 800f1fa:	e009      	b.n	800f210 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	617b      	str	r3, [r7, #20]
 800f200:	e006      	b.n	800f210 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f202:	bf00      	nop
 800f204:	e004      	b.n	800f210 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f206:	bf00      	nop
 800f208:	e002      	b.n	800f210 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f20a:	bf00      	nop
 800f20c:	e000      	b.n	800f210 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f20e:	bf00      	nop
		}
	}

	return val;
 800f210:	697b      	ldr	r3, [r7, #20]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f21a:	b590      	push	{r4, r7, lr}
 800f21c:	b089      	sub	sp, #36	; 0x24
 800f21e:	af00      	add	r7, sp, #0
 800f220:	60f8      	str	r0, [r7, #12]
 800f222:	60b9      	str	r1, [r7, #8]
 800f224:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f226:	2302      	movs	r3, #2
 800f228:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	f240 80d9 	bls.w	800f3e4 <put_fat+0x1ca>
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	429a      	cmp	r2, r3
 800f23a:	f080 80d3 	bcs.w	800f3e4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b03      	cmp	r3, #3
 800f244:	f000 8096 	beq.w	800f374 <put_fat+0x15a>
 800f248:	2b03      	cmp	r3, #3
 800f24a:	f300 80cb 	bgt.w	800f3e4 <put_fat+0x1ca>
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d002      	beq.n	800f258 <put_fat+0x3e>
 800f252:	2b02      	cmp	r3, #2
 800f254:	d06e      	beq.n	800f334 <put_fat+0x11a>
 800f256:	e0c5      	b.n	800f3e4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	61bb      	str	r3, [r7, #24]
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	085b      	lsrs	r3, r3, #1
 800f260:	69ba      	ldr	r2, [r7, #24]
 800f262:	4413      	add	r3, r2
 800f264:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6a1a      	ldr	r2, [r3, #32]
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	0a5b      	lsrs	r3, r3, #9
 800f26e:	4413      	add	r3, r2
 800f270:	4619      	mov	r1, r3
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f7ff fe6e 	bl	800ef54 <move_window>
 800f278:	4603      	mov	r3, r0
 800f27a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f27c:	7ffb      	ldrb	r3, [r7, #31]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f040 80a9 	bne.w	800f3d6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	1c59      	adds	r1, r3, #1
 800f28e:	61b9      	str	r1, [r7, #24]
 800f290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f294:	4413      	add	r3, r2
 800f296:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	f003 0301 	and.w	r3, r3, #1
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00d      	beq.n	800f2be <put_fat+0xa4>
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	b25b      	sxtb	r3, r3
 800f2a8:	f003 030f 	and.w	r3, r3, #15
 800f2ac:	b25a      	sxtb	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	011b      	lsls	r3, r3, #4
 800f2b4:	b25b      	sxtb	r3, r3
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	b25b      	sxtb	r3, r3
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	e001      	b.n	800f2c2 <put_fat+0xa8>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	6a1a      	ldr	r2, [r3, #32]
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	0a5b      	lsrs	r3, r3, #9
 800f2d4:	4413      	add	r3, r2
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f7ff fe3b 	bl	800ef54 <move_window>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2e2:	7ffb      	ldrb	r3, [r7, #31]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d178      	bne.n	800f3da <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2f4:	4413      	add	r3, r2
 800f2f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <put_fat+0xf0>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	091b      	lsrs	r3, r3, #4
 800f306:	b2db      	uxtb	r3, r3
 800f308:	e00e      	b.n	800f328 <put_fat+0x10e>
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	b25b      	sxtb	r3, r3
 800f310:	f023 030f 	bic.w	r3, r3, #15
 800f314:	b25a      	sxtb	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	0a1b      	lsrs	r3, r3, #8
 800f31a:	b25b      	sxtb	r3, r3
 800f31c:	f003 030f 	and.w	r3, r3, #15
 800f320:	b25b      	sxtb	r3, r3
 800f322:	4313      	orrs	r3, r2
 800f324:	b25b      	sxtb	r3, r3
 800f326:	b2db      	uxtb	r3, r3
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2201      	movs	r2, #1
 800f330:	70da      	strb	r2, [r3, #3]
			break;
 800f332:	e057      	b.n	800f3e4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6a1a      	ldr	r2, [r3, #32]
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	0a1b      	lsrs	r3, r3, #8
 800f33c:	4413      	add	r3, r2
 800f33e:	4619      	mov	r1, r3
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7ff fe07 	bl	800ef54 <move_window>
 800f346:	4603      	mov	r3, r0
 800f348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f34a:	7ffb      	ldrb	r3, [r7, #31]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d146      	bne.n	800f3de <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	005b      	lsls	r3, r3, #1
 800f35a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f35e:	4413      	add	r3, r2
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	b292      	uxth	r2, r2
 800f364:	4611      	mov	r1, r2
 800f366:	4618      	mov	r0, r3
 800f368:	f7ff fb7f 	bl	800ea6a <st_word>
			fs->wflag = 1;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2201      	movs	r2, #1
 800f370:	70da      	strb	r2, [r3, #3]
			break;
 800f372:	e037      	b.n	800f3e4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6a1a      	ldr	r2, [r3, #32]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	09db      	lsrs	r3, r3, #7
 800f37c:	4413      	add	r3, r2
 800f37e:	4619      	mov	r1, r3
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7ff fde7 	bl	800ef54 <move_window>
 800f386:	4603      	mov	r3, r0
 800f388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f38a:	7ffb      	ldrb	r3, [r7, #31]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d128      	bne.n	800f3e2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3a4:	4413      	add	r3, r2
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff fb3c 	bl	800ea24 <ld_dword>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f3b2:	4323      	orrs	r3, r4
 800f3b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3c4:	4413      	add	r3, r2
 800f3c6:	6879      	ldr	r1, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff fb69 	bl	800eaa0 <st_dword>
			fs->wflag = 1;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	70da      	strb	r2, [r3, #3]
			break;
 800f3d4:	e006      	b.n	800f3e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3d6:	bf00      	nop
 800f3d8:	e004      	b.n	800f3e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3da:	bf00      	nop
 800f3dc:	e002      	b.n	800f3e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3de:	bf00      	nop
 800f3e0:	e000      	b.n	800f3e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f3e2:	bf00      	nop
		}
	}
	return res;
 800f3e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3724      	adds	r7, #36	; 0x24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd90      	pop	{r4, r7, pc}

0800f3ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b088      	sub	sp, #32
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	60f8      	str	r0, [r7, #12]
 800f3f6:	60b9      	str	r1, [r7, #8]
 800f3f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d904      	bls.n	800f414 <remove_chain+0x26>
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	695b      	ldr	r3, [r3, #20]
 800f40e:	68ba      	ldr	r2, [r7, #8]
 800f410:	429a      	cmp	r2, r3
 800f412:	d301      	bcc.n	800f418 <remove_chain+0x2a>
 800f414:	2302      	movs	r3, #2
 800f416:	e04b      	b.n	800f4b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00c      	beq.n	800f438 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f41e:	f04f 32ff 	mov.w	r2, #4294967295
 800f422:	6879      	ldr	r1, [r7, #4]
 800f424:	69b8      	ldr	r0, [r7, #24]
 800f426:	f7ff fef8 	bl	800f21a <put_fat>
 800f42a:	4603      	mov	r3, r0
 800f42c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f42e:	7ffb      	ldrb	r3, [r7, #31]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d001      	beq.n	800f438 <remove_chain+0x4a>
 800f434:	7ffb      	ldrb	r3, [r7, #31]
 800f436:	e03b      	b.n	800f4b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f438:	68b9      	ldr	r1, [r7, #8]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7ff fe45 	bl	800f0ca <get_fat>
 800f440:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d031      	beq.n	800f4ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d101      	bne.n	800f452 <remove_chain+0x64>
 800f44e:	2302      	movs	r3, #2
 800f450:	e02e      	b.n	800f4b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f458:	d101      	bne.n	800f45e <remove_chain+0x70>
 800f45a:	2301      	movs	r3, #1
 800f45c:	e028      	b.n	800f4b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f45e:	2200      	movs	r2, #0
 800f460:	68b9      	ldr	r1, [r7, #8]
 800f462:	69b8      	ldr	r0, [r7, #24]
 800f464:	f7ff fed9 	bl	800f21a <put_fat>
 800f468:	4603      	mov	r3, r0
 800f46a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f46c:	7ffb      	ldrb	r3, [r7, #31]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <remove_chain+0x88>
 800f472:	7ffb      	ldrb	r3, [r7, #31]
 800f474:	e01c      	b.n	800f4b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	691a      	ldr	r2, [r3, #16]
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	3b02      	subs	r3, #2
 800f480:	429a      	cmp	r2, r3
 800f482:	d20b      	bcs.n	800f49c <remove_chain+0xae>
			fs->free_clst++;
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	791b      	ldrb	r3, [r3, #4]
 800f492:	f043 0301 	orr.w	r3, r3, #1
 800f496:	b2da      	uxtb	r2, r3
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d3c6      	bcc.n	800f438 <remove_chain+0x4a>
 800f4aa:	e000      	b.n	800f4ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f4ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3720      	adds	r7, #32
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b088      	sub	sp, #32
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10d      	bne.n	800f4ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d004      	beq.n	800f4e4 <create_chain+0x2c>
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	695b      	ldr	r3, [r3, #20]
 800f4de:	69ba      	ldr	r2, [r7, #24]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d31b      	bcc.n	800f51c <create_chain+0x64>
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	61bb      	str	r3, [r7, #24]
 800f4e8:	e018      	b.n	800f51c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4ea:	6839      	ldr	r1, [r7, #0]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff fdec 	bl	800f0ca <get_fat>
 800f4f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d801      	bhi.n	800f4fe <create_chain+0x46>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e070      	b.n	800f5e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f504:	d101      	bne.n	800f50a <create_chain+0x52>
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	e06a      	b.n	800f5e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	695b      	ldr	r3, [r3, #20]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	429a      	cmp	r2, r3
 800f512:	d201      	bcs.n	800f518 <create_chain+0x60>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	e063      	b.n	800f5e0 <create_chain+0x128>
		scl = clst;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	3301      	adds	r3, #1
 800f524:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	69fa      	ldr	r2, [r7, #28]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d307      	bcc.n	800f540 <create_chain+0x88>
				ncl = 2;
 800f530:	2302      	movs	r3, #2
 800f532:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f534:	69fa      	ldr	r2, [r7, #28]
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d901      	bls.n	800f540 <create_chain+0x88>
 800f53c:	2300      	movs	r3, #0
 800f53e:	e04f      	b.n	800f5e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f540:	69f9      	ldr	r1, [r7, #28]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff fdc1 	bl	800f0ca <get_fat>
 800f548:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00e      	beq.n	800f56e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d003      	beq.n	800f55e <create_chain+0xa6>
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f55c:	d101      	bne.n	800f562 <create_chain+0xaa>
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	e03e      	b.n	800f5e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f562:	69fa      	ldr	r2, [r7, #28]
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	429a      	cmp	r2, r3
 800f568:	d1da      	bne.n	800f520 <create_chain+0x68>
 800f56a:	2300      	movs	r3, #0
 800f56c:	e038      	b.n	800f5e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f56e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f570:	f04f 32ff 	mov.w	r2, #4294967295
 800f574:	69f9      	ldr	r1, [r7, #28]
 800f576:	6938      	ldr	r0, [r7, #16]
 800f578:	f7ff fe4f 	bl	800f21a <put_fat>
 800f57c:	4603      	mov	r3, r0
 800f57e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f580:	7dfb      	ldrb	r3, [r7, #23]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d109      	bne.n	800f59a <create_chain+0xe2>
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d006      	beq.n	800f59a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	6839      	ldr	r1, [r7, #0]
 800f590:	6938      	ldr	r0, [r7, #16]
 800f592:	f7ff fe42 	bl	800f21a <put_fat>
 800f596:	4603      	mov	r3, r0
 800f598:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f59a:	7dfb      	ldrb	r3, [r7, #23]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d116      	bne.n	800f5ce <create_chain+0x116>
		fs->last_clst = ncl;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	69fa      	ldr	r2, [r7, #28]
 800f5a4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	691a      	ldr	r2, [r3, #16]
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	695b      	ldr	r3, [r3, #20]
 800f5ae:	3b02      	subs	r3, #2
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d804      	bhi.n	800f5be <create_chain+0x106>
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	1e5a      	subs	r2, r3, #1
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	791b      	ldrb	r3, [r3, #4]
 800f5c2:	f043 0301 	orr.w	r3, r3, #1
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	711a      	strb	r2, [r3, #4]
 800f5cc:	e007      	b.n	800f5de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f5ce:	7dfb      	ldrb	r3, [r7, #23]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d102      	bne.n	800f5da <create_chain+0x122>
 800f5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d8:	e000      	b.n	800f5dc <create_chain+0x124>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f5de:	69fb      	ldr	r3, [r7, #28]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3720      	adds	r7, #32
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	0a5b      	lsrs	r3, r3, #9
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	8952      	ldrh	r2, [r2, #10]
 800f608:	fbb3 f3f2 	udiv	r3, r3, r2
 800f60c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	1d1a      	adds	r2, r3, #4
 800f612:	613a      	str	r2, [r7, #16]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d101      	bne.n	800f622 <clmt_clust+0x3a>
 800f61e:	2300      	movs	r3, #0
 800f620:	e010      	b.n	800f644 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f622:	697a      	ldr	r2, [r7, #20]
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	429a      	cmp	r2, r3
 800f628:	d307      	bcc.n	800f63a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	617b      	str	r3, [r7, #20]
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	3304      	adds	r3, #4
 800f636:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f638:	e7e9      	b.n	800f60e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f63a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	4413      	add	r3, r2
}
 800f644:	4618      	mov	r0, r3
 800f646:	371c      	adds	r7, #28
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f666:	d204      	bcs.n	800f672 <dir_sdi+0x22>
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	f003 031f 	and.w	r3, r3, #31
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f672:	2302      	movs	r3, #2
 800f674:	e063      	b.n	800f73e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	683a      	ldr	r2, [r7, #0]
 800f67a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d106      	bne.n	800f696 <dir_sdi+0x46>
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	2b02      	cmp	r3, #2
 800f68e:	d902      	bls.n	800f696 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f694:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10c      	bne.n	800f6b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	095b      	lsrs	r3, r3, #5
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	8912      	ldrh	r2, [r2, #8]
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d301      	bcc.n	800f6ac <dir_sdi+0x5c>
 800f6a8:	2302      	movs	r3, #2
 800f6aa:	e048      	b.n	800f73e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	61da      	str	r2, [r3, #28]
 800f6b4:	e029      	b.n	800f70a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	895b      	ldrh	r3, [r3, #10]
 800f6ba:	025b      	lsls	r3, r3, #9
 800f6bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6be:	e019      	b.n	800f6f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6979      	ldr	r1, [r7, #20]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff fd00 	bl	800f0ca <get_fat>
 800f6ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d2:	d101      	bne.n	800f6d8 <dir_sdi+0x88>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e032      	b.n	800f73e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d904      	bls.n	800f6e8 <dir_sdi+0x98>
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	697a      	ldr	r2, [r7, #20]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d301      	bcc.n	800f6ec <dir_sdi+0x9c>
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	e028      	b.n	800f73e <dir_sdi+0xee>
			ofs -= csz;
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d2e1      	bcs.n	800f6c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f6fc:	6979      	ldr	r1, [r7, #20]
 800f6fe:	6938      	ldr	r0, [r7, #16]
 800f700:	f7ff fcc4 	bl	800f08c <clust2sect>
 800f704:	4602      	mov	r2, r0
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	69db      	ldr	r3, [r3, #28]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <dir_sdi+0xcc>
 800f718:	2302      	movs	r3, #2
 800f71a:	e010      	b.n	800f73e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	69da      	ldr	r2, [r3, #28]
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	0a5b      	lsrs	r3, r3, #9
 800f724:	441a      	add	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f736:	441a      	add	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3718      	adds	r7, #24
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f746:	b580      	push	{r7, lr}
 800f748:	b086      	sub	sp, #24
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	695b      	ldr	r3, [r3, #20]
 800f75a:	3320      	adds	r3, #32
 800f75c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d003      	beq.n	800f76e <dir_next+0x28>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f76c:	d301      	bcc.n	800f772 <dir_next+0x2c>
 800f76e:	2304      	movs	r3, #4
 800f770:	e0aa      	b.n	800f8c8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f040 8098 	bne.w	800f8ae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	1c5a      	adds	r2, r3, #1
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d10b      	bne.n	800f7a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	095b      	lsrs	r3, r3, #5
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	8912      	ldrh	r2, [r2, #8]
 800f798:	4293      	cmp	r3, r2
 800f79a:	f0c0 8088 	bcc.w	800f8ae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	61da      	str	r2, [r3, #28]
 800f7a4:	2304      	movs	r3, #4
 800f7a6:	e08f      	b.n	800f8c8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	0a5b      	lsrs	r3, r3, #9
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	8952      	ldrh	r2, [r2, #10]
 800f7b0:	3a01      	subs	r2, #1
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d17a      	bne.n	800f8ae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	699b      	ldr	r3, [r3, #24]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	f7ff fc82 	bl	800f0ca <get_fat>
 800f7c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d801      	bhi.n	800f7d2 <dir_next+0x8c>
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	e07a      	b.n	800f8c8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d8:	d101      	bne.n	800f7de <dir_next+0x98>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e074      	b.n	800f8c8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	695b      	ldr	r3, [r3, #20]
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d358      	bcc.n	800f89a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d104      	bne.n	800f7f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	61da      	str	r2, [r3, #28]
 800f7f4:	2304      	movs	r3, #4
 800f7f6:	e067      	b.n	800f8c8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	699b      	ldr	r3, [r3, #24]
 800f7fe:	4619      	mov	r1, r3
 800f800:	4610      	mov	r0, r2
 800f802:	f7ff fe59 	bl	800f4b8 <create_chain>
 800f806:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d101      	bne.n	800f812 <dir_next+0xcc>
 800f80e:	2307      	movs	r3, #7
 800f810:	e05a      	b.n	800f8c8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d101      	bne.n	800f81c <dir_next+0xd6>
 800f818:	2302      	movs	r3, #2
 800f81a:	e055      	b.n	800f8c8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f822:	d101      	bne.n	800f828 <dir_next+0xe2>
 800f824:	2301      	movs	r3, #1
 800f826:	e04f      	b.n	800f8c8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f7ff fb4f 	bl	800eecc <sync_window>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <dir_next+0xf2>
 800f834:	2301      	movs	r3, #1
 800f836:	e047      	b.n	800f8c8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3330      	adds	r3, #48	; 0x30
 800f83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f840:	2100      	movs	r1, #0
 800f842:	4618      	mov	r0, r3
 800f844:	f7ff f979 	bl	800eb3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f848:	2300      	movs	r3, #0
 800f84a:	613b      	str	r3, [r7, #16]
 800f84c:	6979      	ldr	r1, [r7, #20]
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f7ff fc1c 	bl	800f08c <clust2sect>
 800f854:	4602      	mov	r2, r0
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	62da      	str	r2, [r3, #44]	; 0x2c
 800f85a:	e012      	b.n	800f882 <dir_next+0x13c>
						fs->wflag = 1;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2201      	movs	r2, #1
 800f860:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f7ff fb32 	bl	800eecc <sync_window>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <dir_next+0x12c>
 800f86e:	2301      	movs	r3, #1
 800f870:	e02a      	b.n	800f8c8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	3301      	adds	r3, #1
 800f876:	613b      	str	r3, [r7, #16]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87c:	1c5a      	adds	r2, r3, #1
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	62da      	str	r2, [r3, #44]	; 0x2c
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	895b      	ldrh	r3, [r3, #10]
 800f886:	461a      	mov	r2, r3
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d3e6      	bcc.n	800f85c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	1ad2      	subs	r2, r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	697a      	ldr	r2, [r7, #20]
 800f89e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f8a0:	6979      	ldr	r1, [r7, #20]
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f7ff fbf2 	bl	800f08c <clust2sect>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8c0:	441a      	add	r2, r3
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7ff feb4 	bl	800f650 <dir_sdi>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8ec:	7dfb      	ldrb	r3, [r7, #23]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d12b      	bne.n	800f94a <dir_alloc+0x7a>
		n = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	69db      	ldr	r3, [r3, #28]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	68f8      	ldr	r0, [r7, #12]
 800f8fe:	f7ff fb29 	bl	800ef54 <move_window>
 800f902:	4603      	mov	r3, r0
 800f904:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f906:	7dfb      	ldrb	r3, [r7, #23]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d11d      	bne.n	800f948 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a1b      	ldr	r3, [r3, #32]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	2be5      	cmp	r3, #229	; 0xe5
 800f914:	d004      	beq.n	800f920 <dir_alloc+0x50>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d107      	bne.n	800f930 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	3301      	adds	r3, #1
 800f924:	613b      	str	r3, [r7, #16]
 800f926:	693a      	ldr	r2, [r7, #16]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d102      	bne.n	800f934 <dir_alloc+0x64>
 800f92e:	e00c      	b.n	800f94a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f930:	2300      	movs	r3, #0
 800f932:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f934:	2101      	movs	r1, #1
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7ff ff05 	bl	800f746 <dir_next>
 800f93c:	4603      	mov	r3, r0
 800f93e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d0d7      	beq.n	800f8f6 <dir_alloc+0x26>
 800f946:	e000      	b.n	800f94a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f948:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	2b04      	cmp	r3, #4
 800f94e:	d101      	bne.n	800f954 <dir_alloc+0x84>
 800f950:	2307      	movs	r3, #7
 800f952:	75fb      	strb	r3, [r7, #23]
	return res;
 800f954:	7dfb      	ldrb	r3, [r7, #23]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3718      	adds	r7, #24
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	331a      	adds	r3, #26
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7ff f841 	bl	800e9f4 <ld_word>
 800f972:	4603      	mov	r3, r0
 800f974:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d109      	bne.n	800f992 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	3314      	adds	r3, #20
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff f836 	bl	800e9f4 <ld_word>
 800f988:	4603      	mov	r3, r0
 800f98a:	041b      	lsls	r3, r3, #16
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	4313      	orrs	r3, r2
 800f990:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f992:	68fb      	ldr	r3, [r7, #12]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	60b9      	str	r1, [r7, #8]
 800f9a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	331a      	adds	r3, #26
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	b292      	uxth	r2, r2
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7ff f859 	bl	800ea6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b03      	cmp	r3, #3
 800f9be:	d109      	bne.n	800f9d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f103 0214 	add.w	r2, r3, #20
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	0c1b      	lsrs	r3, r3, #16
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	f7ff f84b 	bl	800ea6a <st_word>
	}
}
 800f9d4:	bf00      	nop
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff fe2f 	bl	800f650 <dir_sdi>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f9f6:	7dfb      	ldrb	r3, [r7, #23]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <dir_find+0x24>
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	e03e      	b.n	800fa7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	69db      	ldr	r3, [r3, #28]
 800fa04:	4619      	mov	r1, r3
 800fa06:	6938      	ldr	r0, [r7, #16]
 800fa08:	f7ff faa4 	bl	800ef54 <move_window>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa10:	7dfb      	ldrb	r3, [r7, #23]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d12f      	bne.n	800fa76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fa1e:	7bfb      	ldrb	r3, [r7, #15]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d102      	bne.n	800fa2a <dir_find+0x4e>
 800fa24:	2304      	movs	r3, #4
 800fa26:	75fb      	strb	r3, [r7, #23]
 800fa28:	e028      	b.n	800fa7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	330b      	adds	r3, #11
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a1b      	ldr	r3, [r3, #32]
 800fa40:	330b      	adds	r3, #11
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	f003 0308 	and.w	r3, r3, #8
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10a      	bne.n	800fa62 <dir_find+0x86>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a18      	ldr	r0, [r3, #32]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	3324      	adds	r3, #36	; 0x24
 800fa54:	220b      	movs	r2, #11
 800fa56:	4619      	mov	r1, r3
 800fa58:	f7ff f88a 	bl	800eb70 <mem_cmp>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00b      	beq.n	800fa7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fa62:	2100      	movs	r1, #0
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f7ff fe6e 	bl	800f746 <dir_next>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fa6e:	7dfb      	ldrb	r3, [r7, #23]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d0c5      	beq.n	800fa00 <dir_find+0x24>
 800fa74:	e002      	b.n	800fa7c <dir_find+0xa0>
		if (res != FR_OK) break;
 800fa76:	bf00      	nop
 800fa78:	e000      	b.n	800fa7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fa7a:	bf00      	nop

	return res;
 800fa7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3718      	adds	r7, #24
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	b084      	sub	sp, #16
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fa94:	2101      	movs	r1, #1
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff ff1a 	bl	800f8d0 <dir_alloc>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d11c      	bne.n	800fae0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	69db      	ldr	r3, [r3, #28]
 800faaa:	4619      	mov	r1, r3
 800faac:	68b8      	ldr	r0, [r7, #8]
 800faae:	f7ff fa51 	bl	800ef54 <move_window>
 800fab2:	4603      	mov	r3, r0
 800fab4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fab6:	7bfb      	ldrb	r3, [r7, #15]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d111      	bne.n	800fae0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a1b      	ldr	r3, [r3, #32]
 800fac0:	2220      	movs	r2, #32
 800fac2:	2100      	movs	r1, #0
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff f838 	bl	800eb3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a18      	ldr	r0, [r3, #32]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	3324      	adds	r3, #36	; 0x24
 800fad2:	220b      	movs	r2, #11
 800fad4:	4619      	mov	r1, r3
 800fad6:	f7ff f80f 	bl	800eaf8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	2201      	movs	r2, #1
 800fade:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b088      	sub	sp, #32
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	60fb      	str	r3, [r7, #12]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	3324      	adds	r3, #36	; 0x24
 800fb00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fb02:	220b      	movs	r2, #11
 800fb04:	2120      	movs	r1, #32
 800fb06:	68b8      	ldr	r0, [r7, #8]
 800fb08:	f7ff f817 	bl	800eb3a <mem_set>
	si = i = 0; ni = 8;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	613b      	str	r3, [r7, #16]
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	61fb      	str	r3, [r7, #28]
 800fb14:	2308      	movs	r3, #8
 800fb16:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	61fa      	str	r2, [r7, #28]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	4413      	add	r3, r2
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fb26:	7efb      	ldrb	r3, [r7, #27]
 800fb28:	2b20      	cmp	r3, #32
 800fb2a:	d94e      	bls.n	800fbca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fb2c:	7efb      	ldrb	r3, [r7, #27]
 800fb2e:	2b2f      	cmp	r3, #47	; 0x2f
 800fb30:	d006      	beq.n	800fb40 <create_name+0x54>
 800fb32:	7efb      	ldrb	r3, [r7, #27]
 800fb34:	2b5c      	cmp	r3, #92	; 0x5c
 800fb36:	d110      	bne.n	800fb5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fb38:	e002      	b.n	800fb40 <create_name+0x54>
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	61fb      	str	r3, [r7, #28]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	4413      	add	r3, r2
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	2b2f      	cmp	r3, #47	; 0x2f
 800fb4a:	d0f6      	beq.n	800fb3a <create_name+0x4e>
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	4413      	add	r3, r2
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2b5c      	cmp	r3, #92	; 0x5c
 800fb56:	d0f0      	beq.n	800fb3a <create_name+0x4e>
			break;
 800fb58:	e038      	b.n	800fbcc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fb5a:	7efb      	ldrb	r3, [r7, #27]
 800fb5c:	2b2e      	cmp	r3, #46	; 0x2e
 800fb5e:	d003      	beq.n	800fb68 <create_name+0x7c>
 800fb60:	693a      	ldr	r2, [r7, #16]
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d30c      	bcc.n	800fb82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2b0b      	cmp	r3, #11
 800fb6c:	d002      	beq.n	800fb74 <create_name+0x88>
 800fb6e:	7efb      	ldrb	r3, [r7, #27]
 800fb70:	2b2e      	cmp	r3, #46	; 0x2e
 800fb72:	d001      	beq.n	800fb78 <create_name+0x8c>
 800fb74:	2306      	movs	r3, #6
 800fb76:	e044      	b.n	800fc02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fb78:	2308      	movs	r3, #8
 800fb7a:	613b      	str	r3, [r7, #16]
 800fb7c:	230b      	movs	r3, #11
 800fb7e:	617b      	str	r3, [r7, #20]
			continue;
 800fb80:	e022      	b.n	800fbc8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fb82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	da04      	bge.n	800fb94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fb8a:	7efb      	ldrb	r3, [r7, #27]
 800fb8c:	3b80      	subs	r3, #128	; 0x80
 800fb8e:	4a1f      	ldr	r2, [pc, #124]	; (800fc0c <create_name+0x120>)
 800fb90:	5cd3      	ldrb	r3, [r2, r3]
 800fb92:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fb94:	7efb      	ldrb	r3, [r7, #27]
 800fb96:	4619      	mov	r1, r3
 800fb98:	481d      	ldr	r0, [pc, #116]	; (800fc10 <create_name+0x124>)
 800fb9a:	f7ff f810 	bl	800ebbe <chk_chr>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <create_name+0xbc>
 800fba4:	2306      	movs	r3, #6
 800fba6:	e02c      	b.n	800fc02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fba8:	7efb      	ldrb	r3, [r7, #27]
 800fbaa:	2b60      	cmp	r3, #96	; 0x60
 800fbac:	d905      	bls.n	800fbba <create_name+0xce>
 800fbae:	7efb      	ldrb	r3, [r7, #27]
 800fbb0:	2b7a      	cmp	r3, #122	; 0x7a
 800fbb2:	d802      	bhi.n	800fbba <create_name+0xce>
 800fbb4:	7efb      	ldrb	r3, [r7, #27]
 800fbb6:	3b20      	subs	r3, #32
 800fbb8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	1c5a      	adds	r2, r3, #1
 800fbbe:	613a      	str	r2, [r7, #16]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	7efa      	ldrb	r2, [r7, #27]
 800fbc6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fbc8:	e7a6      	b.n	800fb18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fbca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	441a      	add	r2, r3
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d101      	bne.n	800fbe0 <create_name+0xf4>
 800fbdc:	2306      	movs	r3, #6
 800fbde:	e010      	b.n	800fc02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	2be5      	cmp	r3, #229	; 0xe5
 800fbe6:	d102      	bne.n	800fbee <create_name+0x102>
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2205      	movs	r2, #5
 800fbec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fbee:	7efb      	ldrb	r3, [r7, #27]
 800fbf0:	2b20      	cmp	r3, #32
 800fbf2:	d801      	bhi.n	800fbf8 <create_name+0x10c>
 800fbf4:	2204      	movs	r2, #4
 800fbf6:	e000      	b.n	800fbfa <create_name+0x10e>
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	330b      	adds	r3, #11
 800fbfe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fc00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3720      	adds	r7, #32
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	08016910 	.word	0x08016910
 800fc10:	08016628 	.word	0x08016628

0800fc14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fc28:	e002      	b.n	800fc30 <follow_path+0x1c>
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	603b      	str	r3, [r7, #0]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2b2f      	cmp	r3, #47	; 0x2f
 800fc36:	d0f8      	beq.n	800fc2a <follow_path+0x16>
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	2b5c      	cmp	r3, #92	; 0x5c
 800fc3e:	d0f4      	beq.n	800fc2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	2200      	movs	r2, #0
 800fc44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	2b1f      	cmp	r3, #31
 800fc4c:	d80a      	bhi.n	800fc64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2280      	movs	r2, #128	; 0x80
 800fc52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc56:	2100      	movs	r1, #0
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7ff fcf9 	bl	800f650 <dir_sdi>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	75fb      	strb	r3, [r7, #23]
 800fc62:	e043      	b.n	800fcec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc64:	463b      	mov	r3, r7
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff ff3f 	bl	800faec <create_name>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d134      	bne.n	800fce2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7ff feaf 	bl	800f9dc <dir_find>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00a      	beq.n	800fca6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fc90:	7dfb      	ldrb	r3, [r7, #23]
 800fc92:	2b04      	cmp	r3, #4
 800fc94:	d127      	bne.n	800fce6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fc96:	7afb      	ldrb	r3, [r7, #11]
 800fc98:	f003 0304 	and.w	r3, r3, #4
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d122      	bne.n	800fce6 <follow_path+0xd2>
 800fca0:	2305      	movs	r3, #5
 800fca2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fca4:	e01f      	b.n	800fce6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fca6:	7afb      	ldrb	r3, [r7, #11]
 800fca8:	f003 0304 	and.w	r3, r3, #4
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d11c      	bne.n	800fcea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	799b      	ldrb	r3, [r3, #6]
 800fcb4:	f003 0310 	and.w	r3, r3, #16
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d102      	bne.n	800fcc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fcbc:	2305      	movs	r3, #5
 800fcbe:	75fb      	strb	r3, [r7, #23]
 800fcc0:	e014      	b.n	800fcec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	695b      	ldr	r3, [r3, #20]
 800fccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcd0:	4413      	add	r3, r2
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff fe42 	bl	800f95e <ld_clust>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fce0:	e7c0      	b.n	800fc64 <follow_path+0x50>
			if (res != FR_OK) break;
 800fce2:	bf00      	nop
 800fce4:	e002      	b.n	800fcec <follow_path+0xd8>
				break;
 800fce6:	bf00      	nop
 800fce8:	e000      	b.n	800fcec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcea:	bf00      	nop
			}
		}
	}

	return res;
 800fcec:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3718      	adds	r7, #24
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fcf6:	b480      	push	{r7}
 800fcf8:	b087      	sub	sp, #28
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fcfe:	f04f 33ff 	mov.w	r3, #4294967295
 800fd02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d031      	beq.n	800fd70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	e002      	b.n	800fd1a <get_ldnumber+0x24>
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	3301      	adds	r3, #1
 800fd18:	617b      	str	r3, [r7, #20]
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	2b20      	cmp	r3, #32
 800fd20:	d903      	bls.n	800fd2a <get_ldnumber+0x34>
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	2b3a      	cmp	r3, #58	; 0x3a
 800fd28:	d1f4      	bne.n	800fd14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	2b3a      	cmp	r3, #58	; 0x3a
 800fd30:	d11c      	bne.n	800fd6c <get_ldnumber+0x76>
			tp = *path;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	60fa      	str	r2, [r7, #12]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	3b30      	subs	r3, #48	; 0x30
 800fd42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b09      	cmp	r3, #9
 800fd48:	d80e      	bhi.n	800fd68 <get_ldnumber+0x72>
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d10a      	bne.n	800fd68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d107      	bne.n	800fd68 <get_ldnumber+0x72>
					vol = (int)i;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	617b      	str	r3, [r7, #20]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	697a      	ldr	r2, [r7, #20]
 800fd66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	e002      	b.n	800fd72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fd70:	693b      	ldr	r3, [r7, #16]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
	...

0800fd80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	70da      	strb	r2, [r3, #3]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f04f 32ff 	mov.w	r2, #4294967295
 800fd96:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f7ff f8da 	bl	800ef54 <move_window>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <check_fs+0x2a>
 800fda6:	2304      	movs	r3, #4
 800fda8:	e038      	b.n	800fe1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	3330      	adds	r3, #48	; 0x30
 800fdae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fe fe1e 	bl	800e9f4 <ld_word>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	461a      	mov	r2, r3
 800fdbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d001      	beq.n	800fdc8 <check_fs+0x48>
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	e029      	b.n	800fe1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdce:	2be9      	cmp	r3, #233	; 0xe9
 800fdd0:	d009      	beq.n	800fde6 <check_fs+0x66>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdd8:	2beb      	cmp	r3, #235	; 0xeb
 800fdda:	d11e      	bne.n	800fe1a <check_fs+0x9a>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fde2:	2b90      	cmp	r3, #144	; 0x90
 800fde4:	d119      	bne.n	800fe1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3330      	adds	r3, #48	; 0x30
 800fdea:	3336      	adds	r3, #54	; 0x36
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fe fe19 	bl	800ea24 <ld_dword>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fdf8:	4a0a      	ldr	r2, [pc, #40]	; (800fe24 <check_fs+0xa4>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d101      	bne.n	800fe02 <check_fs+0x82>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	e00c      	b.n	800fe1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3330      	adds	r3, #48	; 0x30
 800fe06:	3352      	adds	r3, #82	; 0x52
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe fe0b 	bl	800ea24 <ld_dword>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	4a05      	ldr	r2, [pc, #20]	; (800fe28 <check_fs+0xa8>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d101      	bne.n	800fe1a <check_fs+0x9a>
 800fe16:	2300      	movs	r3, #0
 800fe18:	e000      	b.n	800fe1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fe1a:	2302      	movs	r3, #2
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	00544146 	.word	0x00544146
 800fe28:	33544146 	.word	0x33544146

0800fe2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b096      	sub	sp, #88	; 0x58
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	4613      	mov	r3, r2
 800fe38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe40:	68f8      	ldr	r0, [r7, #12]
 800fe42:	f7ff ff58 	bl	800fcf6 <get_ldnumber>
 800fe46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	da01      	bge.n	800fe52 <find_volume+0x26>
 800fe4e:	230b      	movs	r3, #11
 800fe50:	e22d      	b.n	80102ae <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe52:	4aa1      	ldr	r2, [pc, #644]	; (80100d8 <find_volume+0x2ac>)
 800fe54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <find_volume+0x3a>
 800fe62:	230c      	movs	r3, #12
 800fe64:	e223      	b.n	80102ae <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fe6c:	79fb      	ldrb	r3, [r7, #7]
 800fe6e:	f023 0301 	bic.w	r3, r3, #1
 800fe72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d01a      	beq.n	800feb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fe7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7e:	785b      	ldrb	r3, [r3, #1]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fe fd19 	bl	800e8b8 <disk_status>
 800fe86:	4603      	mov	r3, r0
 800fe88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fe8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d10c      	bne.n	800feb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d007      	beq.n	800feae <find_volume+0x82>
 800fe9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fea2:	f003 0304 	and.w	r3, r3, #4
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800feaa:	230a      	movs	r3, #10
 800feac:	e1ff      	b.n	80102ae <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800feae:	2300      	movs	r3, #0
 800feb0:	e1fd      	b.n	80102ae <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800feb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb4:	2200      	movs	r2, #0
 800feb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800feb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feba:	b2da      	uxtb	r2, r3
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	785b      	ldrb	r3, [r3, #1]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fe fd11 	bl	800e8ec <disk_initialize>
 800feca:	4603      	mov	r3, r0
 800fecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed4:	f003 0301 	and.w	r3, r3, #1
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fedc:	2303      	movs	r3, #3
 800fede:	e1e6      	b.n	80102ae <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d007      	beq.n	800fef6 <find_volume+0xca>
 800fee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feea:	f003 0304 	and.w	r3, r3, #4
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fef2:	230a      	movs	r3, #10
 800fef4:	e1db      	b.n	80102ae <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fefe:	f7ff ff3f 	bl	800fd80 <check_fs>
 800ff02:	4603      	mov	r3, r0
 800ff04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff0c:	2b02      	cmp	r3, #2
 800ff0e:	d149      	bne.n	800ffa4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff10:	2300      	movs	r3, #0
 800ff12:	643b      	str	r3, [r7, #64]	; 0x40
 800ff14:	e01e      	b.n	800ff54 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ff1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff1e:	011b      	lsls	r3, r3, #4
 800ff20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ff24:	4413      	add	r3, r2
 800ff26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d006      	beq.n	800ff40 <find_volume+0x114>
 800ff32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff34:	3308      	adds	r3, #8
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fe fd74 	bl	800ea24 <ld_dword>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	e000      	b.n	800ff42 <find_volume+0x116>
 800ff40:	2200      	movs	r2, #0
 800ff42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	3358      	adds	r3, #88	; 0x58
 800ff48:	443b      	add	r3, r7
 800ff4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff50:	3301      	adds	r3, #1
 800ff52:	643b      	str	r3, [r7, #64]	; 0x40
 800ff54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d9dd      	bls.n	800ff16 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ff5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d002      	beq.n	800ff6a <find_volume+0x13e>
 800ff64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff66:	3b01      	subs	r3, #1
 800ff68:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ff6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	3358      	adds	r3, #88	; 0x58
 800ff70:	443b      	add	r3, r7
 800ff72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ff76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ff78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d005      	beq.n	800ff8a <find_volume+0x15e>
 800ff7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff82:	f7ff fefd 	bl	800fd80 <check_fs>
 800ff86:	4603      	mov	r3, r0
 800ff88:	e000      	b.n	800ff8c <find_volume+0x160>
 800ff8a:	2303      	movs	r3, #3
 800ff8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ff90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d905      	bls.n	800ffa4 <find_volume+0x178>
 800ff98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	643b      	str	r3, [r7, #64]	; 0x40
 800ff9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffa0:	2b03      	cmp	r3, #3
 800ffa2:	d9e2      	bls.n	800ff6a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffa8:	2b04      	cmp	r3, #4
 800ffaa:	d101      	bne.n	800ffb0 <find_volume+0x184>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e17e      	b.n	80102ae <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ffb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d901      	bls.n	800ffbc <find_volume+0x190>
 800ffb8:	230d      	movs	r3, #13
 800ffba:	e178      	b.n	80102ae <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbe:	3330      	adds	r3, #48	; 0x30
 800ffc0:	330b      	adds	r3, #11
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fe fd16 	bl	800e9f4 <ld_word>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffce:	d001      	beq.n	800ffd4 <find_volume+0x1a8>
 800ffd0:	230d      	movs	r3, #13
 800ffd2:	e16c      	b.n	80102ae <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	3330      	adds	r3, #48	; 0x30
 800ffd8:	3316      	adds	r3, #22
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fe fd0a 	bl	800e9f4 <ld_word>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ffe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d106      	bne.n	800fff8 <find_volume+0x1cc>
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	3330      	adds	r3, #48	; 0x30
 800ffee:	3324      	adds	r3, #36	; 0x24
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fe fd17 	bl	800ea24 <ld_dword>
 800fff6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fffc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010000:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000a:	789b      	ldrb	r3, [r3, #2]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d005      	beq.n	801001c <find_volume+0x1f0>
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	789b      	ldrb	r3, [r3, #2]
 8010014:	2b02      	cmp	r3, #2
 8010016:	d001      	beq.n	801001c <find_volume+0x1f0>
 8010018:	230d      	movs	r3, #13
 801001a:	e148      	b.n	80102ae <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	789b      	ldrb	r3, [r3, #2]
 8010020:	461a      	mov	r2, r3
 8010022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010024:	fb02 f303 	mul.w	r3, r2, r3
 8010028:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010030:	b29a      	uxth	r2, r3
 8010032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010034:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010038:	895b      	ldrh	r3, [r3, #10]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d008      	beq.n	8010050 <find_volume+0x224>
 801003e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010040:	895b      	ldrh	r3, [r3, #10]
 8010042:	461a      	mov	r2, r3
 8010044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010046:	895b      	ldrh	r3, [r3, #10]
 8010048:	3b01      	subs	r3, #1
 801004a:	4013      	ands	r3, r2
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <find_volume+0x228>
 8010050:	230d      	movs	r3, #13
 8010052:	e12c      	b.n	80102ae <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	3330      	adds	r3, #48	; 0x30
 8010058:	3311      	adds	r3, #17
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe fcca 	bl	800e9f4 <ld_word>
 8010060:	4603      	mov	r3, r0
 8010062:	461a      	mov	r2, r3
 8010064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010066:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	891b      	ldrh	r3, [r3, #8]
 801006c:	f003 030f 	and.w	r3, r3, #15
 8010070:	b29b      	uxth	r3, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <find_volume+0x24e>
 8010076:	230d      	movs	r3, #13
 8010078:	e119      	b.n	80102ae <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	3330      	adds	r3, #48	; 0x30
 801007e:	3313      	adds	r3, #19
 8010080:	4618      	mov	r0, r3
 8010082:	f7fe fcb7 	bl	800e9f4 <ld_word>
 8010086:	4603      	mov	r3, r0
 8010088:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801008a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801008c:	2b00      	cmp	r3, #0
 801008e:	d106      	bne.n	801009e <find_volume+0x272>
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	3330      	adds	r3, #48	; 0x30
 8010094:	3320      	adds	r3, #32
 8010096:	4618      	mov	r0, r3
 8010098:	f7fe fcc4 	bl	800ea24 <ld_dword>
 801009c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	3330      	adds	r3, #48	; 0x30
 80100a2:	330e      	adds	r3, #14
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fe fca5 	bl	800e9f4 <ld_word>
 80100aa:	4603      	mov	r3, r0
 80100ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80100ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <find_volume+0x28c>
 80100b4:	230d      	movs	r3, #13
 80100b6:	e0fa      	b.n	80102ae <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80100b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100bc:	4413      	add	r3, r2
 80100be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100c0:	8912      	ldrh	r2, [r2, #8]
 80100c2:	0912      	lsrs	r2, r2, #4
 80100c4:	b292      	uxth	r2, r2
 80100c6:	4413      	add	r3, r2
 80100c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80100ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d204      	bcs.n	80100dc <find_volume+0x2b0>
 80100d2:	230d      	movs	r3, #13
 80100d4:	e0eb      	b.n	80102ae <find_volume+0x482>
 80100d6:	bf00      	nop
 80100d8:	20010338 	.word	0x20010338
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80100dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e0:	1ad3      	subs	r3, r2, r3
 80100e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100e4:	8952      	ldrh	r2, [r2, #10]
 80100e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80100ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80100ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d101      	bne.n	80100f6 <find_volume+0x2ca>
 80100f2:	230d      	movs	r3, #13
 80100f4:	e0db      	b.n	80102ae <find_volume+0x482>
		fmt = FS_FAT32;
 80100f6:	2303      	movs	r3, #3
 80100f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010102:	4293      	cmp	r3, r2
 8010104:	d802      	bhi.n	801010c <find_volume+0x2e0>
 8010106:	2302      	movs	r3, #2
 8010108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010112:	4293      	cmp	r3, r2
 8010114:	d802      	bhi.n	801011c <find_volume+0x2f0>
 8010116:	2301      	movs	r3, #1
 8010118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011e:	1c9a      	adds	r2, r3, #2
 8010120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010122:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010128:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801012a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801012c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801012e:	441a      	add	r2, r3
 8010130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010132:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010138:	441a      	add	r2, r3
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801013e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010142:	2b03      	cmp	r3, #3
 8010144:	d11e      	bne.n	8010184 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010148:	3330      	adds	r3, #48	; 0x30
 801014a:	332a      	adds	r3, #42	; 0x2a
 801014c:	4618      	mov	r0, r3
 801014e:	f7fe fc51 	bl	800e9f4 <ld_word>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <find_volume+0x330>
 8010158:	230d      	movs	r3, #13
 801015a:	e0a8      	b.n	80102ae <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	891b      	ldrh	r3, [r3, #8]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <find_volume+0x33c>
 8010164:	230d      	movs	r3, #13
 8010166:	e0a2      	b.n	80102ae <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	3330      	adds	r3, #48	; 0x30
 801016c:	332c      	adds	r3, #44	; 0x2c
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe fc58 	bl	800ea24 <ld_dword>
 8010174:	4602      	mov	r2, r0
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801017a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017c:	695b      	ldr	r3, [r3, #20]
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	647b      	str	r3, [r7, #68]	; 0x44
 8010182:	e01f      	b.n	80101c4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	891b      	ldrh	r3, [r3, #8]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d101      	bne.n	8010190 <find_volume+0x364>
 801018c:	230d      	movs	r3, #13
 801018e:	e08e      	b.n	80102ae <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010192:	6a1a      	ldr	r2, [r3, #32]
 8010194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010196:	441a      	add	r2, r3
 8010198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801019c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101a0:	2b02      	cmp	r3, #2
 80101a2:	d103      	bne.n	80101ac <find_volume+0x380>
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	695b      	ldr	r3, [r3, #20]
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	e00a      	b.n	80101c2 <find_volume+0x396>
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	695a      	ldr	r2, [r3, #20]
 80101b0:	4613      	mov	r3, r2
 80101b2:	005b      	lsls	r3, r3, #1
 80101b4:	4413      	add	r3, r2
 80101b6:	085a      	lsrs	r2, r3, #1
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	695b      	ldr	r3, [r3, #20]
 80101bc:	f003 0301 	and.w	r3, r3, #1
 80101c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80101c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80101c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c6:	699a      	ldr	r2, [r3, #24]
 80101c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80101ce:	0a5b      	lsrs	r3, r3, #9
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d201      	bcs.n	80101d8 <find_volume+0x3ac>
 80101d4:	230d      	movs	r3, #13
 80101d6:	e06a      	b.n	80102ae <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	f04f 32ff 	mov.w	r2, #4294967295
 80101de:	611a      	str	r2, [r3, #16]
 80101e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e2:	691a      	ldr	r2, [r3, #16]
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80101e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ea:	2280      	movs	r2, #128	; 0x80
 80101ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80101ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	d149      	bne.n	801028a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80101f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f8:	3330      	adds	r3, #48	; 0x30
 80101fa:	3330      	adds	r3, #48	; 0x30
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fe fbf9 	bl	800e9f4 <ld_word>
 8010202:	4603      	mov	r3, r0
 8010204:	2b01      	cmp	r3, #1
 8010206:	d140      	bne.n	801028a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801020a:	3301      	adds	r3, #1
 801020c:	4619      	mov	r1, r3
 801020e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010210:	f7fe fea0 	bl	800ef54 <move_window>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d137      	bne.n	801028a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	2200      	movs	r2, #0
 801021e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	3330      	adds	r3, #48	; 0x30
 8010224:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010228:	4618      	mov	r0, r3
 801022a:	f7fe fbe3 	bl	800e9f4 <ld_word>
 801022e:	4603      	mov	r3, r0
 8010230:	461a      	mov	r2, r3
 8010232:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010236:	429a      	cmp	r2, r3
 8010238:	d127      	bne.n	801028a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801023a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023c:	3330      	adds	r3, #48	; 0x30
 801023e:	4618      	mov	r0, r3
 8010240:	f7fe fbf0 	bl	800ea24 <ld_dword>
 8010244:	4603      	mov	r3, r0
 8010246:	4a1c      	ldr	r2, [pc, #112]	; (80102b8 <find_volume+0x48c>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d11e      	bne.n	801028a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801024c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024e:	3330      	adds	r3, #48	; 0x30
 8010250:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe fbe5 	bl	800ea24 <ld_dword>
 801025a:	4603      	mov	r3, r0
 801025c:	4a17      	ldr	r2, [pc, #92]	; (80102bc <find_volume+0x490>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d113      	bne.n	801028a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010264:	3330      	adds	r3, #48	; 0x30
 8010266:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801026a:	4618      	mov	r0, r3
 801026c:	f7fe fbda 	bl	800ea24 <ld_dword>
 8010270:	4602      	mov	r2, r0
 8010272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010274:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010278:	3330      	adds	r3, #48	; 0x30
 801027a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801027e:	4618      	mov	r0, r3
 8010280:	f7fe fbd0 	bl	800ea24 <ld_dword>
 8010284:	4602      	mov	r2, r0
 8010286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010288:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801028a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010290:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010292:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <find_volume+0x494>)
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	3301      	adds	r3, #1
 8010298:	b29a      	uxth	r2, r3
 801029a:	4b09      	ldr	r3, [pc, #36]	; (80102c0 <find_volume+0x494>)
 801029c:	801a      	strh	r2, [r3, #0]
 801029e:	4b08      	ldr	r3, [pc, #32]	; (80102c0 <find_volume+0x494>)
 80102a0:	881a      	ldrh	r2, [r3, #0]
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80102a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102a8:	f7fe fdec 	bl	800ee84 <clear_lock>
#endif
	return FR_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3758      	adds	r7, #88	; 0x58
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	41615252 	.word	0x41615252
 80102bc:	61417272 	.word	0x61417272
 80102c0:	2001033c 	.word	0x2001033c

080102c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80102ce:	2309      	movs	r3, #9
 80102d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d01c      	beq.n	8010312 <validate+0x4e>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d018      	beq.n	8010312 <validate+0x4e>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d013      	beq.n	8010312 <validate+0x4e>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	889a      	ldrh	r2, [r3, #4]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	88db      	ldrh	r3, [r3, #6]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d10c      	bne.n	8010312 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	785b      	ldrb	r3, [r3, #1]
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fada 	bl	800e8b8 <disk_status>
 8010304:	4603      	mov	r3, r0
 8010306:	f003 0301 	and.w	r3, r3, #1
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <validate+0x4e>
			res = FR_OK;
 801030e:	2300      	movs	r3, #0
 8010310:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <validate+0x5a>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	e000      	b.n	8010320 <validate+0x5c>
 801031e:	2300      	movs	r3, #0
 8010320:	683a      	ldr	r2, [r7, #0]
 8010322:	6013      	str	r3, [r2, #0]
	return res;
 8010324:	7bfb      	ldrb	r3, [r7, #15]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
	...

08010330 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b088      	sub	sp, #32
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	4613      	mov	r3, r2
 801033c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010342:	f107 0310 	add.w	r3, r7, #16
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff fcd5 	bl	800fcf6 <get_ldnumber>
 801034c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	2b00      	cmp	r3, #0
 8010352:	da01      	bge.n	8010358 <f_mount+0x28>
 8010354:	230b      	movs	r3, #11
 8010356:	e02b      	b.n	80103b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010358:	4a17      	ldr	r2, [pc, #92]	; (80103b8 <f_mount+0x88>)
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010360:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d005      	beq.n	8010374 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010368:	69b8      	ldr	r0, [r7, #24]
 801036a:	f7fe fd8b 	bl	800ee84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	2200      	movs	r2, #0
 8010372:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d002      	beq.n	8010380 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2200      	movs	r2, #0
 801037e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	490d      	ldr	r1, [pc, #52]	; (80103b8 <f_mount+0x88>)
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d002      	beq.n	8010396 <f_mount+0x66>
 8010390:	79fb      	ldrb	r3, [r7, #7]
 8010392:	2b01      	cmp	r3, #1
 8010394:	d001      	beq.n	801039a <f_mount+0x6a>
 8010396:	2300      	movs	r3, #0
 8010398:	e00a      	b.n	80103b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801039a:	f107 010c 	add.w	r1, r7, #12
 801039e:	f107 0308 	add.w	r3, r7, #8
 80103a2:	2200      	movs	r2, #0
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff fd41 	bl	800fe2c <find_volume>
 80103aa:	4603      	mov	r3, r0
 80103ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3720      	adds	r7, #32
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	20010338 	.word	0x20010338

080103bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b098      	sub	sp, #96	; 0x60
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	4613      	mov	r3, r2
 80103c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d101      	bne.n	80103d4 <f_open+0x18>
 80103d0:	2309      	movs	r3, #9
 80103d2:	e1ad      	b.n	8010730 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80103d4:	79fb      	ldrb	r3, [r7, #7]
 80103d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80103dc:	79fa      	ldrb	r2, [r7, #7]
 80103de:	f107 0110 	add.w	r1, r7, #16
 80103e2:	f107 0308 	add.w	r3, r7, #8
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7ff fd20 	bl	800fe2c <find_volume>
 80103ec:	4603      	mov	r3, r0
 80103ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80103f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f040 8191 	bne.w	801071e <f_open+0x362>
		dj.obj.fs = fs;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	f107 0314 	add.w	r3, r7, #20
 8010406:	4611      	mov	r1, r2
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff fc03 	bl	800fc14 <follow_path>
 801040e:	4603      	mov	r3, r0
 8010410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010418:	2b00      	cmp	r3, #0
 801041a:	d11a      	bne.n	8010452 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801041c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010420:	b25b      	sxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	da03      	bge.n	801042e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010426:	2306      	movs	r3, #6
 8010428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801042c:	e011      	b.n	8010452 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	f023 0301 	bic.w	r3, r3, #1
 8010434:	2b00      	cmp	r3, #0
 8010436:	bf14      	ite	ne
 8010438:	2301      	movne	r3, #1
 801043a:	2300      	moveq	r3, #0
 801043c:	b2db      	uxtb	r3, r3
 801043e:	461a      	mov	r2, r3
 8010440:	f107 0314 	add.w	r3, r7, #20
 8010444:	4611      	mov	r1, r2
 8010446:	4618      	mov	r0, r3
 8010448:	f7fe fbd4 	bl	800ebf4 <chk_lock>
 801044c:	4603      	mov	r3, r0
 801044e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	f003 031c 	and.w	r3, r3, #28
 8010458:	2b00      	cmp	r3, #0
 801045a:	d07f      	beq.n	801055c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801045c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010460:	2b00      	cmp	r3, #0
 8010462:	d017      	beq.n	8010494 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010468:	2b04      	cmp	r3, #4
 801046a:	d10e      	bne.n	801048a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801046c:	f7fe fc1e 	bl	800ecac <enq_lock>
 8010470:	4603      	mov	r3, r0
 8010472:	2b00      	cmp	r3, #0
 8010474:	d006      	beq.n	8010484 <f_open+0xc8>
 8010476:	f107 0314 	add.w	r3, r7, #20
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff fb03 	bl	800fa86 <dir_register>
 8010480:	4603      	mov	r3, r0
 8010482:	e000      	b.n	8010486 <f_open+0xca>
 8010484:	2312      	movs	r3, #18
 8010486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	f043 0308 	orr.w	r3, r3, #8
 8010490:	71fb      	strb	r3, [r7, #7]
 8010492:	e010      	b.n	80104b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010494:	7ebb      	ldrb	r3, [r7, #26]
 8010496:	f003 0311 	and.w	r3, r3, #17
 801049a:	2b00      	cmp	r3, #0
 801049c:	d003      	beq.n	80104a6 <f_open+0xea>
					res = FR_DENIED;
 801049e:	2307      	movs	r3, #7
 80104a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104a4:	e007      	b.n	80104b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	f003 0304 	and.w	r3, r3, #4
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <f_open+0xfa>
 80104b0:	2308      	movs	r3, #8
 80104b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80104b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d168      	bne.n	8010590 <f_open+0x1d4>
 80104be:	79fb      	ldrb	r3, [r7, #7]
 80104c0:	f003 0308 	and.w	r3, r3, #8
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d063      	beq.n	8010590 <f_open+0x1d4>
				dw = GET_FATTIME();
 80104c8:	f7fb ffc4 	bl	800c454 <get_fattime>
 80104cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80104ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d0:	330e      	adds	r3, #14
 80104d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7fe fae3 	bl	800eaa0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80104da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104dc:	3316      	adds	r3, #22
 80104de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fe fadd 	bl	800eaa0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80104e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e8:	330b      	adds	r3, #11
 80104ea:	2220      	movs	r2, #32
 80104ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104f2:	4611      	mov	r1, r2
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fa32 	bl	800f95e <ld_clust>
 80104fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010500:	2200      	movs	r2, #0
 8010502:	4618      	mov	r0, r3
 8010504:	f7ff fa4a 	bl	800f99c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050a:	331c      	adds	r3, #28
 801050c:	2100      	movs	r1, #0
 801050e:	4618      	mov	r0, r3
 8010510:	f7fe fac6 	bl	800eaa0 <st_dword>
					fs->wflag = 1;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	2201      	movs	r2, #1
 8010518:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801051a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d037      	beq.n	8010590 <f_open+0x1d4>
						dw = fs->winsect;
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010524:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010526:	f107 0314 	add.w	r3, r7, #20
 801052a:	2200      	movs	r2, #0
 801052c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe ff5d 	bl	800f3ee <remove_chain>
 8010534:	4603      	mov	r3, r0
 8010536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801053a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801053e:	2b00      	cmp	r3, #0
 8010540:	d126      	bne.n	8010590 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010546:	4618      	mov	r0, r3
 8010548:	f7fe fd04 	bl	800ef54 <move_window>
 801054c:	4603      	mov	r3, r0
 801054e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010556:	3a01      	subs	r2, #1
 8010558:	60da      	str	r2, [r3, #12]
 801055a:	e019      	b.n	8010590 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801055c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010560:	2b00      	cmp	r3, #0
 8010562:	d115      	bne.n	8010590 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010564:	7ebb      	ldrb	r3, [r7, #26]
 8010566:	f003 0310 	and.w	r3, r3, #16
 801056a:	2b00      	cmp	r3, #0
 801056c:	d003      	beq.n	8010576 <f_open+0x1ba>
					res = FR_NO_FILE;
 801056e:	2304      	movs	r3, #4
 8010570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010574:	e00c      	b.n	8010590 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010576:	79fb      	ldrb	r3, [r7, #7]
 8010578:	f003 0302 	and.w	r3, r3, #2
 801057c:	2b00      	cmp	r3, #0
 801057e:	d007      	beq.n	8010590 <f_open+0x1d4>
 8010580:	7ebb      	ldrb	r3, [r7, #26]
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <f_open+0x1d4>
						res = FR_DENIED;
 801058a:	2307      	movs	r3, #7
 801058c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010594:	2b00      	cmp	r3, #0
 8010596:	d128      	bne.n	80105ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010598:	79fb      	ldrb	r3, [r7, #7]
 801059a:	f003 0308 	and.w	r3, r3, #8
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80105a2:	79fb      	ldrb	r3, [r7, #7]
 80105a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80105b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	f023 0301 	bic.w	r3, r3, #1
 80105be:	2b00      	cmp	r3, #0
 80105c0:	bf14      	ite	ne
 80105c2:	2301      	movne	r3, #1
 80105c4:	2300      	moveq	r3, #0
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	461a      	mov	r2, r3
 80105ca:	f107 0314 	add.w	r3, r7, #20
 80105ce:	4611      	mov	r1, r2
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fe fb8d 	bl	800ecf0 <inc_lock>
 80105d6:	4602      	mov	r2, r0
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	691b      	ldr	r3, [r3, #16]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d102      	bne.n	80105ea <f_open+0x22e>
 80105e4:	2302      	movs	r3, #2
 80105e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80105ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f040 8095 	bne.w	801071e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff f9af 	bl	800f95e <ld_clust>
 8010600:	4602      	mov	r2, r0
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010608:	331c      	adds	r3, #28
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe fa0a 	bl	800ea24 <ld_dword>
 8010610:	4602      	mov	r2, r0
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2200      	movs	r2, #0
 801061a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801061c:	693a      	ldr	r2, [r7, #16]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	88da      	ldrh	r2, [r3, #6]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	79fa      	ldrb	r2, [r7, #7]
 801062e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2200      	movs	r2, #0
 8010634:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2200      	movs	r2, #0
 801063a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2200      	movs	r2, #0
 8010640:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	3330      	adds	r3, #48	; 0x30
 8010646:	f44f 7200 	mov.w	r2, #512	; 0x200
 801064a:	2100      	movs	r1, #0
 801064c:	4618      	mov	r0, r3
 801064e:	f7fe fa74 	bl	800eb3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	f003 0320 	and.w	r3, r3, #32
 8010658:	2b00      	cmp	r3, #0
 801065a:	d060      	beq.n	801071e <f_open+0x362>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d05c      	beq.n	801071e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	68da      	ldr	r2, [r3, #12]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	895b      	ldrh	r3, [r3, #10]
 8010670:	025b      	lsls	r3, r3, #9
 8010672:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	689b      	ldr	r3, [r3, #8]
 8010678:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	657b      	str	r3, [r7, #84]	; 0x54
 8010680:	e016      	b.n	80106b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010686:	4618      	mov	r0, r3
 8010688:	f7fe fd1f 	bl	800f0ca <get_fat>
 801068c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801068e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010690:	2b01      	cmp	r3, #1
 8010692:	d802      	bhi.n	801069a <f_open+0x2de>
 8010694:	2302      	movs	r3, #2
 8010696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801069a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a0:	d102      	bne.n	80106a8 <f_open+0x2ec>
 80106a2:	2301      	movs	r3, #1
 80106a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	657b      	str	r3, [r7, #84]	; 0x54
 80106b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d103      	bne.n	80106c0 <f_open+0x304>
 80106b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106bc:	429a      	cmp	r2, r3
 80106be:	d8e0      	bhi.n	8010682 <f_open+0x2c6>
				}
				fp->clust = clst;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80106c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d127      	bne.n	801071e <f_open+0x362>
 80106ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d022      	beq.n	801071e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fe fcd5 	bl	800f08c <clust2sect>
 80106e2:	6478      	str	r0, [r7, #68]	; 0x44
 80106e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d103      	bne.n	80106f2 <f_open+0x336>
						res = FR_INT_ERR;
 80106ea:	2302      	movs	r3, #2
 80106ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80106f0:	e015      	b.n	801071e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80106f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106f4:	0a5a      	lsrs	r2, r3, #9
 80106f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106f8:	441a      	add	r2, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	7858      	ldrb	r0, [r3, #1]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	6a1a      	ldr	r2, [r3, #32]
 801070c:	2301      	movs	r3, #1
 801070e:	f7fe f913 	bl	800e938 <disk_read>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <f_open+0x362>
 8010718:	2301      	movs	r3, #1
 801071a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801071e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010722:	2b00      	cmp	r3, #0
 8010724:	d002      	beq.n	801072c <f_open+0x370>
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2200      	movs	r2, #0
 801072a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801072c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010730:	4618      	mov	r0, r3
 8010732:	3760      	adds	r7, #96	; 0x60
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08c      	sub	sp, #48	; 0x30
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f107 0210 	add.w	r2, r7, #16
 8010756:	4611      	mov	r1, r2
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff fdb3 	bl	80102c4 <validate>
 801075e:	4603      	mov	r3, r0
 8010760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010768:	2b00      	cmp	r3, #0
 801076a:	d107      	bne.n	801077c <f_write+0x44>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	7d5b      	ldrb	r3, [r3, #21]
 8010770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <f_write+0x4a>
 801077c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010780:	e14b      	b.n	8010a1a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	7d1b      	ldrb	r3, [r3, #20]
 8010786:	f003 0302 	and.w	r3, r3, #2
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <f_write+0x5a>
 801078e:	2307      	movs	r3, #7
 8010790:	e143      	b.n	8010a1a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	699a      	ldr	r2, [r3, #24]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	441a      	add	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	699b      	ldr	r3, [r3, #24]
 801079e:	429a      	cmp	r2, r3
 80107a0:	f080 812d 	bcs.w	80109fe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	699b      	ldr	r3, [r3, #24]
 80107a8:	43db      	mvns	r3, r3
 80107aa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80107ac:	e127      	b.n	80109fe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f040 80e3 	bne.w	8010982 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	0a5b      	lsrs	r3, r3, #9
 80107c2:	693a      	ldr	r2, [r7, #16]
 80107c4:	8952      	ldrh	r2, [r2, #10]
 80107c6:	3a01      	subs	r2, #1
 80107c8:	4013      	ands	r3, r2
 80107ca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d143      	bne.n	801085a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d10c      	bne.n	80107f4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80107e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d11a      	bne.n	801081c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2100      	movs	r1, #0
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe fe64 	bl	800f4b8 <create_chain>
 80107f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80107f2:	e013      	b.n	801081c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d007      	beq.n	801080c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	699b      	ldr	r3, [r3, #24]
 8010800:	4619      	mov	r1, r3
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	f7fe fef0 	bl	800f5e8 <clmt_clust>
 8010808:	62b8      	str	r0, [r7, #40]	; 0x28
 801080a:	e007      	b.n	801081c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801080c:	68fa      	ldr	r2, [r7, #12]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	4619      	mov	r1, r3
 8010814:	4610      	mov	r0, r2
 8010816:	f7fe fe4f 	bl	800f4b8 <create_chain>
 801081a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	2b00      	cmp	r3, #0
 8010820:	f000 80f2 	beq.w	8010a08 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010826:	2b01      	cmp	r3, #1
 8010828:	d104      	bne.n	8010834 <f_write+0xfc>
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2202      	movs	r2, #2
 801082e:	755a      	strb	r2, [r3, #21]
 8010830:	2302      	movs	r3, #2
 8010832:	e0f2      	b.n	8010a1a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083a:	d104      	bne.n	8010846 <f_write+0x10e>
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2201      	movs	r2, #1
 8010840:	755a      	strb	r2, [r3, #21]
 8010842:	2301      	movs	r3, #1
 8010844:	e0e9      	b.n	8010a1a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801084a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	689b      	ldr	r3, [r3, #8]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d102      	bne.n	801085a <f_write+0x122>
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010858:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	7d1b      	ldrb	r3, [r3, #20]
 801085e:	b25b      	sxtb	r3, r3
 8010860:	2b00      	cmp	r3, #0
 8010862:	da18      	bge.n	8010896 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	7858      	ldrb	r0, [r3, #1]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6a1a      	ldr	r2, [r3, #32]
 8010872:	2301      	movs	r3, #1
 8010874:	f7fe f880 	bl	800e978 <disk_write>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d004      	beq.n	8010888 <f_write+0x150>
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2201      	movs	r2, #1
 8010882:	755a      	strb	r2, [r3, #21]
 8010884:	2301      	movs	r3, #1
 8010886:	e0c8      	b.n	8010a1a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	7d1b      	ldrb	r3, [r3, #20]
 801088c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010890:	b2da      	uxtb	r2, r3
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	69db      	ldr	r3, [r3, #28]
 801089c:	4619      	mov	r1, r3
 801089e:	4610      	mov	r0, r2
 80108a0:	f7fe fbf4 	bl	800f08c <clust2sect>
 80108a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d104      	bne.n	80108b6 <f_write+0x17e>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2202      	movs	r2, #2
 80108b0:	755a      	strb	r2, [r3, #21]
 80108b2:	2302      	movs	r3, #2
 80108b4:	e0b1      	b.n	8010a1a <f_write+0x2e2>
			sect += csect;
 80108b6:	697a      	ldr	r2, [r7, #20]
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	4413      	add	r3, r2
 80108bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	0a5b      	lsrs	r3, r3, #9
 80108c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d03c      	beq.n	8010944 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	6a3b      	ldr	r3, [r7, #32]
 80108ce:	4413      	add	r3, r2
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	8952      	ldrh	r2, [r2, #10]
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d905      	bls.n	80108e4 <f_write+0x1ac>
					cc = fs->csize - csect;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	895b      	ldrh	r3, [r3, #10]
 80108dc:	461a      	mov	r2, r3
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	7858      	ldrb	r0, [r3, #1]
 80108e8:	6a3b      	ldr	r3, [r7, #32]
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	69f9      	ldr	r1, [r7, #28]
 80108ee:	f7fe f843 	bl	800e978 <disk_write>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d004      	beq.n	8010902 <f_write+0x1ca>
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2201      	movs	r2, #1
 80108fc:	755a      	strb	r2, [r3, #21]
 80108fe:	2301      	movs	r3, #1
 8010900:	e08b      	b.n	8010a1a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6a1a      	ldr	r2, [r3, #32]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	6a3a      	ldr	r2, [r7, #32]
 801090c:	429a      	cmp	r2, r3
 801090e:	d915      	bls.n	801093c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	6a1a      	ldr	r2, [r3, #32]
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	025b      	lsls	r3, r3, #9
 8010920:	69fa      	ldr	r2, [r7, #28]
 8010922:	4413      	add	r3, r2
 8010924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010928:	4619      	mov	r1, r3
 801092a:	f7fe f8e5 	bl	800eaf8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	7d1b      	ldrb	r3, [r3, #20]
 8010932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010936:	b2da      	uxtb	r2, r3
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	025b      	lsls	r3, r3, #9
 8010940:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010942:	e03f      	b.n	80109c4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6a1b      	ldr	r3, [r3, #32]
 8010948:	697a      	ldr	r2, [r7, #20]
 801094a:	429a      	cmp	r2, r3
 801094c:	d016      	beq.n	801097c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	699a      	ldr	r2, [r3, #24]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010956:	429a      	cmp	r2, r3
 8010958:	d210      	bcs.n	801097c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	7858      	ldrb	r0, [r3, #1]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010964:	2301      	movs	r3, #1
 8010966:	697a      	ldr	r2, [r7, #20]
 8010968:	f7fd ffe6 	bl	800e938 <disk_read>
 801096c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2201      	movs	r2, #1
 8010976:	755a      	strb	r2, [r3, #21]
 8010978:	2301      	movs	r3, #1
 801097a:	e04e      	b.n	8010a1a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	697a      	ldr	r2, [r7, #20]
 8010980:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	699b      	ldr	r3, [r3, #24]
 8010986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801098a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801098e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	429a      	cmp	r2, r3
 8010996:	d901      	bls.n	801099c <f_write+0x264>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	699b      	ldr	r3, [r3, #24]
 80109a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109aa:	4413      	add	r3, r2
 80109ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ae:	69f9      	ldr	r1, [r7, #28]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fe f8a1 	bl	800eaf8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	7d1b      	ldrb	r3, [r3, #20]
 80109ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80109c4:	69fa      	ldr	r2, [r7, #28]
 80109c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c8:	4413      	add	r3, r2
 80109ca:	61fb      	str	r3, [r7, #28]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	699a      	ldr	r2, [r3, #24]
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	441a      	add	r2, r3
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	619a      	str	r2, [r3, #24]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	68da      	ldr	r2, [r3, #12]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	bf38      	it	cc
 80109e4:	461a      	movcc	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	60da      	str	r2, [r3, #12]
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f0:	441a      	add	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	601a      	str	r2, [r3, #0]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	1ad3      	subs	r3, r2, r3
 80109fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f47f aed4 	bne.w	80107ae <f_write+0x76>
 8010a06:	e000      	b.n	8010a0a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010a08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	7d1b      	ldrb	r3, [r3, #20]
 8010a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3730      	adds	r7, #48	; 0x30
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010a22:	b580      	push	{r7, lr}
 8010a24:	b086      	sub	sp, #24
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f107 0208 	add.w	r2, r7, #8
 8010a30:	4611      	mov	r1, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff fc46 	bl	80102c4 <validate>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010a3c:	7dfb      	ldrb	r3, [r7, #23]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d168      	bne.n	8010b14 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	7d1b      	ldrb	r3, [r3, #20]
 8010a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d062      	beq.n	8010b14 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	7d1b      	ldrb	r3, [r3, #20]
 8010a52:	b25b      	sxtb	r3, r3
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	da15      	bge.n	8010a84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	7858      	ldrb	r0, [r3, #1]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a1a      	ldr	r2, [r3, #32]
 8010a66:	2301      	movs	r3, #1
 8010a68:	f7fd ff86 	bl	800e978 <disk_write>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d001      	beq.n	8010a76 <f_sync+0x54>
 8010a72:	2301      	movs	r3, #1
 8010a74:	e04f      	b.n	8010b16 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	7d1b      	ldrb	r3, [r3, #20]
 8010a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010a84:	f7fb fce6 	bl	800c454 <get_fattime>
 8010a88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a90:	4619      	mov	r1, r3
 8010a92:	4610      	mov	r0, r2
 8010a94:	f7fe fa5e 	bl	800ef54 <move_window>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010a9c:	7dfb      	ldrb	r3, [r7, #23]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d138      	bne.n	8010b14 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	330b      	adds	r3, #11
 8010aac:	781a      	ldrb	r2, [r3, #0]
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	330b      	adds	r3, #11
 8010ab2:	f042 0220 	orr.w	r2, r2, #32
 8010ab6:	b2d2      	uxtb	r2, r2
 8010ab8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6818      	ldr	r0, [r3, #0]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	68f9      	ldr	r1, [r7, #12]
 8010ac6:	f7fe ff69 	bl	800f99c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f103 021c 	add.w	r2, r3, #28
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	f7fd ffe2 	bl	800eaa0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	3316      	adds	r3, #22
 8010ae0:	6939      	ldr	r1, [r7, #16]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fd ffdc 	bl	800eaa0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	3312      	adds	r3, #18
 8010aec:	2100      	movs	r1, #0
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fd ffbb 	bl	800ea6a <st_word>
					fs->wflag = 1;
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	2201      	movs	r2, #1
 8010af8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe fa57 	bl	800efb0 <sync_fs>
 8010b02:	4603      	mov	r3, r0
 8010b04:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	7d1b      	ldrb	r3, [r3, #20]
 8010b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}

08010b1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b084      	sub	sp, #16
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f7ff ff7b 	bl	8010a22 <f_sync>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010b30:	7bfb      	ldrb	r3, [r7, #15]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d118      	bne.n	8010b68 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f107 0208 	add.w	r2, r7, #8
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7ff fbc0 	bl	80102c4 <validate>
 8010b44:	4603      	mov	r3, r0
 8010b46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b48:	7bfb      	ldrb	r3, [r7, #15]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d10c      	bne.n	8010b68 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe f95a 	bl	800ee0c <dec_lock>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b5c:	7bfb      	ldrb	r3, [r7, #15]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d102      	bne.n	8010b68 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3710      	adds	r7, #16
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b084      	sub	sp, #16
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010b7e:	78fb      	ldrb	r3, [r7, #3]
 8010b80:	2b0a      	cmp	r3, #10
 8010b82:	d103      	bne.n	8010b8c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010b84:	210d      	movs	r1, #13
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f7ff fff3 	bl	8010b72 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	db25      	blt.n	8010be4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	1c5a      	adds	r2, r3, #1
 8010b9c:	60fa      	str	r2, [r7, #12]
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	78fa      	ldrb	r2, [r7, #3]
 8010ba4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2b3c      	cmp	r3, #60	; 0x3c
 8010baa:	dd12      	ble.n	8010bd2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f103 010c 	add.w	r1, r3, #12
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	f107 0308 	add.w	r3, r7, #8
 8010bbc:	f7ff fdbc 	bl	8010738 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d101      	bne.n	8010bcc <putc_bfd+0x5a>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	e001      	b.n	8010bd0 <putc_bfd+0x5e>
 8010bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	689b      	ldr	r3, [r3, #8]
 8010bdc:	1c5a      	adds	r2, r3, #1
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	609a      	str	r2, [r3, #8]
 8010be2:	e000      	b.n	8010be6 <putc_bfd+0x74>
	if (i < 0) return;
 8010be4:	bf00      	nop
}
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	db16      	blt.n	8010c2a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6818      	ldr	r0, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f103 010c 	add.w	r1, r3, #12
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	f107 030c 	add.w	r3, r7, #12
 8010c10:	f7ff fd92 	bl	8010738 <f_write>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d107      	bne.n	8010c2a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	68fa      	ldr	r2, [r7, #12]
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d102      	bne.n	8010c2a <putc_flush+0x3e>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	e001      	b.n	8010c2e <putc_flush+0x42>
	return EOF;
 8010c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010c36:	b480      	push	{r7}
 8010c38:	b083      	sub	sp, #12
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
 8010c3e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	683a      	ldr	r2, [r7, #0]
 8010c44:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	605a      	str	r2, [r3, #4]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	685a      	ldr	r2, [r3, #4]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	609a      	str	r2, [r3, #8]
}
 8010c54:	bf00      	nop
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8010c60:	b40e      	push	{r1, r2, r3}
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b0a7      	sub	sp, #156	; 0x9c
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8010c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c6e:	6879      	ldr	r1, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7ff ffe0 	bl	8010c36 <putc_init>

	va_start(arp, fmt);
 8010c76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010c7a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8010c7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8010c8c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 81f2 	beq.w	801107a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8010c96:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010c9a:	2b25      	cmp	r3, #37	; 0x25
 8010c9c:	d008      	beq.n	8010cb0 <f_printf+0x50>
			putc_bfd(&pb, c);
 8010c9e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ca6:	4611      	mov	r1, r2
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff ff62 	bl	8010b72 <putc_bfd>
			continue;
 8010cae:	e1e3      	b.n	8011078 <f_printf+0x418>
		}
		w = f = 0;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010cbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010ccc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010cd0:	2b30      	cmp	r3, #48	; 0x30
 8010cd2:	d10b      	bne.n	8010cec <f_printf+0x8c>
			f = 1; c = *fmt++;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cde:	1c5a      	adds	r2, r3, #1
 8010ce0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010cea:	e024      	b.n	8010d36 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010cec:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010cf0:	2b2d      	cmp	r3, #45	; 0x2d
 8010cf2:	d120      	bne.n	8010d36 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cfe:	1c5a      	adds	r2, r3, #1
 8010d00:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010d0a:	e014      	b.n	8010d36 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010d0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010d10:	4613      	mov	r3, r2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	461a      	mov	r2, r3
 8010d1a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d1e:	4413      	add	r3, r2
 8010d20:	3b30      	subs	r3, #48	; 0x30
 8010d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8010d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d2a:	1c5a      	adds	r2, r3, #1
 8010d2c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8010d36:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d3a:	2b2f      	cmp	r3, #47	; 0x2f
 8010d3c:	d903      	bls.n	8010d46 <f_printf+0xe6>
 8010d3e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d42:	2b39      	cmp	r3, #57	; 0x39
 8010d44:	d9e2      	bls.n	8010d0c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8010d46:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d4a:	2b6c      	cmp	r3, #108	; 0x6c
 8010d4c:	d003      	beq.n	8010d56 <f_printf+0xf6>
 8010d4e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d52:	2b4c      	cmp	r3, #76	; 0x4c
 8010d54:	d10d      	bne.n	8010d72 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8010d56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010d5a:	f043 0304 	orr.w	r3, r3, #4
 8010d5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d66:	1c5a      	adds	r2, r3, #1
 8010d68:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8010d72:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f000 8181 	beq.w	801107e <f_printf+0x41e>
		d = c;
 8010d7c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d80:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8010d84:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010d88:	2b60      	cmp	r3, #96	; 0x60
 8010d8a:	d908      	bls.n	8010d9e <f_printf+0x13e>
 8010d8c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010d90:	2b7a      	cmp	r3, #122	; 0x7a
 8010d92:	d804      	bhi.n	8010d9e <f_printf+0x13e>
 8010d94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010d98:	3b20      	subs	r3, #32
 8010d9a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8010d9e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010da2:	3b42      	subs	r3, #66	; 0x42
 8010da4:	2b16      	cmp	r3, #22
 8010da6:	f200 8098 	bhi.w	8010eda <f_printf+0x27a>
 8010daa:	a201      	add	r2, pc, #4	; (adr r2, 8010db0 <f_printf+0x150>)
 8010dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db0:	08010ebb 	.word	0x08010ebb
 8010db4:	08010ea3 	.word	0x08010ea3
 8010db8:	08010ecb 	.word	0x08010ecb
 8010dbc:	08010edb 	.word	0x08010edb
 8010dc0:	08010edb 	.word	0x08010edb
 8010dc4:	08010edb 	.word	0x08010edb
 8010dc8:	08010edb 	.word	0x08010edb
 8010dcc:	08010edb 	.word	0x08010edb
 8010dd0:	08010edb 	.word	0x08010edb
 8010dd4:	08010edb 	.word	0x08010edb
 8010dd8:	08010edb 	.word	0x08010edb
 8010ddc:	08010edb 	.word	0x08010edb
 8010de0:	08010edb 	.word	0x08010edb
 8010de4:	08010ec3 	.word	0x08010ec3
 8010de8:	08010edb 	.word	0x08010edb
 8010dec:	08010edb 	.word	0x08010edb
 8010df0:	08010edb 	.word	0x08010edb
 8010df4:	08010e0d 	.word	0x08010e0d
 8010df8:	08010edb 	.word	0x08010edb
 8010dfc:	08010ecb 	.word	0x08010ecb
 8010e00:	08010edb 	.word	0x08010edb
 8010e04:	08010edb 	.word	0x08010edb
 8010e08:	08010ed3 	.word	0x08010ed3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8010e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e0e:	1d1a      	adds	r2, r3, #4
 8010e10:	67ba      	str	r2, [r7, #120]	; 0x78
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8010e16:	2300      	movs	r3, #0
 8010e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010e1c:	e004      	b.n	8010e28 <f_printf+0x1c8>
 8010e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e22:	3301      	adds	r3, #1
 8010e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010e28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e2e:	4413      	add	r3, r2
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1f3      	bne.n	8010e1e <f_printf+0x1be>
			if (!(f & 2)) {
 8010e36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010e3a:	f003 0302 	and.w	r3, r3, #2
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d11a      	bne.n	8010e78 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8010e42:	e005      	b.n	8010e50 <f_printf+0x1f0>
 8010e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e48:	2120      	movs	r1, #32
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff fe91 	bl	8010b72 <putc_bfd>
 8010e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e54:	1c5a      	adds	r2, r3, #1
 8010e56:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010e5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d8f0      	bhi.n	8010e44 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8010e62:	e009      	b.n	8010e78 <f_printf+0x218>
 8010e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e66:	1c5a      	adds	r2, r3, #1
 8010e68:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010e6a:	781a      	ldrb	r2, [r3, #0]
 8010e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e70:	4611      	mov	r1, r2
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7ff fe7d 	bl	8010b72 <putc_bfd>
 8010e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f1      	bne.n	8010e64 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8010e80:	e005      	b.n	8010e8e <f_printf+0x22e>
 8010e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e86:	2120      	movs	r1, #32
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff fe72 	bl	8010b72 <putc_bfd>
 8010e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010e98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d8f0      	bhi.n	8010e82 <f_printf+0x222>
			continue;
 8010ea0:	e0ea      	b.n	8011078 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8010ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ea4:	1d1a      	adds	r2, r3, #4
 8010ea6:	67ba      	str	r2, [r7, #120]	; 0x78
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	b2da      	uxtb	r2, r3
 8010eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ff fe5d 	bl	8010b72 <putc_bfd>
 8010eb8:	e0de      	b.n	8011078 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010eba:	2302      	movs	r3, #2
 8010ebc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010ec0:	e014      	b.n	8010eec <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8010ec2:	2308      	movs	r3, #8
 8010ec4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010ec8:	e010      	b.n	8010eec <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010eca:	230a      	movs	r3, #10
 8010ecc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010ed0:	e00c      	b.n	8010eec <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8010ed2:	2310      	movs	r3, #16
 8010ed4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010ed8:	e008      	b.n	8010eec <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010eda:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ee2:	4611      	mov	r1, r2
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7ff fe44 	bl	8010b72 <putc_bfd>
 8010eea:	e0c5      	b.n	8011078 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010eec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010ef0:	f003 0304 	and.w	r3, r3, #4
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d004      	beq.n	8010f02 <f_printf+0x2a2>
 8010ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010efa:	1d1a      	adds	r2, r3, #4
 8010efc:	67ba      	str	r2, [r7, #120]	; 0x78
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	e00c      	b.n	8010f1c <f_printf+0x2bc>
 8010f02:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010f06:	2b44      	cmp	r3, #68	; 0x44
 8010f08:	d104      	bne.n	8010f14 <f_printf+0x2b4>
 8010f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f0c:	1d1a      	adds	r2, r3, #4
 8010f0e:	67ba      	str	r2, [r7, #120]	; 0x78
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	e003      	b.n	8010f1c <f_printf+0x2bc>
 8010f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f16:	1d1a      	adds	r2, r3, #4
 8010f18:	67ba      	str	r2, [r7, #120]	; 0x78
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8010f20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010f24:	2b44      	cmp	r3, #68	; 0x44
 8010f26:	d10e      	bne.n	8010f46 <f_printf+0x2e6>
 8010f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	da0a      	bge.n	8010f46 <f_printf+0x2e6>
			v = 0 - v;
 8010f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f34:	425b      	negs	r3, r3
 8010f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8010f3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010f3e:	f043 0308 	orr.w	r3, r3, #8
 8010f42:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8010f46:	2300      	movs	r3, #0
 8010f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8010f4c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8010f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f58:	fb01 f202 	mul.w	r2, r1, r2
 8010f5c:	1a9b      	subs	r3, r3, r2
 8010f5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8010f62:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8010f66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8010f72:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010f76:	2b09      	cmp	r3, #9
 8010f78:	d90b      	bls.n	8010f92 <f_printf+0x332>
 8010f7a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010f7e:	2b78      	cmp	r3, #120	; 0x78
 8010f80:	d101      	bne.n	8010f86 <f_printf+0x326>
 8010f82:	2227      	movs	r2, #39	; 0x27
 8010f84:	e000      	b.n	8010f88 <f_printf+0x328>
 8010f86:	2207      	movs	r2, #7
 8010f88:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8010f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f96:	1c5a      	adds	r2, r3, #1
 8010f98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010f9c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010fa0:	3230      	adds	r2, #48	; 0x30
 8010fa2:	b2d2      	uxtb	r2, r2
 8010fa4:	3398      	adds	r3, #152	; 0x98
 8010fa6:	443b      	add	r3, r7
 8010fa8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d003      	beq.n	8010fbc <f_printf+0x35c>
 8010fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010fb8:	2b1f      	cmp	r3, #31
 8010fba:	d9c7      	bls.n	8010f4c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010fbc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010fc0:	f003 0308 	and.w	r3, r3, #8
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d009      	beq.n	8010fdc <f_printf+0x37c>
 8010fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010fcc:	1c5a      	adds	r2, r3, #1
 8010fce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010fd2:	3398      	adds	r3, #152	; 0x98
 8010fd4:	443b      	add	r3, r7
 8010fd6:	222d      	movs	r2, #45	; 0x2d
 8010fd8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010fe4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d001      	beq.n	8010ff4 <f_printf+0x394>
 8010ff0:	2330      	movs	r3, #48	; 0x30
 8010ff2:	e000      	b.n	8010ff6 <f_printf+0x396>
 8010ff4:	2320      	movs	r3, #32
 8010ff6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8010ffa:	e007      	b.n	801100c <f_printf+0x3ac>
 8010ffc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8011000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011004:	4611      	mov	r1, r2
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff fdb3 	bl	8010b72 <putc_bfd>
 801100c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011010:	f003 0302 	and.w	r3, r3, #2
 8011014:	2b00      	cmp	r3, #0
 8011016:	d108      	bne.n	801102a <f_printf+0x3ca>
 8011018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011022:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011026:	429a      	cmp	r2, r3
 8011028:	d8e8      	bhi.n	8010ffc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801102a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801102e:	3b01      	subs	r3, #1
 8011030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011034:	f107 020c 	add.w	r2, r7, #12
 8011038:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801103c:	4413      	add	r3, r2
 801103e:	781a      	ldrb	r2, [r3, #0]
 8011040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff fd93 	bl	8010b72 <putc_bfd>
		} while (i);
 801104c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011050:	2b00      	cmp	r3, #0
 8011052:	d1ea      	bne.n	801102a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011054:	e007      	b.n	8011066 <f_printf+0x406>
 8011056:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801105e:	4611      	mov	r1, r2
 8011060:	4618      	mov	r0, r3
 8011062:	f7ff fd86 	bl	8010b72 <putc_bfd>
 8011066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801106a:	1c5a      	adds	r2, r3, #1
 801106c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011070:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011074:	429a      	cmp	r2, r3
 8011076:	d8ee      	bhi.n	8011056 <f_printf+0x3f6>
		c = *fmt++;
 8011078:	e600      	b.n	8010c7c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801107a:	bf00      	nop
 801107c:	e000      	b.n	8011080 <f_printf+0x420>
		if (!c) break;
 801107e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8011080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011084:	4618      	mov	r0, r3
 8011086:	f7ff fdb1 	bl	8010bec <putc_flush>
 801108a:	4603      	mov	r3, r0
}
 801108c:	4618      	mov	r0, r3
 801108e:	379c      	adds	r7, #156	; 0x9c
 8011090:	46bd      	mov	sp, r7
 8011092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011096:	b003      	add	sp, #12
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop

0801109c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801109c:	b480      	push	{r7}
 801109e:	b087      	sub	sp, #28
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	4613      	mov	r3, r2
 80110a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80110aa:	2301      	movs	r3, #1
 80110ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80110b2:	4b1f      	ldr	r3, [pc, #124]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110b4:	7a5b      	ldrb	r3, [r3, #9]
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d131      	bne.n	8011120 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80110bc:	4b1c      	ldr	r3, [pc, #112]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110be:	7a5b      	ldrb	r3, [r3, #9]
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	461a      	mov	r2, r3
 80110c4:	4b1a      	ldr	r3, [pc, #104]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110c6:	2100      	movs	r1, #0
 80110c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80110ca:	4b19      	ldr	r3, [pc, #100]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110cc:	7a5b      	ldrb	r3, [r3, #9]
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	4a17      	ldr	r2, [pc, #92]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4413      	add	r3, r2
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80110da:	4b15      	ldr	r3, [pc, #84]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110dc:	7a5b      	ldrb	r3, [r3, #9]
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	461a      	mov	r2, r3
 80110e2:	4b13      	ldr	r3, [pc, #76]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110e4:	4413      	add	r3, r2
 80110e6:	79fa      	ldrb	r2, [r7, #7]
 80110e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80110ea:	4b11      	ldr	r3, [pc, #68]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110ec:	7a5b      	ldrb	r3, [r3, #9]
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	1c5a      	adds	r2, r3, #1
 80110f2:	b2d1      	uxtb	r1, r2
 80110f4:	4a0e      	ldr	r2, [pc, #56]	; (8011130 <FATFS_LinkDriverEx+0x94>)
 80110f6:	7251      	strb	r1, [r2, #9]
 80110f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80110fa:	7dbb      	ldrb	r3, [r7, #22]
 80110fc:	3330      	adds	r3, #48	; 0x30
 80110fe:	b2da      	uxtb	r2, r3
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	3301      	adds	r3, #1
 8011108:	223a      	movs	r2, #58	; 0x3a
 801110a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	3302      	adds	r3, #2
 8011110:	222f      	movs	r2, #47	; 0x2f
 8011112:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	3303      	adds	r3, #3
 8011118:	2200      	movs	r2, #0
 801111a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801111c:	2300      	movs	r3, #0
 801111e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011120:	7dfb      	ldrb	r3, [r7, #23]
}
 8011122:	4618      	mov	r0, r3
 8011124:	371c      	adds	r7, #28
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	20010360 	.word	0x20010360

08011134 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801113e:	2200      	movs	r2, #0
 8011140:	6839      	ldr	r1, [r7, #0]
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f7ff ffaa 	bl	801109c <FATFS_LinkDriverEx>
 8011148:	4603      	mov	r3, r0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3708      	adds	r7, #8
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
	...

08011154 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011158:	2200      	movs	r2, #0
 801115a:	4912      	ldr	r1, [pc, #72]	; (80111a4 <MX_USB_DEVICE_Init+0x50>)
 801115c:	4812      	ldr	r0, [pc, #72]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 801115e:	f7fc f889 	bl	800d274 <USBD_Init>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d001      	beq.n	801116c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011168:	f7f0 f87e 	bl	8001268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801116c:	490f      	ldr	r1, [pc, #60]	; (80111ac <MX_USB_DEVICE_Init+0x58>)
 801116e:	480e      	ldr	r0, [pc, #56]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 8011170:	f7fc f8b0 	bl	800d2d4 <USBD_RegisterClass>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801117a:	f7f0 f875 	bl	8001268 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801117e:	490c      	ldr	r1, [pc, #48]	; (80111b0 <MX_USB_DEVICE_Init+0x5c>)
 8011180:	4809      	ldr	r0, [pc, #36]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 8011182:	f7fb ffe7 	bl	800d154 <USBD_CDC_RegisterInterface>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d001      	beq.n	8011190 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801118c:	f7f0 f86c 	bl	8001268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011190:	4805      	ldr	r0, [pc, #20]	; (80111a8 <MX_USB_DEVICE_Init+0x54>)
 8011192:	f7fc f8d5 	bl	800d340 <USBD_Start>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801119c:	f7f0 f864 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80111a0:	bf00      	nop
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	200000ac 	.word	0x200000ac
 80111a8:	2001036c 	.word	0x2001036c
 80111ac:	20000018 	.word	0x20000018
 80111b0:	20000098 	.word	0x20000098

080111b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80111b8:	2200      	movs	r2, #0
 80111ba:	4905      	ldr	r1, [pc, #20]	; (80111d0 <CDC_Init_FS+0x1c>)
 80111bc:	4805      	ldr	r0, [pc, #20]	; (80111d4 <CDC_Init_FS+0x20>)
 80111be:	f7fb ffe3 	bl	800d188 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80111c2:	4905      	ldr	r1, [pc, #20]	; (80111d8 <CDC_Init_FS+0x24>)
 80111c4:	4803      	ldr	r0, [pc, #12]	; (80111d4 <CDC_Init_FS+0x20>)
 80111c6:	f7fc f801 	bl	800d1cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80111ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20010e48 	.word	0x20010e48
 80111d4:	2001036c 	.word	0x2001036c
 80111d8:	20010648 	.word	0x20010648

080111dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80111dc:	b480      	push	{r7}
 80111de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80111e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	4603      	mov	r3, r0
 80111f4:	6039      	str	r1, [r7, #0]
 80111f6:	71fb      	strb	r3, [r7, #7]
 80111f8:	4613      	mov	r3, r2
 80111fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80111fc:	79fb      	ldrb	r3, [r7, #7]
 80111fe:	2b23      	cmp	r3, #35	; 0x23
 8011200:	d84a      	bhi.n	8011298 <CDC_Control_FS+0xac>
 8011202:	a201      	add	r2, pc, #4	; (adr r2, 8011208 <CDC_Control_FS+0x1c>)
 8011204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011208:	08011299 	.word	0x08011299
 801120c:	08011299 	.word	0x08011299
 8011210:	08011299 	.word	0x08011299
 8011214:	08011299 	.word	0x08011299
 8011218:	08011299 	.word	0x08011299
 801121c:	08011299 	.word	0x08011299
 8011220:	08011299 	.word	0x08011299
 8011224:	08011299 	.word	0x08011299
 8011228:	08011299 	.word	0x08011299
 801122c:	08011299 	.word	0x08011299
 8011230:	08011299 	.word	0x08011299
 8011234:	08011299 	.word	0x08011299
 8011238:	08011299 	.word	0x08011299
 801123c:	08011299 	.word	0x08011299
 8011240:	08011299 	.word	0x08011299
 8011244:	08011299 	.word	0x08011299
 8011248:	08011299 	.word	0x08011299
 801124c:	08011299 	.word	0x08011299
 8011250:	08011299 	.word	0x08011299
 8011254:	08011299 	.word	0x08011299
 8011258:	08011299 	.word	0x08011299
 801125c:	08011299 	.word	0x08011299
 8011260:	08011299 	.word	0x08011299
 8011264:	08011299 	.word	0x08011299
 8011268:	08011299 	.word	0x08011299
 801126c:	08011299 	.word	0x08011299
 8011270:	08011299 	.word	0x08011299
 8011274:	08011299 	.word	0x08011299
 8011278:	08011299 	.word	0x08011299
 801127c:	08011299 	.word	0x08011299
 8011280:	08011299 	.word	0x08011299
 8011284:	08011299 	.word	0x08011299
 8011288:	08011299 	.word	0x08011299
 801128c:	08011299 	.word	0x08011299
 8011290:	08011299 	.word	0x08011299
 8011294:	08011299 	.word	0x08011299
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011298:	bf00      	nop
  }

  return (USBD_OK);
 801129a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801129c:	4618      	mov	r0, r3
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	480f      	ldr	r0, [pc, #60]	; (80112f4 <CDC_Receive_FS+0x4c>)
 80112b6:	f7fb ff89 	bl	800d1cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80112ba:	480e      	ldr	r0, [pc, #56]	; (80112f4 <CDC_Receive_FS+0x4c>)
 80112bc:	f7fb ffa4 	bl	800d208 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 80112c6:	2240      	movs	r2, #64	; 0x40
 80112c8:	2100      	movs	r1, #0
 80112ca:	480b      	ldr	r0, [pc, #44]	; (80112f8 <CDC_Receive_FS+0x50>)
 80112cc:	f001 fdf1 	bl	8012eb2 <memset>
  memcpy(inBuff, Buf, len);
 80112d0:	7bfb      	ldrb	r3, [r7, #15]
 80112d2:	461a      	mov	r2, r3
 80112d4:	6879      	ldr	r1, [r7, #4]
 80112d6:	4808      	ldr	r0, [pc, #32]	; (80112f8 <CDC_Receive_FS+0x50>)
 80112d8:	f001 fe7a 	bl	8012fd0 <memcpy>
  memset(Buf, '\0', len);
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	461a      	mov	r2, r3
 80112e0:	2100      	movs	r1, #0
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f001 fde5 	bl	8012eb2 <memset>
  return (USBD_OK);
 80112e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	2001036c 	.word	0x2001036c
 80112f8:	2000fe44 	.word	0x2000fe44

080112fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b087      	sub	sp, #28
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	4613      	mov	r3, r2
 8011308:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801130a:	2300      	movs	r3, #0
 801130c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801130e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011312:	4618      	mov	r0, r3
 8011314:	371c      	adds	r7, #28
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr
	...

08011320 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	4603      	mov	r3, r0
 8011328:	6039      	str	r1, [r7, #0]
 801132a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2212      	movs	r2, #18
 8011330:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011332:	4b03      	ldr	r3, [pc, #12]	; (8011340 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011334:	4618      	mov	r0, r3
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	200000cc 	.word	0x200000cc

08011344 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	6039      	str	r1, [r7, #0]
 801134e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2204      	movs	r2, #4
 8011354:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011356:	4b03      	ldr	r3, [pc, #12]	; (8011364 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011358:	4618      	mov	r0, r3
 801135a:	370c      	adds	r7, #12
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	200000ec 	.word	0x200000ec

08011368 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	4603      	mov	r3, r0
 8011370:	6039      	str	r1, [r7, #0]
 8011372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d105      	bne.n	8011386 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	4907      	ldr	r1, [pc, #28]	; (801139c <USBD_FS_ProductStrDescriptor+0x34>)
 801137e:	4808      	ldr	r0, [pc, #32]	; (80113a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011380:	f7fd f9ba 	bl	800e6f8 <USBD_GetString>
 8011384:	e004      	b.n	8011390 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011386:	683a      	ldr	r2, [r7, #0]
 8011388:	4904      	ldr	r1, [pc, #16]	; (801139c <USBD_FS_ProductStrDescriptor+0x34>)
 801138a:	4805      	ldr	r0, [pc, #20]	; (80113a0 <USBD_FS_ProductStrDescriptor+0x38>)
 801138c:	f7fd f9b4 	bl	800e6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011390:	4b02      	ldr	r3, [pc, #8]	; (801139c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011392:	4618      	mov	r0, r3
 8011394:	3708      	adds	r7, #8
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	20011648 	.word	0x20011648
 80113a0:	0801666c 	.word	0x0801666c

080113a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	4603      	mov	r3, r0
 80113ac:	6039      	str	r1, [r7, #0]
 80113ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	4904      	ldr	r1, [pc, #16]	; (80113c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80113b4:	4804      	ldr	r0, [pc, #16]	; (80113c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80113b6:	f7fd f99f 	bl	800e6f8 <USBD_GetString>
  return USBD_StrDesc;
 80113ba:	4b02      	ldr	r3, [pc, #8]	; (80113c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	20011648 	.word	0x20011648
 80113c8:	0801667c 	.word	0x0801667c

080113cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	4603      	mov	r3, r0
 80113d4:	6039      	str	r1, [r7, #0]
 80113d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	221a      	movs	r2, #26
 80113dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80113de:	f000 f855 	bl	801148c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80113e2:	4b02      	ldr	r3, [pc, #8]	; (80113ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	200000f0 	.word	0x200000f0

080113f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	4603      	mov	r3, r0
 80113f8:	6039      	str	r1, [r7, #0]
 80113fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80113fc:	79fb      	ldrb	r3, [r7, #7]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d105      	bne.n	801140e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	4907      	ldr	r1, [pc, #28]	; (8011424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011406:	4808      	ldr	r0, [pc, #32]	; (8011428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011408:	f7fd f976 	bl	800e6f8 <USBD_GetString>
 801140c:	e004      	b.n	8011418 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801140e:	683a      	ldr	r2, [r7, #0]
 8011410:	4904      	ldr	r1, [pc, #16]	; (8011424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011412:	4805      	ldr	r0, [pc, #20]	; (8011428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011414:	f7fd f970 	bl	800e6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011418:	4b02      	ldr	r3, [pc, #8]	; (8011424 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801141a:	4618      	mov	r0, r3
 801141c:	3708      	adds	r7, #8
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	20011648 	.word	0x20011648
 8011428:	08016690 	.word	0x08016690

0801142c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	6039      	str	r1, [r7, #0]
 8011436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011438:	79fb      	ldrb	r3, [r7, #7]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d105      	bne.n	801144a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801143e:	683a      	ldr	r2, [r7, #0]
 8011440:	4907      	ldr	r1, [pc, #28]	; (8011460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011442:	4808      	ldr	r0, [pc, #32]	; (8011464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011444:	f7fd f958 	bl	800e6f8 <USBD_GetString>
 8011448:	e004      	b.n	8011454 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801144a:	683a      	ldr	r2, [r7, #0]
 801144c:	4904      	ldr	r1, [pc, #16]	; (8011460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801144e:	4805      	ldr	r0, [pc, #20]	; (8011464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011450:	f7fd f952 	bl	800e6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011454:	4b02      	ldr	r3, [pc, #8]	; (8011460 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011456:	4618      	mov	r0, r3
 8011458:	3708      	adds	r7, #8
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	20011648 	.word	0x20011648
 8011464:	0801669c 	.word	0x0801669c

08011468 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	4603      	mov	r3, r0
 8011470:	6039      	str	r1, [r7, #0]
 8011472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	220c      	movs	r2, #12
 8011478:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801147a:	4b03      	ldr	r3, [pc, #12]	; (8011488 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801147c:	4618      	mov	r0, r3
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr
 8011488:	200000e0 	.word	0x200000e0

0801148c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011492:	4b0f      	ldr	r3, [pc, #60]	; (80114d0 <Get_SerialNum+0x44>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011498:	4b0e      	ldr	r3, [pc, #56]	; (80114d4 <Get_SerialNum+0x48>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801149e:	4b0e      	ldr	r3, [pc, #56]	; (80114d8 <Get_SerialNum+0x4c>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	4413      	add	r3, r2
 80114aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d009      	beq.n	80114c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114b2:	2208      	movs	r2, #8
 80114b4:	4909      	ldr	r1, [pc, #36]	; (80114dc <Get_SerialNum+0x50>)
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f000 f814 	bl	80114e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114bc:	2204      	movs	r2, #4
 80114be:	4908      	ldr	r1, [pc, #32]	; (80114e0 <Get_SerialNum+0x54>)
 80114c0:	68b8      	ldr	r0, [r7, #8]
 80114c2:	f000 f80f 	bl	80114e4 <IntToUnicode>
  }
}
 80114c6:	bf00      	nop
 80114c8:	3710      	adds	r7, #16
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	1fff7590 	.word	0x1fff7590
 80114d4:	1fff7594 	.word	0x1fff7594
 80114d8:	1fff7598 	.word	0x1fff7598
 80114dc:	200000f2 	.word	0x200000f2
 80114e0:	20000102 	.word	0x20000102

080114e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b087      	sub	sp, #28
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	4613      	mov	r3, r2
 80114f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80114f2:	2300      	movs	r3, #0
 80114f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80114f6:	2300      	movs	r3, #0
 80114f8:	75fb      	strb	r3, [r7, #23]
 80114fa:	e027      	b.n	801154c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	0f1b      	lsrs	r3, r3, #28
 8011500:	2b09      	cmp	r3, #9
 8011502:	d80b      	bhi.n	801151c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	0f1b      	lsrs	r3, r3, #28
 8011508:	b2da      	uxtb	r2, r3
 801150a:	7dfb      	ldrb	r3, [r7, #23]
 801150c:	005b      	lsls	r3, r3, #1
 801150e:	4619      	mov	r1, r3
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	440b      	add	r3, r1
 8011514:	3230      	adds	r2, #48	; 0x30
 8011516:	b2d2      	uxtb	r2, r2
 8011518:	701a      	strb	r2, [r3, #0]
 801151a:	e00a      	b.n	8011532 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	0f1b      	lsrs	r3, r3, #28
 8011520:	b2da      	uxtb	r2, r3
 8011522:	7dfb      	ldrb	r3, [r7, #23]
 8011524:	005b      	lsls	r3, r3, #1
 8011526:	4619      	mov	r1, r3
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	440b      	add	r3, r1
 801152c:	3237      	adds	r2, #55	; 0x37
 801152e:	b2d2      	uxtb	r2, r2
 8011530:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	011b      	lsls	r3, r3, #4
 8011536:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011538:	7dfb      	ldrb	r3, [r7, #23]
 801153a:	005b      	lsls	r3, r3, #1
 801153c:	3301      	adds	r3, #1
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	4413      	add	r3, r2
 8011542:	2200      	movs	r2, #0
 8011544:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011546:	7dfb      	ldrb	r3, [r7, #23]
 8011548:	3301      	adds	r3, #1
 801154a:	75fb      	strb	r3, [r7, #23]
 801154c:	7dfa      	ldrb	r2, [r7, #23]
 801154e:	79fb      	ldrb	r3, [r7, #7]
 8011550:	429a      	cmp	r2, r3
 8011552:	d3d3      	bcc.n	80114fc <IntToUnicode+0x18>
  }
}
 8011554:	bf00      	nop
 8011556:	bf00      	nop
 8011558:	371c      	adds	r7, #28
 801155a:	46bd      	mov	sp, r7
 801155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011560:	4770      	bx	lr
	...

08011564 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b0ac      	sub	sp, #176	; 0xb0
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801156c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011570:	2200      	movs	r2, #0
 8011572:	601a      	str	r2, [r3, #0]
 8011574:	605a      	str	r2, [r3, #4]
 8011576:	609a      	str	r2, [r3, #8]
 8011578:	60da      	str	r2, [r3, #12]
 801157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801157c:	f107 0314 	add.w	r3, r7, #20
 8011580:	2288      	movs	r2, #136	; 0x88
 8011582:	2100      	movs	r1, #0
 8011584:	4618      	mov	r0, r3
 8011586:	f001 fc94 	bl	8012eb2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011592:	d164      	bne.n	801165e <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011598:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801159a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801159e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80115a2:	f107 0314 	add.w	r3, r7, #20
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f5 fec6 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80115b2:	f7ef fe59 	bl	8001268 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115b6:	4b2c      	ldr	r3, [pc, #176]	; (8011668 <HAL_PCD_MspInit+0x104>)
 80115b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115ba:	4a2b      	ldr	r2, [pc, #172]	; (8011668 <HAL_PCD_MspInit+0x104>)
 80115bc:	f043 0301 	orr.w	r3, r3, #1
 80115c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115c2:	4b29      	ldr	r3, [pc, #164]	; (8011668 <HAL_PCD_MspInit+0x104>)
 80115c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115c6:	f003 0301 	and.w	r3, r3, #1
 80115ca:	613b      	str	r3, [r7, #16]
 80115cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80115ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80115d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115d6:	2302      	movs	r3, #2
 80115d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115dc:	2300      	movs	r3, #0
 80115de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115e2:	2303      	movs	r3, #3
 80115e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80115e8:	230a      	movs	r3, #10
 80115ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80115f2:	4619      	mov	r1, r3
 80115f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80115f8:	f7f2 fe76 	bl	80042e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80115fc:	4b1a      	ldr	r3, [pc, #104]	; (8011668 <HAL_PCD_MspInit+0x104>)
 80115fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011600:	4a19      	ldr	r2, [pc, #100]	; (8011668 <HAL_PCD_MspInit+0x104>)
 8011602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011608:	4b17      	ldr	r3, [pc, #92]	; (8011668 <HAL_PCD_MspInit+0x104>)
 801160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801160c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011614:	4b14      	ldr	r3, [pc, #80]	; (8011668 <HAL_PCD_MspInit+0x104>)
 8011616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801161c:	2b00      	cmp	r3, #0
 801161e:	d114      	bne.n	801164a <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011620:	4b11      	ldr	r3, [pc, #68]	; (8011668 <HAL_PCD_MspInit+0x104>)
 8011622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011624:	4a10      	ldr	r2, [pc, #64]	; (8011668 <HAL_PCD_MspInit+0x104>)
 8011626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801162a:	6593      	str	r3, [r2, #88]	; 0x58
 801162c:	4b0e      	ldr	r3, [pc, #56]	; (8011668 <HAL_PCD_MspInit+0x104>)
 801162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011634:	60bb      	str	r3, [r7, #8]
 8011636:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8011638:	f7f5 f854 	bl	80066e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801163c:	4b0a      	ldr	r3, [pc, #40]	; (8011668 <HAL_PCD_MspInit+0x104>)
 801163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011640:	4a09      	ldr	r2, [pc, #36]	; (8011668 <HAL_PCD_MspInit+0x104>)
 8011642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011646:	6593      	str	r3, [r2, #88]	; 0x58
 8011648:	e001      	b.n	801164e <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801164a:	f7f5 f84b 	bl	80066e4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801164e:	2200      	movs	r2, #0
 8011650:	2100      	movs	r1, #0
 8011652:	2043      	movs	r0, #67	; 0x43
 8011654:	f7f2 fbd9 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011658:	2043      	movs	r0, #67	; 0x43
 801165a:	f7f2 fbf2 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801165e:	bf00      	nop
 8011660:	37b0      	adds	r7, #176	; 0xb0
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	40021000 	.word	0x40021000

0801166c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011680:	4619      	mov	r1, r3
 8011682:	4610      	mov	r0, r2
 8011684:	f7fb fea9 	bl	800d3da <USBD_LL_SetupStage>
}
 8011688:	bf00      	nop
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	460b      	mov	r3, r1
 801169a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80116a2:	78fa      	ldrb	r2, [r7, #3]
 80116a4:	6879      	ldr	r1, [r7, #4]
 80116a6:	4613      	mov	r3, r2
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	4413      	add	r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	440b      	add	r3, r1
 80116b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	78fb      	ldrb	r3, [r7, #3]
 80116b8:	4619      	mov	r1, r3
 80116ba:	f7fb fee3 	bl	800d484 <USBD_LL_DataOutStage>
}
 80116be:	bf00      	nop
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}

080116c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b082      	sub	sp, #8
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	460b      	mov	r3, r1
 80116d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80116d8:	78fa      	ldrb	r2, [r7, #3]
 80116da:	6879      	ldr	r1, [r7, #4]
 80116dc:	4613      	mov	r3, r2
 80116de:	00db      	lsls	r3, r3, #3
 80116e0:	4413      	add	r3, r2
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	440b      	add	r3, r1
 80116e6:	3348      	adds	r3, #72	; 0x48
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	78fb      	ldrb	r3, [r7, #3]
 80116ec:	4619      	mov	r1, r3
 80116ee:	f7fb ff7c 	bl	800d5ea <USBD_LL_DataInStage>
}
 80116f2:	bf00      	nop
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}

080116fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116fa:	b580      	push	{r7, lr}
 80116fc:	b082      	sub	sp, #8
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011708:	4618      	mov	r0, r3
 801170a:	f7fc f8b6 	bl	800d87a <USBD_LL_SOF>
}
 801170e:	bf00      	nop
 8011710:	3708      	adds	r7, #8
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801171e:	2301      	movs	r3, #1
 8011720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	691b      	ldr	r3, [r3, #16]
 8011726:	2b02      	cmp	r3, #2
 8011728:	d001      	beq.n	801172e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801172a:	f7ef fd9d 	bl	8001268 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011734:	7bfa      	ldrb	r2, [r7, #15]
 8011736:	4611      	mov	r1, r2
 8011738:	4618      	mov	r0, r3
 801173a:	f7fc f85a 	bl	800d7f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011744:	4618      	mov	r0, r3
 8011746:	f7fc f802 	bl	800d74e <USBD_LL_Reset>
}
 801174a:	bf00      	nop
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6812      	ldr	r2, [r2, #0]
 801176a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801176e:	f043 0301 	orr.w	r3, r3, #1
 8011772:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801177a:	4618      	mov	r0, r3
 801177c:	f7fc f849 	bl	800d812 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a1b      	ldr	r3, [r3, #32]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d005      	beq.n	8011794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011788:	4b04      	ldr	r3, [pc, #16]	; (801179c <HAL_PCD_SuspendCallback+0x48>)
 801178a:	691b      	ldr	r3, [r3, #16]
 801178c:	4a03      	ldr	r2, [pc, #12]	; (801179c <HAL_PCD_SuspendCallback+0x48>)
 801178e:	f043 0306 	orr.w	r3, r3, #6
 8011792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011794:	bf00      	nop
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	e000ed00 	.word	0xe000ed00

080117a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	6812      	ldr	r2, [r2, #0]
 80117b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117ba:	f023 0301 	bic.w	r3, r3, #1
 80117be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6a1b      	ldr	r3, [r3, #32]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d007      	beq.n	80117d8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117c8:	4b08      	ldr	r3, [pc, #32]	; (80117ec <HAL_PCD_ResumeCallback+0x4c>)
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	4a07      	ldr	r2, [pc, #28]	; (80117ec <HAL_PCD_ResumeCallback+0x4c>)
 80117ce:	f023 0306 	bic.w	r3, r3, #6
 80117d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80117d4:	f000 faf6 	bl	8011dc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fc f833 	bl	800d84a <USBD_LL_Resume>
}
 80117e4:	bf00      	nop
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	e000ed00 	.word	0xe000ed00

080117f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011802:	78fa      	ldrb	r2, [r7, #3]
 8011804:	4611      	mov	r1, r2
 8011806:	4618      	mov	r0, r3
 8011808:	f7fc f889 	bl	800d91e <USBD_LL_IsoOUTIncomplete>
}
 801180c:	bf00      	nop
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011826:	78fa      	ldrb	r2, [r7, #3]
 8011828:	4611      	mov	r1, r2
 801182a:	4618      	mov	r0, r3
 801182c:	f7fc f845 	bl	800d8ba <USBD_LL_IsoINIncomplete>
}
 8011830:	bf00      	nop
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011846:	4618      	mov	r0, r3
 8011848:	f7fc f89b 	bl	800d982 <USBD_LL_DevConnected>
}
 801184c:	bf00      	nop
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011862:	4618      	mov	r0, r3
 8011864:	f7fc f898 	bl	800d998 <USBD_LL_DevDisconnected>
}
 8011868:	bf00      	nop
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d13c      	bne.n	80118fa <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011880:	4a20      	ldr	r2, [pc, #128]	; (8011904 <USBD_LL_Init+0x94>)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a1e      	ldr	r2, [pc, #120]	; (8011904 <USBD_LL_Init+0x94>)
 801188c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011890:	4b1c      	ldr	r3, [pc, #112]	; (8011904 <USBD_LL_Init+0x94>)
 8011892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011898:	4b1a      	ldr	r3, [pc, #104]	; (8011904 <USBD_LL_Init+0x94>)
 801189a:	2206      	movs	r2, #6
 801189c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801189e:	4b19      	ldr	r3, [pc, #100]	; (8011904 <USBD_LL_Init+0x94>)
 80118a0:	2202      	movs	r2, #2
 80118a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80118a4:	4b17      	ldr	r3, [pc, #92]	; (8011904 <USBD_LL_Init+0x94>)
 80118a6:	2202      	movs	r2, #2
 80118a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80118aa:	4b16      	ldr	r3, [pc, #88]	; (8011904 <USBD_LL_Init+0x94>)
 80118ac:	2200      	movs	r2, #0
 80118ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80118b0:	4b14      	ldr	r3, [pc, #80]	; (8011904 <USBD_LL_Init+0x94>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80118b6:	4b13      	ldr	r3, [pc, #76]	; (8011904 <USBD_LL_Init+0x94>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80118bc:	4b11      	ldr	r3, [pc, #68]	; (8011904 <USBD_LL_Init+0x94>)
 80118be:	2200      	movs	r2, #0
 80118c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80118c2:	4b10      	ldr	r3, [pc, #64]	; (8011904 <USBD_LL_Init+0x94>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80118c8:	4b0e      	ldr	r3, [pc, #56]	; (8011904 <USBD_LL_Init+0x94>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80118ce:	480d      	ldr	r0, [pc, #52]	; (8011904 <USBD_LL_Init+0x94>)
 80118d0:	f7f3 fcfd 	bl	80052ce <HAL_PCD_Init>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d001      	beq.n	80118de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80118da:	f7ef fcc5 	bl	8001268 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80118de:	2180      	movs	r1, #128	; 0x80
 80118e0:	4808      	ldr	r0, [pc, #32]	; (8011904 <USBD_LL_Init+0x94>)
 80118e2:	f7f4 fe66 	bl	80065b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80118e6:	2240      	movs	r2, #64	; 0x40
 80118e8:	2100      	movs	r1, #0
 80118ea:	4806      	ldr	r0, [pc, #24]	; (8011904 <USBD_LL_Init+0x94>)
 80118ec:	f7f4 fe1a 	bl	8006524 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80118f0:	2280      	movs	r2, #128	; 0x80
 80118f2:	2101      	movs	r1, #1
 80118f4:	4803      	ldr	r0, [pc, #12]	; (8011904 <USBD_LL_Init+0x94>)
 80118f6:	f7f4 fe15 	bl	8006524 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	20011848 	.word	0x20011848

08011908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011910:	2300      	movs	r3, #0
 8011912:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011914:	2300      	movs	r3, #0
 8011916:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801191e:	4618      	mov	r0, r3
 8011920:	f7f3 fdf9 	bl	8005516 <HAL_PCD_Start>
 8011924:	4603      	mov	r3, r0
 8011926:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011928:	7bbb      	ldrb	r3, [r7, #14]
 801192a:	2b03      	cmp	r3, #3
 801192c:	d816      	bhi.n	801195c <USBD_LL_Start+0x54>
 801192e:	a201      	add	r2, pc, #4	; (adr r2, 8011934 <USBD_LL_Start+0x2c>)
 8011930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011934:	08011945 	.word	0x08011945
 8011938:	0801194b 	.word	0x0801194b
 801193c:	08011951 	.word	0x08011951
 8011940:	08011957 	.word	0x08011957
    case HAL_OK :
      usb_status = USBD_OK;
 8011944:	2300      	movs	r3, #0
 8011946:	73fb      	strb	r3, [r7, #15]
    break;
 8011948:	e00b      	b.n	8011962 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801194a:	2303      	movs	r3, #3
 801194c:	73fb      	strb	r3, [r7, #15]
    break;
 801194e:	e008      	b.n	8011962 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011950:	2301      	movs	r3, #1
 8011952:	73fb      	strb	r3, [r7, #15]
    break;
 8011954:	e005      	b.n	8011962 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011956:	2303      	movs	r3, #3
 8011958:	73fb      	strb	r3, [r7, #15]
    break;
 801195a:	e002      	b.n	8011962 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801195c:	2303      	movs	r3, #3
 801195e:	73fb      	strb	r3, [r7, #15]
    break;
 8011960:	bf00      	nop
  }
  return usb_status;
 8011962:	7bfb      	ldrb	r3, [r7, #15]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	4608      	mov	r0, r1
 8011976:	4611      	mov	r1, r2
 8011978:	461a      	mov	r2, r3
 801197a:	4603      	mov	r3, r0
 801197c:	70fb      	strb	r3, [r7, #3]
 801197e:	460b      	mov	r3, r1
 8011980:	70bb      	strb	r3, [r7, #2]
 8011982:	4613      	mov	r3, r2
 8011984:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011986:	2300      	movs	r3, #0
 8011988:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011994:	78bb      	ldrb	r3, [r7, #2]
 8011996:	883a      	ldrh	r2, [r7, #0]
 8011998:	78f9      	ldrb	r1, [r7, #3]
 801199a:	f7f4 faa3 	bl	8005ee4 <HAL_PCD_EP_Open>
 801199e:	4603      	mov	r3, r0
 80119a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80119a2:	7bbb      	ldrb	r3, [r7, #14]
 80119a4:	2b03      	cmp	r3, #3
 80119a6:	d817      	bhi.n	80119d8 <USBD_LL_OpenEP+0x6c>
 80119a8:	a201      	add	r2, pc, #4	; (adr r2, 80119b0 <USBD_LL_OpenEP+0x44>)
 80119aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ae:	bf00      	nop
 80119b0:	080119c1 	.word	0x080119c1
 80119b4:	080119c7 	.word	0x080119c7
 80119b8:	080119cd 	.word	0x080119cd
 80119bc:	080119d3 	.word	0x080119d3
    case HAL_OK :
      usb_status = USBD_OK;
 80119c0:	2300      	movs	r3, #0
 80119c2:	73fb      	strb	r3, [r7, #15]
    break;
 80119c4:	e00b      	b.n	80119de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80119c6:	2303      	movs	r3, #3
 80119c8:	73fb      	strb	r3, [r7, #15]
    break;
 80119ca:	e008      	b.n	80119de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80119cc:	2301      	movs	r3, #1
 80119ce:	73fb      	strb	r3, [r7, #15]
    break;
 80119d0:	e005      	b.n	80119de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80119d2:	2303      	movs	r3, #3
 80119d4:	73fb      	strb	r3, [r7, #15]
    break;
 80119d6:	e002      	b.n	80119de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80119d8:	2303      	movs	r3, #3
 80119da:	73fb      	strb	r3, [r7, #15]
    break;
 80119dc:	bf00      	nop
  }
  return usb_status;
 80119de:	7bfb      	ldrb	r3, [r7, #15]
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	460b      	mov	r3, r1
 80119f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119f4:	2300      	movs	r3, #0
 80119f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119f8:	2300      	movs	r3, #0
 80119fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a02:	78fa      	ldrb	r2, [r7, #3]
 8011a04:	4611      	mov	r1, r2
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7f4 fad4 	bl	8005fb4 <HAL_PCD_EP_Close>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011a10:	7bbb      	ldrb	r3, [r7, #14]
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	d816      	bhi.n	8011a44 <USBD_LL_CloseEP+0x5c>
 8011a16:	a201      	add	r2, pc, #4	; (adr r2, 8011a1c <USBD_LL_CloseEP+0x34>)
 8011a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a1c:	08011a2d 	.word	0x08011a2d
 8011a20:	08011a33 	.word	0x08011a33
 8011a24:	08011a39 	.word	0x08011a39
 8011a28:	08011a3f 	.word	0x08011a3f
    case HAL_OK :
      usb_status = USBD_OK;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a30:	e00b      	b.n	8011a4a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a32:	2303      	movs	r3, #3
 8011a34:	73fb      	strb	r3, [r7, #15]
    break;
 8011a36:	e008      	b.n	8011a4a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a3c:	e005      	b.n	8011a4a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a3e:	2303      	movs	r3, #3
 8011a40:	73fb      	strb	r3, [r7, #15]
    break;
 8011a42:	e002      	b.n	8011a4a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011a44:	2303      	movs	r3, #3
 8011a46:	73fb      	strb	r3, [r7, #15]
    break;
 8011a48:	bf00      	nop
  }
  return usb_status;
 8011a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a60:	2300      	movs	r3, #0
 8011a62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a64:	2300      	movs	r3, #0
 8011a66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a6e:	78fa      	ldrb	r2, [r7, #3]
 8011a70:	4611      	mov	r1, r2
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7f4 fb63 	bl	800613e <HAL_PCD_EP_SetStall>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011a7c:	7bbb      	ldrb	r3, [r7, #14]
 8011a7e:	2b03      	cmp	r3, #3
 8011a80:	d816      	bhi.n	8011ab0 <USBD_LL_StallEP+0x5c>
 8011a82:	a201      	add	r2, pc, #4	; (adr r2, 8011a88 <USBD_LL_StallEP+0x34>)
 8011a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a88:	08011a99 	.word	0x08011a99
 8011a8c:	08011a9f 	.word	0x08011a9f
 8011a90:	08011aa5 	.word	0x08011aa5
 8011a94:	08011aab 	.word	0x08011aab
    case HAL_OK :
      usb_status = USBD_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a9c:	e00b      	b.n	8011ab6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a9e:	2303      	movs	r3, #3
 8011aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8011aa2:	e008      	b.n	8011ab6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8011aa8:	e005      	b.n	8011ab6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	73fb      	strb	r3, [r7, #15]
    break;
 8011aae:	e002      	b.n	8011ab6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011ab0:	2303      	movs	r3, #3
 8011ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ab4:	bf00      	nop
  }
  return usb_status;
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b084      	sub	sp, #16
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	460b      	mov	r3, r1
 8011aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011acc:	2300      	movs	r3, #0
 8011ace:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ada:	78fa      	ldrb	r2, [r7, #3]
 8011adc:	4611      	mov	r1, r2
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f4 fb8f 	bl	8006202 <HAL_PCD_EP_ClrStall>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011ae8:	7bbb      	ldrb	r3, [r7, #14]
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	d816      	bhi.n	8011b1c <USBD_LL_ClearStallEP+0x5c>
 8011aee:	a201      	add	r2, pc, #4	; (adr r2, 8011af4 <USBD_LL_ClearStallEP+0x34>)
 8011af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af4:	08011b05 	.word	0x08011b05
 8011af8:	08011b0b 	.word	0x08011b0b
 8011afc:	08011b11 	.word	0x08011b11
 8011b00:	08011b17 	.word	0x08011b17
    case HAL_OK :
      usb_status = USBD_OK;
 8011b04:	2300      	movs	r3, #0
 8011b06:	73fb      	strb	r3, [r7, #15]
    break;
 8011b08:	e00b      	b.n	8011b22 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b0a:	2303      	movs	r3, #3
 8011b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011b0e:	e008      	b.n	8011b22 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b10:	2301      	movs	r3, #1
 8011b12:	73fb      	strb	r3, [r7, #15]
    break;
 8011b14:	e005      	b.n	8011b22 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b16:	2303      	movs	r3, #3
 8011b18:	73fb      	strb	r3, [r7, #15]
    break;
 8011b1a:	e002      	b.n	8011b22 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011b1c:	2303      	movs	r3, #3
 8011b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b20:	bf00      	nop
  }
  return usb_status;
 8011b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	460b      	mov	r3, r1
 8011b36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	da0b      	bge.n	8011b60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011b48:	78fb      	ldrb	r3, [r7, #3]
 8011b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b4e:	68f9      	ldr	r1, [r7, #12]
 8011b50:	4613      	mov	r3, r2
 8011b52:	00db      	lsls	r3, r3, #3
 8011b54:	4413      	add	r3, r2
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	440b      	add	r3, r1
 8011b5a:	333e      	adds	r3, #62	; 0x3e
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	e00b      	b.n	8011b78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011b60:	78fb      	ldrb	r3, [r7, #3]
 8011b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b66:	68f9      	ldr	r1, [r7, #12]
 8011b68:	4613      	mov	r3, r2
 8011b6a:	00db      	lsls	r3, r3, #3
 8011b6c:	4413      	add	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	440b      	add	r3, r1
 8011b72:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011b76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b084      	sub	sp, #16
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b90:	2300      	movs	r3, #0
 8011b92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b94:	2300      	movs	r3, #0
 8011b96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b9e:	78fa      	ldrb	r2, [r7, #3]
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7f4 f979 	bl	8005e9a <HAL_PCD_SetAddress>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011bac:	7bbb      	ldrb	r3, [r7, #14]
 8011bae:	2b03      	cmp	r3, #3
 8011bb0:	d816      	bhi.n	8011be0 <USBD_LL_SetUSBAddress+0x5c>
 8011bb2:	a201      	add	r2, pc, #4	; (adr r2, 8011bb8 <USBD_LL_SetUSBAddress+0x34>)
 8011bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb8:	08011bc9 	.word	0x08011bc9
 8011bbc:	08011bcf 	.word	0x08011bcf
 8011bc0:	08011bd5 	.word	0x08011bd5
 8011bc4:	08011bdb 	.word	0x08011bdb
    case HAL_OK :
      usb_status = USBD_OK;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73fb      	strb	r3, [r7, #15]
    break;
 8011bcc:	e00b      	b.n	8011be6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011bce:	2303      	movs	r3, #3
 8011bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8011bd2:	e008      	b.n	8011be6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8011bd8:	e005      	b.n	8011be6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011bda:	2303      	movs	r3, #3
 8011bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8011bde:	e002      	b.n	8011be6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011be0:	2303      	movs	r3, #3
 8011be2:	73fb      	strb	r3, [r7, #15]
    break;
 8011be4:	bf00      	nop
  }
  return usb_status;
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3710      	adds	r7, #16
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b086      	sub	sp, #24
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	607a      	str	r2, [r7, #4]
 8011bfa:	603b      	str	r3, [r7, #0]
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c00:	2300      	movs	r3, #0
 8011c02:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c04:	2300      	movs	r3, #0
 8011c06:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c0e:	7af9      	ldrb	r1, [r7, #11]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	f7f4 fa62 	bl	80060dc <HAL_PCD_EP_Transmit>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011c1c:	7dbb      	ldrb	r3, [r7, #22]
 8011c1e:	2b03      	cmp	r3, #3
 8011c20:	d816      	bhi.n	8011c50 <USBD_LL_Transmit+0x60>
 8011c22:	a201      	add	r2, pc, #4	; (adr r2, 8011c28 <USBD_LL_Transmit+0x38>)
 8011c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c28:	08011c39 	.word	0x08011c39
 8011c2c:	08011c3f 	.word	0x08011c3f
 8011c30:	08011c45 	.word	0x08011c45
 8011c34:	08011c4b 	.word	0x08011c4b
    case HAL_OK :
      usb_status = USBD_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	75fb      	strb	r3, [r7, #23]
    break;
 8011c3c:	e00b      	b.n	8011c56 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c3e:	2303      	movs	r3, #3
 8011c40:	75fb      	strb	r3, [r7, #23]
    break;
 8011c42:	e008      	b.n	8011c56 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c44:	2301      	movs	r3, #1
 8011c46:	75fb      	strb	r3, [r7, #23]
    break;
 8011c48:	e005      	b.n	8011c56 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c4a:	2303      	movs	r3, #3
 8011c4c:	75fb      	strb	r3, [r7, #23]
    break;
 8011c4e:	e002      	b.n	8011c56 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8011c50:	2303      	movs	r3, #3
 8011c52:	75fb      	strb	r3, [r7, #23]
    break;
 8011c54:	bf00      	nop
  }
  return usb_status;
 8011c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3718      	adds	r7, #24
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b086      	sub	sp, #24
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	607a      	str	r2, [r7, #4]
 8011c6a:	603b      	str	r3, [r7, #0]
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c70:	2300      	movs	r3, #0
 8011c72:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c74:	2300      	movs	r3, #0
 8011c76:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c7e:	7af9      	ldrb	r1, [r7, #11]
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	f7f4 f9e0 	bl	8006048 <HAL_PCD_EP_Receive>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011c8c:	7dbb      	ldrb	r3, [r7, #22]
 8011c8e:	2b03      	cmp	r3, #3
 8011c90:	d816      	bhi.n	8011cc0 <USBD_LL_PrepareReceive+0x60>
 8011c92:	a201      	add	r2, pc, #4	; (adr r2, 8011c98 <USBD_LL_PrepareReceive+0x38>)
 8011c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c98:	08011ca9 	.word	0x08011ca9
 8011c9c:	08011caf 	.word	0x08011caf
 8011ca0:	08011cb5 	.word	0x08011cb5
 8011ca4:	08011cbb 	.word	0x08011cbb
    case HAL_OK :
      usb_status = USBD_OK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	75fb      	strb	r3, [r7, #23]
    break;
 8011cac:	e00b      	b.n	8011cc6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011cae:	2303      	movs	r3, #3
 8011cb0:	75fb      	strb	r3, [r7, #23]
    break;
 8011cb2:	e008      	b.n	8011cc6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	75fb      	strb	r3, [r7, #23]
    break;
 8011cb8:	e005      	b.n	8011cc6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011cba:	2303      	movs	r3, #3
 8011cbc:	75fb      	strb	r3, [r7, #23]
    break;
 8011cbe:	e002      	b.n	8011cc6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011cc0:	2303      	movs	r3, #3
 8011cc2:	75fb      	strb	r3, [r7, #23]
    break;
 8011cc4:	bf00      	nop
  }
  return usb_status;
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3718      	adds	r7, #24
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	460b      	mov	r3, r1
 8011cda:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ce2:	78fa      	ldrb	r2, [r7, #3]
 8011ce4:	4611      	mov	r1, r2
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7f4 f9e0 	bl	80060ac <HAL_PCD_EP_GetRxCount>
 8011cec:	4603      	mov	r3, r0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
	...

08011cf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	460b      	mov	r3, r1
 8011d02:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011d04:	78fb      	ldrb	r3, [r7, #3]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d002      	beq.n	8011d10 <HAL_PCDEx_LPM_Callback+0x18>
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d01f      	beq.n	8011d4e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011d0e:	e03b      	b.n	8011d88 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6a1b      	ldr	r3, [r3, #32]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d007      	beq.n	8011d28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011d18:	f000 f854 	bl	8011dc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d1c:	4b1c      	ldr	r3, [pc, #112]	; (8011d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8011d1e:	691b      	ldr	r3, [r3, #16]
 8011d20:	4a1b      	ldr	r2, [pc, #108]	; (8011d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8011d22:	f023 0306 	bic.w	r3, r3, #6
 8011d26:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	6812      	ldr	r2, [r2, #0]
 8011d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d3a:	f023 0301 	bic.w	r3, r3, #1
 8011d3e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fb fd7f 	bl	800d84a <USBD_LL_Resume>
    break;
 8011d4c:	e01c      	b.n	8011d88 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	6812      	ldr	r2, [r2, #0]
 8011d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d60:	f043 0301 	orr.w	r3, r3, #1
 8011d64:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7fb fd50 	bl	800d812 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6a1b      	ldr	r3, [r3, #32]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d005      	beq.n	8011d86 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d7a:	4b05      	ldr	r3, [pc, #20]	; (8011d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8011d7c:	691b      	ldr	r3, [r3, #16]
 8011d7e:	4a04      	ldr	r2, [pc, #16]	; (8011d90 <HAL_PCDEx_LPM_Callback+0x98>)
 8011d80:	f043 0306 	orr.w	r3, r3, #6
 8011d84:	6113      	str	r3, [r2, #16]
    break;
 8011d86:	bf00      	nop
}
 8011d88:	bf00      	nop
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	e000ed00 	.word	0xe000ed00

08011d94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d9c:	4b03      	ldr	r3, [pc, #12]	; (8011dac <USBD_static_malloc+0x18>)
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	370c      	adds	r7, #12
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	20011d54 	.word	0x20011d54

08011db0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]

}
 8011db8:	bf00      	nop
 8011dba:	370c      	adds	r7, #12
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr

08011dc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011dc8:	f7ef f8a4 	bl	8000f14 <SystemClock_Config>
}
 8011dcc:	bf00      	nop
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <malloc>:
 8011dd0:	4b02      	ldr	r3, [pc, #8]	; (8011ddc <malloc+0xc>)
 8011dd2:	4601      	mov	r1, r0
 8011dd4:	6818      	ldr	r0, [r3, #0]
 8011dd6:	f000 b823 	b.w	8011e20 <_malloc_r>
 8011dda:	bf00      	nop
 8011ddc:	20000164 	.word	0x20000164

08011de0 <sbrk_aligned>:
 8011de0:	b570      	push	{r4, r5, r6, lr}
 8011de2:	4e0e      	ldr	r6, [pc, #56]	; (8011e1c <sbrk_aligned+0x3c>)
 8011de4:	460c      	mov	r4, r1
 8011de6:	6831      	ldr	r1, [r6, #0]
 8011de8:	4605      	mov	r5, r0
 8011dea:	b911      	cbnz	r1, 8011df2 <sbrk_aligned+0x12>
 8011dec:	f001 f8a2 	bl	8012f34 <_sbrk_r>
 8011df0:	6030      	str	r0, [r6, #0]
 8011df2:	4621      	mov	r1, r4
 8011df4:	4628      	mov	r0, r5
 8011df6:	f001 f89d 	bl	8012f34 <_sbrk_r>
 8011dfa:	1c43      	adds	r3, r0, #1
 8011dfc:	d00a      	beq.n	8011e14 <sbrk_aligned+0x34>
 8011dfe:	1cc4      	adds	r4, r0, #3
 8011e00:	f024 0403 	bic.w	r4, r4, #3
 8011e04:	42a0      	cmp	r0, r4
 8011e06:	d007      	beq.n	8011e18 <sbrk_aligned+0x38>
 8011e08:	1a21      	subs	r1, r4, r0
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	f001 f892 	bl	8012f34 <_sbrk_r>
 8011e10:	3001      	adds	r0, #1
 8011e12:	d101      	bne.n	8011e18 <sbrk_aligned+0x38>
 8011e14:	f04f 34ff 	mov.w	r4, #4294967295
 8011e18:	4620      	mov	r0, r4
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	20011f78 	.word	0x20011f78

08011e20 <_malloc_r>:
 8011e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e24:	1ccd      	adds	r5, r1, #3
 8011e26:	f025 0503 	bic.w	r5, r5, #3
 8011e2a:	3508      	adds	r5, #8
 8011e2c:	2d0c      	cmp	r5, #12
 8011e2e:	bf38      	it	cc
 8011e30:	250c      	movcc	r5, #12
 8011e32:	2d00      	cmp	r5, #0
 8011e34:	4607      	mov	r7, r0
 8011e36:	db01      	blt.n	8011e3c <_malloc_r+0x1c>
 8011e38:	42a9      	cmp	r1, r5
 8011e3a:	d905      	bls.n	8011e48 <_malloc_r+0x28>
 8011e3c:	230c      	movs	r3, #12
 8011e3e:	603b      	str	r3, [r7, #0]
 8011e40:	2600      	movs	r6, #0
 8011e42:	4630      	mov	r0, r6
 8011e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011f1c <_malloc_r+0xfc>
 8011e4c:	f000 f868 	bl	8011f20 <__malloc_lock>
 8011e50:	f8d8 3000 	ldr.w	r3, [r8]
 8011e54:	461c      	mov	r4, r3
 8011e56:	bb5c      	cbnz	r4, 8011eb0 <_malloc_r+0x90>
 8011e58:	4629      	mov	r1, r5
 8011e5a:	4638      	mov	r0, r7
 8011e5c:	f7ff ffc0 	bl	8011de0 <sbrk_aligned>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	4604      	mov	r4, r0
 8011e64:	d155      	bne.n	8011f12 <_malloc_r+0xf2>
 8011e66:	f8d8 4000 	ldr.w	r4, [r8]
 8011e6a:	4626      	mov	r6, r4
 8011e6c:	2e00      	cmp	r6, #0
 8011e6e:	d145      	bne.n	8011efc <_malloc_r+0xdc>
 8011e70:	2c00      	cmp	r4, #0
 8011e72:	d048      	beq.n	8011f06 <_malloc_r+0xe6>
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	4631      	mov	r1, r6
 8011e78:	4638      	mov	r0, r7
 8011e7a:	eb04 0903 	add.w	r9, r4, r3
 8011e7e:	f001 f859 	bl	8012f34 <_sbrk_r>
 8011e82:	4581      	cmp	r9, r0
 8011e84:	d13f      	bne.n	8011f06 <_malloc_r+0xe6>
 8011e86:	6821      	ldr	r1, [r4, #0]
 8011e88:	1a6d      	subs	r5, r5, r1
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	f7ff ffa7 	bl	8011de0 <sbrk_aligned>
 8011e92:	3001      	adds	r0, #1
 8011e94:	d037      	beq.n	8011f06 <_malloc_r+0xe6>
 8011e96:	6823      	ldr	r3, [r4, #0]
 8011e98:	442b      	add	r3, r5
 8011e9a:	6023      	str	r3, [r4, #0]
 8011e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d038      	beq.n	8011f16 <_malloc_r+0xf6>
 8011ea4:	685a      	ldr	r2, [r3, #4]
 8011ea6:	42a2      	cmp	r2, r4
 8011ea8:	d12b      	bne.n	8011f02 <_malloc_r+0xe2>
 8011eaa:	2200      	movs	r2, #0
 8011eac:	605a      	str	r2, [r3, #4]
 8011eae:	e00f      	b.n	8011ed0 <_malloc_r+0xb0>
 8011eb0:	6822      	ldr	r2, [r4, #0]
 8011eb2:	1b52      	subs	r2, r2, r5
 8011eb4:	d41f      	bmi.n	8011ef6 <_malloc_r+0xd6>
 8011eb6:	2a0b      	cmp	r2, #11
 8011eb8:	d917      	bls.n	8011eea <_malloc_r+0xca>
 8011eba:	1961      	adds	r1, r4, r5
 8011ebc:	42a3      	cmp	r3, r4
 8011ebe:	6025      	str	r5, [r4, #0]
 8011ec0:	bf18      	it	ne
 8011ec2:	6059      	strne	r1, [r3, #4]
 8011ec4:	6863      	ldr	r3, [r4, #4]
 8011ec6:	bf08      	it	eq
 8011ec8:	f8c8 1000 	streq.w	r1, [r8]
 8011ecc:	5162      	str	r2, [r4, r5]
 8011ece:	604b      	str	r3, [r1, #4]
 8011ed0:	4638      	mov	r0, r7
 8011ed2:	f104 060b 	add.w	r6, r4, #11
 8011ed6:	f000 f829 	bl	8011f2c <__malloc_unlock>
 8011eda:	f026 0607 	bic.w	r6, r6, #7
 8011ede:	1d23      	adds	r3, r4, #4
 8011ee0:	1af2      	subs	r2, r6, r3
 8011ee2:	d0ae      	beq.n	8011e42 <_malloc_r+0x22>
 8011ee4:	1b9b      	subs	r3, r3, r6
 8011ee6:	50a3      	str	r3, [r4, r2]
 8011ee8:	e7ab      	b.n	8011e42 <_malloc_r+0x22>
 8011eea:	42a3      	cmp	r3, r4
 8011eec:	6862      	ldr	r2, [r4, #4]
 8011eee:	d1dd      	bne.n	8011eac <_malloc_r+0x8c>
 8011ef0:	f8c8 2000 	str.w	r2, [r8]
 8011ef4:	e7ec      	b.n	8011ed0 <_malloc_r+0xb0>
 8011ef6:	4623      	mov	r3, r4
 8011ef8:	6864      	ldr	r4, [r4, #4]
 8011efa:	e7ac      	b.n	8011e56 <_malloc_r+0x36>
 8011efc:	4634      	mov	r4, r6
 8011efe:	6876      	ldr	r6, [r6, #4]
 8011f00:	e7b4      	b.n	8011e6c <_malloc_r+0x4c>
 8011f02:	4613      	mov	r3, r2
 8011f04:	e7cc      	b.n	8011ea0 <_malloc_r+0x80>
 8011f06:	230c      	movs	r3, #12
 8011f08:	603b      	str	r3, [r7, #0]
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f000 f80e 	bl	8011f2c <__malloc_unlock>
 8011f10:	e797      	b.n	8011e42 <_malloc_r+0x22>
 8011f12:	6025      	str	r5, [r4, #0]
 8011f14:	e7dc      	b.n	8011ed0 <_malloc_r+0xb0>
 8011f16:	605b      	str	r3, [r3, #4]
 8011f18:	deff      	udf	#255	; 0xff
 8011f1a:	bf00      	nop
 8011f1c:	20011f74 	.word	0x20011f74

08011f20 <__malloc_lock>:
 8011f20:	4801      	ldr	r0, [pc, #4]	; (8011f28 <__malloc_lock+0x8>)
 8011f22:	f001 b853 	b.w	8012fcc <__retarget_lock_acquire_recursive>
 8011f26:	bf00      	nop
 8011f28:	200120bc 	.word	0x200120bc

08011f2c <__malloc_unlock>:
 8011f2c:	4801      	ldr	r0, [pc, #4]	; (8011f34 <__malloc_unlock+0x8>)
 8011f2e:	f001 b84e 	b.w	8012fce <__retarget_lock_release_recursive>
 8011f32:	bf00      	nop
 8011f34:	200120bc 	.word	0x200120bc

08011f38 <__cvt>:
 8011f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f3c:	ec55 4b10 	vmov	r4, r5, d0
 8011f40:	2d00      	cmp	r5, #0
 8011f42:	460e      	mov	r6, r1
 8011f44:	4619      	mov	r1, r3
 8011f46:	462b      	mov	r3, r5
 8011f48:	bfbb      	ittet	lt
 8011f4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f4e:	461d      	movlt	r5, r3
 8011f50:	2300      	movge	r3, #0
 8011f52:	232d      	movlt	r3, #45	; 0x2d
 8011f54:	700b      	strb	r3, [r1, #0]
 8011f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f5c:	4691      	mov	r9, r2
 8011f5e:	f023 0820 	bic.w	r8, r3, #32
 8011f62:	bfbc      	itt	lt
 8011f64:	4622      	movlt	r2, r4
 8011f66:	4614      	movlt	r4, r2
 8011f68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f6c:	d005      	beq.n	8011f7a <__cvt+0x42>
 8011f6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011f72:	d100      	bne.n	8011f76 <__cvt+0x3e>
 8011f74:	3601      	adds	r6, #1
 8011f76:	2102      	movs	r1, #2
 8011f78:	e000      	b.n	8011f7c <__cvt+0x44>
 8011f7a:	2103      	movs	r1, #3
 8011f7c:	ab03      	add	r3, sp, #12
 8011f7e:	9301      	str	r3, [sp, #4]
 8011f80:	ab02      	add	r3, sp, #8
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	ec45 4b10 	vmov	d0, r4, r5
 8011f88:	4653      	mov	r3, sl
 8011f8a:	4632      	mov	r2, r6
 8011f8c:	f001 f8bc 	bl	8013108 <_dtoa_r>
 8011f90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f94:	4607      	mov	r7, r0
 8011f96:	d102      	bne.n	8011f9e <__cvt+0x66>
 8011f98:	f019 0f01 	tst.w	r9, #1
 8011f9c:	d022      	beq.n	8011fe4 <__cvt+0xac>
 8011f9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fa2:	eb07 0906 	add.w	r9, r7, r6
 8011fa6:	d110      	bne.n	8011fca <__cvt+0x92>
 8011fa8:	783b      	ldrb	r3, [r7, #0]
 8011faa:	2b30      	cmp	r3, #48	; 0x30
 8011fac:	d10a      	bne.n	8011fc4 <__cvt+0x8c>
 8011fae:	2200      	movs	r2, #0
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	f7ee fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fba:	b918      	cbnz	r0, 8011fc4 <__cvt+0x8c>
 8011fbc:	f1c6 0601 	rsb	r6, r6, #1
 8011fc0:	f8ca 6000 	str.w	r6, [sl]
 8011fc4:	f8da 3000 	ldr.w	r3, [sl]
 8011fc8:	4499      	add	r9, r3
 8011fca:	2200      	movs	r2, #0
 8011fcc:	2300      	movs	r3, #0
 8011fce:	4620      	mov	r0, r4
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	f7ee fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fd6:	b108      	cbz	r0, 8011fdc <__cvt+0xa4>
 8011fd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8011fdc:	2230      	movs	r2, #48	; 0x30
 8011fde:	9b03      	ldr	r3, [sp, #12]
 8011fe0:	454b      	cmp	r3, r9
 8011fe2:	d307      	bcc.n	8011ff4 <__cvt+0xbc>
 8011fe4:	9b03      	ldr	r3, [sp, #12]
 8011fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fe8:	1bdb      	subs	r3, r3, r7
 8011fea:	4638      	mov	r0, r7
 8011fec:	6013      	str	r3, [r2, #0]
 8011fee:	b004      	add	sp, #16
 8011ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff4:	1c59      	adds	r1, r3, #1
 8011ff6:	9103      	str	r1, [sp, #12]
 8011ff8:	701a      	strb	r2, [r3, #0]
 8011ffa:	e7f0      	b.n	8011fde <__cvt+0xa6>

08011ffc <__exponent>:
 8011ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ffe:	4603      	mov	r3, r0
 8012000:	2900      	cmp	r1, #0
 8012002:	bfb8      	it	lt
 8012004:	4249      	neglt	r1, r1
 8012006:	f803 2b02 	strb.w	r2, [r3], #2
 801200a:	bfb4      	ite	lt
 801200c:	222d      	movlt	r2, #45	; 0x2d
 801200e:	222b      	movge	r2, #43	; 0x2b
 8012010:	2909      	cmp	r1, #9
 8012012:	7042      	strb	r2, [r0, #1]
 8012014:	dd2a      	ble.n	801206c <__exponent+0x70>
 8012016:	f10d 0207 	add.w	r2, sp, #7
 801201a:	4617      	mov	r7, r2
 801201c:	260a      	movs	r6, #10
 801201e:	4694      	mov	ip, r2
 8012020:	fb91 f5f6 	sdiv	r5, r1, r6
 8012024:	fb06 1415 	mls	r4, r6, r5, r1
 8012028:	3430      	adds	r4, #48	; 0x30
 801202a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801202e:	460c      	mov	r4, r1
 8012030:	2c63      	cmp	r4, #99	; 0x63
 8012032:	f102 32ff 	add.w	r2, r2, #4294967295
 8012036:	4629      	mov	r1, r5
 8012038:	dcf1      	bgt.n	801201e <__exponent+0x22>
 801203a:	3130      	adds	r1, #48	; 0x30
 801203c:	f1ac 0402 	sub.w	r4, ip, #2
 8012040:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012044:	1c41      	adds	r1, r0, #1
 8012046:	4622      	mov	r2, r4
 8012048:	42ba      	cmp	r2, r7
 801204a:	d30a      	bcc.n	8012062 <__exponent+0x66>
 801204c:	f10d 0209 	add.w	r2, sp, #9
 8012050:	eba2 020c 	sub.w	r2, r2, ip
 8012054:	42bc      	cmp	r4, r7
 8012056:	bf88      	it	hi
 8012058:	2200      	movhi	r2, #0
 801205a:	4413      	add	r3, r2
 801205c:	1a18      	subs	r0, r3, r0
 801205e:	b003      	add	sp, #12
 8012060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012062:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012066:	f801 5f01 	strb.w	r5, [r1, #1]!
 801206a:	e7ed      	b.n	8012048 <__exponent+0x4c>
 801206c:	2330      	movs	r3, #48	; 0x30
 801206e:	3130      	adds	r1, #48	; 0x30
 8012070:	7083      	strb	r3, [r0, #2]
 8012072:	70c1      	strb	r1, [r0, #3]
 8012074:	1d03      	adds	r3, r0, #4
 8012076:	e7f1      	b.n	801205c <__exponent+0x60>

08012078 <_printf_float>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	ed2d 8b02 	vpush	{d8}
 8012080:	b08d      	sub	sp, #52	; 0x34
 8012082:	460c      	mov	r4, r1
 8012084:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012088:	4616      	mov	r6, r2
 801208a:	461f      	mov	r7, r3
 801208c:	4605      	mov	r5, r0
 801208e:	f000 ff19 	bl	8012ec4 <_localeconv_r>
 8012092:	f8d0 a000 	ldr.w	sl, [r0]
 8012096:	4650      	mov	r0, sl
 8012098:	f7ee f8ea 	bl	8000270 <strlen>
 801209c:	2300      	movs	r3, #0
 801209e:	930a      	str	r3, [sp, #40]	; 0x28
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	9305      	str	r3, [sp, #20]
 80120a4:	f8d8 3000 	ldr.w	r3, [r8]
 80120a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80120ac:	3307      	adds	r3, #7
 80120ae:	f023 0307 	bic.w	r3, r3, #7
 80120b2:	f103 0208 	add.w	r2, r3, #8
 80120b6:	f8c8 2000 	str.w	r2, [r8]
 80120ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120c2:	9307      	str	r3, [sp, #28]
 80120c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80120c8:	ee08 0a10 	vmov	s16, r0
 80120cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80120d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120d4:	4b9e      	ldr	r3, [pc, #632]	; (8012350 <_printf_float+0x2d8>)
 80120d6:	f04f 32ff 	mov.w	r2, #4294967295
 80120da:	f7ee fd27 	bl	8000b2c <__aeabi_dcmpun>
 80120de:	bb88      	cbnz	r0, 8012144 <_printf_float+0xcc>
 80120e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120e4:	4b9a      	ldr	r3, [pc, #616]	; (8012350 <_printf_float+0x2d8>)
 80120e6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ea:	f7ee fd01 	bl	8000af0 <__aeabi_dcmple>
 80120ee:	bb48      	cbnz	r0, 8012144 <_printf_float+0xcc>
 80120f0:	2200      	movs	r2, #0
 80120f2:	2300      	movs	r3, #0
 80120f4:	4640      	mov	r0, r8
 80120f6:	4649      	mov	r1, r9
 80120f8:	f7ee fcf0 	bl	8000adc <__aeabi_dcmplt>
 80120fc:	b110      	cbz	r0, 8012104 <_printf_float+0x8c>
 80120fe:	232d      	movs	r3, #45	; 0x2d
 8012100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012104:	4a93      	ldr	r2, [pc, #588]	; (8012354 <_printf_float+0x2dc>)
 8012106:	4b94      	ldr	r3, [pc, #592]	; (8012358 <_printf_float+0x2e0>)
 8012108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801210c:	bf94      	ite	ls
 801210e:	4690      	movls	r8, r2
 8012110:	4698      	movhi	r8, r3
 8012112:	2303      	movs	r3, #3
 8012114:	6123      	str	r3, [r4, #16]
 8012116:	9b05      	ldr	r3, [sp, #20]
 8012118:	f023 0304 	bic.w	r3, r3, #4
 801211c:	6023      	str	r3, [r4, #0]
 801211e:	f04f 0900 	mov.w	r9, #0
 8012122:	9700      	str	r7, [sp, #0]
 8012124:	4633      	mov	r3, r6
 8012126:	aa0b      	add	r2, sp, #44	; 0x2c
 8012128:	4621      	mov	r1, r4
 801212a:	4628      	mov	r0, r5
 801212c:	f000 f9da 	bl	80124e4 <_printf_common>
 8012130:	3001      	adds	r0, #1
 8012132:	f040 8090 	bne.w	8012256 <_printf_float+0x1de>
 8012136:	f04f 30ff 	mov.w	r0, #4294967295
 801213a:	b00d      	add	sp, #52	; 0x34
 801213c:	ecbd 8b02 	vpop	{d8}
 8012140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012144:	4642      	mov	r2, r8
 8012146:	464b      	mov	r3, r9
 8012148:	4640      	mov	r0, r8
 801214a:	4649      	mov	r1, r9
 801214c:	f7ee fcee 	bl	8000b2c <__aeabi_dcmpun>
 8012150:	b140      	cbz	r0, 8012164 <_printf_float+0xec>
 8012152:	464b      	mov	r3, r9
 8012154:	2b00      	cmp	r3, #0
 8012156:	bfbc      	itt	lt
 8012158:	232d      	movlt	r3, #45	; 0x2d
 801215a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801215e:	4a7f      	ldr	r2, [pc, #508]	; (801235c <_printf_float+0x2e4>)
 8012160:	4b7f      	ldr	r3, [pc, #508]	; (8012360 <_printf_float+0x2e8>)
 8012162:	e7d1      	b.n	8012108 <_printf_float+0x90>
 8012164:	6863      	ldr	r3, [r4, #4]
 8012166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801216a:	9206      	str	r2, [sp, #24]
 801216c:	1c5a      	adds	r2, r3, #1
 801216e:	d13f      	bne.n	80121f0 <_printf_float+0x178>
 8012170:	2306      	movs	r3, #6
 8012172:	6063      	str	r3, [r4, #4]
 8012174:	9b05      	ldr	r3, [sp, #20]
 8012176:	6861      	ldr	r1, [r4, #4]
 8012178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801217c:	2300      	movs	r3, #0
 801217e:	9303      	str	r3, [sp, #12]
 8012180:	ab0a      	add	r3, sp, #40	; 0x28
 8012182:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012186:	ab09      	add	r3, sp, #36	; 0x24
 8012188:	ec49 8b10 	vmov	d0, r8, r9
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	6022      	str	r2, [r4, #0]
 8012190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012194:	4628      	mov	r0, r5
 8012196:	f7ff fecf 	bl	8011f38 <__cvt>
 801219a:	9b06      	ldr	r3, [sp, #24]
 801219c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801219e:	2b47      	cmp	r3, #71	; 0x47
 80121a0:	4680      	mov	r8, r0
 80121a2:	d108      	bne.n	80121b6 <_printf_float+0x13e>
 80121a4:	1cc8      	adds	r0, r1, #3
 80121a6:	db02      	blt.n	80121ae <_printf_float+0x136>
 80121a8:	6863      	ldr	r3, [r4, #4]
 80121aa:	4299      	cmp	r1, r3
 80121ac:	dd41      	ble.n	8012232 <_printf_float+0x1ba>
 80121ae:	f1ab 0302 	sub.w	r3, fp, #2
 80121b2:	fa5f fb83 	uxtb.w	fp, r3
 80121b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121ba:	d820      	bhi.n	80121fe <_printf_float+0x186>
 80121bc:	3901      	subs	r1, #1
 80121be:	465a      	mov	r2, fp
 80121c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121c4:	9109      	str	r1, [sp, #36]	; 0x24
 80121c6:	f7ff ff19 	bl	8011ffc <__exponent>
 80121ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121cc:	1813      	adds	r3, r2, r0
 80121ce:	2a01      	cmp	r2, #1
 80121d0:	4681      	mov	r9, r0
 80121d2:	6123      	str	r3, [r4, #16]
 80121d4:	dc02      	bgt.n	80121dc <_printf_float+0x164>
 80121d6:	6822      	ldr	r2, [r4, #0]
 80121d8:	07d2      	lsls	r2, r2, #31
 80121da:	d501      	bpl.n	80121e0 <_printf_float+0x168>
 80121dc:	3301      	adds	r3, #1
 80121de:	6123      	str	r3, [r4, #16]
 80121e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d09c      	beq.n	8012122 <_printf_float+0xaa>
 80121e8:	232d      	movs	r3, #45	; 0x2d
 80121ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121ee:	e798      	b.n	8012122 <_printf_float+0xaa>
 80121f0:	9a06      	ldr	r2, [sp, #24]
 80121f2:	2a47      	cmp	r2, #71	; 0x47
 80121f4:	d1be      	bne.n	8012174 <_printf_float+0xfc>
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1bc      	bne.n	8012174 <_printf_float+0xfc>
 80121fa:	2301      	movs	r3, #1
 80121fc:	e7b9      	b.n	8012172 <_printf_float+0xfa>
 80121fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012202:	d118      	bne.n	8012236 <_printf_float+0x1be>
 8012204:	2900      	cmp	r1, #0
 8012206:	6863      	ldr	r3, [r4, #4]
 8012208:	dd0b      	ble.n	8012222 <_printf_float+0x1aa>
 801220a:	6121      	str	r1, [r4, #16]
 801220c:	b913      	cbnz	r3, 8012214 <_printf_float+0x19c>
 801220e:	6822      	ldr	r2, [r4, #0]
 8012210:	07d0      	lsls	r0, r2, #31
 8012212:	d502      	bpl.n	801221a <_printf_float+0x1a2>
 8012214:	3301      	adds	r3, #1
 8012216:	440b      	add	r3, r1
 8012218:	6123      	str	r3, [r4, #16]
 801221a:	65a1      	str	r1, [r4, #88]	; 0x58
 801221c:	f04f 0900 	mov.w	r9, #0
 8012220:	e7de      	b.n	80121e0 <_printf_float+0x168>
 8012222:	b913      	cbnz	r3, 801222a <_printf_float+0x1b2>
 8012224:	6822      	ldr	r2, [r4, #0]
 8012226:	07d2      	lsls	r2, r2, #31
 8012228:	d501      	bpl.n	801222e <_printf_float+0x1b6>
 801222a:	3302      	adds	r3, #2
 801222c:	e7f4      	b.n	8012218 <_printf_float+0x1a0>
 801222e:	2301      	movs	r3, #1
 8012230:	e7f2      	b.n	8012218 <_printf_float+0x1a0>
 8012232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012238:	4299      	cmp	r1, r3
 801223a:	db05      	blt.n	8012248 <_printf_float+0x1d0>
 801223c:	6823      	ldr	r3, [r4, #0]
 801223e:	6121      	str	r1, [r4, #16]
 8012240:	07d8      	lsls	r0, r3, #31
 8012242:	d5ea      	bpl.n	801221a <_printf_float+0x1a2>
 8012244:	1c4b      	adds	r3, r1, #1
 8012246:	e7e7      	b.n	8012218 <_printf_float+0x1a0>
 8012248:	2900      	cmp	r1, #0
 801224a:	bfd4      	ite	le
 801224c:	f1c1 0202 	rsble	r2, r1, #2
 8012250:	2201      	movgt	r2, #1
 8012252:	4413      	add	r3, r2
 8012254:	e7e0      	b.n	8012218 <_printf_float+0x1a0>
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	055a      	lsls	r2, r3, #21
 801225a:	d407      	bmi.n	801226c <_printf_float+0x1f4>
 801225c:	6923      	ldr	r3, [r4, #16]
 801225e:	4642      	mov	r2, r8
 8012260:	4631      	mov	r1, r6
 8012262:	4628      	mov	r0, r5
 8012264:	47b8      	blx	r7
 8012266:	3001      	adds	r0, #1
 8012268:	d12c      	bne.n	80122c4 <_printf_float+0x24c>
 801226a:	e764      	b.n	8012136 <_printf_float+0xbe>
 801226c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012270:	f240 80e0 	bls.w	8012434 <_printf_float+0x3bc>
 8012274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012278:	2200      	movs	r2, #0
 801227a:	2300      	movs	r3, #0
 801227c:	f7ee fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8012280:	2800      	cmp	r0, #0
 8012282:	d034      	beq.n	80122ee <_printf_float+0x276>
 8012284:	4a37      	ldr	r2, [pc, #220]	; (8012364 <_printf_float+0x2ec>)
 8012286:	2301      	movs	r3, #1
 8012288:	4631      	mov	r1, r6
 801228a:	4628      	mov	r0, r5
 801228c:	47b8      	blx	r7
 801228e:	3001      	adds	r0, #1
 8012290:	f43f af51 	beq.w	8012136 <_printf_float+0xbe>
 8012294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012298:	429a      	cmp	r2, r3
 801229a:	db02      	blt.n	80122a2 <_printf_float+0x22a>
 801229c:	6823      	ldr	r3, [r4, #0]
 801229e:	07d8      	lsls	r0, r3, #31
 80122a0:	d510      	bpl.n	80122c4 <_printf_float+0x24c>
 80122a2:	ee18 3a10 	vmov	r3, s16
 80122a6:	4652      	mov	r2, sl
 80122a8:	4631      	mov	r1, r6
 80122aa:	4628      	mov	r0, r5
 80122ac:	47b8      	blx	r7
 80122ae:	3001      	adds	r0, #1
 80122b0:	f43f af41 	beq.w	8012136 <_printf_float+0xbe>
 80122b4:	f04f 0800 	mov.w	r8, #0
 80122b8:	f104 091a 	add.w	r9, r4, #26
 80122bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122be:	3b01      	subs	r3, #1
 80122c0:	4543      	cmp	r3, r8
 80122c2:	dc09      	bgt.n	80122d8 <_printf_float+0x260>
 80122c4:	6823      	ldr	r3, [r4, #0]
 80122c6:	079b      	lsls	r3, r3, #30
 80122c8:	f100 8107 	bmi.w	80124da <_printf_float+0x462>
 80122cc:	68e0      	ldr	r0, [r4, #12]
 80122ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122d0:	4298      	cmp	r0, r3
 80122d2:	bfb8      	it	lt
 80122d4:	4618      	movlt	r0, r3
 80122d6:	e730      	b.n	801213a <_printf_float+0xc2>
 80122d8:	2301      	movs	r3, #1
 80122da:	464a      	mov	r2, r9
 80122dc:	4631      	mov	r1, r6
 80122de:	4628      	mov	r0, r5
 80122e0:	47b8      	blx	r7
 80122e2:	3001      	adds	r0, #1
 80122e4:	f43f af27 	beq.w	8012136 <_printf_float+0xbe>
 80122e8:	f108 0801 	add.w	r8, r8, #1
 80122ec:	e7e6      	b.n	80122bc <_printf_float+0x244>
 80122ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	dc39      	bgt.n	8012368 <_printf_float+0x2f0>
 80122f4:	4a1b      	ldr	r2, [pc, #108]	; (8012364 <_printf_float+0x2ec>)
 80122f6:	2301      	movs	r3, #1
 80122f8:	4631      	mov	r1, r6
 80122fa:	4628      	mov	r0, r5
 80122fc:	47b8      	blx	r7
 80122fe:	3001      	adds	r0, #1
 8012300:	f43f af19 	beq.w	8012136 <_printf_float+0xbe>
 8012304:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012308:	4313      	orrs	r3, r2
 801230a:	d102      	bne.n	8012312 <_printf_float+0x29a>
 801230c:	6823      	ldr	r3, [r4, #0]
 801230e:	07d9      	lsls	r1, r3, #31
 8012310:	d5d8      	bpl.n	80122c4 <_printf_float+0x24c>
 8012312:	ee18 3a10 	vmov	r3, s16
 8012316:	4652      	mov	r2, sl
 8012318:	4631      	mov	r1, r6
 801231a:	4628      	mov	r0, r5
 801231c:	47b8      	blx	r7
 801231e:	3001      	adds	r0, #1
 8012320:	f43f af09 	beq.w	8012136 <_printf_float+0xbe>
 8012324:	f04f 0900 	mov.w	r9, #0
 8012328:	f104 0a1a 	add.w	sl, r4, #26
 801232c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801232e:	425b      	negs	r3, r3
 8012330:	454b      	cmp	r3, r9
 8012332:	dc01      	bgt.n	8012338 <_printf_float+0x2c0>
 8012334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012336:	e792      	b.n	801225e <_printf_float+0x1e6>
 8012338:	2301      	movs	r3, #1
 801233a:	4652      	mov	r2, sl
 801233c:	4631      	mov	r1, r6
 801233e:	4628      	mov	r0, r5
 8012340:	47b8      	blx	r7
 8012342:	3001      	adds	r0, #1
 8012344:	f43f aef7 	beq.w	8012136 <_printf_float+0xbe>
 8012348:	f109 0901 	add.w	r9, r9, #1
 801234c:	e7ee      	b.n	801232c <_printf_float+0x2b4>
 801234e:	bf00      	nop
 8012350:	7fefffff 	.word	0x7fefffff
 8012354:	08016990 	.word	0x08016990
 8012358:	08016994 	.word	0x08016994
 801235c:	08016998 	.word	0x08016998
 8012360:	0801699c 	.word	0x0801699c
 8012364:	080169a0 	.word	0x080169a0
 8012368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801236a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801236c:	429a      	cmp	r2, r3
 801236e:	bfa8      	it	ge
 8012370:	461a      	movge	r2, r3
 8012372:	2a00      	cmp	r2, #0
 8012374:	4691      	mov	r9, r2
 8012376:	dc37      	bgt.n	80123e8 <_printf_float+0x370>
 8012378:	f04f 0b00 	mov.w	fp, #0
 801237c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012380:	f104 021a 	add.w	r2, r4, #26
 8012384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012386:	9305      	str	r3, [sp, #20]
 8012388:	eba3 0309 	sub.w	r3, r3, r9
 801238c:	455b      	cmp	r3, fp
 801238e:	dc33      	bgt.n	80123f8 <_printf_float+0x380>
 8012390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012394:	429a      	cmp	r2, r3
 8012396:	db3b      	blt.n	8012410 <_printf_float+0x398>
 8012398:	6823      	ldr	r3, [r4, #0]
 801239a:	07da      	lsls	r2, r3, #31
 801239c:	d438      	bmi.n	8012410 <_printf_float+0x398>
 801239e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80123a2:	eba2 0903 	sub.w	r9, r2, r3
 80123a6:	9b05      	ldr	r3, [sp, #20]
 80123a8:	1ad2      	subs	r2, r2, r3
 80123aa:	4591      	cmp	r9, r2
 80123ac:	bfa8      	it	ge
 80123ae:	4691      	movge	r9, r2
 80123b0:	f1b9 0f00 	cmp.w	r9, #0
 80123b4:	dc35      	bgt.n	8012422 <_printf_float+0x3aa>
 80123b6:	f04f 0800 	mov.w	r8, #0
 80123ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123be:	f104 0a1a 	add.w	sl, r4, #26
 80123c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123c6:	1a9b      	subs	r3, r3, r2
 80123c8:	eba3 0309 	sub.w	r3, r3, r9
 80123cc:	4543      	cmp	r3, r8
 80123ce:	f77f af79 	ble.w	80122c4 <_printf_float+0x24c>
 80123d2:	2301      	movs	r3, #1
 80123d4:	4652      	mov	r2, sl
 80123d6:	4631      	mov	r1, r6
 80123d8:	4628      	mov	r0, r5
 80123da:	47b8      	blx	r7
 80123dc:	3001      	adds	r0, #1
 80123de:	f43f aeaa 	beq.w	8012136 <_printf_float+0xbe>
 80123e2:	f108 0801 	add.w	r8, r8, #1
 80123e6:	e7ec      	b.n	80123c2 <_printf_float+0x34a>
 80123e8:	4613      	mov	r3, r2
 80123ea:	4631      	mov	r1, r6
 80123ec:	4642      	mov	r2, r8
 80123ee:	4628      	mov	r0, r5
 80123f0:	47b8      	blx	r7
 80123f2:	3001      	adds	r0, #1
 80123f4:	d1c0      	bne.n	8012378 <_printf_float+0x300>
 80123f6:	e69e      	b.n	8012136 <_printf_float+0xbe>
 80123f8:	2301      	movs	r3, #1
 80123fa:	4631      	mov	r1, r6
 80123fc:	4628      	mov	r0, r5
 80123fe:	9205      	str	r2, [sp, #20]
 8012400:	47b8      	blx	r7
 8012402:	3001      	adds	r0, #1
 8012404:	f43f ae97 	beq.w	8012136 <_printf_float+0xbe>
 8012408:	9a05      	ldr	r2, [sp, #20]
 801240a:	f10b 0b01 	add.w	fp, fp, #1
 801240e:	e7b9      	b.n	8012384 <_printf_float+0x30c>
 8012410:	ee18 3a10 	vmov	r3, s16
 8012414:	4652      	mov	r2, sl
 8012416:	4631      	mov	r1, r6
 8012418:	4628      	mov	r0, r5
 801241a:	47b8      	blx	r7
 801241c:	3001      	adds	r0, #1
 801241e:	d1be      	bne.n	801239e <_printf_float+0x326>
 8012420:	e689      	b.n	8012136 <_printf_float+0xbe>
 8012422:	9a05      	ldr	r2, [sp, #20]
 8012424:	464b      	mov	r3, r9
 8012426:	4442      	add	r2, r8
 8012428:	4631      	mov	r1, r6
 801242a:	4628      	mov	r0, r5
 801242c:	47b8      	blx	r7
 801242e:	3001      	adds	r0, #1
 8012430:	d1c1      	bne.n	80123b6 <_printf_float+0x33e>
 8012432:	e680      	b.n	8012136 <_printf_float+0xbe>
 8012434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012436:	2a01      	cmp	r2, #1
 8012438:	dc01      	bgt.n	801243e <_printf_float+0x3c6>
 801243a:	07db      	lsls	r3, r3, #31
 801243c:	d53a      	bpl.n	80124b4 <_printf_float+0x43c>
 801243e:	2301      	movs	r3, #1
 8012440:	4642      	mov	r2, r8
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	47b8      	blx	r7
 8012448:	3001      	adds	r0, #1
 801244a:	f43f ae74 	beq.w	8012136 <_printf_float+0xbe>
 801244e:	ee18 3a10 	vmov	r3, s16
 8012452:	4652      	mov	r2, sl
 8012454:	4631      	mov	r1, r6
 8012456:	4628      	mov	r0, r5
 8012458:	47b8      	blx	r7
 801245a:	3001      	adds	r0, #1
 801245c:	f43f ae6b 	beq.w	8012136 <_printf_float+0xbe>
 8012460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012464:	2200      	movs	r2, #0
 8012466:	2300      	movs	r3, #0
 8012468:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801246c:	f7ee fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012470:	b9d8      	cbnz	r0, 80124aa <_printf_float+0x432>
 8012472:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012476:	f108 0201 	add.w	r2, r8, #1
 801247a:	4631      	mov	r1, r6
 801247c:	4628      	mov	r0, r5
 801247e:	47b8      	blx	r7
 8012480:	3001      	adds	r0, #1
 8012482:	d10e      	bne.n	80124a2 <_printf_float+0x42a>
 8012484:	e657      	b.n	8012136 <_printf_float+0xbe>
 8012486:	2301      	movs	r3, #1
 8012488:	4652      	mov	r2, sl
 801248a:	4631      	mov	r1, r6
 801248c:	4628      	mov	r0, r5
 801248e:	47b8      	blx	r7
 8012490:	3001      	adds	r0, #1
 8012492:	f43f ae50 	beq.w	8012136 <_printf_float+0xbe>
 8012496:	f108 0801 	add.w	r8, r8, #1
 801249a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801249c:	3b01      	subs	r3, #1
 801249e:	4543      	cmp	r3, r8
 80124a0:	dcf1      	bgt.n	8012486 <_printf_float+0x40e>
 80124a2:	464b      	mov	r3, r9
 80124a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80124a8:	e6da      	b.n	8012260 <_printf_float+0x1e8>
 80124aa:	f04f 0800 	mov.w	r8, #0
 80124ae:	f104 0a1a 	add.w	sl, r4, #26
 80124b2:	e7f2      	b.n	801249a <_printf_float+0x422>
 80124b4:	2301      	movs	r3, #1
 80124b6:	4642      	mov	r2, r8
 80124b8:	e7df      	b.n	801247a <_printf_float+0x402>
 80124ba:	2301      	movs	r3, #1
 80124bc:	464a      	mov	r2, r9
 80124be:	4631      	mov	r1, r6
 80124c0:	4628      	mov	r0, r5
 80124c2:	47b8      	blx	r7
 80124c4:	3001      	adds	r0, #1
 80124c6:	f43f ae36 	beq.w	8012136 <_printf_float+0xbe>
 80124ca:	f108 0801 	add.w	r8, r8, #1
 80124ce:	68e3      	ldr	r3, [r4, #12]
 80124d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80124d2:	1a5b      	subs	r3, r3, r1
 80124d4:	4543      	cmp	r3, r8
 80124d6:	dcf0      	bgt.n	80124ba <_printf_float+0x442>
 80124d8:	e6f8      	b.n	80122cc <_printf_float+0x254>
 80124da:	f04f 0800 	mov.w	r8, #0
 80124de:	f104 0919 	add.w	r9, r4, #25
 80124e2:	e7f4      	b.n	80124ce <_printf_float+0x456>

080124e4 <_printf_common>:
 80124e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124e8:	4616      	mov	r6, r2
 80124ea:	4699      	mov	r9, r3
 80124ec:	688a      	ldr	r2, [r1, #8]
 80124ee:	690b      	ldr	r3, [r1, #16]
 80124f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124f4:	4293      	cmp	r3, r2
 80124f6:	bfb8      	it	lt
 80124f8:	4613      	movlt	r3, r2
 80124fa:	6033      	str	r3, [r6, #0]
 80124fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012500:	4607      	mov	r7, r0
 8012502:	460c      	mov	r4, r1
 8012504:	b10a      	cbz	r2, 801250a <_printf_common+0x26>
 8012506:	3301      	adds	r3, #1
 8012508:	6033      	str	r3, [r6, #0]
 801250a:	6823      	ldr	r3, [r4, #0]
 801250c:	0699      	lsls	r1, r3, #26
 801250e:	bf42      	ittt	mi
 8012510:	6833      	ldrmi	r3, [r6, #0]
 8012512:	3302      	addmi	r3, #2
 8012514:	6033      	strmi	r3, [r6, #0]
 8012516:	6825      	ldr	r5, [r4, #0]
 8012518:	f015 0506 	ands.w	r5, r5, #6
 801251c:	d106      	bne.n	801252c <_printf_common+0x48>
 801251e:	f104 0a19 	add.w	sl, r4, #25
 8012522:	68e3      	ldr	r3, [r4, #12]
 8012524:	6832      	ldr	r2, [r6, #0]
 8012526:	1a9b      	subs	r3, r3, r2
 8012528:	42ab      	cmp	r3, r5
 801252a:	dc26      	bgt.n	801257a <_printf_common+0x96>
 801252c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012530:	1e13      	subs	r3, r2, #0
 8012532:	6822      	ldr	r2, [r4, #0]
 8012534:	bf18      	it	ne
 8012536:	2301      	movne	r3, #1
 8012538:	0692      	lsls	r2, r2, #26
 801253a:	d42b      	bmi.n	8012594 <_printf_common+0xb0>
 801253c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012540:	4649      	mov	r1, r9
 8012542:	4638      	mov	r0, r7
 8012544:	47c0      	blx	r8
 8012546:	3001      	adds	r0, #1
 8012548:	d01e      	beq.n	8012588 <_printf_common+0xa4>
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	6922      	ldr	r2, [r4, #16]
 801254e:	f003 0306 	and.w	r3, r3, #6
 8012552:	2b04      	cmp	r3, #4
 8012554:	bf02      	ittt	eq
 8012556:	68e5      	ldreq	r5, [r4, #12]
 8012558:	6833      	ldreq	r3, [r6, #0]
 801255a:	1aed      	subeq	r5, r5, r3
 801255c:	68a3      	ldr	r3, [r4, #8]
 801255e:	bf0c      	ite	eq
 8012560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012564:	2500      	movne	r5, #0
 8012566:	4293      	cmp	r3, r2
 8012568:	bfc4      	itt	gt
 801256a:	1a9b      	subgt	r3, r3, r2
 801256c:	18ed      	addgt	r5, r5, r3
 801256e:	2600      	movs	r6, #0
 8012570:	341a      	adds	r4, #26
 8012572:	42b5      	cmp	r5, r6
 8012574:	d11a      	bne.n	80125ac <_printf_common+0xc8>
 8012576:	2000      	movs	r0, #0
 8012578:	e008      	b.n	801258c <_printf_common+0xa8>
 801257a:	2301      	movs	r3, #1
 801257c:	4652      	mov	r2, sl
 801257e:	4649      	mov	r1, r9
 8012580:	4638      	mov	r0, r7
 8012582:	47c0      	blx	r8
 8012584:	3001      	adds	r0, #1
 8012586:	d103      	bne.n	8012590 <_printf_common+0xac>
 8012588:	f04f 30ff 	mov.w	r0, #4294967295
 801258c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012590:	3501      	adds	r5, #1
 8012592:	e7c6      	b.n	8012522 <_printf_common+0x3e>
 8012594:	18e1      	adds	r1, r4, r3
 8012596:	1c5a      	adds	r2, r3, #1
 8012598:	2030      	movs	r0, #48	; 0x30
 801259a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801259e:	4422      	add	r2, r4
 80125a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125a8:	3302      	adds	r3, #2
 80125aa:	e7c7      	b.n	801253c <_printf_common+0x58>
 80125ac:	2301      	movs	r3, #1
 80125ae:	4622      	mov	r2, r4
 80125b0:	4649      	mov	r1, r9
 80125b2:	4638      	mov	r0, r7
 80125b4:	47c0      	blx	r8
 80125b6:	3001      	adds	r0, #1
 80125b8:	d0e6      	beq.n	8012588 <_printf_common+0xa4>
 80125ba:	3601      	adds	r6, #1
 80125bc:	e7d9      	b.n	8012572 <_printf_common+0x8e>
	...

080125c0 <_printf_i>:
 80125c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125c4:	7e0f      	ldrb	r7, [r1, #24]
 80125c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125c8:	2f78      	cmp	r7, #120	; 0x78
 80125ca:	4691      	mov	r9, r2
 80125cc:	4680      	mov	r8, r0
 80125ce:	460c      	mov	r4, r1
 80125d0:	469a      	mov	sl, r3
 80125d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80125d6:	d807      	bhi.n	80125e8 <_printf_i+0x28>
 80125d8:	2f62      	cmp	r7, #98	; 0x62
 80125da:	d80a      	bhi.n	80125f2 <_printf_i+0x32>
 80125dc:	2f00      	cmp	r7, #0
 80125de:	f000 80d4 	beq.w	801278a <_printf_i+0x1ca>
 80125e2:	2f58      	cmp	r7, #88	; 0x58
 80125e4:	f000 80c0 	beq.w	8012768 <_printf_i+0x1a8>
 80125e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125f0:	e03a      	b.n	8012668 <_printf_i+0xa8>
 80125f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125f6:	2b15      	cmp	r3, #21
 80125f8:	d8f6      	bhi.n	80125e8 <_printf_i+0x28>
 80125fa:	a101      	add	r1, pc, #4	; (adr r1, 8012600 <_printf_i+0x40>)
 80125fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012600:	08012659 	.word	0x08012659
 8012604:	0801266d 	.word	0x0801266d
 8012608:	080125e9 	.word	0x080125e9
 801260c:	080125e9 	.word	0x080125e9
 8012610:	080125e9 	.word	0x080125e9
 8012614:	080125e9 	.word	0x080125e9
 8012618:	0801266d 	.word	0x0801266d
 801261c:	080125e9 	.word	0x080125e9
 8012620:	080125e9 	.word	0x080125e9
 8012624:	080125e9 	.word	0x080125e9
 8012628:	080125e9 	.word	0x080125e9
 801262c:	08012771 	.word	0x08012771
 8012630:	08012699 	.word	0x08012699
 8012634:	0801272b 	.word	0x0801272b
 8012638:	080125e9 	.word	0x080125e9
 801263c:	080125e9 	.word	0x080125e9
 8012640:	08012793 	.word	0x08012793
 8012644:	080125e9 	.word	0x080125e9
 8012648:	08012699 	.word	0x08012699
 801264c:	080125e9 	.word	0x080125e9
 8012650:	080125e9 	.word	0x080125e9
 8012654:	08012733 	.word	0x08012733
 8012658:	682b      	ldr	r3, [r5, #0]
 801265a:	1d1a      	adds	r2, r3, #4
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	602a      	str	r2, [r5, #0]
 8012660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012668:	2301      	movs	r3, #1
 801266a:	e09f      	b.n	80127ac <_printf_i+0x1ec>
 801266c:	6820      	ldr	r0, [r4, #0]
 801266e:	682b      	ldr	r3, [r5, #0]
 8012670:	0607      	lsls	r7, r0, #24
 8012672:	f103 0104 	add.w	r1, r3, #4
 8012676:	6029      	str	r1, [r5, #0]
 8012678:	d501      	bpl.n	801267e <_printf_i+0xbe>
 801267a:	681e      	ldr	r6, [r3, #0]
 801267c:	e003      	b.n	8012686 <_printf_i+0xc6>
 801267e:	0646      	lsls	r6, r0, #25
 8012680:	d5fb      	bpl.n	801267a <_printf_i+0xba>
 8012682:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012686:	2e00      	cmp	r6, #0
 8012688:	da03      	bge.n	8012692 <_printf_i+0xd2>
 801268a:	232d      	movs	r3, #45	; 0x2d
 801268c:	4276      	negs	r6, r6
 801268e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012692:	485a      	ldr	r0, [pc, #360]	; (80127fc <_printf_i+0x23c>)
 8012694:	230a      	movs	r3, #10
 8012696:	e012      	b.n	80126be <_printf_i+0xfe>
 8012698:	682b      	ldr	r3, [r5, #0]
 801269a:	6820      	ldr	r0, [r4, #0]
 801269c:	1d19      	adds	r1, r3, #4
 801269e:	6029      	str	r1, [r5, #0]
 80126a0:	0605      	lsls	r5, r0, #24
 80126a2:	d501      	bpl.n	80126a8 <_printf_i+0xe8>
 80126a4:	681e      	ldr	r6, [r3, #0]
 80126a6:	e002      	b.n	80126ae <_printf_i+0xee>
 80126a8:	0641      	lsls	r1, r0, #25
 80126aa:	d5fb      	bpl.n	80126a4 <_printf_i+0xe4>
 80126ac:	881e      	ldrh	r6, [r3, #0]
 80126ae:	4853      	ldr	r0, [pc, #332]	; (80127fc <_printf_i+0x23c>)
 80126b0:	2f6f      	cmp	r7, #111	; 0x6f
 80126b2:	bf0c      	ite	eq
 80126b4:	2308      	moveq	r3, #8
 80126b6:	230a      	movne	r3, #10
 80126b8:	2100      	movs	r1, #0
 80126ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126be:	6865      	ldr	r5, [r4, #4]
 80126c0:	60a5      	str	r5, [r4, #8]
 80126c2:	2d00      	cmp	r5, #0
 80126c4:	bfa2      	ittt	ge
 80126c6:	6821      	ldrge	r1, [r4, #0]
 80126c8:	f021 0104 	bicge.w	r1, r1, #4
 80126cc:	6021      	strge	r1, [r4, #0]
 80126ce:	b90e      	cbnz	r6, 80126d4 <_printf_i+0x114>
 80126d0:	2d00      	cmp	r5, #0
 80126d2:	d04b      	beq.n	801276c <_printf_i+0x1ac>
 80126d4:	4615      	mov	r5, r2
 80126d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80126da:	fb03 6711 	mls	r7, r3, r1, r6
 80126de:	5dc7      	ldrb	r7, [r0, r7]
 80126e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80126e4:	4637      	mov	r7, r6
 80126e6:	42bb      	cmp	r3, r7
 80126e8:	460e      	mov	r6, r1
 80126ea:	d9f4      	bls.n	80126d6 <_printf_i+0x116>
 80126ec:	2b08      	cmp	r3, #8
 80126ee:	d10b      	bne.n	8012708 <_printf_i+0x148>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	07de      	lsls	r6, r3, #31
 80126f4:	d508      	bpl.n	8012708 <_printf_i+0x148>
 80126f6:	6923      	ldr	r3, [r4, #16]
 80126f8:	6861      	ldr	r1, [r4, #4]
 80126fa:	4299      	cmp	r1, r3
 80126fc:	bfde      	ittt	le
 80126fe:	2330      	movle	r3, #48	; 0x30
 8012700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012704:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012708:	1b52      	subs	r2, r2, r5
 801270a:	6122      	str	r2, [r4, #16]
 801270c:	f8cd a000 	str.w	sl, [sp]
 8012710:	464b      	mov	r3, r9
 8012712:	aa03      	add	r2, sp, #12
 8012714:	4621      	mov	r1, r4
 8012716:	4640      	mov	r0, r8
 8012718:	f7ff fee4 	bl	80124e4 <_printf_common>
 801271c:	3001      	adds	r0, #1
 801271e:	d14a      	bne.n	80127b6 <_printf_i+0x1f6>
 8012720:	f04f 30ff 	mov.w	r0, #4294967295
 8012724:	b004      	add	sp, #16
 8012726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	f043 0320 	orr.w	r3, r3, #32
 8012730:	6023      	str	r3, [r4, #0]
 8012732:	4833      	ldr	r0, [pc, #204]	; (8012800 <_printf_i+0x240>)
 8012734:	2778      	movs	r7, #120	; 0x78
 8012736:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801273a:	6823      	ldr	r3, [r4, #0]
 801273c:	6829      	ldr	r1, [r5, #0]
 801273e:	061f      	lsls	r7, r3, #24
 8012740:	f851 6b04 	ldr.w	r6, [r1], #4
 8012744:	d402      	bmi.n	801274c <_printf_i+0x18c>
 8012746:	065f      	lsls	r7, r3, #25
 8012748:	bf48      	it	mi
 801274a:	b2b6      	uxthmi	r6, r6
 801274c:	07df      	lsls	r7, r3, #31
 801274e:	bf48      	it	mi
 8012750:	f043 0320 	orrmi.w	r3, r3, #32
 8012754:	6029      	str	r1, [r5, #0]
 8012756:	bf48      	it	mi
 8012758:	6023      	strmi	r3, [r4, #0]
 801275a:	b91e      	cbnz	r6, 8012764 <_printf_i+0x1a4>
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	f023 0320 	bic.w	r3, r3, #32
 8012762:	6023      	str	r3, [r4, #0]
 8012764:	2310      	movs	r3, #16
 8012766:	e7a7      	b.n	80126b8 <_printf_i+0xf8>
 8012768:	4824      	ldr	r0, [pc, #144]	; (80127fc <_printf_i+0x23c>)
 801276a:	e7e4      	b.n	8012736 <_printf_i+0x176>
 801276c:	4615      	mov	r5, r2
 801276e:	e7bd      	b.n	80126ec <_printf_i+0x12c>
 8012770:	682b      	ldr	r3, [r5, #0]
 8012772:	6826      	ldr	r6, [r4, #0]
 8012774:	6961      	ldr	r1, [r4, #20]
 8012776:	1d18      	adds	r0, r3, #4
 8012778:	6028      	str	r0, [r5, #0]
 801277a:	0635      	lsls	r5, r6, #24
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	d501      	bpl.n	8012784 <_printf_i+0x1c4>
 8012780:	6019      	str	r1, [r3, #0]
 8012782:	e002      	b.n	801278a <_printf_i+0x1ca>
 8012784:	0670      	lsls	r0, r6, #25
 8012786:	d5fb      	bpl.n	8012780 <_printf_i+0x1c0>
 8012788:	8019      	strh	r1, [r3, #0]
 801278a:	2300      	movs	r3, #0
 801278c:	6123      	str	r3, [r4, #16]
 801278e:	4615      	mov	r5, r2
 8012790:	e7bc      	b.n	801270c <_printf_i+0x14c>
 8012792:	682b      	ldr	r3, [r5, #0]
 8012794:	1d1a      	adds	r2, r3, #4
 8012796:	602a      	str	r2, [r5, #0]
 8012798:	681d      	ldr	r5, [r3, #0]
 801279a:	6862      	ldr	r2, [r4, #4]
 801279c:	2100      	movs	r1, #0
 801279e:	4628      	mov	r0, r5
 80127a0:	f7ed fd16 	bl	80001d0 <memchr>
 80127a4:	b108      	cbz	r0, 80127aa <_printf_i+0x1ea>
 80127a6:	1b40      	subs	r0, r0, r5
 80127a8:	6060      	str	r0, [r4, #4]
 80127aa:	6863      	ldr	r3, [r4, #4]
 80127ac:	6123      	str	r3, [r4, #16]
 80127ae:	2300      	movs	r3, #0
 80127b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127b4:	e7aa      	b.n	801270c <_printf_i+0x14c>
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	462a      	mov	r2, r5
 80127ba:	4649      	mov	r1, r9
 80127bc:	4640      	mov	r0, r8
 80127be:	47d0      	blx	sl
 80127c0:	3001      	adds	r0, #1
 80127c2:	d0ad      	beq.n	8012720 <_printf_i+0x160>
 80127c4:	6823      	ldr	r3, [r4, #0]
 80127c6:	079b      	lsls	r3, r3, #30
 80127c8:	d413      	bmi.n	80127f2 <_printf_i+0x232>
 80127ca:	68e0      	ldr	r0, [r4, #12]
 80127cc:	9b03      	ldr	r3, [sp, #12]
 80127ce:	4298      	cmp	r0, r3
 80127d0:	bfb8      	it	lt
 80127d2:	4618      	movlt	r0, r3
 80127d4:	e7a6      	b.n	8012724 <_printf_i+0x164>
 80127d6:	2301      	movs	r3, #1
 80127d8:	4632      	mov	r2, r6
 80127da:	4649      	mov	r1, r9
 80127dc:	4640      	mov	r0, r8
 80127de:	47d0      	blx	sl
 80127e0:	3001      	adds	r0, #1
 80127e2:	d09d      	beq.n	8012720 <_printf_i+0x160>
 80127e4:	3501      	adds	r5, #1
 80127e6:	68e3      	ldr	r3, [r4, #12]
 80127e8:	9903      	ldr	r1, [sp, #12]
 80127ea:	1a5b      	subs	r3, r3, r1
 80127ec:	42ab      	cmp	r3, r5
 80127ee:	dcf2      	bgt.n	80127d6 <_printf_i+0x216>
 80127f0:	e7eb      	b.n	80127ca <_printf_i+0x20a>
 80127f2:	2500      	movs	r5, #0
 80127f4:	f104 0619 	add.w	r6, r4, #25
 80127f8:	e7f5      	b.n	80127e6 <_printf_i+0x226>
 80127fa:	bf00      	nop
 80127fc:	080169a2 	.word	0x080169a2
 8012800:	080169b3 	.word	0x080169b3

08012804 <_scanf_float>:
 8012804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012808:	b087      	sub	sp, #28
 801280a:	4617      	mov	r7, r2
 801280c:	9303      	str	r3, [sp, #12]
 801280e:	688b      	ldr	r3, [r1, #8]
 8012810:	1e5a      	subs	r2, r3, #1
 8012812:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012816:	bf83      	ittte	hi
 8012818:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801281c:	195b      	addhi	r3, r3, r5
 801281e:	9302      	strhi	r3, [sp, #8]
 8012820:	2300      	movls	r3, #0
 8012822:	bf86      	itte	hi
 8012824:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012828:	608b      	strhi	r3, [r1, #8]
 801282a:	9302      	strls	r3, [sp, #8]
 801282c:	680b      	ldr	r3, [r1, #0]
 801282e:	468b      	mov	fp, r1
 8012830:	2500      	movs	r5, #0
 8012832:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012836:	f84b 3b1c 	str.w	r3, [fp], #28
 801283a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801283e:	4680      	mov	r8, r0
 8012840:	460c      	mov	r4, r1
 8012842:	465e      	mov	r6, fp
 8012844:	46aa      	mov	sl, r5
 8012846:	46a9      	mov	r9, r5
 8012848:	9501      	str	r5, [sp, #4]
 801284a:	68a2      	ldr	r2, [r4, #8]
 801284c:	b152      	cbz	r2, 8012864 <_scanf_float+0x60>
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	2b4e      	cmp	r3, #78	; 0x4e
 8012854:	d864      	bhi.n	8012920 <_scanf_float+0x11c>
 8012856:	2b40      	cmp	r3, #64	; 0x40
 8012858:	d83c      	bhi.n	80128d4 <_scanf_float+0xd0>
 801285a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801285e:	b2c8      	uxtb	r0, r1
 8012860:	280e      	cmp	r0, #14
 8012862:	d93a      	bls.n	80128da <_scanf_float+0xd6>
 8012864:	f1b9 0f00 	cmp.w	r9, #0
 8012868:	d003      	beq.n	8012872 <_scanf_float+0x6e>
 801286a:	6823      	ldr	r3, [r4, #0]
 801286c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012870:	6023      	str	r3, [r4, #0]
 8012872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012876:	f1ba 0f01 	cmp.w	sl, #1
 801287a:	f200 8113 	bhi.w	8012aa4 <_scanf_float+0x2a0>
 801287e:	455e      	cmp	r6, fp
 8012880:	f200 8105 	bhi.w	8012a8e <_scanf_float+0x28a>
 8012884:	2501      	movs	r5, #1
 8012886:	4628      	mov	r0, r5
 8012888:	b007      	add	sp, #28
 801288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012892:	2a0d      	cmp	r2, #13
 8012894:	d8e6      	bhi.n	8012864 <_scanf_float+0x60>
 8012896:	a101      	add	r1, pc, #4	; (adr r1, 801289c <_scanf_float+0x98>)
 8012898:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801289c:	080129db 	.word	0x080129db
 80128a0:	08012865 	.word	0x08012865
 80128a4:	08012865 	.word	0x08012865
 80128a8:	08012865 	.word	0x08012865
 80128ac:	08012a3b 	.word	0x08012a3b
 80128b0:	08012a13 	.word	0x08012a13
 80128b4:	08012865 	.word	0x08012865
 80128b8:	08012865 	.word	0x08012865
 80128bc:	080129e9 	.word	0x080129e9
 80128c0:	08012865 	.word	0x08012865
 80128c4:	08012865 	.word	0x08012865
 80128c8:	08012865 	.word	0x08012865
 80128cc:	08012865 	.word	0x08012865
 80128d0:	080129a1 	.word	0x080129a1
 80128d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80128d8:	e7db      	b.n	8012892 <_scanf_float+0x8e>
 80128da:	290e      	cmp	r1, #14
 80128dc:	d8c2      	bhi.n	8012864 <_scanf_float+0x60>
 80128de:	a001      	add	r0, pc, #4	; (adr r0, 80128e4 <_scanf_float+0xe0>)
 80128e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80128e4:	08012993 	.word	0x08012993
 80128e8:	08012865 	.word	0x08012865
 80128ec:	08012993 	.word	0x08012993
 80128f0:	08012a27 	.word	0x08012a27
 80128f4:	08012865 	.word	0x08012865
 80128f8:	08012941 	.word	0x08012941
 80128fc:	0801297d 	.word	0x0801297d
 8012900:	0801297d 	.word	0x0801297d
 8012904:	0801297d 	.word	0x0801297d
 8012908:	0801297d 	.word	0x0801297d
 801290c:	0801297d 	.word	0x0801297d
 8012910:	0801297d 	.word	0x0801297d
 8012914:	0801297d 	.word	0x0801297d
 8012918:	0801297d 	.word	0x0801297d
 801291c:	0801297d 	.word	0x0801297d
 8012920:	2b6e      	cmp	r3, #110	; 0x6e
 8012922:	d809      	bhi.n	8012938 <_scanf_float+0x134>
 8012924:	2b60      	cmp	r3, #96	; 0x60
 8012926:	d8b2      	bhi.n	801288e <_scanf_float+0x8a>
 8012928:	2b54      	cmp	r3, #84	; 0x54
 801292a:	d077      	beq.n	8012a1c <_scanf_float+0x218>
 801292c:	2b59      	cmp	r3, #89	; 0x59
 801292e:	d199      	bne.n	8012864 <_scanf_float+0x60>
 8012930:	2d07      	cmp	r5, #7
 8012932:	d197      	bne.n	8012864 <_scanf_float+0x60>
 8012934:	2508      	movs	r5, #8
 8012936:	e029      	b.n	801298c <_scanf_float+0x188>
 8012938:	2b74      	cmp	r3, #116	; 0x74
 801293a:	d06f      	beq.n	8012a1c <_scanf_float+0x218>
 801293c:	2b79      	cmp	r3, #121	; 0x79
 801293e:	e7f6      	b.n	801292e <_scanf_float+0x12a>
 8012940:	6821      	ldr	r1, [r4, #0]
 8012942:	05c8      	lsls	r0, r1, #23
 8012944:	d51a      	bpl.n	801297c <_scanf_float+0x178>
 8012946:	9b02      	ldr	r3, [sp, #8]
 8012948:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801294c:	6021      	str	r1, [r4, #0]
 801294e:	f109 0901 	add.w	r9, r9, #1
 8012952:	b11b      	cbz	r3, 801295c <_scanf_float+0x158>
 8012954:	3b01      	subs	r3, #1
 8012956:	3201      	adds	r2, #1
 8012958:	9302      	str	r3, [sp, #8]
 801295a:	60a2      	str	r2, [r4, #8]
 801295c:	68a3      	ldr	r3, [r4, #8]
 801295e:	3b01      	subs	r3, #1
 8012960:	60a3      	str	r3, [r4, #8]
 8012962:	6923      	ldr	r3, [r4, #16]
 8012964:	3301      	adds	r3, #1
 8012966:	6123      	str	r3, [r4, #16]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3b01      	subs	r3, #1
 801296c:	2b00      	cmp	r3, #0
 801296e:	607b      	str	r3, [r7, #4]
 8012970:	f340 8084 	ble.w	8012a7c <_scanf_float+0x278>
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	3301      	adds	r3, #1
 8012978:	603b      	str	r3, [r7, #0]
 801297a:	e766      	b.n	801284a <_scanf_float+0x46>
 801297c:	eb1a 0f05 	cmn.w	sl, r5
 8012980:	f47f af70 	bne.w	8012864 <_scanf_float+0x60>
 8012984:	6822      	ldr	r2, [r4, #0]
 8012986:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801298a:	6022      	str	r2, [r4, #0]
 801298c:	f806 3b01 	strb.w	r3, [r6], #1
 8012990:	e7e4      	b.n	801295c <_scanf_float+0x158>
 8012992:	6822      	ldr	r2, [r4, #0]
 8012994:	0610      	lsls	r0, r2, #24
 8012996:	f57f af65 	bpl.w	8012864 <_scanf_float+0x60>
 801299a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801299e:	e7f4      	b.n	801298a <_scanf_float+0x186>
 80129a0:	f1ba 0f00 	cmp.w	sl, #0
 80129a4:	d10e      	bne.n	80129c4 <_scanf_float+0x1c0>
 80129a6:	f1b9 0f00 	cmp.w	r9, #0
 80129aa:	d10e      	bne.n	80129ca <_scanf_float+0x1c6>
 80129ac:	6822      	ldr	r2, [r4, #0]
 80129ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80129b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80129b6:	d108      	bne.n	80129ca <_scanf_float+0x1c6>
 80129b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129bc:	6022      	str	r2, [r4, #0]
 80129be:	f04f 0a01 	mov.w	sl, #1
 80129c2:	e7e3      	b.n	801298c <_scanf_float+0x188>
 80129c4:	f1ba 0f02 	cmp.w	sl, #2
 80129c8:	d055      	beq.n	8012a76 <_scanf_float+0x272>
 80129ca:	2d01      	cmp	r5, #1
 80129cc:	d002      	beq.n	80129d4 <_scanf_float+0x1d0>
 80129ce:	2d04      	cmp	r5, #4
 80129d0:	f47f af48 	bne.w	8012864 <_scanf_float+0x60>
 80129d4:	3501      	adds	r5, #1
 80129d6:	b2ed      	uxtb	r5, r5
 80129d8:	e7d8      	b.n	801298c <_scanf_float+0x188>
 80129da:	f1ba 0f01 	cmp.w	sl, #1
 80129de:	f47f af41 	bne.w	8012864 <_scanf_float+0x60>
 80129e2:	f04f 0a02 	mov.w	sl, #2
 80129e6:	e7d1      	b.n	801298c <_scanf_float+0x188>
 80129e8:	b97d      	cbnz	r5, 8012a0a <_scanf_float+0x206>
 80129ea:	f1b9 0f00 	cmp.w	r9, #0
 80129ee:	f47f af3c 	bne.w	801286a <_scanf_float+0x66>
 80129f2:	6822      	ldr	r2, [r4, #0]
 80129f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80129f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80129fc:	f47f af39 	bne.w	8012872 <_scanf_float+0x6e>
 8012a00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a04:	6022      	str	r2, [r4, #0]
 8012a06:	2501      	movs	r5, #1
 8012a08:	e7c0      	b.n	801298c <_scanf_float+0x188>
 8012a0a:	2d03      	cmp	r5, #3
 8012a0c:	d0e2      	beq.n	80129d4 <_scanf_float+0x1d0>
 8012a0e:	2d05      	cmp	r5, #5
 8012a10:	e7de      	b.n	80129d0 <_scanf_float+0x1cc>
 8012a12:	2d02      	cmp	r5, #2
 8012a14:	f47f af26 	bne.w	8012864 <_scanf_float+0x60>
 8012a18:	2503      	movs	r5, #3
 8012a1a:	e7b7      	b.n	801298c <_scanf_float+0x188>
 8012a1c:	2d06      	cmp	r5, #6
 8012a1e:	f47f af21 	bne.w	8012864 <_scanf_float+0x60>
 8012a22:	2507      	movs	r5, #7
 8012a24:	e7b2      	b.n	801298c <_scanf_float+0x188>
 8012a26:	6822      	ldr	r2, [r4, #0]
 8012a28:	0591      	lsls	r1, r2, #22
 8012a2a:	f57f af1b 	bpl.w	8012864 <_scanf_float+0x60>
 8012a2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012a32:	6022      	str	r2, [r4, #0]
 8012a34:	f8cd 9004 	str.w	r9, [sp, #4]
 8012a38:	e7a8      	b.n	801298c <_scanf_float+0x188>
 8012a3a:	6822      	ldr	r2, [r4, #0]
 8012a3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012a40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012a44:	d006      	beq.n	8012a54 <_scanf_float+0x250>
 8012a46:	0550      	lsls	r0, r2, #21
 8012a48:	f57f af0c 	bpl.w	8012864 <_scanf_float+0x60>
 8012a4c:	f1b9 0f00 	cmp.w	r9, #0
 8012a50:	f43f af0f 	beq.w	8012872 <_scanf_float+0x6e>
 8012a54:	0591      	lsls	r1, r2, #22
 8012a56:	bf58      	it	pl
 8012a58:	9901      	ldrpl	r1, [sp, #4]
 8012a5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a5e:	bf58      	it	pl
 8012a60:	eba9 0101 	subpl.w	r1, r9, r1
 8012a64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012a68:	bf58      	it	pl
 8012a6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012a6e:	6022      	str	r2, [r4, #0]
 8012a70:	f04f 0900 	mov.w	r9, #0
 8012a74:	e78a      	b.n	801298c <_scanf_float+0x188>
 8012a76:	f04f 0a03 	mov.w	sl, #3
 8012a7a:	e787      	b.n	801298c <_scanf_float+0x188>
 8012a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012a80:	4639      	mov	r1, r7
 8012a82:	4640      	mov	r0, r8
 8012a84:	4798      	blx	r3
 8012a86:	2800      	cmp	r0, #0
 8012a88:	f43f aedf 	beq.w	801284a <_scanf_float+0x46>
 8012a8c:	e6ea      	b.n	8012864 <_scanf_float+0x60>
 8012a8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a96:	463a      	mov	r2, r7
 8012a98:	4640      	mov	r0, r8
 8012a9a:	4798      	blx	r3
 8012a9c:	6923      	ldr	r3, [r4, #16]
 8012a9e:	3b01      	subs	r3, #1
 8012aa0:	6123      	str	r3, [r4, #16]
 8012aa2:	e6ec      	b.n	801287e <_scanf_float+0x7a>
 8012aa4:	1e6b      	subs	r3, r5, #1
 8012aa6:	2b06      	cmp	r3, #6
 8012aa8:	d825      	bhi.n	8012af6 <_scanf_float+0x2f2>
 8012aaa:	2d02      	cmp	r5, #2
 8012aac:	d836      	bhi.n	8012b1c <_scanf_float+0x318>
 8012aae:	455e      	cmp	r6, fp
 8012ab0:	f67f aee8 	bls.w	8012884 <_scanf_float+0x80>
 8012ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ab8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012abc:	463a      	mov	r2, r7
 8012abe:	4640      	mov	r0, r8
 8012ac0:	4798      	blx	r3
 8012ac2:	6923      	ldr	r3, [r4, #16]
 8012ac4:	3b01      	subs	r3, #1
 8012ac6:	6123      	str	r3, [r4, #16]
 8012ac8:	e7f1      	b.n	8012aae <_scanf_float+0x2aa>
 8012aca:	9802      	ldr	r0, [sp, #8]
 8012acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ad0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012ad4:	9002      	str	r0, [sp, #8]
 8012ad6:	463a      	mov	r2, r7
 8012ad8:	4640      	mov	r0, r8
 8012ada:	4798      	blx	r3
 8012adc:	6923      	ldr	r3, [r4, #16]
 8012ade:	3b01      	subs	r3, #1
 8012ae0:	6123      	str	r3, [r4, #16]
 8012ae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ae6:	fa5f fa8a 	uxtb.w	sl, sl
 8012aea:	f1ba 0f02 	cmp.w	sl, #2
 8012aee:	d1ec      	bne.n	8012aca <_scanf_float+0x2c6>
 8012af0:	3d03      	subs	r5, #3
 8012af2:	b2ed      	uxtb	r5, r5
 8012af4:	1b76      	subs	r6, r6, r5
 8012af6:	6823      	ldr	r3, [r4, #0]
 8012af8:	05da      	lsls	r2, r3, #23
 8012afa:	d52f      	bpl.n	8012b5c <_scanf_float+0x358>
 8012afc:	055b      	lsls	r3, r3, #21
 8012afe:	d510      	bpl.n	8012b22 <_scanf_float+0x31e>
 8012b00:	455e      	cmp	r6, fp
 8012b02:	f67f aebf 	bls.w	8012884 <_scanf_float+0x80>
 8012b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012b0e:	463a      	mov	r2, r7
 8012b10:	4640      	mov	r0, r8
 8012b12:	4798      	blx	r3
 8012b14:	6923      	ldr	r3, [r4, #16]
 8012b16:	3b01      	subs	r3, #1
 8012b18:	6123      	str	r3, [r4, #16]
 8012b1a:	e7f1      	b.n	8012b00 <_scanf_float+0x2fc>
 8012b1c:	46aa      	mov	sl, r5
 8012b1e:	9602      	str	r6, [sp, #8]
 8012b20:	e7df      	b.n	8012ae2 <_scanf_float+0x2de>
 8012b22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012b26:	6923      	ldr	r3, [r4, #16]
 8012b28:	2965      	cmp	r1, #101	; 0x65
 8012b2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8012b32:	6123      	str	r3, [r4, #16]
 8012b34:	d00c      	beq.n	8012b50 <_scanf_float+0x34c>
 8012b36:	2945      	cmp	r1, #69	; 0x45
 8012b38:	d00a      	beq.n	8012b50 <_scanf_float+0x34c>
 8012b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b3e:	463a      	mov	r2, r7
 8012b40:	4640      	mov	r0, r8
 8012b42:	4798      	blx	r3
 8012b44:	6923      	ldr	r3, [r4, #16]
 8012b46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	1eb5      	subs	r5, r6, #2
 8012b4e:	6123      	str	r3, [r4, #16]
 8012b50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b54:	463a      	mov	r2, r7
 8012b56:	4640      	mov	r0, r8
 8012b58:	4798      	blx	r3
 8012b5a:	462e      	mov	r6, r5
 8012b5c:	6825      	ldr	r5, [r4, #0]
 8012b5e:	f015 0510 	ands.w	r5, r5, #16
 8012b62:	d158      	bne.n	8012c16 <_scanf_float+0x412>
 8012b64:	7035      	strb	r5, [r6, #0]
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b70:	d11c      	bne.n	8012bac <_scanf_float+0x3a8>
 8012b72:	9b01      	ldr	r3, [sp, #4]
 8012b74:	454b      	cmp	r3, r9
 8012b76:	eba3 0209 	sub.w	r2, r3, r9
 8012b7a:	d124      	bne.n	8012bc6 <_scanf_float+0x3c2>
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	4659      	mov	r1, fp
 8012b80:	4640      	mov	r0, r8
 8012b82:	f002 fbb9 	bl	80152f8 <_strtod_r>
 8012b86:	9b03      	ldr	r3, [sp, #12]
 8012b88:	6821      	ldr	r1, [r4, #0]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f011 0f02 	tst.w	r1, #2
 8012b90:	ec57 6b10 	vmov	r6, r7, d0
 8012b94:	f103 0204 	add.w	r2, r3, #4
 8012b98:	d020      	beq.n	8012bdc <_scanf_float+0x3d8>
 8012b9a:	9903      	ldr	r1, [sp, #12]
 8012b9c:	600a      	str	r2, [r1, #0]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	e9c3 6700 	strd	r6, r7, [r3]
 8012ba4:	68e3      	ldr	r3, [r4, #12]
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	60e3      	str	r3, [r4, #12]
 8012baa:	e66c      	b.n	8012886 <_scanf_float+0x82>
 8012bac:	9b04      	ldr	r3, [sp, #16]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d0e4      	beq.n	8012b7c <_scanf_float+0x378>
 8012bb2:	9905      	ldr	r1, [sp, #20]
 8012bb4:	230a      	movs	r3, #10
 8012bb6:	462a      	mov	r2, r5
 8012bb8:	3101      	adds	r1, #1
 8012bba:	4640      	mov	r0, r8
 8012bbc:	f002 fc24 	bl	8015408 <_strtol_r>
 8012bc0:	9b04      	ldr	r3, [sp, #16]
 8012bc2:	9e05      	ldr	r6, [sp, #20]
 8012bc4:	1ac2      	subs	r2, r0, r3
 8012bc6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012bca:	429e      	cmp	r6, r3
 8012bcc:	bf28      	it	cs
 8012bce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012bd2:	4912      	ldr	r1, [pc, #72]	; (8012c1c <_scanf_float+0x418>)
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f000 f909 	bl	8012dec <siprintf>
 8012bda:	e7cf      	b.n	8012b7c <_scanf_float+0x378>
 8012bdc:	f011 0f04 	tst.w	r1, #4
 8012be0:	9903      	ldr	r1, [sp, #12]
 8012be2:	600a      	str	r2, [r1, #0]
 8012be4:	d1db      	bne.n	8012b9e <_scanf_float+0x39a>
 8012be6:	f8d3 8000 	ldr.w	r8, [r3]
 8012bea:	ee10 2a10 	vmov	r2, s0
 8012bee:	ee10 0a10 	vmov	r0, s0
 8012bf2:	463b      	mov	r3, r7
 8012bf4:	4639      	mov	r1, r7
 8012bf6:	f7ed ff99 	bl	8000b2c <__aeabi_dcmpun>
 8012bfa:	b128      	cbz	r0, 8012c08 <_scanf_float+0x404>
 8012bfc:	4808      	ldr	r0, [pc, #32]	; (8012c20 <_scanf_float+0x41c>)
 8012bfe:	f000 f9f5 	bl	8012fec <nanf>
 8012c02:	ed88 0a00 	vstr	s0, [r8]
 8012c06:	e7cd      	b.n	8012ba4 <_scanf_float+0x3a0>
 8012c08:	4630      	mov	r0, r6
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	f7ed ffec 	bl	8000be8 <__aeabi_d2f>
 8012c10:	f8c8 0000 	str.w	r0, [r8]
 8012c14:	e7c6      	b.n	8012ba4 <_scanf_float+0x3a0>
 8012c16:	2500      	movs	r5, #0
 8012c18:	e635      	b.n	8012886 <_scanf_float+0x82>
 8012c1a:	bf00      	nop
 8012c1c:	080169c4 	.word	0x080169c4
 8012c20:	08016d55 	.word	0x08016d55

08012c24 <std>:
 8012c24:	2300      	movs	r3, #0
 8012c26:	b510      	push	{r4, lr}
 8012c28:	4604      	mov	r4, r0
 8012c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8012c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c32:	6083      	str	r3, [r0, #8]
 8012c34:	8181      	strh	r1, [r0, #12]
 8012c36:	6643      	str	r3, [r0, #100]	; 0x64
 8012c38:	81c2      	strh	r2, [r0, #14]
 8012c3a:	6183      	str	r3, [r0, #24]
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	2208      	movs	r2, #8
 8012c40:	305c      	adds	r0, #92	; 0x5c
 8012c42:	f000 f936 	bl	8012eb2 <memset>
 8012c46:	4b05      	ldr	r3, [pc, #20]	; (8012c5c <std+0x38>)
 8012c48:	6263      	str	r3, [r4, #36]	; 0x24
 8012c4a:	4b05      	ldr	r3, [pc, #20]	; (8012c60 <std+0x3c>)
 8012c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c4e:	4b05      	ldr	r3, [pc, #20]	; (8012c64 <std+0x40>)
 8012c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c52:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <std+0x44>)
 8012c54:	6224      	str	r4, [r4, #32]
 8012c56:	6323      	str	r3, [r4, #48]	; 0x30
 8012c58:	bd10      	pop	{r4, pc}
 8012c5a:	bf00      	nop
 8012c5c:	08012e2d 	.word	0x08012e2d
 8012c60:	08012e4f 	.word	0x08012e4f
 8012c64:	08012e87 	.word	0x08012e87
 8012c68:	08012eab 	.word	0x08012eab

08012c6c <stdio_exit_handler>:
 8012c6c:	4a02      	ldr	r2, [pc, #8]	; (8012c78 <stdio_exit_handler+0xc>)
 8012c6e:	4903      	ldr	r1, [pc, #12]	; (8012c7c <stdio_exit_handler+0x10>)
 8012c70:	4803      	ldr	r0, [pc, #12]	; (8012c80 <stdio_exit_handler+0x14>)
 8012c72:	f000 b869 	b.w	8012d48 <_fwalk_sglue>
 8012c76:	bf00      	nop
 8012c78:	2000010c 	.word	0x2000010c
 8012c7c:	080157c9 	.word	0x080157c9
 8012c80:	20000118 	.word	0x20000118

08012c84 <cleanup_stdio>:
 8012c84:	6841      	ldr	r1, [r0, #4]
 8012c86:	4b0c      	ldr	r3, [pc, #48]	; (8012cb8 <cleanup_stdio+0x34>)
 8012c88:	4299      	cmp	r1, r3
 8012c8a:	b510      	push	{r4, lr}
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	d001      	beq.n	8012c94 <cleanup_stdio+0x10>
 8012c90:	f002 fd9a 	bl	80157c8 <_fflush_r>
 8012c94:	68a1      	ldr	r1, [r4, #8]
 8012c96:	4b09      	ldr	r3, [pc, #36]	; (8012cbc <cleanup_stdio+0x38>)
 8012c98:	4299      	cmp	r1, r3
 8012c9a:	d002      	beq.n	8012ca2 <cleanup_stdio+0x1e>
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f002 fd93 	bl	80157c8 <_fflush_r>
 8012ca2:	68e1      	ldr	r1, [r4, #12]
 8012ca4:	4b06      	ldr	r3, [pc, #24]	; (8012cc0 <cleanup_stdio+0x3c>)
 8012ca6:	4299      	cmp	r1, r3
 8012ca8:	d004      	beq.n	8012cb4 <cleanup_stdio+0x30>
 8012caa:	4620      	mov	r0, r4
 8012cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cb0:	f002 bd8a 	b.w	80157c8 <_fflush_r>
 8012cb4:	bd10      	pop	{r4, pc}
 8012cb6:	bf00      	nop
 8012cb8:	20011f7c 	.word	0x20011f7c
 8012cbc:	20011fe4 	.word	0x20011fe4
 8012cc0:	2001204c 	.word	0x2001204c

08012cc4 <global_stdio_init.part.0>:
 8012cc4:	b510      	push	{r4, lr}
 8012cc6:	4b0b      	ldr	r3, [pc, #44]	; (8012cf4 <global_stdio_init.part.0+0x30>)
 8012cc8:	4c0b      	ldr	r4, [pc, #44]	; (8012cf8 <global_stdio_init.part.0+0x34>)
 8012cca:	4a0c      	ldr	r2, [pc, #48]	; (8012cfc <global_stdio_init.part.0+0x38>)
 8012ccc:	601a      	str	r2, [r3, #0]
 8012cce:	4620      	mov	r0, r4
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	2104      	movs	r1, #4
 8012cd4:	f7ff ffa6 	bl	8012c24 <std>
 8012cd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012cdc:	2201      	movs	r2, #1
 8012cde:	2109      	movs	r1, #9
 8012ce0:	f7ff ffa0 	bl	8012c24 <std>
 8012ce4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012ce8:	2202      	movs	r2, #2
 8012cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cee:	2112      	movs	r1, #18
 8012cf0:	f7ff bf98 	b.w	8012c24 <std>
 8012cf4:	200120b4 	.word	0x200120b4
 8012cf8:	20011f7c 	.word	0x20011f7c
 8012cfc:	08012c6d 	.word	0x08012c6d

08012d00 <__sfp_lock_acquire>:
 8012d00:	4801      	ldr	r0, [pc, #4]	; (8012d08 <__sfp_lock_acquire+0x8>)
 8012d02:	f000 b963 	b.w	8012fcc <__retarget_lock_acquire_recursive>
 8012d06:	bf00      	nop
 8012d08:	200120bd 	.word	0x200120bd

08012d0c <__sfp_lock_release>:
 8012d0c:	4801      	ldr	r0, [pc, #4]	; (8012d14 <__sfp_lock_release+0x8>)
 8012d0e:	f000 b95e 	b.w	8012fce <__retarget_lock_release_recursive>
 8012d12:	bf00      	nop
 8012d14:	200120bd 	.word	0x200120bd

08012d18 <__sinit>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	f7ff fff0 	bl	8012d00 <__sfp_lock_acquire>
 8012d20:	6a23      	ldr	r3, [r4, #32]
 8012d22:	b11b      	cbz	r3, 8012d2c <__sinit+0x14>
 8012d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d28:	f7ff bff0 	b.w	8012d0c <__sfp_lock_release>
 8012d2c:	4b04      	ldr	r3, [pc, #16]	; (8012d40 <__sinit+0x28>)
 8012d2e:	6223      	str	r3, [r4, #32]
 8012d30:	4b04      	ldr	r3, [pc, #16]	; (8012d44 <__sinit+0x2c>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d1f5      	bne.n	8012d24 <__sinit+0xc>
 8012d38:	f7ff ffc4 	bl	8012cc4 <global_stdio_init.part.0>
 8012d3c:	e7f2      	b.n	8012d24 <__sinit+0xc>
 8012d3e:	bf00      	nop
 8012d40:	08012c85 	.word	0x08012c85
 8012d44:	200120b4 	.word	0x200120b4

08012d48 <_fwalk_sglue>:
 8012d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d4c:	4607      	mov	r7, r0
 8012d4e:	4688      	mov	r8, r1
 8012d50:	4614      	mov	r4, r2
 8012d52:	2600      	movs	r6, #0
 8012d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d58:	f1b9 0901 	subs.w	r9, r9, #1
 8012d5c:	d505      	bpl.n	8012d6a <_fwalk_sglue+0x22>
 8012d5e:	6824      	ldr	r4, [r4, #0]
 8012d60:	2c00      	cmp	r4, #0
 8012d62:	d1f7      	bne.n	8012d54 <_fwalk_sglue+0xc>
 8012d64:	4630      	mov	r0, r6
 8012d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d6a:	89ab      	ldrh	r3, [r5, #12]
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	d907      	bls.n	8012d80 <_fwalk_sglue+0x38>
 8012d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d74:	3301      	adds	r3, #1
 8012d76:	d003      	beq.n	8012d80 <_fwalk_sglue+0x38>
 8012d78:	4629      	mov	r1, r5
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	47c0      	blx	r8
 8012d7e:	4306      	orrs	r6, r0
 8012d80:	3568      	adds	r5, #104	; 0x68
 8012d82:	e7e9      	b.n	8012d58 <_fwalk_sglue+0x10>

08012d84 <sniprintf>:
 8012d84:	b40c      	push	{r2, r3}
 8012d86:	b530      	push	{r4, r5, lr}
 8012d88:	4b17      	ldr	r3, [pc, #92]	; (8012de8 <sniprintf+0x64>)
 8012d8a:	1e0c      	subs	r4, r1, #0
 8012d8c:	681d      	ldr	r5, [r3, #0]
 8012d8e:	b09d      	sub	sp, #116	; 0x74
 8012d90:	da08      	bge.n	8012da4 <sniprintf+0x20>
 8012d92:	238b      	movs	r3, #139	; 0x8b
 8012d94:	602b      	str	r3, [r5, #0]
 8012d96:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9a:	b01d      	add	sp, #116	; 0x74
 8012d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012da0:	b002      	add	sp, #8
 8012da2:	4770      	bx	lr
 8012da4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012da8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012dac:	bf14      	ite	ne
 8012dae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012db2:	4623      	moveq	r3, r4
 8012db4:	9304      	str	r3, [sp, #16]
 8012db6:	9307      	str	r3, [sp, #28]
 8012db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dbc:	9002      	str	r0, [sp, #8]
 8012dbe:	9006      	str	r0, [sp, #24]
 8012dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012dc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012dc6:	ab21      	add	r3, sp, #132	; 0x84
 8012dc8:	a902      	add	r1, sp, #8
 8012dca:	4628      	mov	r0, r5
 8012dcc:	9301      	str	r3, [sp, #4]
 8012dce:	f002 fb77 	bl	80154c0 <_svfiprintf_r>
 8012dd2:	1c43      	adds	r3, r0, #1
 8012dd4:	bfbc      	itt	lt
 8012dd6:	238b      	movlt	r3, #139	; 0x8b
 8012dd8:	602b      	strlt	r3, [r5, #0]
 8012dda:	2c00      	cmp	r4, #0
 8012ddc:	d0dd      	beq.n	8012d9a <sniprintf+0x16>
 8012dde:	9b02      	ldr	r3, [sp, #8]
 8012de0:	2200      	movs	r2, #0
 8012de2:	701a      	strb	r2, [r3, #0]
 8012de4:	e7d9      	b.n	8012d9a <sniprintf+0x16>
 8012de6:	bf00      	nop
 8012de8:	20000164 	.word	0x20000164

08012dec <siprintf>:
 8012dec:	b40e      	push	{r1, r2, r3}
 8012dee:	b500      	push	{lr}
 8012df0:	b09c      	sub	sp, #112	; 0x70
 8012df2:	ab1d      	add	r3, sp, #116	; 0x74
 8012df4:	9002      	str	r0, [sp, #8]
 8012df6:	9006      	str	r0, [sp, #24]
 8012df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012dfc:	4809      	ldr	r0, [pc, #36]	; (8012e24 <siprintf+0x38>)
 8012dfe:	9107      	str	r1, [sp, #28]
 8012e00:	9104      	str	r1, [sp, #16]
 8012e02:	4909      	ldr	r1, [pc, #36]	; (8012e28 <siprintf+0x3c>)
 8012e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e08:	9105      	str	r1, [sp, #20]
 8012e0a:	6800      	ldr	r0, [r0, #0]
 8012e0c:	9301      	str	r3, [sp, #4]
 8012e0e:	a902      	add	r1, sp, #8
 8012e10:	f002 fb56 	bl	80154c0 <_svfiprintf_r>
 8012e14:	9b02      	ldr	r3, [sp, #8]
 8012e16:	2200      	movs	r2, #0
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	b01c      	add	sp, #112	; 0x70
 8012e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e20:	b003      	add	sp, #12
 8012e22:	4770      	bx	lr
 8012e24:	20000164 	.word	0x20000164
 8012e28:	ffff0208 	.word	0xffff0208

08012e2c <__sread>:
 8012e2c:	b510      	push	{r4, lr}
 8012e2e:	460c      	mov	r4, r1
 8012e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e34:	f000 f86c 	bl	8012f10 <_read_r>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	bfab      	itete	ge
 8012e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8012e40:	181b      	addge	r3, r3, r0
 8012e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e46:	bfac      	ite	ge
 8012e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e4a:	81a3      	strhlt	r3, [r4, #12]
 8012e4c:	bd10      	pop	{r4, pc}

08012e4e <__swrite>:
 8012e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e52:	461f      	mov	r7, r3
 8012e54:	898b      	ldrh	r3, [r1, #12]
 8012e56:	05db      	lsls	r3, r3, #23
 8012e58:	4605      	mov	r5, r0
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	4616      	mov	r6, r2
 8012e5e:	d505      	bpl.n	8012e6c <__swrite+0x1e>
 8012e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e64:	2302      	movs	r3, #2
 8012e66:	2200      	movs	r2, #0
 8012e68:	f000 f840 	bl	8012eec <_lseek_r>
 8012e6c:	89a3      	ldrh	r3, [r4, #12]
 8012e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e76:	81a3      	strh	r3, [r4, #12]
 8012e78:	4632      	mov	r2, r6
 8012e7a:	463b      	mov	r3, r7
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e82:	f000 b867 	b.w	8012f54 <_write_r>

08012e86 <__sseek>:
 8012e86:	b510      	push	{r4, lr}
 8012e88:	460c      	mov	r4, r1
 8012e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e8e:	f000 f82d 	bl	8012eec <_lseek_r>
 8012e92:	1c43      	adds	r3, r0, #1
 8012e94:	89a3      	ldrh	r3, [r4, #12]
 8012e96:	bf15      	itete	ne
 8012e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ea2:	81a3      	strheq	r3, [r4, #12]
 8012ea4:	bf18      	it	ne
 8012ea6:	81a3      	strhne	r3, [r4, #12]
 8012ea8:	bd10      	pop	{r4, pc}

08012eaa <__sclose>:
 8012eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eae:	f000 b80d 	b.w	8012ecc <_close_r>

08012eb2 <memset>:
 8012eb2:	4402      	add	r2, r0
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d100      	bne.n	8012ebc <memset+0xa>
 8012eba:	4770      	bx	lr
 8012ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8012ec0:	e7f9      	b.n	8012eb6 <memset+0x4>
	...

08012ec4 <_localeconv_r>:
 8012ec4:	4800      	ldr	r0, [pc, #0]	; (8012ec8 <_localeconv_r+0x4>)
 8012ec6:	4770      	bx	lr
 8012ec8:	20000258 	.word	0x20000258

08012ecc <_close_r>:
 8012ecc:	b538      	push	{r3, r4, r5, lr}
 8012ece:	4d06      	ldr	r5, [pc, #24]	; (8012ee8 <_close_r+0x1c>)
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	4608      	mov	r0, r1
 8012ed6:	602b      	str	r3, [r5, #0]
 8012ed8:	f7f0 fd7d 	bl	80039d6 <_close>
 8012edc:	1c43      	adds	r3, r0, #1
 8012ede:	d102      	bne.n	8012ee6 <_close_r+0x1a>
 8012ee0:	682b      	ldr	r3, [r5, #0]
 8012ee2:	b103      	cbz	r3, 8012ee6 <_close_r+0x1a>
 8012ee4:	6023      	str	r3, [r4, #0]
 8012ee6:	bd38      	pop	{r3, r4, r5, pc}
 8012ee8:	200120b8 	.word	0x200120b8

08012eec <_lseek_r>:
 8012eec:	b538      	push	{r3, r4, r5, lr}
 8012eee:	4d07      	ldr	r5, [pc, #28]	; (8012f0c <_lseek_r+0x20>)
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	4608      	mov	r0, r1
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	602a      	str	r2, [r5, #0]
 8012efa:	461a      	mov	r2, r3
 8012efc:	f7f0 fd92 	bl	8003a24 <_lseek>
 8012f00:	1c43      	adds	r3, r0, #1
 8012f02:	d102      	bne.n	8012f0a <_lseek_r+0x1e>
 8012f04:	682b      	ldr	r3, [r5, #0]
 8012f06:	b103      	cbz	r3, 8012f0a <_lseek_r+0x1e>
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	bd38      	pop	{r3, r4, r5, pc}
 8012f0c:	200120b8 	.word	0x200120b8

08012f10 <_read_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	4d07      	ldr	r5, [pc, #28]	; (8012f30 <_read_r+0x20>)
 8012f14:	4604      	mov	r4, r0
 8012f16:	4608      	mov	r0, r1
 8012f18:	4611      	mov	r1, r2
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	602a      	str	r2, [r5, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	f7f0 fd20 	bl	8003964 <_read>
 8012f24:	1c43      	adds	r3, r0, #1
 8012f26:	d102      	bne.n	8012f2e <_read_r+0x1e>
 8012f28:	682b      	ldr	r3, [r5, #0]
 8012f2a:	b103      	cbz	r3, 8012f2e <_read_r+0x1e>
 8012f2c:	6023      	str	r3, [r4, #0]
 8012f2e:	bd38      	pop	{r3, r4, r5, pc}
 8012f30:	200120b8 	.word	0x200120b8

08012f34 <_sbrk_r>:
 8012f34:	b538      	push	{r3, r4, r5, lr}
 8012f36:	4d06      	ldr	r5, [pc, #24]	; (8012f50 <_sbrk_r+0x1c>)
 8012f38:	2300      	movs	r3, #0
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	4608      	mov	r0, r1
 8012f3e:	602b      	str	r3, [r5, #0]
 8012f40:	f7f0 fd7e 	bl	8003a40 <_sbrk>
 8012f44:	1c43      	adds	r3, r0, #1
 8012f46:	d102      	bne.n	8012f4e <_sbrk_r+0x1a>
 8012f48:	682b      	ldr	r3, [r5, #0]
 8012f4a:	b103      	cbz	r3, 8012f4e <_sbrk_r+0x1a>
 8012f4c:	6023      	str	r3, [r4, #0]
 8012f4e:	bd38      	pop	{r3, r4, r5, pc}
 8012f50:	200120b8 	.word	0x200120b8

08012f54 <_write_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4d07      	ldr	r5, [pc, #28]	; (8012f74 <_write_r+0x20>)
 8012f58:	4604      	mov	r4, r0
 8012f5a:	4608      	mov	r0, r1
 8012f5c:	4611      	mov	r1, r2
 8012f5e:	2200      	movs	r2, #0
 8012f60:	602a      	str	r2, [r5, #0]
 8012f62:	461a      	mov	r2, r3
 8012f64:	f7f0 fd1b 	bl	800399e <_write>
 8012f68:	1c43      	adds	r3, r0, #1
 8012f6a:	d102      	bne.n	8012f72 <_write_r+0x1e>
 8012f6c:	682b      	ldr	r3, [r5, #0]
 8012f6e:	b103      	cbz	r3, 8012f72 <_write_r+0x1e>
 8012f70:	6023      	str	r3, [r4, #0]
 8012f72:	bd38      	pop	{r3, r4, r5, pc}
 8012f74:	200120b8 	.word	0x200120b8

08012f78 <__errno>:
 8012f78:	4b01      	ldr	r3, [pc, #4]	; (8012f80 <__errno+0x8>)
 8012f7a:	6818      	ldr	r0, [r3, #0]
 8012f7c:	4770      	bx	lr
 8012f7e:	bf00      	nop
 8012f80:	20000164 	.word	0x20000164

08012f84 <__libc_init_array>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	4d0d      	ldr	r5, [pc, #52]	; (8012fbc <__libc_init_array+0x38>)
 8012f88:	4c0d      	ldr	r4, [pc, #52]	; (8012fc0 <__libc_init_array+0x3c>)
 8012f8a:	1b64      	subs	r4, r4, r5
 8012f8c:	10a4      	asrs	r4, r4, #2
 8012f8e:	2600      	movs	r6, #0
 8012f90:	42a6      	cmp	r6, r4
 8012f92:	d109      	bne.n	8012fa8 <__libc_init_array+0x24>
 8012f94:	4d0b      	ldr	r5, [pc, #44]	; (8012fc4 <__libc_init_array+0x40>)
 8012f96:	4c0c      	ldr	r4, [pc, #48]	; (8012fc8 <__libc_init_array+0x44>)
 8012f98:	f003 fb0e 	bl	80165b8 <_init>
 8012f9c:	1b64      	subs	r4, r4, r5
 8012f9e:	10a4      	asrs	r4, r4, #2
 8012fa0:	2600      	movs	r6, #0
 8012fa2:	42a6      	cmp	r6, r4
 8012fa4:	d105      	bne.n	8012fb2 <__libc_init_array+0x2e>
 8012fa6:	bd70      	pop	{r4, r5, r6, pc}
 8012fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fac:	4798      	blx	r3
 8012fae:	3601      	adds	r6, #1
 8012fb0:	e7ee      	b.n	8012f90 <__libc_init_array+0xc>
 8012fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fb6:	4798      	blx	r3
 8012fb8:	3601      	adds	r6, #1
 8012fba:	e7f2      	b.n	8012fa2 <__libc_init_array+0x1e>
 8012fbc:	08016db8 	.word	0x08016db8
 8012fc0:	08016db8 	.word	0x08016db8
 8012fc4:	08016db8 	.word	0x08016db8
 8012fc8:	08016dbc 	.word	0x08016dbc

08012fcc <__retarget_lock_acquire_recursive>:
 8012fcc:	4770      	bx	lr

08012fce <__retarget_lock_release_recursive>:
 8012fce:	4770      	bx	lr

08012fd0 <memcpy>:
 8012fd0:	440a      	add	r2, r1
 8012fd2:	4291      	cmp	r1, r2
 8012fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fd8:	d100      	bne.n	8012fdc <memcpy+0xc>
 8012fda:	4770      	bx	lr
 8012fdc:	b510      	push	{r4, lr}
 8012fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fe6:	4291      	cmp	r1, r2
 8012fe8:	d1f9      	bne.n	8012fde <memcpy+0xe>
 8012fea:	bd10      	pop	{r4, pc}

08012fec <nanf>:
 8012fec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012ff4 <nanf+0x8>
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	7fc00000 	.word	0x7fc00000

08012ff8 <quorem>:
 8012ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ffc:	6903      	ldr	r3, [r0, #16]
 8012ffe:	690c      	ldr	r4, [r1, #16]
 8013000:	42a3      	cmp	r3, r4
 8013002:	4607      	mov	r7, r0
 8013004:	db7e      	blt.n	8013104 <quorem+0x10c>
 8013006:	3c01      	subs	r4, #1
 8013008:	f101 0814 	add.w	r8, r1, #20
 801300c:	f100 0514 	add.w	r5, r0, #20
 8013010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013014:	9301      	str	r3, [sp, #4]
 8013016:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801301a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801301e:	3301      	adds	r3, #1
 8013020:	429a      	cmp	r2, r3
 8013022:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013026:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801302a:	fbb2 f6f3 	udiv	r6, r2, r3
 801302e:	d331      	bcc.n	8013094 <quorem+0x9c>
 8013030:	f04f 0e00 	mov.w	lr, #0
 8013034:	4640      	mov	r0, r8
 8013036:	46ac      	mov	ip, r5
 8013038:	46f2      	mov	sl, lr
 801303a:	f850 2b04 	ldr.w	r2, [r0], #4
 801303e:	b293      	uxth	r3, r2
 8013040:	fb06 e303 	mla	r3, r6, r3, lr
 8013044:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013048:	0c1a      	lsrs	r2, r3, #16
 801304a:	b29b      	uxth	r3, r3
 801304c:	ebaa 0303 	sub.w	r3, sl, r3
 8013050:	f8dc a000 	ldr.w	sl, [ip]
 8013054:	fa13 f38a 	uxtah	r3, r3, sl
 8013058:	fb06 220e 	mla	r2, r6, lr, r2
 801305c:	9300      	str	r3, [sp, #0]
 801305e:	9b00      	ldr	r3, [sp, #0]
 8013060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013064:	b292      	uxth	r2, r2
 8013066:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801306a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801306e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013072:	4581      	cmp	r9, r0
 8013074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013078:	f84c 3b04 	str.w	r3, [ip], #4
 801307c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013080:	d2db      	bcs.n	801303a <quorem+0x42>
 8013082:	f855 300b 	ldr.w	r3, [r5, fp]
 8013086:	b92b      	cbnz	r3, 8013094 <quorem+0x9c>
 8013088:	9b01      	ldr	r3, [sp, #4]
 801308a:	3b04      	subs	r3, #4
 801308c:	429d      	cmp	r5, r3
 801308e:	461a      	mov	r2, r3
 8013090:	d32c      	bcc.n	80130ec <quorem+0xf4>
 8013092:	613c      	str	r4, [r7, #16]
 8013094:	4638      	mov	r0, r7
 8013096:	f001 f93b 	bl	8014310 <__mcmp>
 801309a:	2800      	cmp	r0, #0
 801309c:	db22      	blt.n	80130e4 <quorem+0xec>
 801309e:	3601      	adds	r6, #1
 80130a0:	4629      	mov	r1, r5
 80130a2:	2000      	movs	r0, #0
 80130a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80130a8:	f8d1 c000 	ldr.w	ip, [r1]
 80130ac:	b293      	uxth	r3, r2
 80130ae:	1ac3      	subs	r3, r0, r3
 80130b0:	0c12      	lsrs	r2, r2, #16
 80130b2:	fa13 f38c 	uxtah	r3, r3, ip
 80130b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80130ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80130be:	b29b      	uxth	r3, r3
 80130c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130c4:	45c1      	cmp	r9, r8
 80130c6:	f841 3b04 	str.w	r3, [r1], #4
 80130ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80130ce:	d2e9      	bcs.n	80130a4 <quorem+0xac>
 80130d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130d8:	b922      	cbnz	r2, 80130e4 <quorem+0xec>
 80130da:	3b04      	subs	r3, #4
 80130dc:	429d      	cmp	r5, r3
 80130de:	461a      	mov	r2, r3
 80130e0:	d30a      	bcc.n	80130f8 <quorem+0x100>
 80130e2:	613c      	str	r4, [r7, #16]
 80130e4:	4630      	mov	r0, r6
 80130e6:	b003      	add	sp, #12
 80130e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ec:	6812      	ldr	r2, [r2, #0]
 80130ee:	3b04      	subs	r3, #4
 80130f0:	2a00      	cmp	r2, #0
 80130f2:	d1ce      	bne.n	8013092 <quorem+0x9a>
 80130f4:	3c01      	subs	r4, #1
 80130f6:	e7c9      	b.n	801308c <quorem+0x94>
 80130f8:	6812      	ldr	r2, [r2, #0]
 80130fa:	3b04      	subs	r3, #4
 80130fc:	2a00      	cmp	r2, #0
 80130fe:	d1f0      	bne.n	80130e2 <quorem+0xea>
 8013100:	3c01      	subs	r4, #1
 8013102:	e7eb      	b.n	80130dc <quorem+0xe4>
 8013104:	2000      	movs	r0, #0
 8013106:	e7ee      	b.n	80130e6 <quorem+0xee>

08013108 <_dtoa_r>:
 8013108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310c:	ed2d 8b04 	vpush	{d8-d9}
 8013110:	69c5      	ldr	r5, [r0, #28]
 8013112:	b093      	sub	sp, #76	; 0x4c
 8013114:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013118:	ec57 6b10 	vmov	r6, r7, d0
 801311c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013120:	9107      	str	r1, [sp, #28]
 8013122:	4604      	mov	r4, r0
 8013124:	920a      	str	r2, [sp, #40]	; 0x28
 8013126:	930d      	str	r3, [sp, #52]	; 0x34
 8013128:	b975      	cbnz	r5, 8013148 <_dtoa_r+0x40>
 801312a:	2010      	movs	r0, #16
 801312c:	f7fe fe50 	bl	8011dd0 <malloc>
 8013130:	4602      	mov	r2, r0
 8013132:	61e0      	str	r0, [r4, #28]
 8013134:	b920      	cbnz	r0, 8013140 <_dtoa_r+0x38>
 8013136:	4bae      	ldr	r3, [pc, #696]	; (80133f0 <_dtoa_r+0x2e8>)
 8013138:	21ef      	movs	r1, #239	; 0xef
 801313a:	48ae      	ldr	r0, [pc, #696]	; (80133f4 <_dtoa_r+0x2ec>)
 801313c:	f002 fba0 	bl	8015880 <__assert_func>
 8013140:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013144:	6005      	str	r5, [r0, #0]
 8013146:	60c5      	str	r5, [r0, #12]
 8013148:	69e3      	ldr	r3, [r4, #28]
 801314a:	6819      	ldr	r1, [r3, #0]
 801314c:	b151      	cbz	r1, 8013164 <_dtoa_r+0x5c>
 801314e:	685a      	ldr	r2, [r3, #4]
 8013150:	604a      	str	r2, [r1, #4]
 8013152:	2301      	movs	r3, #1
 8013154:	4093      	lsls	r3, r2
 8013156:	608b      	str	r3, [r1, #8]
 8013158:	4620      	mov	r0, r4
 801315a:	f000 fe53 	bl	8013e04 <_Bfree>
 801315e:	69e3      	ldr	r3, [r4, #28]
 8013160:	2200      	movs	r2, #0
 8013162:	601a      	str	r2, [r3, #0]
 8013164:	1e3b      	subs	r3, r7, #0
 8013166:	bfbb      	ittet	lt
 8013168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801316c:	9303      	strlt	r3, [sp, #12]
 801316e:	2300      	movge	r3, #0
 8013170:	2201      	movlt	r2, #1
 8013172:	bfac      	ite	ge
 8013174:	f8c8 3000 	strge.w	r3, [r8]
 8013178:	f8c8 2000 	strlt.w	r2, [r8]
 801317c:	4b9e      	ldr	r3, [pc, #632]	; (80133f8 <_dtoa_r+0x2f0>)
 801317e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013182:	ea33 0308 	bics.w	r3, r3, r8
 8013186:	d11b      	bne.n	80131c0 <_dtoa_r+0xb8>
 8013188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801318a:	f242 730f 	movw	r3, #9999	; 0x270f
 801318e:	6013      	str	r3, [r2, #0]
 8013190:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8013194:	4333      	orrs	r3, r6
 8013196:	f000 8593 	beq.w	8013cc0 <_dtoa_r+0xbb8>
 801319a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801319c:	b963      	cbnz	r3, 80131b8 <_dtoa_r+0xb0>
 801319e:	4b97      	ldr	r3, [pc, #604]	; (80133fc <_dtoa_r+0x2f4>)
 80131a0:	e027      	b.n	80131f2 <_dtoa_r+0xea>
 80131a2:	4b97      	ldr	r3, [pc, #604]	; (8013400 <_dtoa_r+0x2f8>)
 80131a4:	9300      	str	r3, [sp, #0]
 80131a6:	3308      	adds	r3, #8
 80131a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80131aa:	6013      	str	r3, [r2, #0]
 80131ac:	9800      	ldr	r0, [sp, #0]
 80131ae:	b013      	add	sp, #76	; 0x4c
 80131b0:	ecbd 8b04 	vpop	{d8-d9}
 80131b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b8:	4b90      	ldr	r3, [pc, #576]	; (80133fc <_dtoa_r+0x2f4>)
 80131ba:	9300      	str	r3, [sp, #0]
 80131bc:	3303      	adds	r3, #3
 80131be:	e7f3      	b.n	80131a8 <_dtoa_r+0xa0>
 80131c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131c4:	2200      	movs	r2, #0
 80131c6:	ec51 0b17 	vmov	r0, r1, d7
 80131ca:	eeb0 8a47 	vmov.f32	s16, s14
 80131ce:	eef0 8a67 	vmov.f32	s17, s15
 80131d2:	2300      	movs	r3, #0
 80131d4:	f7ed fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80131d8:	4681      	mov	r9, r0
 80131da:	b160      	cbz	r0, 80131f6 <_dtoa_r+0xee>
 80131dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131de:	2301      	movs	r3, #1
 80131e0:	6013      	str	r3, [r2, #0]
 80131e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f000 8568 	beq.w	8013cba <_dtoa_r+0xbb2>
 80131ea:	4b86      	ldr	r3, [pc, #536]	; (8013404 <_dtoa_r+0x2fc>)
 80131ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80131ee:	6013      	str	r3, [r2, #0]
 80131f0:	3b01      	subs	r3, #1
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	e7da      	b.n	80131ac <_dtoa_r+0xa4>
 80131f6:	aa10      	add	r2, sp, #64	; 0x40
 80131f8:	a911      	add	r1, sp, #68	; 0x44
 80131fa:	4620      	mov	r0, r4
 80131fc:	eeb0 0a48 	vmov.f32	s0, s16
 8013200:	eef0 0a68 	vmov.f32	s1, s17
 8013204:	f001 f99a 	bl	801453c <__d2b>
 8013208:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801320c:	4682      	mov	sl, r0
 801320e:	2d00      	cmp	r5, #0
 8013210:	d07f      	beq.n	8013312 <_dtoa_r+0x20a>
 8013212:	ee18 3a90 	vmov	r3, s17
 8013216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801321a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801321e:	ec51 0b18 	vmov	r0, r1, d8
 8013222:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801322a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801322e:	4619      	mov	r1, r3
 8013230:	2200      	movs	r2, #0
 8013232:	4b75      	ldr	r3, [pc, #468]	; (8013408 <_dtoa_r+0x300>)
 8013234:	f7ed f828 	bl	8000288 <__aeabi_dsub>
 8013238:	a367      	add	r3, pc, #412	; (adr r3, 80133d8 <_dtoa_r+0x2d0>)
 801323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323e:	f7ed f9db 	bl	80005f8 <__aeabi_dmul>
 8013242:	a367      	add	r3, pc, #412	; (adr r3, 80133e0 <_dtoa_r+0x2d8>)
 8013244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013248:	f7ed f820 	bl	800028c <__adddf3>
 801324c:	4606      	mov	r6, r0
 801324e:	4628      	mov	r0, r5
 8013250:	460f      	mov	r7, r1
 8013252:	f7ed f967 	bl	8000524 <__aeabi_i2d>
 8013256:	a364      	add	r3, pc, #400	; (adr r3, 80133e8 <_dtoa_r+0x2e0>)
 8013258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325c:	f7ed f9cc 	bl	80005f8 <__aeabi_dmul>
 8013260:	4602      	mov	r2, r0
 8013262:	460b      	mov	r3, r1
 8013264:	4630      	mov	r0, r6
 8013266:	4639      	mov	r1, r7
 8013268:	f7ed f810 	bl	800028c <__adddf3>
 801326c:	4606      	mov	r6, r0
 801326e:	460f      	mov	r7, r1
 8013270:	f7ed fc72 	bl	8000b58 <__aeabi_d2iz>
 8013274:	2200      	movs	r2, #0
 8013276:	4683      	mov	fp, r0
 8013278:	2300      	movs	r3, #0
 801327a:	4630      	mov	r0, r6
 801327c:	4639      	mov	r1, r7
 801327e:	f7ed fc2d 	bl	8000adc <__aeabi_dcmplt>
 8013282:	b148      	cbz	r0, 8013298 <_dtoa_r+0x190>
 8013284:	4658      	mov	r0, fp
 8013286:	f7ed f94d 	bl	8000524 <__aeabi_i2d>
 801328a:	4632      	mov	r2, r6
 801328c:	463b      	mov	r3, r7
 801328e:	f7ed fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013292:	b908      	cbnz	r0, 8013298 <_dtoa_r+0x190>
 8013294:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013298:	f1bb 0f16 	cmp.w	fp, #22
 801329c:	d857      	bhi.n	801334e <_dtoa_r+0x246>
 801329e:	4b5b      	ldr	r3, [pc, #364]	; (801340c <_dtoa_r+0x304>)
 80132a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80132a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a8:	ec51 0b18 	vmov	r0, r1, d8
 80132ac:	f7ed fc16 	bl	8000adc <__aeabi_dcmplt>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d04e      	beq.n	8013352 <_dtoa_r+0x24a>
 80132b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132b8:	2300      	movs	r3, #0
 80132ba:	930c      	str	r3, [sp, #48]	; 0x30
 80132bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132be:	1b5b      	subs	r3, r3, r5
 80132c0:	1e5a      	subs	r2, r3, #1
 80132c2:	bf45      	ittet	mi
 80132c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80132c8:	9305      	strmi	r3, [sp, #20]
 80132ca:	2300      	movpl	r3, #0
 80132cc:	2300      	movmi	r3, #0
 80132ce:	9206      	str	r2, [sp, #24]
 80132d0:	bf54      	ite	pl
 80132d2:	9305      	strpl	r3, [sp, #20]
 80132d4:	9306      	strmi	r3, [sp, #24]
 80132d6:	f1bb 0f00 	cmp.w	fp, #0
 80132da:	db3c      	blt.n	8013356 <_dtoa_r+0x24e>
 80132dc:	9b06      	ldr	r3, [sp, #24]
 80132de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80132e2:	445b      	add	r3, fp
 80132e4:	9306      	str	r3, [sp, #24]
 80132e6:	2300      	movs	r3, #0
 80132e8:	9308      	str	r3, [sp, #32]
 80132ea:	9b07      	ldr	r3, [sp, #28]
 80132ec:	2b09      	cmp	r3, #9
 80132ee:	d868      	bhi.n	80133c2 <_dtoa_r+0x2ba>
 80132f0:	2b05      	cmp	r3, #5
 80132f2:	bfc4      	itt	gt
 80132f4:	3b04      	subgt	r3, #4
 80132f6:	9307      	strgt	r3, [sp, #28]
 80132f8:	9b07      	ldr	r3, [sp, #28]
 80132fa:	f1a3 0302 	sub.w	r3, r3, #2
 80132fe:	bfcc      	ite	gt
 8013300:	2500      	movgt	r5, #0
 8013302:	2501      	movle	r5, #1
 8013304:	2b03      	cmp	r3, #3
 8013306:	f200 8085 	bhi.w	8013414 <_dtoa_r+0x30c>
 801330a:	e8df f003 	tbb	[pc, r3]
 801330e:	3b2e      	.short	0x3b2e
 8013310:	5839      	.short	0x5839
 8013312:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013316:	441d      	add	r5, r3
 8013318:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801331c:	2b20      	cmp	r3, #32
 801331e:	bfc1      	itttt	gt
 8013320:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013324:	fa08 f803 	lslgt.w	r8, r8, r3
 8013328:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801332c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013330:	bfd6      	itet	le
 8013332:	f1c3 0320 	rsble	r3, r3, #32
 8013336:	ea48 0003 	orrgt.w	r0, r8, r3
 801333a:	fa06 f003 	lslle.w	r0, r6, r3
 801333e:	f7ed f8e1 	bl	8000504 <__aeabi_ui2d>
 8013342:	2201      	movs	r2, #1
 8013344:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013348:	3d01      	subs	r5, #1
 801334a:	920e      	str	r2, [sp, #56]	; 0x38
 801334c:	e76f      	b.n	801322e <_dtoa_r+0x126>
 801334e:	2301      	movs	r3, #1
 8013350:	e7b3      	b.n	80132ba <_dtoa_r+0x1b2>
 8013352:	900c      	str	r0, [sp, #48]	; 0x30
 8013354:	e7b2      	b.n	80132bc <_dtoa_r+0x1b4>
 8013356:	9b05      	ldr	r3, [sp, #20]
 8013358:	eba3 030b 	sub.w	r3, r3, fp
 801335c:	9305      	str	r3, [sp, #20]
 801335e:	f1cb 0300 	rsb	r3, fp, #0
 8013362:	9308      	str	r3, [sp, #32]
 8013364:	2300      	movs	r3, #0
 8013366:	930b      	str	r3, [sp, #44]	; 0x2c
 8013368:	e7bf      	b.n	80132ea <_dtoa_r+0x1e2>
 801336a:	2300      	movs	r3, #0
 801336c:	9309      	str	r3, [sp, #36]	; 0x24
 801336e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013370:	2b00      	cmp	r3, #0
 8013372:	dc52      	bgt.n	801341a <_dtoa_r+0x312>
 8013374:	2301      	movs	r3, #1
 8013376:	9301      	str	r3, [sp, #4]
 8013378:	9304      	str	r3, [sp, #16]
 801337a:	461a      	mov	r2, r3
 801337c:	920a      	str	r2, [sp, #40]	; 0x28
 801337e:	e00b      	b.n	8013398 <_dtoa_r+0x290>
 8013380:	2301      	movs	r3, #1
 8013382:	e7f3      	b.n	801336c <_dtoa_r+0x264>
 8013384:	2300      	movs	r3, #0
 8013386:	9309      	str	r3, [sp, #36]	; 0x24
 8013388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801338a:	445b      	add	r3, fp
 801338c:	9301      	str	r3, [sp, #4]
 801338e:	3301      	adds	r3, #1
 8013390:	2b01      	cmp	r3, #1
 8013392:	9304      	str	r3, [sp, #16]
 8013394:	bfb8      	it	lt
 8013396:	2301      	movlt	r3, #1
 8013398:	69e0      	ldr	r0, [r4, #28]
 801339a:	2100      	movs	r1, #0
 801339c:	2204      	movs	r2, #4
 801339e:	f102 0614 	add.w	r6, r2, #20
 80133a2:	429e      	cmp	r6, r3
 80133a4:	d93d      	bls.n	8013422 <_dtoa_r+0x31a>
 80133a6:	6041      	str	r1, [r0, #4]
 80133a8:	4620      	mov	r0, r4
 80133aa:	f000 fceb 	bl	8013d84 <_Balloc>
 80133ae:	9000      	str	r0, [sp, #0]
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d139      	bne.n	8013428 <_dtoa_r+0x320>
 80133b4:	4b16      	ldr	r3, [pc, #88]	; (8013410 <_dtoa_r+0x308>)
 80133b6:	4602      	mov	r2, r0
 80133b8:	f240 11af 	movw	r1, #431	; 0x1af
 80133bc:	e6bd      	b.n	801313a <_dtoa_r+0x32>
 80133be:	2301      	movs	r3, #1
 80133c0:	e7e1      	b.n	8013386 <_dtoa_r+0x27e>
 80133c2:	2501      	movs	r5, #1
 80133c4:	2300      	movs	r3, #0
 80133c6:	9307      	str	r3, [sp, #28]
 80133c8:	9509      	str	r5, [sp, #36]	; 0x24
 80133ca:	f04f 33ff 	mov.w	r3, #4294967295
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	9304      	str	r3, [sp, #16]
 80133d2:	2200      	movs	r2, #0
 80133d4:	2312      	movs	r3, #18
 80133d6:	e7d1      	b.n	801337c <_dtoa_r+0x274>
 80133d8:	636f4361 	.word	0x636f4361
 80133dc:	3fd287a7 	.word	0x3fd287a7
 80133e0:	8b60c8b3 	.word	0x8b60c8b3
 80133e4:	3fc68a28 	.word	0x3fc68a28
 80133e8:	509f79fb 	.word	0x509f79fb
 80133ec:	3fd34413 	.word	0x3fd34413
 80133f0:	080169d6 	.word	0x080169d6
 80133f4:	080169ed 	.word	0x080169ed
 80133f8:	7ff00000 	.word	0x7ff00000
 80133fc:	080169d2 	.word	0x080169d2
 8013400:	080169c9 	.word	0x080169c9
 8013404:	080169a1 	.word	0x080169a1
 8013408:	3ff80000 	.word	0x3ff80000
 801340c:	08016ad8 	.word	0x08016ad8
 8013410:	08016a45 	.word	0x08016a45
 8013414:	2301      	movs	r3, #1
 8013416:	9309      	str	r3, [sp, #36]	; 0x24
 8013418:	e7d7      	b.n	80133ca <_dtoa_r+0x2c2>
 801341a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801341c:	9301      	str	r3, [sp, #4]
 801341e:	9304      	str	r3, [sp, #16]
 8013420:	e7ba      	b.n	8013398 <_dtoa_r+0x290>
 8013422:	3101      	adds	r1, #1
 8013424:	0052      	lsls	r2, r2, #1
 8013426:	e7ba      	b.n	801339e <_dtoa_r+0x296>
 8013428:	69e3      	ldr	r3, [r4, #28]
 801342a:	9a00      	ldr	r2, [sp, #0]
 801342c:	601a      	str	r2, [r3, #0]
 801342e:	9b04      	ldr	r3, [sp, #16]
 8013430:	2b0e      	cmp	r3, #14
 8013432:	f200 80a8 	bhi.w	8013586 <_dtoa_r+0x47e>
 8013436:	2d00      	cmp	r5, #0
 8013438:	f000 80a5 	beq.w	8013586 <_dtoa_r+0x47e>
 801343c:	f1bb 0f00 	cmp.w	fp, #0
 8013440:	dd38      	ble.n	80134b4 <_dtoa_r+0x3ac>
 8013442:	4bc0      	ldr	r3, [pc, #768]	; (8013744 <_dtoa_r+0x63c>)
 8013444:	f00b 020f 	and.w	r2, fp, #15
 8013448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801344c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013450:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013454:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013458:	d019      	beq.n	801348e <_dtoa_r+0x386>
 801345a:	4bbb      	ldr	r3, [pc, #748]	; (8013748 <_dtoa_r+0x640>)
 801345c:	ec51 0b18 	vmov	r0, r1, d8
 8013460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013464:	f7ed f9f2 	bl	800084c <__aeabi_ddiv>
 8013468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801346c:	f008 080f 	and.w	r8, r8, #15
 8013470:	2503      	movs	r5, #3
 8013472:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013748 <_dtoa_r+0x640>
 8013476:	f1b8 0f00 	cmp.w	r8, #0
 801347a:	d10a      	bne.n	8013492 <_dtoa_r+0x38a>
 801347c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013480:	4632      	mov	r2, r6
 8013482:	463b      	mov	r3, r7
 8013484:	f7ed f9e2 	bl	800084c <__aeabi_ddiv>
 8013488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801348c:	e02b      	b.n	80134e6 <_dtoa_r+0x3de>
 801348e:	2502      	movs	r5, #2
 8013490:	e7ef      	b.n	8013472 <_dtoa_r+0x36a>
 8013492:	f018 0f01 	tst.w	r8, #1
 8013496:	d008      	beq.n	80134aa <_dtoa_r+0x3a2>
 8013498:	4630      	mov	r0, r6
 801349a:	4639      	mov	r1, r7
 801349c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80134a0:	f7ed f8aa 	bl	80005f8 <__aeabi_dmul>
 80134a4:	3501      	adds	r5, #1
 80134a6:	4606      	mov	r6, r0
 80134a8:	460f      	mov	r7, r1
 80134aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80134ae:	f109 0908 	add.w	r9, r9, #8
 80134b2:	e7e0      	b.n	8013476 <_dtoa_r+0x36e>
 80134b4:	f000 809f 	beq.w	80135f6 <_dtoa_r+0x4ee>
 80134b8:	f1cb 0600 	rsb	r6, fp, #0
 80134bc:	4ba1      	ldr	r3, [pc, #644]	; (8013744 <_dtoa_r+0x63c>)
 80134be:	4fa2      	ldr	r7, [pc, #648]	; (8013748 <_dtoa_r+0x640>)
 80134c0:	f006 020f 	and.w	r2, r6, #15
 80134c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134cc:	ec51 0b18 	vmov	r0, r1, d8
 80134d0:	f7ed f892 	bl	80005f8 <__aeabi_dmul>
 80134d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134d8:	1136      	asrs	r6, r6, #4
 80134da:	2300      	movs	r3, #0
 80134dc:	2502      	movs	r5, #2
 80134de:	2e00      	cmp	r6, #0
 80134e0:	d17e      	bne.n	80135e0 <_dtoa_r+0x4d8>
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d1d0      	bne.n	8013488 <_dtoa_r+0x380>
 80134e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	f000 8084 	beq.w	80135fa <_dtoa_r+0x4f2>
 80134f2:	4b96      	ldr	r3, [pc, #600]	; (801374c <_dtoa_r+0x644>)
 80134f4:	2200      	movs	r2, #0
 80134f6:	4640      	mov	r0, r8
 80134f8:	4649      	mov	r1, r9
 80134fa:	f7ed faef 	bl	8000adc <__aeabi_dcmplt>
 80134fe:	2800      	cmp	r0, #0
 8013500:	d07b      	beq.n	80135fa <_dtoa_r+0x4f2>
 8013502:	9b04      	ldr	r3, [sp, #16]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d078      	beq.n	80135fa <_dtoa_r+0x4f2>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	dd39      	ble.n	8013582 <_dtoa_r+0x47a>
 801350e:	4b90      	ldr	r3, [pc, #576]	; (8013750 <_dtoa_r+0x648>)
 8013510:	2200      	movs	r2, #0
 8013512:	4640      	mov	r0, r8
 8013514:	4649      	mov	r1, r9
 8013516:	f7ed f86f 	bl	80005f8 <__aeabi_dmul>
 801351a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801351e:	9e01      	ldr	r6, [sp, #4]
 8013520:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013524:	3501      	adds	r5, #1
 8013526:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801352a:	4628      	mov	r0, r5
 801352c:	f7ec fffa 	bl	8000524 <__aeabi_i2d>
 8013530:	4642      	mov	r2, r8
 8013532:	464b      	mov	r3, r9
 8013534:	f7ed f860 	bl	80005f8 <__aeabi_dmul>
 8013538:	4b86      	ldr	r3, [pc, #536]	; (8013754 <_dtoa_r+0x64c>)
 801353a:	2200      	movs	r2, #0
 801353c:	f7ec fea6 	bl	800028c <__adddf3>
 8013540:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013548:	9303      	str	r3, [sp, #12]
 801354a:	2e00      	cmp	r6, #0
 801354c:	d158      	bne.n	8013600 <_dtoa_r+0x4f8>
 801354e:	4b82      	ldr	r3, [pc, #520]	; (8013758 <_dtoa_r+0x650>)
 8013550:	2200      	movs	r2, #0
 8013552:	4640      	mov	r0, r8
 8013554:	4649      	mov	r1, r9
 8013556:	f7ec fe97 	bl	8000288 <__aeabi_dsub>
 801355a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801355e:	4680      	mov	r8, r0
 8013560:	4689      	mov	r9, r1
 8013562:	f7ed fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8013566:	2800      	cmp	r0, #0
 8013568:	f040 8296 	bne.w	8013a98 <_dtoa_r+0x990>
 801356c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013570:	4640      	mov	r0, r8
 8013572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013576:	4649      	mov	r1, r9
 8013578:	f7ed fab0 	bl	8000adc <__aeabi_dcmplt>
 801357c:	2800      	cmp	r0, #0
 801357e:	f040 8289 	bne.w	8013a94 <_dtoa_r+0x98c>
 8013582:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013588:	2b00      	cmp	r3, #0
 801358a:	f2c0 814e 	blt.w	801382a <_dtoa_r+0x722>
 801358e:	f1bb 0f0e 	cmp.w	fp, #14
 8013592:	f300 814a 	bgt.w	801382a <_dtoa_r+0x722>
 8013596:	4b6b      	ldr	r3, [pc, #428]	; (8013744 <_dtoa_r+0x63c>)
 8013598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801359c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	f280 80dc 	bge.w	8013760 <_dtoa_r+0x658>
 80135a8:	9b04      	ldr	r3, [sp, #16]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f300 80d8 	bgt.w	8013760 <_dtoa_r+0x658>
 80135b0:	f040 826f 	bne.w	8013a92 <_dtoa_r+0x98a>
 80135b4:	4b68      	ldr	r3, [pc, #416]	; (8013758 <_dtoa_r+0x650>)
 80135b6:	2200      	movs	r2, #0
 80135b8:	4640      	mov	r0, r8
 80135ba:	4649      	mov	r1, r9
 80135bc:	f7ed f81c 	bl	80005f8 <__aeabi_dmul>
 80135c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135c4:	f7ed fa9e 	bl	8000b04 <__aeabi_dcmpge>
 80135c8:	9e04      	ldr	r6, [sp, #16]
 80135ca:	4637      	mov	r7, r6
 80135cc:	2800      	cmp	r0, #0
 80135ce:	f040 8245 	bne.w	8013a5c <_dtoa_r+0x954>
 80135d2:	9d00      	ldr	r5, [sp, #0]
 80135d4:	2331      	movs	r3, #49	; 0x31
 80135d6:	f805 3b01 	strb.w	r3, [r5], #1
 80135da:	f10b 0b01 	add.w	fp, fp, #1
 80135de:	e241      	b.n	8013a64 <_dtoa_r+0x95c>
 80135e0:	07f2      	lsls	r2, r6, #31
 80135e2:	d505      	bpl.n	80135f0 <_dtoa_r+0x4e8>
 80135e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135e8:	f7ed f806 	bl	80005f8 <__aeabi_dmul>
 80135ec:	3501      	adds	r5, #1
 80135ee:	2301      	movs	r3, #1
 80135f0:	1076      	asrs	r6, r6, #1
 80135f2:	3708      	adds	r7, #8
 80135f4:	e773      	b.n	80134de <_dtoa_r+0x3d6>
 80135f6:	2502      	movs	r5, #2
 80135f8:	e775      	b.n	80134e6 <_dtoa_r+0x3de>
 80135fa:	9e04      	ldr	r6, [sp, #16]
 80135fc:	465f      	mov	r7, fp
 80135fe:	e792      	b.n	8013526 <_dtoa_r+0x41e>
 8013600:	9900      	ldr	r1, [sp, #0]
 8013602:	4b50      	ldr	r3, [pc, #320]	; (8013744 <_dtoa_r+0x63c>)
 8013604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013608:	4431      	add	r1, r6
 801360a:	9102      	str	r1, [sp, #8]
 801360c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801360e:	eeb0 9a47 	vmov.f32	s18, s14
 8013612:	eef0 9a67 	vmov.f32	s19, s15
 8013616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801361a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801361e:	2900      	cmp	r1, #0
 8013620:	d044      	beq.n	80136ac <_dtoa_r+0x5a4>
 8013622:	494e      	ldr	r1, [pc, #312]	; (801375c <_dtoa_r+0x654>)
 8013624:	2000      	movs	r0, #0
 8013626:	f7ed f911 	bl	800084c <__aeabi_ddiv>
 801362a:	ec53 2b19 	vmov	r2, r3, d9
 801362e:	f7ec fe2b 	bl	8000288 <__aeabi_dsub>
 8013632:	9d00      	ldr	r5, [sp, #0]
 8013634:	ec41 0b19 	vmov	d9, r0, r1
 8013638:	4649      	mov	r1, r9
 801363a:	4640      	mov	r0, r8
 801363c:	f7ed fa8c 	bl	8000b58 <__aeabi_d2iz>
 8013640:	4606      	mov	r6, r0
 8013642:	f7ec ff6f 	bl	8000524 <__aeabi_i2d>
 8013646:	4602      	mov	r2, r0
 8013648:	460b      	mov	r3, r1
 801364a:	4640      	mov	r0, r8
 801364c:	4649      	mov	r1, r9
 801364e:	f7ec fe1b 	bl	8000288 <__aeabi_dsub>
 8013652:	3630      	adds	r6, #48	; 0x30
 8013654:	f805 6b01 	strb.w	r6, [r5], #1
 8013658:	ec53 2b19 	vmov	r2, r3, d9
 801365c:	4680      	mov	r8, r0
 801365e:	4689      	mov	r9, r1
 8013660:	f7ed fa3c 	bl	8000adc <__aeabi_dcmplt>
 8013664:	2800      	cmp	r0, #0
 8013666:	d164      	bne.n	8013732 <_dtoa_r+0x62a>
 8013668:	4642      	mov	r2, r8
 801366a:	464b      	mov	r3, r9
 801366c:	4937      	ldr	r1, [pc, #220]	; (801374c <_dtoa_r+0x644>)
 801366e:	2000      	movs	r0, #0
 8013670:	f7ec fe0a 	bl	8000288 <__aeabi_dsub>
 8013674:	ec53 2b19 	vmov	r2, r3, d9
 8013678:	f7ed fa30 	bl	8000adc <__aeabi_dcmplt>
 801367c:	2800      	cmp	r0, #0
 801367e:	f040 80b6 	bne.w	80137ee <_dtoa_r+0x6e6>
 8013682:	9b02      	ldr	r3, [sp, #8]
 8013684:	429d      	cmp	r5, r3
 8013686:	f43f af7c 	beq.w	8013582 <_dtoa_r+0x47a>
 801368a:	4b31      	ldr	r3, [pc, #196]	; (8013750 <_dtoa_r+0x648>)
 801368c:	ec51 0b19 	vmov	r0, r1, d9
 8013690:	2200      	movs	r2, #0
 8013692:	f7ec ffb1 	bl	80005f8 <__aeabi_dmul>
 8013696:	4b2e      	ldr	r3, [pc, #184]	; (8013750 <_dtoa_r+0x648>)
 8013698:	ec41 0b19 	vmov	d9, r0, r1
 801369c:	2200      	movs	r2, #0
 801369e:	4640      	mov	r0, r8
 80136a0:	4649      	mov	r1, r9
 80136a2:	f7ec ffa9 	bl	80005f8 <__aeabi_dmul>
 80136a6:	4680      	mov	r8, r0
 80136a8:	4689      	mov	r9, r1
 80136aa:	e7c5      	b.n	8013638 <_dtoa_r+0x530>
 80136ac:	ec51 0b17 	vmov	r0, r1, d7
 80136b0:	f7ec ffa2 	bl	80005f8 <__aeabi_dmul>
 80136b4:	9b02      	ldr	r3, [sp, #8]
 80136b6:	9d00      	ldr	r5, [sp, #0]
 80136b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80136ba:	ec41 0b19 	vmov	d9, r0, r1
 80136be:	4649      	mov	r1, r9
 80136c0:	4640      	mov	r0, r8
 80136c2:	f7ed fa49 	bl	8000b58 <__aeabi_d2iz>
 80136c6:	4606      	mov	r6, r0
 80136c8:	f7ec ff2c 	bl	8000524 <__aeabi_i2d>
 80136cc:	3630      	adds	r6, #48	; 0x30
 80136ce:	4602      	mov	r2, r0
 80136d0:	460b      	mov	r3, r1
 80136d2:	4640      	mov	r0, r8
 80136d4:	4649      	mov	r1, r9
 80136d6:	f7ec fdd7 	bl	8000288 <__aeabi_dsub>
 80136da:	f805 6b01 	strb.w	r6, [r5], #1
 80136de:	9b02      	ldr	r3, [sp, #8]
 80136e0:	429d      	cmp	r5, r3
 80136e2:	4680      	mov	r8, r0
 80136e4:	4689      	mov	r9, r1
 80136e6:	f04f 0200 	mov.w	r2, #0
 80136ea:	d124      	bne.n	8013736 <_dtoa_r+0x62e>
 80136ec:	4b1b      	ldr	r3, [pc, #108]	; (801375c <_dtoa_r+0x654>)
 80136ee:	ec51 0b19 	vmov	r0, r1, d9
 80136f2:	f7ec fdcb 	bl	800028c <__adddf3>
 80136f6:	4602      	mov	r2, r0
 80136f8:	460b      	mov	r3, r1
 80136fa:	4640      	mov	r0, r8
 80136fc:	4649      	mov	r1, r9
 80136fe:	f7ed fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 8013702:	2800      	cmp	r0, #0
 8013704:	d173      	bne.n	80137ee <_dtoa_r+0x6e6>
 8013706:	ec53 2b19 	vmov	r2, r3, d9
 801370a:	4914      	ldr	r1, [pc, #80]	; (801375c <_dtoa_r+0x654>)
 801370c:	2000      	movs	r0, #0
 801370e:	f7ec fdbb 	bl	8000288 <__aeabi_dsub>
 8013712:	4602      	mov	r2, r0
 8013714:	460b      	mov	r3, r1
 8013716:	4640      	mov	r0, r8
 8013718:	4649      	mov	r1, r9
 801371a:	f7ed f9df 	bl	8000adc <__aeabi_dcmplt>
 801371e:	2800      	cmp	r0, #0
 8013720:	f43f af2f 	beq.w	8013582 <_dtoa_r+0x47a>
 8013724:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013726:	1e6b      	subs	r3, r5, #1
 8013728:	930f      	str	r3, [sp, #60]	; 0x3c
 801372a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801372e:	2b30      	cmp	r3, #48	; 0x30
 8013730:	d0f8      	beq.n	8013724 <_dtoa_r+0x61c>
 8013732:	46bb      	mov	fp, r7
 8013734:	e04a      	b.n	80137cc <_dtoa_r+0x6c4>
 8013736:	4b06      	ldr	r3, [pc, #24]	; (8013750 <_dtoa_r+0x648>)
 8013738:	f7ec ff5e 	bl	80005f8 <__aeabi_dmul>
 801373c:	4680      	mov	r8, r0
 801373e:	4689      	mov	r9, r1
 8013740:	e7bd      	b.n	80136be <_dtoa_r+0x5b6>
 8013742:	bf00      	nop
 8013744:	08016ad8 	.word	0x08016ad8
 8013748:	08016ab0 	.word	0x08016ab0
 801374c:	3ff00000 	.word	0x3ff00000
 8013750:	40240000 	.word	0x40240000
 8013754:	401c0000 	.word	0x401c0000
 8013758:	40140000 	.word	0x40140000
 801375c:	3fe00000 	.word	0x3fe00000
 8013760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013764:	9d00      	ldr	r5, [sp, #0]
 8013766:	4642      	mov	r2, r8
 8013768:	464b      	mov	r3, r9
 801376a:	4630      	mov	r0, r6
 801376c:	4639      	mov	r1, r7
 801376e:	f7ed f86d 	bl	800084c <__aeabi_ddiv>
 8013772:	f7ed f9f1 	bl	8000b58 <__aeabi_d2iz>
 8013776:	9001      	str	r0, [sp, #4]
 8013778:	f7ec fed4 	bl	8000524 <__aeabi_i2d>
 801377c:	4642      	mov	r2, r8
 801377e:	464b      	mov	r3, r9
 8013780:	f7ec ff3a 	bl	80005f8 <__aeabi_dmul>
 8013784:	4602      	mov	r2, r0
 8013786:	460b      	mov	r3, r1
 8013788:	4630      	mov	r0, r6
 801378a:	4639      	mov	r1, r7
 801378c:	f7ec fd7c 	bl	8000288 <__aeabi_dsub>
 8013790:	9e01      	ldr	r6, [sp, #4]
 8013792:	9f04      	ldr	r7, [sp, #16]
 8013794:	3630      	adds	r6, #48	; 0x30
 8013796:	f805 6b01 	strb.w	r6, [r5], #1
 801379a:	9e00      	ldr	r6, [sp, #0]
 801379c:	1bae      	subs	r6, r5, r6
 801379e:	42b7      	cmp	r7, r6
 80137a0:	4602      	mov	r2, r0
 80137a2:	460b      	mov	r3, r1
 80137a4:	d134      	bne.n	8013810 <_dtoa_r+0x708>
 80137a6:	f7ec fd71 	bl	800028c <__adddf3>
 80137aa:	4642      	mov	r2, r8
 80137ac:	464b      	mov	r3, r9
 80137ae:	4606      	mov	r6, r0
 80137b0:	460f      	mov	r7, r1
 80137b2:	f7ed f9b1 	bl	8000b18 <__aeabi_dcmpgt>
 80137b6:	b9c8      	cbnz	r0, 80137ec <_dtoa_r+0x6e4>
 80137b8:	4642      	mov	r2, r8
 80137ba:	464b      	mov	r3, r9
 80137bc:	4630      	mov	r0, r6
 80137be:	4639      	mov	r1, r7
 80137c0:	f7ed f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80137c4:	b110      	cbz	r0, 80137cc <_dtoa_r+0x6c4>
 80137c6:	9b01      	ldr	r3, [sp, #4]
 80137c8:	07db      	lsls	r3, r3, #31
 80137ca:	d40f      	bmi.n	80137ec <_dtoa_r+0x6e4>
 80137cc:	4651      	mov	r1, sl
 80137ce:	4620      	mov	r0, r4
 80137d0:	f000 fb18 	bl	8013e04 <_Bfree>
 80137d4:	2300      	movs	r3, #0
 80137d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137d8:	702b      	strb	r3, [r5, #0]
 80137da:	f10b 0301 	add.w	r3, fp, #1
 80137de:	6013      	str	r3, [r2, #0]
 80137e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f43f ace2 	beq.w	80131ac <_dtoa_r+0xa4>
 80137e8:	601d      	str	r5, [r3, #0]
 80137ea:	e4df      	b.n	80131ac <_dtoa_r+0xa4>
 80137ec:	465f      	mov	r7, fp
 80137ee:	462b      	mov	r3, r5
 80137f0:	461d      	mov	r5, r3
 80137f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137f6:	2a39      	cmp	r2, #57	; 0x39
 80137f8:	d106      	bne.n	8013808 <_dtoa_r+0x700>
 80137fa:	9a00      	ldr	r2, [sp, #0]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d1f7      	bne.n	80137f0 <_dtoa_r+0x6e8>
 8013800:	9900      	ldr	r1, [sp, #0]
 8013802:	2230      	movs	r2, #48	; 0x30
 8013804:	3701      	adds	r7, #1
 8013806:	700a      	strb	r2, [r1, #0]
 8013808:	781a      	ldrb	r2, [r3, #0]
 801380a:	3201      	adds	r2, #1
 801380c:	701a      	strb	r2, [r3, #0]
 801380e:	e790      	b.n	8013732 <_dtoa_r+0x62a>
 8013810:	4ba3      	ldr	r3, [pc, #652]	; (8013aa0 <_dtoa_r+0x998>)
 8013812:	2200      	movs	r2, #0
 8013814:	f7ec fef0 	bl	80005f8 <__aeabi_dmul>
 8013818:	2200      	movs	r2, #0
 801381a:	2300      	movs	r3, #0
 801381c:	4606      	mov	r6, r0
 801381e:	460f      	mov	r7, r1
 8013820:	f7ed f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8013824:	2800      	cmp	r0, #0
 8013826:	d09e      	beq.n	8013766 <_dtoa_r+0x65e>
 8013828:	e7d0      	b.n	80137cc <_dtoa_r+0x6c4>
 801382a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801382c:	2a00      	cmp	r2, #0
 801382e:	f000 80ca 	beq.w	80139c6 <_dtoa_r+0x8be>
 8013832:	9a07      	ldr	r2, [sp, #28]
 8013834:	2a01      	cmp	r2, #1
 8013836:	f300 80ad 	bgt.w	8013994 <_dtoa_r+0x88c>
 801383a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801383c:	2a00      	cmp	r2, #0
 801383e:	f000 80a5 	beq.w	801398c <_dtoa_r+0x884>
 8013842:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013846:	9e08      	ldr	r6, [sp, #32]
 8013848:	9d05      	ldr	r5, [sp, #20]
 801384a:	9a05      	ldr	r2, [sp, #20]
 801384c:	441a      	add	r2, r3
 801384e:	9205      	str	r2, [sp, #20]
 8013850:	9a06      	ldr	r2, [sp, #24]
 8013852:	2101      	movs	r1, #1
 8013854:	441a      	add	r2, r3
 8013856:	4620      	mov	r0, r4
 8013858:	9206      	str	r2, [sp, #24]
 801385a:	f000 fbd3 	bl	8014004 <__i2b>
 801385e:	4607      	mov	r7, r0
 8013860:	b165      	cbz	r5, 801387c <_dtoa_r+0x774>
 8013862:	9b06      	ldr	r3, [sp, #24]
 8013864:	2b00      	cmp	r3, #0
 8013866:	dd09      	ble.n	801387c <_dtoa_r+0x774>
 8013868:	42ab      	cmp	r3, r5
 801386a:	9a05      	ldr	r2, [sp, #20]
 801386c:	bfa8      	it	ge
 801386e:	462b      	movge	r3, r5
 8013870:	1ad2      	subs	r2, r2, r3
 8013872:	9205      	str	r2, [sp, #20]
 8013874:	9a06      	ldr	r2, [sp, #24]
 8013876:	1aed      	subs	r5, r5, r3
 8013878:	1ad3      	subs	r3, r2, r3
 801387a:	9306      	str	r3, [sp, #24]
 801387c:	9b08      	ldr	r3, [sp, #32]
 801387e:	b1f3      	cbz	r3, 80138be <_dtoa_r+0x7b6>
 8013880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013882:	2b00      	cmp	r3, #0
 8013884:	f000 80a3 	beq.w	80139ce <_dtoa_r+0x8c6>
 8013888:	2e00      	cmp	r6, #0
 801388a:	dd10      	ble.n	80138ae <_dtoa_r+0x7a6>
 801388c:	4639      	mov	r1, r7
 801388e:	4632      	mov	r2, r6
 8013890:	4620      	mov	r0, r4
 8013892:	f000 fc77 	bl	8014184 <__pow5mult>
 8013896:	4652      	mov	r2, sl
 8013898:	4601      	mov	r1, r0
 801389a:	4607      	mov	r7, r0
 801389c:	4620      	mov	r0, r4
 801389e:	f000 fbc7 	bl	8014030 <__multiply>
 80138a2:	4651      	mov	r1, sl
 80138a4:	4680      	mov	r8, r0
 80138a6:	4620      	mov	r0, r4
 80138a8:	f000 faac 	bl	8013e04 <_Bfree>
 80138ac:	46c2      	mov	sl, r8
 80138ae:	9b08      	ldr	r3, [sp, #32]
 80138b0:	1b9a      	subs	r2, r3, r6
 80138b2:	d004      	beq.n	80138be <_dtoa_r+0x7b6>
 80138b4:	4651      	mov	r1, sl
 80138b6:	4620      	mov	r0, r4
 80138b8:	f000 fc64 	bl	8014184 <__pow5mult>
 80138bc:	4682      	mov	sl, r0
 80138be:	2101      	movs	r1, #1
 80138c0:	4620      	mov	r0, r4
 80138c2:	f000 fb9f 	bl	8014004 <__i2b>
 80138c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	4606      	mov	r6, r0
 80138cc:	f340 8081 	ble.w	80139d2 <_dtoa_r+0x8ca>
 80138d0:	461a      	mov	r2, r3
 80138d2:	4601      	mov	r1, r0
 80138d4:	4620      	mov	r0, r4
 80138d6:	f000 fc55 	bl	8014184 <__pow5mult>
 80138da:	9b07      	ldr	r3, [sp, #28]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	4606      	mov	r6, r0
 80138e0:	dd7a      	ble.n	80139d8 <_dtoa_r+0x8d0>
 80138e2:	f04f 0800 	mov.w	r8, #0
 80138e6:	6933      	ldr	r3, [r6, #16]
 80138e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80138ec:	6918      	ldr	r0, [r3, #16]
 80138ee:	f000 fb3b 	bl	8013f68 <__hi0bits>
 80138f2:	f1c0 0020 	rsb	r0, r0, #32
 80138f6:	9b06      	ldr	r3, [sp, #24]
 80138f8:	4418      	add	r0, r3
 80138fa:	f010 001f 	ands.w	r0, r0, #31
 80138fe:	f000 8094 	beq.w	8013a2a <_dtoa_r+0x922>
 8013902:	f1c0 0320 	rsb	r3, r0, #32
 8013906:	2b04      	cmp	r3, #4
 8013908:	f340 8085 	ble.w	8013a16 <_dtoa_r+0x90e>
 801390c:	9b05      	ldr	r3, [sp, #20]
 801390e:	f1c0 001c 	rsb	r0, r0, #28
 8013912:	4403      	add	r3, r0
 8013914:	9305      	str	r3, [sp, #20]
 8013916:	9b06      	ldr	r3, [sp, #24]
 8013918:	4403      	add	r3, r0
 801391a:	4405      	add	r5, r0
 801391c:	9306      	str	r3, [sp, #24]
 801391e:	9b05      	ldr	r3, [sp, #20]
 8013920:	2b00      	cmp	r3, #0
 8013922:	dd05      	ble.n	8013930 <_dtoa_r+0x828>
 8013924:	4651      	mov	r1, sl
 8013926:	461a      	mov	r2, r3
 8013928:	4620      	mov	r0, r4
 801392a:	f000 fc85 	bl	8014238 <__lshift>
 801392e:	4682      	mov	sl, r0
 8013930:	9b06      	ldr	r3, [sp, #24]
 8013932:	2b00      	cmp	r3, #0
 8013934:	dd05      	ble.n	8013942 <_dtoa_r+0x83a>
 8013936:	4631      	mov	r1, r6
 8013938:	461a      	mov	r2, r3
 801393a:	4620      	mov	r0, r4
 801393c:	f000 fc7c 	bl	8014238 <__lshift>
 8013940:	4606      	mov	r6, r0
 8013942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013944:	2b00      	cmp	r3, #0
 8013946:	d072      	beq.n	8013a2e <_dtoa_r+0x926>
 8013948:	4631      	mov	r1, r6
 801394a:	4650      	mov	r0, sl
 801394c:	f000 fce0 	bl	8014310 <__mcmp>
 8013950:	2800      	cmp	r0, #0
 8013952:	da6c      	bge.n	8013a2e <_dtoa_r+0x926>
 8013954:	2300      	movs	r3, #0
 8013956:	4651      	mov	r1, sl
 8013958:	220a      	movs	r2, #10
 801395a:	4620      	mov	r0, r4
 801395c:	f000 fa74 	bl	8013e48 <__multadd>
 8013960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013966:	4682      	mov	sl, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	f000 81b0 	beq.w	8013cce <_dtoa_r+0xbc6>
 801396e:	2300      	movs	r3, #0
 8013970:	4639      	mov	r1, r7
 8013972:	220a      	movs	r2, #10
 8013974:	4620      	mov	r0, r4
 8013976:	f000 fa67 	bl	8013e48 <__multadd>
 801397a:	9b01      	ldr	r3, [sp, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	4607      	mov	r7, r0
 8013980:	f300 8096 	bgt.w	8013ab0 <_dtoa_r+0x9a8>
 8013984:	9b07      	ldr	r3, [sp, #28]
 8013986:	2b02      	cmp	r3, #2
 8013988:	dc59      	bgt.n	8013a3e <_dtoa_r+0x936>
 801398a:	e091      	b.n	8013ab0 <_dtoa_r+0x9a8>
 801398c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801398e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013992:	e758      	b.n	8013846 <_dtoa_r+0x73e>
 8013994:	9b04      	ldr	r3, [sp, #16]
 8013996:	1e5e      	subs	r6, r3, #1
 8013998:	9b08      	ldr	r3, [sp, #32]
 801399a:	42b3      	cmp	r3, r6
 801399c:	bfbf      	itttt	lt
 801399e:	9b08      	ldrlt	r3, [sp, #32]
 80139a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80139a2:	9608      	strlt	r6, [sp, #32]
 80139a4:	1af3      	sublt	r3, r6, r3
 80139a6:	bfb4      	ite	lt
 80139a8:	18d2      	addlt	r2, r2, r3
 80139aa:	1b9e      	subge	r6, r3, r6
 80139ac:	9b04      	ldr	r3, [sp, #16]
 80139ae:	bfbc      	itt	lt
 80139b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80139b2:	2600      	movlt	r6, #0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	bfb7      	itett	lt
 80139b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80139bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80139c0:	1a9d      	sublt	r5, r3, r2
 80139c2:	2300      	movlt	r3, #0
 80139c4:	e741      	b.n	801384a <_dtoa_r+0x742>
 80139c6:	9e08      	ldr	r6, [sp, #32]
 80139c8:	9d05      	ldr	r5, [sp, #20]
 80139ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80139cc:	e748      	b.n	8013860 <_dtoa_r+0x758>
 80139ce:	9a08      	ldr	r2, [sp, #32]
 80139d0:	e770      	b.n	80138b4 <_dtoa_r+0x7ac>
 80139d2:	9b07      	ldr	r3, [sp, #28]
 80139d4:	2b01      	cmp	r3, #1
 80139d6:	dc19      	bgt.n	8013a0c <_dtoa_r+0x904>
 80139d8:	9b02      	ldr	r3, [sp, #8]
 80139da:	b9bb      	cbnz	r3, 8013a0c <_dtoa_r+0x904>
 80139dc:	9b03      	ldr	r3, [sp, #12]
 80139de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139e2:	b99b      	cbnz	r3, 8013a0c <_dtoa_r+0x904>
 80139e4:	9b03      	ldr	r3, [sp, #12]
 80139e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139ea:	0d1b      	lsrs	r3, r3, #20
 80139ec:	051b      	lsls	r3, r3, #20
 80139ee:	b183      	cbz	r3, 8013a12 <_dtoa_r+0x90a>
 80139f0:	9b05      	ldr	r3, [sp, #20]
 80139f2:	3301      	adds	r3, #1
 80139f4:	9305      	str	r3, [sp, #20]
 80139f6:	9b06      	ldr	r3, [sp, #24]
 80139f8:	3301      	adds	r3, #1
 80139fa:	9306      	str	r3, [sp, #24]
 80139fc:	f04f 0801 	mov.w	r8, #1
 8013a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f47f af6f 	bne.w	80138e6 <_dtoa_r+0x7de>
 8013a08:	2001      	movs	r0, #1
 8013a0a:	e774      	b.n	80138f6 <_dtoa_r+0x7ee>
 8013a0c:	f04f 0800 	mov.w	r8, #0
 8013a10:	e7f6      	b.n	8013a00 <_dtoa_r+0x8f8>
 8013a12:	4698      	mov	r8, r3
 8013a14:	e7f4      	b.n	8013a00 <_dtoa_r+0x8f8>
 8013a16:	d082      	beq.n	801391e <_dtoa_r+0x816>
 8013a18:	9a05      	ldr	r2, [sp, #20]
 8013a1a:	331c      	adds	r3, #28
 8013a1c:	441a      	add	r2, r3
 8013a1e:	9205      	str	r2, [sp, #20]
 8013a20:	9a06      	ldr	r2, [sp, #24]
 8013a22:	441a      	add	r2, r3
 8013a24:	441d      	add	r5, r3
 8013a26:	9206      	str	r2, [sp, #24]
 8013a28:	e779      	b.n	801391e <_dtoa_r+0x816>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	e7f4      	b.n	8013a18 <_dtoa_r+0x910>
 8013a2e:	9b04      	ldr	r3, [sp, #16]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	dc37      	bgt.n	8013aa4 <_dtoa_r+0x99c>
 8013a34:	9b07      	ldr	r3, [sp, #28]
 8013a36:	2b02      	cmp	r3, #2
 8013a38:	dd34      	ble.n	8013aa4 <_dtoa_r+0x99c>
 8013a3a:	9b04      	ldr	r3, [sp, #16]
 8013a3c:	9301      	str	r3, [sp, #4]
 8013a3e:	9b01      	ldr	r3, [sp, #4]
 8013a40:	b963      	cbnz	r3, 8013a5c <_dtoa_r+0x954>
 8013a42:	4631      	mov	r1, r6
 8013a44:	2205      	movs	r2, #5
 8013a46:	4620      	mov	r0, r4
 8013a48:	f000 f9fe 	bl	8013e48 <__multadd>
 8013a4c:	4601      	mov	r1, r0
 8013a4e:	4606      	mov	r6, r0
 8013a50:	4650      	mov	r0, sl
 8013a52:	f000 fc5d 	bl	8014310 <__mcmp>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	f73f adbb 	bgt.w	80135d2 <_dtoa_r+0x4ca>
 8013a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a5e:	9d00      	ldr	r5, [sp, #0]
 8013a60:	ea6f 0b03 	mvn.w	fp, r3
 8013a64:	f04f 0800 	mov.w	r8, #0
 8013a68:	4631      	mov	r1, r6
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 f9ca 	bl	8013e04 <_Bfree>
 8013a70:	2f00      	cmp	r7, #0
 8013a72:	f43f aeab 	beq.w	80137cc <_dtoa_r+0x6c4>
 8013a76:	f1b8 0f00 	cmp.w	r8, #0
 8013a7a:	d005      	beq.n	8013a88 <_dtoa_r+0x980>
 8013a7c:	45b8      	cmp	r8, r7
 8013a7e:	d003      	beq.n	8013a88 <_dtoa_r+0x980>
 8013a80:	4641      	mov	r1, r8
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 f9be 	bl	8013e04 <_Bfree>
 8013a88:	4639      	mov	r1, r7
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f000 f9ba 	bl	8013e04 <_Bfree>
 8013a90:	e69c      	b.n	80137cc <_dtoa_r+0x6c4>
 8013a92:	2600      	movs	r6, #0
 8013a94:	4637      	mov	r7, r6
 8013a96:	e7e1      	b.n	8013a5c <_dtoa_r+0x954>
 8013a98:	46bb      	mov	fp, r7
 8013a9a:	4637      	mov	r7, r6
 8013a9c:	e599      	b.n	80135d2 <_dtoa_r+0x4ca>
 8013a9e:	bf00      	nop
 8013aa0:	40240000 	.word	0x40240000
 8013aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 80c8 	beq.w	8013c3c <_dtoa_r+0xb34>
 8013aac:	9b04      	ldr	r3, [sp, #16]
 8013aae:	9301      	str	r3, [sp, #4]
 8013ab0:	2d00      	cmp	r5, #0
 8013ab2:	dd05      	ble.n	8013ac0 <_dtoa_r+0x9b8>
 8013ab4:	4639      	mov	r1, r7
 8013ab6:	462a      	mov	r2, r5
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f000 fbbd 	bl	8014238 <__lshift>
 8013abe:	4607      	mov	r7, r0
 8013ac0:	f1b8 0f00 	cmp.w	r8, #0
 8013ac4:	d05b      	beq.n	8013b7e <_dtoa_r+0xa76>
 8013ac6:	6879      	ldr	r1, [r7, #4]
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f000 f95b 	bl	8013d84 <_Balloc>
 8013ace:	4605      	mov	r5, r0
 8013ad0:	b928      	cbnz	r0, 8013ade <_dtoa_r+0x9d6>
 8013ad2:	4b83      	ldr	r3, [pc, #524]	; (8013ce0 <_dtoa_r+0xbd8>)
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013ada:	f7ff bb2e 	b.w	801313a <_dtoa_r+0x32>
 8013ade:	693a      	ldr	r2, [r7, #16]
 8013ae0:	3202      	adds	r2, #2
 8013ae2:	0092      	lsls	r2, r2, #2
 8013ae4:	f107 010c 	add.w	r1, r7, #12
 8013ae8:	300c      	adds	r0, #12
 8013aea:	f7ff fa71 	bl	8012fd0 <memcpy>
 8013aee:	2201      	movs	r2, #1
 8013af0:	4629      	mov	r1, r5
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 fba0 	bl	8014238 <__lshift>
 8013af8:	9b00      	ldr	r3, [sp, #0]
 8013afa:	3301      	adds	r3, #1
 8013afc:	9304      	str	r3, [sp, #16]
 8013afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b02:	4413      	add	r3, r2
 8013b04:	9308      	str	r3, [sp, #32]
 8013b06:	9b02      	ldr	r3, [sp, #8]
 8013b08:	f003 0301 	and.w	r3, r3, #1
 8013b0c:	46b8      	mov	r8, r7
 8013b0e:	9306      	str	r3, [sp, #24]
 8013b10:	4607      	mov	r7, r0
 8013b12:	9b04      	ldr	r3, [sp, #16]
 8013b14:	4631      	mov	r1, r6
 8013b16:	3b01      	subs	r3, #1
 8013b18:	4650      	mov	r0, sl
 8013b1a:	9301      	str	r3, [sp, #4]
 8013b1c:	f7ff fa6c 	bl	8012ff8 <quorem>
 8013b20:	4641      	mov	r1, r8
 8013b22:	9002      	str	r0, [sp, #8]
 8013b24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013b28:	4650      	mov	r0, sl
 8013b2a:	f000 fbf1 	bl	8014310 <__mcmp>
 8013b2e:	463a      	mov	r2, r7
 8013b30:	9005      	str	r0, [sp, #20]
 8013b32:	4631      	mov	r1, r6
 8013b34:	4620      	mov	r0, r4
 8013b36:	f000 fc07 	bl	8014348 <__mdiff>
 8013b3a:	68c2      	ldr	r2, [r0, #12]
 8013b3c:	4605      	mov	r5, r0
 8013b3e:	bb02      	cbnz	r2, 8013b82 <_dtoa_r+0xa7a>
 8013b40:	4601      	mov	r1, r0
 8013b42:	4650      	mov	r0, sl
 8013b44:	f000 fbe4 	bl	8014310 <__mcmp>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8013b50:	f000 f958 	bl	8013e04 <_Bfree>
 8013b54:	9b07      	ldr	r3, [sp, #28]
 8013b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b58:	9d04      	ldr	r5, [sp, #16]
 8013b5a:	ea43 0102 	orr.w	r1, r3, r2
 8013b5e:	9b06      	ldr	r3, [sp, #24]
 8013b60:	4319      	orrs	r1, r3
 8013b62:	d110      	bne.n	8013b86 <_dtoa_r+0xa7e>
 8013b64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013b68:	d029      	beq.n	8013bbe <_dtoa_r+0xab6>
 8013b6a:	9b05      	ldr	r3, [sp, #20]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	dd02      	ble.n	8013b76 <_dtoa_r+0xa6e>
 8013b70:	9b02      	ldr	r3, [sp, #8]
 8013b72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013b76:	9b01      	ldr	r3, [sp, #4]
 8013b78:	f883 9000 	strb.w	r9, [r3]
 8013b7c:	e774      	b.n	8013a68 <_dtoa_r+0x960>
 8013b7e:	4638      	mov	r0, r7
 8013b80:	e7ba      	b.n	8013af8 <_dtoa_r+0x9f0>
 8013b82:	2201      	movs	r2, #1
 8013b84:	e7e1      	b.n	8013b4a <_dtoa_r+0xa42>
 8013b86:	9b05      	ldr	r3, [sp, #20]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	db04      	blt.n	8013b96 <_dtoa_r+0xa8e>
 8013b8c:	9907      	ldr	r1, [sp, #28]
 8013b8e:	430b      	orrs	r3, r1
 8013b90:	9906      	ldr	r1, [sp, #24]
 8013b92:	430b      	orrs	r3, r1
 8013b94:	d120      	bne.n	8013bd8 <_dtoa_r+0xad0>
 8013b96:	2a00      	cmp	r2, #0
 8013b98:	dded      	ble.n	8013b76 <_dtoa_r+0xa6e>
 8013b9a:	4651      	mov	r1, sl
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	f000 fb4a 	bl	8014238 <__lshift>
 8013ba4:	4631      	mov	r1, r6
 8013ba6:	4682      	mov	sl, r0
 8013ba8:	f000 fbb2 	bl	8014310 <__mcmp>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	dc03      	bgt.n	8013bb8 <_dtoa_r+0xab0>
 8013bb0:	d1e1      	bne.n	8013b76 <_dtoa_r+0xa6e>
 8013bb2:	f019 0f01 	tst.w	r9, #1
 8013bb6:	d0de      	beq.n	8013b76 <_dtoa_r+0xa6e>
 8013bb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013bbc:	d1d8      	bne.n	8013b70 <_dtoa_r+0xa68>
 8013bbe:	9a01      	ldr	r2, [sp, #4]
 8013bc0:	2339      	movs	r3, #57	; 0x39
 8013bc2:	7013      	strb	r3, [r2, #0]
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	461d      	mov	r5, r3
 8013bc8:	3b01      	subs	r3, #1
 8013bca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013bce:	2a39      	cmp	r2, #57	; 0x39
 8013bd0:	d06c      	beq.n	8013cac <_dtoa_r+0xba4>
 8013bd2:	3201      	adds	r2, #1
 8013bd4:	701a      	strb	r2, [r3, #0]
 8013bd6:	e747      	b.n	8013a68 <_dtoa_r+0x960>
 8013bd8:	2a00      	cmp	r2, #0
 8013bda:	dd07      	ble.n	8013bec <_dtoa_r+0xae4>
 8013bdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013be0:	d0ed      	beq.n	8013bbe <_dtoa_r+0xab6>
 8013be2:	9a01      	ldr	r2, [sp, #4]
 8013be4:	f109 0301 	add.w	r3, r9, #1
 8013be8:	7013      	strb	r3, [r2, #0]
 8013bea:	e73d      	b.n	8013a68 <_dtoa_r+0x960>
 8013bec:	9b04      	ldr	r3, [sp, #16]
 8013bee:	9a08      	ldr	r2, [sp, #32]
 8013bf0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d043      	beq.n	8013c80 <_dtoa_r+0xb78>
 8013bf8:	4651      	mov	r1, sl
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	220a      	movs	r2, #10
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f000 f922 	bl	8013e48 <__multadd>
 8013c04:	45b8      	cmp	r8, r7
 8013c06:	4682      	mov	sl, r0
 8013c08:	f04f 0300 	mov.w	r3, #0
 8013c0c:	f04f 020a 	mov.w	r2, #10
 8013c10:	4641      	mov	r1, r8
 8013c12:	4620      	mov	r0, r4
 8013c14:	d107      	bne.n	8013c26 <_dtoa_r+0xb1e>
 8013c16:	f000 f917 	bl	8013e48 <__multadd>
 8013c1a:	4680      	mov	r8, r0
 8013c1c:	4607      	mov	r7, r0
 8013c1e:	9b04      	ldr	r3, [sp, #16]
 8013c20:	3301      	adds	r3, #1
 8013c22:	9304      	str	r3, [sp, #16]
 8013c24:	e775      	b.n	8013b12 <_dtoa_r+0xa0a>
 8013c26:	f000 f90f 	bl	8013e48 <__multadd>
 8013c2a:	4639      	mov	r1, r7
 8013c2c:	4680      	mov	r8, r0
 8013c2e:	2300      	movs	r3, #0
 8013c30:	220a      	movs	r2, #10
 8013c32:	4620      	mov	r0, r4
 8013c34:	f000 f908 	bl	8013e48 <__multadd>
 8013c38:	4607      	mov	r7, r0
 8013c3a:	e7f0      	b.n	8013c1e <_dtoa_r+0xb16>
 8013c3c:	9b04      	ldr	r3, [sp, #16]
 8013c3e:	9301      	str	r3, [sp, #4]
 8013c40:	9d00      	ldr	r5, [sp, #0]
 8013c42:	4631      	mov	r1, r6
 8013c44:	4650      	mov	r0, sl
 8013c46:	f7ff f9d7 	bl	8012ff8 <quorem>
 8013c4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c4e:	9b00      	ldr	r3, [sp, #0]
 8013c50:	f805 9b01 	strb.w	r9, [r5], #1
 8013c54:	1aea      	subs	r2, r5, r3
 8013c56:	9b01      	ldr	r3, [sp, #4]
 8013c58:	4293      	cmp	r3, r2
 8013c5a:	dd07      	ble.n	8013c6c <_dtoa_r+0xb64>
 8013c5c:	4651      	mov	r1, sl
 8013c5e:	2300      	movs	r3, #0
 8013c60:	220a      	movs	r2, #10
 8013c62:	4620      	mov	r0, r4
 8013c64:	f000 f8f0 	bl	8013e48 <__multadd>
 8013c68:	4682      	mov	sl, r0
 8013c6a:	e7ea      	b.n	8013c42 <_dtoa_r+0xb3a>
 8013c6c:	9b01      	ldr	r3, [sp, #4]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	bfc8      	it	gt
 8013c72:	461d      	movgt	r5, r3
 8013c74:	9b00      	ldr	r3, [sp, #0]
 8013c76:	bfd8      	it	le
 8013c78:	2501      	movle	r5, #1
 8013c7a:	441d      	add	r5, r3
 8013c7c:	f04f 0800 	mov.w	r8, #0
 8013c80:	4651      	mov	r1, sl
 8013c82:	2201      	movs	r2, #1
 8013c84:	4620      	mov	r0, r4
 8013c86:	f000 fad7 	bl	8014238 <__lshift>
 8013c8a:	4631      	mov	r1, r6
 8013c8c:	4682      	mov	sl, r0
 8013c8e:	f000 fb3f 	bl	8014310 <__mcmp>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	dc96      	bgt.n	8013bc4 <_dtoa_r+0xabc>
 8013c96:	d102      	bne.n	8013c9e <_dtoa_r+0xb96>
 8013c98:	f019 0f01 	tst.w	r9, #1
 8013c9c:	d192      	bne.n	8013bc4 <_dtoa_r+0xabc>
 8013c9e:	462b      	mov	r3, r5
 8013ca0:	461d      	mov	r5, r3
 8013ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ca6:	2a30      	cmp	r2, #48	; 0x30
 8013ca8:	d0fa      	beq.n	8013ca0 <_dtoa_r+0xb98>
 8013caa:	e6dd      	b.n	8013a68 <_dtoa_r+0x960>
 8013cac:	9a00      	ldr	r2, [sp, #0]
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d189      	bne.n	8013bc6 <_dtoa_r+0xabe>
 8013cb2:	f10b 0b01 	add.w	fp, fp, #1
 8013cb6:	2331      	movs	r3, #49	; 0x31
 8013cb8:	e796      	b.n	8013be8 <_dtoa_r+0xae0>
 8013cba:	4b0a      	ldr	r3, [pc, #40]	; (8013ce4 <_dtoa_r+0xbdc>)
 8013cbc:	f7ff ba99 	b.w	80131f2 <_dtoa_r+0xea>
 8013cc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f47f aa6d 	bne.w	80131a2 <_dtoa_r+0x9a>
 8013cc8:	4b07      	ldr	r3, [pc, #28]	; (8013ce8 <_dtoa_r+0xbe0>)
 8013cca:	f7ff ba92 	b.w	80131f2 <_dtoa_r+0xea>
 8013cce:	9b01      	ldr	r3, [sp, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	dcb5      	bgt.n	8013c40 <_dtoa_r+0xb38>
 8013cd4:	9b07      	ldr	r3, [sp, #28]
 8013cd6:	2b02      	cmp	r3, #2
 8013cd8:	f73f aeb1 	bgt.w	8013a3e <_dtoa_r+0x936>
 8013cdc:	e7b0      	b.n	8013c40 <_dtoa_r+0xb38>
 8013cde:	bf00      	nop
 8013ce0:	08016a45 	.word	0x08016a45
 8013ce4:	080169a0 	.word	0x080169a0
 8013ce8:	080169c9 	.word	0x080169c9

08013cec <_free_r>:
 8013cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cee:	2900      	cmp	r1, #0
 8013cf0:	d044      	beq.n	8013d7c <_free_r+0x90>
 8013cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cf6:	9001      	str	r0, [sp, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8013cfe:	bfb8      	it	lt
 8013d00:	18e4      	addlt	r4, r4, r3
 8013d02:	f7fe f90d 	bl	8011f20 <__malloc_lock>
 8013d06:	4a1e      	ldr	r2, [pc, #120]	; (8013d80 <_free_r+0x94>)
 8013d08:	9801      	ldr	r0, [sp, #4]
 8013d0a:	6813      	ldr	r3, [r2, #0]
 8013d0c:	b933      	cbnz	r3, 8013d1c <_free_r+0x30>
 8013d0e:	6063      	str	r3, [r4, #4]
 8013d10:	6014      	str	r4, [r2, #0]
 8013d12:	b003      	add	sp, #12
 8013d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d18:	f7fe b908 	b.w	8011f2c <__malloc_unlock>
 8013d1c:	42a3      	cmp	r3, r4
 8013d1e:	d908      	bls.n	8013d32 <_free_r+0x46>
 8013d20:	6825      	ldr	r5, [r4, #0]
 8013d22:	1961      	adds	r1, r4, r5
 8013d24:	428b      	cmp	r3, r1
 8013d26:	bf01      	itttt	eq
 8013d28:	6819      	ldreq	r1, [r3, #0]
 8013d2a:	685b      	ldreq	r3, [r3, #4]
 8013d2c:	1949      	addeq	r1, r1, r5
 8013d2e:	6021      	streq	r1, [r4, #0]
 8013d30:	e7ed      	b.n	8013d0e <_free_r+0x22>
 8013d32:	461a      	mov	r2, r3
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	b10b      	cbz	r3, 8013d3c <_free_r+0x50>
 8013d38:	42a3      	cmp	r3, r4
 8013d3a:	d9fa      	bls.n	8013d32 <_free_r+0x46>
 8013d3c:	6811      	ldr	r1, [r2, #0]
 8013d3e:	1855      	adds	r5, r2, r1
 8013d40:	42a5      	cmp	r5, r4
 8013d42:	d10b      	bne.n	8013d5c <_free_r+0x70>
 8013d44:	6824      	ldr	r4, [r4, #0]
 8013d46:	4421      	add	r1, r4
 8013d48:	1854      	adds	r4, r2, r1
 8013d4a:	42a3      	cmp	r3, r4
 8013d4c:	6011      	str	r1, [r2, #0]
 8013d4e:	d1e0      	bne.n	8013d12 <_free_r+0x26>
 8013d50:	681c      	ldr	r4, [r3, #0]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	6053      	str	r3, [r2, #4]
 8013d56:	440c      	add	r4, r1
 8013d58:	6014      	str	r4, [r2, #0]
 8013d5a:	e7da      	b.n	8013d12 <_free_r+0x26>
 8013d5c:	d902      	bls.n	8013d64 <_free_r+0x78>
 8013d5e:	230c      	movs	r3, #12
 8013d60:	6003      	str	r3, [r0, #0]
 8013d62:	e7d6      	b.n	8013d12 <_free_r+0x26>
 8013d64:	6825      	ldr	r5, [r4, #0]
 8013d66:	1961      	adds	r1, r4, r5
 8013d68:	428b      	cmp	r3, r1
 8013d6a:	bf04      	itt	eq
 8013d6c:	6819      	ldreq	r1, [r3, #0]
 8013d6e:	685b      	ldreq	r3, [r3, #4]
 8013d70:	6063      	str	r3, [r4, #4]
 8013d72:	bf04      	itt	eq
 8013d74:	1949      	addeq	r1, r1, r5
 8013d76:	6021      	streq	r1, [r4, #0]
 8013d78:	6054      	str	r4, [r2, #4]
 8013d7a:	e7ca      	b.n	8013d12 <_free_r+0x26>
 8013d7c:	b003      	add	sp, #12
 8013d7e:	bd30      	pop	{r4, r5, pc}
 8013d80:	20011f74 	.word	0x20011f74

08013d84 <_Balloc>:
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	69c6      	ldr	r6, [r0, #28]
 8013d88:	4604      	mov	r4, r0
 8013d8a:	460d      	mov	r5, r1
 8013d8c:	b976      	cbnz	r6, 8013dac <_Balloc+0x28>
 8013d8e:	2010      	movs	r0, #16
 8013d90:	f7fe f81e 	bl	8011dd0 <malloc>
 8013d94:	4602      	mov	r2, r0
 8013d96:	61e0      	str	r0, [r4, #28]
 8013d98:	b920      	cbnz	r0, 8013da4 <_Balloc+0x20>
 8013d9a:	4b18      	ldr	r3, [pc, #96]	; (8013dfc <_Balloc+0x78>)
 8013d9c:	4818      	ldr	r0, [pc, #96]	; (8013e00 <_Balloc+0x7c>)
 8013d9e:	216b      	movs	r1, #107	; 0x6b
 8013da0:	f001 fd6e 	bl	8015880 <__assert_func>
 8013da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013da8:	6006      	str	r6, [r0, #0]
 8013daa:	60c6      	str	r6, [r0, #12]
 8013dac:	69e6      	ldr	r6, [r4, #28]
 8013dae:	68f3      	ldr	r3, [r6, #12]
 8013db0:	b183      	cbz	r3, 8013dd4 <_Balloc+0x50>
 8013db2:	69e3      	ldr	r3, [r4, #28]
 8013db4:	68db      	ldr	r3, [r3, #12]
 8013db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013dba:	b9b8      	cbnz	r0, 8013dec <_Balloc+0x68>
 8013dbc:	2101      	movs	r1, #1
 8013dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8013dc2:	1d72      	adds	r2, r6, #5
 8013dc4:	0092      	lsls	r2, r2, #2
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	f001 fd78 	bl	80158bc <_calloc_r>
 8013dcc:	b160      	cbz	r0, 8013de8 <_Balloc+0x64>
 8013dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013dd2:	e00e      	b.n	8013df2 <_Balloc+0x6e>
 8013dd4:	2221      	movs	r2, #33	; 0x21
 8013dd6:	2104      	movs	r1, #4
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f001 fd6f 	bl	80158bc <_calloc_r>
 8013dde:	69e3      	ldr	r3, [r4, #28]
 8013de0:	60f0      	str	r0, [r6, #12]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d1e4      	bne.n	8013db2 <_Balloc+0x2e>
 8013de8:	2000      	movs	r0, #0
 8013dea:	bd70      	pop	{r4, r5, r6, pc}
 8013dec:	6802      	ldr	r2, [r0, #0]
 8013dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013df2:	2300      	movs	r3, #0
 8013df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013df8:	e7f7      	b.n	8013dea <_Balloc+0x66>
 8013dfa:	bf00      	nop
 8013dfc:	080169d6 	.word	0x080169d6
 8013e00:	08016a56 	.word	0x08016a56

08013e04 <_Bfree>:
 8013e04:	b570      	push	{r4, r5, r6, lr}
 8013e06:	69c6      	ldr	r6, [r0, #28]
 8013e08:	4605      	mov	r5, r0
 8013e0a:	460c      	mov	r4, r1
 8013e0c:	b976      	cbnz	r6, 8013e2c <_Bfree+0x28>
 8013e0e:	2010      	movs	r0, #16
 8013e10:	f7fd ffde 	bl	8011dd0 <malloc>
 8013e14:	4602      	mov	r2, r0
 8013e16:	61e8      	str	r0, [r5, #28]
 8013e18:	b920      	cbnz	r0, 8013e24 <_Bfree+0x20>
 8013e1a:	4b09      	ldr	r3, [pc, #36]	; (8013e40 <_Bfree+0x3c>)
 8013e1c:	4809      	ldr	r0, [pc, #36]	; (8013e44 <_Bfree+0x40>)
 8013e1e:	218f      	movs	r1, #143	; 0x8f
 8013e20:	f001 fd2e 	bl	8015880 <__assert_func>
 8013e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e28:	6006      	str	r6, [r0, #0]
 8013e2a:	60c6      	str	r6, [r0, #12]
 8013e2c:	b13c      	cbz	r4, 8013e3e <_Bfree+0x3a>
 8013e2e:	69eb      	ldr	r3, [r5, #28]
 8013e30:	6862      	ldr	r2, [r4, #4]
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e38:	6021      	str	r1, [r4, #0]
 8013e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}
 8013e40:	080169d6 	.word	0x080169d6
 8013e44:	08016a56 	.word	0x08016a56

08013e48 <__multadd>:
 8013e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e4c:	690d      	ldr	r5, [r1, #16]
 8013e4e:	4607      	mov	r7, r0
 8013e50:	460c      	mov	r4, r1
 8013e52:	461e      	mov	r6, r3
 8013e54:	f101 0c14 	add.w	ip, r1, #20
 8013e58:	2000      	movs	r0, #0
 8013e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8013e5e:	b299      	uxth	r1, r3
 8013e60:	fb02 6101 	mla	r1, r2, r1, r6
 8013e64:	0c1e      	lsrs	r6, r3, #16
 8013e66:	0c0b      	lsrs	r3, r1, #16
 8013e68:	fb02 3306 	mla	r3, r2, r6, r3
 8013e6c:	b289      	uxth	r1, r1
 8013e6e:	3001      	adds	r0, #1
 8013e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e74:	4285      	cmp	r5, r0
 8013e76:	f84c 1b04 	str.w	r1, [ip], #4
 8013e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e7e:	dcec      	bgt.n	8013e5a <__multadd+0x12>
 8013e80:	b30e      	cbz	r6, 8013ec6 <__multadd+0x7e>
 8013e82:	68a3      	ldr	r3, [r4, #8]
 8013e84:	42ab      	cmp	r3, r5
 8013e86:	dc19      	bgt.n	8013ebc <__multadd+0x74>
 8013e88:	6861      	ldr	r1, [r4, #4]
 8013e8a:	4638      	mov	r0, r7
 8013e8c:	3101      	adds	r1, #1
 8013e8e:	f7ff ff79 	bl	8013d84 <_Balloc>
 8013e92:	4680      	mov	r8, r0
 8013e94:	b928      	cbnz	r0, 8013ea2 <__multadd+0x5a>
 8013e96:	4602      	mov	r2, r0
 8013e98:	4b0c      	ldr	r3, [pc, #48]	; (8013ecc <__multadd+0x84>)
 8013e9a:	480d      	ldr	r0, [pc, #52]	; (8013ed0 <__multadd+0x88>)
 8013e9c:	21ba      	movs	r1, #186	; 0xba
 8013e9e:	f001 fcef 	bl	8015880 <__assert_func>
 8013ea2:	6922      	ldr	r2, [r4, #16]
 8013ea4:	3202      	adds	r2, #2
 8013ea6:	f104 010c 	add.w	r1, r4, #12
 8013eaa:	0092      	lsls	r2, r2, #2
 8013eac:	300c      	adds	r0, #12
 8013eae:	f7ff f88f 	bl	8012fd0 <memcpy>
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	4638      	mov	r0, r7
 8013eb6:	f7ff ffa5 	bl	8013e04 <_Bfree>
 8013eba:	4644      	mov	r4, r8
 8013ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013ec0:	3501      	adds	r5, #1
 8013ec2:	615e      	str	r6, [r3, #20]
 8013ec4:	6125      	str	r5, [r4, #16]
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ecc:	08016a45 	.word	0x08016a45
 8013ed0:	08016a56 	.word	0x08016a56

08013ed4 <__s2b>:
 8013ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ed8:	460c      	mov	r4, r1
 8013eda:	4615      	mov	r5, r2
 8013edc:	461f      	mov	r7, r3
 8013ede:	2209      	movs	r2, #9
 8013ee0:	3308      	adds	r3, #8
 8013ee2:	4606      	mov	r6, r0
 8013ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ee8:	2100      	movs	r1, #0
 8013eea:	2201      	movs	r2, #1
 8013eec:	429a      	cmp	r2, r3
 8013eee:	db09      	blt.n	8013f04 <__s2b+0x30>
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f7ff ff47 	bl	8013d84 <_Balloc>
 8013ef6:	b940      	cbnz	r0, 8013f0a <__s2b+0x36>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	4b19      	ldr	r3, [pc, #100]	; (8013f60 <__s2b+0x8c>)
 8013efc:	4819      	ldr	r0, [pc, #100]	; (8013f64 <__s2b+0x90>)
 8013efe:	21d3      	movs	r1, #211	; 0xd3
 8013f00:	f001 fcbe 	bl	8015880 <__assert_func>
 8013f04:	0052      	lsls	r2, r2, #1
 8013f06:	3101      	adds	r1, #1
 8013f08:	e7f0      	b.n	8013eec <__s2b+0x18>
 8013f0a:	9b08      	ldr	r3, [sp, #32]
 8013f0c:	6143      	str	r3, [r0, #20]
 8013f0e:	2d09      	cmp	r5, #9
 8013f10:	f04f 0301 	mov.w	r3, #1
 8013f14:	6103      	str	r3, [r0, #16]
 8013f16:	dd16      	ble.n	8013f46 <__s2b+0x72>
 8013f18:	f104 0909 	add.w	r9, r4, #9
 8013f1c:	46c8      	mov	r8, r9
 8013f1e:	442c      	add	r4, r5
 8013f20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013f24:	4601      	mov	r1, r0
 8013f26:	3b30      	subs	r3, #48	; 0x30
 8013f28:	220a      	movs	r2, #10
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	f7ff ff8c 	bl	8013e48 <__multadd>
 8013f30:	45a0      	cmp	r8, r4
 8013f32:	d1f5      	bne.n	8013f20 <__s2b+0x4c>
 8013f34:	f1a5 0408 	sub.w	r4, r5, #8
 8013f38:	444c      	add	r4, r9
 8013f3a:	1b2d      	subs	r5, r5, r4
 8013f3c:	1963      	adds	r3, r4, r5
 8013f3e:	42bb      	cmp	r3, r7
 8013f40:	db04      	blt.n	8013f4c <__s2b+0x78>
 8013f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f46:	340a      	adds	r4, #10
 8013f48:	2509      	movs	r5, #9
 8013f4a:	e7f6      	b.n	8013f3a <__s2b+0x66>
 8013f4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013f50:	4601      	mov	r1, r0
 8013f52:	3b30      	subs	r3, #48	; 0x30
 8013f54:	220a      	movs	r2, #10
 8013f56:	4630      	mov	r0, r6
 8013f58:	f7ff ff76 	bl	8013e48 <__multadd>
 8013f5c:	e7ee      	b.n	8013f3c <__s2b+0x68>
 8013f5e:	bf00      	nop
 8013f60:	08016a45 	.word	0x08016a45
 8013f64:	08016a56 	.word	0x08016a56

08013f68 <__hi0bits>:
 8013f68:	0c03      	lsrs	r3, r0, #16
 8013f6a:	041b      	lsls	r3, r3, #16
 8013f6c:	b9d3      	cbnz	r3, 8013fa4 <__hi0bits+0x3c>
 8013f6e:	0400      	lsls	r0, r0, #16
 8013f70:	2310      	movs	r3, #16
 8013f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013f76:	bf04      	itt	eq
 8013f78:	0200      	lsleq	r0, r0, #8
 8013f7a:	3308      	addeq	r3, #8
 8013f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f80:	bf04      	itt	eq
 8013f82:	0100      	lsleq	r0, r0, #4
 8013f84:	3304      	addeq	r3, #4
 8013f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f8a:	bf04      	itt	eq
 8013f8c:	0080      	lsleq	r0, r0, #2
 8013f8e:	3302      	addeq	r3, #2
 8013f90:	2800      	cmp	r0, #0
 8013f92:	db05      	blt.n	8013fa0 <__hi0bits+0x38>
 8013f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f98:	f103 0301 	add.w	r3, r3, #1
 8013f9c:	bf08      	it	eq
 8013f9e:	2320      	moveq	r3, #32
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	4770      	bx	lr
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	e7e4      	b.n	8013f72 <__hi0bits+0xa>

08013fa8 <__lo0bits>:
 8013fa8:	6803      	ldr	r3, [r0, #0]
 8013faa:	f013 0207 	ands.w	r2, r3, #7
 8013fae:	d00c      	beq.n	8013fca <__lo0bits+0x22>
 8013fb0:	07d9      	lsls	r1, r3, #31
 8013fb2:	d422      	bmi.n	8013ffa <__lo0bits+0x52>
 8013fb4:	079a      	lsls	r2, r3, #30
 8013fb6:	bf49      	itett	mi
 8013fb8:	085b      	lsrmi	r3, r3, #1
 8013fba:	089b      	lsrpl	r3, r3, #2
 8013fbc:	6003      	strmi	r3, [r0, #0]
 8013fbe:	2201      	movmi	r2, #1
 8013fc0:	bf5c      	itt	pl
 8013fc2:	6003      	strpl	r3, [r0, #0]
 8013fc4:	2202      	movpl	r2, #2
 8013fc6:	4610      	mov	r0, r2
 8013fc8:	4770      	bx	lr
 8013fca:	b299      	uxth	r1, r3
 8013fcc:	b909      	cbnz	r1, 8013fd2 <__lo0bits+0x2a>
 8013fce:	0c1b      	lsrs	r3, r3, #16
 8013fd0:	2210      	movs	r2, #16
 8013fd2:	b2d9      	uxtb	r1, r3
 8013fd4:	b909      	cbnz	r1, 8013fda <__lo0bits+0x32>
 8013fd6:	3208      	adds	r2, #8
 8013fd8:	0a1b      	lsrs	r3, r3, #8
 8013fda:	0719      	lsls	r1, r3, #28
 8013fdc:	bf04      	itt	eq
 8013fde:	091b      	lsreq	r3, r3, #4
 8013fe0:	3204      	addeq	r2, #4
 8013fe2:	0799      	lsls	r1, r3, #30
 8013fe4:	bf04      	itt	eq
 8013fe6:	089b      	lsreq	r3, r3, #2
 8013fe8:	3202      	addeq	r2, #2
 8013fea:	07d9      	lsls	r1, r3, #31
 8013fec:	d403      	bmi.n	8013ff6 <__lo0bits+0x4e>
 8013fee:	085b      	lsrs	r3, r3, #1
 8013ff0:	f102 0201 	add.w	r2, r2, #1
 8013ff4:	d003      	beq.n	8013ffe <__lo0bits+0x56>
 8013ff6:	6003      	str	r3, [r0, #0]
 8013ff8:	e7e5      	b.n	8013fc6 <__lo0bits+0x1e>
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	e7e3      	b.n	8013fc6 <__lo0bits+0x1e>
 8013ffe:	2220      	movs	r2, #32
 8014000:	e7e1      	b.n	8013fc6 <__lo0bits+0x1e>
	...

08014004 <__i2b>:
 8014004:	b510      	push	{r4, lr}
 8014006:	460c      	mov	r4, r1
 8014008:	2101      	movs	r1, #1
 801400a:	f7ff febb 	bl	8013d84 <_Balloc>
 801400e:	4602      	mov	r2, r0
 8014010:	b928      	cbnz	r0, 801401e <__i2b+0x1a>
 8014012:	4b05      	ldr	r3, [pc, #20]	; (8014028 <__i2b+0x24>)
 8014014:	4805      	ldr	r0, [pc, #20]	; (801402c <__i2b+0x28>)
 8014016:	f240 1145 	movw	r1, #325	; 0x145
 801401a:	f001 fc31 	bl	8015880 <__assert_func>
 801401e:	2301      	movs	r3, #1
 8014020:	6144      	str	r4, [r0, #20]
 8014022:	6103      	str	r3, [r0, #16]
 8014024:	bd10      	pop	{r4, pc}
 8014026:	bf00      	nop
 8014028:	08016a45 	.word	0x08016a45
 801402c:	08016a56 	.word	0x08016a56

08014030 <__multiply>:
 8014030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014034:	4691      	mov	r9, r2
 8014036:	690a      	ldr	r2, [r1, #16]
 8014038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801403c:	429a      	cmp	r2, r3
 801403e:	bfb8      	it	lt
 8014040:	460b      	movlt	r3, r1
 8014042:	460c      	mov	r4, r1
 8014044:	bfbc      	itt	lt
 8014046:	464c      	movlt	r4, r9
 8014048:	4699      	movlt	r9, r3
 801404a:	6927      	ldr	r7, [r4, #16]
 801404c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014050:	68a3      	ldr	r3, [r4, #8]
 8014052:	6861      	ldr	r1, [r4, #4]
 8014054:	eb07 060a 	add.w	r6, r7, sl
 8014058:	42b3      	cmp	r3, r6
 801405a:	b085      	sub	sp, #20
 801405c:	bfb8      	it	lt
 801405e:	3101      	addlt	r1, #1
 8014060:	f7ff fe90 	bl	8013d84 <_Balloc>
 8014064:	b930      	cbnz	r0, 8014074 <__multiply+0x44>
 8014066:	4602      	mov	r2, r0
 8014068:	4b44      	ldr	r3, [pc, #272]	; (801417c <__multiply+0x14c>)
 801406a:	4845      	ldr	r0, [pc, #276]	; (8014180 <__multiply+0x150>)
 801406c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014070:	f001 fc06 	bl	8015880 <__assert_func>
 8014074:	f100 0514 	add.w	r5, r0, #20
 8014078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801407c:	462b      	mov	r3, r5
 801407e:	2200      	movs	r2, #0
 8014080:	4543      	cmp	r3, r8
 8014082:	d321      	bcc.n	80140c8 <__multiply+0x98>
 8014084:	f104 0314 	add.w	r3, r4, #20
 8014088:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801408c:	f109 0314 	add.w	r3, r9, #20
 8014090:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014094:	9202      	str	r2, [sp, #8]
 8014096:	1b3a      	subs	r2, r7, r4
 8014098:	3a15      	subs	r2, #21
 801409a:	f022 0203 	bic.w	r2, r2, #3
 801409e:	3204      	adds	r2, #4
 80140a0:	f104 0115 	add.w	r1, r4, #21
 80140a4:	428f      	cmp	r7, r1
 80140a6:	bf38      	it	cc
 80140a8:	2204      	movcc	r2, #4
 80140aa:	9201      	str	r2, [sp, #4]
 80140ac:	9a02      	ldr	r2, [sp, #8]
 80140ae:	9303      	str	r3, [sp, #12]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d80c      	bhi.n	80140ce <__multiply+0x9e>
 80140b4:	2e00      	cmp	r6, #0
 80140b6:	dd03      	ble.n	80140c0 <__multiply+0x90>
 80140b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d05b      	beq.n	8014178 <__multiply+0x148>
 80140c0:	6106      	str	r6, [r0, #16]
 80140c2:	b005      	add	sp, #20
 80140c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c8:	f843 2b04 	str.w	r2, [r3], #4
 80140cc:	e7d8      	b.n	8014080 <__multiply+0x50>
 80140ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80140d2:	f1ba 0f00 	cmp.w	sl, #0
 80140d6:	d024      	beq.n	8014122 <__multiply+0xf2>
 80140d8:	f104 0e14 	add.w	lr, r4, #20
 80140dc:	46a9      	mov	r9, r5
 80140de:	f04f 0c00 	mov.w	ip, #0
 80140e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80140e6:	f8d9 1000 	ldr.w	r1, [r9]
 80140ea:	fa1f fb82 	uxth.w	fp, r2
 80140ee:	b289      	uxth	r1, r1
 80140f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80140f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80140f8:	f8d9 2000 	ldr.w	r2, [r9]
 80140fc:	4461      	add	r1, ip
 80140fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014102:	fb0a c20b 	mla	r2, sl, fp, ip
 8014106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801410a:	b289      	uxth	r1, r1
 801410c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014110:	4577      	cmp	r7, lr
 8014112:	f849 1b04 	str.w	r1, [r9], #4
 8014116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801411a:	d8e2      	bhi.n	80140e2 <__multiply+0xb2>
 801411c:	9a01      	ldr	r2, [sp, #4]
 801411e:	f845 c002 	str.w	ip, [r5, r2]
 8014122:	9a03      	ldr	r2, [sp, #12]
 8014124:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014128:	3304      	adds	r3, #4
 801412a:	f1b9 0f00 	cmp.w	r9, #0
 801412e:	d021      	beq.n	8014174 <__multiply+0x144>
 8014130:	6829      	ldr	r1, [r5, #0]
 8014132:	f104 0c14 	add.w	ip, r4, #20
 8014136:	46ae      	mov	lr, r5
 8014138:	f04f 0a00 	mov.w	sl, #0
 801413c:	f8bc b000 	ldrh.w	fp, [ip]
 8014140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014144:	fb09 220b 	mla	r2, r9, fp, r2
 8014148:	4452      	add	r2, sl
 801414a:	b289      	uxth	r1, r1
 801414c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014150:	f84e 1b04 	str.w	r1, [lr], #4
 8014154:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014158:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801415c:	f8be 1000 	ldrh.w	r1, [lr]
 8014160:	fb09 110a 	mla	r1, r9, sl, r1
 8014164:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014168:	4567      	cmp	r7, ip
 801416a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801416e:	d8e5      	bhi.n	801413c <__multiply+0x10c>
 8014170:	9a01      	ldr	r2, [sp, #4]
 8014172:	50a9      	str	r1, [r5, r2]
 8014174:	3504      	adds	r5, #4
 8014176:	e799      	b.n	80140ac <__multiply+0x7c>
 8014178:	3e01      	subs	r6, #1
 801417a:	e79b      	b.n	80140b4 <__multiply+0x84>
 801417c:	08016a45 	.word	0x08016a45
 8014180:	08016a56 	.word	0x08016a56

08014184 <__pow5mult>:
 8014184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014188:	4615      	mov	r5, r2
 801418a:	f012 0203 	ands.w	r2, r2, #3
 801418e:	4606      	mov	r6, r0
 8014190:	460f      	mov	r7, r1
 8014192:	d007      	beq.n	80141a4 <__pow5mult+0x20>
 8014194:	4c25      	ldr	r4, [pc, #148]	; (801422c <__pow5mult+0xa8>)
 8014196:	3a01      	subs	r2, #1
 8014198:	2300      	movs	r3, #0
 801419a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801419e:	f7ff fe53 	bl	8013e48 <__multadd>
 80141a2:	4607      	mov	r7, r0
 80141a4:	10ad      	asrs	r5, r5, #2
 80141a6:	d03d      	beq.n	8014224 <__pow5mult+0xa0>
 80141a8:	69f4      	ldr	r4, [r6, #28]
 80141aa:	b97c      	cbnz	r4, 80141cc <__pow5mult+0x48>
 80141ac:	2010      	movs	r0, #16
 80141ae:	f7fd fe0f 	bl	8011dd0 <malloc>
 80141b2:	4602      	mov	r2, r0
 80141b4:	61f0      	str	r0, [r6, #28]
 80141b6:	b928      	cbnz	r0, 80141c4 <__pow5mult+0x40>
 80141b8:	4b1d      	ldr	r3, [pc, #116]	; (8014230 <__pow5mult+0xac>)
 80141ba:	481e      	ldr	r0, [pc, #120]	; (8014234 <__pow5mult+0xb0>)
 80141bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80141c0:	f001 fb5e 	bl	8015880 <__assert_func>
 80141c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80141c8:	6004      	str	r4, [r0, #0]
 80141ca:	60c4      	str	r4, [r0, #12]
 80141cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80141d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141d4:	b94c      	cbnz	r4, 80141ea <__pow5mult+0x66>
 80141d6:	f240 2171 	movw	r1, #625	; 0x271
 80141da:	4630      	mov	r0, r6
 80141dc:	f7ff ff12 	bl	8014004 <__i2b>
 80141e0:	2300      	movs	r3, #0
 80141e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80141e6:	4604      	mov	r4, r0
 80141e8:	6003      	str	r3, [r0, #0]
 80141ea:	f04f 0900 	mov.w	r9, #0
 80141ee:	07eb      	lsls	r3, r5, #31
 80141f0:	d50a      	bpl.n	8014208 <__pow5mult+0x84>
 80141f2:	4639      	mov	r1, r7
 80141f4:	4622      	mov	r2, r4
 80141f6:	4630      	mov	r0, r6
 80141f8:	f7ff ff1a 	bl	8014030 <__multiply>
 80141fc:	4639      	mov	r1, r7
 80141fe:	4680      	mov	r8, r0
 8014200:	4630      	mov	r0, r6
 8014202:	f7ff fdff 	bl	8013e04 <_Bfree>
 8014206:	4647      	mov	r7, r8
 8014208:	106d      	asrs	r5, r5, #1
 801420a:	d00b      	beq.n	8014224 <__pow5mult+0xa0>
 801420c:	6820      	ldr	r0, [r4, #0]
 801420e:	b938      	cbnz	r0, 8014220 <__pow5mult+0x9c>
 8014210:	4622      	mov	r2, r4
 8014212:	4621      	mov	r1, r4
 8014214:	4630      	mov	r0, r6
 8014216:	f7ff ff0b 	bl	8014030 <__multiply>
 801421a:	6020      	str	r0, [r4, #0]
 801421c:	f8c0 9000 	str.w	r9, [r0]
 8014220:	4604      	mov	r4, r0
 8014222:	e7e4      	b.n	80141ee <__pow5mult+0x6a>
 8014224:	4638      	mov	r0, r7
 8014226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801422a:	bf00      	nop
 801422c:	08016ba0 	.word	0x08016ba0
 8014230:	080169d6 	.word	0x080169d6
 8014234:	08016a56 	.word	0x08016a56

08014238 <__lshift>:
 8014238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801423c:	460c      	mov	r4, r1
 801423e:	6849      	ldr	r1, [r1, #4]
 8014240:	6923      	ldr	r3, [r4, #16]
 8014242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014246:	68a3      	ldr	r3, [r4, #8]
 8014248:	4607      	mov	r7, r0
 801424a:	4691      	mov	r9, r2
 801424c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014250:	f108 0601 	add.w	r6, r8, #1
 8014254:	42b3      	cmp	r3, r6
 8014256:	db0b      	blt.n	8014270 <__lshift+0x38>
 8014258:	4638      	mov	r0, r7
 801425a:	f7ff fd93 	bl	8013d84 <_Balloc>
 801425e:	4605      	mov	r5, r0
 8014260:	b948      	cbnz	r0, 8014276 <__lshift+0x3e>
 8014262:	4602      	mov	r2, r0
 8014264:	4b28      	ldr	r3, [pc, #160]	; (8014308 <__lshift+0xd0>)
 8014266:	4829      	ldr	r0, [pc, #164]	; (801430c <__lshift+0xd4>)
 8014268:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801426c:	f001 fb08 	bl	8015880 <__assert_func>
 8014270:	3101      	adds	r1, #1
 8014272:	005b      	lsls	r3, r3, #1
 8014274:	e7ee      	b.n	8014254 <__lshift+0x1c>
 8014276:	2300      	movs	r3, #0
 8014278:	f100 0114 	add.w	r1, r0, #20
 801427c:	f100 0210 	add.w	r2, r0, #16
 8014280:	4618      	mov	r0, r3
 8014282:	4553      	cmp	r3, sl
 8014284:	db33      	blt.n	80142ee <__lshift+0xb6>
 8014286:	6920      	ldr	r0, [r4, #16]
 8014288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801428c:	f104 0314 	add.w	r3, r4, #20
 8014290:	f019 091f 	ands.w	r9, r9, #31
 8014294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801429c:	d02b      	beq.n	80142f6 <__lshift+0xbe>
 801429e:	f1c9 0e20 	rsb	lr, r9, #32
 80142a2:	468a      	mov	sl, r1
 80142a4:	2200      	movs	r2, #0
 80142a6:	6818      	ldr	r0, [r3, #0]
 80142a8:	fa00 f009 	lsl.w	r0, r0, r9
 80142ac:	4310      	orrs	r0, r2
 80142ae:	f84a 0b04 	str.w	r0, [sl], #4
 80142b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80142b6:	459c      	cmp	ip, r3
 80142b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80142bc:	d8f3      	bhi.n	80142a6 <__lshift+0x6e>
 80142be:	ebac 0304 	sub.w	r3, ip, r4
 80142c2:	3b15      	subs	r3, #21
 80142c4:	f023 0303 	bic.w	r3, r3, #3
 80142c8:	3304      	adds	r3, #4
 80142ca:	f104 0015 	add.w	r0, r4, #21
 80142ce:	4584      	cmp	ip, r0
 80142d0:	bf38      	it	cc
 80142d2:	2304      	movcc	r3, #4
 80142d4:	50ca      	str	r2, [r1, r3]
 80142d6:	b10a      	cbz	r2, 80142dc <__lshift+0xa4>
 80142d8:	f108 0602 	add.w	r6, r8, #2
 80142dc:	3e01      	subs	r6, #1
 80142de:	4638      	mov	r0, r7
 80142e0:	612e      	str	r6, [r5, #16]
 80142e2:	4621      	mov	r1, r4
 80142e4:	f7ff fd8e 	bl	8013e04 <_Bfree>
 80142e8:	4628      	mov	r0, r5
 80142ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80142f2:	3301      	adds	r3, #1
 80142f4:	e7c5      	b.n	8014282 <__lshift+0x4a>
 80142f6:	3904      	subs	r1, #4
 80142f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80142fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8014300:	459c      	cmp	ip, r3
 8014302:	d8f9      	bhi.n	80142f8 <__lshift+0xc0>
 8014304:	e7ea      	b.n	80142dc <__lshift+0xa4>
 8014306:	bf00      	nop
 8014308:	08016a45 	.word	0x08016a45
 801430c:	08016a56 	.word	0x08016a56

08014310 <__mcmp>:
 8014310:	b530      	push	{r4, r5, lr}
 8014312:	6902      	ldr	r2, [r0, #16]
 8014314:	690c      	ldr	r4, [r1, #16]
 8014316:	1b12      	subs	r2, r2, r4
 8014318:	d10e      	bne.n	8014338 <__mcmp+0x28>
 801431a:	f100 0314 	add.w	r3, r0, #20
 801431e:	3114      	adds	r1, #20
 8014320:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014324:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014328:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801432c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014330:	42a5      	cmp	r5, r4
 8014332:	d003      	beq.n	801433c <__mcmp+0x2c>
 8014334:	d305      	bcc.n	8014342 <__mcmp+0x32>
 8014336:	2201      	movs	r2, #1
 8014338:	4610      	mov	r0, r2
 801433a:	bd30      	pop	{r4, r5, pc}
 801433c:	4283      	cmp	r3, r0
 801433e:	d3f3      	bcc.n	8014328 <__mcmp+0x18>
 8014340:	e7fa      	b.n	8014338 <__mcmp+0x28>
 8014342:	f04f 32ff 	mov.w	r2, #4294967295
 8014346:	e7f7      	b.n	8014338 <__mcmp+0x28>

08014348 <__mdiff>:
 8014348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801434c:	460c      	mov	r4, r1
 801434e:	4606      	mov	r6, r0
 8014350:	4611      	mov	r1, r2
 8014352:	4620      	mov	r0, r4
 8014354:	4690      	mov	r8, r2
 8014356:	f7ff ffdb 	bl	8014310 <__mcmp>
 801435a:	1e05      	subs	r5, r0, #0
 801435c:	d110      	bne.n	8014380 <__mdiff+0x38>
 801435e:	4629      	mov	r1, r5
 8014360:	4630      	mov	r0, r6
 8014362:	f7ff fd0f 	bl	8013d84 <_Balloc>
 8014366:	b930      	cbnz	r0, 8014376 <__mdiff+0x2e>
 8014368:	4b3a      	ldr	r3, [pc, #232]	; (8014454 <__mdiff+0x10c>)
 801436a:	4602      	mov	r2, r0
 801436c:	f240 2137 	movw	r1, #567	; 0x237
 8014370:	4839      	ldr	r0, [pc, #228]	; (8014458 <__mdiff+0x110>)
 8014372:	f001 fa85 	bl	8015880 <__assert_func>
 8014376:	2301      	movs	r3, #1
 8014378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801437c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014380:	bfa4      	itt	ge
 8014382:	4643      	movge	r3, r8
 8014384:	46a0      	movge	r8, r4
 8014386:	4630      	mov	r0, r6
 8014388:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801438c:	bfa6      	itte	ge
 801438e:	461c      	movge	r4, r3
 8014390:	2500      	movge	r5, #0
 8014392:	2501      	movlt	r5, #1
 8014394:	f7ff fcf6 	bl	8013d84 <_Balloc>
 8014398:	b920      	cbnz	r0, 80143a4 <__mdiff+0x5c>
 801439a:	4b2e      	ldr	r3, [pc, #184]	; (8014454 <__mdiff+0x10c>)
 801439c:	4602      	mov	r2, r0
 801439e:	f240 2145 	movw	r1, #581	; 0x245
 80143a2:	e7e5      	b.n	8014370 <__mdiff+0x28>
 80143a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80143a8:	6926      	ldr	r6, [r4, #16]
 80143aa:	60c5      	str	r5, [r0, #12]
 80143ac:	f104 0914 	add.w	r9, r4, #20
 80143b0:	f108 0514 	add.w	r5, r8, #20
 80143b4:	f100 0e14 	add.w	lr, r0, #20
 80143b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80143bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80143c0:	f108 0210 	add.w	r2, r8, #16
 80143c4:	46f2      	mov	sl, lr
 80143c6:	2100      	movs	r1, #0
 80143c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80143cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80143d0:	fa11 f88b 	uxtah	r8, r1, fp
 80143d4:	b299      	uxth	r1, r3
 80143d6:	0c1b      	lsrs	r3, r3, #16
 80143d8:	eba8 0801 	sub.w	r8, r8, r1
 80143dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80143e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80143e4:	fa1f f888 	uxth.w	r8, r8
 80143e8:	1419      	asrs	r1, r3, #16
 80143ea:	454e      	cmp	r6, r9
 80143ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80143f0:	f84a 3b04 	str.w	r3, [sl], #4
 80143f4:	d8e8      	bhi.n	80143c8 <__mdiff+0x80>
 80143f6:	1b33      	subs	r3, r6, r4
 80143f8:	3b15      	subs	r3, #21
 80143fa:	f023 0303 	bic.w	r3, r3, #3
 80143fe:	3304      	adds	r3, #4
 8014400:	3415      	adds	r4, #21
 8014402:	42a6      	cmp	r6, r4
 8014404:	bf38      	it	cc
 8014406:	2304      	movcc	r3, #4
 8014408:	441d      	add	r5, r3
 801440a:	4473      	add	r3, lr
 801440c:	469e      	mov	lr, r3
 801440e:	462e      	mov	r6, r5
 8014410:	4566      	cmp	r6, ip
 8014412:	d30e      	bcc.n	8014432 <__mdiff+0xea>
 8014414:	f10c 0203 	add.w	r2, ip, #3
 8014418:	1b52      	subs	r2, r2, r5
 801441a:	f022 0203 	bic.w	r2, r2, #3
 801441e:	3d03      	subs	r5, #3
 8014420:	45ac      	cmp	ip, r5
 8014422:	bf38      	it	cc
 8014424:	2200      	movcc	r2, #0
 8014426:	4413      	add	r3, r2
 8014428:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801442c:	b17a      	cbz	r2, 801444e <__mdiff+0x106>
 801442e:	6107      	str	r7, [r0, #16]
 8014430:	e7a4      	b.n	801437c <__mdiff+0x34>
 8014432:	f856 8b04 	ldr.w	r8, [r6], #4
 8014436:	fa11 f288 	uxtah	r2, r1, r8
 801443a:	1414      	asrs	r4, r2, #16
 801443c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014440:	b292      	uxth	r2, r2
 8014442:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014446:	f84e 2b04 	str.w	r2, [lr], #4
 801444a:	1421      	asrs	r1, r4, #16
 801444c:	e7e0      	b.n	8014410 <__mdiff+0xc8>
 801444e:	3f01      	subs	r7, #1
 8014450:	e7ea      	b.n	8014428 <__mdiff+0xe0>
 8014452:	bf00      	nop
 8014454:	08016a45 	.word	0x08016a45
 8014458:	08016a56 	.word	0x08016a56

0801445c <__ulp>:
 801445c:	b082      	sub	sp, #8
 801445e:	ed8d 0b00 	vstr	d0, [sp]
 8014462:	9a01      	ldr	r2, [sp, #4]
 8014464:	4b0f      	ldr	r3, [pc, #60]	; (80144a4 <__ulp+0x48>)
 8014466:	4013      	ands	r3, r2
 8014468:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801446c:	2b00      	cmp	r3, #0
 801446e:	dc08      	bgt.n	8014482 <__ulp+0x26>
 8014470:	425b      	negs	r3, r3
 8014472:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014476:	ea4f 5223 	mov.w	r2, r3, asr #20
 801447a:	da04      	bge.n	8014486 <__ulp+0x2a>
 801447c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014480:	4113      	asrs	r3, r2
 8014482:	2200      	movs	r2, #0
 8014484:	e008      	b.n	8014498 <__ulp+0x3c>
 8014486:	f1a2 0314 	sub.w	r3, r2, #20
 801448a:	2b1e      	cmp	r3, #30
 801448c:	bfda      	itte	le
 801448e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014492:	40da      	lsrle	r2, r3
 8014494:	2201      	movgt	r2, #1
 8014496:	2300      	movs	r3, #0
 8014498:	4619      	mov	r1, r3
 801449a:	4610      	mov	r0, r2
 801449c:	ec41 0b10 	vmov	d0, r0, r1
 80144a0:	b002      	add	sp, #8
 80144a2:	4770      	bx	lr
 80144a4:	7ff00000 	.word	0x7ff00000

080144a8 <__b2d>:
 80144a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ac:	6906      	ldr	r6, [r0, #16]
 80144ae:	f100 0814 	add.w	r8, r0, #20
 80144b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80144b6:	1f37      	subs	r7, r6, #4
 80144b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80144bc:	4610      	mov	r0, r2
 80144be:	f7ff fd53 	bl	8013f68 <__hi0bits>
 80144c2:	f1c0 0320 	rsb	r3, r0, #32
 80144c6:	280a      	cmp	r0, #10
 80144c8:	600b      	str	r3, [r1, #0]
 80144ca:	491b      	ldr	r1, [pc, #108]	; (8014538 <__b2d+0x90>)
 80144cc:	dc15      	bgt.n	80144fa <__b2d+0x52>
 80144ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80144d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80144d6:	45b8      	cmp	r8, r7
 80144d8:	ea43 0501 	orr.w	r5, r3, r1
 80144dc:	bf34      	ite	cc
 80144de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80144e2:	2300      	movcs	r3, #0
 80144e4:	3015      	adds	r0, #21
 80144e6:	fa02 f000 	lsl.w	r0, r2, r0
 80144ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80144ee:	4303      	orrs	r3, r0
 80144f0:	461c      	mov	r4, r3
 80144f2:	ec45 4b10 	vmov	d0, r4, r5
 80144f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fa:	45b8      	cmp	r8, r7
 80144fc:	bf3a      	itte	cc
 80144fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014502:	f1a6 0708 	subcc.w	r7, r6, #8
 8014506:	2300      	movcs	r3, #0
 8014508:	380b      	subs	r0, #11
 801450a:	d012      	beq.n	8014532 <__b2d+0x8a>
 801450c:	f1c0 0120 	rsb	r1, r0, #32
 8014510:	fa23 f401 	lsr.w	r4, r3, r1
 8014514:	4082      	lsls	r2, r0
 8014516:	4322      	orrs	r2, r4
 8014518:	4547      	cmp	r7, r8
 801451a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801451e:	bf8c      	ite	hi
 8014520:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014524:	2200      	movls	r2, #0
 8014526:	4083      	lsls	r3, r0
 8014528:	40ca      	lsrs	r2, r1
 801452a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801452e:	4313      	orrs	r3, r2
 8014530:	e7de      	b.n	80144f0 <__b2d+0x48>
 8014532:	ea42 0501 	orr.w	r5, r2, r1
 8014536:	e7db      	b.n	80144f0 <__b2d+0x48>
 8014538:	3ff00000 	.word	0x3ff00000

0801453c <__d2b>:
 801453c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014540:	460f      	mov	r7, r1
 8014542:	2101      	movs	r1, #1
 8014544:	ec59 8b10 	vmov	r8, r9, d0
 8014548:	4616      	mov	r6, r2
 801454a:	f7ff fc1b 	bl	8013d84 <_Balloc>
 801454e:	4604      	mov	r4, r0
 8014550:	b930      	cbnz	r0, 8014560 <__d2b+0x24>
 8014552:	4602      	mov	r2, r0
 8014554:	4b24      	ldr	r3, [pc, #144]	; (80145e8 <__d2b+0xac>)
 8014556:	4825      	ldr	r0, [pc, #148]	; (80145ec <__d2b+0xb0>)
 8014558:	f240 310f 	movw	r1, #783	; 0x30f
 801455c:	f001 f990 	bl	8015880 <__assert_func>
 8014560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014568:	bb2d      	cbnz	r5, 80145b6 <__d2b+0x7a>
 801456a:	9301      	str	r3, [sp, #4]
 801456c:	f1b8 0300 	subs.w	r3, r8, #0
 8014570:	d026      	beq.n	80145c0 <__d2b+0x84>
 8014572:	4668      	mov	r0, sp
 8014574:	9300      	str	r3, [sp, #0]
 8014576:	f7ff fd17 	bl	8013fa8 <__lo0bits>
 801457a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801457e:	b1e8      	cbz	r0, 80145bc <__d2b+0x80>
 8014580:	f1c0 0320 	rsb	r3, r0, #32
 8014584:	fa02 f303 	lsl.w	r3, r2, r3
 8014588:	430b      	orrs	r3, r1
 801458a:	40c2      	lsrs	r2, r0
 801458c:	6163      	str	r3, [r4, #20]
 801458e:	9201      	str	r2, [sp, #4]
 8014590:	9b01      	ldr	r3, [sp, #4]
 8014592:	61a3      	str	r3, [r4, #24]
 8014594:	2b00      	cmp	r3, #0
 8014596:	bf14      	ite	ne
 8014598:	2202      	movne	r2, #2
 801459a:	2201      	moveq	r2, #1
 801459c:	6122      	str	r2, [r4, #16]
 801459e:	b1bd      	cbz	r5, 80145d0 <__d2b+0x94>
 80145a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80145a4:	4405      	add	r5, r0
 80145a6:	603d      	str	r5, [r7, #0]
 80145a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80145ac:	6030      	str	r0, [r6, #0]
 80145ae:	4620      	mov	r0, r4
 80145b0:	b003      	add	sp, #12
 80145b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80145ba:	e7d6      	b.n	801456a <__d2b+0x2e>
 80145bc:	6161      	str	r1, [r4, #20]
 80145be:	e7e7      	b.n	8014590 <__d2b+0x54>
 80145c0:	a801      	add	r0, sp, #4
 80145c2:	f7ff fcf1 	bl	8013fa8 <__lo0bits>
 80145c6:	9b01      	ldr	r3, [sp, #4]
 80145c8:	6163      	str	r3, [r4, #20]
 80145ca:	3020      	adds	r0, #32
 80145cc:	2201      	movs	r2, #1
 80145ce:	e7e5      	b.n	801459c <__d2b+0x60>
 80145d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80145d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80145d8:	6038      	str	r0, [r7, #0]
 80145da:	6918      	ldr	r0, [r3, #16]
 80145dc:	f7ff fcc4 	bl	8013f68 <__hi0bits>
 80145e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80145e4:	e7e2      	b.n	80145ac <__d2b+0x70>
 80145e6:	bf00      	nop
 80145e8:	08016a45 	.word	0x08016a45
 80145ec:	08016a56 	.word	0x08016a56

080145f0 <__ratio>:
 80145f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f4:	4688      	mov	r8, r1
 80145f6:	4669      	mov	r1, sp
 80145f8:	4681      	mov	r9, r0
 80145fa:	f7ff ff55 	bl	80144a8 <__b2d>
 80145fe:	a901      	add	r1, sp, #4
 8014600:	4640      	mov	r0, r8
 8014602:	ec55 4b10 	vmov	r4, r5, d0
 8014606:	f7ff ff4f 	bl	80144a8 <__b2d>
 801460a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801460e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014612:	eba3 0c02 	sub.w	ip, r3, r2
 8014616:	e9dd 3200 	ldrd	r3, r2, [sp]
 801461a:	1a9b      	subs	r3, r3, r2
 801461c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014620:	ec51 0b10 	vmov	r0, r1, d0
 8014624:	2b00      	cmp	r3, #0
 8014626:	bfd6      	itet	le
 8014628:	460a      	movle	r2, r1
 801462a:	462a      	movgt	r2, r5
 801462c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014630:	468b      	mov	fp, r1
 8014632:	462f      	mov	r7, r5
 8014634:	bfd4      	ite	le
 8014636:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801463a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801463e:	4620      	mov	r0, r4
 8014640:	ee10 2a10 	vmov	r2, s0
 8014644:	465b      	mov	r3, fp
 8014646:	4639      	mov	r1, r7
 8014648:	f7ec f900 	bl	800084c <__aeabi_ddiv>
 801464c:	ec41 0b10 	vmov	d0, r0, r1
 8014650:	b003      	add	sp, #12
 8014652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014656 <__copybits>:
 8014656:	3901      	subs	r1, #1
 8014658:	b570      	push	{r4, r5, r6, lr}
 801465a:	1149      	asrs	r1, r1, #5
 801465c:	6914      	ldr	r4, [r2, #16]
 801465e:	3101      	adds	r1, #1
 8014660:	f102 0314 	add.w	r3, r2, #20
 8014664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014668:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801466c:	1f05      	subs	r5, r0, #4
 801466e:	42a3      	cmp	r3, r4
 8014670:	d30c      	bcc.n	801468c <__copybits+0x36>
 8014672:	1aa3      	subs	r3, r4, r2
 8014674:	3b11      	subs	r3, #17
 8014676:	f023 0303 	bic.w	r3, r3, #3
 801467a:	3211      	adds	r2, #17
 801467c:	42a2      	cmp	r2, r4
 801467e:	bf88      	it	hi
 8014680:	2300      	movhi	r3, #0
 8014682:	4418      	add	r0, r3
 8014684:	2300      	movs	r3, #0
 8014686:	4288      	cmp	r0, r1
 8014688:	d305      	bcc.n	8014696 <__copybits+0x40>
 801468a:	bd70      	pop	{r4, r5, r6, pc}
 801468c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014690:	f845 6f04 	str.w	r6, [r5, #4]!
 8014694:	e7eb      	b.n	801466e <__copybits+0x18>
 8014696:	f840 3b04 	str.w	r3, [r0], #4
 801469a:	e7f4      	b.n	8014686 <__copybits+0x30>

0801469c <__any_on>:
 801469c:	f100 0214 	add.w	r2, r0, #20
 80146a0:	6900      	ldr	r0, [r0, #16]
 80146a2:	114b      	asrs	r3, r1, #5
 80146a4:	4298      	cmp	r0, r3
 80146a6:	b510      	push	{r4, lr}
 80146a8:	db11      	blt.n	80146ce <__any_on+0x32>
 80146aa:	dd0a      	ble.n	80146c2 <__any_on+0x26>
 80146ac:	f011 011f 	ands.w	r1, r1, #31
 80146b0:	d007      	beq.n	80146c2 <__any_on+0x26>
 80146b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80146b6:	fa24 f001 	lsr.w	r0, r4, r1
 80146ba:	fa00 f101 	lsl.w	r1, r0, r1
 80146be:	428c      	cmp	r4, r1
 80146c0:	d10b      	bne.n	80146da <__any_on+0x3e>
 80146c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d803      	bhi.n	80146d2 <__any_on+0x36>
 80146ca:	2000      	movs	r0, #0
 80146cc:	bd10      	pop	{r4, pc}
 80146ce:	4603      	mov	r3, r0
 80146d0:	e7f7      	b.n	80146c2 <__any_on+0x26>
 80146d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80146d6:	2900      	cmp	r1, #0
 80146d8:	d0f5      	beq.n	80146c6 <__any_on+0x2a>
 80146da:	2001      	movs	r0, #1
 80146dc:	e7f6      	b.n	80146cc <__any_on+0x30>

080146de <sulp>:
 80146de:	b570      	push	{r4, r5, r6, lr}
 80146e0:	4604      	mov	r4, r0
 80146e2:	460d      	mov	r5, r1
 80146e4:	ec45 4b10 	vmov	d0, r4, r5
 80146e8:	4616      	mov	r6, r2
 80146ea:	f7ff feb7 	bl	801445c <__ulp>
 80146ee:	ec51 0b10 	vmov	r0, r1, d0
 80146f2:	b17e      	cbz	r6, 8014714 <sulp+0x36>
 80146f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80146f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	dd09      	ble.n	8014714 <sulp+0x36>
 8014700:	051b      	lsls	r3, r3, #20
 8014702:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014706:	2400      	movs	r4, #0
 8014708:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801470c:	4622      	mov	r2, r4
 801470e:	462b      	mov	r3, r5
 8014710:	f7eb ff72 	bl	80005f8 <__aeabi_dmul>
 8014714:	bd70      	pop	{r4, r5, r6, pc}
	...

08014718 <_strtod_l>:
 8014718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471c:	ed2d 8b02 	vpush	{d8}
 8014720:	b09b      	sub	sp, #108	; 0x6c
 8014722:	4604      	mov	r4, r0
 8014724:	9213      	str	r2, [sp, #76]	; 0x4c
 8014726:	2200      	movs	r2, #0
 8014728:	9216      	str	r2, [sp, #88]	; 0x58
 801472a:	460d      	mov	r5, r1
 801472c:	f04f 0800 	mov.w	r8, #0
 8014730:	f04f 0900 	mov.w	r9, #0
 8014734:	460a      	mov	r2, r1
 8014736:	9215      	str	r2, [sp, #84]	; 0x54
 8014738:	7811      	ldrb	r1, [r2, #0]
 801473a:	292b      	cmp	r1, #43	; 0x2b
 801473c:	d04c      	beq.n	80147d8 <_strtod_l+0xc0>
 801473e:	d83a      	bhi.n	80147b6 <_strtod_l+0x9e>
 8014740:	290d      	cmp	r1, #13
 8014742:	d834      	bhi.n	80147ae <_strtod_l+0x96>
 8014744:	2908      	cmp	r1, #8
 8014746:	d834      	bhi.n	80147b2 <_strtod_l+0x9a>
 8014748:	2900      	cmp	r1, #0
 801474a:	d03d      	beq.n	80147c8 <_strtod_l+0xb0>
 801474c:	2200      	movs	r2, #0
 801474e:	920a      	str	r2, [sp, #40]	; 0x28
 8014750:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014752:	7832      	ldrb	r2, [r6, #0]
 8014754:	2a30      	cmp	r2, #48	; 0x30
 8014756:	f040 80b4 	bne.w	80148c2 <_strtod_l+0x1aa>
 801475a:	7872      	ldrb	r2, [r6, #1]
 801475c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014760:	2a58      	cmp	r2, #88	; 0x58
 8014762:	d170      	bne.n	8014846 <_strtod_l+0x12e>
 8014764:	9302      	str	r3, [sp, #8]
 8014766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014768:	9301      	str	r3, [sp, #4]
 801476a:	ab16      	add	r3, sp, #88	; 0x58
 801476c:	9300      	str	r3, [sp, #0]
 801476e:	4a8e      	ldr	r2, [pc, #568]	; (80149a8 <_strtod_l+0x290>)
 8014770:	ab17      	add	r3, sp, #92	; 0x5c
 8014772:	a915      	add	r1, sp, #84	; 0x54
 8014774:	4620      	mov	r0, r4
 8014776:	f001 f91f 	bl	80159b8 <__gethex>
 801477a:	f010 070f 	ands.w	r7, r0, #15
 801477e:	4605      	mov	r5, r0
 8014780:	d005      	beq.n	801478e <_strtod_l+0x76>
 8014782:	2f06      	cmp	r7, #6
 8014784:	d12a      	bne.n	80147dc <_strtod_l+0xc4>
 8014786:	3601      	adds	r6, #1
 8014788:	2300      	movs	r3, #0
 801478a:	9615      	str	r6, [sp, #84]	; 0x54
 801478c:	930a      	str	r3, [sp, #40]	; 0x28
 801478e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014790:	2b00      	cmp	r3, #0
 8014792:	f040 857f 	bne.w	8015294 <_strtod_l+0xb7c>
 8014796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014798:	b1db      	cbz	r3, 80147d2 <_strtod_l+0xba>
 801479a:	4642      	mov	r2, r8
 801479c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80147a0:	ec43 2b10 	vmov	d0, r2, r3
 80147a4:	b01b      	add	sp, #108	; 0x6c
 80147a6:	ecbd 8b02 	vpop	{d8}
 80147aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ae:	2920      	cmp	r1, #32
 80147b0:	d1cc      	bne.n	801474c <_strtod_l+0x34>
 80147b2:	3201      	adds	r2, #1
 80147b4:	e7bf      	b.n	8014736 <_strtod_l+0x1e>
 80147b6:	292d      	cmp	r1, #45	; 0x2d
 80147b8:	d1c8      	bne.n	801474c <_strtod_l+0x34>
 80147ba:	2101      	movs	r1, #1
 80147bc:	910a      	str	r1, [sp, #40]	; 0x28
 80147be:	1c51      	adds	r1, r2, #1
 80147c0:	9115      	str	r1, [sp, #84]	; 0x54
 80147c2:	7852      	ldrb	r2, [r2, #1]
 80147c4:	2a00      	cmp	r2, #0
 80147c6:	d1c3      	bne.n	8014750 <_strtod_l+0x38>
 80147c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147ca:	9515      	str	r5, [sp, #84]	; 0x54
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	f040 855f 	bne.w	8015290 <_strtod_l+0xb78>
 80147d2:	4642      	mov	r2, r8
 80147d4:	464b      	mov	r3, r9
 80147d6:	e7e3      	b.n	80147a0 <_strtod_l+0x88>
 80147d8:	2100      	movs	r1, #0
 80147da:	e7ef      	b.n	80147bc <_strtod_l+0xa4>
 80147dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80147de:	b13a      	cbz	r2, 80147f0 <_strtod_l+0xd8>
 80147e0:	2135      	movs	r1, #53	; 0x35
 80147e2:	a818      	add	r0, sp, #96	; 0x60
 80147e4:	f7ff ff37 	bl	8014656 <__copybits>
 80147e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80147ea:	4620      	mov	r0, r4
 80147ec:	f7ff fb0a 	bl	8013e04 <_Bfree>
 80147f0:	3f01      	subs	r7, #1
 80147f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80147f4:	2f04      	cmp	r7, #4
 80147f6:	d806      	bhi.n	8014806 <_strtod_l+0xee>
 80147f8:	e8df f007 	tbb	[pc, r7]
 80147fc:	201d0314 	.word	0x201d0314
 8014800:	14          	.byte	0x14
 8014801:	00          	.byte	0x00
 8014802:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014806:	05e9      	lsls	r1, r5, #23
 8014808:	bf48      	it	mi
 801480a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801480e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014812:	0d1b      	lsrs	r3, r3, #20
 8014814:	051b      	lsls	r3, r3, #20
 8014816:	2b00      	cmp	r3, #0
 8014818:	d1b9      	bne.n	801478e <_strtod_l+0x76>
 801481a:	f7fe fbad 	bl	8012f78 <__errno>
 801481e:	2322      	movs	r3, #34	; 0x22
 8014820:	6003      	str	r3, [r0, #0]
 8014822:	e7b4      	b.n	801478e <_strtod_l+0x76>
 8014824:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014828:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801482c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014830:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014834:	e7e7      	b.n	8014806 <_strtod_l+0xee>
 8014836:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80149b0 <_strtod_l+0x298>
 801483a:	e7e4      	b.n	8014806 <_strtod_l+0xee>
 801483c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014840:	f04f 38ff 	mov.w	r8, #4294967295
 8014844:	e7df      	b.n	8014806 <_strtod_l+0xee>
 8014846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014848:	1c5a      	adds	r2, r3, #1
 801484a:	9215      	str	r2, [sp, #84]	; 0x54
 801484c:	785b      	ldrb	r3, [r3, #1]
 801484e:	2b30      	cmp	r3, #48	; 0x30
 8014850:	d0f9      	beq.n	8014846 <_strtod_l+0x12e>
 8014852:	2b00      	cmp	r3, #0
 8014854:	d09b      	beq.n	801478e <_strtod_l+0x76>
 8014856:	2301      	movs	r3, #1
 8014858:	f04f 0a00 	mov.w	sl, #0
 801485c:	9304      	str	r3, [sp, #16]
 801485e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014860:	930b      	str	r3, [sp, #44]	; 0x2c
 8014862:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014866:	46d3      	mov	fp, sl
 8014868:	220a      	movs	r2, #10
 801486a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801486c:	7806      	ldrb	r6, [r0, #0]
 801486e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014872:	b2d9      	uxtb	r1, r3
 8014874:	2909      	cmp	r1, #9
 8014876:	d926      	bls.n	80148c6 <_strtod_l+0x1ae>
 8014878:	494c      	ldr	r1, [pc, #304]	; (80149ac <_strtod_l+0x294>)
 801487a:	2201      	movs	r2, #1
 801487c:	f000 ffe6 	bl	801584c <strncmp>
 8014880:	2800      	cmp	r0, #0
 8014882:	d030      	beq.n	80148e6 <_strtod_l+0x1ce>
 8014884:	2000      	movs	r0, #0
 8014886:	4632      	mov	r2, r6
 8014888:	9005      	str	r0, [sp, #20]
 801488a:	465e      	mov	r6, fp
 801488c:	4603      	mov	r3, r0
 801488e:	2a65      	cmp	r2, #101	; 0x65
 8014890:	d001      	beq.n	8014896 <_strtod_l+0x17e>
 8014892:	2a45      	cmp	r2, #69	; 0x45
 8014894:	d113      	bne.n	80148be <_strtod_l+0x1a6>
 8014896:	b91e      	cbnz	r6, 80148a0 <_strtod_l+0x188>
 8014898:	9a04      	ldr	r2, [sp, #16]
 801489a:	4302      	orrs	r2, r0
 801489c:	d094      	beq.n	80147c8 <_strtod_l+0xb0>
 801489e:	2600      	movs	r6, #0
 80148a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80148a2:	1c6a      	adds	r2, r5, #1
 80148a4:	9215      	str	r2, [sp, #84]	; 0x54
 80148a6:	786a      	ldrb	r2, [r5, #1]
 80148a8:	2a2b      	cmp	r2, #43	; 0x2b
 80148aa:	d074      	beq.n	8014996 <_strtod_l+0x27e>
 80148ac:	2a2d      	cmp	r2, #45	; 0x2d
 80148ae:	d078      	beq.n	80149a2 <_strtod_l+0x28a>
 80148b0:	f04f 0c00 	mov.w	ip, #0
 80148b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80148b8:	2909      	cmp	r1, #9
 80148ba:	d97f      	bls.n	80149bc <_strtod_l+0x2a4>
 80148bc:	9515      	str	r5, [sp, #84]	; 0x54
 80148be:	2700      	movs	r7, #0
 80148c0:	e09e      	b.n	8014a00 <_strtod_l+0x2e8>
 80148c2:	2300      	movs	r3, #0
 80148c4:	e7c8      	b.n	8014858 <_strtod_l+0x140>
 80148c6:	f1bb 0f08 	cmp.w	fp, #8
 80148ca:	bfd8      	it	le
 80148cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80148ce:	f100 0001 	add.w	r0, r0, #1
 80148d2:	bfda      	itte	le
 80148d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80148d8:	9309      	strle	r3, [sp, #36]	; 0x24
 80148da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80148de:	f10b 0b01 	add.w	fp, fp, #1
 80148e2:	9015      	str	r0, [sp, #84]	; 0x54
 80148e4:	e7c1      	b.n	801486a <_strtod_l+0x152>
 80148e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148e8:	1c5a      	adds	r2, r3, #1
 80148ea:	9215      	str	r2, [sp, #84]	; 0x54
 80148ec:	785a      	ldrb	r2, [r3, #1]
 80148ee:	f1bb 0f00 	cmp.w	fp, #0
 80148f2:	d037      	beq.n	8014964 <_strtod_l+0x24c>
 80148f4:	9005      	str	r0, [sp, #20]
 80148f6:	465e      	mov	r6, fp
 80148f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80148fc:	2b09      	cmp	r3, #9
 80148fe:	d912      	bls.n	8014926 <_strtod_l+0x20e>
 8014900:	2301      	movs	r3, #1
 8014902:	e7c4      	b.n	801488e <_strtod_l+0x176>
 8014904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014906:	1c5a      	adds	r2, r3, #1
 8014908:	9215      	str	r2, [sp, #84]	; 0x54
 801490a:	785a      	ldrb	r2, [r3, #1]
 801490c:	3001      	adds	r0, #1
 801490e:	2a30      	cmp	r2, #48	; 0x30
 8014910:	d0f8      	beq.n	8014904 <_strtod_l+0x1ec>
 8014912:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014916:	2b08      	cmp	r3, #8
 8014918:	f200 84c1 	bhi.w	801529e <_strtod_l+0xb86>
 801491c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801491e:	9005      	str	r0, [sp, #20]
 8014920:	2000      	movs	r0, #0
 8014922:	930b      	str	r3, [sp, #44]	; 0x2c
 8014924:	4606      	mov	r6, r0
 8014926:	3a30      	subs	r2, #48	; 0x30
 8014928:	f100 0301 	add.w	r3, r0, #1
 801492c:	d014      	beq.n	8014958 <_strtod_l+0x240>
 801492e:	9905      	ldr	r1, [sp, #20]
 8014930:	4419      	add	r1, r3
 8014932:	9105      	str	r1, [sp, #20]
 8014934:	4633      	mov	r3, r6
 8014936:	eb00 0c06 	add.w	ip, r0, r6
 801493a:	210a      	movs	r1, #10
 801493c:	4563      	cmp	r3, ip
 801493e:	d113      	bne.n	8014968 <_strtod_l+0x250>
 8014940:	1833      	adds	r3, r6, r0
 8014942:	2b08      	cmp	r3, #8
 8014944:	f106 0601 	add.w	r6, r6, #1
 8014948:	4406      	add	r6, r0
 801494a:	dc1a      	bgt.n	8014982 <_strtod_l+0x26a>
 801494c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801494e:	230a      	movs	r3, #10
 8014950:	fb03 2301 	mla	r3, r3, r1, r2
 8014954:	9309      	str	r3, [sp, #36]	; 0x24
 8014956:	2300      	movs	r3, #0
 8014958:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801495a:	1c51      	adds	r1, r2, #1
 801495c:	9115      	str	r1, [sp, #84]	; 0x54
 801495e:	7852      	ldrb	r2, [r2, #1]
 8014960:	4618      	mov	r0, r3
 8014962:	e7c9      	b.n	80148f8 <_strtod_l+0x1e0>
 8014964:	4658      	mov	r0, fp
 8014966:	e7d2      	b.n	801490e <_strtod_l+0x1f6>
 8014968:	2b08      	cmp	r3, #8
 801496a:	f103 0301 	add.w	r3, r3, #1
 801496e:	dc03      	bgt.n	8014978 <_strtod_l+0x260>
 8014970:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014972:	434f      	muls	r7, r1
 8014974:	9709      	str	r7, [sp, #36]	; 0x24
 8014976:	e7e1      	b.n	801493c <_strtod_l+0x224>
 8014978:	2b10      	cmp	r3, #16
 801497a:	bfd8      	it	le
 801497c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014980:	e7dc      	b.n	801493c <_strtod_l+0x224>
 8014982:	2e10      	cmp	r6, #16
 8014984:	bfdc      	itt	le
 8014986:	230a      	movle	r3, #10
 8014988:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801498c:	e7e3      	b.n	8014956 <_strtod_l+0x23e>
 801498e:	2300      	movs	r3, #0
 8014990:	9305      	str	r3, [sp, #20]
 8014992:	2301      	movs	r3, #1
 8014994:	e780      	b.n	8014898 <_strtod_l+0x180>
 8014996:	f04f 0c00 	mov.w	ip, #0
 801499a:	1caa      	adds	r2, r5, #2
 801499c:	9215      	str	r2, [sp, #84]	; 0x54
 801499e:	78aa      	ldrb	r2, [r5, #2]
 80149a0:	e788      	b.n	80148b4 <_strtod_l+0x19c>
 80149a2:	f04f 0c01 	mov.w	ip, #1
 80149a6:	e7f8      	b.n	801499a <_strtod_l+0x282>
 80149a8:	08016bb0 	.word	0x08016bb0
 80149ac:	08016bac 	.word	0x08016bac
 80149b0:	7ff00000 	.word	0x7ff00000
 80149b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149b6:	1c51      	adds	r1, r2, #1
 80149b8:	9115      	str	r1, [sp, #84]	; 0x54
 80149ba:	7852      	ldrb	r2, [r2, #1]
 80149bc:	2a30      	cmp	r2, #48	; 0x30
 80149be:	d0f9      	beq.n	80149b4 <_strtod_l+0x29c>
 80149c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80149c4:	2908      	cmp	r1, #8
 80149c6:	f63f af7a 	bhi.w	80148be <_strtod_l+0x1a6>
 80149ca:	3a30      	subs	r2, #48	; 0x30
 80149cc:	9208      	str	r2, [sp, #32]
 80149ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149d0:	920c      	str	r2, [sp, #48]	; 0x30
 80149d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149d4:	1c57      	adds	r7, r2, #1
 80149d6:	9715      	str	r7, [sp, #84]	; 0x54
 80149d8:	7852      	ldrb	r2, [r2, #1]
 80149da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80149de:	f1be 0f09 	cmp.w	lr, #9
 80149e2:	d938      	bls.n	8014a56 <_strtod_l+0x33e>
 80149e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80149e6:	1a7f      	subs	r7, r7, r1
 80149e8:	2f08      	cmp	r7, #8
 80149ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80149ee:	dc03      	bgt.n	80149f8 <_strtod_l+0x2e0>
 80149f0:	9908      	ldr	r1, [sp, #32]
 80149f2:	428f      	cmp	r7, r1
 80149f4:	bfa8      	it	ge
 80149f6:	460f      	movge	r7, r1
 80149f8:	f1bc 0f00 	cmp.w	ip, #0
 80149fc:	d000      	beq.n	8014a00 <_strtod_l+0x2e8>
 80149fe:	427f      	negs	r7, r7
 8014a00:	2e00      	cmp	r6, #0
 8014a02:	d14f      	bne.n	8014aa4 <_strtod_l+0x38c>
 8014a04:	9904      	ldr	r1, [sp, #16]
 8014a06:	4301      	orrs	r1, r0
 8014a08:	f47f aec1 	bne.w	801478e <_strtod_l+0x76>
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f47f aedb 	bne.w	80147c8 <_strtod_l+0xb0>
 8014a12:	2a69      	cmp	r2, #105	; 0x69
 8014a14:	d029      	beq.n	8014a6a <_strtod_l+0x352>
 8014a16:	dc26      	bgt.n	8014a66 <_strtod_l+0x34e>
 8014a18:	2a49      	cmp	r2, #73	; 0x49
 8014a1a:	d026      	beq.n	8014a6a <_strtod_l+0x352>
 8014a1c:	2a4e      	cmp	r2, #78	; 0x4e
 8014a1e:	f47f aed3 	bne.w	80147c8 <_strtod_l+0xb0>
 8014a22:	499b      	ldr	r1, [pc, #620]	; (8014c90 <_strtod_l+0x578>)
 8014a24:	a815      	add	r0, sp, #84	; 0x54
 8014a26:	f001 fa07 	bl	8015e38 <__match>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	f43f aecc 	beq.w	80147c8 <_strtod_l+0xb0>
 8014a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	2b28      	cmp	r3, #40	; 0x28
 8014a36:	d12f      	bne.n	8014a98 <_strtod_l+0x380>
 8014a38:	4996      	ldr	r1, [pc, #600]	; (8014c94 <_strtod_l+0x57c>)
 8014a3a:	aa18      	add	r2, sp, #96	; 0x60
 8014a3c:	a815      	add	r0, sp, #84	; 0x54
 8014a3e:	f001 fa0f 	bl	8015e60 <__hexnan>
 8014a42:	2805      	cmp	r0, #5
 8014a44:	d128      	bne.n	8014a98 <_strtod_l+0x380>
 8014a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014a4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014a50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014a54:	e69b      	b.n	801478e <_strtod_l+0x76>
 8014a56:	9f08      	ldr	r7, [sp, #32]
 8014a58:	210a      	movs	r1, #10
 8014a5a:	fb01 2107 	mla	r1, r1, r7, r2
 8014a5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014a62:	9208      	str	r2, [sp, #32]
 8014a64:	e7b5      	b.n	80149d2 <_strtod_l+0x2ba>
 8014a66:	2a6e      	cmp	r2, #110	; 0x6e
 8014a68:	e7d9      	b.n	8014a1e <_strtod_l+0x306>
 8014a6a:	498b      	ldr	r1, [pc, #556]	; (8014c98 <_strtod_l+0x580>)
 8014a6c:	a815      	add	r0, sp, #84	; 0x54
 8014a6e:	f001 f9e3 	bl	8015e38 <__match>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	f43f aea8 	beq.w	80147c8 <_strtod_l+0xb0>
 8014a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a7a:	4988      	ldr	r1, [pc, #544]	; (8014c9c <_strtod_l+0x584>)
 8014a7c:	3b01      	subs	r3, #1
 8014a7e:	a815      	add	r0, sp, #84	; 0x54
 8014a80:	9315      	str	r3, [sp, #84]	; 0x54
 8014a82:	f001 f9d9 	bl	8015e38 <__match>
 8014a86:	b910      	cbnz	r0, 8014a8e <_strtod_l+0x376>
 8014a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	9315      	str	r3, [sp, #84]	; 0x54
 8014a8e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014cac <_strtod_l+0x594>
 8014a92:	f04f 0800 	mov.w	r8, #0
 8014a96:	e67a      	b.n	801478e <_strtod_l+0x76>
 8014a98:	4881      	ldr	r0, [pc, #516]	; (8014ca0 <_strtod_l+0x588>)
 8014a9a:	f000 fee9 	bl	8015870 <nan>
 8014a9e:	ec59 8b10 	vmov	r8, r9, d0
 8014aa2:	e674      	b.n	801478e <_strtod_l+0x76>
 8014aa4:	9b05      	ldr	r3, [sp, #20]
 8014aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014aa8:	1afb      	subs	r3, r7, r3
 8014aaa:	f1bb 0f00 	cmp.w	fp, #0
 8014aae:	bf08      	it	eq
 8014ab0:	46b3      	moveq	fp, r6
 8014ab2:	2e10      	cmp	r6, #16
 8014ab4:	9308      	str	r3, [sp, #32]
 8014ab6:	4635      	mov	r5, r6
 8014ab8:	bfa8      	it	ge
 8014aba:	2510      	movge	r5, #16
 8014abc:	f7eb fd22 	bl	8000504 <__aeabi_ui2d>
 8014ac0:	2e09      	cmp	r6, #9
 8014ac2:	4680      	mov	r8, r0
 8014ac4:	4689      	mov	r9, r1
 8014ac6:	dd13      	ble.n	8014af0 <_strtod_l+0x3d8>
 8014ac8:	4b76      	ldr	r3, [pc, #472]	; (8014ca4 <_strtod_l+0x58c>)
 8014aca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014ace:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014ad2:	f7eb fd91 	bl	80005f8 <__aeabi_dmul>
 8014ad6:	4680      	mov	r8, r0
 8014ad8:	4650      	mov	r0, sl
 8014ada:	4689      	mov	r9, r1
 8014adc:	f7eb fd12 	bl	8000504 <__aeabi_ui2d>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	4640      	mov	r0, r8
 8014ae6:	4649      	mov	r1, r9
 8014ae8:	f7eb fbd0 	bl	800028c <__adddf3>
 8014aec:	4680      	mov	r8, r0
 8014aee:	4689      	mov	r9, r1
 8014af0:	2e0f      	cmp	r6, #15
 8014af2:	dc38      	bgt.n	8014b66 <_strtod_l+0x44e>
 8014af4:	9b08      	ldr	r3, [sp, #32]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	f43f ae49 	beq.w	801478e <_strtod_l+0x76>
 8014afc:	dd24      	ble.n	8014b48 <_strtod_l+0x430>
 8014afe:	2b16      	cmp	r3, #22
 8014b00:	dc0b      	bgt.n	8014b1a <_strtod_l+0x402>
 8014b02:	4968      	ldr	r1, [pc, #416]	; (8014ca4 <_strtod_l+0x58c>)
 8014b04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b0c:	4642      	mov	r2, r8
 8014b0e:	464b      	mov	r3, r9
 8014b10:	f7eb fd72 	bl	80005f8 <__aeabi_dmul>
 8014b14:	4680      	mov	r8, r0
 8014b16:	4689      	mov	r9, r1
 8014b18:	e639      	b.n	801478e <_strtod_l+0x76>
 8014b1a:	9a08      	ldr	r2, [sp, #32]
 8014b1c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014b20:	4293      	cmp	r3, r2
 8014b22:	db20      	blt.n	8014b66 <_strtod_l+0x44e>
 8014b24:	4c5f      	ldr	r4, [pc, #380]	; (8014ca4 <_strtod_l+0x58c>)
 8014b26:	f1c6 060f 	rsb	r6, r6, #15
 8014b2a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014b2e:	4642      	mov	r2, r8
 8014b30:	464b      	mov	r3, r9
 8014b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b36:	f7eb fd5f 	bl	80005f8 <__aeabi_dmul>
 8014b3a:	9b08      	ldr	r3, [sp, #32]
 8014b3c:	1b9e      	subs	r6, r3, r6
 8014b3e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014b42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014b46:	e7e3      	b.n	8014b10 <_strtod_l+0x3f8>
 8014b48:	9b08      	ldr	r3, [sp, #32]
 8014b4a:	3316      	adds	r3, #22
 8014b4c:	db0b      	blt.n	8014b66 <_strtod_l+0x44e>
 8014b4e:	9b05      	ldr	r3, [sp, #20]
 8014b50:	1bdf      	subs	r7, r3, r7
 8014b52:	4b54      	ldr	r3, [pc, #336]	; (8014ca4 <_strtod_l+0x58c>)
 8014b54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b5c:	4640      	mov	r0, r8
 8014b5e:	4649      	mov	r1, r9
 8014b60:	f7eb fe74 	bl	800084c <__aeabi_ddiv>
 8014b64:	e7d6      	b.n	8014b14 <_strtod_l+0x3fc>
 8014b66:	9b08      	ldr	r3, [sp, #32]
 8014b68:	1b75      	subs	r5, r6, r5
 8014b6a:	441d      	add	r5, r3
 8014b6c:	2d00      	cmp	r5, #0
 8014b6e:	dd70      	ble.n	8014c52 <_strtod_l+0x53a>
 8014b70:	f015 030f 	ands.w	r3, r5, #15
 8014b74:	d00a      	beq.n	8014b8c <_strtod_l+0x474>
 8014b76:	494b      	ldr	r1, [pc, #300]	; (8014ca4 <_strtod_l+0x58c>)
 8014b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014b7c:	4642      	mov	r2, r8
 8014b7e:	464b      	mov	r3, r9
 8014b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b84:	f7eb fd38 	bl	80005f8 <__aeabi_dmul>
 8014b88:	4680      	mov	r8, r0
 8014b8a:	4689      	mov	r9, r1
 8014b8c:	f035 050f 	bics.w	r5, r5, #15
 8014b90:	d04d      	beq.n	8014c2e <_strtod_l+0x516>
 8014b92:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014b96:	dd22      	ble.n	8014bde <_strtod_l+0x4c6>
 8014b98:	2500      	movs	r5, #0
 8014b9a:	46ab      	mov	fp, r5
 8014b9c:	9509      	str	r5, [sp, #36]	; 0x24
 8014b9e:	9505      	str	r5, [sp, #20]
 8014ba0:	2322      	movs	r3, #34	; 0x22
 8014ba2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014cac <_strtod_l+0x594>
 8014ba6:	6023      	str	r3, [r4, #0]
 8014ba8:	f04f 0800 	mov.w	r8, #0
 8014bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f43f aded 	beq.w	801478e <_strtod_l+0x76>
 8014bb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	f7ff f924 	bl	8013e04 <_Bfree>
 8014bbc:	9905      	ldr	r1, [sp, #20]
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f7ff f920 	bl	8013e04 <_Bfree>
 8014bc4:	4659      	mov	r1, fp
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f7ff f91c 	bl	8013e04 <_Bfree>
 8014bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bce:	4620      	mov	r0, r4
 8014bd0:	f7ff f918 	bl	8013e04 <_Bfree>
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	f7ff f914 	bl	8013e04 <_Bfree>
 8014bdc:	e5d7      	b.n	801478e <_strtod_l+0x76>
 8014bde:	4b32      	ldr	r3, [pc, #200]	; (8014ca8 <_strtod_l+0x590>)
 8014be0:	9304      	str	r3, [sp, #16]
 8014be2:	2300      	movs	r3, #0
 8014be4:	112d      	asrs	r5, r5, #4
 8014be6:	4640      	mov	r0, r8
 8014be8:	4649      	mov	r1, r9
 8014bea:	469a      	mov	sl, r3
 8014bec:	2d01      	cmp	r5, #1
 8014bee:	dc21      	bgt.n	8014c34 <_strtod_l+0x51c>
 8014bf0:	b10b      	cbz	r3, 8014bf6 <_strtod_l+0x4de>
 8014bf2:	4680      	mov	r8, r0
 8014bf4:	4689      	mov	r9, r1
 8014bf6:	492c      	ldr	r1, [pc, #176]	; (8014ca8 <_strtod_l+0x590>)
 8014bf8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014bfc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014c00:	4642      	mov	r2, r8
 8014c02:	464b      	mov	r3, r9
 8014c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c08:	f7eb fcf6 	bl	80005f8 <__aeabi_dmul>
 8014c0c:	4b27      	ldr	r3, [pc, #156]	; (8014cac <_strtod_l+0x594>)
 8014c0e:	460a      	mov	r2, r1
 8014c10:	400b      	ands	r3, r1
 8014c12:	4927      	ldr	r1, [pc, #156]	; (8014cb0 <_strtod_l+0x598>)
 8014c14:	428b      	cmp	r3, r1
 8014c16:	4680      	mov	r8, r0
 8014c18:	d8be      	bhi.n	8014b98 <_strtod_l+0x480>
 8014c1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014c1e:	428b      	cmp	r3, r1
 8014c20:	bf86      	itte	hi
 8014c22:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014cb4 <_strtod_l+0x59c>
 8014c26:	f04f 38ff 	movhi.w	r8, #4294967295
 8014c2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014c2e:	2300      	movs	r3, #0
 8014c30:	9304      	str	r3, [sp, #16]
 8014c32:	e07b      	b.n	8014d2c <_strtod_l+0x614>
 8014c34:	07ea      	lsls	r2, r5, #31
 8014c36:	d505      	bpl.n	8014c44 <_strtod_l+0x52c>
 8014c38:	9b04      	ldr	r3, [sp, #16]
 8014c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3e:	f7eb fcdb 	bl	80005f8 <__aeabi_dmul>
 8014c42:	2301      	movs	r3, #1
 8014c44:	9a04      	ldr	r2, [sp, #16]
 8014c46:	3208      	adds	r2, #8
 8014c48:	f10a 0a01 	add.w	sl, sl, #1
 8014c4c:	106d      	asrs	r5, r5, #1
 8014c4e:	9204      	str	r2, [sp, #16]
 8014c50:	e7cc      	b.n	8014bec <_strtod_l+0x4d4>
 8014c52:	d0ec      	beq.n	8014c2e <_strtod_l+0x516>
 8014c54:	426d      	negs	r5, r5
 8014c56:	f015 020f 	ands.w	r2, r5, #15
 8014c5a:	d00a      	beq.n	8014c72 <_strtod_l+0x55a>
 8014c5c:	4b11      	ldr	r3, [pc, #68]	; (8014ca4 <_strtod_l+0x58c>)
 8014c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c62:	4640      	mov	r0, r8
 8014c64:	4649      	mov	r1, r9
 8014c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6a:	f7eb fdef 	bl	800084c <__aeabi_ddiv>
 8014c6e:	4680      	mov	r8, r0
 8014c70:	4689      	mov	r9, r1
 8014c72:	112d      	asrs	r5, r5, #4
 8014c74:	d0db      	beq.n	8014c2e <_strtod_l+0x516>
 8014c76:	2d1f      	cmp	r5, #31
 8014c78:	dd1e      	ble.n	8014cb8 <_strtod_l+0x5a0>
 8014c7a:	2500      	movs	r5, #0
 8014c7c:	46ab      	mov	fp, r5
 8014c7e:	9509      	str	r5, [sp, #36]	; 0x24
 8014c80:	9505      	str	r5, [sp, #20]
 8014c82:	2322      	movs	r3, #34	; 0x22
 8014c84:	f04f 0800 	mov.w	r8, #0
 8014c88:	f04f 0900 	mov.w	r9, #0
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	e78d      	b.n	8014bac <_strtod_l+0x494>
 8014c90:	0801699d 	.word	0x0801699d
 8014c94:	08016bc4 	.word	0x08016bc4
 8014c98:	08016995 	.word	0x08016995
 8014c9c:	080169cc 	.word	0x080169cc
 8014ca0:	08016d55 	.word	0x08016d55
 8014ca4:	08016ad8 	.word	0x08016ad8
 8014ca8:	08016ab0 	.word	0x08016ab0
 8014cac:	7ff00000 	.word	0x7ff00000
 8014cb0:	7ca00000 	.word	0x7ca00000
 8014cb4:	7fefffff 	.word	0x7fefffff
 8014cb8:	f015 0310 	ands.w	r3, r5, #16
 8014cbc:	bf18      	it	ne
 8014cbe:	236a      	movne	r3, #106	; 0x6a
 8014cc0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015064 <_strtod_l+0x94c>
 8014cc4:	9304      	str	r3, [sp, #16]
 8014cc6:	4640      	mov	r0, r8
 8014cc8:	4649      	mov	r1, r9
 8014cca:	2300      	movs	r3, #0
 8014ccc:	07ea      	lsls	r2, r5, #31
 8014cce:	d504      	bpl.n	8014cda <_strtod_l+0x5c2>
 8014cd0:	e9da 2300 	ldrd	r2, r3, [sl]
 8014cd4:	f7eb fc90 	bl	80005f8 <__aeabi_dmul>
 8014cd8:	2301      	movs	r3, #1
 8014cda:	106d      	asrs	r5, r5, #1
 8014cdc:	f10a 0a08 	add.w	sl, sl, #8
 8014ce0:	d1f4      	bne.n	8014ccc <_strtod_l+0x5b4>
 8014ce2:	b10b      	cbz	r3, 8014ce8 <_strtod_l+0x5d0>
 8014ce4:	4680      	mov	r8, r0
 8014ce6:	4689      	mov	r9, r1
 8014ce8:	9b04      	ldr	r3, [sp, #16]
 8014cea:	b1bb      	cbz	r3, 8014d1c <_strtod_l+0x604>
 8014cec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014cf0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	4649      	mov	r1, r9
 8014cf8:	dd10      	ble.n	8014d1c <_strtod_l+0x604>
 8014cfa:	2b1f      	cmp	r3, #31
 8014cfc:	f340 811e 	ble.w	8014f3c <_strtod_l+0x824>
 8014d00:	2b34      	cmp	r3, #52	; 0x34
 8014d02:	bfde      	ittt	le
 8014d04:	f04f 33ff 	movle.w	r3, #4294967295
 8014d08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014d0c:	4093      	lslle	r3, r2
 8014d0e:	f04f 0800 	mov.w	r8, #0
 8014d12:	bfcc      	ite	gt
 8014d14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014d18:	ea03 0901 	andle.w	r9, r3, r1
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	2300      	movs	r3, #0
 8014d20:	4640      	mov	r0, r8
 8014d22:	4649      	mov	r1, r9
 8014d24:	f7eb fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	d1a6      	bne.n	8014c7a <_strtod_l+0x562>
 8014d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d32:	4633      	mov	r3, r6
 8014d34:	465a      	mov	r2, fp
 8014d36:	4620      	mov	r0, r4
 8014d38:	f7ff f8cc 	bl	8013ed4 <__s2b>
 8014d3c:	9009      	str	r0, [sp, #36]	; 0x24
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	f43f af2a 	beq.w	8014b98 <_strtod_l+0x480>
 8014d44:	9a08      	ldr	r2, [sp, #32]
 8014d46:	9b05      	ldr	r3, [sp, #20]
 8014d48:	2a00      	cmp	r2, #0
 8014d4a:	eba3 0307 	sub.w	r3, r3, r7
 8014d4e:	bfa8      	it	ge
 8014d50:	2300      	movge	r3, #0
 8014d52:	930c      	str	r3, [sp, #48]	; 0x30
 8014d54:	2500      	movs	r5, #0
 8014d56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8014d5c:	46ab      	mov	fp, r5
 8014d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d60:	4620      	mov	r0, r4
 8014d62:	6859      	ldr	r1, [r3, #4]
 8014d64:	f7ff f80e 	bl	8013d84 <_Balloc>
 8014d68:	9005      	str	r0, [sp, #20]
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f43f af18 	beq.w	8014ba0 <_strtod_l+0x488>
 8014d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d72:	691a      	ldr	r2, [r3, #16]
 8014d74:	3202      	adds	r2, #2
 8014d76:	f103 010c 	add.w	r1, r3, #12
 8014d7a:	0092      	lsls	r2, r2, #2
 8014d7c:	300c      	adds	r0, #12
 8014d7e:	f7fe f927 	bl	8012fd0 <memcpy>
 8014d82:	ec49 8b10 	vmov	d0, r8, r9
 8014d86:	aa18      	add	r2, sp, #96	; 0x60
 8014d88:	a917      	add	r1, sp, #92	; 0x5c
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f7ff fbd6 	bl	801453c <__d2b>
 8014d90:	ec49 8b18 	vmov	d8, r8, r9
 8014d94:	9016      	str	r0, [sp, #88]	; 0x58
 8014d96:	2800      	cmp	r0, #0
 8014d98:	f43f af02 	beq.w	8014ba0 <_strtod_l+0x488>
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	4620      	mov	r0, r4
 8014da0:	f7ff f930 	bl	8014004 <__i2b>
 8014da4:	4683      	mov	fp, r0
 8014da6:	2800      	cmp	r0, #0
 8014da8:	f43f aefa 	beq.w	8014ba0 <_strtod_l+0x488>
 8014dac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014dae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014db0:	2e00      	cmp	r6, #0
 8014db2:	bfab      	itete	ge
 8014db4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8014db6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014db8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014dba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014dbe:	bfac      	ite	ge
 8014dc0:	eb06 0a03 	addge.w	sl, r6, r3
 8014dc4:	1b9f      	sublt	r7, r3, r6
 8014dc6:	9b04      	ldr	r3, [sp, #16]
 8014dc8:	1af6      	subs	r6, r6, r3
 8014dca:	4416      	add	r6, r2
 8014dcc:	4ba0      	ldr	r3, [pc, #640]	; (8015050 <_strtod_l+0x938>)
 8014dce:	3e01      	subs	r6, #1
 8014dd0:	429e      	cmp	r6, r3
 8014dd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014dd6:	f280 80c4 	bge.w	8014f62 <_strtod_l+0x84a>
 8014dda:	1b9b      	subs	r3, r3, r6
 8014ddc:	2b1f      	cmp	r3, #31
 8014dde:	eba2 0203 	sub.w	r2, r2, r3
 8014de2:	f04f 0101 	mov.w	r1, #1
 8014de6:	f300 80b0 	bgt.w	8014f4a <_strtod_l+0x832>
 8014dea:	fa01 f303 	lsl.w	r3, r1, r3
 8014dee:	930e      	str	r3, [sp, #56]	; 0x38
 8014df0:	2300      	movs	r3, #0
 8014df2:	930d      	str	r3, [sp, #52]	; 0x34
 8014df4:	eb0a 0602 	add.w	r6, sl, r2
 8014df8:	9b04      	ldr	r3, [sp, #16]
 8014dfa:	45b2      	cmp	sl, r6
 8014dfc:	4417      	add	r7, r2
 8014dfe:	441f      	add	r7, r3
 8014e00:	4653      	mov	r3, sl
 8014e02:	bfa8      	it	ge
 8014e04:	4633      	movge	r3, r6
 8014e06:	42bb      	cmp	r3, r7
 8014e08:	bfa8      	it	ge
 8014e0a:	463b      	movge	r3, r7
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	bfc2      	ittt	gt
 8014e10:	1af6      	subgt	r6, r6, r3
 8014e12:	1aff      	subgt	r7, r7, r3
 8014e14:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	dd17      	ble.n	8014e4e <_strtod_l+0x736>
 8014e1e:	4659      	mov	r1, fp
 8014e20:	461a      	mov	r2, r3
 8014e22:	4620      	mov	r0, r4
 8014e24:	f7ff f9ae 	bl	8014184 <__pow5mult>
 8014e28:	4683      	mov	fp, r0
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	f43f aeb8 	beq.w	8014ba0 <_strtod_l+0x488>
 8014e30:	4601      	mov	r1, r0
 8014e32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e34:	4620      	mov	r0, r4
 8014e36:	f7ff f8fb 	bl	8014030 <__multiply>
 8014e3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	f43f aeaf 	beq.w	8014ba0 <_strtod_l+0x488>
 8014e42:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e44:	4620      	mov	r0, r4
 8014e46:	f7fe ffdd 	bl	8013e04 <_Bfree>
 8014e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e4c:	9316      	str	r3, [sp, #88]	; 0x58
 8014e4e:	2e00      	cmp	r6, #0
 8014e50:	f300 808c 	bgt.w	8014f6c <_strtod_l+0x854>
 8014e54:	9b08      	ldr	r3, [sp, #32]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	dd08      	ble.n	8014e6c <_strtod_l+0x754>
 8014e5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e5c:	9905      	ldr	r1, [sp, #20]
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f7ff f990 	bl	8014184 <__pow5mult>
 8014e64:	9005      	str	r0, [sp, #20]
 8014e66:	2800      	cmp	r0, #0
 8014e68:	f43f ae9a 	beq.w	8014ba0 <_strtod_l+0x488>
 8014e6c:	2f00      	cmp	r7, #0
 8014e6e:	dd08      	ble.n	8014e82 <_strtod_l+0x76a>
 8014e70:	9905      	ldr	r1, [sp, #20]
 8014e72:	463a      	mov	r2, r7
 8014e74:	4620      	mov	r0, r4
 8014e76:	f7ff f9df 	bl	8014238 <__lshift>
 8014e7a:	9005      	str	r0, [sp, #20]
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	f43f ae8f 	beq.w	8014ba0 <_strtod_l+0x488>
 8014e82:	f1ba 0f00 	cmp.w	sl, #0
 8014e86:	dd08      	ble.n	8014e9a <_strtod_l+0x782>
 8014e88:	4659      	mov	r1, fp
 8014e8a:	4652      	mov	r2, sl
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f7ff f9d3 	bl	8014238 <__lshift>
 8014e92:	4683      	mov	fp, r0
 8014e94:	2800      	cmp	r0, #0
 8014e96:	f43f ae83 	beq.w	8014ba0 <_strtod_l+0x488>
 8014e9a:	9a05      	ldr	r2, [sp, #20]
 8014e9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f7ff fa52 	bl	8014348 <__mdiff>
 8014ea4:	4605      	mov	r5, r0
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	f43f ae7a 	beq.w	8014ba0 <_strtod_l+0x488>
 8014eac:	68c3      	ldr	r3, [r0, #12]
 8014eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	60c3      	str	r3, [r0, #12]
 8014eb4:	4659      	mov	r1, fp
 8014eb6:	f7ff fa2b 	bl	8014310 <__mcmp>
 8014eba:	2800      	cmp	r0, #0
 8014ebc:	da60      	bge.n	8014f80 <_strtod_l+0x868>
 8014ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ec0:	ea53 0308 	orrs.w	r3, r3, r8
 8014ec4:	f040 8084 	bne.w	8014fd0 <_strtod_l+0x8b8>
 8014ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d17f      	bne.n	8014fd0 <_strtod_l+0x8b8>
 8014ed0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ed4:	0d1b      	lsrs	r3, r3, #20
 8014ed6:	051b      	lsls	r3, r3, #20
 8014ed8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014edc:	d978      	bls.n	8014fd0 <_strtod_l+0x8b8>
 8014ede:	696b      	ldr	r3, [r5, #20]
 8014ee0:	b913      	cbnz	r3, 8014ee8 <_strtod_l+0x7d0>
 8014ee2:	692b      	ldr	r3, [r5, #16]
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	dd73      	ble.n	8014fd0 <_strtod_l+0x8b8>
 8014ee8:	4629      	mov	r1, r5
 8014eea:	2201      	movs	r2, #1
 8014eec:	4620      	mov	r0, r4
 8014eee:	f7ff f9a3 	bl	8014238 <__lshift>
 8014ef2:	4659      	mov	r1, fp
 8014ef4:	4605      	mov	r5, r0
 8014ef6:	f7ff fa0b 	bl	8014310 <__mcmp>
 8014efa:	2800      	cmp	r0, #0
 8014efc:	dd68      	ble.n	8014fd0 <_strtod_l+0x8b8>
 8014efe:	9904      	ldr	r1, [sp, #16]
 8014f00:	4a54      	ldr	r2, [pc, #336]	; (8015054 <_strtod_l+0x93c>)
 8014f02:	464b      	mov	r3, r9
 8014f04:	2900      	cmp	r1, #0
 8014f06:	f000 8084 	beq.w	8015012 <_strtod_l+0x8fa>
 8014f0a:	ea02 0109 	and.w	r1, r2, r9
 8014f0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014f12:	dc7e      	bgt.n	8015012 <_strtod_l+0x8fa>
 8014f14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014f18:	f77f aeb3 	ble.w	8014c82 <_strtod_l+0x56a>
 8014f1c:	4b4e      	ldr	r3, [pc, #312]	; (8015058 <_strtod_l+0x940>)
 8014f1e:	4640      	mov	r0, r8
 8014f20:	4649      	mov	r1, r9
 8014f22:	2200      	movs	r2, #0
 8014f24:	f7eb fb68 	bl	80005f8 <__aeabi_dmul>
 8014f28:	4b4a      	ldr	r3, [pc, #296]	; (8015054 <_strtod_l+0x93c>)
 8014f2a:	400b      	ands	r3, r1
 8014f2c:	4680      	mov	r8, r0
 8014f2e:	4689      	mov	r9, r1
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f47f ae3f 	bne.w	8014bb4 <_strtod_l+0x49c>
 8014f36:	2322      	movs	r3, #34	; 0x22
 8014f38:	6023      	str	r3, [r4, #0]
 8014f3a:	e63b      	b.n	8014bb4 <_strtod_l+0x49c>
 8014f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f40:	fa02 f303 	lsl.w	r3, r2, r3
 8014f44:	ea03 0808 	and.w	r8, r3, r8
 8014f48:	e6e8      	b.n	8014d1c <_strtod_l+0x604>
 8014f4a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014f4e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014f52:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014f56:	36e2      	adds	r6, #226	; 0xe2
 8014f58:	fa01 f306 	lsl.w	r3, r1, r6
 8014f5c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014f60:	e748      	b.n	8014df4 <_strtod_l+0x6dc>
 8014f62:	2100      	movs	r1, #0
 8014f64:	2301      	movs	r3, #1
 8014f66:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014f6a:	e743      	b.n	8014df4 <_strtod_l+0x6dc>
 8014f6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f6e:	4632      	mov	r2, r6
 8014f70:	4620      	mov	r0, r4
 8014f72:	f7ff f961 	bl	8014238 <__lshift>
 8014f76:	9016      	str	r0, [sp, #88]	; 0x58
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	f47f af6b 	bne.w	8014e54 <_strtod_l+0x73c>
 8014f7e:	e60f      	b.n	8014ba0 <_strtod_l+0x488>
 8014f80:	46ca      	mov	sl, r9
 8014f82:	d171      	bne.n	8015068 <_strtod_l+0x950>
 8014f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f8a:	b352      	cbz	r2, 8014fe2 <_strtod_l+0x8ca>
 8014f8c:	4a33      	ldr	r2, [pc, #204]	; (801505c <_strtod_l+0x944>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d12a      	bne.n	8014fe8 <_strtod_l+0x8d0>
 8014f92:	9b04      	ldr	r3, [sp, #16]
 8014f94:	4641      	mov	r1, r8
 8014f96:	b1fb      	cbz	r3, 8014fd8 <_strtod_l+0x8c0>
 8014f98:	4b2e      	ldr	r3, [pc, #184]	; (8015054 <_strtod_l+0x93c>)
 8014f9a:	ea09 0303 	and.w	r3, r9, r3
 8014f9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8014fa6:	d81a      	bhi.n	8014fde <_strtod_l+0x8c6>
 8014fa8:	0d1b      	lsrs	r3, r3, #20
 8014faa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014fae:	fa02 f303 	lsl.w	r3, r2, r3
 8014fb2:	4299      	cmp	r1, r3
 8014fb4:	d118      	bne.n	8014fe8 <_strtod_l+0x8d0>
 8014fb6:	4b2a      	ldr	r3, [pc, #168]	; (8015060 <_strtod_l+0x948>)
 8014fb8:	459a      	cmp	sl, r3
 8014fba:	d102      	bne.n	8014fc2 <_strtod_l+0x8aa>
 8014fbc:	3101      	adds	r1, #1
 8014fbe:	f43f adef 	beq.w	8014ba0 <_strtod_l+0x488>
 8014fc2:	4b24      	ldr	r3, [pc, #144]	; (8015054 <_strtod_l+0x93c>)
 8014fc4:	ea0a 0303 	and.w	r3, sl, r3
 8014fc8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014fcc:	f04f 0800 	mov.w	r8, #0
 8014fd0:	9b04      	ldr	r3, [sp, #16]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d1a2      	bne.n	8014f1c <_strtod_l+0x804>
 8014fd6:	e5ed      	b.n	8014bb4 <_strtod_l+0x49c>
 8014fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fdc:	e7e9      	b.n	8014fb2 <_strtod_l+0x89a>
 8014fde:	4613      	mov	r3, r2
 8014fe0:	e7e7      	b.n	8014fb2 <_strtod_l+0x89a>
 8014fe2:	ea53 0308 	orrs.w	r3, r3, r8
 8014fe6:	d08a      	beq.n	8014efe <_strtod_l+0x7e6>
 8014fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fea:	b1e3      	cbz	r3, 8015026 <_strtod_l+0x90e>
 8014fec:	ea13 0f0a 	tst.w	r3, sl
 8014ff0:	d0ee      	beq.n	8014fd0 <_strtod_l+0x8b8>
 8014ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ff4:	9a04      	ldr	r2, [sp, #16]
 8014ff6:	4640      	mov	r0, r8
 8014ff8:	4649      	mov	r1, r9
 8014ffa:	b1c3      	cbz	r3, 801502e <_strtod_l+0x916>
 8014ffc:	f7ff fb6f 	bl	80146de <sulp>
 8015000:	4602      	mov	r2, r0
 8015002:	460b      	mov	r3, r1
 8015004:	ec51 0b18 	vmov	r0, r1, d8
 8015008:	f7eb f940 	bl	800028c <__adddf3>
 801500c:	4680      	mov	r8, r0
 801500e:	4689      	mov	r9, r1
 8015010:	e7de      	b.n	8014fd0 <_strtod_l+0x8b8>
 8015012:	4013      	ands	r3, r2
 8015014:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015018:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801501c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015020:	f04f 38ff 	mov.w	r8, #4294967295
 8015024:	e7d4      	b.n	8014fd0 <_strtod_l+0x8b8>
 8015026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015028:	ea13 0f08 	tst.w	r3, r8
 801502c:	e7e0      	b.n	8014ff0 <_strtod_l+0x8d8>
 801502e:	f7ff fb56 	bl	80146de <sulp>
 8015032:	4602      	mov	r2, r0
 8015034:	460b      	mov	r3, r1
 8015036:	ec51 0b18 	vmov	r0, r1, d8
 801503a:	f7eb f925 	bl	8000288 <__aeabi_dsub>
 801503e:	2200      	movs	r2, #0
 8015040:	2300      	movs	r3, #0
 8015042:	4680      	mov	r8, r0
 8015044:	4689      	mov	r9, r1
 8015046:	f7eb fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801504a:	2800      	cmp	r0, #0
 801504c:	d0c0      	beq.n	8014fd0 <_strtod_l+0x8b8>
 801504e:	e618      	b.n	8014c82 <_strtod_l+0x56a>
 8015050:	fffffc02 	.word	0xfffffc02
 8015054:	7ff00000 	.word	0x7ff00000
 8015058:	39500000 	.word	0x39500000
 801505c:	000fffff 	.word	0x000fffff
 8015060:	7fefffff 	.word	0x7fefffff
 8015064:	08016bd8 	.word	0x08016bd8
 8015068:	4659      	mov	r1, fp
 801506a:	4628      	mov	r0, r5
 801506c:	f7ff fac0 	bl	80145f0 <__ratio>
 8015070:	ec57 6b10 	vmov	r6, r7, d0
 8015074:	ee10 0a10 	vmov	r0, s0
 8015078:	2200      	movs	r2, #0
 801507a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801507e:	4639      	mov	r1, r7
 8015080:	f7eb fd36 	bl	8000af0 <__aeabi_dcmple>
 8015084:	2800      	cmp	r0, #0
 8015086:	d071      	beq.n	801516c <_strtod_l+0xa54>
 8015088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801508a:	2b00      	cmp	r3, #0
 801508c:	d17c      	bne.n	8015188 <_strtod_l+0xa70>
 801508e:	f1b8 0f00 	cmp.w	r8, #0
 8015092:	d15a      	bne.n	801514a <_strtod_l+0xa32>
 8015094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015098:	2b00      	cmp	r3, #0
 801509a:	d15d      	bne.n	8015158 <_strtod_l+0xa40>
 801509c:	4b90      	ldr	r3, [pc, #576]	; (80152e0 <_strtod_l+0xbc8>)
 801509e:	2200      	movs	r2, #0
 80150a0:	4630      	mov	r0, r6
 80150a2:	4639      	mov	r1, r7
 80150a4:	f7eb fd1a 	bl	8000adc <__aeabi_dcmplt>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d15c      	bne.n	8015166 <_strtod_l+0xa4e>
 80150ac:	4630      	mov	r0, r6
 80150ae:	4639      	mov	r1, r7
 80150b0:	4b8c      	ldr	r3, [pc, #560]	; (80152e4 <_strtod_l+0xbcc>)
 80150b2:	2200      	movs	r2, #0
 80150b4:	f7eb faa0 	bl	80005f8 <__aeabi_dmul>
 80150b8:	4606      	mov	r6, r0
 80150ba:	460f      	mov	r7, r1
 80150bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80150c0:	9606      	str	r6, [sp, #24]
 80150c2:	9307      	str	r3, [sp, #28]
 80150c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80150cc:	4b86      	ldr	r3, [pc, #536]	; (80152e8 <_strtod_l+0xbd0>)
 80150ce:	ea0a 0303 	and.w	r3, sl, r3
 80150d2:	930d      	str	r3, [sp, #52]	; 0x34
 80150d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150d6:	4b85      	ldr	r3, [pc, #532]	; (80152ec <_strtod_l+0xbd4>)
 80150d8:	429a      	cmp	r2, r3
 80150da:	f040 8090 	bne.w	80151fe <_strtod_l+0xae6>
 80150de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80150e2:	ec49 8b10 	vmov	d0, r8, r9
 80150e6:	f7ff f9b9 	bl	801445c <__ulp>
 80150ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150ee:	ec51 0b10 	vmov	r0, r1, d0
 80150f2:	f7eb fa81 	bl	80005f8 <__aeabi_dmul>
 80150f6:	4642      	mov	r2, r8
 80150f8:	464b      	mov	r3, r9
 80150fa:	f7eb f8c7 	bl	800028c <__adddf3>
 80150fe:	460b      	mov	r3, r1
 8015100:	4979      	ldr	r1, [pc, #484]	; (80152e8 <_strtod_l+0xbd0>)
 8015102:	4a7b      	ldr	r2, [pc, #492]	; (80152f0 <_strtod_l+0xbd8>)
 8015104:	4019      	ands	r1, r3
 8015106:	4291      	cmp	r1, r2
 8015108:	4680      	mov	r8, r0
 801510a:	d944      	bls.n	8015196 <_strtod_l+0xa7e>
 801510c:	ee18 2a90 	vmov	r2, s17
 8015110:	4b78      	ldr	r3, [pc, #480]	; (80152f4 <_strtod_l+0xbdc>)
 8015112:	429a      	cmp	r2, r3
 8015114:	d104      	bne.n	8015120 <_strtod_l+0xa08>
 8015116:	ee18 3a10 	vmov	r3, s16
 801511a:	3301      	adds	r3, #1
 801511c:	f43f ad40 	beq.w	8014ba0 <_strtod_l+0x488>
 8015120:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80152f4 <_strtod_l+0xbdc>
 8015124:	f04f 38ff 	mov.w	r8, #4294967295
 8015128:	9916      	ldr	r1, [sp, #88]	; 0x58
 801512a:	4620      	mov	r0, r4
 801512c:	f7fe fe6a 	bl	8013e04 <_Bfree>
 8015130:	9905      	ldr	r1, [sp, #20]
 8015132:	4620      	mov	r0, r4
 8015134:	f7fe fe66 	bl	8013e04 <_Bfree>
 8015138:	4659      	mov	r1, fp
 801513a:	4620      	mov	r0, r4
 801513c:	f7fe fe62 	bl	8013e04 <_Bfree>
 8015140:	4629      	mov	r1, r5
 8015142:	4620      	mov	r0, r4
 8015144:	f7fe fe5e 	bl	8013e04 <_Bfree>
 8015148:	e609      	b.n	8014d5e <_strtod_l+0x646>
 801514a:	f1b8 0f01 	cmp.w	r8, #1
 801514e:	d103      	bne.n	8015158 <_strtod_l+0xa40>
 8015150:	f1b9 0f00 	cmp.w	r9, #0
 8015154:	f43f ad95 	beq.w	8014c82 <_strtod_l+0x56a>
 8015158:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80152b0 <_strtod_l+0xb98>
 801515c:	4f60      	ldr	r7, [pc, #384]	; (80152e0 <_strtod_l+0xbc8>)
 801515e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015162:	2600      	movs	r6, #0
 8015164:	e7ae      	b.n	80150c4 <_strtod_l+0x9ac>
 8015166:	4f5f      	ldr	r7, [pc, #380]	; (80152e4 <_strtod_l+0xbcc>)
 8015168:	2600      	movs	r6, #0
 801516a:	e7a7      	b.n	80150bc <_strtod_l+0x9a4>
 801516c:	4b5d      	ldr	r3, [pc, #372]	; (80152e4 <_strtod_l+0xbcc>)
 801516e:	4630      	mov	r0, r6
 8015170:	4639      	mov	r1, r7
 8015172:	2200      	movs	r2, #0
 8015174:	f7eb fa40 	bl	80005f8 <__aeabi_dmul>
 8015178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801517a:	4606      	mov	r6, r0
 801517c:	460f      	mov	r7, r1
 801517e:	2b00      	cmp	r3, #0
 8015180:	d09c      	beq.n	80150bc <_strtod_l+0x9a4>
 8015182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015186:	e79d      	b.n	80150c4 <_strtod_l+0x9ac>
 8015188:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80152b8 <_strtod_l+0xba0>
 801518c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015190:	ec57 6b17 	vmov	r6, r7, d7
 8015194:	e796      	b.n	80150c4 <_strtod_l+0x9ac>
 8015196:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801519a:	9b04      	ldr	r3, [sp, #16]
 801519c:	46ca      	mov	sl, r9
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d1c2      	bne.n	8015128 <_strtod_l+0xa10>
 80151a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80151a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151a8:	0d1b      	lsrs	r3, r3, #20
 80151aa:	051b      	lsls	r3, r3, #20
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d1bb      	bne.n	8015128 <_strtod_l+0xa10>
 80151b0:	4630      	mov	r0, r6
 80151b2:	4639      	mov	r1, r7
 80151b4:	f7eb fd68 	bl	8000c88 <__aeabi_d2lz>
 80151b8:	f7eb f9f0 	bl	800059c <__aeabi_l2d>
 80151bc:	4602      	mov	r2, r0
 80151be:	460b      	mov	r3, r1
 80151c0:	4630      	mov	r0, r6
 80151c2:	4639      	mov	r1, r7
 80151c4:	f7eb f860 	bl	8000288 <__aeabi_dsub>
 80151c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80151ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151ce:	ea43 0308 	orr.w	r3, r3, r8
 80151d2:	4313      	orrs	r3, r2
 80151d4:	4606      	mov	r6, r0
 80151d6:	460f      	mov	r7, r1
 80151d8:	d054      	beq.n	8015284 <_strtod_l+0xb6c>
 80151da:	a339      	add	r3, pc, #228	; (adr r3, 80152c0 <_strtod_l+0xba8>)
 80151dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e0:	f7eb fc7c 	bl	8000adc <__aeabi_dcmplt>
 80151e4:	2800      	cmp	r0, #0
 80151e6:	f47f ace5 	bne.w	8014bb4 <_strtod_l+0x49c>
 80151ea:	a337      	add	r3, pc, #220	; (adr r3, 80152c8 <_strtod_l+0xbb0>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	4630      	mov	r0, r6
 80151f2:	4639      	mov	r1, r7
 80151f4:	f7eb fc90 	bl	8000b18 <__aeabi_dcmpgt>
 80151f8:	2800      	cmp	r0, #0
 80151fa:	d095      	beq.n	8015128 <_strtod_l+0xa10>
 80151fc:	e4da      	b.n	8014bb4 <_strtod_l+0x49c>
 80151fe:	9b04      	ldr	r3, [sp, #16]
 8015200:	b333      	cbz	r3, 8015250 <_strtod_l+0xb38>
 8015202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015204:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015208:	d822      	bhi.n	8015250 <_strtod_l+0xb38>
 801520a:	a331      	add	r3, pc, #196	; (adr r3, 80152d0 <_strtod_l+0xbb8>)
 801520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015210:	4630      	mov	r0, r6
 8015212:	4639      	mov	r1, r7
 8015214:	f7eb fc6c 	bl	8000af0 <__aeabi_dcmple>
 8015218:	b1a0      	cbz	r0, 8015244 <_strtod_l+0xb2c>
 801521a:	4639      	mov	r1, r7
 801521c:	4630      	mov	r0, r6
 801521e:	f7eb fcc3 	bl	8000ba8 <__aeabi_d2uiz>
 8015222:	2801      	cmp	r0, #1
 8015224:	bf38      	it	cc
 8015226:	2001      	movcc	r0, #1
 8015228:	f7eb f96c 	bl	8000504 <__aeabi_ui2d>
 801522c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801522e:	4606      	mov	r6, r0
 8015230:	460f      	mov	r7, r1
 8015232:	bb23      	cbnz	r3, 801527e <_strtod_l+0xb66>
 8015234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015238:	9010      	str	r0, [sp, #64]	; 0x40
 801523a:	9311      	str	r3, [sp, #68]	; 0x44
 801523c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015240:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015248:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801524c:	1a9b      	subs	r3, r3, r2
 801524e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015250:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015254:	eeb0 0a48 	vmov.f32	s0, s16
 8015258:	eef0 0a68 	vmov.f32	s1, s17
 801525c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015260:	f7ff f8fc 	bl	801445c <__ulp>
 8015264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015268:	ec53 2b10 	vmov	r2, r3, d0
 801526c:	f7eb f9c4 	bl	80005f8 <__aeabi_dmul>
 8015270:	ec53 2b18 	vmov	r2, r3, d8
 8015274:	f7eb f80a 	bl	800028c <__adddf3>
 8015278:	4680      	mov	r8, r0
 801527a:	4689      	mov	r9, r1
 801527c:	e78d      	b.n	801519a <_strtod_l+0xa82>
 801527e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015282:	e7db      	b.n	801523c <_strtod_l+0xb24>
 8015284:	a314      	add	r3, pc, #80	; (adr r3, 80152d8 <_strtod_l+0xbc0>)
 8015286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528a:	f7eb fc27 	bl	8000adc <__aeabi_dcmplt>
 801528e:	e7b3      	b.n	80151f8 <_strtod_l+0xae0>
 8015290:	2300      	movs	r3, #0
 8015292:	930a      	str	r3, [sp, #40]	; 0x28
 8015294:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015298:	6013      	str	r3, [r2, #0]
 801529a:	f7ff ba7c 	b.w	8014796 <_strtod_l+0x7e>
 801529e:	2a65      	cmp	r2, #101	; 0x65
 80152a0:	f43f ab75 	beq.w	801498e <_strtod_l+0x276>
 80152a4:	2a45      	cmp	r2, #69	; 0x45
 80152a6:	f43f ab72 	beq.w	801498e <_strtod_l+0x276>
 80152aa:	2301      	movs	r3, #1
 80152ac:	f7ff bbaa 	b.w	8014a04 <_strtod_l+0x2ec>
 80152b0:	00000000 	.word	0x00000000
 80152b4:	bff00000 	.word	0xbff00000
 80152b8:	00000000 	.word	0x00000000
 80152bc:	3ff00000 	.word	0x3ff00000
 80152c0:	94a03595 	.word	0x94a03595
 80152c4:	3fdfffff 	.word	0x3fdfffff
 80152c8:	35afe535 	.word	0x35afe535
 80152cc:	3fe00000 	.word	0x3fe00000
 80152d0:	ffc00000 	.word	0xffc00000
 80152d4:	41dfffff 	.word	0x41dfffff
 80152d8:	94a03595 	.word	0x94a03595
 80152dc:	3fcfffff 	.word	0x3fcfffff
 80152e0:	3ff00000 	.word	0x3ff00000
 80152e4:	3fe00000 	.word	0x3fe00000
 80152e8:	7ff00000 	.word	0x7ff00000
 80152ec:	7fe00000 	.word	0x7fe00000
 80152f0:	7c9fffff 	.word	0x7c9fffff
 80152f4:	7fefffff 	.word	0x7fefffff

080152f8 <_strtod_r>:
 80152f8:	4b01      	ldr	r3, [pc, #4]	; (8015300 <_strtod_r+0x8>)
 80152fa:	f7ff ba0d 	b.w	8014718 <_strtod_l>
 80152fe:	bf00      	nop
 8015300:	20000168 	.word	0x20000168

08015304 <_strtol_l.constprop.0>:
 8015304:	2b01      	cmp	r3, #1
 8015306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801530a:	d001      	beq.n	8015310 <_strtol_l.constprop.0+0xc>
 801530c:	2b24      	cmp	r3, #36	; 0x24
 801530e:	d906      	bls.n	801531e <_strtol_l.constprop.0+0x1a>
 8015310:	f7fd fe32 	bl	8012f78 <__errno>
 8015314:	2316      	movs	r3, #22
 8015316:	6003      	str	r3, [r0, #0]
 8015318:	2000      	movs	r0, #0
 801531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801531e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015404 <_strtol_l.constprop.0+0x100>
 8015322:	460d      	mov	r5, r1
 8015324:	462e      	mov	r6, r5
 8015326:	f815 4b01 	ldrb.w	r4, [r5], #1
 801532a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801532e:	f017 0708 	ands.w	r7, r7, #8
 8015332:	d1f7      	bne.n	8015324 <_strtol_l.constprop.0+0x20>
 8015334:	2c2d      	cmp	r4, #45	; 0x2d
 8015336:	d132      	bne.n	801539e <_strtol_l.constprop.0+0x9a>
 8015338:	782c      	ldrb	r4, [r5, #0]
 801533a:	2701      	movs	r7, #1
 801533c:	1cb5      	adds	r5, r6, #2
 801533e:	2b00      	cmp	r3, #0
 8015340:	d05b      	beq.n	80153fa <_strtol_l.constprop.0+0xf6>
 8015342:	2b10      	cmp	r3, #16
 8015344:	d109      	bne.n	801535a <_strtol_l.constprop.0+0x56>
 8015346:	2c30      	cmp	r4, #48	; 0x30
 8015348:	d107      	bne.n	801535a <_strtol_l.constprop.0+0x56>
 801534a:	782c      	ldrb	r4, [r5, #0]
 801534c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015350:	2c58      	cmp	r4, #88	; 0x58
 8015352:	d14d      	bne.n	80153f0 <_strtol_l.constprop.0+0xec>
 8015354:	786c      	ldrb	r4, [r5, #1]
 8015356:	2310      	movs	r3, #16
 8015358:	3502      	adds	r5, #2
 801535a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801535e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015362:	f04f 0e00 	mov.w	lr, #0
 8015366:	fbb8 f9f3 	udiv	r9, r8, r3
 801536a:	4676      	mov	r6, lr
 801536c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015370:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015374:	f1bc 0f09 	cmp.w	ip, #9
 8015378:	d816      	bhi.n	80153a8 <_strtol_l.constprop.0+0xa4>
 801537a:	4664      	mov	r4, ip
 801537c:	42a3      	cmp	r3, r4
 801537e:	dd24      	ble.n	80153ca <_strtol_l.constprop.0+0xc6>
 8015380:	f1be 3fff 	cmp.w	lr, #4294967295
 8015384:	d008      	beq.n	8015398 <_strtol_l.constprop.0+0x94>
 8015386:	45b1      	cmp	r9, r6
 8015388:	d31c      	bcc.n	80153c4 <_strtol_l.constprop.0+0xc0>
 801538a:	d101      	bne.n	8015390 <_strtol_l.constprop.0+0x8c>
 801538c:	45a2      	cmp	sl, r4
 801538e:	db19      	blt.n	80153c4 <_strtol_l.constprop.0+0xc0>
 8015390:	fb06 4603 	mla	r6, r6, r3, r4
 8015394:	f04f 0e01 	mov.w	lr, #1
 8015398:	f815 4b01 	ldrb.w	r4, [r5], #1
 801539c:	e7e8      	b.n	8015370 <_strtol_l.constprop.0+0x6c>
 801539e:	2c2b      	cmp	r4, #43	; 0x2b
 80153a0:	bf04      	itt	eq
 80153a2:	782c      	ldrbeq	r4, [r5, #0]
 80153a4:	1cb5      	addeq	r5, r6, #2
 80153a6:	e7ca      	b.n	801533e <_strtol_l.constprop.0+0x3a>
 80153a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80153ac:	f1bc 0f19 	cmp.w	ip, #25
 80153b0:	d801      	bhi.n	80153b6 <_strtol_l.constprop.0+0xb2>
 80153b2:	3c37      	subs	r4, #55	; 0x37
 80153b4:	e7e2      	b.n	801537c <_strtol_l.constprop.0+0x78>
 80153b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80153ba:	f1bc 0f19 	cmp.w	ip, #25
 80153be:	d804      	bhi.n	80153ca <_strtol_l.constprop.0+0xc6>
 80153c0:	3c57      	subs	r4, #87	; 0x57
 80153c2:	e7db      	b.n	801537c <_strtol_l.constprop.0+0x78>
 80153c4:	f04f 3eff 	mov.w	lr, #4294967295
 80153c8:	e7e6      	b.n	8015398 <_strtol_l.constprop.0+0x94>
 80153ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80153ce:	d105      	bne.n	80153dc <_strtol_l.constprop.0+0xd8>
 80153d0:	2322      	movs	r3, #34	; 0x22
 80153d2:	6003      	str	r3, [r0, #0]
 80153d4:	4646      	mov	r6, r8
 80153d6:	b942      	cbnz	r2, 80153ea <_strtol_l.constprop.0+0xe6>
 80153d8:	4630      	mov	r0, r6
 80153da:	e79e      	b.n	801531a <_strtol_l.constprop.0+0x16>
 80153dc:	b107      	cbz	r7, 80153e0 <_strtol_l.constprop.0+0xdc>
 80153de:	4276      	negs	r6, r6
 80153e0:	2a00      	cmp	r2, #0
 80153e2:	d0f9      	beq.n	80153d8 <_strtol_l.constprop.0+0xd4>
 80153e4:	f1be 0f00 	cmp.w	lr, #0
 80153e8:	d000      	beq.n	80153ec <_strtol_l.constprop.0+0xe8>
 80153ea:	1e69      	subs	r1, r5, #1
 80153ec:	6011      	str	r1, [r2, #0]
 80153ee:	e7f3      	b.n	80153d8 <_strtol_l.constprop.0+0xd4>
 80153f0:	2430      	movs	r4, #48	; 0x30
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d1b1      	bne.n	801535a <_strtol_l.constprop.0+0x56>
 80153f6:	2308      	movs	r3, #8
 80153f8:	e7af      	b.n	801535a <_strtol_l.constprop.0+0x56>
 80153fa:	2c30      	cmp	r4, #48	; 0x30
 80153fc:	d0a5      	beq.n	801534a <_strtol_l.constprop.0+0x46>
 80153fe:	230a      	movs	r3, #10
 8015400:	e7ab      	b.n	801535a <_strtol_l.constprop.0+0x56>
 8015402:	bf00      	nop
 8015404:	08016c01 	.word	0x08016c01

08015408 <_strtol_r>:
 8015408:	f7ff bf7c 	b.w	8015304 <_strtol_l.constprop.0>

0801540c <__ssputs_r>:
 801540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015410:	688e      	ldr	r6, [r1, #8]
 8015412:	461f      	mov	r7, r3
 8015414:	42be      	cmp	r6, r7
 8015416:	680b      	ldr	r3, [r1, #0]
 8015418:	4682      	mov	sl, r0
 801541a:	460c      	mov	r4, r1
 801541c:	4690      	mov	r8, r2
 801541e:	d82c      	bhi.n	801547a <__ssputs_r+0x6e>
 8015420:	898a      	ldrh	r2, [r1, #12]
 8015422:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015426:	d026      	beq.n	8015476 <__ssputs_r+0x6a>
 8015428:	6965      	ldr	r5, [r4, #20]
 801542a:	6909      	ldr	r1, [r1, #16]
 801542c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015430:	eba3 0901 	sub.w	r9, r3, r1
 8015434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015438:	1c7b      	adds	r3, r7, #1
 801543a:	444b      	add	r3, r9
 801543c:	106d      	asrs	r5, r5, #1
 801543e:	429d      	cmp	r5, r3
 8015440:	bf38      	it	cc
 8015442:	461d      	movcc	r5, r3
 8015444:	0553      	lsls	r3, r2, #21
 8015446:	d527      	bpl.n	8015498 <__ssputs_r+0x8c>
 8015448:	4629      	mov	r1, r5
 801544a:	f7fc fce9 	bl	8011e20 <_malloc_r>
 801544e:	4606      	mov	r6, r0
 8015450:	b360      	cbz	r0, 80154ac <__ssputs_r+0xa0>
 8015452:	6921      	ldr	r1, [r4, #16]
 8015454:	464a      	mov	r2, r9
 8015456:	f7fd fdbb 	bl	8012fd0 <memcpy>
 801545a:	89a3      	ldrh	r3, [r4, #12]
 801545c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015464:	81a3      	strh	r3, [r4, #12]
 8015466:	6126      	str	r6, [r4, #16]
 8015468:	6165      	str	r5, [r4, #20]
 801546a:	444e      	add	r6, r9
 801546c:	eba5 0509 	sub.w	r5, r5, r9
 8015470:	6026      	str	r6, [r4, #0]
 8015472:	60a5      	str	r5, [r4, #8]
 8015474:	463e      	mov	r6, r7
 8015476:	42be      	cmp	r6, r7
 8015478:	d900      	bls.n	801547c <__ssputs_r+0x70>
 801547a:	463e      	mov	r6, r7
 801547c:	6820      	ldr	r0, [r4, #0]
 801547e:	4632      	mov	r2, r6
 8015480:	4641      	mov	r1, r8
 8015482:	f000 f9c9 	bl	8015818 <memmove>
 8015486:	68a3      	ldr	r3, [r4, #8]
 8015488:	1b9b      	subs	r3, r3, r6
 801548a:	60a3      	str	r3, [r4, #8]
 801548c:	6823      	ldr	r3, [r4, #0]
 801548e:	4433      	add	r3, r6
 8015490:	6023      	str	r3, [r4, #0]
 8015492:	2000      	movs	r0, #0
 8015494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015498:	462a      	mov	r2, r5
 801549a:	f000 fd8e 	bl	8015fba <_realloc_r>
 801549e:	4606      	mov	r6, r0
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d1e0      	bne.n	8015466 <__ssputs_r+0x5a>
 80154a4:	6921      	ldr	r1, [r4, #16]
 80154a6:	4650      	mov	r0, sl
 80154a8:	f7fe fc20 	bl	8013cec <_free_r>
 80154ac:	230c      	movs	r3, #12
 80154ae:	f8ca 3000 	str.w	r3, [sl]
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154b8:	81a3      	strh	r3, [r4, #12]
 80154ba:	f04f 30ff 	mov.w	r0, #4294967295
 80154be:	e7e9      	b.n	8015494 <__ssputs_r+0x88>

080154c0 <_svfiprintf_r>:
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	4698      	mov	r8, r3
 80154c6:	898b      	ldrh	r3, [r1, #12]
 80154c8:	061b      	lsls	r3, r3, #24
 80154ca:	b09d      	sub	sp, #116	; 0x74
 80154cc:	4607      	mov	r7, r0
 80154ce:	460d      	mov	r5, r1
 80154d0:	4614      	mov	r4, r2
 80154d2:	d50e      	bpl.n	80154f2 <_svfiprintf_r+0x32>
 80154d4:	690b      	ldr	r3, [r1, #16]
 80154d6:	b963      	cbnz	r3, 80154f2 <_svfiprintf_r+0x32>
 80154d8:	2140      	movs	r1, #64	; 0x40
 80154da:	f7fc fca1 	bl	8011e20 <_malloc_r>
 80154de:	6028      	str	r0, [r5, #0]
 80154e0:	6128      	str	r0, [r5, #16]
 80154e2:	b920      	cbnz	r0, 80154ee <_svfiprintf_r+0x2e>
 80154e4:	230c      	movs	r3, #12
 80154e6:	603b      	str	r3, [r7, #0]
 80154e8:	f04f 30ff 	mov.w	r0, #4294967295
 80154ec:	e0d0      	b.n	8015690 <_svfiprintf_r+0x1d0>
 80154ee:	2340      	movs	r3, #64	; 0x40
 80154f0:	616b      	str	r3, [r5, #20]
 80154f2:	2300      	movs	r3, #0
 80154f4:	9309      	str	r3, [sp, #36]	; 0x24
 80154f6:	2320      	movs	r3, #32
 80154f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015500:	2330      	movs	r3, #48	; 0x30
 8015502:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80156a8 <_svfiprintf_r+0x1e8>
 8015506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801550a:	f04f 0901 	mov.w	r9, #1
 801550e:	4623      	mov	r3, r4
 8015510:	469a      	mov	sl, r3
 8015512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015516:	b10a      	cbz	r2, 801551c <_svfiprintf_r+0x5c>
 8015518:	2a25      	cmp	r2, #37	; 0x25
 801551a:	d1f9      	bne.n	8015510 <_svfiprintf_r+0x50>
 801551c:	ebba 0b04 	subs.w	fp, sl, r4
 8015520:	d00b      	beq.n	801553a <_svfiprintf_r+0x7a>
 8015522:	465b      	mov	r3, fp
 8015524:	4622      	mov	r2, r4
 8015526:	4629      	mov	r1, r5
 8015528:	4638      	mov	r0, r7
 801552a:	f7ff ff6f 	bl	801540c <__ssputs_r>
 801552e:	3001      	adds	r0, #1
 8015530:	f000 80a9 	beq.w	8015686 <_svfiprintf_r+0x1c6>
 8015534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015536:	445a      	add	r2, fp
 8015538:	9209      	str	r2, [sp, #36]	; 0x24
 801553a:	f89a 3000 	ldrb.w	r3, [sl]
 801553e:	2b00      	cmp	r3, #0
 8015540:	f000 80a1 	beq.w	8015686 <_svfiprintf_r+0x1c6>
 8015544:	2300      	movs	r3, #0
 8015546:	f04f 32ff 	mov.w	r2, #4294967295
 801554a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801554e:	f10a 0a01 	add.w	sl, sl, #1
 8015552:	9304      	str	r3, [sp, #16]
 8015554:	9307      	str	r3, [sp, #28]
 8015556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801555a:	931a      	str	r3, [sp, #104]	; 0x68
 801555c:	4654      	mov	r4, sl
 801555e:	2205      	movs	r2, #5
 8015560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015564:	4850      	ldr	r0, [pc, #320]	; (80156a8 <_svfiprintf_r+0x1e8>)
 8015566:	f7ea fe33 	bl	80001d0 <memchr>
 801556a:	9a04      	ldr	r2, [sp, #16]
 801556c:	b9d8      	cbnz	r0, 80155a6 <_svfiprintf_r+0xe6>
 801556e:	06d0      	lsls	r0, r2, #27
 8015570:	bf44      	itt	mi
 8015572:	2320      	movmi	r3, #32
 8015574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015578:	0711      	lsls	r1, r2, #28
 801557a:	bf44      	itt	mi
 801557c:	232b      	movmi	r3, #43	; 0x2b
 801557e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015582:	f89a 3000 	ldrb.w	r3, [sl]
 8015586:	2b2a      	cmp	r3, #42	; 0x2a
 8015588:	d015      	beq.n	80155b6 <_svfiprintf_r+0xf6>
 801558a:	9a07      	ldr	r2, [sp, #28]
 801558c:	4654      	mov	r4, sl
 801558e:	2000      	movs	r0, #0
 8015590:	f04f 0c0a 	mov.w	ip, #10
 8015594:	4621      	mov	r1, r4
 8015596:	f811 3b01 	ldrb.w	r3, [r1], #1
 801559a:	3b30      	subs	r3, #48	; 0x30
 801559c:	2b09      	cmp	r3, #9
 801559e:	d94d      	bls.n	801563c <_svfiprintf_r+0x17c>
 80155a0:	b1b0      	cbz	r0, 80155d0 <_svfiprintf_r+0x110>
 80155a2:	9207      	str	r2, [sp, #28]
 80155a4:	e014      	b.n	80155d0 <_svfiprintf_r+0x110>
 80155a6:	eba0 0308 	sub.w	r3, r0, r8
 80155aa:	fa09 f303 	lsl.w	r3, r9, r3
 80155ae:	4313      	orrs	r3, r2
 80155b0:	9304      	str	r3, [sp, #16]
 80155b2:	46a2      	mov	sl, r4
 80155b4:	e7d2      	b.n	801555c <_svfiprintf_r+0x9c>
 80155b6:	9b03      	ldr	r3, [sp, #12]
 80155b8:	1d19      	adds	r1, r3, #4
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	9103      	str	r1, [sp, #12]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	bfbb      	ittet	lt
 80155c2:	425b      	neglt	r3, r3
 80155c4:	f042 0202 	orrlt.w	r2, r2, #2
 80155c8:	9307      	strge	r3, [sp, #28]
 80155ca:	9307      	strlt	r3, [sp, #28]
 80155cc:	bfb8      	it	lt
 80155ce:	9204      	strlt	r2, [sp, #16]
 80155d0:	7823      	ldrb	r3, [r4, #0]
 80155d2:	2b2e      	cmp	r3, #46	; 0x2e
 80155d4:	d10c      	bne.n	80155f0 <_svfiprintf_r+0x130>
 80155d6:	7863      	ldrb	r3, [r4, #1]
 80155d8:	2b2a      	cmp	r3, #42	; 0x2a
 80155da:	d134      	bne.n	8015646 <_svfiprintf_r+0x186>
 80155dc:	9b03      	ldr	r3, [sp, #12]
 80155de:	1d1a      	adds	r2, r3, #4
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	9203      	str	r2, [sp, #12]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	bfb8      	it	lt
 80155e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80155ec:	3402      	adds	r4, #2
 80155ee:	9305      	str	r3, [sp, #20]
 80155f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80156b8 <_svfiprintf_r+0x1f8>
 80155f4:	7821      	ldrb	r1, [r4, #0]
 80155f6:	2203      	movs	r2, #3
 80155f8:	4650      	mov	r0, sl
 80155fa:	f7ea fde9 	bl	80001d0 <memchr>
 80155fe:	b138      	cbz	r0, 8015610 <_svfiprintf_r+0x150>
 8015600:	9b04      	ldr	r3, [sp, #16]
 8015602:	eba0 000a 	sub.w	r0, r0, sl
 8015606:	2240      	movs	r2, #64	; 0x40
 8015608:	4082      	lsls	r2, r0
 801560a:	4313      	orrs	r3, r2
 801560c:	3401      	adds	r4, #1
 801560e:	9304      	str	r3, [sp, #16]
 8015610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015614:	4825      	ldr	r0, [pc, #148]	; (80156ac <_svfiprintf_r+0x1ec>)
 8015616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801561a:	2206      	movs	r2, #6
 801561c:	f7ea fdd8 	bl	80001d0 <memchr>
 8015620:	2800      	cmp	r0, #0
 8015622:	d038      	beq.n	8015696 <_svfiprintf_r+0x1d6>
 8015624:	4b22      	ldr	r3, [pc, #136]	; (80156b0 <_svfiprintf_r+0x1f0>)
 8015626:	bb1b      	cbnz	r3, 8015670 <_svfiprintf_r+0x1b0>
 8015628:	9b03      	ldr	r3, [sp, #12]
 801562a:	3307      	adds	r3, #7
 801562c:	f023 0307 	bic.w	r3, r3, #7
 8015630:	3308      	adds	r3, #8
 8015632:	9303      	str	r3, [sp, #12]
 8015634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015636:	4433      	add	r3, r6
 8015638:	9309      	str	r3, [sp, #36]	; 0x24
 801563a:	e768      	b.n	801550e <_svfiprintf_r+0x4e>
 801563c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015640:	460c      	mov	r4, r1
 8015642:	2001      	movs	r0, #1
 8015644:	e7a6      	b.n	8015594 <_svfiprintf_r+0xd4>
 8015646:	2300      	movs	r3, #0
 8015648:	3401      	adds	r4, #1
 801564a:	9305      	str	r3, [sp, #20]
 801564c:	4619      	mov	r1, r3
 801564e:	f04f 0c0a 	mov.w	ip, #10
 8015652:	4620      	mov	r0, r4
 8015654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015658:	3a30      	subs	r2, #48	; 0x30
 801565a:	2a09      	cmp	r2, #9
 801565c:	d903      	bls.n	8015666 <_svfiprintf_r+0x1a6>
 801565e:	2b00      	cmp	r3, #0
 8015660:	d0c6      	beq.n	80155f0 <_svfiprintf_r+0x130>
 8015662:	9105      	str	r1, [sp, #20]
 8015664:	e7c4      	b.n	80155f0 <_svfiprintf_r+0x130>
 8015666:	fb0c 2101 	mla	r1, ip, r1, r2
 801566a:	4604      	mov	r4, r0
 801566c:	2301      	movs	r3, #1
 801566e:	e7f0      	b.n	8015652 <_svfiprintf_r+0x192>
 8015670:	ab03      	add	r3, sp, #12
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	462a      	mov	r2, r5
 8015676:	4b0f      	ldr	r3, [pc, #60]	; (80156b4 <_svfiprintf_r+0x1f4>)
 8015678:	a904      	add	r1, sp, #16
 801567a:	4638      	mov	r0, r7
 801567c:	f7fc fcfc 	bl	8012078 <_printf_float>
 8015680:	1c42      	adds	r2, r0, #1
 8015682:	4606      	mov	r6, r0
 8015684:	d1d6      	bne.n	8015634 <_svfiprintf_r+0x174>
 8015686:	89ab      	ldrh	r3, [r5, #12]
 8015688:	065b      	lsls	r3, r3, #25
 801568a:	f53f af2d 	bmi.w	80154e8 <_svfiprintf_r+0x28>
 801568e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015690:	b01d      	add	sp, #116	; 0x74
 8015692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015696:	ab03      	add	r3, sp, #12
 8015698:	9300      	str	r3, [sp, #0]
 801569a:	462a      	mov	r2, r5
 801569c:	4b05      	ldr	r3, [pc, #20]	; (80156b4 <_svfiprintf_r+0x1f4>)
 801569e:	a904      	add	r1, sp, #16
 80156a0:	4638      	mov	r0, r7
 80156a2:	f7fc ff8d 	bl	80125c0 <_printf_i>
 80156a6:	e7eb      	b.n	8015680 <_svfiprintf_r+0x1c0>
 80156a8:	08016d01 	.word	0x08016d01
 80156ac:	08016d0b 	.word	0x08016d0b
 80156b0:	08012079 	.word	0x08012079
 80156b4:	0801540d 	.word	0x0801540d
 80156b8:	08016d07 	.word	0x08016d07

080156bc <__sflush_r>:
 80156bc:	898a      	ldrh	r2, [r1, #12]
 80156be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c2:	4605      	mov	r5, r0
 80156c4:	0710      	lsls	r0, r2, #28
 80156c6:	460c      	mov	r4, r1
 80156c8:	d458      	bmi.n	801577c <__sflush_r+0xc0>
 80156ca:	684b      	ldr	r3, [r1, #4]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	dc05      	bgt.n	80156dc <__sflush_r+0x20>
 80156d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	dc02      	bgt.n	80156dc <__sflush_r+0x20>
 80156d6:	2000      	movs	r0, #0
 80156d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156de:	2e00      	cmp	r6, #0
 80156e0:	d0f9      	beq.n	80156d6 <__sflush_r+0x1a>
 80156e2:	2300      	movs	r3, #0
 80156e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80156e8:	682f      	ldr	r7, [r5, #0]
 80156ea:	6a21      	ldr	r1, [r4, #32]
 80156ec:	602b      	str	r3, [r5, #0]
 80156ee:	d032      	beq.n	8015756 <__sflush_r+0x9a>
 80156f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80156f2:	89a3      	ldrh	r3, [r4, #12]
 80156f4:	075a      	lsls	r2, r3, #29
 80156f6:	d505      	bpl.n	8015704 <__sflush_r+0x48>
 80156f8:	6863      	ldr	r3, [r4, #4]
 80156fa:	1ac0      	subs	r0, r0, r3
 80156fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156fe:	b10b      	cbz	r3, 8015704 <__sflush_r+0x48>
 8015700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015702:	1ac0      	subs	r0, r0, r3
 8015704:	2300      	movs	r3, #0
 8015706:	4602      	mov	r2, r0
 8015708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801570a:	6a21      	ldr	r1, [r4, #32]
 801570c:	4628      	mov	r0, r5
 801570e:	47b0      	blx	r6
 8015710:	1c43      	adds	r3, r0, #1
 8015712:	89a3      	ldrh	r3, [r4, #12]
 8015714:	d106      	bne.n	8015724 <__sflush_r+0x68>
 8015716:	6829      	ldr	r1, [r5, #0]
 8015718:	291d      	cmp	r1, #29
 801571a:	d82b      	bhi.n	8015774 <__sflush_r+0xb8>
 801571c:	4a29      	ldr	r2, [pc, #164]	; (80157c4 <__sflush_r+0x108>)
 801571e:	410a      	asrs	r2, r1
 8015720:	07d6      	lsls	r6, r2, #31
 8015722:	d427      	bmi.n	8015774 <__sflush_r+0xb8>
 8015724:	2200      	movs	r2, #0
 8015726:	6062      	str	r2, [r4, #4]
 8015728:	04d9      	lsls	r1, r3, #19
 801572a:	6922      	ldr	r2, [r4, #16]
 801572c:	6022      	str	r2, [r4, #0]
 801572e:	d504      	bpl.n	801573a <__sflush_r+0x7e>
 8015730:	1c42      	adds	r2, r0, #1
 8015732:	d101      	bne.n	8015738 <__sflush_r+0x7c>
 8015734:	682b      	ldr	r3, [r5, #0]
 8015736:	b903      	cbnz	r3, 801573a <__sflush_r+0x7e>
 8015738:	6560      	str	r0, [r4, #84]	; 0x54
 801573a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801573c:	602f      	str	r7, [r5, #0]
 801573e:	2900      	cmp	r1, #0
 8015740:	d0c9      	beq.n	80156d6 <__sflush_r+0x1a>
 8015742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015746:	4299      	cmp	r1, r3
 8015748:	d002      	beq.n	8015750 <__sflush_r+0x94>
 801574a:	4628      	mov	r0, r5
 801574c:	f7fe face 	bl	8013cec <_free_r>
 8015750:	2000      	movs	r0, #0
 8015752:	6360      	str	r0, [r4, #52]	; 0x34
 8015754:	e7c0      	b.n	80156d8 <__sflush_r+0x1c>
 8015756:	2301      	movs	r3, #1
 8015758:	4628      	mov	r0, r5
 801575a:	47b0      	blx	r6
 801575c:	1c41      	adds	r1, r0, #1
 801575e:	d1c8      	bne.n	80156f2 <__sflush_r+0x36>
 8015760:	682b      	ldr	r3, [r5, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d0c5      	beq.n	80156f2 <__sflush_r+0x36>
 8015766:	2b1d      	cmp	r3, #29
 8015768:	d001      	beq.n	801576e <__sflush_r+0xb2>
 801576a:	2b16      	cmp	r3, #22
 801576c:	d101      	bne.n	8015772 <__sflush_r+0xb6>
 801576e:	602f      	str	r7, [r5, #0]
 8015770:	e7b1      	b.n	80156d6 <__sflush_r+0x1a>
 8015772:	89a3      	ldrh	r3, [r4, #12]
 8015774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015778:	81a3      	strh	r3, [r4, #12]
 801577a:	e7ad      	b.n	80156d8 <__sflush_r+0x1c>
 801577c:	690f      	ldr	r7, [r1, #16]
 801577e:	2f00      	cmp	r7, #0
 8015780:	d0a9      	beq.n	80156d6 <__sflush_r+0x1a>
 8015782:	0793      	lsls	r3, r2, #30
 8015784:	680e      	ldr	r6, [r1, #0]
 8015786:	bf08      	it	eq
 8015788:	694b      	ldreq	r3, [r1, #20]
 801578a:	600f      	str	r7, [r1, #0]
 801578c:	bf18      	it	ne
 801578e:	2300      	movne	r3, #0
 8015790:	eba6 0807 	sub.w	r8, r6, r7
 8015794:	608b      	str	r3, [r1, #8]
 8015796:	f1b8 0f00 	cmp.w	r8, #0
 801579a:	dd9c      	ble.n	80156d6 <__sflush_r+0x1a>
 801579c:	6a21      	ldr	r1, [r4, #32]
 801579e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157a0:	4643      	mov	r3, r8
 80157a2:	463a      	mov	r2, r7
 80157a4:	4628      	mov	r0, r5
 80157a6:	47b0      	blx	r6
 80157a8:	2800      	cmp	r0, #0
 80157aa:	dc06      	bgt.n	80157ba <__sflush_r+0xfe>
 80157ac:	89a3      	ldrh	r3, [r4, #12]
 80157ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157b2:	81a3      	strh	r3, [r4, #12]
 80157b4:	f04f 30ff 	mov.w	r0, #4294967295
 80157b8:	e78e      	b.n	80156d8 <__sflush_r+0x1c>
 80157ba:	4407      	add	r7, r0
 80157bc:	eba8 0800 	sub.w	r8, r8, r0
 80157c0:	e7e9      	b.n	8015796 <__sflush_r+0xda>
 80157c2:	bf00      	nop
 80157c4:	dfbffffe 	.word	0xdfbffffe

080157c8 <_fflush_r>:
 80157c8:	b538      	push	{r3, r4, r5, lr}
 80157ca:	690b      	ldr	r3, [r1, #16]
 80157cc:	4605      	mov	r5, r0
 80157ce:	460c      	mov	r4, r1
 80157d0:	b913      	cbnz	r3, 80157d8 <_fflush_r+0x10>
 80157d2:	2500      	movs	r5, #0
 80157d4:	4628      	mov	r0, r5
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
 80157d8:	b118      	cbz	r0, 80157e2 <_fflush_r+0x1a>
 80157da:	6a03      	ldr	r3, [r0, #32]
 80157dc:	b90b      	cbnz	r3, 80157e2 <_fflush_r+0x1a>
 80157de:	f7fd fa9b 	bl	8012d18 <__sinit>
 80157e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d0f3      	beq.n	80157d2 <_fflush_r+0xa>
 80157ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80157ec:	07d0      	lsls	r0, r2, #31
 80157ee:	d404      	bmi.n	80157fa <_fflush_r+0x32>
 80157f0:	0599      	lsls	r1, r3, #22
 80157f2:	d402      	bmi.n	80157fa <_fflush_r+0x32>
 80157f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157f6:	f7fd fbe9 	bl	8012fcc <__retarget_lock_acquire_recursive>
 80157fa:	4628      	mov	r0, r5
 80157fc:	4621      	mov	r1, r4
 80157fe:	f7ff ff5d 	bl	80156bc <__sflush_r>
 8015802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015804:	07da      	lsls	r2, r3, #31
 8015806:	4605      	mov	r5, r0
 8015808:	d4e4      	bmi.n	80157d4 <_fflush_r+0xc>
 801580a:	89a3      	ldrh	r3, [r4, #12]
 801580c:	059b      	lsls	r3, r3, #22
 801580e:	d4e1      	bmi.n	80157d4 <_fflush_r+0xc>
 8015810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015812:	f7fd fbdc 	bl	8012fce <__retarget_lock_release_recursive>
 8015816:	e7dd      	b.n	80157d4 <_fflush_r+0xc>

08015818 <memmove>:
 8015818:	4288      	cmp	r0, r1
 801581a:	b510      	push	{r4, lr}
 801581c:	eb01 0402 	add.w	r4, r1, r2
 8015820:	d902      	bls.n	8015828 <memmove+0x10>
 8015822:	4284      	cmp	r4, r0
 8015824:	4623      	mov	r3, r4
 8015826:	d807      	bhi.n	8015838 <memmove+0x20>
 8015828:	1e43      	subs	r3, r0, #1
 801582a:	42a1      	cmp	r1, r4
 801582c:	d008      	beq.n	8015840 <memmove+0x28>
 801582e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015836:	e7f8      	b.n	801582a <memmove+0x12>
 8015838:	4402      	add	r2, r0
 801583a:	4601      	mov	r1, r0
 801583c:	428a      	cmp	r2, r1
 801583e:	d100      	bne.n	8015842 <memmove+0x2a>
 8015840:	bd10      	pop	{r4, pc}
 8015842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801584a:	e7f7      	b.n	801583c <memmove+0x24>

0801584c <strncmp>:
 801584c:	b510      	push	{r4, lr}
 801584e:	b16a      	cbz	r2, 801586c <strncmp+0x20>
 8015850:	3901      	subs	r1, #1
 8015852:	1884      	adds	r4, r0, r2
 8015854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015858:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801585c:	429a      	cmp	r2, r3
 801585e:	d103      	bne.n	8015868 <strncmp+0x1c>
 8015860:	42a0      	cmp	r0, r4
 8015862:	d001      	beq.n	8015868 <strncmp+0x1c>
 8015864:	2a00      	cmp	r2, #0
 8015866:	d1f5      	bne.n	8015854 <strncmp+0x8>
 8015868:	1ad0      	subs	r0, r2, r3
 801586a:	bd10      	pop	{r4, pc}
 801586c:	4610      	mov	r0, r2
 801586e:	e7fc      	b.n	801586a <strncmp+0x1e>

08015870 <nan>:
 8015870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015878 <nan+0x8>
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop
 8015878:	00000000 	.word	0x00000000
 801587c:	7ff80000 	.word	0x7ff80000

08015880 <__assert_func>:
 8015880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015882:	4614      	mov	r4, r2
 8015884:	461a      	mov	r2, r3
 8015886:	4b09      	ldr	r3, [pc, #36]	; (80158ac <__assert_func+0x2c>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	4605      	mov	r5, r0
 801588c:	68d8      	ldr	r0, [r3, #12]
 801588e:	b14c      	cbz	r4, 80158a4 <__assert_func+0x24>
 8015890:	4b07      	ldr	r3, [pc, #28]	; (80158b0 <__assert_func+0x30>)
 8015892:	9100      	str	r1, [sp, #0]
 8015894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015898:	4906      	ldr	r1, [pc, #24]	; (80158b4 <__assert_func+0x34>)
 801589a:	462b      	mov	r3, r5
 801589c:	f000 fbca 	bl	8016034 <fiprintf>
 80158a0:	f000 fbda 	bl	8016058 <abort>
 80158a4:	4b04      	ldr	r3, [pc, #16]	; (80158b8 <__assert_func+0x38>)
 80158a6:	461c      	mov	r4, r3
 80158a8:	e7f3      	b.n	8015892 <__assert_func+0x12>
 80158aa:	bf00      	nop
 80158ac:	20000164 	.word	0x20000164
 80158b0:	08016d1a 	.word	0x08016d1a
 80158b4:	08016d27 	.word	0x08016d27
 80158b8:	08016d55 	.word	0x08016d55

080158bc <_calloc_r>:
 80158bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158be:	fba1 2402 	umull	r2, r4, r1, r2
 80158c2:	b94c      	cbnz	r4, 80158d8 <_calloc_r+0x1c>
 80158c4:	4611      	mov	r1, r2
 80158c6:	9201      	str	r2, [sp, #4]
 80158c8:	f7fc faaa 	bl	8011e20 <_malloc_r>
 80158cc:	9a01      	ldr	r2, [sp, #4]
 80158ce:	4605      	mov	r5, r0
 80158d0:	b930      	cbnz	r0, 80158e0 <_calloc_r+0x24>
 80158d2:	4628      	mov	r0, r5
 80158d4:	b003      	add	sp, #12
 80158d6:	bd30      	pop	{r4, r5, pc}
 80158d8:	220c      	movs	r2, #12
 80158da:	6002      	str	r2, [r0, #0]
 80158dc:	2500      	movs	r5, #0
 80158de:	e7f8      	b.n	80158d2 <_calloc_r+0x16>
 80158e0:	4621      	mov	r1, r4
 80158e2:	f7fd fae6 	bl	8012eb2 <memset>
 80158e6:	e7f4      	b.n	80158d2 <_calloc_r+0x16>

080158e8 <rshift>:
 80158e8:	6903      	ldr	r3, [r0, #16]
 80158ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80158ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80158f6:	f100 0414 	add.w	r4, r0, #20
 80158fa:	dd45      	ble.n	8015988 <rshift+0xa0>
 80158fc:	f011 011f 	ands.w	r1, r1, #31
 8015900:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015904:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015908:	d10c      	bne.n	8015924 <rshift+0x3c>
 801590a:	f100 0710 	add.w	r7, r0, #16
 801590e:	4629      	mov	r1, r5
 8015910:	42b1      	cmp	r1, r6
 8015912:	d334      	bcc.n	801597e <rshift+0x96>
 8015914:	1a9b      	subs	r3, r3, r2
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	1eea      	subs	r2, r5, #3
 801591a:	4296      	cmp	r6, r2
 801591c:	bf38      	it	cc
 801591e:	2300      	movcc	r3, #0
 8015920:	4423      	add	r3, r4
 8015922:	e015      	b.n	8015950 <rshift+0x68>
 8015924:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015928:	f1c1 0820 	rsb	r8, r1, #32
 801592c:	40cf      	lsrs	r7, r1
 801592e:	f105 0e04 	add.w	lr, r5, #4
 8015932:	46a1      	mov	r9, r4
 8015934:	4576      	cmp	r6, lr
 8015936:	46f4      	mov	ip, lr
 8015938:	d815      	bhi.n	8015966 <rshift+0x7e>
 801593a:	1a9a      	subs	r2, r3, r2
 801593c:	0092      	lsls	r2, r2, #2
 801593e:	3a04      	subs	r2, #4
 8015940:	3501      	adds	r5, #1
 8015942:	42ae      	cmp	r6, r5
 8015944:	bf38      	it	cc
 8015946:	2200      	movcc	r2, #0
 8015948:	18a3      	adds	r3, r4, r2
 801594a:	50a7      	str	r7, [r4, r2]
 801594c:	b107      	cbz	r7, 8015950 <rshift+0x68>
 801594e:	3304      	adds	r3, #4
 8015950:	1b1a      	subs	r2, r3, r4
 8015952:	42a3      	cmp	r3, r4
 8015954:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015958:	bf08      	it	eq
 801595a:	2300      	moveq	r3, #0
 801595c:	6102      	str	r2, [r0, #16]
 801595e:	bf08      	it	eq
 8015960:	6143      	streq	r3, [r0, #20]
 8015962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015966:	f8dc c000 	ldr.w	ip, [ip]
 801596a:	fa0c fc08 	lsl.w	ip, ip, r8
 801596e:	ea4c 0707 	orr.w	r7, ip, r7
 8015972:	f849 7b04 	str.w	r7, [r9], #4
 8015976:	f85e 7b04 	ldr.w	r7, [lr], #4
 801597a:	40cf      	lsrs	r7, r1
 801597c:	e7da      	b.n	8015934 <rshift+0x4c>
 801597e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015982:	f847 cf04 	str.w	ip, [r7, #4]!
 8015986:	e7c3      	b.n	8015910 <rshift+0x28>
 8015988:	4623      	mov	r3, r4
 801598a:	e7e1      	b.n	8015950 <rshift+0x68>

0801598c <__hexdig_fun>:
 801598c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015990:	2b09      	cmp	r3, #9
 8015992:	d802      	bhi.n	801599a <__hexdig_fun+0xe>
 8015994:	3820      	subs	r0, #32
 8015996:	b2c0      	uxtb	r0, r0
 8015998:	4770      	bx	lr
 801599a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801599e:	2b05      	cmp	r3, #5
 80159a0:	d801      	bhi.n	80159a6 <__hexdig_fun+0x1a>
 80159a2:	3847      	subs	r0, #71	; 0x47
 80159a4:	e7f7      	b.n	8015996 <__hexdig_fun+0xa>
 80159a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80159aa:	2b05      	cmp	r3, #5
 80159ac:	d801      	bhi.n	80159b2 <__hexdig_fun+0x26>
 80159ae:	3827      	subs	r0, #39	; 0x27
 80159b0:	e7f1      	b.n	8015996 <__hexdig_fun+0xa>
 80159b2:	2000      	movs	r0, #0
 80159b4:	4770      	bx	lr
	...

080159b8 <__gethex>:
 80159b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159bc:	4617      	mov	r7, r2
 80159be:	680a      	ldr	r2, [r1, #0]
 80159c0:	b085      	sub	sp, #20
 80159c2:	f102 0b02 	add.w	fp, r2, #2
 80159c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80159ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80159ce:	4681      	mov	r9, r0
 80159d0:	468a      	mov	sl, r1
 80159d2:	9302      	str	r3, [sp, #8]
 80159d4:	32fe      	adds	r2, #254	; 0xfe
 80159d6:	eb02 030b 	add.w	r3, r2, fp
 80159da:	46d8      	mov	r8, fp
 80159dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80159e0:	9301      	str	r3, [sp, #4]
 80159e2:	2830      	cmp	r0, #48	; 0x30
 80159e4:	d0f7      	beq.n	80159d6 <__gethex+0x1e>
 80159e6:	f7ff ffd1 	bl	801598c <__hexdig_fun>
 80159ea:	4604      	mov	r4, r0
 80159ec:	2800      	cmp	r0, #0
 80159ee:	d138      	bne.n	8015a62 <__gethex+0xaa>
 80159f0:	49a7      	ldr	r1, [pc, #668]	; (8015c90 <__gethex+0x2d8>)
 80159f2:	2201      	movs	r2, #1
 80159f4:	4640      	mov	r0, r8
 80159f6:	f7ff ff29 	bl	801584c <strncmp>
 80159fa:	4606      	mov	r6, r0
 80159fc:	2800      	cmp	r0, #0
 80159fe:	d169      	bne.n	8015ad4 <__gethex+0x11c>
 8015a00:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015a04:	465d      	mov	r5, fp
 8015a06:	f7ff ffc1 	bl	801598c <__hexdig_fun>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d064      	beq.n	8015ad8 <__gethex+0x120>
 8015a0e:	465a      	mov	r2, fp
 8015a10:	7810      	ldrb	r0, [r2, #0]
 8015a12:	2830      	cmp	r0, #48	; 0x30
 8015a14:	4690      	mov	r8, r2
 8015a16:	f102 0201 	add.w	r2, r2, #1
 8015a1a:	d0f9      	beq.n	8015a10 <__gethex+0x58>
 8015a1c:	f7ff ffb6 	bl	801598c <__hexdig_fun>
 8015a20:	2301      	movs	r3, #1
 8015a22:	fab0 f480 	clz	r4, r0
 8015a26:	0964      	lsrs	r4, r4, #5
 8015a28:	465e      	mov	r6, fp
 8015a2a:	9301      	str	r3, [sp, #4]
 8015a2c:	4642      	mov	r2, r8
 8015a2e:	4615      	mov	r5, r2
 8015a30:	3201      	adds	r2, #1
 8015a32:	7828      	ldrb	r0, [r5, #0]
 8015a34:	f7ff ffaa 	bl	801598c <__hexdig_fun>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d1f8      	bne.n	8015a2e <__gethex+0x76>
 8015a3c:	4994      	ldr	r1, [pc, #592]	; (8015c90 <__gethex+0x2d8>)
 8015a3e:	2201      	movs	r2, #1
 8015a40:	4628      	mov	r0, r5
 8015a42:	f7ff ff03 	bl	801584c <strncmp>
 8015a46:	b978      	cbnz	r0, 8015a68 <__gethex+0xb0>
 8015a48:	b946      	cbnz	r6, 8015a5c <__gethex+0xa4>
 8015a4a:	1c6e      	adds	r6, r5, #1
 8015a4c:	4632      	mov	r2, r6
 8015a4e:	4615      	mov	r5, r2
 8015a50:	3201      	adds	r2, #1
 8015a52:	7828      	ldrb	r0, [r5, #0]
 8015a54:	f7ff ff9a 	bl	801598c <__hexdig_fun>
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	d1f8      	bne.n	8015a4e <__gethex+0x96>
 8015a5c:	1b73      	subs	r3, r6, r5
 8015a5e:	009e      	lsls	r6, r3, #2
 8015a60:	e004      	b.n	8015a6c <__gethex+0xb4>
 8015a62:	2400      	movs	r4, #0
 8015a64:	4626      	mov	r6, r4
 8015a66:	e7e1      	b.n	8015a2c <__gethex+0x74>
 8015a68:	2e00      	cmp	r6, #0
 8015a6a:	d1f7      	bne.n	8015a5c <__gethex+0xa4>
 8015a6c:	782b      	ldrb	r3, [r5, #0]
 8015a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015a72:	2b50      	cmp	r3, #80	; 0x50
 8015a74:	d13d      	bne.n	8015af2 <__gethex+0x13a>
 8015a76:	786b      	ldrb	r3, [r5, #1]
 8015a78:	2b2b      	cmp	r3, #43	; 0x2b
 8015a7a:	d02f      	beq.n	8015adc <__gethex+0x124>
 8015a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8015a7e:	d031      	beq.n	8015ae4 <__gethex+0x12c>
 8015a80:	1c69      	adds	r1, r5, #1
 8015a82:	f04f 0b00 	mov.w	fp, #0
 8015a86:	7808      	ldrb	r0, [r1, #0]
 8015a88:	f7ff ff80 	bl	801598c <__hexdig_fun>
 8015a8c:	1e42      	subs	r2, r0, #1
 8015a8e:	b2d2      	uxtb	r2, r2
 8015a90:	2a18      	cmp	r2, #24
 8015a92:	d82e      	bhi.n	8015af2 <__gethex+0x13a>
 8015a94:	f1a0 0210 	sub.w	r2, r0, #16
 8015a98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015a9c:	f7ff ff76 	bl	801598c <__hexdig_fun>
 8015aa0:	f100 3cff 	add.w	ip, r0, #4294967295
 8015aa4:	fa5f fc8c 	uxtb.w	ip, ip
 8015aa8:	f1bc 0f18 	cmp.w	ip, #24
 8015aac:	d91d      	bls.n	8015aea <__gethex+0x132>
 8015aae:	f1bb 0f00 	cmp.w	fp, #0
 8015ab2:	d000      	beq.n	8015ab6 <__gethex+0xfe>
 8015ab4:	4252      	negs	r2, r2
 8015ab6:	4416      	add	r6, r2
 8015ab8:	f8ca 1000 	str.w	r1, [sl]
 8015abc:	b1dc      	cbz	r4, 8015af6 <__gethex+0x13e>
 8015abe:	9b01      	ldr	r3, [sp, #4]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	bf14      	ite	ne
 8015ac4:	f04f 0800 	movne.w	r8, #0
 8015ac8:	f04f 0806 	moveq.w	r8, #6
 8015acc:	4640      	mov	r0, r8
 8015ace:	b005      	add	sp, #20
 8015ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad4:	4645      	mov	r5, r8
 8015ad6:	4626      	mov	r6, r4
 8015ad8:	2401      	movs	r4, #1
 8015ada:	e7c7      	b.n	8015a6c <__gethex+0xb4>
 8015adc:	f04f 0b00 	mov.w	fp, #0
 8015ae0:	1ca9      	adds	r1, r5, #2
 8015ae2:	e7d0      	b.n	8015a86 <__gethex+0xce>
 8015ae4:	f04f 0b01 	mov.w	fp, #1
 8015ae8:	e7fa      	b.n	8015ae0 <__gethex+0x128>
 8015aea:	230a      	movs	r3, #10
 8015aec:	fb03 0002 	mla	r0, r3, r2, r0
 8015af0:	e7d0      	b.n	8015a94 <__gethex+0xdc>
 8015af2:	4629      	mov	r1, r5
 8015af4:	e7e0      	b.n	8015ab8 <__gethex+0x100>
 8015af6:	eba5 0308 	sub.w	r3, r5, r8
 8015afa:	3b01      	subs	r3, #1
 8015afc:	4621      	mov	r1, r4
 8015afe:	2b07      	cmp	r3, #7
 8015b00:	dc0a      	bgt.n	8015b18 <__gethex+0x160>
 8015b02:	4648      	mov	r0, r9
 8015b04:	f7fe f93e 	bl	8013d84 <_Balloc>
 8015b08:	4604      	mov	r4, r0
 8015b0a:	b940      	cbnz	r0, 8015b1e <__gethex+0x166>
 8015b0c:	4b61      	ldr	r3, [pc, #388]	; (8015c94 <__gethex+0x2dc>)
 8015b0e:	4602      	mov	r2, r0
 8015b10:	21e4      	movs	r1, #228	; 0xe4
 8015b12:	4861      	ldr	r0, [pc, #388]	; (8015c98 <__gethex+0x2e0>)
 8015b14:	f7ff feb4 	bl	8015880 <__assert_func>
 8015b18:	3101      	adds	r1, #1
 8015b1a:	105b      	asrs	r3, r3, #1
 8015b1c:	e7ef      	b.n	8015afe <__gethex+0x146>
 8015b1e:	f100 0a14 	add.w	sl, r0, #20
 8015b22:	2300      	movs	r3, #0
 8015b24:	495a      	ldr	r1, [pc, #360]	; (8015c90 <__gethex+0x2d8>)
 8015b26:	f8cd a004 	str.w	sl, [sp, #4]
 8015b2a:	469b      	mov	fp, r3
 8015b2c:	45a8      	cmp	r8, r5
 8015b2e:	d342      	bcc.n	8015bb6 <__gethex+0x1fe>
 8015b30:	9801      	ldr	r0, [sp, #4]
 8015b32:	f840 bb04 	str.w	fp, [r0], #4
 8015b36:	eba0 000a 	sub.w	r0, r0, sl
 8015b3a:	1080      	asrs	r0, r0, #2
 8015b3c:	6120      	str	r0, [r4, #16]
 8015b3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015b42:	4658      	mov	r0, fp
 8015b44:	f7fe fa10 	bl	8013f68 <__hi0bits>
 8015b48:	683d      	ldr	r5, [r7, #0]
 8015b4a:	eba8 0000 	sub.w	r0, r8, r0
 8015b4e:	42a8      	cmp	r0, r5
 8015b50:	dd59      	ble.n	8015c06 <__gethex+0x24e>
 8015b52:	eba0 0805 	sub.w	r8, r0, r5
 8015b56:	4641      	mov	r1, r8
 8015b58:	4620      	mov	r0, r4
 8015b5a:	f7fe fd9f 	bl	801469c <__any_on>
 8015b5e:	4683      	mov	fp, r0
 8015b60:	b1b8      	cbz	r0, 8015b92 <__gethex+0x1da>
 8015b62:	f108 33ff 	add.w	r3, r8, #4294967295
 8015b66:	1159      	asrs	r1, r3, #5
 8015b68:	f003 021f 	and.w	r2, r3, #31
 8015b6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015b70:	f04f 0b01 	mov.w	fp, #1
 8015b74:	fa0b f202 	lsl.w	r2, fp, r2
 8015b78:	420a      	tst	r2, r1
 8015b7a:	d00a      	beq.n	8015b92 <__gethex+0x1da>
 8015b7c:	455b      	cmp	r3, fp
 8015b7e:	dd06      	ble.n	8015b8e <__gethex+0x1d6>
 8015b80:	f1a8 0102 	sub.w	r1, r8, #2
 8015b84:	4620      	mov	r0, r4
 8015b86:	f7fe fd89 	bl	801469c <__any_on>
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d138      	bne.n	8015c00 <__gethex+0x248>
 8015b8e:	f04f 0b02 	mov.w	fp, #2
 8015b92:	4641      	mov	r1, r8
 8015b94:	4620      	mov	r0, r4
 8015b96:	f7ff fea7 	bl	80158e8 <rshift>
 8015b9a:	4446      	add	r6, r8
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	42b3      	cmp	r3, r6
 8015ba0:	da41      	bge.n	8015c26 <__gethex+0x26e>
 8015ba2:	4621      	mov	r1, r4
 8015ba4:	4648      	mov	r0, r9
 8015ba6:	f7fe f92d 	bl	8013e04 <_Bfree>
 8015baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bac:	2300      	movs	r3, #0
 8015bae:	6013      	str	r3, [r2, #0]
 8015bb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015bb4:	e78a      	b.n	8015acc <__gethex+0x114>
 8015bb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015bba:	2a2e      	cmp	r2, #46	; 0x2e
 8015bbc:	d014      	beq.n	8015be8 <__gethex+0x230>
 8015bbe:	2b20      	cmp	r3, #32
 8015bc0:	d106      	bne.n	8015bd0 <__gethex+0x218>
 8015bc2:	9b01      	ldr	r3, [sp, #4]
 8015bc4:	f843 bb04 	str.w	fp, [r3], #4
 8015bc8:	f04f 0b00 	mov.w	fp, #0
 8015bcc:	9301      	str	r3, [sp, #4]
 8015bce:	465b      	mov	r3, fp
 8015bd0:	7828      	ldrb	r0, [r5, #0]
 8015bd2:	9303      	str	r3, [sp, #12]
 8015bd4:	f7ff feda 	bl	801598c <__hexdig_fun>
 8015bd8:	9b03      	ldr	r3, [sp, #12]
 8015bda:	f000 000f 	and.w	r0, r0, #15
 8015bde:	4098      	lsls	r0, r3
 8015be0:	ea4b 0b00 	orr.w	fp, fp, r0
 8015be4:	3304      	adds	r3, #4
 8015be6:	e7a1      	b.n	8015b2c <__gethex+0x174>
 8015be8:	45a8      	cmp	r8, r5
 8015bea:	d8e8      	bhi.n	8015bbe <__gethex+0x206>
 8015bec:	2201      	movs	r2, #1
 8015bee:	4628      	mov	r0, r5
 8015bf0:	9303      	str	r3, [sp, #12]
 8015bf2:	f7ff fe2b 	bl	801584c <strncmp>
 8015bf6:	4926      	ldr	r1, [pc, #152]	; (8015c90 <__gethex+0x2d8>)
 8015bf8:	9b03      	ldr	r3, [sp, #12]
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	d1df      	bne.n	8015bbe <__gethex+0x206>
 8015bfe:	e795      	b.n	8015b2c <__gethex+0x174>
 8015c00:	f04f 0b03 	mov.w	fp, #3
 8015c04:	e7c5      	b.n	8015b92 <__gethex+0x1da>
 8015c06:	da0b      	bge.n	8015c20 <__gethex+0x268>
 8015c08:	eba5 0800 	sub.w	r8, r5, r0
 8015c0c:	4621      	mov	r1, r4
 8015c0e:	4642      	mov	r2, r8
 8015c10:	4648      	mov	r0, r9
 8015c12:	f7fe fb11 	bl	8014238 <__lshift>
 8015c16:	eba6 0608 	sub.w	r6, r6, r8
 8015c1a:	4604      	mov	r4, r0
 8015c1c:	f100 0a14 	add.w	sl, r0, #20
 8015c20:	f04f 0b00 	mov.w	fp, #0
 8015c24:	e7ba      	b.n	8015b9c <__gethex+0x1e4>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	42b3      	cmp	r3, r6
 8015c2a:	dd73      	ble.n	8015d14 <__gethex+0x35c>
 8015c2c:	1b9e      	subs	r6, r3, r6
 8015c2e:	42b5      	cmp	r5, r6
 8015c30:	dc34      	bgt.n	8015c9c <__gethex+0x2e4>
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2b02      	cmp	r3, #2
 8015c36:	d023      	beq.n	8015c80 <__gethex+0x2c8>
 8015c38:	2b03      	cmp	r3, #3
 8015c3a:	d025      	beq.n	8015c88 <__gethex+0x2d0>
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d115      	bne.n	8015c6c <__gethex+0x2b4>
 8015c40:	42b5      	cmp	r5, r6
 8015c42:	d113      	bne.n	8015c6c <__gethex+0x2b4>
 8015c44:	2d01      	cmp	r5, #1
 8015c46:	d10b      	bne.n	8015c60 <__gethex+0x2a8>
 8015c48:	9a02      	ldr	r2, [sp, #8]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6013      	str	r3, [r2, #0]
 8015c4e:	2301      	movs	r3, #1
 8015c50:	6123      	str	r3, [r4, #16]
 8015c52:	f8ca 3000 	str.w	r3, [sl]
 8015c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c58:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015c5c:	601c      	str	r4, [r3, #0]
 8015c5e:	e735      	b.n	8015acc <__gethex+0x114>
 8015c60:	1e69      	subs	r1, r5, #1
 8015c62:	4620      	mov	r0, r4
 8015c64:	f7fe fd1a 	bl	801469c <__any_on>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	d1ed      	bne.n	8015c48 <__gethex+0x290>
 8015c6c:	4621      	mov	r1, r4
 8015c6e:	4648      	mov	r0, r9
 8015c70:	f7fe f8c8 	bl	8013e04 <_Bfree>
 8015c74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c76:	2300      	movs	r3, #0
 8015c78:	6013      	str	r3, [r2, #0]
 8015c7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015c7e:	e725      	b.n	8015acc <__gethex+0x114>
 8015c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d1f2      	bne.n	8015c6c <__gethex+0x2b4>
 8015c86:	e7df      	b.n	8015c48 <__gethex+0x290>
 8015c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d1dc      	bne.n	8015c48 <__gethex+0x290>
 8015c8e:	e7ed      	b.n	8015c6c <__gethex+0x2b4>
 8015c90:	08016bac 	.word	0x08016bac
 8015c94:	08016a45 	.word	0x08016a45
 8015c98:	08016d56 	.word	0x08016d56
 8015c9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8015ca0:	f1bb 0f00 	cmp.w	fp, #0
 8015ca4:	d133      	bne.n	8015d0e <__gethex+0x356>
 8015ca6:	f1b8 0f00 	cmp.w	r8, #0
 8015caa:	d004      	beq.n	8015cb6 <__gethex+0x2fe>
 8015cac:	4641      	mov	r1, r8
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f7fe fcf4 	bl	801469c <__any_on>
 8015cb4:	4683      	mov	fp, r0
 8015cb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015cba:	2301      	movs	r3, #1
 8015cbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015cc0:	f008 081f 	and.w	r8, r8, #31
 8015cc4:	fa03 f308 	lsl.w	r3, r3, r8
 8015cc8:	4213      	tst	r3, r2
 8015cca:	4631      	mov	r1, r6
 8015ccc:	4620      	mov	r0, r4
 8015cce:	bf18      	it	ne
 8015cd0:	f04b 0b02 	orrne.w	fp, fp, #2
 8015cd4:	1bad      	subs	r5, r5, r6
 8015cd6:	f7ff fe07 	bl	80158e8 <rshift>
 8015cda:	687e      	ldr	r6, [r7, #4]
 8015cdc:	f04f 0802 	mov.w	r8, #2
 8015ce0:	f1bb 0f00 	cmp.w	fp, #0
 8015ce4:	d04a      	beq.n	8015d7c <__gethex+0x3c4>
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2b02      	cmp	r3, #2
 8015cea:	d016      	beq.n	8015d1a <__gethex+0x362>
 8015cec:	2b03      	cmp	r3, #3
 8015cee:	d018      	beq.n	8015d22 <__gethex+0x36a>
 8015cf0:	2b01      	cmp	r3, #1
 8015cf2:	d109      	bne.n	8015d08 <__gethex+0x350>
 8015cf4:	f01b 0f02 	tst.w	fp, #2
 8015cf8:	d006      	beq.n	8015d08 <__gethex+0x350>
 8015cfa:	f8da 3000 	ldr.w	r3, [sl]
 8015cfe:	ea4b 0b03 	orr.w	fp, fp, r3
 8015d02:	f01b 0f01 	tst.w	fp, #1
 8015d06:	d10f      	bne.n	8015d28 <__gethex+0x370>
 8015d08:	f048 0810 	orr.w	r8, r8, #16
 8015d0c:	e036      	b.n	8015d7c <__gethex+0x3c4>
 8015d0e:	f04f 0b01 	mov.w	fp, #1
 8015d12:	e7d0      	b.n	8015cb6 <__gethex+0x2fe>
 8015d14:	f04f 0801 	mov.w	r8, #1
 8015d18:	e7e2      	b.n	8015ce0 <__gethex+0x328>
 8015d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d1c:	f1c3 0301 	rsb	r3, r3, #1
 8015d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d0ef      	beq.n	8015d08 <__gethex+0x350>
 8015d28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015d2c:	f104 0214 	add.w	r2, r4, #20
 8015d30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015d34:	9301      	str	r3, [sp, #4]
 8015d36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	4694      	mov	ip, r2
 8015d3e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015d42:	f1b1 3fff 	cmp.w	r1, #4294967295
 8015d46:	d01e      	beq.n	8015d86 <__gethex+0x3ce>
 8015d48:	3101      	adds	r1, #1
 8015d4a:	f8cc 1000 	str.w	r1, [ip]
 8015d4e:	f1b8 0f02 	cmp.w	r8, #2
 8015d52:	f104 0214 	add.w	r2, r4, #20
 8015d56:	d13d      	bne.n	8015dd4 <__gethex+0x41c>
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	3b01      	subs	r3, #1
 8015d5c:	42ab      	cmp	r3, r5
 8015d5e:	d10b      	bne.n	8015d78 <__gethex+0x3c0>
 8015d60:	1169      	asrs	r1, r5, #5
 8015d62:	2301      	movs	r3, #1
 8015d64:	f005 051f 	and.w	r5, r5, #31
 8015d68:	fa03 f505 	lsl.w	r5, r3, r5
 8015d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d70:	421d      	tst	r5, r3
 8015d72:	bf18      	it	ne
 8015d74:	f04f 0801 	movne.w	r8, #1
 8015d78:	f048 0820 	orr.w	r8, r8, #32
 8015d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d7e:	601c      	str	r4, [r3, #0]
 8015d80:	9b02      	ldr	r3, [sp, #8]
 8015d82:	601e      	str	r6, [r3, #0]
 8015d84:	e6a2      	b.n	8015acc <__gethex+0x114>
 8015d86:	4290      	cmp	r0, r2
 8015d88:	f842 3c04 	str.w	r3, [r2, #-4]
 8015d8c:	d8d6      	bhi.n	8015d3c <__gethex+0x384>
 8015d8e:	68a2      	ldr	r2, [r4, #8]
 8015d90:	4593      	cmp	fp, r2
 8015d92:	db17      	blt.n	8015dc4 <__gethex+0x40c>
 8015d94:	6861      	ldr	r1, [r4, #4]
 8015d96:	4648      	mov	r0, r9
 8015d98:	3101      	adds	r1, #1
 8015d9a:	f7fd fff3 	bl	8013d84 <_Balloc>
 8015d9e:	4682      	mov	sl, r0
 8015da0:	b918      	cbnz	r0, 8015daa <__gethex+0x3f2>
 8015da2:	4b1b      	ldr	r3, [pc, #108]	; (8015e10 <__gethex+0x458>)
 8015da4:	4602      	mov	r2, r0
 8015da6:	2184      	movs	r1, #132	; 0x84
 8015da8:	e6b3      	b.n	8015b12 <__gethex+0x15a>
 8015daa:	6922      	ldr	r2, [r4, #16]
 8015dac:	3202      	adds	r2, #2
 8015dae:	f104 010c 	add.w	r1, r4, #12
 8015db2:	0092      	lsls	r2, r2, #2
 8015db4:	300c      	adds	r0, #12
 8015db6:	f7fd f90b 	bl	8012fd0 <memcpy>
 8015dba:	4621      	mov	r1, r4
 8015dbc:	4648      	mov	r0, r9
 8015dbe:	f7fe f821 	bl	8013e04 <_Bfree>
 8015dc2:	4654      	mov	r4, sl
 8015dc4:	6922      	ldr	r2, [r4, #16]
 8015dc6:	1c51      	adds	r1, r2, #1
 8015dc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015dcc:	6121      	str	r1, [r4, #16]
 8015dce:	2101      	movs	r1, #1
 8015dd0:	6151      	str	r1, [r2, #20]
 8015dd2:	e7bc      	b.n	8015d4e <__gethex+0x396>
 8015dd4:	6921      	ldr	r1, [r4, #16]
 8015dd6:	4559      	cmp	r1, fp
 8015dd8:	dd0b      	ble.n	8015df2 <__gethex+0x43a>
 8015dda:	2101      	movs	r1, #1
 8015ddc:	4620      	mov	r0, r4
 8015dde:	f7ff fd83 	bl	80158e8 <rshift>
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	3601      	adds	r6, #1
 8015de6:	42b3      	cmp	r3, r6
 8015de8:	f6ff aedb 	blt.w	8015ba2 <__gethex+0x1ea>
 8015dec:	f04f 0801 	mov.w	r8, #1
 8015df0:	e7c2      	b.n	8015d78 <__gethex+0x3c0>
 8015df2:	f015 051f 	ands.w	r5, r5, #31
 8015df6:	d0f9      	beq.n	8015dec <__gethex+0x434>
 8015df8:	9b01      	ldr	r3, [sp, #4]
 8015dfa:	441a      	add	r2, r3
 8015dfc:	f1c5 0520 	rsb	r5, r5, #32
 8015e00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015e04:	f7fe f8b0 	bl	8013f68 <__hi0bits>
 8015e08:	42a8      	cmp	r0, r5
 8015e0a:	dbe6      	blt.n	8015dda <__gethex+0x422>
 8015e0c:	e7ee      	b.n	8015dec <__gethex+0x434>
 8015e0e:	bf00      	nop
 8015e10:	08016a45 	.word	0x08016a45

08015e14 <L_shift>:
 8015e14:	f1c2 0208 	rsb	r2, r2, #8
 8015e18:	0092      	lsls	r2, r2, #2
 8015e1a:	b570      	push	{r4, r5, r6, lr}
 8015e1c:	f1c2 0620 	rsb	r6, r2, #32
 8015e20:	6843      	ldr	r3, [r0, #4]
 8015e22:	6804      	ldr	r4, [r0, #0]
 8015e24:	fa03 f506 	lsl.w	r5, r3, r6
 8015e28:	432c      	orrs	r4, r5
 8015e2a:	40d3      	lsrs	r3, r2
 8015e2c:	6004      	str	r4, [r0, #0]
 8015e2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015e32:	4288      	cmp	r0, r1
 8015e34:	d3f4      	bcc.n	8015e20 <L_shift+0xc>
 8015e36:	bd70      	pop	{r4, r5, r6, pc}

08015e38 <__match>:
 8015e38:	b530      	push	{r4, r5, lr}
 8015e3a:	6803      	ldr	r3, [r0, #0]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e42:	b914      	cbnz	r4, 8015e4a <__match+0x12>
 8015e44:	6003      	str	r3, [r0, #0]
 8015e46:	2001      	movs	r0, #1
 8015e48:	bd30      	pop	{r4, r5, pc}
 8015e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015e52:	2d19      	cmp	r5, #25
 8015e54:	bf98      	it	ls
 8015e56:	3220      	addls	r2, #32
 8015e58:	42a2      	cmp	r2, r4
 8015e5a:	d0f0      	beq.n	8015e3e <__match+0x6>
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	e7f3      	b.n	8015e48 <__match+0x10>

08015e60 <__hexnan>:
 8015e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e64:	680b      	ldr	r3, [r1, #0]
 8015e66:	6801      	ldr	r1, [r0, #0]
 8015e68:	115e      	asrs	r6, r3, #5
 8015e6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015e6e:	f013 031f 	ands.w	r3, r3, #31
 8015e72:	b087      	sub	sp, #28
 8015e74:	bf18      	it	ne
 8015e76:	3604      	addne	r6, #4
 8015e78:	2500      	movs	r5, #0
 8015e7a:	1f37      	subs	r7, r6, #4
 8015e7c:	4682      	mov	sl, r0
 8015e7e:	4690      	mov	r8, r2
 8015e80:	9301      	str	r3, [sp, #4]
 8015e82:	f846 5c04 	str.w	r5, [r6, #-4]
 8015e86:	46b9      	mov	r9, r7
 8015e88:	463c      	mov	r4, r7
 8015e8a:	9502      	str	r5, [sp, #8]
 8015e8c:	46ab      	mov	fp, r5
 8015e8e:	784a      	ldrb	r2, [r1, #1]
 8015e90:	1c4b      	adds	r3, r1, #1
 8015e92:	9303      	str	r3, [sp, #12]
 8015e94:	b342      	cbz	r2, 8015ee8 <__hexnan+0x88>
 8015e96:	4610      	mov	r0, r2
 8015e98:	9105      	str	r1, [sp, #20]
 8015e9a:	9204      	str	r2, [sp, #16]
 8015e9c:	f7ff fd76 	bl	801598c <__hexdig_fun>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d14f      	bne.n	8015f44 <__hexnan+0xe4>
 8015ea4:	9a04      	ldr	r2, [sp, #16]
 8015ea6:	9905      	ldr	r1, [sp, #20]
 8015ea8:	2a20      	cmp	r2, #32
 8015eaa:	d818      	bhi.n	8015ede <__hexnan+0x7e>
 8015eac:	9b02      	ldr	r3, [sp, #8]
 8015eae:	459b      	cmp	fp, r3
 8015eb0:	dd13      	ble.n	8015eda <__hexnan+0x7a>
 8015eb2:	454c      	cmp	r4, r9
 8015eb4:	d206      	bcs.n	8015ec4 <__hexnan+0x64>
 8015eb6:	2d07      	cmp	r5, #7
 8015eb8:	dc04      	bgt.n	8015ec4 <__hexnan+0x64>
 8015eba:	462a      	mov	r2, r5
 8015ebc:	4649      	mov	r1, r9
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f7ff ffa8 	bl	8015e14 <L_shift>
 8015ec4:	4544      	cmp	r4, r8
 8015ec6:	d950      	bls.n	8015f6a <__hexnan+0x10a>
 8015ec8:	2300      	movs	r3, #0
 8015eca:	f1a4 0904 	sub.w	r9, r4, #4
 8015ece:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ed2:	f8cd b008 	str.w	fp, [sp, #8]
 8015ed6:	464c      	mov	r4, r9
 8015ed8:	461d      	mov	r5, r3
 8015eda:	9903      	ldr	r1, [sp, #12]
 8015edc:	e7d7      	b.n	8015e8e <__hexnan+0x2e>
 8015ede:	2a29      	cmp	r2, #41	; 0x29
 8015ee0:	d155      	bne.n	8015f8e <__hexnan+0x12e>
 8015ee2:	3102      	adds	r1, #2
 8015ee4:	f8ca 1000 	str.w	r1, [sl]
 8015ee8:	f1bb 0f00 	cmp.w	fp, #0
 8015eec:	d04f      	beq.n	8015f8e <__hexnan+0x12e>
 8015eee:	454c      	cmp	r4, r9
 8015ef0:	d206      	bcs.n	8015f00 <__hexnan+0xa0>
 8015ef2:	2d07      	cmp	r5, #7
 8015ef4:	dc04      	bgt.n	8015f00 <__hexnan+0xa0>
 8015ef6:	462a      	mov	r2, r5
 8015ef8:	4649      	mov	r1, r9
 8015efa:	4620      	mov	r0, r4
 8015efc:	f7ff ff8a 	bl	8015e14 <L_shift>
 8015f00:	4544      	cmp	r4, r8
 8015f02:	d934      	bls.n	8015f6e <__hexnan+0x10e>
 8015f04:	f1a8 0204 	sub.w	r2, r8, #4
 8015f08:	4623      	mov	r3, r4
 8015f0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8015f0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015f12:	429f      	cmp	r7, r3
 8015f14:	d2f9      	bcs.n	8015f0a <__hexnan+0xaa>
 8015f16:	1b3b      	subs	r3, r7, r4
 8015f18:	f023 0303 	bic.w	r3, r3, #3
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	3e03      	subs	r6, #3
 8015f20:	3401      	adds	r4, #1
 8015f22:	42a6      	cmp	r6, r4
 8015f24:	bf38      	it	cc
 8015f26:	2304      	movcc	r3, #4
 8015f28:	4443      	add	r3, r8
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	f843 2b04 	str.w	r2, [r3], #4
 8015f30:	429f      	cmp	r7, r3
 8015f32:	d2fb      	bcs.n	8015f2c <__hexnan+0xcc>
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	b91b      	cbnz	r3, 8015f40 <__hexnan+0xe0>
 8015f38:	4547      	cmp	r7, r8
 8015f3a:	d126      	bne.n	8015f8a <__hexnan+0x12a>
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	603b      	str	r3, [r7, #0]
 8015f40:	2005      	movs	r0, #5
 8015f42:	e025      	b.n	8015f90 <__hexnan+0x130>
 8015f44:	3501      	adds	r5, #1
 8015f46:	2d08      	cmp	r5, #8
 8015f48:	f10b 0b01 	add.w	fp, fp, #1
 8015f4c:	dd06      	ble.n	8015f5c <__hexnan+0xfc>
 8015f4e:	4544      	cmp	r4, r8
 8015f50:	d9c3      	bls.n	8015eda <__hexnan+0x7a>
 8015f52:	2300      	movs	r3, #0
 8015f54:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f58:	2501      	movs	r5, #1
 8015f5a:	3c04      	subs	r4, #4
 8015f5c:	6822      	ldr	r2, [r4, #0]
 8015f5e:	f000 000f 	and.w	r0, r0, #15
 8015f62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015f66:	6020      	str	r0, [r4, #0]
 8015f68:	e7b7      	b.n	8015eda <__hexnan+0x7a>
 8015f6a:	2508      	movs	r5, #8
 8015f6c:	e7b5      	b.n	8015eda <__hexnan+0x7a>
 8015f6e:	9b01      	ldr	r3, [sp, #4]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d0df      	beq.n	8015f34 <__hexnan+0xd4>
 8015f74:	f1c3 0320 	rsb	r3, r3, #32
 8015f78:	f04f 32ff 	mov.w	r2, #4294967295
 8015f7c:	40da      	lsrs	r2, r3
 8015f7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015f82:	4013      	ands	r3, r2
 8015f84:	f846 3c04 	str.w	r3, [r6, #-4]
 8015f88:	e7d4      	b.n	8015f34 <__hexnan+0xd4>
 8015f8a:	3f04      	subs	r7, #4
 8015f8c:	e7d2      	b.n	8015f34 <__hexnan+0xd4>
 8015f8e:	2004      	movs	r0, #4
 8015f90:	b007      	add	sp, #28
 8015f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f96 <__ascii_mbtowc>:
 8015f96:	b082      	sub	sp, #8
 8015f98:	b901      	cbnz	r1, 8015f9c <__ascii_mbtowc+0x6>
 8015f9a:	a901      	add	r1, sp, #4
 8015f9c:	b142      	cbz	r2, 8015fb0 <__ascii_mbtowc+0x1a>
 8015f9e:	b14b      	cbz	r3, 8015fb4 <__ascii_mbtowc+0x1e>
 8015fa0:	7813      	ldrb	r3, [r2, #0]
 8015fa2:	600b      	str	r3, [r1, #0]
 8015fa4:	7812      	ldrb	r2, [r2, #0]
 8015fa6:	1e10      	subs	r0, r2, #0
 8015fa8:	bf18      	it	ne
 8015faa:	2001      	movne	r0, #1
 8015fac:	b002      	add	sp, #8
 8015fae:	4770      	bx	lr
 8015fb0:	4610      	mov	r0, r2
 8015fb2:	e7fb      	b.n	8015fac <__ascii_mbtowc+0x16>
 8015fb4:	f06f 0001 	mvn.w	r0, #1
 8015fb8:	e7f8      	b.n	8015fac <__ascii_mbtowc+0x16>

08015fba <_realloc_r>:
 8015fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fbe:	4680      	mov	r8, r0
 8015fc0:	4614      	mov	r4, r2
 8015fc2:	460e      	mov	r6, r1
 8015fc4:	b921      	cbnz	r1, 8015fd0 <_realloc_r+0x16>
 8015fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015fca:	4611      	mov	r1, r2
 8015fcc:	f7fb bf28 	b.w	8011e20 <_malloc_r>
 8015fd0:	b92a      	cbnz	r2, 8015fde <_realloc_r+0x24>
 8015fd2:	f7fd fe8b 	bl	8013cec <_free_r>
 8015fd6:	4625      	mov	r5, r4
 8015fd8:	4628      	mov	r0, r5
 8015fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fde:	f000 f842 	bl	8016066 <_malloc_usable_size_r>
 8015fe2:	4284      	cmp	r4, r0
 8015fe4:	4607      	mov	r7, r0
 8015fe6:	d802      	bhi.n	8015fee <_realloc_r+0x34>
 8015fe8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015fec:	d812      	bhi.n	8016014 <_realloc_r+0x5a>
 8015fee:	4621      	mov	r1, r4
 8015ff0:	4640      	mov	r0, r8
 8015ff2:	f7fb ff15 	bl	8011e20 <_malloc_r>
 8015ff6:	4605      	mov	r5, r0
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d0ed      	beq.n	8015fd8 <_realloc_r+0x1e>
 8015ffc:	42bc      	cmp	r4, r7
 8015ffe:	4622      	mov	r2, r4
 8016000:	4631      	mov	r1, r6
 8016002:	bf28      	it	cs
 8016004:	463a      	movcs	r2, r7
 8016006:	f7fc ffe3 	bl	8012fd0 <memcpy>
 801600a:	4631      	mov	r1, r6
 801600c:	4640      	mov	r0, r8
 801600e:	f7fd fe6d 	bl	8013cec <_free_r>
 8016012:	e7e1      	b.n	8015fd8 <_realloc_r+0x1e>
 8016014:	4635      	mov	r5, r6
 8016016:	e7df      	b.n	8015fd8 <_realloc_r+0x1e>

08016018 <__ascii_wctomb>:
 8016018:	b149      	cbz	r1, 801602e <__ascii_wctomb+0x16>
 801601a:	2aff      	cmp	r2, #255	; 0xff
 801601c:	bf85      	ittet	hi
 801601e:	238a      	movhi	r3, #138	; 0x8a
 8016020:	6003      	strhi	r3, [r0, #0]
 8016022:	700a      	strbls	r2, [r1, #0]
 8016024:	f04f 30ff 	movhi.w	r0, #4294967295
 8016028:	bf98      	it	ls
 801602a:	2001      	movls	r0, #1
 801602c:	4770      	bx	lr
 801602e:	4608      	mov	r0, r1
 8016030:	4770      	bx	lr
	...

08016034 <fiprintf>:
 8016034:	b40e      	push	{r1, r2, r3}
 8016036:	b503      	push	{r0, r1, lr}
 8016038:	4601      	mov	r1, r0
 801603a:	ab03      	add	r3, sp, #12
 801603c:	4805      	ldr	r0, [pc, #20]	; (8016054 <fiprintf+0x20>)
 801603e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016042:	6800      	ldr	r0, [r0, #0]
 8016044:	9301      	str	r3, [sp, #4]
 8016046:	f000 f83f 	bl	80160c8 <_vfiprintf_r>
 801604a:	b002      	add	sp, #8
 801604c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016050:	b003      	add	sp, #12
 8016052:	4770      	bx	lr
 8016054:	20000164 	.word	0x20000164

08016058 <abort>:
 8016058:	b508      	push	{r3, lr}
 801605a:	2006      	movs	r0, #6
 801605c:	f000 fa0c 	bl	8016478 <raise>
 8016060:	2001      	movs	r0, #1
 8016062:	f7ed fc75 	bl	8003950 <_exit>

08016066 <_malloc_usable_size_r>:
 8016066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801606a:	1f18      	subs	r0, r3, #4
 801606c:	2b00      	cmp	r3, #0
 801606e:	bfbc      	itt	lt
 8016070:	580b      	ldrlt	r3, [r1, r0]
 8016072:	18c0      	addlt	r0, r0, r3
 8016074:	4770      	bx	lr

08016076 <__sfputc_r>:
 8016076:	6893      	ldr	r3, [r2, #8]
 8016078:	3b01      	subs	r3, #1
 801607a:	2b00      	cmp	r3, #0
 801607c:	b410      	push	{r4}
 801607e:	6093      	str	r3, [r2, #8]
 8016080:	da08      	bge.n	8016094 <__sfputc_r+0x1e>
 8016082:	6994      	ldr	r4, [r2, #24]
 8016084:	42a3      	cmp	r3, r4
 8016086:	db01      	blt.n	801608c <__sfputc_r+0x16>
 8016088:	290a      	cmp	r1, #10
 801608a:	d103      	bne.n	8016094 <__sfputc_r+0x1e>
 801608c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016090:	f000 b934 	b.w	80162fc <__swbuf_r>
 8016094:	6813      	ldr	r3, [r2, #0]
 8016096:	1c58      	adds	r0, r3, #1
 8016098:	6010      	str	r0, [r2, #0]
 801609a:	7019      	strb	r1, [r3, #0]
 801609c:	4608      	mov	r0, r1
 801609e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160a2:	4770      	bx	lr

080160a4 <__sfputs_r>:
 80160a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a6:	4606      	mov	r6, r0
 80160a8:	460f      	mov	r7, r1
 80160aa:	4614      	mov	r4, r2
 80160ac:	18d5      	adds	r5, r2, r3
 80160ae:	42ac      	cmp	r4, r5
 80160b0:	d101      	bne.n	80160b6 <__sfputs_r+0x12>
 80160b2:	2000      	movs	r0, #0
 80160b4:	e007      	b.n	80160c6 <__sfputs_r+0x22>
 80160b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160ba:	463a      	mov	r2, r7
 80160bc:	4630      	mov	r0, r6
 80160be:	f7ff ffda 	bl	8016076 <__sfputc_r>
 80160c2:	1c43      	adds	r3, r0, #1
 80160c4:	d1f3      	bne.n	80160ae <__sfputs_r+0xa>
 80160c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080160c8 <_vfiprintf_r>:
 80160c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160cc:	460d      	mov	r5, r1
 80160ce:	b09d      	sub	sp, #116	; 0x74
 80160d0:	4614      	mov	r4, r2
 80160d2:	4698      	mov	r8, r3
 80160d4:	4606      	mov	r6, r0
 80160d6:	b118      	cbz	r0, 80160e0 <_vfiprintf_r+0x18>
 80160d8:	6a03      	ldr	r3, [r0, #32]
 80160da:	b90b      	cbnz	r3, 80160e0 <_vfiprintf_r+0x18>
 80160dc:	f7fc fe1c 	bl	8012d18 <__sinit>
 80160e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160e2:	07d9      	lsls	r1, r3, #31
 80160e4:	d405      	bmi.n	80160f2 <_vfiprintf_r+0x2a>
 80160e6:	89ab      	ldrh	r3, [r5, #12]
 80160e8:	059a      	lsls	r2, r3, #22
 80160ea:	d402      	bmi.n	80160f2 <_vfiprintf_r+0x2a>
 80160ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160ee:	f7fc ff6d 	bl	8012fcc <__retarget_lock_acquire_recursive>
 80160f2:	89ab      	ldrh	r3, [r5, #12]
 80160f4:	071b      	lsls	r3, r3, #28
 80160f6:	d501      	bpl.n	80160fc <_vfiprintf_r+0x34>
 80160f8:	692b      	ldr	r3, [r5, #16]
 80160fa:	b99b      	cbnz	r3, 8016124 <_vfiprintf_r+0x5c>
 80160fc:	4629      	mov	r1, r5
 80160fe:	4630      	mov	r0, r6
 8016100:	f000 f93a 	bl	8016378 <__swsetup_r>
 8016104:	b170      	cbz	r0, 8016124 <_vfiprintf_r+0x5c>
 8016106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016108:	07dc      	lsls	r4, r3, #31
 801610a:	d504      	bpl.n	8016116 <_vfiprintf_r+0x4e>
 801610c:	f04f 30ff 	mov.w	r0, #4294967295
 8016110:	b01d      	add	sp, #116	; 0x74
 8016112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016116:	89ab      	ldrh	r3, [r5, #12]
 8016118:	0598      	lsls	r0, r3, #22
 801611a:	d4f7      	bmi.n	801610c <_vfiprintf_r+0x44>
 801611c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801611e:	f7fc ff56 	bl	8012fce <__retarget_lock_release_recursive>
 8016122:	e7f3      	b.n	801610c <_vfiprintf_r+0x44>
 8016124:	2300      	movs	r3, #0
 8016126:	9309      	str	r3, [sp, #36]	; 0x24
 8016128:	2320      	movs	r3, #32
 801612a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801612e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016132:	2330      	movs	r3, #48	; 0x30
 8016134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80162e8 <_vfiprintf_r+0x220>
 8016138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801613c:	f04f 0901 	mov.w	r9, #1
 8016140:	4623      	mov	r3, r4
 8016142:	469a      	mov	sl, r3
 8016144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016148:	b10a      	cbz	r2, 801614e <_vfiprintf_r+0x86>
 801614a:	2a25      	cmp	r2, #37	; 0x25
 801614c:	d1f9      	bne.n	8016142 <_vfiprintf_r+0x7a>
 801614e:	ebba 0b04 	subs.w	fp, sl, r4
 8016152:	d00b      	beq.n	801616c <_vfiprintf_r+0xa4>
 8016154:	465b      	mov	r3, fp
 8016156:	4622      	mov	r2, r4
 8016158:	4629      	mov	r1, r5
 801615a:	4630      	mov	r0, r6
 801615c:	f7ff ffa2 	bl	80160a4 <__sfputs_r>
 8016160:	3001      	adds	r0, #1
 8016162:	f000 80a9 	beq.w	80162b8 <_vfiprintf_r+0x1f0>
 8016166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016168:	445a      	add	r2, fp
 801616a:	9209      	str	r2, [sp, #36]	; 0x24
 801616c:	f89a 3000 	ldrb.w	r3, [sl]
 8016170:	2b00      	cmp	r3, #0
 8016172:	f000 80a1 	beq.w	80162b8 <_vfiprintf_r+0x1f0>
 8016176:	2300      	movs	r3, #0
 8016178:	f04f 32ff 	mov.w	r2, #4294967295
 801617c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016180:	f10a 0a01 	add.w	sl, sl, #1
 8016184:	9304      	str	r3, [sp, #16]
 8016186:	9307      	str	r3, [sp, #28]
 8016188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801618c:	931a      	str	r3, [sp, #104]	; 0x68
 801618e:	4654      	mov	r4, sl
 8016190:	2205      	movs	r2, #5
 8016192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016196:	4854      	ldr	r0, [pc, #336]	; (80162e8 <_vfiprintf_r+0x220>)
 8016198:	f7ea f81a 	bl	80001d0 <memchr>
 801619c:	9a04      	ldr	r2, [sp, #16]
 801619e:	b9d8      	cbnz	r0, 80161d8 <_vfiprintf_r+0x110>
 80161a0:	06d1      	lsls	r1, r2, #27
 80161a2:	bf44      	itt	mi
 80161a4:	2320      	movmi	r3, #32
 80161a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161aa:	0713      	lsls	r3, r2, #28
 80161ac:	bf44      	itt	mi
 80161ae:	232b      	movmi	r3, #43	; 0x2b
 80161b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161b4:	f89a 3000 	ldrb.w	r3, [sl]
 80161b8:	2b2a      	cmp	r3, #42	; 0x2a
 80161ba:	d015      	beq.n	80161e8 <_vfiprintf_r+0x120>
 80161bc:	9a07      	ldr	r2, [sp, #28]
 80161be:	4654      	mov	r4, sl
 80161c0:	2000      	movs	r0, #0
 80161c2:	f04f 0c0a 	mov.w	ip, #10
 80161c6:	4621      	mov	r1, r4
 80161c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161cc:	3b30      	subs	r3, #48	; 0x30
 80161ce:	2b09      	cmp	r3, #9
 80161d0:	d94d      	bls.n	801626e <_vfiprintf_r+0x1a6>
 80161d2:	b1b0      	cbz	r0, 8016202 <_vfiprintf_r+0x13a>
 80161d4:	9207      	str	r2, [sp, #28]
 80161d6:	e014      	b.n	8016202 <_vfiprintf_r+0x13a>
 80161d8:	eba0 0308 	sub.w	r3, r0, r8
 80161dc:	fa09 f303 	lsl.w	r3, r9, r3
 80161e0:	4313      	orrs	r3, r2
 80161e2:	9304      	str	r3, [sp, #16]
 80161e4:	46a2      	mov	sl, r4
 80161e6:	e7d2      	b.n	801618e <_vfiprintf_r+0xc6>
 80161e8:	9b03      	ldr	r3, [sp, #12]
 80161ea:	1d19      	adds	r1, r3, #4
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	9103      	str	r1, [sp, #12]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	bfbb      	ittet	lt
 80161f4:	425b      	neglt	r3, r3
 80161f6:	f042 0202 	orrlt.w	r2, r2, #2
 80161fa:	9307      	strge	r3, [sp, #28]
 80161fc:	9307      	strlt	r3, [sp, #28]
 80161fe:	bfb8      	it	lt
 8016200:	9204      	strlt	r2, [sp, #16]
 8016202:	7823      	ldrb	r3, [r4, #0]
 8016204:	2b2e      	cmp	r3, #46	; 0x2e
 8016206:	d10c      	bne.n	8016222 <_vfiprintf_r+0x15a>
 8016208:	7863      	ldrb	r3, [r4, #1]
 801620a:	2b2a      	cmp	r3, #42	; 0x2a
 801620c:	d134      	bne.n	8016278 <_vfiprintf_r+0x1b0>
 801620e:	9b03      	ldr	r3, [sp, #12]
 8016210:	1d1a      	adds	r2, r3, #4
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	9203      	str	r2, [sp, #12]
 8016216:	2b00      	cmp	r3, #0
 8016218:	bfb8      	it	lt
 801621a:	f04f 33ff 	movlt.w	r3, #4294967295
 801621e:	3402      	adds	r4, #2
 8016220:	9305      	str	r3, [sp, #20]
 8016222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80162f8 <_vfiprintf_r+0x230>
 8016226:	7821      	ldrb	r1, [r4, #0]
 8016228:	2203      	movs	r2, #3
 801622a:	4650      	mov	r0, sl
 801622c:	f7e9 ffd0 	bl	80001d0 <memchr>
 8016230:	b138      	cbz	r0, 8016242 <_vfiprintf_r+0x17a>
 8016232:	9b04      	ldr	r3, [sp, #16]
 8016234:	eba0 000a 	sub.w	r0, r0, sl
 8016238:	2240      	movs	r2, #64	; 0x40
 801623a:	4082      	lsls	r2, r0
 801623c:	4313      	orrs	r3, r2
 801623e:	3401      	adds	r4, #1
 8016240:	9304      	str	r3, [sp, #16]
 8016242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016246:	4829      	ldr	r0, [pc, #164]	; (80162ec <_vfiprintf_r+0x224>)
 8016248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801624c:	2206      	movs	r2, #6
 801624e:	f7e9 ffbf 	bl	80001d0 <memchr>
 8016252:	2800      	cmp	r0, #0
 8016254:	d03f      	beq.n	80162d6 <_vfiprintf_r+0x20e>
 8016256:	4b26      	ldr	r3, [pc, #152]	; (80162f0 <_vfiprintf_r+0x228>)
 8016258:	bb1b      	cbnz	r3, 80162a2 <_vfiprintf_r+0x1da>
 801625a:	9b03      	ldr	r3, [sp, #12]
 801625c:	3307      	adds	r3, #7
 801625e:	f023 0307 	bic.w	r3, r3, #7
 8016262:	3308      	adds	r3, #8
 8016264:	9303      	str	r3, [sp, #12]
 8016266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016268:	443b      	add	r3, r7
 801626a:	9309      	str	r3, [sp, #36]	; 0x24
 801626c:	e768      	b.n	8016140 <_vfiprintf_r+0x78>
 801626e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016272:	460c      	mov	r4, r1
 8016274:	2001      	movs	r0, #1
 8016276:	e7a6      	b.n	80161c6 <_vfiprintf_r+0xfe>
 8016278:	2300      	movs	r3, #0
 801627a:	3401      	adds	r4, #1
 801627c:	9305      	str	r3, [sp, #20]
 801627e:	4619      	mov	r1, r3
 8016280:	f04f 0c0a 	mov.w	ip, #10
 8016284:	4620      	mov	r0, r4
 8016286:	f810 2b01 	ldrb.w	r2, [r0], #1
 801628a:	3a30      	subs	r2, #48	; 0x30
 801628c:	2a09      	cmp	r2, #9
 801628e:	d903      	bls.n	8016298 <_vfiprintf_r+0x1d0>
 8016290:	2b00      	cmp	r3, #0
 8016292:	d0c6      	beq.n	8016222 <_vfiprintf_r+0x15a>
 8016294:	9105      	str	r1, [sp, #20]
 8016296:	e7c4      	b.n	8016222 <_vfiprintf_r+0x15a>
 8016298:	fb0c 2101 	mla	r1, ip, r1, r2
 801629c:	4604      	mov	r4, r0
 801629e:	2301      	movs	r3, #1
 80162a0:	e7f0      	b.n	8016284 <_vfiprintf_r+0x1bc>
 80162a2:	ab03      	add	r3, sp, #12
 80162a4:	9300      	str	r3, [sp, #0]
 80162a6:	462a      	mov	r2, r5
 80162a8:	4b12      	ldr	r3, [pc, #72]	; (80162f4 <_vfiprintf_r+0x22c>)
 80162aa:	a904      	add	r1, sp, #16
 80162ac:	4630      	mov	r0, r6
 80162ae:	f7fb fee3 	bl	8012078 <_printf_float>
 80162b2:	4607      	mov	r7, r0
 80162b4:	1c78      	adds	r0, r7, #1
 80162b6:	d1d6      	bne.n	8016266 <_vfiprintf_r+0x19e>
 80162b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162ba:	07d9      	lsls	r1, r3, #31
 80162bc:	d405      	bmi.n	80162ca <_vfiprintf_r+0x202>
 80162be:	89ab      	ldrh	r3, [r5, #12]
 80162c0:	059a      	lsls	r2, r3, #22
 80162c2:	d402      	bmi.n	80162ca <_vfiprintf_r+0x202>
 80162c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162c6:	f7fc fe82 	bl	8012fce <__retarget_lock_release_recursive>
 80162ca:	89ab      	ldrh	r3, [r5, #12]
 80162cc:	065b      	lsls	r3, r3, #25
 80162ce:	f53f af1d 	bmi.w	801610c <_vfiprintf_r+0x44>
 80162d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162d4:	e71c      	b.n	8016110 <_vfiprintf_r+0x48>
 80162d6:	ab03      	add	r3, sp, #12
 80162d8:	9300      	str	r3, [sp, #0]
 80162da:	462a      	mov	r2, r5
 80162dc:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <_vfiprintf_r+0x22c>)
 80162de:	a904      	add	r1, sp, #16
 80162e0:	4630      	mov	r0, r6
 80162e2:	f7fc f96d 	bl	80125c0 <_printf_i>
 80162e6:	e7e4      	b.n	80162b2 <_vfiprintf_r+0x1ea>
 80162e8:	08016d01 	.word	0x08016d01
 80162ec:	08016d0b 	.word	0x08016d0b
 80162f0:	08012079 	.word	0x08012079
 80162f4:	080160a5 	.word	0x080160a5
 80162f8:	08016d07 	.word	0x08016d07

080162fc <__swbuf_r>:
 80162fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162fe:	460e      	mov	r6, r1
 8016300:	4614      	mov	r4, r2
 8016302:	4605      	mov	r5, r0
 8016304:	b118      	cbz	r0, 801630e <__swbuf_r+0x12>
 8016306:	6a03      	ldr	r3, [r0, #32]
 8016308:	b90b      	cbnz	r3, 801630e <__swbuf_r+0x12>
 801630a:	f7fc fd05 	bl	8012d18 <__sinit>
 801630e:	69a3      	ldr	r3, [r4, #24]
 8016310:	60a3      	str	r3, [r4, #8]
 8016312:	89a3      	ldrh	r3, [r4, #12]
 8016314:	071a      	lsls	r2, r3, #28
 8016316:	d525      	bpl.n	8016364 <__swbuf_r+0x68>
 8016318:	6923      	ldr	r3, [r4, #16]
 801631a:	b31b      	cbz	r3, 8016364 <__swbuf_r+0x68>
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	6922      	ldr	r2, [r4, #16]
 8016320:	1a98      	subs	r0, r3, r2
 8016322:	6963      	ldr	r3, [r4, #20]
 8016324:	b2f6      	uxtb	r6, r6
 8016326:	4283      	cmp	r3, r0
 8016328:	4637      	mov	r7, r6
 801632a:	dc04      	bgt.n	8016336 <__swbuf_r+0x3a>
 801632c:	4621      	mov	r1, r4
 801632e:	4628      	mov	r0, r5
 8016330:	f7ff fa4a 	bl	80157c8 <_fflush_r>
 8016334:	b9e0      	cbnz	r0, 8016370 <__swbuf_r+0x74>
 8016336:	68a3      	ldr	r3, [r4, #8]
 8016338:	3b01      	subs	r3, #1
 801633a:	60a3      	str	r3, [r4, #8]
 801633c:	6823      	ldr	r3, [r4, #0]
 801633e:	1c5a      	adds	r2, r3, #1
 8016340:	6022      	str	r2, [r4, #0]
 8016342:	701e      	strb	r6, [r3, #0]
 8016344:	6962      	ldr	r2, [r4, #20]
 8016346:	1c43      	adds	r3, r0, #1
 8016348:	429a      	cmp	r2, r3
 801634a:	d004      	beq.n	8016356 <__swbuf_r+0x5a>
 801634c:	89a3      	ldrh	r3, [r4, #12]
 801634e:	07db      	lsls	r3, r3, #31
 8016350:	d506      	bpl.n	8016360 <__swbuf_r+0x64>
 8016352:	2e0a      	cmp	r6, #10
 8016354:	d104      	bne.n	8016360 <__swbuf_r+0x64>
 8016356:	4621      	mov	r1, r4
 8016358:	4628      	mov	r0, r5
 801635a:	f7ff fa35 	bl	80157c8 <_fflush_r>
 801635e:	b938      	cbnz	r0, 8016370 <__swbuf_r+0x74>
 8016360:	4638      	mov	r0, r7
 8016362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016364:	4621      	mov	r1, r4
 8016366:	4628      	mov	r0, r5
 8016368:	f000 f806 	bl	8016378 <__swsetup_r>
 801636c:	2800      	cmp	r0, #0
 801636e:	d0d5      	beq.n	801631c <__swbuf_r+0x20>
 8016370:	f04f 37ff 	mov.w	r7, #4294967295
 8016374:	e7f4      	b.n	8016360 <__swbuf_r+0x64>
	...

08016378 <__swsetup_r>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	4b2a      	ldr	r3, [pc, #168]	; (8016424 <__swsetup_r+0xac>)
 801637c:	4605      	mov	r5, r0
 801637e:	6818      	ldr	r0, [r3, #0]
 8016380:	460c      	mov	r4, r1
 8016382:	b118      	cbz	r0, 801638c <__swsetup_r+0x14>
 8016384:	6a03      	ldr	r3, [r0, #32]
 8016386:	b90b      	cbnz	r3, 801638c <__swsetup_r+0x14>
 8016388:	f7fc fcc6 	bl	8012d18 <__sinit>
 801638c:	89a3      	ldrh	r3, [r4, #12]
 801638e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016392:	0718      	lsls	r0, r3, #28
 8016394:	d422      	bmi.n	80163dc <__swsetup_r+0x64>
 8016396:	06d9      	lsls	r1, r3, #27
 8016398:	d407      	bmi.n	80163aa <__swsetup_r+0x32>
 801639a:	2309      	movs	r3, #9
 801639c:	602b      	str	r3, [r5, #0]
 801639e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80163a2:	81a3      	strh	r3, [r4, #12]
 80163a4:	f04f 30ff 	mov.w	r0, #4294967295
 80163a8:	e034      	b.n	8016414 <__swsetup_r+0x9c>
 80163aa:	0758      	lsls	r0, r3, #29
 80163ac:	d512      	bpl.n	80163d4 <__swsetup_r+0x5c>
 80163ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163b0:	b141      	cbz	r1, 80163c4 <__swsetup_r+0x4c>
 80163b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163b6:	4299      	cmp	r1, r3
 80163b8:	d002      	beq.n	80163c0 <__swsetup_r+0x48>
 80163ba:	4628      	mov	r0, r5
 80163bc:	f7fd fc96 	bl	8013cec <_free_r>
 80163c0:	2300      	movs	r3, #0
 80163c2:	6363      	str	r3, [r4, #52]	; 0x34
 80163c4:	89a3      	ldrh	r3, [r4, #12]
 80163c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80163ca:	81a3      	strh	r3, [r4, #12]
 80163cc:	2300      	movs	r3, #0
 80163ce:	6063      	str	r3, [r4, #4]
 80163d0:	6923      	ldr	r3, [r4, #16]
 80163d2:	6023      	str	r3, [r4, #0]
 80163d4:	89a3      	ldrh	r3, [r4, #12]
 80163d6:	f043 0308 	orr.w	r3, r3, #8
 80163da:	81a3      	strh	r3, [r4, #12]
 80163dc:	6923      	ldr	r3, [r4, #16]
 80163de:	b94b      	cbnz	r3, 80163f4 <__swsetup_r+0x7c>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80163e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163ea:	d003      	beq.n	80163f4 <__swsetup_r+0x7c>
 80163ec:	4621      	mov	r1, r4
 80163ee:	4628      	mov	r0, r5
 80163f0:	f000 f884 	bl	80164fc <__smakebuf_r>
 80163f4:	89a0      	ldrh	r0, [r4, #12]
 80163f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80163fa:	f010 0301 	ands.w	r3, r0, #1
 80163fe:	d00a      	beq.n	8016416 <__swsetup_r+0x9e>
 8016400:	2300      	movs	r3, #0
 8016402:	60a3      	str	r3, [r4, #8]
 8016404:	6963      	ldr	r3, [r4, #20]
 8016406:	425b      	negs	r3, r3
 8016408:	61a3      	str	r3, [r4, #24]
 801640a:	6923      	ldr	r3, [r4, #16]
 801640c:	b943      	cbnz	r3, 8016420 <__swsetup_r+0xa8>
 801640e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016412:	d1c4      	bne.n	801639e <__swsetup_r+0x26>
 8016414:	bd38      	pop	{r3, r4, r5, pc}
 8016416:	0781      	lsls	r1, r0, #30
 8016418:	bf58      	it	pl
 801641a:	6963      	ldrpl	r3, [r4, #20]
 801641c:	60a3      	str	r3, [r4, #8]
 801641e:	e7f4      	b.n	801640a <__swsetup_r+0x92>
 8016420:	2000      	movs	r0, #0
 8016422:	e7f7      	b.n	8016414 <__swsetup_r+0x9c>
 8016424:	20000164 	.word	0x20000164

08016428 <_raise_r>:
 8016428:	291f      	cmp	r1, #31
 801642a:	b538      	push	{r3, r4, r5, lr}
 801642c:	4604      	mov	r4, r0
 801642e:	460d      	mov	r5, r1
 8016430:	d904      	bls.n	801643c <_raise_r+0x14>
 8016432:	2316      	movs	r3, #22
 8016434:	6003      	str	r3, [r0, #0]
 8016436:	f04f 30ff 	mov.w	r0, #4294967295
 801643a:	bd38      	pop	{r3, r4, r5, pc}
 801643c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801643e:	b112      	cbz	r2, 8016446 <_raise_r+0x1e>
 8016440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016444:	b94b      	cbnz	r3, 801645a <_raise_r+0x32>
 8016446:	4620      	mov	r0, r4
 8016448:	f000 f830 	bl	80164ac <_getpid_r>
 801644c:	462a      	mov	r2, r5
 801644e:	4601      	mov	r1, r0
 8016450:	4620      	mov	r0, r4
 8016452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016456:	f000 b817 	b.w	8016488 <_kill_r>
 801645a:	2b01      	cmp	r3, #1
 801645c:	d00a      	beq.n	8016474 <_raise_r+0x4c>
 801645e:	1c59      	adds	r1, r3, #1
 8016460:	d103      	bne.n	801646a <_raise_r+0x42>
 8016462:	2316      	movs	r3, #22
 8016464:	6003      	str	r3, [r0, #0]
 8016466:	2001      	movs	r0, #1
 8016468:	e7e7      	b.n	801643a <_raise_r+0x12>
 801646a:	2400      	movs	r4, #0
 801646c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016470:	4628      	mov	r0, r5
 8016472:	4798      	blx	r3
 8016474:	2000      	movs	r0, #0
 8016476:	e7e0      	b.n	801643a <_raise_r+0x12>

08016478 <raise>:
 8016478:	4b02      	ldr	r3, [pc, #8]	; (8016484 <raise+0xc>)
 801647a:	4601      	mov	r1, r0
 801647c:	6818      	ldr	r0, [r3, #0]
 801647e:	f7ff bfd3 	b.w	8016428 <_raise_r>
 8016482:	bf00      	nop
 8016484:	20000164 	.word	0x20000164

08016488 <_kill_r>:
 8016488:	b538      	push	{r3, r4, r5, lr}
 801648a:	4d07      	ldr	r5, [pc, #28]	; (80164a8 <_kill_r+0x20>)
 801648c:	2300      	movs	r3, #0
 801648e:	4604      	mov	r4, r0
 8016490:	4608      	mov	r0, r1
 8016492:	4611      	mov	r1, r2
 8016494:	602b      	str	r3, [r5, #0]
 8016496:	f7ed fa4b 	bl	8003930 <_kill>
 801649a:	1c43      	adds	r3, r0, #1
 801649c:	d102      	bne.n	80164a4 <_kill_r+0x1c>
 801649e:	682b      	ldr	r3, [r5, #0]
 80164a0:	b103      	cbz	r3, 80164a4 <_kill_r+0x1c>
 80164a2:	6023      	str	r3, [r4, #0]
 80164a4:	bd38      	pop	{r3, r4, r5, pc}
 80164a6:	bf00      	nop
 80164a8:	200120b8 	.word	0x200120b8

080164ac <_getpid_r>:
 80164ac:	f7ed ba38 	b.w	8003920 <_getpid>

080164b0 <__swhatbuf_r>:
 80164b0:	b570      	push	{r4, r5, r6, lr}
 80164b2:	460c      	mov	r4, r1
 80164b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164b8:	2900      	cmp	r1, #0
 80164ba:	b096      	sub	sp, #88	; 0x58
 80164bc:	4615      	mov	r5, r2
 80164be:	461e      	mov	r6, r3
 80164c0:	da0d      	bge.n	80164de <__swhatbuf_r+0x2e>
 80164c2:	89a3      	ldrh	r3, [r4, #12]
 80164c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80164c8:	f04f 0100 	mov.w	r1, #0
 80164cc:	bf0c      	ite	eq
 80164ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80164d2:	2340      	movne	r3, #64	; 0x40
 80164d4:	2000      	movs	r0, #0
 80164d6:	6031      	str	r1, [r6, #0]
 80164d8:	602b      	str	r3, [r5, #0]
 80164da:	b016      	add	sp, #88	; 0x58
 80164dc:	bd70      	pop	{r4, r5, r6, pc}
 80164de:	466a      	mov	r2, sp
 80164e0:	f000 f848 	bl	8016574 <_fstat_r>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	dbec      	blt.n	80164c2 <__swhatbuf_r+0x12>
 80164e8:	9901      	ldr	r1, [sp, #4]
 80164ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80164ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80164f2:	4259      	negs	r1, r3
 80164f4:	4159      	adcs	r1, r3
 80164f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164fa:	e7eb      	b.n	80164d4 <__swhatbuf_r+0x24>

080164fc <__smakebuf_r>:
 80164fc:	898b      	ldrh	r3, [r1, #12]
 80164fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016500:	079d      	lsls	r5, r3, #30
 8016502:	4606      	mov	r6, r0
 8016504:	460c      	mov	r4, r1
 8016506:	d507      	bpl.n	8016518 <__smakebuf_r+0x1c>
 8016508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801650c:	6023      	str	r3, [r4, #0]
 801650e:	6123      	str	r3, [r4, #16]
 8016510:	2301      	movs	r3, #1
 8016512:	6163      	str	r3, [r4, #20]
 8016514:	b002      	add	sp, #8
 8016516:	bd70      	pop	{r4, r5, r6, pc}
 8016518:	ab01      	add	r3, sp, #4
 801651a:	466a      	mov	r2, sp
 801651c:	f7ff ffc8 	bl	80164b0 <__swhatbuf_r>
 8016520:	9900      	ldr	r1, [sp, #0]
 8016522:	4605      	mov	r5, r0
 8016524:	4630      	mov	r0, r6
 8016526:	f7fb fc7b 	bl	8011e20 <_malloc_r>
 801652a:	b948      	cbnz	r0, 8016540 <__smakebuf_r+0x44>
 801652c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016530:	059a      	lsls	r2, r3, #22
 8016532:	d4ef      	bmi.n	8016514 <__smakebuf_r+0x18>
 8016534:	f023 0303 	bic.w	r3, r3, #3
 8016538:	f043 0302 	orr.w	r3, r3, #2
 801653c:	81a3      	strh	r3, [r4, #12]
 801653e:	e7e3      	b.n	8016508 <__smakebuf_r+0xc>
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	6020      	str	r0, [r4, #0]
 8016544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016548:	81a3      	strh	r3, [r4, #12]
 801654a:	9b00      	ldr	r3, [sp, #0]
 801654c:	6163      	str	r3, [r4, #20]
 801654e:	9b01      	ldr	r3, [sp, #4]
 8016550:	6120      	str	r0, [r4, #16]
 8016552:	b15b      	cbz	r3, 801656c <__smakebuf_r+0x70>
 8016554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016558:	4630      	mov	r0, r6
 801655a:	f000 f81d 	bl	8016598 <_isatty_r>
 801655e:	b128      	cbz	r0, 801656c <__smakebuf_r+0x70>
 8016560:	89a3      	ldrh	r3, [r4, #12]
 8016562:	f023 0303 	bic.w	r3, r3, #3
 8016566:	f043 0301 	orr.w	r3, r3, #1
 801656a:	81a3      	strh	r3, [r4, #12]
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	431d      	orrs	r5, r3
 8016570:	81a5      	strh	r5, [r4, #12]
 8016572:	e7cf      	b.n	8016514 <__smakebuf_r+0x18>

08016574 <_fstat_r>:
 8016574:	b538      	push	{r3, r4, r5, lr}
 8016576:	4d07      	ldr	r5, [pc, #28]	; (8016594 <_fstat_r+0x20>)
 8016578:	2300      	movs	r3, #0
 801657a:	4604      	mov	r4, r0
 801657c:	4608      	mov	r0, r1
 801657e:	4611      	mov	r1, r2
 8016580:	602b      	str	r3, [r5, #0]
 8016582:	f7ed fa34 	bl	80039ee <_fstat>
 8016586:	1c43      	adds	r3, r0, #1
 8016588:	d102      	bne.n	8016590 <_fstat_r+0x1c>
 801658a:	682b      	ldr	r3, [r5, #0]
 801658c:	b103      	cbz	r3, 8016590 <_fstat_r+0x1c>
 801658e:	6023      	str	r3, [r4, #0]
 8016590:	bd38      	pop	{r3, r4, r5, pc}
 8016592:	bf00      	nop
 8016594:	200120b8 	.word	0x200120b8

08016598 <_isatty_r>:
 8016598:	b538      	push	{r3, r4, r5, lr}
 801659a:	4d06      	ldr	r5, [pc, #24]	; (80165b4 <_isatty_r+0x1c>)
 801659c:	2300      	movs	r3, #0
 801659e:	4604      	mov	r4, r0
 80165a0:	4608      	mov	r0, r1
 80165a2:	602b      	str	r3, [r5, #0]
 80165a4:	f7ed fa33 	bl	8003a0e <_isatty>
 80165a8:	1c43      	adds	r3, r0, #1
 80165aa:	d102      	bne.n	80165b2 <_isatty_r+0x1a>
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	b103      	cbz	r3, 80165b2 <_isatty_r+0x1a>
 80165b0:	6023      	str	r3, [r4, #0]
 80165b2:	bd38      	pop	{r3, r4, r5, pc}
 80165b4:	200120b8 	.word	0x200120b8

080165b8 <_init>:
 80165b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ba:	bf00      	nop
 80165bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165be:	bc08      	pop	{r3}
 80165c0:	469e      	mov	lr, r3
 80165c2:	4770      	bx	lr

080165c4 <_fini>:
 80165c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165c6:	bf00      	nop
 80165c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165ca:	bc08      	pop	{r3}
 80165cc:	469e      	mov	lr, r3
 80165ce:	4770      	bx	lr
