
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08015610  08015610  00025610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c50  08015c50  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08015c50  08015c50  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015c50  08015c50  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c50  08015c50  00025c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c54  08015c54  00025c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08015c58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c228  200002d4  08015f2c  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000c4fc  08015f2c  0003c4fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ffb8  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005495  00000000  00000000  000502ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00055798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000144f  00000000  00000000  00057290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ea6a  00000000  00000000  000586df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d15  00000000  00000000  00087149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fafc1  00000000  00000000  000ace5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008378  00000000  00000000  001a7e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b0198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080155f8 	.word	0x080155f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	080155f8 	.word	0x080155f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f002 fa29 	bl	8003170 <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f002 f8f7 	bl	8002f40 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f002 f9f5 	bl	8003170 <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f002 f9d7 	bl	8003170 <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f002 f8a5 	bl	8002f40 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
//	else if (GPIO_Pin == IMU_INT_Pin){
//
//		LSM6DSO_FIFO_RDY = 1;
//
//	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f001 fa36 	bl	800228e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f8d7 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fa05 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 f9e5 	bl	80011f8 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e2e:	f000 f923 	bl	8001078 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e32:	f000 f9bd 	bl	80011b0 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e36:	f00f f975 	bl	8010124 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e3a:	f000 f95d 	bl	80010f8 <MX_RTC_Init>
  MX_FATFS_Init();
 8000e3e:	f009 feb1 	bl	800aba4 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  int attempts = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	494e      	ldr	r1, [pc, #312]	; (8000f84 <main+0x16c>)
 8000e4a:	484f      	ldr	r0, [pc, #316]	; (8000f88 <main+0x170>)
 8000e4c:	f00d fe2a 	bl	800eaa4 <f_mount>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <main+0x174>)
 8000e56:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e58:	e008      	b.n	8000e6c <main+0x54>
	  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4949      	ldr	r1, [pc, #292]	; (8000f84 <main+0x16c>)
 8000e5e:	484a      	ldr	r0, [pc, #296]	; (8000f88 <main+0x170>)
 8000e60:	f00d fe20 	bl	800eaa4 <f_mount>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <main+0x174>)
 8000e6a:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <main+0x174>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <main+0x62>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	ddef      	ble.n	8000e5a <main+0x42>
  }

 HAL_Delay(500);
 8000e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7e:	f001 fa7b 	bl	8002378 <HAL_Delay>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <main+0x178>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	483d      	ldr	r0, [pc, #244]	; (8000f84 <main+0x16c>)
 8000e90:	f00e fa2a 	bl	800f2e8 <f_mkfs>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <main+0x17c>)
 8000e9a:	701a      	strb	r2, [r3, #0]
  if ( volMakeStatus != FR_OK){
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <main+0x17c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <main+0x90>
	  Error_Handler();
 8000ea4:	f000 fa40 	bl	8001328 <Error_Handler>
  }
  HAL_Delay(500);
 8000ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eac:	f001 fa64 	bl	8002378 <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	4939      	ldr	r1, [pc, #228]	; (8000f98 <main+0x180>)
 8000eb4:	4839      	ldr	r0, [pc, #228]	; (8000f9c <main+0x184>)
 8000eb6:	f00d fe3b 	bl	800eb30 <f_open>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <main+0x188>)
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <main+0x188>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <main+0xb6>
	  Error_Handler();
 8000eca:	f000 fa2d 	bl	8001328 <Error_Handler>
  }

  f_printf(&SDFile,"TimeStamp,XL_X,XL_Y,XL_Z,GYR_X,GYR_Y,GYR_Z,MAG_X,MAG_Y,MAG_Z\n");
 8000ece:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <main+0x18c>)
 8000ed0:	4832      	ldr	r0, [pc, #200]	; (8000f9c <main+0x184>)
 8000ed2:	f00e fead 	bl	800fc30 <f_printf>

  //f_sync( &SDFile );
  f_close(&SDFile);
 8000ed6:	4831      	ldr	r0, [pc, #196]	; (8000f9c <main+0x184>)
 8000ed8:	f00e f9db 	bl	800f292 <f_close>
  f_open(&SDFile, "Out.csv", FA_OPEN_APPEND | FA_WRITE);
 8000edc:	2232      	movs	r2, #50	; 0x32
 8000ede:	492e      	ldr	r1, [pc, #184]	; (8000f98 <main+0x180>)
 8000ee0:	482e      	ldr	r0, [pc, #184]	; (8000f9c <main+0x184>)
 8000ee2:	f00d fe25 	bl	800eb30 <f_open>

  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */

  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000ee6:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <main+0x190>)
 8000ee8:	f000 fa23 	bl	8001332 <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <main+0x194>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <main+0x198>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <main+0xe6>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000efa:	f003 ffbd 	bl	8004e78 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

	  pawprint_readFIFO(&hi2c3, (char *) buffer, &writeIndex, &maxoutLength, &tag_counter, &FIFOout); // Combine some features input here into structs for simplicity
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <main+0x19c>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <main+0x1a0>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <main+0x1a4>)
 8000f08:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <main+0x1a8>)
 8000f0a:	492e      	ldr	r1, [pc, #184]	; (8000fc4 <main+0x1ac>)
 8000f0c:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <main+0x190>)
 8000f0e:	f000 fc03 	bl	8001718 <pawprint_readFIFO>

	  // Check buffer fill
	  if (writeIndex >= 32768){
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <main+0x1a8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f1a:	dbea      	blt.n	8000ef2 <main+0xda>
		 // memset(writeBuff, '\0', (size_t) 32000);
		//  memcpy(writeBuff, (char *)&buffer, (size_t) 32000);

		 // f_write(&SDFile, writeBuff, (size_t) 32000, &byteCount);

		  f_write(&SDFile, (char *)&buffer, (size_t) 32768, &byteCount);
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <main+0x1b0>)
 8000f1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f22:	4928      	ldr	r1, [pc, #160]	; (8000fc4 <main+0x1ac>)
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <main+0x184>)
 8000f26:	f00d ffc1 	bl	800eeac <f_write>
		  // Copy end of buffer to beginning and clear
		  //memcpy(tempBuff,(char *) &buffer[32000],(size_t) 8000);
		  //memset((char *) &buffer[0], '\0', sizeof(buffer));
		  //memcpy((char *) &buffer, tempBuff,(size_t) 8000);
		  //memset(&tempBuff[0], '\0', sizeof(tempBuff));
		  size_t overBuff = strlen((char *) &buffer[32768]);
 8000f2a:	4828      	ldr	r0, [pc, #160]	; (8000fcc <main+0x1b4>)
 8000f2c:	f7ff f9a0 	bl	8000270 <strlen>
 8000f30:	6038      	str	r0, [r7, #0]
		  memcpy((char *) &buffer[0],(char *) &buffer[32768], overBuff);
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4925      	ldr	r1, [pc, #148]	; (8000fcc <main+0x1b4>)
 8000f36:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <main+0x1ac>)
 8000f38:	f010 ff6e 	bl	8011e18 <memcpy>
		  memset((char *) &buffer[overBuff], '\0', sizeof(buffer)-overBuff);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <main+0x1ac>)
 8000f40:	1898      	adds	r0, r3, r2
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 8000f48:	3340      	adds	r3, #64	; 0x40
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f010 fee4 	bl	8011d1a <memset>
		  // Set writeIndex to remainder length
		  writeIndex -= byteCount;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <main+0x1a8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <main+0x1b0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <main+0x1a8>)
 8000f62:	601a      	str	r2, [r3, #0]
		  writeNum++;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <main+0x1b8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <main+0x1b8>)
 8000f6c:	6013      	str	r3, [r2, #0]

		  // fsync every ~8MB to ensure SD buffer is being written
		  if( writeNum >= 3){
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <main+0x1b8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d9bd      	bls.n	8000ef2 <main+0xda>

			  //f_close(&SDFile);
			  //f_open(&SDFile, "Out.csv", FA_OPEN_APPEND | FA_WRITE);

			 f_sync(&SDFile);
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <main+0x184>)
 8000f78:	f00e f90d 	bl	800f196 <f_sync>


			 writeNum = 0;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <main+0x1b8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
	  if ( OVERTEMP == 1){
 8000f82:	e7b6      	b.n	8000ef2 <main+0xda>
 8000f84:	2000a304 	.word	0x2000a304
 8000f88:	2000a308 	.word	0x2000a308
 8000f8c:	2000a0b4 	.word	0x2000a0b4
 8000f90:	2000a0b8 	.word	0x2000a0b8
 8000f94:	2000a0b5 	.word	0x2000a0b5
 8000f98:	08015610 	.word	0x08015610
 8000f9c:	2000a538 	.word	0x2000a538
 8000fa0:	2000a0b6 	.word	0x2000a0b6
 8000fa4:	08015618 	.word	0x08015618
 8000fa8:	200002f0 	.word	0x200002f0
 8000fac:	20000434 	.word	0x20000434
 8000fb0:	20000435 	.word	0x20000435
 8000fb4:	2000a084 	.word	0x2000a084
 8000fb8:	2000a080 	.word	0x2000a080
 8000fbc:	2000a07c 	.word	0x2000a07c
 8000fc0:	2000a078 	.word	0x2000a078
 8000fc4:	20000438 	.word	0x20000438
 8000fc8:	2000a0ac 	.word	0x2000a0ac
 8000fcc:	20008438 	.word	0x20008438
 8000fd0:	2000a0b0 	.word	0x2000a0b0

08000fd4 <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b096      	sub	sp, #88	; 0x58
 8000fd8:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2244      	movs	r2, #68	; 0x44
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f010 fe99 	bl	8011d1a <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ff6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ffa:	f003 fed7 	bl	8004dac <HAL_PWREx_ControlVoltageScaling>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x34>
	  {
	    Error_Handler();
 8001004:	f000 f990 	bl	8001328 <Error_Handler>
	  }

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001008:	2309      	movs	r3, #9
 800100a:	617b      	str	r3, [r7, #20]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	2303      	movs	r3, #3
 800101c:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 8;
 8001022:	2308      	movs	r3, #8
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4618      	mov	r0, r3
 8001038:	f003 ff38 	bl	8004eac <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x72>
	  {
	    Error_Handler();
 8001042:	f000 f971 	bl	8001328 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	603b      	str	r3, [r7, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2303      	movs	r3, #3
 800104c:	607b      	str	r3, [r7, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2102      	movs	r1, #2
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fb00 	bl	8005664 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 800106a:	f000 f95d 	bl	8001328 <Error_Handler>
	  }
	}
 800106e:	bf00      	nop
 8001070:	3758      	adds	r7, #88	; 0x58
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MX_I2C3_Init>:
	  * @brief I2C3 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_I2C3_Init(void)
	{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C3_Init 0 */

	  /* USER CODE BEGIN I2C3_Init 1 */

	  /* USER CODE END I2C3_Init 1 */
	  hi2c3.Instance = I2C3;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_I2C3_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_I2C3_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
	  hi2c3.Init.Timing = 0x20303E5D;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_I2C3_Init+0x74>)
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <MX_I2C3_Init+0x7c>)
 8001086:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_I2C3_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_I2C3_Init+0x74>)
 8001090:	2201      	movs	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_I2C3_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_I2C3_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C3_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C3_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C3_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <MX_I2C3_Init+0x74>)
 80010b4:	f001 fea8 	bl	8002e08 <HAL_I2C_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C3_Init+0x4a>
	  {
	    Error_Handler();
 80010be:	f000 f933 	bl	8001328 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_I2C3_Init+0x74>)
 80010c6:	f002 fc25 	bl	8003914 <HAL_I2CEx_ConfigAnalogFilter>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C3_Init+0x5c>
	  {
	    Error_Handler();
 80010d0:	f000 f92a 	bl	8001328 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_I2C3_Init+0x74>)
 80010d8:	f002 fc67 	bl	80039aa <HAL_I2CEx_ConfigDigitalFilter>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C3_Init+0x6e>
	  {
	    Error_Handler();
 80010e2:	f000 f921 	bl	8001328 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C3_Init 2 */

	  /* USER CODE END I2C3_Init 2 */

	}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002f0 	.word	0x200002f0
 80010f0:	40005c00 	.word	0x40005c00
 80010f4:	20303e5d 	.word	0x20303e5d

080010f8 <MX_RTC_Init>:
	  * @brief RTC Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_RTC_Init(void)
	{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN RTC_Init 0 */

	  /* USER CODE END RTC_Init 0 */

	  RTC_TimeTypeDef sTime = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]

	  /* USER CODE END RTC_Init 1 */

	  /** Initialize RTC Only
	  */
	  hrtc.Instance = RTC;
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001112:	4a26      	ldr	r2, [pc, #152]	; (80011ac <MX_RTC_Init+0xb4>)
 8001114:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
	  hrtc.Init.AsynchPrediv = 127;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_RTC_Init+0xb0>)
 800111e:	227f      	movs	r2, #127	; 0x7f
 8001120:	609a      	str	r2, [r3, #8]
	  hrtc.Init.SynchPrediv = 255;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001124:	22ff      	movs	r2, #255	; 0xff
 8001126:	60da      	str	r2, [r3, #12]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_RTC_Init+0xb0>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_RTC_Init+0xb0>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001140:	4819      	ldr	r0, [pc, #100]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001142:	f005 ffcd 	bl	80070e0 <HAL_RTC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_RTC_Init+0x58>
	  {
	    Error_Handler();
 800114c:	f000 f8ec 	bl	8001328 <Error_Handler>

	  /* USER CODE END Check_RTC_BKUP */

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <MX_RTC_Init+0xb0>)
 800116c:	f006 f840 	bl	80071f0 <HAL_RTC_SetTime>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_RTC_Init+0x82>
	  {
	    Error_Handler();
 8001176:	f000 f8d7 	bl	8001328 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800117a:	2301      	movs	r3, #1
 800117c:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800117e:	2301      	movs	r3, #1
 8001180:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_RTC_Init+0xb0>)
 8001192:	f006 f8ca 	bl	800732a <HAL_RTC_SetDate>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_RTC_Init+0xa8>
	  {
	    Error_Handler();
 800119c:	f000 f8c4 	bl	8001328 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */

	  /* USER CODE END RTC_Init 2 */

	}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000344 	.word	0x20000344
 80011ac:	40002800 	.word	0x40002800

080011b0 <MX_SDMMC1_SD_Init>:
	  * @brief SDMMC1 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_SDMMC1_SD_Init(void)
	{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	  /* USER CODE END SDMMC1_Init 0 */

	  /* USER CODE BEGIN SDMMC1_Init 1 */

	  /* USER CODE END SDMMC1_Init 1 */
	  hsd1.Instance = SDMMC1;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <MX_SDMMC1_SD_Init+0x44>)
 80011b8:	601a      	str	r2, [r3, #0]
	  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
	  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
	  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
	  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
	  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
	  hsd1.Init.ClockDiv = 1;
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011da:	2201      	movs	r2, #1
 80011dc:	619a      	str	r2, [r3, #24]
	  /* USER CODE BEGIN SDMMC1_Init 2 */
	  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <MX_SDMMC1_SD_Init+0x40>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
	  /* USER CODE END SDMMC1_Init 2 */

	}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000368 	.word	0x20000368
 80011f4:	40012800 	.word	0x40012800

080011f8 <MX_DMA_Init>:

	/**
	  * Enable DMA controller clock
	  */
	static void MX_DMA_Init(void)
	{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_DMA_Init+0x38>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <MX_DMA_Init+0x38>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6493      	str	r3, [r2, #72]	; 0x48
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_DMA_Init+0x38>)
 800120c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA2_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	203b      	movs	r0, #59	; 0x3b
 800121c:	f001 f9ab 	bl	8002576 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001220:	203b      	movs	r0, #59	; 0x3b
 8001222:	f001 f9c4 	bl	80025ae <HAL_NVIC_EnableIRQ>

	}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <MX_GPIO_Init>:
	  * @brief GPIO Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_GPIO_Init(void)
	{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <MX_GPIO_Init+0xec>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a34      	ldr	r2, [pc, #208]	; (8001320 <MX_GPIO_Init+0xec>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <MX_GPIO_Init+0xec>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_GPIO_Init+0xec>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <MX_GPIO_Init+0xec>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <MX_GPIO_Init+0xec>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_GPIO_Init+0xec>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a28      	ldr	r2, [pc, #160]	; (8001320 <MX_GPIO_Init+0xec>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_GPIO_Init+0xec>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_GPIO_Init+0xec>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a22      	ldr	r2, [pc, #136]	; (8001320 <MX_GPIO_Init+0xec>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_GPIO_Init+0xec>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : IMU_INT_Pin */
	  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80012aa:	2304      	movs	r3, #4
 80012ac:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <MX_GPIO_Init+0xf0>)
 80012c0:	f001 fbc8 	bl	8002a54 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TEMP_INT_Pin */
	  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80012c4:	2308      	movs	r3, #8
 80012c6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012cc:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <MX_GPIO_Init+0xf0>)
 80012da:	f001 fbbb 	bl	8002a54 <HAL_GPIO_Init>

	  /*Configure GPIO pin : SDMMC_Detect_Pin */
	  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0xf0>)
 80012f2:	f001 fbaf 	bl	8002a54 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2008      	movs	r0, #8
 80012fc:	f001 f93b 	bl	8002576 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001300:	2008      	movs	r0, #8
 8001302:	f001 f954 	bl	80025ae <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2009      	movs	r0, #9
 800130c:	f001 f933 	bl	8002576 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001310:	2009      	movs	r0, #9
 8001312:	f001 f94c 	bl	80025ae <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
	}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	48000800 	.word	0x48000800

08001328 <Error_Handler>:
	/**
	  * @brief  This function is executed in case of error occurrence.
	  * @retval None
	  */
	void Error_Handler(void)
	{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>

08001332 <pawprint_init>:

/* Private Variables */

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800133a:	2014      	movs	r0, #20
 800133c:	f001 f81c 	bl	8002378 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001344:	f107 030d 	add.w	r3, r7, #13
 8001348:	461a      	mov	r2, r3
 800134a:	2101      	movs	r1, #1
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fd3d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001352:	2305      	movs	r3, #5
 8001354:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 8001356:	f107 030d 	add.w	r3, r7, #13
 800135a:	461a      	mov	r2, r3
 800135c:	2112      	movs	r1, #18
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fd34 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f001 f807 	bl	8002378 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 800136a:	f107 030f 	add.w	r3, r7, #15
 800136e:	461a      	mov	r2, r3
 8001370:	210f      	movs	r1, #15
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fcf2 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 8001378:	2340      	movs	r3, #64	; 0x40
 800137a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800137c:	f107 030d 	add.w	r3, r7, #13
 8001380:	461a      	mov	r2, r3
 8001382:	2101      	movs	r1, #1
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fd21 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 800138a:	f107 030e 	add.w	r3, r7, #14
 800138e:	461a      	mov	r2, r3
 8001390:	2114      	movs	r1, #20
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fce2 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 80013a2:	f107 030e 	add.w	r3, r7, #14
 80013a6:	461a      	mov	r2, r3
 80013a8:	2114      	movs	r1, #20
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fd0e 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80013b0:	2005      	movs	r0, #5
 80013b2:	f000 ffe1 	bl	8002378 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f023 0304 	bic.w	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 80013c6:	f107 030e 	add.w	r3, r7, #14
 80013ca:	461a      	mov	r2, r3
 80013cc:	2114      	movs	r1, #20
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fcfc 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 80013de:	f107 030e 	add.w	r3, r7, #14
 80013e2:	461a      	mov	r2, r3
 80013e4:	2114      	movs	r1, #20
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fcf0 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 80013f6:	f107 030e 	add.w	r3, r7, #14
 80013fa:	461a      	mov	r2, r3
 80013fc:	2114      	movs	r1, #20
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fce4 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 8001404:	2310      	movs	r3, #16
 8001406:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8001408:	f107 030e 	add.w	r3, r7, #14
 800140c:	461a      	mov	r2, r3
 800140e:	2114      	movs	r1, #20
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fcdb 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800141a:	f107 030d 	add.w	r3, r7, #13
 800141e:	461a      	mov	r2, r3
 8001420:	2101      	movs	r1, #1
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fcd2 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	461a      	mov	r2, r3
 800142e:	214f      	movs	r1, #79	; 0x4f
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc5f 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001436:	e001      	b.n	800143c <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 8001438:	2323      	movs	r3, #35	; 0x23
 800143a:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	2b40      	cmp	r3, #64	; 0x40
 8001440:	d1fa      	bne.n	8001438 <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001442:	f107 030d 	add.w	r3, r7, #13
 8001446:	461a      	mov	r2, r3
 8001448:	2160      	movs	r1, #96	; 0x60
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fc6c 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001450:	2005      	movs	r0, #5
 8001452:	f000 ff91 	bl	8002378 <HAL_Delay>
	RegDat = 0x43;
 8001456:	2343      	movs	r3, #67	; 0x43
 8001458:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	461a      	mov	r2, r3
 8001460:	2160      	movs	r1, #96	; 0x60
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc60 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 8001468:	2014      	movs	r0, #20
 800146a:	f000 ff85 	bl	8002378 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 800146e:	2310      	movs	r3, #16
 8001470:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 8001472:	f107 030d 	add.w	r3, r7, #13
 8001476:	461a      	mov	r2, r3
 8001478:	2162      	movs	r1, #98	; 0x62
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc54 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 8001480:	238c      	movs	r3, #140	; 0x8c
 8001482:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 8001484:	f107 030d 	add.w	r3, r7, #13
 8001488:	461a      	mov	r2, r3
 800148a:	2160      	movs	r1, #96	; 0x60
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fc4b 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 8001492:	f107 030b 	add.w	r3, r7, #11
 8001496:	461a      	mov	r2, r3
 8001498:	21fd      	movs	r1, #253	; 0xfd
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fddc 	bl	8002058 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 80014a0:	f107 030a 	add.w	r3, r7, #10
 80014a4:	461a      	mov	r2, r3
 80014a6:	21fe      	movs	r1, #254	; 0xfe
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fdd5 	bl	8002058 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014ae:	e001      	b.n	80014b4 <pawprint_init+0x182>

	RegDat = 0x04;
 80014b0:	2304      	movs	r3, #4
 80014b2:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <pawprint_init+0x18e>
 80014ba:	7abb      	ldrb	r3, [r7, #10]
 80014bc:	2b53      	cmp	r3, #83	; 0x53
 80014be:	d1f7      	bne.n	80014b0 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 80014c0:	f107 030d 	add.w	r3, r7, #13
 80014c4:	461a      	mov	r2, r3
 80014c6:	2104      	movs	r1, #4
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fc2d 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 80014ce:	234b      	movs	r3, #75	; 0x4b
 80014d0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 80014d2:	f107 030d 	add.w	r3, r7, #13
 80014d6:	461a      	mov	r2, r3
 80014d8:	2105      	movs	r1, #5
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fc24 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 80014e0:	f107 030d 	add.w	r3, r7, #13
 80014e4:	461a      	mov	r2, r3
 80014e6:	2120      	movs	r1, #32
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fc1d 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 80014f2:	f107 030d 	add.w	r3, r7, #13
 80014f6:	461a      	mov	r2, r3
 80014f8:	2106      	movs	r1, #6
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fc14 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001500:	f107 030d 	add.w	r3, r7, #13
 8001504:	461a      	mov	r2, r3
 8001506:	2107      	movs	r1, #7
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fc0d 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 800150e:	f107 030d 	add.w	r3, r7, #13
 8001512:	461a      	mov	r2, r3
 8001514:	2108      	movs	r1, #8
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fc06 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 800151c:	f107 030d 	add.w	r3, r7, #13
 8001520:	461a      	mov	r2, r3
 8001522:	2103      	movs	r1, #3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fbff 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800152e:	f107 030d 	add.w	r3, r7, #13
 8001532:	461a      	mov	r2, r3
 8001534:	2101      	movs	r1, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fc48 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 800153c:	2064      	movs	r0, #100	; 0x64
 800153e:	f000 ff1b 	bl	8002378 <HAL_Delay>
	RegDat = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 8001546:	f107 030d 	add.w	r3, r7, #13
 800154a:	461a      	mov	r2, r3
 800154c:	2114      	movs	r1, #20
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fc3c 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001554:	f107 030d 	add.w	r3, r7, #13
 8001558:	461a      	mov	r2, r3
 800155a:	2101      	movs	r1, #1
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fc35 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 8001562:	23e2      	movs	r3, #226	; 0xe2
 8001564:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 8001566:	f107 030d 	add.w	r3, r7, #13
 800156a:	461a      	mov	r2, r3
 800156c:	2118      	movs	r1, #24
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fc2c 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 8001578:	f107 030d 	add.w	r3, r7, #13
 800157c:	461a      	mov	r2, r3
 800157e:	2110      	movs	r1, #16
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fc23 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 8001586:	f107 030d 	add.w	r3, r7, #13
 800158a:	461a      	mov	r2, r3
 800158c:	2111      	movs	r1, #17
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fc1c 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x32;
 8001594:	2332      	movs	r3, #50	; 0x32
 8001596:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 50
 8001598:	f107 030d 	add.w	r3, r7, #13
 800159c:	461a      	mov	r2, r3
 800159e:	2107      	movs	r1, #7
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fc13 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015a6:	2300      	movs	r3, #0
 80015a8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 80015aa:	f107 030d 	add.w	r3, r7, #13
 80015ae:	461a      	mov	r2, r3
 80015b0:	2108      	movs	r1, #8
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fc0a 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 80015b8:	2344      	movs	r3, #68	; 0x44
 80015ba:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 80015bc:	f107 030d 	add.w	r3, r7, #13
 80015c0:	461a      	mov	r2, r3
 80015c2:	2109      	movs	r1, #9
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fc01 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x41;
 80015ca:	2341      	movs	r3, #65	; 0x41
 80015cc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);//41: FIFO mode, bqtch Timestamp, no temp   56: Set to continuous mode & batch Temp and Timestamp
 80015ce:	f107 030d 	add.w	r3, r7, #13
 80015d2:	461a      	mov	r2, r3
 80015d4:	210a      	movs	r1, #10
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fbf8 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 80015e0:	f107 030d 	add.w	r3, r7, #13
 80015e4:	461a      	mov	r2, r3
 80015e6:	2156      	movs	r1, #86	; 0x56
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fbef 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 80015ee:	2338      	movs	r3, #56	; 0x38
 80015f0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 80015f2:	f107 030d 	add.w	r3, r7, #13
 80015f6:	461a      	mov	r2, r3
 80015f8:	210d      	movs	r1, #13
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fbe6 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 8001604:	f107 030d 	add.w	r3, r7, #13
 8001608:	461a      	mov	r2, r3
 800160a:	2101      	movs	r1, #1
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fbdd 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001612:	233d      	movs	r3, #61	; 0x3d
 8001614:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 8001616:	f107 030d 	add.w	r3, r7, #13
 800161a:	461a      	mov	r2, r3
 800161c:	2115      	movs	r1, #21
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fbd4 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001624:	2368      	movs	r3, #104	; 0x68
 8001626:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 8001628:	f107 030d 	add.w	r3, r7, #13
 800162c:	461a      	mov	r2, r3
 800162e:	2116      	movs	r1, #22
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fbcb 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0xCE;
 8001636:	23ce      	movs	r3, #206	; 0xce
 8001638:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read 0E Default 104Hz
 800163a:	f107 030d 	add.w	r3, r7, #13
 800163e:	461a      	mov	r2, r3
 8001640:	2117      	movs	r1, #23
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fbc2 	bl	8000dcc <LSM6DSO_WriteReg>
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
//	RegDat = STTS751_REG_TEMP_H;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
//	RegDat = 0x0B;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
	RegDat = 0x00;
 8001648:	2300      	movs	r3, #0
 800164a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 800164c:	f107 030d 	add.w	r3, r7, #13
 8001650:	461a      	mov	r2, r3
 8001652:	2101      	movs	r1, #1
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fbb9 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 800165a:	2344      	movs	r3, #68	; 0x44
 800165c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 800165e:	f107 030d 	add.w	r3, r7, #13
 8001662:	461a      	mov	r2, r3
 8001664:	2112      	movs	r1, #18
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fbb0 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 800166c:	2328      	movs	r3, #40	; 0x28
 800166e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 8001670:	f107 030d 	add.w	r3, r7, #13
 8001674:	461a      	mov	r2, r3
 8001676:	2113      	movs	r1, #19
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fba7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 800167e:	2310      	movs	r3, #16
 8001680:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 8001682:	f107 030d 	add.w	r3, r7, #13
 8001686:	461a      	mov	r2, r3
 8001688:	2115      	movs	r1, #21
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fb9e 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 8001694:	f107 030d 	add.w	r3, r7, #13
 8001698:	461a      	mov	r2, r3
 800169a:	2116      	movs	r1, #22
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fb95 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 80016a2:	2320      	movs	r3, #32
 80016a4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 80016a6:	f107 030d 	add.w	r3, r7, #13
 80016aa:	461a      	mov	r2, r3
 80016ac:	2119      	movs	r1, #25
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fb8c 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 80016b8:	f107 030d 	add.w	r3, r7, #13
 80016bc:	461a      	mov	r2, r3
 80016be:	2110      	movs	r1, #16
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fb83 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 80016ca:	f107 030d 	add.w	r3, r7, #13
 80016ce:	461a      	mov	r2, r3
 80016d0:	2111      	movs	r1, #17
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fb7a 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 80016d8:	2340      	movs	r3, #64	; 0x40
 80016da:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 80016dc:	f107 030d 	add.w	r3, r7, #13
 80016e0:	461a      	mov	r2, r3
 80016e2:	2101      	movs	r1, #1
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fb71 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x4C;
 80016ea:	234c      	movs	r3, #76	; 0x4c
 80016ec:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 80016ee:	f107 030d 	add.w	r3, r7, #13
 80016f2:	461a      	mov	r2, r3
 80016f4:	2114      	movs	r1, #20
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fb68 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8001700:	f107 030d 	add.w	r3, r7, #13
 8001704:	461a      	mov	r2, r3
 8001706:	2101      	movs	r1, #1
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fb5f 	bl	8000dcc <LSM6DSO_WriteReg>

}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <pawprint_readFIFO>:
// Custom FIFO read function with single additional buffer - Trying to address missing data issue
// Will attempt to align on single line per time stamp
// SD write file incorporated to ensure  buffer is unloaded ASAP and does not overrun due to FIFO depth
// Perhaps add line to get maximum line size and check that if added to buffer would not overflow

void pawprint_readFIFO (I2C_HandleTypeDef *i2cHandle, char *buffer, int *writeIndex, int *maxoutLength, int *tag_counter, sensor_out *FIFOout) {
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171c:	b0b1      	sub	sp, #196	; 0xc4
 800171e:	af14      	add	r7, sp, #80	; 0x50
 8001720:	6478      	str	r0, [r7, #68]	; 0x44
 8001722:	6439      	str	r1, [r7, #64]	; 0x40
 8001724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
	// Time at start of timer in UNIX to microsecond - reset by writing AAh to TIMESTAMP2 register when grabbing RTC time to sync
	// BDR value
	// Previous Timestamp
	// Previous Tag count

	HAL_StatusTypeDef statusOut = 0x00; // Success/Fail for each read/write
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int outLength = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	66bb      	str	r3, [r7, #104]	; 0x68

	// Set Sensor BDR - Move to external input
	float bdr_xl = 104.0f;
 8001738:	4bac      	ldr	r3, [pc, #688]	; (80019ec <pawprint_readFIFO+0x2d4>)
 800173a:	663b      	str	r3, [r7, #96]	; 0x60
	float bdr_gyr = 104.0f;
 800173c:	4bab      	ldr	r3, [pc, #684]	; (80019ec <pawprint_readFIFO+0x2d4>)
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
	float bdr_max = fmaxf(bdr_xl, bdr_gyr);
 8001740:	edd7 0a17 	vldr	s1, [r7, #92]	; 0x5c
 8001744:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001748:	f013 ff1e 	bl	8015588 <fmaxf>
 800174c:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

	// Period length converted to LSB - 1lsb = 25us
	float batch_period = (1000000*(1/bdr_max))/25;
 8001750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001754:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80019f8 <pawprint_readFIFO+0x2e0>
 8001760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001764:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Read timestamp_endcount bit to check for timestamp overrun
		// Enable a bit that forces a check for timestamp < old timestamp? Or other overrun check?

	// Read watermark flag and if/else
	LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, FIFOstatus,2);
 8001770:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001774:	2302      	movs	r3, #2
 8001776:	213a      	movs	r1, #58	; 0x3a
 8001778:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800177a:	f7ff fb09 	bl	8000d90 <LSM6DSO_ReadRegs>

	if( ((FIFOstatus[1] >> 7) & 0x01) || ((FIFOstatus[1] >> 6) & 0x01) || ((FIFOstatus[1] >> 5) & 0x01) ){
 800177e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001782:	09db      	lsrs	r3, r3, #7
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d110      	bne.n	80017b0 <pawprint_readFIFO+0x98>
 800178e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <pawprint_readFIFO+0x98>
 800179e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 823a 	beq.w	8001c24 <pawprint_readFIFO+0x50c>
		//if ((FIFOstatus[1] >> 6) & 0x01) {
		//	overrunStatus = 1;
		//}

		// get fifo depth
		FIFOdepth = (((uint16_t)FIFOstatus[1] & 0x03) << 8 ) + (uint16_t)FIFOstatus[0];
 80017b0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		while(FIFOdepth--){
 80017ca:	e223      	b.n	8001c14 <pawprint_readFIFO+0x4fc>

			uint8_t FIFOdat[7] = {0};
 80017cc:	2300      	movs	r3, #0
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	2100      	movs	r1, #0
 80017d6:	460a      	mov	r2, r1
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	460a      	mov	r2, r1
 80017dc:	709a      	strb	r2, [r3, #2]

			statusOut = LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &FIFOdat[0], 7);
 80017de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80017e2:	2307      	movs	r3, #7
 80017e4:	2178      	movs	r1, #120	; 0x78
 80017e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017e8:	f7ff fad2 	bl	8000d90 <LSM6DSO_ReadRegs>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

			// Get tag type & counter
			uint8_t tag = (FIFOdat[0] & 0xF8) >> 0x03;
 80017f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			uint8_t new_tag_counter = (FIFOdat[0] & 0x06) >> 0x01;
 80017fc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001800:	105b      	asrs	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

			// Is tag_counter same as previous?
			if ((new_tag_counter != *tag_counter)){
 800180c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	f000 8112 	beq.w	8001a40 <pawprint_readFIFO+0x328>

				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 800181c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001824:	189e      	adds	r6, r3, r2
 8001826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 800182e:	3340      	adds	r3, #64	; 0x40
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
																	FIFOout->timestamp,
 8001832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001836:	681b      	ldr	r3, [r3, #0]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe85 	bl	8000548 <__aeabi_f2d>
 800183e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							        								FIFOout->XLdat.x,
 8001842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001846:	685b      	ldr	r3, [r3, #4]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	e9c7 0108 	strd	r0, r1, [r7, #32]
							        								FIFOout->XLdat.y,
 8001852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001856:	689b      	ldr	r3, [r3, #8]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	e9c7 0106 	strd	r0, r1, [r7, #24]
							        								FIFOout->XLdat.z,
 8001862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001866:	68db      	ldr	r3, [r3, #12]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6d 	bl	8000548 <__aeabi_f2d>
 800186e:	e9c7 0104 	strd	r0, r1, [r7, #16]

									        						FIFOout->GYRdat.x,
 8001872:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001876:	691b      	ldr	r3, [r3, #16]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	e9c7 0102 	strd	r0, r1, [r7, #8]
																	FIFOout->GYRdat.y,
 8001882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001886:	695b      	ldr	r3, [r3, #20]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	e9c7 0100 	strd	r0, r1, [r7]
																	FIFOout->GYRdat.z,
 8001892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001896:	699b      	ldr	r3, [r3, #24]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe55 	bl	8000548 <__aeabi_f2d>
 800189e:	4682      	mov	sl, r0
 80018a0:	468b      	mov	fp, r1

																	FIFOout->MAGdat.x,
 80018a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a6:	69db      	ldr	r3, [r3, #28]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe4d 	bl	8000548 <__aeabi_f2d>
 80018ae:	4680      	mov	r8, r0
 80018b0:	4689      	mov	r9, r1
																	FIFOout->MAGdat.y,
 80018b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018b6:	6a1b      	ldr	r3, [r3, #32]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe45 	bl	8000548 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
																	FIFOout->MAGdat.z);
 80018c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe3d 	bl	8000548 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80018d6:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80018da:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80018de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80018e2:	ed97 7b00 	vldr	d7, [r7]
 80018e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80018ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80018ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80018f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80018fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001902:	ed97 7b08 	vldr	d7, [r7, #32]
 8001906:	ed8d 7b02 	vstr	d7, [sp, #8]
 800190a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800190e:	ed8d 7b00 	vstr	d7, [sp]
 8001912:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <pawprint_readFIFO+0x2d8>)
 8001914:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001916:	4630      	mov	r0, r6
 8001918:	f010 f968 	bl	8011bec <sniprintf>
 800191c:	66b8      	str	r0, [r7, #104]	; 0x68

					if (outLength < 0){
 800191e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001920:	2b00      	cmp	r3, #0
 8001922:	da11      	bge.n	8001948 <pawprint_readFIFO+0x230>
						// Could be the reason for errors in output? Write if error occurs for inspection
						outLength += snprintf(&buffer[*writeIndex],40000-*writeIndex ,"~,~,E,R,R,O,R,!,~,~\n");
 8001924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192c:	1898      	adds	r0, r3, r2
 800192e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 8001936:	3340      	adds	r3, #64	; 0x40
 8001938:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <pawprint_readFIFO+0x2dc>)
 800193a:	4619      	mov	r1, r3
 800193c:	f010 f956 	bl	8011bec <sniprintf>
 8001940:	4602      	mov	r2, r0
 8001942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001944:	4413      	add	r3, r2
 8001946:	66bb      	str	r3, [r7, #104]	; 0x68
					}

					// clear data - Can I assign this in one? As not changing TimeStamp couldnt work it out
					FIFOout->XLdat.x = 0 ;
 8001948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
					FIFOout->XLdat.y = 0 ;
 8001952:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
					FIFOout->XLdat.z = 0 ;
 800195c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
					FIFOout->GYRdat.x = 0 ;
 8001966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
					FIFOout->GYRdat.y = 0 ;
 8001970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
					FIFOout->GYRdat.z = 0 ;
 800197a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
					FIFOout->MAGdat.x = 0 ;
 8001984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
					FIFOout->GYRdat.y = 0 ;
 800198e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
					FIFOout->GYRdat.z = 0 ;
 8001998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
					//*FIFOout = (sensor_out) {0};

					// update max line length - for debug and not used?
					if (outLength > *maxoutLength){
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dd02      	ble.n	80019b2 <pawprint_readFIFO+0x29a>
						*maxoutLength = outLength;
 80019ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019b0:	601a      	str	r2, [r3, #0]
					}
					// update buffer write index
					*writeIndex += outLength;
 80019b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019b8:	441a      	add	r2, r3
 80019ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019bc:	601a      	str	r2, [r3, #0]

				uint8_t diff_tag_counter = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				if(new_tag_counter < *tag_counter)
 80019c4:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80019c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	da14      	bge.n	80019fc <pawprint_readFIFO+0x2e4>
				{

					diff_tag_counter = new_tag_counter + 4u - *tag_counter;
 80019d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3304      	adds	r3, #4
 80019e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019e8:	e011      	b.n	8001a0e <pawprint_readFIFO+0x2f6>
 80019ea:	bf00      	nop
 80019ec:	42d00000 	.word	0x42d00000
 80019f0:	08015658 	.word	0x08015658
 80019f4:	0801568c 	.word	0x0801568c
 80019f8:	49742400 	.word	0x49742400

				}
				else
				{
					diff_tag_counter = new_tag_counter - *tag_counter;
 80019fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}

				*tag_counter = new_tag_counter;
 8001a0e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a16:	601a      	str	r2, [r3, #0]

				// Update Timestamp based on counter change - works reliably only where <4 batch periods have passed
				//uint32_t old_timestamp = FIFOout.timestamp;
				FIFOout->timestamp += (batch_period * diff_tag_counter);
 8001a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
				// Timestamp reset bit exists but do not see reason to use?

			}

			// switch to ID sensor from tag
			switch (tag)
 8001a40:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a44:	3b01      	subs	r3, #1
 8001a46:	2b0d      	cmp	r3, #13
 8001a48:	f200 80e4 	bhi.w	8001c14 <pawprint_readFIFO+0x4fc>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <pawprint_readFIFO+0x33c>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a8d 	.word	0x08001a8d
 8001a58:	08001afb 	.word	0x08001afb
 8001a5c:	08001c15 	.word	0x08001c15
 8001a60:	08001b69 	.word	0x08001b69
 8001a64:	08001c15 	.word	0x08001c15
 8001a68:	08001c15 	.word	0x08001c15
 8001a6c:	08001c15 	.word	0x08001c15
 8001a70:	08001c15 	.word	0x08001c15
 8001a74:	08001c15 	.word	0x08001c15
 8001a78:	08001c15 	.word	0x08001c15
 8001a7c:	08001c15 	.word	0x08001c15
 8001a80:	08001c15 	.word	0x08001c15
 8001a84:	08001c15 	.word	0x08001c15
 8001a88:	08001ba7 	.word	0x08001ba7
			{
				case 0x01: // Gyroscope
					FIFOout->GYRdat.x = lsm6dso_from_fs125_to_mdps((FIFOdat[2] << 8) | FIFOdat[1]) ;
 8001a8c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f8de 	bl	8001c60 <lsm6dso_from_fs125_to_mdps>
 8001aa4:	eef0 7a40 	vmov.f32	s15, s0
 8001aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aac:	edc3 7a04 	vstr	s15, [r3, #16]
					FIFOout->GYRdat.y = lsm6dso_from_fs125_to_mdps((FIFOdat[4] << 8) | FIFOdat[3]);
 8001ab0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21a      	sxth	r2, r3
 8001ab8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f8cc 	bl	8001c60 <lsm6dso_from_fs125_to_mdps>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad0:	edc3 7a05 	vstr	s15, [r3, #20]
					FIFOout->GYRdat.z = lsm6dso_from_fs125_to_mdps((FIFOdat[6] << 8) | FIFOdat[5]);
 8001ad4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f8ba 	bl	8001c60 <lsm6dso_from_fs125_to_mdps>
 8001aec:	eef0 7a40 	vmov.f32	s15, s0
 8001af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001af4:	edc3 7a06 	vstr	s15, [r3, #24]

					break;
 8001af8:	e08c      	b.n	8001c14 <pawprint_readFIFO+0x4fc>

				case 0x02: // Accelerometer
					FIFOout->XLdat.x =	lsm6dso_from_fs2_to_mg((FIFOdat[2] << 8) | FIFOdat[1]);
 8001afa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f88f 	bl	8001c30 <lsm6dso_from_fs2_to_mg>
 8001b12:	eef0 7a40 	vmov.f32	s15, s0
 8001b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1a:	edc3 7a01 	vstr	s15, [r3, #4]
					FIFOout->XLdat.y = lsm6dso_from_fs2_to_mg((FIFOdat[4] << 8) | FIFOdat[3]);
 8001b1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f87d 	bl	8001c30 <lsm6dso_from_fs2_to_mg>
 8001b36:	eef0 7a40 	vmov.f32	s15, s0
 8001b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3e:	edc3 7a02 	vstr	s15, [r3, #8]
					FIFOout->XLdat.z = lsm6dso_from_fs2_to_mg((FIFOdat[6] << 8) | FIFOdat[5]);
 8001b42:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f86b 	bl	8001c30 <lsm6dso_from_fs2_to_mg>
 8001b5a:	eef0 7a40 	vmov.f32	s15, s0
 8001b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b62:	edc3 7a03 	vstr	s15, [r3, #12]

					break;
 8001b66:	e055      	b.n	8001c14 <pawprint_readFIFO+0x4fc>

				case 0x04: // Timestamp
					FIFOout->timestamp = (((FIFOdat[4] << 24) | (FIFOdat[3] << 16) | (FIFOdat[2] << 8) | FIFOdat[1])* 25.0f / 1000000.0f);
 8001b68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b6c:	061a      	lsls	r2, r3, #24
 8001b6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	431a      	orrs	r2, r3
 8001b76:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001b82:	4313      	orrs	r3, r2
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b94:	ed5f 6a68 	vldr	s13, [pc, #-416]	; 80019f8 <pawprint_readFIFO+0x2e0>
 8001b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba0:	edc3 7a00 	vstr	s15, [r3]

					break;
 8001ba4:	e036      	b.n	8001c14 <pawprint_readFIFO+0x4fc>

				case 0x0E: // Magnetometer
					FIFOout->MAGdat.x = lis2mdl_from_lsb_to_mgauss((FIFOdat[2] << 8) | FIFOdat[1]);
 8001ba6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f869 	bl	8001c90 <lis2mdl_from_lsb_to_mgauss>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc6:	edc3 7a07 	vstr	s15, [r3, #28]
					FIFOout->MAGdat.y = lis2mdl_from_lsb_to_mgauss((FIFOdat[4] << 8) | FIFOdat[3]);
 8001bca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f857 	bl	8001c90 <lis2mdl_from_lsb_to_mgauss>
 8001be2:	eef0 7a40 	vmov.f32	s15, s0
 8001be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bea:	edc3 7a08 	vstr	s15, [r3, #32]
					FIFOout->MAGdat.z = lis2mdl_from_lsb_to_mgauss((FIFOdat[6] << 8) | FIFOdat[5]);
 8001bee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f845 	bl	8001c90 <lis2mdl_from_lsb_to_mgauss>
 8001c06:	eef0 7a40 	vmov.f32	s15, s0
 8001c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

					break;
 8001c12:	bf00      	nop
		while(FIFOdepth--){
 8001c14:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c18:	1e5a      	subs	r2, r3, #1
 8001c1a:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f add4 	bne.w	80017cc <pawprint_readFIFO+0xb4>

		}

	}

}
 8001c24:	bf00      	nop
 8001c26:	3774      	adds	r7, #116	; 0x74
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop

08001c30 <lsm6dso_from_fs2_to_mg>:


float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c5c <lsm6dso_from_fs2_to_mg+0x2c>
 8001c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	3d79db23 	.word	0x3d79db23

08001c60 <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c76:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c8c <lsm6dso_from_fs125_to_mdps+0x2c>
 8001c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	408c0000 	.word	0x408c0000

08001c90 <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_MspInit+0x44>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_MspInit+0x44>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_MspInit+0x44>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_MspInit+0x44>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0ac      	sub	sp, #176	; 0xb0
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2288      	movs	r2, #136	; 0x88
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00f fff8 	bl	8011d1a <memset>
  if(hi2c->Instance==I2C3)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_I2C_MspInit+0xb0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d13b      	bne.n	8001dac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 feb2 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d4e:	f7ff faeb 	bl	8001328 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	2312      	movs	r3, #18
 8001d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d82:	2304      	movs	r3, #4
 8001d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480b      	ldr	r0, [pc, #44]	; (8001dbc <HAL_I2C_MspInit+0xb8>)
 8001d90:	f000 fe60 	bl	8002a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001d9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	37b0      	adds	r7, #176	; 0xb0
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40005c00 	.word	0x40005c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	48000800 	.word	0x48000800

08001dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0a4      	sub	sp, #144	; 0x90
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	2288      	movs	r2, #136	; 0x88
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00f ffa2 	bl	8011d1a <memset>
  if(hrtc->Instance==RTC)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_RTC_MspInit+0x5c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d118      	bne.n	8001e12 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fe5a 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dfe:	f7ff fa93 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RTC_MspInit+0x60>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_RTC_MspInit+0x60>)
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3790      	adds	r7, #144	; 0x90
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40002800 	.word	0x40002800
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0ac      	sub	sp, #176	; 0xb0
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2288      	movs	r2, #136	; 0x88
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00f ff68 	bl	8011d1a <memset>
  if(hsd->Instance==SDMMC1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <HAL_SD_MspInit+0x170>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f040 809a 	bne.w	8001f8a <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8001e5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 fe1f 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e74:	f7ff fa58 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e78:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7c:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6613      	str	r3, [r2, #96]	; 0x60
 8001e84:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_SD_MspInit+0x174>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ec0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eda:	230c      	movs	r3, #12
 8001edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	482d      	ldr	r0, [pc, #180]	; (8001f9c <HAL_SD_MspInit+0x178>)
 8001ee8:	f000 fdb4 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eec:	2304      	movs	r3, #4
 8001eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f04:	230c      	movs	r3, #12
 8001f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <HAL_SD_MspInit+0x17c>)
 8001f12:	f000 fd9f 	bl	8002a54 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_SD_MspInit+0x184>)
 8001f1a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f1e:	2207      	movs	r2, #7
 8001f20:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f42:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f54:	f000 fb46 	bl	80025e4 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 8001f5e:	f7ff f9e3 	bl	8001328 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_SD_MspInit+0x180>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2031      	movs	r0, #49	; 0x31
 8001f80:	f000 faf9 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001f84:	2031      	movs	r0, #49	; 0x31
 8001f86:	f000 fb12 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	37b0      	adds	r7, #176	; 0xb0
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40012800 	.word	0x40012800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000800 	.word	0x48000800
 8001fa0:	48000c00 	.word	0x48000c00
 8001fa4:	200003ec 	.word	0x200003ec
 8001fa8:	40020444 	.word	0x40020444

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f99e 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8002004:	2004      	movs	r0, #4
 8002006:	f000 fee7 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}

0800200e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8002012:	2008      	movs	r0, #8
 8002014:	f000 fee0 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <SDMMC1_IRQHandler+0x10>)
 8002022:	f005 fd29 	bl	8007a78 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000368 	.word	0x20000368

08002030 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <DMA2_Channel4_IRQHandler+0x10>)
 8002036:	f000 fc2e 	bl	8002896 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200003ec 	.word	0x200003ec

08002044 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <OTG_FS_IRQHandler+0x10>)
 800204a:	f001 fe4d 	bl	8003ce8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000bc84 	.word	0x2000bc84

08002058 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af04      	add	r7, sp, #16
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	460b      	mov	r3, r1
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	b29a      	uxth	r2, r3
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	2301      	movs	r3, #1
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	2172      	movs	r1, #114	; 0x72
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f001 f877 	bl	8003170 <HAL_I2C_Mem_Read>
 8002082:	4603      	mov	r3, r0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a6:	f00f fe8b 	bl	8011dc0 <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
  return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ce:	e7fe      	b.n	80020ce <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
  }

  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
  }
  return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
  return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f00f fdf0 	bl	8011dc0 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20018000 	.word	0x20018000
 800220c:	00000800 	.word	0x00000800
 8002210:	2000a2f8 	.word	0x2000a2f8
 8002214:	2000c500 	.word	0x2000c500

08002218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002240:	f7ff ffea 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226a:	f00f fdaf 	bl	8011dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226e:	f7fe fdd3 	bl	8000e18 <main>

08002272 <LoopForever>:

LoopForever:
    b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002274:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002280:	08015c58 	.word	0x08015c58
  ldr r2, =_sbss
 8002284:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002288:	2000c4fc 	.word	0x2000c4fc

0800228c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>

0800228e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002298:	2003      	movs	r0, #3
 800229a:	f000 f961 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229e:	200f      	movs	r0, #15
 80022a0:	f000 f80e 	bl	80022c0 <HAL_InitTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	e001      	b.n	80022b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b0:	f7ff fd04 	bl	8001cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b4:	79fb      	ldrb	r3, [r7, #7]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_InitTick+0x6c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_InitTick+0x70>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_InitTick+0x6c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f96d 	bl	80025ca <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d809      	bhi.n	8002310 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f937 	bl	8002576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_InitTick+0x74>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e007      	b.n	8002320 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e004      	b.n	8002320 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e001      	b.n	8002320 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008
 800235c:	2000a2fc 	.word	0x2000a2fc

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2000a2fc 	.word	0x2000a2fc

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff ffee 	bl	8002360 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239e:	bf00      	nop
 80023a0:	f7ff ffde 	bl	8002360 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000008 	.word	0x20000008

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff3e 	bl	8002408 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff8e 	bl	80024b4 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff31 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e098      	b.n	8002728 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <HAL_DMA_Init+0x150>)
 80025fe:	429a      	cmp	r2, r3
 8002600:	d80f      	bhi.n	8002622 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_DMA_Init+0x154>)
 800260a:	4413      	add	r3, r2
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_DMA_Init+0x158>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	009a      	lsls	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_DMA_Init+0x15c>)
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
 8002620:	e00e      	b.n	8002640 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_DMA_Init+0x160>)
 800262a:	4413      	add	r3, r2
 800262c:	4a43      	ldr	r2, [pc, #268]	; (800273c <HAL_DMA_Init+0x158>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	009a      	lsls	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a42      	ldr	r2, [pc, #264]	; (8002748 <HAL_DMA_Init+0x164>)
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800269a:	d039      	beq.n	8002710 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <HAL_DMA_Init+0x15c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11a      	bne.n	80026dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_DMA_Init+0x168>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f003 031c 	and.w	r3, r3, #28
 80026b2:	210f      	movs	r1, #15
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4924      	ldr	r1, [pc, #144]	; (800274c <HAL_DMA_Init+0x168>)
 80026bc:	4013      	ands	r3, r2
 80026be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_DMA_Init+0x168>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	f003 031c 	and.w	r3, r3, #28
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	491d      	ldr	r1, [pc, #116]	; (800274c <HAL_DMA_Init+0x168>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
 80026da:	e019      	b.n	8002710 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_DMA_Init+0x16c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 031c 	and.w	r3, r3, #28
 80026e8:	210f      	movs	r1, #15
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	4917      	ldr	r1, [pc, #92]	; (8002750 <HAL_DMA_Init+0x16c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_DMA_Init+0x16c>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f003 031c 	and.w	r3, r3, #28
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	4911      	ldr	r1, [pc, #68]	; (8002750 <HAL_DMA_Init+0x16c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40020407 	.word	0x40020407
 8002738:	bffdfff8 	.word	0xbffdfff8
 800273c:	cccccccd 	.word	0xcccccccd
 8002740:	40020000 	.word	0x40020000
 8002744:	bffdfbf8 	.word	0xbffdfbf8
 8002748:	40020400 	.word	0x40020400
 800274c:	400200a8 	.word	0x400200a8
 8002750:	400204a8 	.word	0x400204a8

08002754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_DMA_Start_IT+0x20>
 8002770:	2302      	movs	r3, #2
 8002772:	e04b      	b.n	800280c <HAL_DMA_Start_IT+0xb8>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d13a      	bne.n	80027fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f921 	bl	80029f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 020e 	orr.w	r2, r2, #14
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e00f      	b.n	80027ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 020a 	orr.w	r2, r2, #10
 80027ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e005      	b.n	800280a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800280a:	7dfb      	ldrb	r3, [r7, #23]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d005      	beq.n	8002838 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2204      	movs	r2, #4
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e029      	b.n	800288c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 020e 	bic.w	r2, r2, #14
 8002846:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f003 021c 	and.w	r2, r3, #28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
    }
  }
  return status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f003 031c 	and.w	r3, r3, #28
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d026      	beq.n	8002910 <HAL_DMA_IRQHandler+0x7a>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d021      	beq.n	8002910 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0204 	bic.w	r2, r2, #4
 80028e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f003 021c 	and.w	r2, r3, #28
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2104      	movs	r1, #4
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	2b00      	cmp	r3, #0
 8002904:	d071      	beq.n	80029ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800290e:	e06c      	b.n	80029ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f003 031c 	and.w	r3, r3, #28
 8002918:	2202      	movs	r2, #2
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02e      	beq.n	8002982 <HAL_DMA_IRQHandler+0xec>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d029      	beq.n	8002982 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10b      	bne.n	8002954 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020a 	bic.w	r2, r2, #10
 800294a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f003 021c 	and.w	r2, r3, #28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2102      	movs	r1, #2
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d038      	beq.n	80029ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002980:	e033      	b.n	80029ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f003 031c 	and.w	r3, r3, #28
 800298a:	2208      	movs	r2, #8
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x156>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d025      	beq.n	80029ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 020e 	bic.w	r2, r2, #14
 80029ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f003 021c 	and.w	r2, r3, #28
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
}
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 021c 	and.w	r2, r3, #28
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d108      	bne.n	8002a38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a36:	e007      	b.n	8002a48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a62:	e17f      	b.n	8002d64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8171 	beq.w	8002d5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d005      	beq.n	8002a94 <HAL_GPIO_Init+0x40>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d130      	bne.n	8002af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aca:	2201      	movs	r2, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0201 	and.w	r2, r3, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d118      	bne.n	8002b34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	6939      	ldr	r1, [r7, #16]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80ac 	beq.w	8002d5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	4a5e      	ldr	r2, [pc, #376]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6613      	str	r3, [r2, #96]	; 0x60
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <HAL_GPIO_Init+0x334>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x242>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x338>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x23e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x33c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x23a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x340>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x236>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x344>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x232>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x348>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x22e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_GPIO_Init+0x34c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x22a>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00c      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e00a      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c96:	2300      	movs	r3, #0
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca8:	4937      	ldr	r1, [pc, #220]	; (8002d88 <HAL_GPIO_Init+0x334>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cda:	4a32      	ldr	r2, [pc, #200]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ce0:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f ae78 	bne.w	8002a64 <HAL_GPIO_Init+0x10>
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	48000400 	.word	0x48000400
 8002d90:	48000800 	.word	0x48000800
 8002d94:	48000c00 	.word	0x48000c00
 8002d98:	48001000 	.word	0x48001000
 8002d9c:	48001400 	.word	0x48001400
 8002da0:	48001800 	.word	0x48001800
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f802 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40010400 	.word	0x40010400

08002e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e08d      	b.n	8002f36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe ff68 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e006      	b.n	8002e90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d108      	bne.n	8002eaa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	e007      	b.n	8002eba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 80fd 	bne.w	8003162 <HAL_I2C_Mem_Write+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x34>
 8002f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0f1      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Mem_Write+0x4e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0ea      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f96:	f7ff f9e3 	bl	8002360 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2319      	movs	r3, #25
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fac7 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d5      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2221      	movs	r2, #33	; 0x21
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe0:	88f8      	ldrh	r0, [r7, #6]
 8002fe2:	893a      	ldrh	r2, [r7, #8]
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4603      	mov	r3, r0
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f9d7 	bl	80033a4 <I2C_RequestMemoryWrite>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0ad      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d90e      	bls.n	8003030 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fc41 	bl	80038b0 <I2C_TransferConfig>
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fc30 	bl	80038b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fac0 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e07f      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d034      	beq.n	8003108 <HAL_I2C_Mem_Write+0x1c8>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d130      	bne.n	8003108 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fa43 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e051      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d90e      	bls.n	80030e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	2300      	movs	r3, #0
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fbe5 	bl	80038b0 <I2C_TransferConfig>
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fbd4 	bl	80038b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d19e      	bne.n	8003050 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 faa6 	bl	8003668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e01e      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2220      	movs	r2, #32
 800312c:	61da      	str	r2, [r3, #28]

    /* Clear NAK flag */

    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2210      	movs	r2, #16
 8003134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_I2C_Mem_Write+0x22c>)
 8003142:	400b      	ands	r3, r1
 8003144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_I2C_Mem_Write+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 80fd 	bne.w	8003392 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_I2C_Mem_Read+0x34>
 800319e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0f1      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2C_Mem_Read+0x4e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0ea      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031c6:	f7ff f8cb 	bl	8002360 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2319      	movs	r3, #25
 80031d2:	2201      	movs	r2, #1
 80031d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f9af 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d5      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2222      	movs	r2, #34	; 0x22
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003210:	88f8      	ldrh	r0, [r7, #6]
 8003212:	893a      	ldrh	r2, [r7, #8]
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4603      	mov	r3, r0
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f913 	bl	800344c <I2C_RequestMemoryRead>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0ad      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d90e      	bls.n	8003260 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_I2C_Mem_Read+0x22c>)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fb29 	bl	80038b0 <I2C_TransferConfig>
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_I2C_Mem_Read+0x22c>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb18 	bl	80038b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	2200      	movs	r2, #0
 8003288:	2104      	movs	r1, #4
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f956 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07c      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d034      	beq.n	8003340 <HAL_I2C_Mem_Read+0x1d0>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d130      	bne.n	8003340 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f927 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e04d      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2bff      	cmp	r3, #255	; 0xff
 8003300:	d90e      	bls.n	8003320 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	2300      	movs	r3, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fac9 	bl	80038b0 <I2C_TransferConfig>
 800331e:	e00f      	b.n	8003340 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	b2da      	uxtb	r2, r3
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	2300      	movs	r3, #0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fab8 	bl	80038b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d19a      	bne.n	8003280 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f98a 	bl	8003668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e01a      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_I2C_Mem_Read+0x230>)
 8003372:	400b      	ands	r3, r1
 8003374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	80002400 	.word	0x80002400
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	817b      	strh	r3, [r7, #10]
 80033b6:	460b      	mov	r3, r1
 80033b8:	813b      	strh	r3, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	8979      	ldrh	r1, [r7, #10]
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <I2C_RequestMemoryWrite+0xa4>)
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fa6f 	bl	80038b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8ff 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e02c      	b.n	8003440 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
 80033f6:	e015      	b.n	8003424 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033f8:	893b      	ldrh	r3, [r7, #8]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8e5 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e012      	b.n	8003440 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f884 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	80002000 	.word	0x80002000

0800344c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	817b      	strh	r3, [r7, #10]
 800345e:	460b      	mov	r3, r1
 8003460:	813b      	strh	r3, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <I2C_RequestMemoryRead+0xa4>)
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2300      	movs	r3, #0
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa1c 	bl	80038b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	69b9      	ldr	r1, [r7, #24]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f8ac 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e02c      	b.n	80034e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003492:	893b      	ldrh	r3, [r7, #8]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
 800349c:	e015      	b.n	80034ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800349e:	893b      	ldrh	r3, [r7, #8]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f892 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e012      	b.n	80034e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f831 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	80002000 	.word	0x80002000

080034f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d103      	bne.n	8003512 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d007      	beq.n	8003530 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	619a      	str	r2, [r3, #24]
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	e031      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d02d      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe ff03 	bl	8002360 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d122      	bne.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	d113      	bne.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00f      	b.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d0be      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e6:	e033      	b.n	8003650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f87f 	bl	80036f0 <I2C_IsErrorOccurred>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e031      	b.n	8003660 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d025      	beq.n	8003650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003604:	f7fe feac 	bl	8002360 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	429a      	cmp	r2, r3
 8003612:	d302      	bcc.n	800361a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11a      	bne.n	8003650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d013      	beq.n	8003650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d1c4      	bne.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003674:	e02f      	b.n	80036d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f838 	bl	80036f0 <I2C_IsErrorOccurred>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e02d      	b.n	80036e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fe fe69 	bl	8002360 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11a      	bne.n	80036d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d013      	beq.n	80036d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e007      	b.n	80036e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d1c8      	bne.n	8003676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d068      	beq.n	80037ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2210      	movs	r2, #16
 8003722:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003724:	e049      	b.n	80037ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d045      	beq.n	80037ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fe fe17 	bl	8002360 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_IsErrorOccurred+0x54>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d13a      	bne.n	80037ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003756:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003766:	d121      	bne.n	80037ac <I2C_IsErrorOccurred+0xbc>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376e:	d01d      	beq.n	80037ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b20      	cmp	r3, #32
 8003774:	d01a      	beq.n	80037ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003784:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003786:	f7fe fdeb 	bl	8002360 <HAL_GetTick>
 800378a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800378c:	e00e      	b.n	80037ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800378e:	f7fe fde7 	bl	8002360 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b19      	cmp	r3, #25
 800379a:	d907      	bls.n	80037ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f043 0320 	orr.w	r3, r3, #32
 80037a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80037aa:	e006      	b.n	80037ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d1e9      	bne.n	800378e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d003      	beq.n	80037d0 <I2C_IsErrorOccurred+0xe0>
 80037c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0aa      	beq.n	8003726 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2220      	movs	r2, #32
 80037de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800385c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01c      	beq.n	800389e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff fe45 	bl	80034f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <I2C_IsErrorOccurred+0x1bc>)
 8003876:	400b      	ands	r3, r1
 8003878:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800389e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	fe00e800 	.word	0xfe00e800

080038b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	817b      	strh	r3, [r7, #10]
 80038be:	4613      	mov	r3, r2
 80038c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c2:	897b      	ldrh	r3, [r7, #10]
 80038c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c8:	7a7b      	ldrb	r3, [r7, #9]
 80038ca:	041b      	lsls	r3, r3, #16
 80038cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	4313      	orrs	r3, r2
 80038da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	0d5b      	lsrs	r3, r3, #21
 80038ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <I2C_TransferConfig+0x60>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	43db      	mvns	r3, r3
 80038f4:	ea02 0103 	and.w	r1, r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	03ff63ff 	.word	0x03ff63ff

08003914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	d138      	bne.n	800399c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003934:	2302      	movs	r3, #2
 8003936:	e032      	b.n	800399e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d139      	bne.n	8003a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e033      	b.n	8003a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2224      	movs	r2, #36	; 0x24
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a44:	b08f      	sub	sp, #60	; 0x3c
 8003a46:	af0a      	add	r7, sp, #40	; 0x28
 8003a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e116      	b.n	8003c82 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f00c fd60 	bl	8010534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 fefd 	bl	8009892 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	687e      	ldr	r6, [r7, #4]
 8003aa0:	466d      	mov	r5, sp
 8003aa2:	f106 0410 	add.w	r4, r6, #16
 8003aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ab6:	1d33      	adds	r3, r6, #4
 8003ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aba:	6838      	ldr	r0, [r7, #0]
 8003abc:	f005 fe10 	bl	80096e0 <USB_CoreInit>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0d7      	b.n	8003c82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 feeb 	bl	80098b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e04a      	b.n	8003b7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	333d      	adds	r3, #61	; 0x3d
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	333c      	adds	r3, #60	; 0x3c
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	b298      	uxth	r0, r3
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3356      	adds	r3, #86	; 0x56
 8003b20:	4602      	mov	r2, r0
 8003b22:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	3340      	adds	r3, #64	; 0x40
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	; 0x44
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3348      	adds	r3, #72	; 0x48
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334c      	adds	r3, #76	; 0x4c
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	3301      	adds	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3af      	bcc.n	8003ae4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	e044      	b.n	8003c14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3301      	adds	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3b5      	bcc.n	8003b8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	687e      	ldr	r6, [r7, #4]
 8003c26:	466d      	mov	r5, sp
 8003c28:	f106 0410 	add.w	r4, r6, #16
 8003c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c3c:	1d33      	adds	r3, r6, #4
 8003c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	f005 fe83 	bl	800994c <USB_DevInit>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e014      	b.n	8003c82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f001 f869 	bl	8004d48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f006 fe31 	bl	800a8e2 <USB_DevDisconnect>

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_PCD_Start+0x1c>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e01c      	b.n	8003ce0 <HAL_PCD_Start+0x56>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d105      	bne.n	8003cc2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f005 fdd2 	bl	8009870 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f006 fde5 	bl	800a8a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b08d      	sub	sp, #52	; 0x34
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f006 fea3 	bl	800aa4a <USB_GetMode>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 847e 	bne.w	8004608 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f006 fe07 	bl	800a924 <USB_ReadInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8474 	beq.w	8004606 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f006 fdf4 	bl	800a924 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d107      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 0202 	and.w	r2, r2, #2
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f006 fde2 	bl	800a924 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d161      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0210 	bic.w	r2, r2, #16
 8003d78:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	0c5b      	lsrs	r3, r3, #17
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d124      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d035      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6a38      	ldr	r0, [r7, #32]
 8003dc6:	f006 fc19 	bl	800a5fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd6:	441a      	add	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de8:	441a      	add	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	e016      	b.n	8003e1e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	0c5b      	lsrs	r3, r3, #17
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2b06      	cmp	r3, #6
 8003dfa:	d110      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e02:	2208      	movs	r2, #8
 8003e04:	4619      	mov	r1, r3
 8003e06:	6a38      	ldr	r0, [r7, #32]
 8003e08:	f006 fbf8 	bl	800a5fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e18:	441a      	add	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0210 	orr.w	r2, r2, #16
 8003e2c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f006 fd76 	bl	800a924 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e42:	f040 80a7 	bne.w	8003f94 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f006 fd7b 	bl	800a94a <USB_ReadDevAllOutEpInterrupt>
 8003e54:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e56:	e099      	b.n	8003f8c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 808e 	beq.w	8003f80 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f006 fd9f 	bl	800a9b2 <USB_ReadDevOutEPInterrupt>
 8003e74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2301      	movs	r3, #1
 8003e90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fe7d 	bl	8004b94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 feb9 	bl	8004c30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d030      	beq.n	8003f46 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d109      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f02:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	3304      	adds	r3, #4
 8003f18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	78db      	ldrb	r3, [r3, #3]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f00c fc46 	bl	80107c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2302      	movs	r3, #2
 8003f44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2320      	movs	r3, #32
 8003f60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	3301      	adds	r3, #1
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f47f af62 	bne.w	8003e58 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f006 fcc3 	bl	800a924 <USB_ReadInterrupts>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fa8:	f040 80a4 	bne.w	80040f4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f006 fce4 	bl	800a97e <USB_ReadDevAllInEpInterrupt>
 8003fb6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fbc:	e096      	b.n	80040ec <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 808b 	beq.w	80040e0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f006 fd0a 	bl	800a9ee <USB_ReadDevInEPInterrupt>
 8003fda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d020      	beq.n	8004028 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69f9      	ldr	r1, [r7, #28]
 8004002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004006:	4013      	ands	r3, r2
 8004008:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	2301      	movs	r3, #1
 800401a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f00c fb37 	bl	8010696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	461a      	mov	r2, r3
 8004040:	2308      	movs	r3, #8
 8004042:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	2310      	movs	r3, #16
 800405e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	461a      	mov	r2, r3
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d023      	beq.n	80040ce <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004088:	6a38      	ldr	r0, [r7, #32]
 800408a:	f005 fda1 	bl	8009bd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3338      	adds	r3, #56	; 0x38
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	3304      	adds	r3, #4
 80040a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	78db      	ldrb	r3, [r3, #3]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d108      	bne.n	80040bc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2200      	movs	r2, #0
 80040ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f00c fb94 	bl	80107e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c8:	461a      	mov	r2, r3
 80040ca:	2302      	movs	r3, #2
 80040cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fcd2 	bl	8004a84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	3301      	adds	r3, #1
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f47f af65 	bne.w	8003fbe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f006 fc13 	bl	800a924 <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004108:	d122      	bne.n	8004150 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004124:	2b01      	cmp	r3, #1
 8004126:	d108      	bne.n	800413a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004130:	2100      	movs	r1, #0
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f00c fdc8 	bl	8010cc8 <HAL_PCDEx_LPM_Callback>
 8004138:	e002      	b.n	8004140 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f00c fb18 	bl	8010770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800414e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f006 fbe5 	bl	800a924 <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004164:	d112      	bne.n	800418c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d102      	bne.n	800417c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f00c fad4 	bl	8010724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800418a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f006 fbc7 	bl	800a924 <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800419c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a0:	d121      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80041b0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	f003 020f 	and.w	r2, r3, #15
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80041d6:	2101      	movs	r1, #1
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f00c fd75 	bl	8010cc8 <HAL_PCDEx_LPM_Callback>
 80041de:	e002      	b.n	80041e6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f00c fa9f 	bl	8010724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f006 fb9a 	bl	800a924 <USB_ReadInterrupts>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	f040 80b5 	bne.w	8004368 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2110      	movs	r1, #16
 8004218:	4618      	mov	r0, r3
 800421a:	f005 fcd9 	bl	8009bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004222:	e046      	b.n	80042b2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	461a      	mov	r2, r3
 8004232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004236:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004256:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800426a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800428a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	3301      	adds	r3, #1
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d3b3      	bcc.n	8004224 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d016      	beq.n	8004306 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e8:	f043 030b 	orr.w	r3, r3, #11
 80042ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fe:	f043 030b 	orr.w	r3, r3, #11
 8004302:	6453      	str	r3, [r2, #68]	; 0x44
 8004304:	e015      	b.n	8004332 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004318:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800431c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432c:	f043 030b 	orr.w	r3, r3, #11
 8004330:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004340:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004344:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f006 fbaa 	bl	800aaac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f006 fad9 	bl	800a924 <USB_ReadInterrupts>
 8004372:	4603      	mov	r3, r0
 8004374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437c:	d124      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f006 fb6f 	bl	800aa66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f005 fc9c 	bl	8009cca <USB_GetDevSpeed>
 8004392:	4603      	mov	r3, r0
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681c      	ldr	r4, [r3, #0]
 800439e:	f001 faed 	bl	800597c <HAL_RCC_GetHCLKFreq>
 80043a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	4620      	mov	r0, r4
 80043ae:	f005 f9c3 	bl	8009738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f00c f997 	bl	80106e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 faa9 	bl	800a924 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d10a      	bne.n	80043f2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f00c f974 	bl	80106ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f002 0208 	and.w	r2, r2, #8
 80043f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f006 fa94 	bl	800a924 <USB_ReadInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d122      	bne.n	800444c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004412:	2301      	movs	r3, #1
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
 8004416:	e014      	b.n	8004442 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 faf3 	bl	8004a22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	3301      	adds	r3, #1
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	429a      	cmp	r2, r3
 800444a:	d3e5      	bcc.n	8004418 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f006 fa67 	bl	800a924 <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800445c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004460:	d13b      	bne.n	80044da <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004462:	2301      	movs	r3, #1
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
 8004466:	e02b      	b.n	80044c0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3340      	adds	r3, #64	; 0x40
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d115      	bne.n	80044ba <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800448e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004490:	2b00      	cmp	r3, #0
 8004492:	da12      	bge.n	80044ba <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	333f      	adds	r3, #63	; 0x3f
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fab4 	bl	8004a22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	3301      	adds	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3ce      	bcc.n	8004468 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80044d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f006 fa20 	bl	800a924 <USB_ReadInterrupts>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ee:	d155      	bne.n	800459c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f0:	2301      	movs	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	e045      	b.n	8004582 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d12e      	bne.n	800457c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800451e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004520:	2b00      	cmp	r3, #0
 8004522:	da2b      	bge.n	800457c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004530:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004534:	429a      	cmp	r2, r3
 8004536:	d121      	bne.n	800457c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004578:	6053      	str	r3, [r2, #4]
            break;
 800457a:	e007      	b.n	800458c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	3301      	adds	r3, #1
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	429a      	cmp	r2, r3
 800458a:	d3b4      	bcc.n	80044f6 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800459a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f006 f9bf 	bl	800a924 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d10a      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f00c f928 	bl	8010808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80045c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f006 f9a9 	bl	800a924 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d115      	bne.n	8004608 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f00c f918 	bl	8010824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e000      	b.n	8004608 <HAL_PCD_IRQHandler+0x920>
      return;
 8004606:	bf00      	nop
    }
  }
}
 8004608:	3734      	adds	r7, #52	; 0x34
 800460a:	46bd      	mov	sp, r7
 800460c:	bd90      	pop	{r4, r7, pc}

0800460e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_PCD_SetAddress+0x1a>
 8004624:	2302      	movs	r3, #2
 8004626:	e013      	b.n	8004650 <HAL_PCD_SetAddress+0x42>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f006 f907 	bl	800a854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	461a      	mov	r2, r3
 8004666:	4603      	mov	r3, r0
 8004668:	70fb      	strb	r3, [r7, #3]
 800466a:	460b      	mov	r3, r1
 800466c:	803b      	strh	r3, [r7, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da0f      	bge.n	800469e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3338      	adds	r3, #56	; 0x38
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	3304      	adds	r3, #4
 8004694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	705a      	strb	r2, [r3, #1]
 800469c:	e00f      	b.n	80046be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	3304      	adds	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046ca:	883a      	ldrh	r2, [r7, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	78ba      	ldrb	r2, [r7, #2]
 80046d4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046e8:	78bb      	ldrb	r3, [r7, #2]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d102      	bne.n	80046f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_PCD_EP_Open+0xaa>
 80046fe:	2302      	movs	r3, #2
 8004700:	e00e      	b.n	8004720 <HAL_PCD_EP_Open+0xc8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	4618      	mov	r0, r3
 8004712:	f005 faf9 	bl	8009d08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800471e:	7afb      	ldrb	r3, [r7, #11]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	da0f      	bge.n	800475c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	f003 020f 	and.w	r2, r3, #15
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	3338      	adds	r3, #56	; 0x38
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	3304      	adds	r3, #4
 8004752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	705a      	strb	r2, [r3, #1]
 800475a:	e00f      	b.n	800477c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	3304      	adds	r3, #4
 8004774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	b2da      	uxtb	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_PCD_EP_Close+0x6e>
 8004792:	2302      	movs	r3, #2
 8004794:	e00e      	b.n	80047b4 <HAL_PCD_EP_Close+0x8c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f005 fb37 	bl	8009e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	460b      	mov	r3, r1
 80047ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047cc:	7afb      	ldrb	r3, [r7, #11]
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	3304      	adds	r3, #4
 80047e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2200      	movs	r2, #0
 80047fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	b2da      	uxtb	r2, r3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6979      	ldr	r1, [r7, #20]
 8004810:	4618      	mov	r0, r3
 8004812:	f005 fbdd 	bl	8009fd0 <USB_EPStartXfer>

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	f003 020f 	and.w	r2, r3, #15
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	460b      	mov	r3, r1
 800485e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004860:	7afb      	ldrb	r3, [r7, #11]
 8004862:	f003 020f 	and.w	r2, r3, #15
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3338      	adds	r3, #56	; 0x38
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2200      	movs	r2, #0
 8004888:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2201      	movs	r2, #1
 800488e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004890:	7afb      	ldrb	r3, [r7, #11]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	b2da      	uxtb	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f005 fb94 	bl	8009fd0 <USB_EPStartXfer>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 020f 	and.w	r2, r3, #15
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d901      	bls.n	80048d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04e      	b.n	800496e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	da0f      	bge.n	80048f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	3338      	adds	r3, #56	; 0x38
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	3304      	adds	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	705a      	strb	r2, [r3, #1]
 80048f6:	e00d      	b.n	8004914 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	3304      	adds	r3, #4
 800490c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_PCD_EP_SetStall+0x82>
 8004930:	2302      	movs	r3, #2
 8004932:	e01c      	b.n	800496e <HAL_PCD_EP_SetStall+0xbc>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	4618      	mov	r0, r3
 8004944:	f005 feb2 	bl	800a6ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f006 f8a4 	bl	800aaac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	f003 020f 	and.w	r2, r3, #15
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d901      	bls.n	8004994 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e042      	b.n	8004a1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da0f      	bge.n	80049bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	3338      	adds	r3, #56	; 0x38
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00f      	b.n	80049dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_PCD_EP_ClrStall+0x86>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e00e      	b.n	8004a1a <HAL_PCD_EP_ClrStall+0xa4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f005 febc 	bl	800a788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da0c      	bge.n	8004a50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 020f 	and.w	r2, r3, #15
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	3338      	adds	r3, #56	; 0x38
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e00c      	b.n	8004a6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	f003 020f 	and.w	r2, r3, #15
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f005 fcdf 	bl	800a434 <USB_EPStopXfer>
 8004a76:	4603      	mov	r3, r0
 8004a78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3338      	adds	r3, #56	; 0x38
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d901      	bls.n	8004abc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e067      	b.n	8004b8c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d902      	bls.n	8004ad8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3303      	adds	r3, #3
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ae0:	e026      	b.n	8004b30 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d902      	bls.n	8004afe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3303      	adds	r3, #3
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68d9      	ldr	r1, [r3, #12]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f005 fd38 	bl	800a588 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	441a      	add	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	441a      	add	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d809      	bhi.n	8004b5a <PCD_WriteEmptyTxFifo+0xd6>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d203      	bcs.n	8004b5a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1c3      	bne.n	8004ae2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d811      	bhi.n	8004b8a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	6939      	ldr	r1, [r7, #16]
 8004b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b86:	4013      	ands	r3, r2
 8004b88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	333c      	adds	r3, #60	; 0x3c
 8004bac:	3304      	adds	r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <PCD_EP_OutXfrComplete_int+0x98>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d124      	bne.n	8004c14 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	6093      	str	r3, [r2, #8]
 8004be8:	e01a      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	2320      	movs	r3, #32
 8004c04:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f00b fd27 	bl	8010660 <HAL_PCD_DataOutStageCallback>
 8004c12:	e005      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f00b fd20 	bl	8010660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	4f54310a 	.word	0x4f54310a

08004c30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	333c      	adds	r3, #60	; 0x3c
 8004c48:	3304      	adds	r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d90e      	bls.n	8004c84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f00b fcd9 	bl	801063c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	4f54300a 	.word	0x4f54300a

08004c98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cb6:	883b      	ldrh	r3, [r7, #0]
 8004cb8:	0419      	lsls	r1, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc4:	e028      	b.n	8004d18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e00d      	b.n	8004cf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	3340      	adds	r3, #64	; 0x40
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d3ec      	bcc.n	8004cda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d00:	883b      	ldrh	r3, [r7, #0]
 8004d02:	0418      	lsls	r0, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	4302      	orrs	r2, r0
 8004d10:	3340      	adds	r3, #64	; 0x40
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	f043 0303 	orr.w	r3, r3, #3
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d94:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40007000 	.word	0x40007000

08004dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dba:	d130      	bne.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dbc:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc8:	d038      	beq.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2232      	movs	r2, #50	; 0x32
 8004de0:	fb02 f303 	mul.w	r3, r2, r3
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	0c9b      	lsrs	r3, r3, #18
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004df0:	e002      	b.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e04:	d102      	bne.n	8004e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f2      	bne.n	8004df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e18:	d110      	bne.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e00f      	b.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d007      	beq.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e34:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	20000000 	.word	0x20000000
 8004e54:	431bde83 	.word	0x431bde83

08004e58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e66:	6053      	str	r3, [r2, #4]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40007000 	.word	0x40007000

08004e78 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	4a05      	ldr	r2, [pc, #20]	; (8004ea8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004e98:	bf30      	wfi
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40007000 	.word	0x40007000
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e3ca      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ebe:	4b97      	ldr	r3, [pc, #604]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec8:	4b94      	ldr	r3, [pc, #592]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80e4 	beq.w	80050a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x4a>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b0c      	cmp	r3, #12
 8004eea:	f040 808b 	bne.w	8005004 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	f040 8087 	bne.w	8005004 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ef6:	4b89      	ldr	r3, [pc, #548]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_RCC_OscConfig+0x62>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e3a2      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	4b82      	ldr	r3, [pc, #520]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <HAL_RCC_OscConfig+0x7c>
 8004f1e:	4b7f      	ldr	r3, [pc, #508]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f26:	e005      	b.n	8004f34 <HAL_RCC_OscConfig+0x88>
 8004f28:	4b7c      	ldr	r3, [pc, #496]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d223      	bcs.n	8004f80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fd55 	bl	80059ec <RCC_SetFlashLatencyFromMSIRange>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e383      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f4c:	4b73      	ldr	r3, [pc, #460]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a72      	ldr	r2, [pc, #456]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f52:	f043 0308 	orr.w	r3, r3, #8
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b70      	ldr	r3, [pc, #448]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	496d      	ldr	r1, [pc, #436]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f6a:	4b6c      	ldr	r3, [pc, #432]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	4968      	ldr	r1, [pc, #416]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	604b      	str	r3, [r1, #4]
 8004f7e:	e025      	b.n	8004fcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f80:	4b66      	ldr	r3, [pc, #408]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a65      	ldr	r2, [pc, #404]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f86:	f043 0308 	orr.w	r3, r3, #8
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4960      	ldr	r1, [pc, #384]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f9e:	4b5f      	ldr	r3, [pc, #380]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	495b      	ldr	r1, [pc, #364]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d109      	bne.n	8004fcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fd15 	bl	80059ec <RCC_SetFlashLatencyFromMSIRange>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e343      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fcc:	f000 fc4a 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b52      	ldr	r3, [pc, #328]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	4950      	ldr	r1, [pc, #320]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	4a4e      	ldr	r2, [pc, #312]	; (8005124 <HAL_RCC_OscConfig+0x278>)
 8004fea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fec:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <HAL_RCC_OscConfig+0x27c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd f965 	bl	80022c0 <HAL_InitTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d052      	beq.n	80050a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	e327      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d032      	beq.n	8005072 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800500c:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005018:	f7fd f9a2 	bl	8002360 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005020:	f7fd f99e 	bl	8002360 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e310      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005032:	4b3a      	ldr	r3, [pc, #232]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800503e:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005044:	f043 0308 	orr.w	r3, r3, #8
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	4931      	ldr	r1, [pc, #196]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800505c:	4b2f      	ldr	r3, [pc, #188]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	492c      	ldr	r1, [pc, #176]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
 8005070:	e01a      	b.n	80050a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a29      	ldr	r2, [pc, #164]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800507e:	f7fd f96f 	bl	8002360 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005086:	f7fd f96b 	bl	8002360 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e2dd      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005098:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x1da>
 80050a4:	e000      	b.n	80050a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d074      	beq.n	800519e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d005      	beq.n	80050c6 <HAL_RCC_OscConfig+0x21a>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d10e      	bne.n	80050de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d10b      	bne.n	80050de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c6:	4b15      	ldr	r3, [pc, #84]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d064      	beq.n	800519c <HAL_RCC_OscConfig+0x2f0>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d160      	bne.n	800519c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e2ba      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d106      	bne.n	80050f6 <HAL_RCC_OscConfig+0x24a>
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e026      	b.n	8005144 <HAL_RCC_OscConfig+0x298>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050fe:	d115      	bne.n	800512c <HAL_RCC_OscConfig+0x280>
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a05      	ldr	r2, [pc, #20]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a02      	ldr	r2, [pc, #8]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e014      	b.n	8005144 <HAL_RCC_OscConfig+0x298>
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	08015728 	.word	0x08015728
 8005124:	20000000 	.word	0x20000000
 8005128:	20000004 	.word	0x20000004
 800512c:	4ba0      	ldr	r3, [pc, #640]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a9f      	ldr	r2, [pc, #636]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a9c      	ldr	r2, [pc, #624]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fd f908 	bl	8002360 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fd f904 	bl	8002360 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e276      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005166:	4b92      	ldr	r3, [pc, #584]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x2a8>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fd f8f4 	bl	8002360 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd f8f0 	bl	8002360 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e262      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800518e:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x2d0>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d060      	beq.n	800526c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_OscConfig+0x310>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d116      	bne.n	80051ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051bc:	4b7c      	ldr	r3, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_OscConfig+0x328>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e23f      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b76      	ldr	r3, [pc, #472]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	4973      	ldr	r1, [pc, #460]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e8:	e040      	b.n	800526c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d023      	beq.n	800523a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f2:	4b6f      	ldr	r3, [pc, #444]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6e      	ldr	r2, [pc, #440]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fd f8af 	bl	8002360 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005206:	f7fd f8ab 	bl	8002360 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e21d      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005218:	4b65      	ldr	r3, [pc, #404]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b62      	ldr	r3, [pc, #392]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	495f      	ldr	r1, [pc, #380]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	e018      	b.n	800526c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523a:	4b5d      	ldr	r3, [pc, #372]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a5c      	ldr	r2, [pc, #368]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fd f88b 	bl	8002360 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524e:	f7fd f887 	bl	8002360 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e1f9      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005260:	4b53      	ldr	r3, [pc, #332]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d03c      	beq.n	80052f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01c      	beq.n	80052ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005280:	4b4b      	ldr	r3, [pc, #300]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005286:	4a4a      	ldr	r2, [pc, #296]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fd f866 	bl	8002360 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005298:	f7fd f862 	bl	8002360 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1d4      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052aa:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <HAL_RCC_OscConfig+0x3ec>
 80052b8:	e01b      	b.n	80052f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ba:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c0:	4a3b      	ldr	r2, [pc, #236]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fd f849 	bl	8002360 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d2:	f7fd f845 	bl	8002360 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e1b7      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e4:	4b32      	ldr	r3, [pc, #200]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ef      	bne.n	80052d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a6 	beq.w	800544c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005304:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d118      	bne.n	800536a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 800533e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005344:	f7fd f80c 	bl	8002360 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534c:	f7fd f808 	bl	8002360 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e17a      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535e:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d108      	bne.n	8005384 <HAL_RCC_OscConfig+0x4d8>
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005382:	e029      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d115      	bne.n	80053b8 <HAL_RCC_OscConfig+0x50c>
 800538c:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ac:	e014      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
 80053b8:	4b9c      	ldr	r3, [pc, #624]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a9b      	ldr	r2, [pc, #620]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053c8:	4b98      	ldr	r3, [pc, #608]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	4a97      	ldr	r2, [pc, #604]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fc ffbe 	bl	8002360 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fc ffba 	bl	8002360 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e12a      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fe:	4b8b      	ldr	r3, [pc, #556]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ed      	beq.n	80053e8 <HAL_RCC_OscConfig+0x53c>
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fc ffa7 	bl	8002360 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fc ffa3 	bl	8002360 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	; 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e113      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800542c:	4b7f      	ldr	r3, [pc, #508]	; (800562c <HAL_RCC_OscConfig+0x780>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ed      	bne.n	8005416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b7a      	ldr	r3, [pc, #488]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	4a79      	ldr	r2, [pc, #484]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80fe 	beq.w	8005652 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	2b02      	cmp	r3, #2
 800545c:	f040 80d0 	bne.w	8005600 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005460:	4b72      	ldr	r3, [pc, #456]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f003 0203 	and.w	r2, r3, #3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	429a      	cmp	r2, r3
 8005472:	d130      	bne.n	80054d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	3b01      	subs	r3, #1
 8005480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d127      	bne.n	80054d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005490:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d11f      	bne.n	80054d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a0:	2a07      	cmp	r2, #7
 80054a2:	bf14      	ite	ne
 80054a4:	2201      	movne	r2, #1
 80054a6:	2200      	moveq	r2, #0
 80054a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d113      	bne.n	80054d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	3b01      	subs	r3, #1
 80054bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d109      	bne.n	80054d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	3b01      	subs	r3, #1
 80054d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d06e      	beq.n	80055b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	d069      	beq.n	80055b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054dc:	4b53      	ldr	r3, [pc, #332]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054e8:	4b50      	ldr	r3, [pc, #320]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0ad      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054f8:	4b4c      	ldr	r3, [pc, #304]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a4b      	ldr	r2, [pc, #300]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80054fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005502:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005504:	f7fc ff2c 	bl	8002360 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800550c:	f7fc ff28 	bl	8002360 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e09a      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551e:	4b43      	ldr	r3, [pc, #268]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800552a:	4b40      	ldr	r3, [pc, #256]	; (800562c <HAL_RCC_OscConfig+0x780>)
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	4b40      	ldr	r3, [pc, #256]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005530:	4013      	ands	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800553a:	3a01      	subs	r2, #1
 800553c:	0112      	lsls	r2, r2, #4
 800553e:	4311      	orrs	r1, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005544:	0212      	lsls	r2, r2, #8
 8005546:	4311      	orrs	r1, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800554c:	0852      	lsrs	r2, r2, #1
 800554e:	3a01      	subs	r2, #1
 8005550:	0552      	lsls	r2, r2, #21
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005558:	0852      	lsrs	r2, r2, #1
 800555a:	3a01      	subs	r2, #1
 800555c:	0652      	lsls	r2, r2, #25
 800555e:	4311      	orrs	r1, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005564:	0912      	lsrs	r2, r2, #4
 8005566:	0452      	lsls	r2, r2, #17
 8005568:	430a      	orrs	r2, r1
 800556a:	4930      	ldr	r1, [pc, #192]	; (800562c <HAL_RCC_OscConfig+0x780>)
 800556c:	4313      	orrs	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005570:	4b2e      	ldr	r3, [pc, #184]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800557a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800557c:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_RCC_OscConfig+0x780>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a2a      	ldr	r2, [pc, #168]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005588:	f7fc feea 	bl	8002360 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005590:	f7fc fee6 	bl	8002360 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e058      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a2:	4b22      	ldr	r3, [pc, #136]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ae:	e050      	b.n	8005652 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e04f      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b4:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d148      	bne.n	8005652 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055c0:	4b1a      	ldr	r3, [pc, #104]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055d8:	f7fc fec2 	bl	8002360 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc febe 	bl	8002360 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e030      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	4b0e      	ldr	r3, [pc, #56]	; (800562c <HAL_RCC_OscConfig+0x780>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x734>
 80055fe:	e028      	b.n	8005652 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d023      	beq.n	800564e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_RCC_OscConfig+0x780>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a08      	ldr	r2, [pc, #32]	; (800562c <HAL_RCC_OscConfig+0x780>)
 800560c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005612:	f7fc fea5 	bl	8002360 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005618:	e00c      	b.n	8005634 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561a:	f7fc fea1 	bl	8002360 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d905      	bls.n	8005634 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e013      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
 800562c:	40021000 	.word	0x40021000
 8005630:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005634:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_OscConfig+0x7b0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ec      	bne.n	800561a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_RCC_OscConfig+0x7b0>)
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	4905      	ldr	r1, [pc, #20]	; (800565c <HAL_RCC_OscConfig+0x7b0>)
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCC_OscConfig+0x7b4>)
 8005648:	4013      	ands	r3, r2
 800564a:	60cb      	str	r3, [r1, #12]
 800564c:	e001      	b.n	8005652 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40021000 	.word	0x40021000
 8005660:	feeefffc 	.word	0xfeeefffc

08005664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0e7      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005678:	4b75      	ldr	r3, [pc, #468]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d910      	bls.n	80056a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b72      	ldr	r3, [pc, #456]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 0207 	bic.w	r2, r3, #7
 800568e:	4970      	ldr	r1, [pc, #448]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005696:	4b6e      	ldr	r3, [pc, #440]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0cf      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d010      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	4b66      	ldr	r3, [pc, #408]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d908      	bls.n	80056d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c4:	4b63      	ldr	r3, [pc, #396]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4960      	ldr	r1, [pc, #384]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d04c      	beq.n	800577c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d107      	bne.n	80056fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ea:	4b5a      	ldr	r3, [pc, #360]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d121      	bne.n	800573a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e0a6      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d107      	bne.n	8005712 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005702:	4b54      	ldr	r3, [pc, #336]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d115      	bne.n	800573a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e09a      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800571a:	4b4e      	ldr	r3, [pc, #312]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e08e      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572a:	4b4a      	ldr	r3, [pc, #296]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e086      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800573a:	4b46      	ldr	r3, [pc, #280]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4943      	ldr	r1, [pc, #268]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 8005748:	4313      	orrs	r3, r2
 800574a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800574c:	f7fc fe08 	bl	8002360 <HAL_GetTick>
 8005750:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	e00a      	b.n	800576a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005754:	f7fc fe04 	bl	8002360 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e06e      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	4b3a      	ldr	r3, [pc, #232]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 020c 	and.w	r2, r3, #12
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	429a      	cmp	r2, r3
 800577a:	d1eb      	bne.n	8005754 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005794:	429a      	cmp	r2, r3
 8005796:	d208      	bcs.n	80057aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005798:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	492b      	ldr	r1, [pc, #172]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057aa:	4b29      	ldr	r3, [pc, #164]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d210      	bcs.n	80057da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f023 0207 	bic.w	r2, r3, #7
 80057c0:	4923      	ldr	r1, [pc, #140]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c8:	4b21      	ldr	r3, [pc, #132]	; (8005850 <HAL_RCC_ClockConfig+0x1ec>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d001      	beq.n	80057da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e036      	b.n	8005848 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d008      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e6:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	4918      	ldr	r1, [pc, #96]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005804:	4b13      	ldr	r3, [pc, #76]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4910      	ldr	r1, [pc, #64]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005818:	f000 f824 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <HAL_RCC_ClockConfig+0x1f0>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	490b      	ldr	r1, [pc, #44]	; (8005858 <HAL_RCC_ClockConfig+0x1f4>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
 8005834:	4a09      	ldr	r2, [pc, #36]	; (800585c <HAL_RCC_ClockConfig+0x1f8>)
 8005836:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCC_ClockConfig+0x1fc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f7fc fd3f 	bl	80022c0 <HAL_InitTick>
 8005842:	4603      	mov	r3, r0
 8005844:	72fb      	strb	r3, [r7, #11]

  return status;
 8005846:	7afb      	ldrb	r3, [r7, #11]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40022000 	.word	0x40022000
 8005854:	40021000 	.word	0x40021000
 8005858:	08015728 	.word	0x08015728
 800585c:	20000000 	.word	0x20000000
 8005860:	20000004 	.word	0x20000004

08005864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005872:	4b3e      	ldr	r3, [pc, #248]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800587c:	4b3b      	ldr	r3, [pc, #236]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x34>
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d121      	bne.n	80058d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d11e      	bne.n	80058d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005898:	4b34      	ldr	r3, [pc, #208]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058a4:	4b31      	ldr	r3, [pc, #196]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 80058a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	e005      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058b4:	4b2d      	ldr	r3, [pc, #180]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058d4:	e00a      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d102      	bne.n	80058e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058dc:	4b25      	ldr	r3, [pc, #148]	; (8005974 <HAL_RCC_GetSysClockFreq+0x110>)
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e004      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058e8:	4b23      	ldr	r3, [pc, #140]	; (8005978 <HAL_RCC_GetSysClockFreq+0x114>)
 80058ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d134      	bne.n	800595c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d003      	beq.n	800590a <HAL_RCC_GetSysClockFreq+0xa6>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d003      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0xac>
 8005908:	e005      	b.n	8005916 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800590a:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <HAL_RCC_GetSysClockFreq+0x110>)
 800590c:	617b      	str	r3, [r7, #20]
      break;
 800590e:	e005      	b.n	800591c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_GetSysClockFreq+0x114>)
 8005912:	617b      	str	r3, [r7, #20]
      break;
 8005914:	e002      	b.n	800591c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	617b      	str	r3, [r7, #20]
      break;
 800591a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	3301      	adds	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	fb03 f202 	mul.w	r2, r3, r2
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <HAL_RCC_GetSysClockFreq+0x108>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	0e5b      	lsrs	r3, r3, #25
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	3301      	adds	r3, #1
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800595c:	69bb      	ldr	r3, [r7, #24]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3724      	adds	r7, #36	; 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	08015740 	.word	0x08015740
 8005974:	00f42400 	.word	0x00f42400
 8005978:	00b71b00 	.word	0x00b71b00

0800597c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCC_GetHCLKFreq+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000000 	.word	0x20000000

08005994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005998:	f7ff fff0 	bl	800597c <HAL_RCC_GetHCLKFreq>
 800599c:	4602      	mov	r2, r0
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4904      	ldr	r1, [pc, #16]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	08015738 	.word	0x08015738

080059c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059c4:	f7ff ffda 	bl	800597c <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0adb      	lsrs	r3, r3, #11
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4904      	ldr	r1, [pc, #16]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40021000 	.word	0x40021000
 80059e8:	08015738 	.word	0x08015738

080059ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059f8:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a04:	f7ff f9c4 	bl	8004d90 <HAL_PWREx_GetVoltageRange>
 8005a08:	6178      	str	r0, [r7, #20]
 8005a0a:	e014      	b.n	8005a36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	4a24      	ldr	r2, [pc, #144]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6593      	str	r3, [r2, #88]	; 0x58
 8005a18:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a24:	f7ff f9b4 	bl	8004d90 <HAL_PWREx_GetVoltageRange>
 8005a28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3c:	d10b      	bne.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d919      	bls.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2ba0      	cmp	r3, #160	; 0xa0
 8005a48:	d902      	bls.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	e013      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a50:	2301      	movs	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	e010      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d902      	bls.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e00a      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d102      	bne.n	8005a6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a68:	2302      	movs	r3, #2
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e004      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b70      	cmp	r3, #112	; 0x70
 8005a72:	d101      	bne.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a74:	2301      	movs	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 0207 	bic.w	r2, r3, #7
 8005a80:	4909      	ldr	r1, [pc, #36]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d001      	beq.n	8005a9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40022000 	.word	0x40022000

08005aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d041      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ad0:	d02a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ad2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ad6:	d824      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005adc:	d008      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ae2:	d81e      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aec:	d010      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aee:	e018      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005af0:	4b86      	ldr	r3, [pc, #536]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a85      	ldr	r2, [pc, #532]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005afc:	e015      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f829 	bl	8006b5c <RCCEx_PLLSAI1_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b0e:	e00c      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3320      	adds	r3, #32
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 f914 	bl	8006d44 <RCCEx_PLLSAI2_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b20:	e003      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	74fb      	strb	r3, [r7, #19]
      break;
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b30:	4b76      	ldr	r3, [pc, #472]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3e:	4973      	ldr	r1, [pc, #460]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b46:	e001      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d041      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b60:	d02a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b66:	d824      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6c:	d008      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b72:	d81e      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d010      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b7e:	e018      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b80:	4b62      	ldr	r3, [pc, #392]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a61      	ldr	r2, [pc, #388]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b8c:	e015      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3304      	adds	r3, #4
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 ffe1 	bl	8006b5c <RCCEx_PLLSAI1_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b9e:	e00c      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3320      	adds	r3, #32
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f8cc 	bl	8006d44 <RCCEx_PLLSAI2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bb0:	e003      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	74fb      	strb	r3, [r7, #19]
      break;
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bba:	7cfb      	ldrb	r3, [r7, #19]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bc0:	4b52      	ldr	r3, [pc, #328]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bce:	494f      	ldr	r1, [pc, #316]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bd6:	e001      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a0 	beq.w	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bee:	4b47      	ldr	r3, [pc, #284]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c04:	4b41      	ldr	r3, [pc, #260]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	4a40      	ldr	r2, [pc, #256]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c10:	4b3e      	ldr	r3, [pc, #248]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c20:	4b3b      	ldr	r3, [pc, #236]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c2c:	f7fc fb98 	bl	8002360 <HAL_GetTick>
 8005c30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c32:	e009      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c34:	f7fc fb94 	bl	8002360 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d902      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	74fb      	strb	r3, [r7, #19]
        break;
 8005c46:	e005      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c48:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ef      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c54:	7cfb      	ldrb	r3, [r7, #19]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d15c      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c5a:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01f      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d019      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c78:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca4:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fc fb53 	bl	8002360 <HAL_GetTick>
 8005cba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cbc:	e00b      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fc fb4f 	bl	8002360 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d902      	bls.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	74fb      	strb	r3, [r7, #19]
            break;
 8005cd4:	e006      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ec      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfa:	4904      	ldr	r1, [pc, #16]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d02:	e009      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
 8005d06:	74bb      	strb	r3, [r7, #18]
 8005d08:	e006      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	7cfb      	ldrb	r3, [r7, #19]
 8005d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d18:	7c7b      	ldrb	r3, [r7, #17]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1e:	4b9e      	ldr	r3, [pc, #632]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	4a9d      	ldr	r2, [pc, #628]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d36:	4b98      	ldr	r3, [pc, #608]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f023 0203 	bic.w	r2, r3, #3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	4994      	ldr	r1, [pc, #592]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d58:	4b8f      	ldr	r3, [pc, #572]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f023 020c 	bic.w	r2, r3, #12
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	498c      	ldr	r1, [pc, #560]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d7a:	4b87      	ldr	r3, [pc, #540]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	4983      	ldr	r1, [pc, #524]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d9c:	4b7e      	ldr	r3, [pc, #504]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	497b      	ldr	r1, [pc, #492]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dbe:	4b76      	ldr	r3, [pc, #472]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dcc:	4972      	ldr	r1, [pc, #456]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005de0:	4b6d      	ldr	r3, [pc, #436]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dee:	496a      	ldr	r1, [pc, #424]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e02:	4b65      	ldr	r3, [pc, #404]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	4961      	ldr	r1, [pc, #388]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e24:	4b5c      	ldr	r3, [pc, #368]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e32:	4959      	ldr	r1, [pc, #356]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e46:	4b54      	ldr	r3, [pc, #336]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	4950      	ldr	r1, [pc, #320]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e68:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	4948      	ldr	r1, [pc, #288]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e8a:	4b43      	ldr	r3, [pc, #268]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	493f      	ldr	r1, [pc, #252]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d028      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eac:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	4937      	ldr	r1, [pc, #220]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eca:	d106      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ecc:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a31      	ldr	r2, [pc, #196]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed6:	60d3      	str	r3, [r2, #12]
 8005ed8:	e011      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ee2:	d10c      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fe36 	bl	8006b5c <RCCEx_PLLSAI1_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005efa:	7cfb      	ldrb	r3, [r7, #19]
 8005efc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d028      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f0a:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	491f      	ldr	r1, [pc, #124]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f28:	d106      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f34:	60d3      	str	r3, [r2, #12]
 8005f36:	e011      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3304      	adds	r3, #4
 8005f46:	2101      	movs	r1, #1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fe07 	bl	8006b5c <RCCEx_PLLSAI1_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f52:	7cfb      	ldrb	r3, [r7, #19]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d02b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	4908      	ldr	r1, [pc, #32]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f86:	d109      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f88:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a02      	ldr	r2, [pc, #8]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f92:	60d3      	str	r3, [r2, #12]
 8005f94:	e014      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f96:	bf00      	nop
 8005f98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2101      	movs	r1, #1
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fdd5 	bl	8006b5c <RCCEx_PLLSAI1_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fb6:	7cfb      	ldrb	r3, [r7, #19]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fbc:	7cfb      	ldrb	r3, [r7, #19]
 8005fbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02f      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fda:	4928      	ldr	r1, [pc, #160]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fea:	d10d      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fdb2 	bl	8006b5c <RCCEx_PLLSAI1_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ffc:	7cfb      	ldrb	r3, [r7, #19]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d014      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006002:	7cfb      	ldrb	r3, [r7, #19]
 8006004:	74bb      	strb	r3, [r7, #18]
 8006006:	e011      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006010:	d10c      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3320      	adds	r3, #32
 8006016:	2102      	movs	r1, #2
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fe93 	bl	8006d44 <RCCEx_PLLSAI2_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006028:	7cfb      	ldrb	r3, [r7, #19]
 800602a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006046:	490d      	ldr	r1, [pc, #52]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800605a:	4b08      	ldr	r3, [pc, #32]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606a:	4904      	ldr	r1, [pc, #16]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006072:	7cbb      	ldrb	r3, [r7, #18]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000

08006080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006092:	d13e      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006094:	4bb2      	ldr	r3, [pc, #712]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a6:	d028      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ae:	f200 8542 	bhi.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b8:	d005      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c0:	d00e      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80060c2:	f000 bd38 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060c6:	4ba6      	ldr	r3, [pc, #664]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	f040 8532 	bne.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80060d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060da:	61fb      	str	r3, [r7, #28]
      break;
 80060dc:	f000 bd2d 	b.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80060e0:	4b9f      	ldr	r3, [pc, #636]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	f040 8527 	bne.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80060f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060f4:	61fb      	str	r3, [r7, #28]
      break;
 80060f6:	f000 bd22 	b.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060fa:	4b99      	ldr	r3, [pc, #612]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006106:	f040 851c 	bne.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800610a:	4b96      	ldr	r3, [pc, #600]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800610c:	61fb      	str	r3, [r7, #28]
      break;
 800610e:	f000 bd18 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006112:	4b93      	ldr	r3, [pc, #588]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d036      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d840      	bhi.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d003      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d020      	beq.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006134:	e039      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006136:	4b8a      	ldr	r3, [pc, #552]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d116      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006142:	4b87      	ldr	r3, [pc, #540]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800614e:	4b84      	ldr	r3, [pc, #528]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	e005      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800615a:	4b81      	ldr	r3, [pc, #516]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800615c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	4a80      	ldr	r2, [pc, #512]	; (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800616e:	e01f      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	61bb      	str	r3, [r7, #24]
      break;
 8006174:	e01c      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006176:	4b7a      	ldr	r3, [pc, #488]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006182:	d102      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006184:	4b79      	ldr	r3, [pc, #484]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8006186:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006188:	e012      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
      break;
 800618e:	e00f      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006190:	4b73      	ldr	r3, [pc, #460]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800619c:	d102      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800619e:	4b74      	ldr	r3, [pc, #464]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80061a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061a2:	e005      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
      break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
      break;
 80061ae:	bf00      	nop
    }

    switch(PeriphClk)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061b6:	f000 80dd 	beq.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061c0:	f200 84c1 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ca:	f000 80d3 	beq.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061d4:	f200 84b7 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061de:	f000 835f 	beq.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e8:	f200 84ad 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f2:	f000 847e 	beq.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fc:	f200 84a3 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006206:	f000 82cd 	beq.w	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006210:	f200 8499 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621a:	f000 80ab 	beq.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006224:	f200 848f 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622e:	f000 8090 	beq.w	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	f200 8485 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006242:	d07f      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624a:	f200 847c 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006254:	f000 8403 	beq.w	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625e:	f200 8472 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006268:	f000 83af 	beq.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006272:	f200 8468 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627c:	f000 8379 	beq.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006286:	f200 845e 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	f000 8344 	beq.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	f200 8456 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b20      	cmp	r3, #32
 800629e:	d84b      	bhi.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 844f 	beq.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	2b1f      	cmp	r3, #31
 80062ae:	f200 844a 	bhi.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080064a1 	.word	0x080064a1
 80062bc:	0800650f 	.word	0x0800650f
 80062c0:	08006b47 	.word	0x08006b47
 80062c4:	080065a3 	.word	0x080065a3
 80062c8:	08006b47 	.word	0x08006b47
 80062cc:	08006b47 	.word	0x08006b47
 80062d0:	08006b47 	.word	0x08006b47
 80062d4:	08006629 	.word	0x08006629
 80062d8:	08006b47 	.word	0x08006b47
 80062dc:	08006b47 	.word	0x08006b47
 80062e0:	08006b47 	.word	0x08006b47
 80062e4:	08006b47 	.word	0x08006b47
 80062e8:	08006b47 	.word	0x08006b47
 80062ec:	08006b47 	.word	0x08006b47
 80062f0:	08006b47 	.word	0x08006b47
 80062f4:	080066a1 	.word	0x080066a1
 80062f8:	08006b47 	.word	0x08006b47
 80062fc:	08006b47 	.word	0x08006b47
 8006300:	08006b47 	.word	0x08006b47
 8006304:	08006b47 	.word	0x08006b47
 8006308:	08006b47 	.word	0x08006b47
 800630c:	08006b47 	.word	0x08006b47
 8006310:	08006b47 	.word	0x08006b47
 8006314:	08006b47 	.word	0x08006b47
 8006318:	08006b47 	.word	0x08006b47
 800631c:	08006b47 	.word	0x08006b47
 8006320:	08006b47 	.word	0x08006b47
 8006324:	08006b47 	.word	0x08006b47
 8006328:	08006b47 	.word	0x08006b47
 800632c:	08006b47 	.word	0x08006b47
 8006330:	08006b47 	.word	0x08006b47
 8006334:	08006723 	.word	0x08006723
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	f000 82c1 	beq.w	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006340:	f000 bc01 	b.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800634a:	f000 fdd9 	bl	8006f00 <RCCEx_GetSAIxPeriphCLKFreq>
 800634e:	61f8      	str	r0, [r7, #28]
      break;
 8006350:	e3fa      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006352:	69b9      	ldr	r1, [r7, #24]
 8006354:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006358:	f000 fdd2 	bl	8006f00 <RCCEx_GetSAIxPeriphCLKFreq>
 800635c:	61f8      	str	r0, [r7, #28]
      break;
 800635e:	e3f3      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006360:	40021000 	.word	0x40021000
 8006364:	0005b8d8 	.word	0x0005b8d8
 8006368:	08015740 	.word	0x08015740
 800636c:	00f42400 	.word	0x00f42400
 8006370:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006374:	4ba9      	ldr	r3, [pc, #676]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006386:	d00c      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800638e:	d87f      	bhi.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006396:	d04e      	beq.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800639e:	d01d      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80063a0:	e076      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063a2:	4b9e      	ldr	r3, [pc, #632]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d172      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80063ae:	4b9b      	ldr	r3, [pc, #620]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80063ba:	4b98      	ldr	r3, [pc, #608]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	e005      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80063c6:	4b95      	ldr	r3, [pc, #596]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	4a93      	ldr	r2, [pc, #588]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80063d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d8:	61fb      	str	r3, [r7, #28]
          break;
 80063da:	e05b      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063dc:	4b8f      	ldr	r3, [pc, #572]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063e8:	d156      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80063ea:	4b8c      	ldr	r3, [pc, #560]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f6:	d14f      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063f8:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006402:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	fb03 f202 	mul.w	r2, r3, r2
 800640c:	4b83      	ldr	r3, [pc, #524]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	3301      	adds	r3, #1
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800641e:	4b7f      	ldr	r3, [pc, #508]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	0d5b      	lsrs	r3, r3, #21
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	3301      	adds	r3, #1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006432:	61fb      	str	r3, [r7, #28]
          break;
 8006434:	e030      	b.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006436:	4b79      	ldr	r3, [pc, #484]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006442:	d12b      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006444:	4b75      	ldr	r3, [pc, #468]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d124      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006452:	4b72      	ldr	r3, [pc, #456]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	fb03 f202 	mul.w	r2, r3, r2
 8006466:	4b6d      	ldr	r3, [pc, #436]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	3301      	adds	r3, #1
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006478:	4b68      	ldr	r3, [pc, #416]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	0d5b      	lsrs	r3, r3, #21
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	3301      	adds	r3, #1
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	fbb2 f3f3 	udiv	r3, r2, r3
 800648c:	61fb      	str	r3, [r7, #28]
          break;
 800648e:	e005      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8006490:	bf00      	nop
 8006492:	e359      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006494:	bf00      	nop
 8006496:	e357      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006498:	bf00      	nop
 800649a:	e355      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800649c:	bf00      	nop
        break;
 800649e:	e353      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064a0:	4b5e      	ldr	r3, [pc, #376]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d827      	bhi.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80064b2:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064d1 	.word	0x080064d1
 80064c0:	080064d9 	.word	0x080064d9
 80064c4:	080064ed 	.word	0x080064ed
          frequency = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7ff fa7a 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 80064cc:	61f8      	str	r0, [r7, #28]
          break;
 80064ce:	e01d      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80064d0:	f7ff f9c8 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80064d4:	61f8      	str	r0, [r7, #28]
          break;
 80064d6:	e019      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e4:	d10f      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80064e6:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80064e8:	61fb      	str	r3, [r7, #28]
          break;
 80064ea:	e00c      	b.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064ec:	4b4b      	ldr	r3, [pc, #300]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d107      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80064fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064fe:	61fb      	str	r3, [r7, #28]
          break;
 8006500:	e003      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8006502:	bf00      	nop
 8006504:	e320      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006506:	bf00      	nop
 8006508:	e31e      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800650a:	bf00      	nop
        break;
 800650c:	e31c      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800650e:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	f003 030c 	and.w	r3, r3, #12
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	d83a      	bhi.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006520:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	0800655d 	.word	0x0800655d
 800652c:	08006597 	.word	0x08006597
 8006530:	08006597 	.word	0x08006597
 8006534:	08006597 	.word	0x08006597
 8006538:	08006565 	.word	0x08006565
 800653c:	08006597 	.word	0x08006597
 8006540:	08006597 	.word	0x08006597
 8006544:	08006597 	.word	0x08006597
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006597 	.word	0x08006597
 8006550:	08006597 	.word	0x08006597
 8006554:	08006597 	.word	0x08006597
 8006558:	08006581 	.word	0x08006581
          frequency = HAL_RCC_GetPCLK1Freq();
 800655c:	f7ff fa1a 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006560:	61f8      	str	r0, [r7, #28]
          break;
 8006562:	e01d      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006564:	f7ff f97e 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8006568:	61f8      	str	r0, [r7, #28]
          break;
 800656a:	e019      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800656c:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006578:	d10f      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800657a:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800657c:	61fb      	str	r3, [r7, #28]
          break;
 800657e:	e00c      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006580:	4b26      	ldr	r3, [pc, #152]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d107      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800658e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006592:	61fb      	str	r3, [r7, #28]
          break;
 8006594:	e003      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006596:	bf00      	nop
 8006598:	e2d6      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800659a:	bf00      	nop
 800659c:	e2d4      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800659e:	bf00      	nop
        break;
 80065a0:	e2d2      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d021      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b30      	cmp	r3, #48	; 0x30
 80065b8:	d829      	bhi.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d011      	beq.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d823      	bhi.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d004      	beq.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80065d2:	e01c      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065d4:	f7ff f9de 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80065d8:	61f8      	str	r0, [r7, #28]
          break;
 80065da:	e01d      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80065dc:	f7ff f942 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80065e0:	61f8      	str	r0, [r7, #28]
          break;
 80065e2:	e019      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f0:	d10f      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80065f4:	61fb      	str	r3, [r7, #28]
          break;
 80065f6:	e00c      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b02      	cmp	r3, #2
 8006604:	d107      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660a:	61fb      	str	r3, [r7, #28]
          break;
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800660e:	bf00      	nop
 8006610:	e29a      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006612:	bf00      	nop
 8006614:	e298      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006616:	bf00      	nop
        break;
 8006618:	e296      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800661a:	bf00      	nop
 800661c:	40021000 	.word	0x40021000
 8006620:	08015740 	.word	0x08015740
 8006624:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006628:	4b9b      	ldr	r3, [pc, #620]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2bc0      	cmp	r3, #192	; 0xc0
 8006638:	d021      	beq.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2bc0      	cmp	r3, #192	; 0xc0
 800663e:	d829      	bhi.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d011      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d823      	bhi.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d004      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006658:	e01c      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800665a:	f7ff f99b 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 800665e:	61f8      	str	r0, [r7, #28]
          break;
 8006660:	e01d      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006662:	f7ff f8ff 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8006666:	61f8      	str	r0, [r7, #28]
          break;
 8006668:	e019      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800666a:	4b8b      	ldr	r3, [pc, #556]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d10f      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006678:	4b88      	ldr	r3, [pc, #544]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800667a:	61fb      	str	r3, [r7, #28]
          break;
 800667c:	e00c      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800667e:	4b86      	ldr	r3, [pc, #536]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b02      	cmp	r3, #2
 800668a:	d107      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800668c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006690:	61fb      	str	r3, [r7, #28]
          break;
 8006692:	e003      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006694:	bf00      	nop
 8006696:	e257      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006698:	bf00      	nop
 800669a:	e255      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800669c:	bf00      	nop
        break;
 800669e:	e253      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80066a0:	4b7d      	ldr	r3, [pc, #500]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b2:	d025      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ba:	d82c      	bhi.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c2:	d013      	beq.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ca:	d824      	bhi.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d004      	beq.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d8:	d004      	beq.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80066da:	e01c      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7ff f95a 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80066e0:	61f8      	str	r0, [r7, #28]
          break;
 80066e2:	e01d      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80066e4:	f7ff f8be 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80066e8:	61f8      	str	r0, [r7, #28]
          break;
 80066ea:	e019      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066ec:	4b6a      	ldr	r3, [pc, #424]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f8:	d10f      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80066fa:	4b68      	ldr	r3, [pc, #416]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80066fc:	61fb      	str	r3, [r7, #28]
          break;
 80066fe:	e00c      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006700:	4b65      	ldr	r3, [pc, #404]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d107      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800670e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006712:	61fb      	str	r3, [r7, #28]
          break;
 8006714:	e003      	b.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8006716:	bf00      	nop
 8006718:	e216      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800671a:	bf00      	nop
 800671c:	e214      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800671e:	bf00      	nop
        break;
 8006720:	e212      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006722:	4b5d      	ldr	r3, [pc, #372]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006734:	d025      	beq.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800673c:	d82c      	bhi.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006744:	d013      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674c:	d824      	bhi.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675a:	d004      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800675c:	e01c      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800675e:	f7ff f919 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006762:	61f8      	str	r0, [r7, #28]
          break;
 8006764:	e01d      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006766:	f7ff f87d 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 800676a:	61f8      	str	r0, [r7, #28]
          break;
 800676c:	e019      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800676e:	4b4a      	ldr	r3, [pc, #296]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d10f      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800677c:	4b47      	ldr	r3, [pc, #284]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800677e:	61fb      	str	r3, [r7, #28]
          break;
 8006780:	e00c      	b.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006782:	4b45      	ldr	r3, [pc, #276]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b02      	cmp	r3, #2
 800678e:	d107      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8006790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006794:	61fb      	str	r3, [r7, #28]
          break;
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006798:	bf00      	nop
 800679a:	e1d5      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800679c:	bf00      	nop
 800679e:	e1d3      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80067a0:	bf00      	nop
        break;
 80067a2:	e1d1      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067a4:	4b3c      	ldr	r3, [pc, #240]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067b6:	d00c      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067be:	d864      	bhi.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c6:	d008      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ce:	d030      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80067d0:	e05b      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80067d2:	f7ff f847 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80067d6:	61f8      	str	r0, [r7, #28]
          break;
 80067d8:	e05c      	b.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80067da:	4b2f      	ldr	r3, [pc, #188]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e6:	d152      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80067e8:	4b2b      	ldr	r3, [pc, #172]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d04c      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067f4:	4b28      	ldr	r3, [pc, #160]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fe:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	fb03 f202 	mul.w	r2, r3, r2
 8006808:	4b23      	ldr	r3, [pc, #140]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	3301      	adds	r3, #1
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800681a:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	0e5b      	lsrs	r3, r3, #25
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	3301      	adds	r3, #1
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	fbb2 f3f3 	udiv	r3, r2, r3
 800682e:	61fb      	str	r3, [r7, #28]
          break;
 8006830:	e02d      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800683a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683e:	d128      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006840:	4b15      	ldr	r3, [pc, #84]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d022      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800684c:	4b12      	ldr	r3, [pc, #72]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006856:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	fb03 f202 	mul.w	r2, r3, r2
 8006860:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	3301      	adds	r3, #1
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006872:	4b09      	ldr	r3, [pc, #36]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	0e5b      	lsrs	r3, r3, #25
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	3301      	adds	r3, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	61fb      	str	r3, [r7, #28]
          break;
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800688a:	bf00      	nop
 800688c:	e15c      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800688e:	bf00      	nop
 8006890:	e15a      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006892:	bf00      	nop
        break;
 8006894:	e158      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000
 800689c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80068a0:	4b9d      	ldr	r3, [pc, #628]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068aa:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80068b2:	f7ff f885 	bl	80059c0 <HAL_RCC_GetPCLK2Freq>
 80068b6:	61f8      	str	r0, [r7, #28]
        break;
 80068b8:	e146      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fe ffd3 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80068be:	61f8      	str	r0, [r7, #28]
        break;
 80068c0:	e142      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068c2:	4b95      	ldr	r3, [pc, #596]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d4:	d013      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068dc:	d819      	bhi.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d004      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80068ec:	e011      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068ee:	f7ff f851 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80068f2:	61f8      	str	r0, [r7, #28]
          break;
 80068f4:	e010      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80068f6:	f7fe ffb5 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80068fa:	61f8      	str	r0, [r7, #28]
          break;
 80068fc:	e00c      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068fe:	4b86      	ldr	r3, [pc, #536]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d104      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800690c:	4b83      	ldr	r3, [pc, #524]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800690e:	61fb      	str	r3, [r7, #28]
          break;
 8006910:	e001      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8006912:	bf00      	nop
 8006914:	e118      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006916:	bf00      	nop
        break;
 8006918:	e116      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800691a:	4b7f      	ldr	r3, [pc, #508]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692c:	d013      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d819      	bhi.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006942:	d004      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006944:	e011      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006946:	f7ff f825 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 800694a:	61f8      	str	r0, [r7, #28]
          break;
 800694c:	e010      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800694e:	f7fe ff89 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8006952:	61f8      	str	r0, [r7, #28]
          break;
 8006954:	e00c      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006956:	4b70      	ldr	r3, [pc, #448]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006962:	d104      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006964:	4b6d      	ldr	r3, [pc, #436]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006966:	61fb      	str	r3, [r7, #28]
          break;
 8006968:	e001      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800696a:	bf00      	nop
 800696c:	e0ec      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800696e:	bf00      	nop
        break;
 8006970:	e0ea      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006972:	4b69      	ldr	r3, [pc, #420]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006984:	d013      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800698c:	d819      	bhi.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800699c:	e011      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800699e:	f7fe fff9 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 80069a2:	61f8      	str	r0, [r7, #28]
          break;
 80069a4:	e010      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80069a6:	f7fe ff5d 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80069aa:	61f8      	str	r0, [r7, #28]
          break;
 80069ac:	e00c      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069ae:	4b5a      	ldr	r3, [pc, #360]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ba:	d104      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80069bc:	4b57      	ldr	r3, [pc, #348]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80069be:	61fb      	str	r3, [r7, #28]
          break;
 80069c0:	e001      	b.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80069c2:	bf00      	nop
 80069c4:	e0c0      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80069c6:	bf00      	nop
        break;
 80069c8:	e0be      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069ca:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069dc:	d02c      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069e4:	d833      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069ec:	d01a      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069f4:	d82b      	bhi.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a02:	d004      	beq.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8006a04:	e023      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a06:	f7fe ffc5 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006a0a:	61f8      	str	r0, [r7, #28]
          break;
 8006a0c:	e026      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a0e:	4b42      	ldr	r3, [pc, #264]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d11a      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8006a1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a20:	61fb      	str	r3, [r7, #28]
          break;
 8006a22:	e016      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a24:	4b3c      	ldr	r3, [pc, #240]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	d111      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8006a32:	4b3a      	ldr	r3, [pc, #232]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006a34:	61fb      	str	r3, [r7, #28]
          break;
 8006a36:	e00e      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a38:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d109      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8006a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4a:	61fb      	str	r3, [r7, #28]
          break;
 8006a4c:	e005      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8006a4e:	bf00      	nop
 8006a50:	e07a      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a52:	bf00      	nop
 8006a54:	e078      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a56:	bf00      	nop
 8006a58:	e076      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a5a:	bf00      	nop
        break;
 8006a5c:	e074      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a70:	d02c      	beq.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a78:	d833      	bhi.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a80:	d01a      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a88:	d82b      	bhi.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a96:	d004      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006a98:	e023      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fe ff7b 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	61f8      	str	r0, [r7, #28]
          break;
 8006aa0:	e026      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006aa2:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d11a      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8006ab0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ab4:	61fb      	str	r3, [r7, #28]
          break;
 8006ab6:	e016      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ab8:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac4:	d111      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006ac8:	61fb      	str	r3, [r7, #28]
          break;
 8006aca:	e00e      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006acc:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d109      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8006ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ade:	61fb      	str	r3, [r7, #28]
          break;
 8006ae0:	e005      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8006ae2:	bf00      	nop
 8006ae4:	e030      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ae6:	bf00      	nop
 8006ae8:	e02e      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006aea:	bf00      	nop
 8006aec:	e02c      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006aee:	bf00      	nop
        break;
 8006af0:	e02a      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006af2:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d004      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d009      	beq.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8006b0c:	e012      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b0e:	f7fe ff41 	bl	8005994 <HAL_RCC_GetPCLK1Freq>
 8006b12:	61f8      	str	r0, [r7, #28]
          break;
 8006b14:	e00e      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d101      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006b30:	61fb      	str	r3, [r7, #28]
          break;
 8006b32:	bf00      	nop
        break;
 8006b34:	e008      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b36:	bf00      	nop
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e004      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b3e:	bf00      	nop
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b46:	bf00      	nop
    }
  }

  return(frequency);
 8006b48:	69fb      	ldr	r3, [r7, #28]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	00f42400 	.word	0x00f42400

08006b5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b6a:	4b75      	ldr	r3, [pc, #468]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d018      	beq.n	8006ba8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b76:	4b72      	ldr	r3, [pc, #456]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 0203 	and.w	r2, r3, #3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d10d      	bne.n	8006ba2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
       ||
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b8e:	4b6c      	ldr	r3, [pc, #432]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d047      	beq.n	8006c32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e044      	b.n	8006c32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d018      	beq.n	8006be2 <RCCEx_PLLSAI1_Config+0x86>
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d825      	bhi.n	8006c00 <RCCEx_PLLSAI1_Config+0xa4>
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d002      	beq.n	8006bbe <RCCEx_PLLSAI1_Config+0x62>
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d009      	beq.n	8006bd0 <RCCEx_PLLSAI1_Config+0x74>
 8006bbc:	e020      	b.n	8006c00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bbe:	4b60      	ldr	r3, [pc, #384]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d11d      	bne.n	8006c06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bce:	e01a      	b.n	8006c06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bd0:	4b5b      	ldr	r3, [pc, #364]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d116      	bne.n	8006c0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be0:	e013      	b.n	8006c0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006be2:	4b57      	ldr	r3, [pc, #348]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10f      	bne.n	8006c0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bee:	4b54      	ldr	r3, [pc, #336]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bfe:	e006      	b.n	8006c0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
      break;
 8006c04:	e004      	b.n	8006c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10d      	bne.n	8006c32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c16:	4b4a      	ldr	r3, [pc, #296]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	4944      	ldr	r1, [pc, #272]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d17d      	bne.n	8006d34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c38:	4b41      	ldr	r3, [pc, #260]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a40      	ldr	r2, [pc, #256]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c44:	f7fb fb8c 	bl	8002360 <HAL_GetTick>
 8006c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c4a:	e009      	b.n	8006c60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c4c:	f7fb fb88 	bl	8002360 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d902      	bls.n	8006c60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c5e:	e005      	b.n	8006c6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c60:	4b37      	ldr	r3, [pc, #220]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1ef      	bne.n	8006c4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d160      	bne.n	8006d34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d111      	bne.n	8006c9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c78:	4b31      	ldr	r3, [pc, #196]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6892      	ldr	r2, [r2, #8]
 8006c88:	0211      	lsls	r1, r2, #8
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	68d2      	ldr	r2, [r2, #12]
 8006c8e:	0912      	lsrs	r2, r2, #4
 8006c90:	0452      	lsls	r2, r2, #17
 8006c92:	430a      	orrs	r2, r1
 8006c94:	492a      	ldr	r1, [pc, #168]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	610b      	str	r3, [r1, #16]
 8006c9a:	e027      	b.n	8006cec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d112      	bne.n	8006cc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca2:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6892      	ldr	r2, [r2, #8]
 8006cb2:	0211      	lsls	r1, r2, #8
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6912      	ldr	r2, [r2, #16]
 8006cb8:	0852      	lsrs	r2, r2, #1
 8006cba:	3a01      	subs	r2, #1
 8006cbc:	0552      	lsls	r2, r2, #21
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	491f      	ldr	r1, [pc, #124]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	610b      	str	r3, [r1, #16]
 8006cc6:	e011      	b.n	8006cec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6892      	ldr	r2, [r2, #8]
 8006cd8:	0211      	lsls	r1, r2, #8
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6952      	ldr	r2, [r2, #20]
 8006cde:	0852      	lsrs	r2, r2, #1
 8006ce0:	3a01      	subs	r2, #1
 8006ce2:	0652      	lsls	r2, r2, #25
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	4916      	ldr	r1, [pc, #88]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cec:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fb fb32 	bl	8002360 <HAL_GetTick>
 8006cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cfe:	e009      	b.n	8006d14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d00:	f7fb fb2e 	bl	8002360 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d902      	bls.n	8006d14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	73fb      	strb	r3, [r7, #15]
          break;
 8006d12:	e005      	b.n	8006d20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d14:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0ef      	beq.n	8006d00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d26:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	4904      	ldr	r1, [pc, #16]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40021000 	.word	0x40021000

08006d44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d52:	4b6a      	ldr	r3, [pc, #424]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d018      	beq.n	8006d90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d5e:	4b67      	ldr	r3, [pc, #412]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0203 	and.w	r2, r3, #3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d10d      	bne.n	8006d8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
       ||
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d76:	4b61      	ldr	r3, [pc, #388]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	091b      	lsrs	r3, r3, #4
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
       ||
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d047      	beq.n	8006e1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
 8006d8e:	e044      	b.n	8006e1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d018      	beq.n	8006dca <RCCEx_PLLSAI2_Config+0x86>
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d825      	bhi.n	8006de8 <RCCEx_PLLSAI2_Config+0xa4>
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d002      	beq.n	8006da6 <RCCEx_PLLSAI2_Config+0x62>
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d009      	beq.n	8006db8 <RCCEx_PLLSAI2_Config+0x74>
 8006da4:	e020      	b.n	8006de8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006da6:	4b55      	ldr	r3, [pc, #340]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d11d      	bne.n	8006dee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006db6:	e01a      	b.n	8006dee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006db8:	4b50      	ldr	r3, [pc, #320]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d116      	bne.n	8006df2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dc8:	e013      	b.n	8006df2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dca:	4b4c      	ldr	r3, [pc, #304]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10f      	bne.n	8006df6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006dd6:	4b49      	ldr	r3, [pc, #292]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006de6:	e006      	b.n	8006df6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
      break;
 8006dec:	e004      	b.n	8006df8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dee:	bf00      	nop
 8006df0:	e002      	b.n	8006df8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006df6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10d      	bne.n	8006e1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dfe:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6819      	ldr	r1, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	430b      	orrs	r3, r1
 8006e14:	4939      	ldr	r1, [pc, #228]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d167      	bne.n	8006ef0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a35      	ldr	r2, [pc, #212]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2c:	f7fb fa98 	bl	8002360 <HAL_GetTick>
 8006e30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e32:	e009      	b.n	8006e48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e34:	f7fb fa94 	bl	8002360 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d902      	bls.n	8006e48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	73fb      	strb	r3, [r7, #15]
        break;
 8006e46:	e005      	b.n	8006e54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e48:	4b2c      	ldr	r3, [pc, #176]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1ef      	bne.n	8006e34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d14a      	bne.n	8006ef0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d111      	bne.n	8006e84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	0211      	lsls	r1, r2, #8
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	68d2      	ldr	r2, [r2, #12]
 8006e76:	0912      	lsrs	r2, r2, #4
 8006e78:	0452      	lsls	r2, r2, #17
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	491f      	ldr	r1, [pc, #124]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	614b      	str	r3, [r1, #20]
 8006e82:	e011      	b.n	8006ea8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6892      	ldr	r2, [r2, #8]
 8006e94:	0211      	lsls	r1, r2, #8
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6912      	ldr	r2, [r2, #16]
 8006e9a:	0852      	lsrs	r2, r2, #1
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	0652      	lsls	r2, r2, #25
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	4916      	ldr	r1, [pc, #88]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ea8:	4b14      	ldr	r3, [pc, #80]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a13      	ldr	r2, [pc, #76]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb4:	f7fb fa54 	bl	8002360 <HAL_GetTick>
 8006eb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eba:	e009      	b.n	8006ed0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ebc:	f7fb fa50 	bl	8002360 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d902      	bls.n	8006ed0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ece:	e005      	b.n	8006edc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0ef      	beq.n	8006ebc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	4904      	ldr	r1, [pc, #16]	; (8006efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40021000 	.word	0x40021000

08006f00 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1c:	d10c      	bne.n	8006f38 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006f1e:	4b6e      	ldr	r3, [pc, #440]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f28:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f30:	d112      	bne.n	8006f58 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f32:	4b6a      	ldr	r3, [pc, #424]	; (80070dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e00f      	b.n	8006f58 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3e:	d10b      	bne.n	8006f58 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f40:	4b65      	ldr	r3, [pc, #404]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f46:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f4a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f52:	d101      	bne.n	8006f58 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f54:	4b61      	ldr	r3, [pc, #388]	; (80070dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f56:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f040 80b4 	bne.w	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f6a:	d003      	beq.n	8006f74 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f72:	d135      	bne.n	8006fe0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f74:	4b58      	ldr	r3, [pc, #352]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f80:	f040 80a1 	bne.w	80070c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006f84:	4b54      	ldr	r3, [pc, #336]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 809a 	beq.w	80070c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f92:	4b51      	ldr	r3, [pc, #324]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006fa6:	4b4c      	ldr	r3, [pc, #304]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fb8:	4b47      	ldr	r3, [pc, #284]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006fc4:	2311      	movs	r3, #17
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e001      	b.n	8006fce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8006fca:	2307      	movs	r3, #7
 8006fcc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	fb03 f202 	mul.w	r2, r3, r2
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006fde:	e072      	b.n	80070c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d133      	bne.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006fe6:	4b3c      	ldr	r3, [pc, #240]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff2:	d169      	bne.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006ff4:	4b38      	ldr	r3, [pc, #224]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d063      	beq.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007000:	4b35      	ldr	r3, [pc, #212]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	3301      	adds	r3, #1
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007012:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007014:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	0a1b      	lsrs	r3, r3, #8
 800701a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007026:	4b2c      	ldr	r3, [pc, #176]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8007032:	2311      	movs	r3, #17
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e001      	b.n	800703c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8007038:	2307      	movs	r3, #7
 800703a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	fb03 f202 	mul.w	r2, r3, r2
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	fbb2 f3f3 	udiv	r3, r2, r3
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e03c      	b.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007054:	d003      	beq.n	800705e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800705c:	d134      	bne.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800705e:	4b1e      	ldr	r3, [pc, #120]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706a:	d12d      	bne.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d027      	beq.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007078:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	3301      	adds	r3, #1
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800708c:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80070aa:	2311      	movs	r3, #17
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e001      	b.n	80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80070b0:	2307      	movs	r3, #7
 80070b2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	fb03 f202 	mul.w	r2, r3, r2
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e000      	b.n	80070c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070c6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80070c8:	69fb      	ldr	r3, [r7, #28]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3724      	adds	r7, #36	; 0x24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40021000 	.word	0x40021000
 80070dc:	001fff68 	.word	0x001fff68

080070e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d079      	beq.n	80071e6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fa fe5a 	bl	8001dc0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d058      	beq.n	80071d4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	22ca      	movs	r2, #202	; 0xca
 8007128:	625a      	str	r2, [r3, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2253      	movs	r2, #83	; 0x53
 8007130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9a4 	bl	8007480 <RTC_EnterInitMode>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d127      	bne.n	8007192 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007154:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68d2      	ldr	r2, [r2, #12]
 800717c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6919      	ldr	r1, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	041a      	lsls	r2, r3, #16
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9a8 	bl	80074e8 <RTC_ExitInitMode>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d113      	bne.n	80071ca <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0203 	bic.w	r2, r2, #3
 80071b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	22ff      	movs	r2, #255	; 0xff
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24
 80071d2:	e001      	b.n	80071d8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_RTC_SetTime+0x1a>
 8007206:	2302      	movs	r3, #2
 8007208:	e08b      	b.n	8007322 <HAL_RTC_SetTime+0x132>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	22ca      	movs	r2, #202	; 0xca
 8007220:	625a      	str	r2, [r3, #36]	; 0x24
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2253      	movs	r2, #83	; 0x53
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f928 	bl	8007480 <RTC_EnterInitMode>
 8007230:	4603      	mov	r3, r0
 8007232:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d163      	bne.n	8007302 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d126      	bne.n	800728e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 f983 	bl	8007564 <RTC_ByteToBcd2>
 800725e:	4603      	mov	r3, r0
 8007260:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f97c 	bl	8007564 <RTC_ByteToBcd2>
 800726c:	4603      	mov	r3, r0
 800726e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007270:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	789b      	ldrb	r3, [r3, #2]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f974 	bl	8007564 <RTC_ByteToBcd2>
 800727c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800727e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	78db      	ldrb	r3, [r3, #3]
 8007286:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e018      	b.n	80072c0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	78db      	ldrb	r3, [r3, #3]
 80072ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6899      	ldr	r1, [r3, #8]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f8f5 	bl	80074e8 <RTC_ExitInitMode>
 80072fe:	4603      	mov	r3, r0
 8007300:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	22ff      	movs	r2, #255	; 0xff
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800730a:	7cfb      	ldrb	r3, [r7, #19]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007320:	7cfb      	ldrb	r3, [r7, #19]
}
 8007322:	4618      	mov	r0, r3
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd90      	pop	{r4, r7, pc}

0800732a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800732a:	b590      	push	{r4, r7, lr}
 800732c:	b087      	sub	sp, #28
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_RTC_SetDate+0x1a>
 8007340:	2302      	movs	r3, #2
 8007342:	e075      	b.n	8007430 <HAL_RTC_SetDate+0x106>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10e      	bne.n	8007378 <HAL_RTC_SetDate+0x4e>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	b2db      	uxtb	r3, r3
 8007370:	330a      	adds	r3, #10
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d11c      	bne.n	80073b8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	78db      	ldrb	r3, [r3, #3]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f8ee 	bl	8007564 <RTC_ByteToBcd2>
 8007388:	4603      	mov	r3, r0
 800738a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f8e7 	bl	8007564 <RTC_ByteToBcd2>
 8007396:	4603      	mov	r3, r0
 8007398:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800739a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	789b      	ldrb	r3, [r3, #2]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f8df 	bl	8007564 <RTC_ByteToBcd2>
 80073a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e00e      	b.n	80073d6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	78db      	ldrb	r3, [r3, #3]
 80073bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073c4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	22ca      	movs	r2, #202	; 0xca
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2253      	movs	r2, #83	; 0x53
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f84a 	bl	8007480 <RTC_EnterInitMode>
 80073ec:	4603      	mov	r3, r0
 80073ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073f0:	7cfb      	ldrb	r3, [r7, #19]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10c      	bne.n	8007410 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007400:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007404:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f86e 	bl	80074e8 <RTC_ExitInitMode>
 800740c:	4603      	mov	r3, r0
 800740e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	22ff      	movs	r2, #255	; 0xff
 8007416:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007418:	7cfb      	ldrb	r3, [r7, #19]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800742e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007430:	4618      	mov	r0, r3
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd90      	pop	{r4, r7, pc}

08007438 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a0d      	ldr	r2, [pc, #52]	; (800747c <HAL_RTC_WaitForSynchro+0x44>)
 8007446:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007448:	f7fa ff8a 	bl	8002360 <HAL_GetTick>
 800744c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800744e:	e009      	b.n	8007464 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007450:	f7fa ff86 	bl	8002360 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800745e:	d901      	bls.n	8007464 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e007      	b.n	8007474 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0ee      	beq.n	8007450 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	0003ff5f 	.word	0x0003ff5f

08007480 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d120      	bne.n	80074dc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80074a4:	f7fa ff5c 	bl	8002360 <HAL_GetTick>
 80074a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074aa:	e00d      	b.n	80074c8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80074ac:	f7fa ff58 	bl	8002360 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ba:	d905      	bls.n	80074c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2203      	movs	r2, #3
 80074c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <RTC_EnterInitMode+0x5c>
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d1e7      	bne.n	80074ac <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80074f4:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <RTC_ExitInitMode+0x78>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	4a19      	ldr	r2, [pc, #100]	; (8007560 <RTC_ExitInitMode+0x78>)
 80074fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074fe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007500:	4b17      	ldr	r3, [pc, #92]	; (8007560 <RTC_ExitInitMode+0x78>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10c      	bne.n	8007526 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff93 	bl	8007438 <HAL_RTC_WaitForSynchro>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01e      	beq.n	8007556 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2203      	movs	r2, #3
 800751c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	e017      	b.n	8007556 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <RTC_ExitInitMode+0x78>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <RTC_ExitInitMode+0x78>)
 800752c:	f023 0320 	bic.w	r3, r3, #32
 8007530:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff ff80 	bl	8007438 <HAL_RTC_WaitForSynchro>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <RTC_ExitInitMode+0x78>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	4a04      	ldr	r2, [pc, #16]	; (8007560 <RTC_ExitInitMode+0x78>)
 8007550:	f043 0320 	orr.w	r3, r3, #32
 8007554:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40002800 	.word	0x40002800

08007564 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007576:	e005      	b.n	8007584 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	3b0a      	subs	r3, #10
 8007582:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007584:	7afb      	ldrb	r3, [r7, #11]
 8007586:	2b09      	cmp	r3, #9
 8007588:	d8f6      	bhi.n	8007578 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	b2da      	uxtb	r2, r3
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	4313      	orrs	r3, r2
 8007596:	b2db      	uxtb	r3, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e022      	b.n	80075fc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7fa fc2b 	bl	8001e24 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f814 	bl	8007604 <HAL_SD_InitCard>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e00a      	b.n	80075fc <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007604:	b5b0      	push	{r4, r5, r7, lr}
 8007606:	b08e      	sub	sp, #56	; 0x38
 8007608:	af04      	add	r7, sp, #16
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800760c:	2300      	movs	r3, #0
 800760e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800761c:	2300      	movs	r3, #0
 800761e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007620:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007624:	f7fe fd2c 	bl	8006080 <HAL_RCCEx_GetPeriphCLKFreq>
 8007628:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e07b      	b.n	800773c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	09db      	lsrs	r3, r3, #7
 8007648:	4a3e      	ldr	r2, [pc, #248]	; (8007744 <HAL_SD_InitCard+0x140>)
 800764a:	fba2 2303 	umull	r2, r3, r2, r3
 800764e:	091b      	lsrs	r3, r3, #4
 8007650:	3b02      	subs	r3, #2
 8007652:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681d      	ldr	r5, [r3, #0]
 8007658:	466c      	mov	r4, sp
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007666:	f107 0308 	add.w	r3, r7, #8
 800766a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800766c:	4628      	mov	r0, r5
 800766e:	f001 fac1 	bl	8008bf4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007680:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f001 faff 	bl	8008c8a <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800769a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3302      	adds	r3, #2
 80076a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80076a8:	4a27      	ldr	r2, [pc, #156]	; (8007748 <HAL_SD_InitCard+0x144>)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	3301      	adds	r3, #1
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fa fe60 	bl	8002378 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 ffdf 	bl	800867c <SD_PowerON>
 80076be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e02e      	b.n	800773c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fefe 	bl	80084e0 <SD_InitCard>
 80076e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e01b      	b.n	800773c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fb4f 	bl	8008db0 <SDMMC_CmdBlockLength>
 8007712:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a0b      	ldr	r2, [pc, #44]	; (800774c <HAL_SD_InitCard+0x148>)
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3728      	adds	r7, #40	; 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bdb0      	pop	{r4, r5, r7, pc}
 8007744:	014f8b59 	.word	0x014f8b59
 8007748:	00012110 	.word	0x00012110
 800774c:	004005ff 	.word	0x004005ff

08007750 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	; 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d107      	bne.n	8007778 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e0a9      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	f040 80a2 	bne.w	80078ca <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800778c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007796:	429a      	cmp	r2, r3
 8007798:	d907      	bls.n	80077aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e090      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2203      	movs	r2, #3
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2200      	movs	r2, #0
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	4a45      	ldr	r2, [pc, #276]	; (80078d4 <HAL_SD_ReadBlocks_DMA+0x184>)
 80077c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a44      	ldr	r2, [pc, #272]	; (80078d8 <HAL_SD_ReadBlocks_DMA+0x188>)
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2200      	movs	r2, #0
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3380      	adds	r3, #128	; 0x80
 80077dc:	4619      	mov	r1, r3
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	025b      	lsls	r3, r3, #9
 80077e4:	089b      	lsrs	r3, r3, #2
 80077e6:	f7fa ffb5 	bl	8002754 <HAL_DMA_Start_IT>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00f      	beq.n	8007810 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a39      	ldr	r2, [pc, #228]	; (80078dc <HAL_SD_ReadBlocks_DMA+0x18c>)
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e05d      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0208 	orr.w	r2, r2, #8
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	2b01      	cmp	r3, #1
 8007826:	d002      	beq.n	800782e <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	025b      	lsls	r3, r3, #9
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800782e:	f04f 33ff 	mov.w	r3, #4294967295
 8007832:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	025b      	lsls	r3, r3, #9
 8007838:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800783a:	2390      	movs	r3, #144	; 0x90
 800783c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800783e:	2302      	movs	r3, #2
 8007840:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007842:	2300      	movs	r3, #0
 8007844:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007846:	2301      	movs	r3, #1
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f107 0210 	add.w	r2, r7, #16
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f001 fa7f 	bl	8008d58 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d90a      	bls.n	8007876 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2282      	movs	r2, #130	; 0x82
 8007864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fae3 	bl	8008e38 <SDMMC_CmdReadMultiBlock>
 8007872:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007874:	e009      	b.n	800788a <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2281      	movs	r2, #129	; 0x81
 800787a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007882:	4618      	mov	r0, r3
 8007884:	f001 fab6 	bl	8008df4 <SDMMC_CmdReadSingleBlock>
 8007888:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d012      	beq.n	80078b6 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a11      	ldr	r2, [pc, #68]	; (80078dc <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	431a      	orrs	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e00a      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80078c4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3730      	adds	r7, #48	; 0x30
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	080082fb 	.word	0x080082fb
 80078d8:	0800836d 	.word	0x0800836d
 80078dc:	004005ff 	.word	0x004005ff

080078e0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08c      	sub	sp, #48	; 0x30
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d107      	bne.n	8007908 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e0ac      	b.n	8007a62 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	f040 80a5 	bne.w	8007a60 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800791c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	441a      	add	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	429a      	cmp	r2, r3
 8007928:	d907      	bls.n	800793a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e093      	b.n	8007a62 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2203      	movs	r2, #3
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	4a47      	ldr	r2, [pc, #284]	; (8007a6c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8007950:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007956:	4a46      	ldr	r2, [pc, #280]	; (8007a70 <HAL_SD_WriteBlocks_DMA+0x190>)
 8007958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795e:	2200      	movs	r2, #0
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007966:	2b01      	cmp	r3, #1
 8007968:	d002      	beq.n	8007970 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	025b      	lsls	r3, r3, #9
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d90a      	bls.n	800798c <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	22a0      	movs	r2, #160	; 0xa0
 800797a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fa9c 	bl	8008ec0 <SDMMC_CmdWriteMultiBlock>
 8007988:	62f8      	str	r0, [r7, #44]	; 0x2c
 800798a:	e009      	b.n	80079a0 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2290      	movs	r2, #144	; 0x90
 8007990:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fa6f 	bl	8008e7c <SDMMC_CmdWriteSingleBlock>
 800799e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d012      	beq.n	80079cc <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a32      	ldr	r2, [pc, #200]	; (8007a74 <HAL_SD_WriteBlocks_DMA+0x194>)
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	431a      	orrs	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e04a      	b.n	8007a62 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0208 	orr.w	r2, r2, #8
 80079da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3380      	adds	r3, #128	; 0x80
 80079e8:	461a      	mov	r2, r3
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	025b      	lsls	r3, r3, #9
 80079ee:	089b      	lsrs	r3, r3, #2
 80079f0:	f7fa feb0 	bl	8002754 <HAL_DMA_Start_IT>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d012      	beq.n	8007a20 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e020      	b.n	8007a62 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	025b      	lsls	r3, r3, #9
 8007a2a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a2c:	2390      	movs	r3, #144	; 0x90
 8007a2e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f107 0210 	add.w	r2, r7, #16
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 f986 	bl	8008d58 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 021a 	orr.w	r2, r2, #26
 8007a5a:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3730      	adds	r7, #48	; 0x30
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	080082d1 	.word	0x080082d1
 8007a70:	0800836d 	.word	0x0800836d
 8007a74:	004005ff 	.word	0x004005ff

08007a78 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <HAL_SD_IRQHandler+0x2e>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f802 	bl	8008aa8 <SD_Read_IT>
 8007aa4:	e155      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 808f 	beq.w	8007bd4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007ace:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007ad2:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0201 	bic.w	r2, r2, #1
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d039      	beq.n	8007b62 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <HAL_SD_IRQHandler+0x8a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 f9fc 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8007b0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f91f 	bl	8007d64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <HAL_SD_IRQHandler+0xda>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f003 f8fc 	bl	800ad50 <HAL_SD_RxCpltCallback>
 8007b58:	e0fb      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f003 f8ee 	bl	800ad3c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007b60:	e0f7      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80f2 	beq.w	8007d52 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d011      	beq.n	8007b9c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f9c1 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8007b82:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8e4 	bl	8007d64 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 80d5 	bne.w	8007d52 <HAL_SD_IRQHandler+0x2da>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 80cf 	bne.w	8007d52 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0208 	bic.w	r2, r2, #8
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f003 f8b5 	bl	800ad3c <HAL_SD_TxCpltCallback>
}
 8007bd2:	e0be      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <HAL_SD_IRQHandler+0x17c>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 ffac 	bl	8008b4a <SD_Write_IT>
 8007bf2:	e0ae      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80a7 	beq.w	8007d52 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	f043 0202 	orr.w	r2, r3, #2
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	f043 0208 	orr.w	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d005      	beq.n	8007c6c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	f043 0210 	orr.w	r2, r3, #16
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c84:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f001 f93a 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f855 	bl	8007d64 <HAL_SD_ErrorCallback>
}
 8007cba:	e04a      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d045      	beq.n	8007d52 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <HAL_SD_IRQHandler+0x262>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <HAL_SD_IRQHandler+0x2e4>)
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa fd94 	bl	8002814 <HAL_DMA_Abort_IT>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d02f      	beq.n	8007d52 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fb84 	bl	8008404 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007cfc:	e029      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <HAL_SD_IRQHandler+0x29a>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d011      	beq.n	8007d36 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	4a12      	ldr	r2, [pc, #72]	; (8007d60 <HAL_SD_IRQHandler+0x2e8>)
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fa fd78 	bl	8002814 <HAL_DMA_Abort_IT>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d013      	beq.n	8007d52 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fb9f 	bl	8008472 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d34:	e00d      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f002 ffec 	bl	800ad28 <HAL_SD_AbortCallback>
}
 8007d50:	e7ff      	b.n	8007d52 <HAL_SD_IRQHandler+0x2da>
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	08008405 	.word	0x08008405
 8007d60:	08008473 	.word	0x08008473

08007d64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d86:	0f9b      	lsrs	r3, r3, #30
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d92:	0e9b      	lsrs	r3, r3, #26
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da4:	0e1b      	lsrs	r3, r3, #24
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd8:	0d1b      	lsrs	r3, r3, #20
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df6:	0bdb      	lsrs	r3, r3, #15
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e08:	0b9b      	lsrs	r3, r3, #14
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e1a:	0b5b      	lsrs	r3, r3, #13
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2c:	0b1b      	lsrs	r3, r3, #12
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d163      	bne.n	8007f10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e4c:	009a      	lsls	r2, r3, #2
 8007e4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e52:	4013      	ands	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e58:	0f92      	lsrs	r2, r2, #30
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	0edb      	lsrs	r3, r3, #27
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e76:	0e1b      	lsrs	r3, r3, #24
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e88:	0d5b      	lsrs	r3, r3, #21
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9a:	0c9b      	lsrs	r3, r3, #18
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eac:	0bdb      	lsrs	r3, r3, #15
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	7e1b      	ldrb	r3, [r3, #24]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	3302      	adds	r3, #2
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007eda:	fb03 f202 	mul.w	r2, r3, r2
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	7a1b      	ldrb	r3, [r3, #8]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	2201      	movs	r2, #1
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007efc:	0a52      	lsrs	r2, r2, #9
 8007efe:	fb03 f202 	mul.w	r2, r3, r2
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0c:	661a      	str	r2, [r3, #96]	; 0x60
 8007f0e:	e031      	b.n	8007f74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d11d      	bne.n	8007f54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f26:	0c1b      	lsrs	r3, r3, #16
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	3301      	adds	r3, #1
 8007f34:	029a      	lsls	r2, r3, #10
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f48:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	661a      	str	r2, [r3, #96]	; 0x60
 8007f52:	e00f      	b.n	8007f74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a58      	ldr	r2, [pc, #352]	; (80080bc <HAL_SD_GetCardCSD+0x344>)
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e09d      	b.n	80080b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f78:	0b9b      	lsrs	r3, r3, #14
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8a:	09db      	lsrs	r3, r3, #7
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	0fdb      	lsrs	r3, r3, #31
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb8:	0f5b      	lsrs	r3, r3, #29
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0303 	and.w	r3, r3, #3
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	0e9b      	lsrs	r3, r3, #26
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	0d9b      	lsrs	r3, r3, #22
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	0d5b      	lsrs	r3, r3, #21
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	b2da      	uxtb	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	0bdb      	lsrs	r3, r3, #15
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	0b9b      	lsrs	r3, r3, #14
 8008034:	b2db      	uxtb	r3, r3
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008046:	0b5b      	lsrs	r3, r3, #13
 8008048:	b2db      	uxtb	r3, r3
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805a:	0b1b      	lsrs	r3, r3, #12
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	0a9b      	lsrs	r3, r3, #10
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	b2da      	uxtb	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	004005ff 	.word	0x004005ff

080080c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008118:	b5b0      	push	{r4, r5, r7, lr}
 800811a:	b090      	sub	sp, #64	; 0x40
 800811c:	af04      	add	r7, sp, #16
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2203      	movs	r2, #3
 800812c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008134:	2b03      	cmp	r3, #3
 8008136:	d02e      	beq.n	8008196 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813e:	d106      	bne.n	800814e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
 800814c:	e029      	b.n	80081a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008154:	d10a      	bne.n	800816c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fb46 	bl	80087e8 <SD_WideBus_Enable>
 800815c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
 800816a:	e01a      	b.n	80081a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fb83 	bl	800887e <SD_WideBus_Disable>
 8008178:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	639a      	str	r2, [r3, #56]	; 0x38
 8008186:	e00c      	b.n	80081a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	639a      	str	r2, [r3, #56]	; 0x38
 8008194:	e005      	b.n	80081a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a35      	ldr	r2, [pc, #212]	; (8008284 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081b8:	e042      	b.n	8008240 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80081ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80081be:	f7fd ff5f 	bl	8006080 <HAL_RCCEx_GetPeriphCLKFreq>
 80081c2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d031      	beq.n	800822e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	3302      	adds	r3, #2
 80081ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f2:	4a25      	ldr	r2, [pc, #148]	; (8008288 <HAL_SD_ConfigWideBusOperation+0x170>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d907      	bls.n	8008208 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	4a24      	ldr	r2, [pc, #144]	; (800828c <HAL_SD_ConfigWideBusOperation+0x174>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	0ddb      	lsrs	r3, r3, #23
 8008202:	3b02      	subs	r3, #2
 8008204:	623b      	str	r3, [r7, #32]
 8008206:	e002      	b.n	800820e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	466c      	mov	r4, sp
 8008214:	f107 0318 	add.w	r3, r7, #24
 8008218:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800821c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fce4 	bl	8008bf4 <SDMMC_Init>
 800822c:	e008      	b.n	8008240 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008248:	4618      	mov	r0, r3
 800824a:	f000 fdb1 	bl	8008db0 <SDMMC_CmdBlockLength>
 800824e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00c      	beq.n	8008270 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800827c:	4618      	mov	r0, r3
 800827e:	3730      	adds	r7, #48	; 0x30
 8008280:	46bd      	mov	sp, r7
 8008282:	bdb0      	pop	{r4, r5, r7, pc}
 8008284:	004005ff 	.word	0x004005ff
 8008288:	017d7840 	.word	0x017d7840
 800828c:	55e63b89 	.word	0x55e63b89

08008290 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800829c:	f107 030c 	add.w	r3, r7, #12
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa78 	bl	8008798 <SD_SendStatus>
 80082a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0a5b      	lsrs	r3, r3, #9
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80082c6:	693b      	ldr	r3, [r7, #16]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	2b82      	cmp	r3, #130	; 0x82
 800830e:	d111      	bne.n	8008334 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fdf5 	bl	8008f04 <SDMMC_CmdStopTransfer>
 800831a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	431a      	orrs	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fd18 	bl	8007d64 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0208 	bic.w	r2, r2, #8
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f240 523a 	movw	r2, #1338	; 0x53a
 800834c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f002 fcf7 	bl	800ad50 <HAL_SD_RxCpltCallback>
#endif
}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008380:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d002      	beq.n	8008396 <SD_DMAError+0x2a>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d12d      	bne.n	80083f2 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a19      	ldr	r2, [pc, #100]	; (8008400 <SD_DMAError+0x94>)
 800839c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	f7ff ff68 	bl	8008290 <HAL_SD_GetCardState>
 80083c0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b06      	cmp	r3, #6
 80083c6:	d002      	beq.n	80083ce <SD_DMAError+0x62>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b05      	cmp	r3, #5
 80083cc:	d10a      	bne.n	80083e4 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fd96 	bl	8008f04 <SDMMC_CmdStopTransfer>
 80083d8:	4602      	mov	r2, r0
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083de:	431a      	orrs	r2, r3
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2200      	movs	r2, #0
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80083f2:	6978      	ldr	r0, [r7, #20]
 80083f4:	f7ff fcb6 	bl	8007d64 <HAL_SD_ErrorCallback>
#endif
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	004005ff 	.word	0x004005ff

08008404 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f240 523a 	movw	r2, #1338	; 0x53a
 800841a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7ff ff37 	bl	8008290 <HAL_SD_GetCardState>
 8008422:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b06      	cmp	r3, #6
 8008436:	d002      	beq.n	800843e <SD_DMATxAbort+0x3a>
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b05      	cmp	r3, #5
 800843c:	d10a      	bne.n	8008454 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fd5e 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8008448:	4602      	mov	r2, r0
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	431a      	orrs	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d103      	bne.n	8008464 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f002 fc63 	bl	800ad28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008462:	e002      	b.n	800846a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff fc7d 	bl	8007d64 <HAL_SD_ErrorCallback>
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f240 523a 	movw	r2, #1338	; 0x53a
 8008488:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff ff00 	bl	8008290 <HAL_SD_GetCardState>
 8008490:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b06      	cmp	r3, #6
 80084a4:	d002      	beq.n	80084ac <SD_DMARxAbort+0x3a>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b05      	cmp	r3, #5
 80084aa:	d10a      	bne.n	80084c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fd27 	bl	8008f04 <SDMMC_CmdStopTransfer>
 80084b6:	4602      	mov	r2, r0
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	431a      	orrs	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d103      	bne.n	80084d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f002 fc2c 	bl	800ad28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084d0:	e002      	b.n	80084d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff fc46 	bl	8007d64 <HAL_SD_ErrorCallback>
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084e0:	b5b0      	push	{r4, r5, r7, lr}
 80084e2:	b094      	sub	sp, #80	; 0x50
 80084e4:	af04      	add	r7, sp, #16
 80084e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084e8:	2301      	movs	r3, #1
 80084ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fbd9 	bl	8008ca8 <SDMMC_GetPowerState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008500:	e0b8      	b.n	8008674 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	2b03      	cmp	r3, #3
 8008508:	d02f      	beq.n	800856a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fe02 	bl	8009118 <SDMMC_CmdSendCID>
 8008514:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <SD_InitCard+0x40>
    {
      return errorstate;
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	e0a9      	b.n	8008674 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fc03 	bl	8008d32 <SDMMC_GetResponse>
 800852c:	4602      	mov	r2, r0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2104      	movs	r1, #4
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fbfa 	bl	8008d32 <SDMMC_GetResponse>
 800853e:	4602      	mov	r2, r0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2108      	movs	r1, #8
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fbf1 	bl	8008d32 <SDMMC_GetResponse>
 8008550:	4602      	mov	r2, r0
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	210c      	movs	r1, #12
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fbe8 	bl	8008d32 <SDMMC_GetResponse>
 8008562:	4602      	mov	r2, r0
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	2b03      	cmp	r3, #3
 8008570:	d00d      	beq.n	800858e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f107 020e 	add.w	r2, r7, #14
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fe08 	bl	8009192 <SDMMC_CmdSetRelAdd>
 8008582:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <SD_InitCard+0xae>
    {
      return errorstate;
 800858a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858c:	e072      	b.n	8008674 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008592:	2b03      	cmp	r3, #3
 8008594:	d036      	beq.n	8008604 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008596:	89fb      	ldrh	r3, [r7, #14]
 8008598:	461a      	mov	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f000 fdd2 	bl	8009154 <SDMMC_CmdSendCSD>
 80085b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	e05b      	b.n	8008674 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fbb5 	bl	8008d32 <SDMMC_GetResponse>
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2104      	movs	r1, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fbac 	bl	8008d32 <SDMMC_GetResponse>
 80085da:	4602      	mov	r2, r0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2108      	movs	r1, #8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fba3 	bl	8008d32 <SDMMC_GetResponse>
 80085ec:	4602      	mov	r2, r0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	210c      	movs	r1, #12
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fb9a 	bl	8008d32 <SDMMC_GetResponse>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2104      	movs	r1, #4
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fb91 	bl	8008d32 <SDMMC_GetResponse>
 8008610:	4603      	mov	r3, r0
 8008612:	0d1a      	lsrs	r2, r3, #20
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008618:	f107 0310 	add.w	r3, r7, #16
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fbaa 	bl	8007d78 <HAL_SD_GetCardCSD>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800862a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800862e:	e021      	b.n	8008674 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008638:	041b      	lsls	r3, r3, #16
 800863a:	2200      	movs	r2, #0
 800863c:	461c      	mov	r4, r3
 800863e:	4615      	mov	r5, r2
 8008640:	4622      	mov	r2, r4
 8008642:	462b      	mov	r3, r5
 8008644:	4608      	mov	r0, r1
 8008646:	f000 fc7f 	bl	8008f48 <SDMMC_CmdSelDesel>
 800864a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800864c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <SD_InitCard+0x176>
  {
    return errorstate;
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	e00e      	b.n	8008674 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681d      	ldr	r5, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	466c      	mov	r4, sp
 800865e:	f103 0210 	add.w	r2, r3, #16
 8008662:	ca07      	ldmia	r2, {r0, r1, r2}
 8008664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008668:	3304      	adds	r3, #4
 800866a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800866c:	4628      	mov	r0, r5
 800866e:	f000 fac1 	bl	8008bf4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3740      	adds	r7, #64	; 0x40
 8008678:	46bd      	mov	sp, r7
 800867a:	bdb0      	pop	{r4, r5, r7, pc}

0800867c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	2300      	movs	r3, #0
 800868e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fc7a 	bl	8008f8e <SDMMC_CmdGoIdleState>
 800869a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	e072      	b.n	800878c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fc8d 	bl	8008fca <SDMMC_CmdOperCond>
 80086b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00d      	beq.n	80086d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fc63 	bl	8008f8e <SDMMC_CmdGoIdleState>
 80086c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <SD_PowerON+0x5e>
    {
      return errorstate;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	e05b      	b.n	800878c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d137      	bne.n	8008752 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fc8d 	bl	8009008 <SDMMC_CmdAppCommand>
 80086ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02d      	beq.n	8008752 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086fa:	e047      	b.n	800878c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fc80 	bl	8009008 <SDMMC_CmdAppCommand>
 8008708:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <SD_PowerON+0x98>
    {
      return errorstate;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	e03b      	b.n	800878c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	491e      	ldr	r1, [pc, #120]	; (8008794 <SD_PowerON+0x118>)
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fc96 	bl	800904c <SDMMC_CmdAppOperCommand>
 8008720:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800872c:	e02e      	b.n	800878c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2100      	movs	r1, #0
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fafc 	bl	8008d32 <SDMMC_GetResponse>
 800873a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	0fdb      	lsrs	r3, r3, #31
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <SD_PowerON+0xcc>
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <SD_PowerON+0xce>
 8008748:	2300      	movs	r3, #0
 800874a:	613b      	str	r3, [r7, #16]

    count++;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	3301      	adds	r3, #1
 8008750:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008758:	4293      	cmp	r3, r2
 800875a:	d802      	bhi.n	8008762 <SD_PowerON+0xe6>
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0cc      	beq.n	80086fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008768:	4293      	cmp	r3, r2
 800876a:	d902      	bls.n	8008772 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800876c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008770:	e00c      	b.n	800878c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	645a      	str	r2, [r3, #68]	; 0x44
 8008782:	e002      	b.n	800878a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	c1100000 	.word	0xc1100000

08008798 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d102      	bne.n	80087ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80087a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087ac:	e018      	b.n	80087e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b6:	041b      	lsls	r3, r3, #16
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f000 fd0a 	bl	80091d4 <SDMMC_CmdSendStatus>
 80087c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <SD_SendStatus+0x34>
  {
    return errorstate;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	e009      	b.n	80087e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2100      	movs	r1, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 faad 	bl	8008d32 <SDMMC_GetResponse>
 80087d8:	4602      	mov	r2, r0
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fa97 	bl	8008d32 <SDMMC_GetResponse>
 8008804:	4603      	mov	r3, r0
 8008806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800880a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880e:	d102      	bne.n	8008816 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008814:	e02f      	b.n	8008876 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f879 	bl	8008914 <SD_FindSCR>
 8008822:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	e023      	b.n	8008876 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01c      	beq.n	8008872 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008840:	041b      	lsls	r3, r3, #16
 8008842:	4619      	mov	r1, r3
 8008844:	4610      	mov	r0, r2
 8008846:	f000 fbdf 	bl	8009008 <SDMMC_CmdAppCommand>
 800884a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	e00f      	b.n	8008876 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2102      	movs	r1, #2
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fc18 	bl	8009092 <SDMMC_CmdBusWidth>
 8008862:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	e003      	b.n	8008876 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
 8008870:	e001      	b.n	8008876 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008872:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	2300      	movs	r3, #0
 800888c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fa4c 	bl	8008d32 <SDMMC_GetResponse>
 800889a:	4603      	mov	r3, r0
 800889c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a4:	d102      	bne.n	80088ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088aa:	e02f      	b.n	800890c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088ac:	f107 030c 	add.w	r3, r7, #12
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f82e 	bl	8008914 <SD_FindSCR>
 80088b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	e023      	b.n	800890c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01c      	beq.n	8008908 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d6:	041b      	lsls	r3, r3, #16
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f000 fb94 	bl	8009008 <SDMMC_CmdAppCommand>
 80088e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	e00f      	b.n	800890c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fbcd 	bl	8009092 <SDMMC_CmdBusWidth>
 80088f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	e003      	b.n	800890c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008904:	2300      	movs	r3, #0
 8008906:	e001      	b.n	800890c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008908:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b08f      	sub	sp, #60	; 0x3c
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800891e:	f7f9 fd1f 	bl	8002360 <HAL_GetTick>
 8008922:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008928:	2300      	movs	r3, #0
 800892a:	60bb      	str	r3, [r7, #8]
 800892c:	2300      	movs	r3, #0
 800892e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2108      	movs	r1, #8
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fa38 	bl	8008db0 <SDMMC_CmdBlockLength>
 8008940:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	e0a9      	b.n	8008aa0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008954:	041b      	lsls	r3, r3, #16
 8008956:	4619      	mov	r1, r3
 8008958:	4610      	mov	r0, r2
 800895a:	f000 fb55 	bl	8009008 <SDMMC_CmdAppCommand>
 800895e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	e09a      	b.n	8008aa0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800896a:	f04f 33ff 	mov.w	r3, #4294967295
 800896e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008970:	2308      	movs	r3, #8
 8008972:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008974:	2330      	movs	r3, #48	; 0x30
 8008976:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008978:	2302      	movs	r3, #2
 800897a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800897c:	2300      	movs	r3, #0
 800897e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008980:	2301      	movs	r3, #1
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f107 0210 	add.w	r2, r7, #16
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f9e2 	bl	8008d58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fb9c 	bl	80090d6 <SDMMC_CmdSendSCR>
 800899e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d022      	beq.n	80089ec <SD_FindSCR+0xd8>
  {
    return errorstate;
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	e07a      	b.n	8008aa0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6819      	ldr	r1, [r3, #0]
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	f107 0208 	add.w	r2, r7, #8
 80089c4:	18d4      	adds	r4, r2, r3
 80089c6:	4608      	mov	r0, r1
 80089c8:	f000 f941 	bl	8008c4e <SDMMC_ReadFIFO>
 80089cc:	4603      	mov	r3, r0
 80089ce:	6023      	str	r3, [r4, #0]
      index++;
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	3301      	adds	r3, #1
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089d6:	f7f9 fcc3 	bl	8002360 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e4:	d102      	bne.n	80089ec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ea:	e059      	b.n	8008aa0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f2:	f240 432a 	movw	r3, #1066	; 0x42a
 80089f6:	4013      	ands	r3, r2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0d6      	beq.n	80089aa <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2208      	movs	r2, #8
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a12:	2308      	movs	r3, #8
 8008a14:	e044      	b.n	8008aa0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e037      	b.n	8008aa0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2220      	movs	r2, #32
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a46:	2320      	movs	r3, #32
 8008a48:	e02a      	b.n	8008aa0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	061a      	lsls	r2, r3, #24
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	0a1b      	lsrs	r3, r3, #8
 8008a66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	0e1b      	lsrs	r3, r3, #24
 8008a70:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	601a      	str	r2, [r3, #0]
    scr++;
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	3304      	adds	r3, #4
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	061a      	lsls	r2, r3, #24
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	0a1b      	lsrs	r3, r3, #8
 8008a8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	0e1b      	lsrs	r3, r3, #24
 8008a98:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	373c      	adds	r7, #60	; 0x3c
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd90      	pop	{r4, r7, pc}

08008aa8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d03f      	beq.n	8008b42 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	e033      	b.n	8008b30 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f8be 	bl	8008c4e <SDMMC_ReadFIFO>
 8008ad2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3301      	adds	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	0c1b      	lsrs	r3, r3, #16
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	0e1b      	lsrs	r3, r3, #24
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3301      	adds	r3, #1
 8008b22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b07      	cmp	r3, #7
 8008b34:	d9c8      	bls.n	8008ac8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008b42:	bf00      	nop
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d043      	beq.n	8008bec <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e037      	b.n	8008bda <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	021a      	lsls	r2, r3, #8
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	041a      	lsls	r2, r3, #16
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	061a      	lsls	r2, r3, #24
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f107 0208 	add.w	r2, r7, #8
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f84a 	bl	8008c68 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b07      	cmp	r3, #7
 8008bde:	d9c4      	bls.n	8008b6a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008bec:	bf00      	nop
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	f107 001c 	add.w	r0, r7, #28
 8008c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008c12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008c16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008c1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008c1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008c22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	b004      	add	sp, #16
 8008c4c:	4770      	bx	lr

08008c4e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2203      	movs	r2, #3
 8008c96:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008c98:	2002      	movs	r0, #2
 8008c9a:	f7f9 fb6d 	bl	8002378 <HAL_Delay>

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ce2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ce8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008cee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cfe:	f023 030f 	bic.w	r3, r3, #15
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	b2db      	uxtb	r3, r3
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3314      	adds	r3, #20
 8008d40:	461a      	mov	r2, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	4413      	add	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d84:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0

}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dc2:	2340      	movs	r3, #64	; 0x40
 8008dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dd0:	f107 0308 	add.w	r3, r7, #8
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff ff74 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de0:	2110      	movs	r1, #16
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa18 	bl	8009218 <SDMMC_GetCmdResp1>
 8008de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dea:	69fb      	ldr	r3, [r7, #28]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e02:	2311      	movs	r3, #17
 8008e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e06:	2340      	movs	r3, #64	; 0x40
 8008e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff ff52 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e24:	2111      	movs	r1, #17
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f9f6 	bl	8009218 <SDMMC_GetCmdResp1>
 8008e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e46:	2312      	movs	r3, #18
 8008e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff ff30 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e68:	2112      	movs	r1, #18
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f9d4 	bl	8009218 <SDMMC_GetCmdResp1>
 8008e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e72:	69fb      	ldr	r3, [r7, #28]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e8a:	2318      	movs	r3, #24
 8008e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e9c:	f107 0308 	add.w	r3, r7, #8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff ff0e 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eac:	2118      	movs	r1, #24
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f9b2 	bl	8009218 <SDMMC_GetCmdResp1>
 8008eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008ece:	2319      	movs	r3, #25
 8008ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ed2:	2340      	movs	r3, #64	; 0x40
 8008ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ee0:	f107 0308 	add.w	r3, r7, #8
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff feec 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef0:	2119      	movs	r1, #25
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f990 	bl	8009218 <SDMMC_GetCmdResp1>
 8008ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008efa:	69fb      	ldr	r3, [r7, #28]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3720      	adds	r7, #32
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f10:	230c      	movs	r3, #12
 8008f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f14:	2340      	movs	r3, #64	; 0x40
 8008f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f20:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff fecb 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f2e:	4a05      	ldr	r2, [pc, #20]	; (8008f44 <SDMMC_CmdStopTransfer+0x40>)
 8008f30:	210c      	movs	r1, #12
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f970 	bl	8009218 <SDMMC_GetCmdResp1>
 8008f38:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3720      	adds	r7, #32
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	05f5e100 	.word	0x05f5e100

08008f48 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f58:	2307      	movs	r3, #7
 8008f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f68:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff fea7 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7a:	2107      	movs	r1, #7
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f94b 	bl	8009218 <SDMMC_GetCmdResp1>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3728      	adds	r7, #40	; 0x28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff fe86 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb65 	bl	8009688 <SDMMC_GetCmdError>
 8008fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3720      	adds	r7, #32
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fd8:	2308      	movs	r3, #8
 8008fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fdc:	2340      	movs	r3, #64	; 0x40
 8008fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff fe67 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 faf8 	bl	80095ec <SDMMC_GetCmdResp7>
 8008ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009016:	2337      	movs	r3, #55	; 0x37
 8009018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009028:	f107 0308 	add.w	r3, r7, #8
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fe48 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009034:	f241 3288 	movw	r2, #5000	; 0x1388
 8009038:	2137      	movs	r1, #55	; 0x37
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f8ec 	bl	8009218 <SDMMC_GetCmdResp1>
 8009040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009042:	69fb      	ldr	r3, [r7, #28]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3720      	adds	r7, #32
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800905c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009060:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009062:	2329      	movs	r3, #41	; 0x29
 8009064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009066:	2340      	movs	r3, #64	; 0x40
 8009068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800906e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fe22 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9ff 	bl	8009484 <SDMMC_GetCmdResp3>
 8009086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009088:	69fb      	ldr	r3, [r7, #28]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b088      	sub	sp, #32
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090a0:	2306      	movs	r3, #6
 80090a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a4:	2340      	movs	r3, #64	; 0x40
 80090a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fe03 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090be:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c2:	2106      	movs	r1, #6
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f8a7 	bl	8009218 <SDMMC_GetCmdResp1>
 80090ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090cc:	69fb      	ldr	r3, [r7, #28]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b088      	sub	sp, #32
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090e2:	2333      	movs	r3, #51	; 0x33
 80090e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fde2 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009100:	f241 3288 	movw	r2, #5000	; 0x1388
 8009104:	2133      	movs	r1, #51	; 0x33
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f886 	bl	8009218 <SDMMC_GetCmdResp1>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009124:	2302      	movs	r3, #2
 8009126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009128:	23c0      	movs	r3, #192	; 0xc0
 800912a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff fdc1 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f956 	bl	80093f4 <SDMMC_GetCmdResp2>
 8009148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914a:	69fb      	ldr	r3, [r7, #28]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3720      	adds	r7, #32
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009162:	2309      	movs	r3, #9
 8009164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009166:	23c0      	movs	r3, #192	; 0xc0
 8009168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800916e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fda2 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f937 	bl	80093f4 <SDMMC_GetCmdResp2>
 8009186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009188:	69fb      	ldr	r3, [r7, #28]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3720      	adds	r7, #32
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091a0:	2303      	movs	r3, #3
 80091a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fd83 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	2103      	movs	r1, #3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f99c 	bl	8009500 <SDMMC_GetCmdResp6>
 80091c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ca:	69fb      	ldr	r3, [r7, #28]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3720      	adds	r7, #32
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091e2:	230d      	movs	r3, #13
 80091e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091f4:	f107 0308 	add.w	r3, r7, #8
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fd62 	bl	8008cc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009200:	f241 3288 	movw	r2, #5000	; 0x1388
 8009204:	210d      	movs	r1, #13
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f806 	bl	8009218 <SDMMC_GetCmdResp1>
 800920c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800920e:	69fb      	ldr	r3, [r7, #28]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	460b      	mov	r3, r1
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009226:	4b70      	ldr	r3, [pc, #448]	; (80093e8 <SDMMC_GetCmdResp1+0x1d0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a70      	ldr	r2, [pc, #448]	; (80093ec <SDMMC_GetCmdResp1+0x1d4>)
 800922c:	fba2 2303 	umull	r2, r3, r2, r3
 8009230:	0a5a      	lsrs	r2, r3, #9
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	1e5a      	subs	r2, r3, #1
 800923e:	61fa      	str	r2, [r7, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009248:	e0c9      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0ef      	beq.n	800923a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1ea      	bne.n	800923a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2204      	movs	r2, #4
 8009274:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009276:	2304      	movs	r3, #4
 8009278:	e0b1      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800928c:	2301      	movs	r3, #1
 800928e:	e0a6      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	22c5      	movs	r2, #197	; 0xc5
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7ff fd3e 	bl	8008d18 <SDMMC_GetCommandResponse>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d001      	beq.n	80092aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e099      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092aa:	2100      	movs	r1, #0
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff fd40 	bl	8008d32 <SDMMC_GetResponse>
 80092b2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	4b4e      	ldr	r3, [pc, #312]	; (80093f0 <SDMMC_GetCmdResp1+0x1d8>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
 80092c0:	e08d      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da02      	bge.n	80092ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092cc:	e087      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092d8:	2340      	movs	r3, #64	; 0x40
 80092da:	e080      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092e6:	2380      	movs	r3, #128	; 0x80
 80092e8:	e079      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f8:	e071      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009308:	e069      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009318:	e061      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009328:	e059      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009338:	e051      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009348:	e049      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009358:	e041      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009368:	e039      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009378:	e031      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009388:	e029      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009398:	e021      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093a8:	e019      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093b8:	e011      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093c8:	e009      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093d8:	e001      	b.n	80093de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000000 	.word	0x20000000
 80093ec:	10624dd3 	.word	0x10624dd3
 80093f0:	fdffe008 	.word	0xfdffe008

080093f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093fc:	4b1f      	ldr	r3, [pc, #124]	; (800947c <SDMMC_GetCmdResp2+0x88>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <SDMMC_GetCmdResp2+0x8c>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	0a5b      	lsrs	r3, r3, #9
 8009408:	f241 3288 	movw	r2, #5000	; 0x1388
 800940c:	fb02 f303 	mul.w	r3, r2, r3
 8009410:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1e5a      	subs	r2, r3, #1
 8009416:	60fa      	str	r2, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d102      	bne.n	8009422 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800941c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009420:	e026      	b.n	8009470 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0ef      	beq.n	8009412 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1ea      	bne.n	8009412 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2204      	movs	r2, #4
 800944c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800944e:	2304      	movs	r3, #4
 8009450:	e00e      	b.n	8009470 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009464:	2301      	movs	r3, #1
 8009466:	e003      	b.n	8009470 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	22c5      	movs	r2, #197	; 0xc5
 800946c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20000000 	.word	0x20000000
 8009480:	10624dd3 	.word	0x10624dd3

08009484 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800948c:	4b1a      	ldr	r3, [pc, #104]	; (80094f8 <SDMMC_GetCmdResp3+0x74>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a1a      	ldr	r2, [pc, #104]	; (80094fc <SDMMC_GetCmdResp3+0x78>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	0a5b      	lsrs	r3, r3, #9
 8009498:	f241 3288 	movw	r2, #5000	; 0x1388
 800949c:	fb02 f303 	mul.w	r3, r2, r3
 80094a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	60fa      	str	r2, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094b0:	e01b      	b.n	80094ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0ef      	beq.n	80094a2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ea      	bne.n	80094a2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2204      	movs	r2, #4
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094de:	2304      	movs	r3, #4
 80094e0:	e003      	b.n	80094ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	22c5      	movs	r2, #197	; 0xc5
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000000 	.word	0x20000000
 80094fc:	10624dd3 	.word	0x10624dd3

08009500 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	460b      	mov	r3, r1
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800950e:	4b35      	ldr	r3, [pc, #212]	; (80095e4 <SDMMC_GetCmdResp6+0xe4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a35      	ldr	r2, [pc, #212]	; (80095e8 <SDMMC_GetCmdResp6+0xe8>)
 8009514:	fba2 2303 	umull	r2, r3, r2, r3
 8009518:	0a5b      	lsrs	r3, r3, #9
 800951a:	f241 3288 	movw	r2, #5000	; 0x1388
 800951e:	fb02 f303 	mul.w	r3, r2, r3
 8009522:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	1e5a      	subs	r2, r3, #1
 8009528:	61fa      	str	r2, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800952e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009532:	e052      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009538:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0ef      	beq.n	8009524 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1ea      	bne.n	8009524 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2204      	movs	r2, #4
 800955e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009560:	2304      	movs	r3, #4
 8009562:	e03a      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009576:	2301      	movs	r3, #1
 8009578:	e02f      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff fbcc 	bl	8008d18 <SDMMC_GetCommandResponse>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	7afb      	ldrb	r3, [r7, #11]
 8009586:	4293      	cmp	r3, r2
 8009588:	d001      	beq.n	800958e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800958a:	2301      	movs	r3, #1
 800958c:	e025      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	22c5      	movs	r2, #197	; 0xc5
 8009592:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009594:	2100      	movs	r1, #0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7ff fbcb 	bl	8008d32 <SDMMC_GetResponse>
 800959c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	e011      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095c4:	e009      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095d4:	e001      	b.n	80095da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000000 	.word	0x20000000
 80095e8:	10624dd3 	.word	0x10624dd3

080095ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095f4:	4b22      	ldr	r3, [pc, #136]	; (8009680 <SDMMC_GetCmdResp7+0x94>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a22      	ldr	r2, [pc, #136]	; (8009684 <SDMMC_GetCmdResp7+0x98>)
 80095fa:	fba2 2303 	umull	r2, r3, r2, r3
 80095fe:	0a5b      	lsrs	r3, r3, #9
 8009600:	f241 3288 	movw	r2, #5000	; 0x1388
 8009604:	fb02 f303 	mul.w	r3, r2, r3
 8009608:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1e5a      	subs	r2, r3, #1
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009618:	e02c      	b.n	8009674 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0ef      	beq.n	800960a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1ea      	bne.n	800960a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d004      	beq.n	800964a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2204      	movs	r2, #4
 8009644:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009646:	2304      	movs	r3, #4
 8009648:	e014      	b.n	8009674 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800965c:	2301      	movs	r3, #1
 800965e:	e009      	b.n	8009674 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2240      	movs	r2, #64	; 0x40
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009672:	2300      	movs	r3, #0

}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20000000 	.word	0x20000000
 8009684:	10624dd3 	.word	0x10624dd3

08009688 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <SDMMC_GetCmdError+0x50>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <SDMMC_GetCmdError+0x54>)
 8009696:	fba2 2303 	umull	r2, r3, r2, r3
 800969a:	0a5b      	lsrs	r3, r3, #9
 800969c:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a0:	fb02 f303 	mul.w	r3, r2, r3
 80096a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	1e5a      	subs	r2, r3, #1
 80096aa:	60fa      	str	r2, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b4:	e009      	b.n	80096ca <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f1      	beq.n	80096a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	22c5      	movs	r2, #197	; 0xc5
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000000 	.word	0x20000000
 80096dc:	10624dd3 	.word	0x10624dd3

080096e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096e0:	b084      	sub	sp, #16
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	f107 001c 	add.w	r0, r7, #28
 80096ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fa1c 	bl	800ab3c <USB_CoreReset>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	639a      	str	r2, [r3, #56]	; 0x38
 800971a:	e005      	b.n	8009728 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009734:	b004      	add	sp, #16
 8009736:	4770      	bx	lr

08009738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4613      	mov	r3, r2
 8009744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d165      	bne.n	8009818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4a3e      	ldr	r2, [pc, #248]	; (8009848 <USB_SetTurnaroundTime+0x110>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d906      	bls.n	8009762 <USB_SetTurnaroundTime+0x2a>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4a3d      	ldr	r2, [pc, #244]	; (800984c <USB_SetTurnaroundTime+0x114>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d202      	bcs.n	8009762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800975c:	230f      	movs	r3, #15
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	e05c      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4a39      	ldr	r2, [pc, #228]	; (800984c <USB_SetTurnaroundTime+0x114>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d306      	bcc.n	8009778 <USB_SetTurnaroundTime+0x40>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4a38      	ldr	r2, [pc, #224]	; (8009850 <USB_SetTurnaroundTime+0x118>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d202      	bcs.n	8009778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009772:	230e      	movs	r3, #14
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	e051      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4a35      	ldr	r2, [pc, #212]	; (8009850 <USB_SetTurnaroundTime+0x118>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d306      	bcc.n	800978e <USB_SetTurnaroundTime+0x56>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a34      	ldr	r2, [pc, #208]	; (8009854 <USB_SetTurnaroundTime+0x11c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d202      	bcs.n	800978e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009788:	230d      	movs	r3, #13
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e046      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4a30      	ldr	r2, [pc, #192]	; (8009854 <USB_SetTurnaroundTime+0x11c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d306      	bcc.n	80097a4 <USB_SetTurnaroundTime+0x6c>
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4a2f      	ldr	r2, [pc, #188]	; (8009858 <USB_SetTurnaroundTime+0x120>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d802      	bhi.n	80097a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800979e:	230c      	movs	r3, #12
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e03b      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4a2c      	ldr	r2, [pc, #176]	; (8009858 <USB_SetTurnaroundTime+0x120>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d906      	bls.n	80097ba <USB_SetTurnaroundTime+0x82>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4a2b      	ldr	r2, [pc, #172]	; (800985c <USB_SetTurnaroundTime+0x124>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d802      	bhi.n	80097ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097b4:	230b      	movs	r3, #11
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	e030      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4a27      	ldr	r2, [pc, #156]	; (800985c <USB_SetTurnaroundTime+0x124>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d906      	bls.n	80097d0 <USB_SetTurnaroundTime+0x98>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4a26      	ldr	r2, [pc, #152]	; (8009860 <USB_SetTurnaroundTime+0x128>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d802      	bhi.n	80097d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097ca:	230a      	movs	r3, #10
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	e025      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4a23      	ldr	r2, [pc, #140]	; (8009860 <USB_SetTurnaroundTime+0x128>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d906      	bls.n	80097e6 <USB_SetTurnaroundTime+0xae>
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4a22      	ldr	r2, [pc, #136]	; (8009864 <USB_SetTurnaroundTime+0x12c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d202      	bcs.n	80097e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097e0:	2309      	movs	r3, #9
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	e01a      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4a1e      	ldr	r2, [pc, #120]	; (8009864 <USB_SetTurnaroundTime+0x12c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d306      	bcc.n	80097fc <USB_SetTurnaroundTime+0xc4>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4a1d      	ldr	r2, [pc, #116]	; (8009868 <USB_SetTurnaroundTime+0x130>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d802      	bhi.n	80097fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097f6:	2308      	movs	r3, #8
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	e00f      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4a1a      	ldr	r2, [pc, #104]	; (8009868 <USB_SetTurnaroundTime+0x130>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d906      	bls.n	8009812 <USB_SetTurnaroundTime+0xda>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4a19      	ldr	r2, [pc, #100]	; (800986c <USB_SetTurnaroundTime+0x134>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d202      	bcs.n	8009812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800980c:	2307      	movs	r3, #7
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	e004      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009812:	2306      	movs	r3, #6
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e001      	b.n	800981c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009818:	2309      	movs	r3, #9
 800981a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	029b      	lsls	r3, r3, #10
 8009830:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009834:	431a      	orrs	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	00d8acbf 	.word	0x00d8acbf
 800984c:	00e4e1c0 	.word	0x00e4e1c0
 8009850:	00f42400 	.word	0x00f42400
 8009854:	01067380 	.word	0x01067380
 8009858:	011a499f 	.word	0x011a499f
 800985c:	01312cff 	.word	0x01312cff
 8009860:	014ca43f 	.word	0x014ca43f
 8009864:	016e3600 	.word	0x016e3600
 8009868:	01a6ab1f 	.word	0x01a6ab1f
 800986c:	01e84800 	.word	0x01e84800

08009870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f043 0201 	orr.w	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f023 0201 	bic.w	r2, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d115      	bne.n	8009902 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098e2:	2001      	movs	r0, #1
 80098e4:	f7f8 fd48 	bl	8002378 <HAL_Delay>
      ms++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 f8ab 	bl	800aa4a <USB_GetMode>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d01e      	beq.n	8009938 <USB_SetCurrentMode+0x84>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b31      	cmp	r3, #49	; 0x31
 80098fe:	d9f0      	bls.n	80098e2 <USB_SetCurrentMode+0x2e>
 8009900:	e01a      	b.n	8009938 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d115      	bne.n	8009934 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009914:	2001      	movs	r0, #1
 8009916:	f7f8 fd2f 	bl	8002378 <HAL_Delay>
      ms++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f892 	bl	800aa4a <USB_GetMode>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <USB_SetCurrentMode+0x84>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b31      	cmp	r3, #49	; 0x31
 8009930:	d9f0      	bls.n	8009914 <USB_SetCurrentMode+0x60>
 8009932:	e001      	b.n	8009938 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e005      	b.n	8009944 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b32      	cmp	r3, #50	; 0x32
 800993c:	d101      	bne.n	8009942 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800994c:	b084      	sub	sp, #16
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800995a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	e009      	b.n	8009980 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3340      	adds	r3, #64	; 0x40
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	2200      	movs	r2, #0
 8009978:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	3301      	adds	r3, #1
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b0e      	cmp	r3, #14
 8009984:	d9f2      	bls.n	800996c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d11c      	bne.n	80099c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800999a:	f043 0302 	orr.w	r3, r3, #2
 800999e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e005      	b.n	80099d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099d8:	461a      	mov	r2, r3
 80099da:	2300      	movs	r3, #0
 80099dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099de:	2103      	movs	r1, #3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f959 	bl	8009c98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099e6:	2110      	movs	r1, #16
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f8f1 	bl	8009bd0 <USB_FlushTxFifo>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f91d 	bl	8009c38 <USB_FlushRxFifo>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0e:	461a      	mov	r2, r3
 8009a10:	2300      	movs	r3, #0
 8009a12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	461a      	mov	r2, r3
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	e043      	b.n	8009aba <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a48:	d118      	bne.n	8009a7c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	e013      	b.n	8009a8e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	461a      	mov	r2, r3
 8009a74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	e008      	b.n	8009a8e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	461a      	mov	r2, r3
 8009aae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d3b7      	bcc.n	8009a32 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	e043      	b.n	8009b50 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ade:	d118      	bne.n	8009b12 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10a      	bne.n	8009afc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	461a      	mov	r2, r3
 8009af4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	e013      	b.n	8009b24 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	e008      	b.n	8009b24 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1e:	461a      	mov	r2, r3
 8009b20:	2300      	movs	r3, #0
 8009b22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b30:	461a      	mov	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b42:	461a      	mov	r2, r3
 8009b44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	613b      	str	r3, [r7, #16]
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d3b7      	bcc.n	8009ac8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f043 0210 	orr.w	r2, r3, #16
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <USB_DevInit+0x280>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	f043 0208 	orr.w	r2, r3, #8
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d107      	bne.n	8009bba <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bb2:	f043 0304 	orr.w	r3, r3, #4
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bc6:	b004      	add	sp, #16
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	803c3800 	.word	0x803c3800

08009bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4a13      	ldr	r2, [pc, #76]	; (8009c34 <USB_FlushTxFifo+0x64>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d901      	bls.n	8009bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e01b      	b.n	8009c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	daf2      	bge.n	8009bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	019b      	lsls	r3, r3, #6
 8009c00:	f043 0220 	orr.w	r2, r3, #32
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4a08      	ldr	r2, [pc, #32]	; (8009c34 <USB_FlushTxFifo+0x64>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d901      	bls.n	8009c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e006      	b.n	8009c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	d0f0      	beq.n	8009c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	00030d40 	.word	0x00030d40

08009c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a11      	ldr	r2, [pc, #68]	; (8009c94 <USB_FlushRxFifo+0x5c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d901      	bls.n	8009c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e018      	b.n	8009c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	daf2      	bge.n	8009c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2210      	movs	r2, #16
 8009c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <USB_FlushRxFifo+0x5c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d901      	bls.n	8009c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e006      	b.n	8009c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d0f0      	beq.n	8009c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	00030d40 	.word	0x00030d40

08009c98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	68f9      	ldr	r1, [r7, #12]
 8009cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b087      	sub	sp, #28
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f003 0306 	and.w	r3, r3, #6
 8009ce2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d002      	beq.n	8009cf0 <USB_GetDevSpeed+0x26>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b06      	cmp	r3, #6
 8009cee:	d102      	bne.n	8009cf6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	75fb      	strb	r3, [r7, #23]
 8009cf4:	e001      	b.n	8009cfa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009cf6:	230f      	movs	r3, #15
 8009cf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	785b      	ldrb	r3, [r3, #1]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d13a      	bne.n	8009d9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2a:	69da      	ldr	r2, [r3, #28]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 030f 	and.w	r3, r3, #15
 8009d34:	2101      	movs	r1, #1
 8009d36:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d42:	4313      	orrs	r3, r2
 8009d44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d155      	bne.n	8009e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	791b      	ldrb	r3, [r3, #4]
 8009d76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	059b      	lsls	r3, r3, #22
 8009d7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d80:	4313      	orrs	r3, r2
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	0151      	lsls	r1, r2, #5
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	440a      	add	r2, r1
 8009d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	e036      	b.n	8009e08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da0:	69da      	ldr	r2, [r3, #28]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	f003 030f 	and.w	r3, r3, #15
 8009daa:	2101      	movs	r1, #1
 8009dac:	fa01 f303 	lsl.w	r3, r1, r3
 8009db0:	041b      	lsls	r3, r3, #16
 8009db2:	68f9      	ldr	r1, [r7, #12]
 8009db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009db8:	4313      	orrs	r3, r2
 8009dba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d11a      	bne.n	8009e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	791b      	ldrb	r3, [r3, #4]
 8009dec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dee:	430b      	orrs	r3, r1
 8009df0:	4313      	orrs	r3, r2
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d161      	bne.n	8009ef8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e4a:	d11f      	bne.n	8009e8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	43db      	mvns	r3, r3
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eac:	4013      	ands	r3, r2
 8009eae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb6:	69da      	ldr	r2, [r3, #28]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f003 030f 	and.w	r3, r3, #15
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	43db      	mvns	r3, r3
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	0159      	lsls	r1, r3, #5
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	440b      	add	r3, r1
 8009eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4b35      	ldr	r3, [pc, #212]	; (8009fc8 <USB_DeactivateEndpoint+0x1b0>)
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	600b      	str	r3, [r1, #0]
 8009ef6:	e060      	b.n	8009fba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f0e:	d11f      	bne.n	8009f50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f303 	lsl.w	r3, r1, r3
 8009f66:	041b      	lsls	r3, r3, #16
 8009f68:	43db      	mvns	r3, r3
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f70:	4013      	ands	r3, r2
 8009f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7a:	69da      	ldr	r2, [r3, #28]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 030f 	and.w	r3, r3, #15
 8009f84:	2101      	movs	r1, #1
 8009f86:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8a:	041b      	lsls	r3, r3, #16
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f94:	4013      	ands	r3, r2
 8009f96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	0159      	lsls	r1, r3, #5
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	440b      	add	r3, r1
 8009fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <USB_DeactivateEndpoint+0x1b4>)
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	ec337800 	.word	0xec337800
 8009fcc:	eff37800 	.word	0xeff37800

08009fd0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	785b      	ldrb	r3, [r3, #1]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	f040 8128 	bne.w	800a23e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d132      	bne.n	800a05c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	0151      	lsls	r1, r2, #5
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	440a      	add	r2, r1
 800a030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a054:	0cdb      	lsrs	r3, r3, #19
 800a056:	04db      	lsls	r3, r3, #19
 800a058:	6113      	str	r3, [r2, #16]
 800a05a:	e092      	b.n	800a182 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a076:	0cdb      	lsrs	r3, r3, #19
 800a078:	04db      	lsls	r3, r3, #19
 800a07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a09a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a09e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d11a      	bne.n	800a0dc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d903      	bls.n	800a0ba <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0d8:	6113      	str	r3, [r2, #16]
 800a0da:	e01b      	b.n	800a114 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	6919      	ldr	r1, [r3, #16]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	1e59      	subs	r1, r3, #1
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a100:	4b8d      	ldr	r3, [pc, #564]	; (800a338 <USB_EPStartXfer+0x368>)
 800a102:	400b      	ands	r3, r1
 800a104:	6939      	ldr	r1, [r7, #16]
 800a106:	0148      	lsls	r0, r1, #5
 800a108:	6979      	ldr	r1, [r7, #20]
 800a10a:	4401      	add	r1, r0
 800a10c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a110:	4313      	orrs	r3, r2
 800a112:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a12a:	6939      	ldr	r1, [r7, #16]
 800a12c:	0148      	lsls	r0, r1, #5
 800a12e:	6979      	ldr	r1, [r7, #20]
 800a130:	4401      	add	r1, r0
 800a132:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a136:	4313      	orrs	r3, r2
 800a138:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	791b      	ldrb	r3, [r3, #4]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d11f      	bne.n	800a182 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	0151      	lsls	r1, r2, #5
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	440a      	add	r2, r1
 800a158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a15c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a160:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a180:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a19c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1a0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	791b      	ldrb	r3, [r3, #4]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d015      	beq.n	800a1d6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 8139 	beq.w	800a426 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 030f 	and.w	r3, r3, #15
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ca:	6979      	ldr	r1, [r7, #20]
 800a1cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	634b      	str	r3, [r1, #52]	; 0x34
 800a1d4:	e127      	b.n	800a426 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d110      	bne.n	800a208 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e00f      	b.n	800a228 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	0151      	lsls	r1, r2, #5
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	440a      	add	r2, r1
 800a21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a226:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	68d9      	ldr	r1, [r3, #12]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	b29b      	uxth	r3, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f9a6 	bl	800a588 <USB_WritePacket>
 800a23c:	e0f3      	b.n	800a426 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a258:	0cdb      	lsrs	r3, r3, #19
 800a25a:	04db      	lsls	r3, r3, #19
 800a25c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a278:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a27c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a280:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d12f      	bne.n	800a2e8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ac:	691a      	ldr	r2, [r3, #16]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2b6:	6939      	ldr	r1, [r7, #16]
 800a2b8:	0148      	lsls	r0, r1, #5
 800a2ba:	6979      	ldr	r1, [r7, #20]
 800a2bc:	4401      	add	r1, r0
 800a2be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2e4:	6113      	str	r3, [r2, #16]
 800a2e6:	e061      	b.n	800a3ac <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d125      	bne.n	800a33c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a306:	6939      	ldr	r1, [r7, #16]
 800a308:	0148      	lsls	r0, r1, #5
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	4401      	add	r1, r0
 800a30e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a312:	4313      	orrs	r3, r2
 800a314:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	0151      	lsls	r1, r2, #5
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	440a      	add	r2, r1
 800a32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a334:	6113      	str	r3, [r2, #16]
 800a336:	e039      	b.n	800a3ac <USB_EPStartXfer+0x3dc>
 800a338:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	691a      	ldr	r2, [r3, #16]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4413      	add	r3, r2
 800a346:	1e5a      	subs	r2, r3, #1
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a350:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	89fa      	ldrh	r2, [r7, #14]
 800a358:	fb03 f202 	mul.w	r2, r3, r2
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36c:	691a      	ldr	r2, [r3, #16]
 800a36e:	89fb      	ldrh	r3, [r7, #14]
 800a370:	04d9      	lsls	r1, r3, #19
 800a372:	4b2f      	ldr	r3, [pc, #188]	; (800a430 <USB_EPStartXfer+0x460>)
 800a374:	400b      	ands	r3, r1
 800a376:	6939      	ldr	r1, [r7, #16]
 800a378:	0148      	lsls	r0, r1, #5
 800a37a:	6979      	ldr	r1, [r7, #20]
 800a37c:	4401      	add	r1, r0
 800a37e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a382:	4313      	orrs	r3, r2
 800a384:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39c:	6939      	ldr	r1, [r7, #16]
 800a39e:	0148      	lsls	r0, r1, #5
 800a3a0:	6979      	ldr	r1, [r7, #20]
 800a3a2:	4401      	add	r1, r0
 800a3a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	791b      	ldrb	r3, [r3, #4]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d128      	bne.n	800a406 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d110      	bne.n	800a3e6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	0151      	lsls	r1, r2, #5
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	440a      	add	r2, r1
 800a3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	e00f      	b.n	800a406 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a404:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a420:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a424:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	1ff80000 	.word	0x1ff80000

0800a434 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d14a      	bne.n	800a4e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a46a:	f040 8086 	bne.w	800a57a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	7812      	ldrb	r2, [r2, #0]
 800a482:	0151      	lsls	r1, r2, #5
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	440a      	add	r2, r1
 800a488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a48c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a490:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d902      	bls.n	800a4cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ca:	e056      	b.n	800a57a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e4:	d0e7      	beq.n	800a4b6 <USB_EPStopXfer+0x82>
 800a4e6:	e048      	b.n	800a57a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a500:	d13b      	bne.n	800a57a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	0151      	lsls	r1, r2, #5
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	440a      	add	r2, r1
 800a51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a520:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a524:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	0151      	lsls	r1, r2, #5
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	440a      	add	r2, r1
 800a540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a548:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f242 7210 	movw	r2, #10000	; 0x2710
 800a556:	4293      	cmp	r3, r2
 800a558:	d902      	bls.n	800a560 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	75fb      	strb	r3, [r7, #23]
          break;
 800a55e:	e00c      	b.n	800a57a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a578:	d0e7      	beq.n	800a54a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a588:	b480      	push	{r7}
 800a58a:	b089      	sub	sp, #36	; 0x24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4611      	mov	r1, r2
 800a594:	461a      	mov	r2, r3
 800a596:	460b      	mov	r3, r1
 800a598:	71fb      	strb	r3, [r7, #7]
 800a59a:	4613      	mov	r3, r2
 800a59c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a5a6:	88bb      	ldrh	r3, [r7, #4]
 800a5a8:	3303      	adds	r3, #3
 800a5aa:	089b      	lsrs	r3, r3, #2
 800a5ac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	e018      	b.n	800a5e6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	031a      	lsls	r2, r3, #12
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d3e2      	bcc.n	800a5b4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3724      	adds	r7, #36	; 0x24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b08b      	sub	sp, #44	; 0x2c
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	089b      	lsrs	r3, r3, #2
 800a616:	b29b      	uxth	r3, r3
 800a618:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	f003 0303 	and.w	r3, r3, #3
 800a620:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a622:	2300      	movs	r3, #0
 800a624:	623b      	str	r3, [r7, #32]
 800a626:	e014      	b.n	800a652 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	601a      	str	r2, [r3, #0]
    pDest++;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	3301      	adds	r3, #1
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	3301      	adds	r3, #1
 800a63e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	3301      	adds	r3, #1
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	3301      	adds	r3, #1
 800a64a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	3301      	adds	r3, #1
 800a650:	623b      	str	r3, [r7, #32]
 800a652:	6a3a      	ldr	r2, [r7, #32]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	429a      	cmp	r2, r3
 800a658:	d3e6      	bcc.n	800a628 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a65a:	8bfb      	ldrh	r3, [r7, #30]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01e      	beq.n	800a69e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66a:	461a      	mov	r2, r3
 800a66c:	f107 0310 	add.w	r3, r7, #16
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	fa22 f303 	lsr.w	r3, r2, r3
 800a680:	b2da      	uxtb	r2, r3
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	701a      	strb	r2, [r3, #0]
      i++;
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	3301      	adds	r3, #1
 800a68a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	3301      	adds	r3, #1
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a692:	8bfb      	ldrh	r3, [r7, #30]
 800a694:	3b01      	subs	r3, #1
 800a696:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a698:	8bfb      	ldrh	r3, [r7, #30]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1ea      	bne.n	800a674 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	372c      	adds	r7, #44	; 0x2c
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d12c      	bne.n	800a722 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	db12      	blt.n	800a700 <USB_EPSetStall+0x54>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00f      	beq.n	800a700 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	0151      	lsls	r1, r2, #5
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	e02b      	b.n	800a77a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	db12      	blt.n	800a75a <USB_EPSetStall+0xae>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	0151      	lsls	r1, r2, #5
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	440a      	add	r2, r1
 800a750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a758:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d128      	bne.n	800a7f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	0151      	lsls	r1, r2, #5
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	440a      	add	r2, r1
 800a7ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	791b      	ldrb	r3, [r3, #4]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d003      	beq.n	800a7d4 <USB_EPClearStall+0x4c>
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	791b      	ldrb	r3, [r3, #4]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d138      	bne.n	800a846 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	e027      	b.n	800a846 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a814:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d003      	beq.n	800a826 <USB_EPClearStall+0x9e>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	791b      	ldrb	r3, [r3, #4]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d10f      	bne.n	800a846 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a844:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a872:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a876:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	011b      	lsls	r3, r3, #4
 800a884:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a88e:	4313      	orrs	r3, r2
 800a890:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ce:	f023 0302 	bic.w	r3, r3, #2
 800a8d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a910:	f043 0302 	orr.w	r3, r3, #2
 800a914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4013      	ands	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a93c:	68fb      	ldr	r3, [r7, #12]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	4013      	ands	r3, r2
 800a96c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	0c1b      	lsrs	r3, r3, #16
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	b29b      	uxth	r3, r3
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b087      	sub	sp, #28
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	f003 030f 	and.w	r3, r3, #15
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1e:	01db      	lsls	r3, r3, #7
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	f003 0301 	and.w	r3, r3, #1
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa84:	f023 0307 	bic.w	r3, r3, #7
 800aa88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	333c      	adds	r3, #60	; 0x3c
 800aabe:	3304      	adds	r3, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4a1c      	ldr	r2, [pc, #112]	; (800ab38 <USB_EP0_OutStart+0x8c>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d90a      	bls.n	800aae2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aadc:	d101      	bne.n	800aae2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	e024      	b.n	800ab2c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae8:	461a      	mov	r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aafc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab10:	f043 0318 	orr.w	r3, r3, #24
 800ab14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab28:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	4f54300a 	.word	0x4f54300a

0800ab3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4a13      	ldr	r2, [pc, #76]	; (800aba0 <USB_CoreReset+0x64>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d901      	bls.n	800ab5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e01b      	b.n	800ab92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	daf2      	bge.n	800ab48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f043 0201 	orr.w	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3301      	adds	r3, #1
 800ab76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	4a09      	ldr	r2, [pc, #36]	; (800aba0 <USB_CoreReset+0x64>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d901      	bls.n	800ab84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e006      	b.n	800ab92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d0f0      	beq.n	800ab72 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	00030d40 	.word	0x00030d40

0800aba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aba8:	4904      	ldr	r1, [pc, #16]	; (800abbc <MX_FATFS_Init+0x18>)
 800abaa:	4805      	ldr	r0, [pc, #20]	; (800abc0 <MX_FATFS_Init+0x1c>)
 800abac:	f005 faaa 	bl	8010104 <FATFS_LinkDriver>
 800abb0:	4603      	mov	r3, r0
 800abb2:	461a      	mov	r2, r3
 800abb4:	4b03      	ldr	r3, [pc, #12]	; (800abc4 <MX_FATFS_Init+0x20>)
 800abb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abb8:	bf00      	nop
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2000a304 	.word	0x2000a304
 800abc0:	08015770 	.word	0x08015770
 800abc4:	2000a300 	.word	0x2000a300

0800abc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800abc8:	b480      	push	{r7}
 800abca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800abcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800abce:	4618      	mov	r0, r3
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abe2:	f000 f8c6 	bl	800ad72 <BSP_SD_IsDetected>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d001      	beq.n	800abf0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800abec:	2302      	movs	r3, #2
 800abee:	e012      	b.n	800ac16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800abf0:	480b      	ldr	r0, [pc, #44]	; (800ac20 <BSP_SD_Init+0x48>)
 800abf2:	f7fc fcd7 	bl	80075a4 <HAL_SD_Init>
 800abf6:	4603      	mov	r3, r0
 800abf8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800abfa:	79fb      	ldrb	r3, [r7, #7]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d109      	bne.n	800ac14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ac00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac04:	4806      	ldr	r0, [pc, #24]	; (800ac20 <BSP_SD_Init+0x48>)
 800ac06:	f7fd fa87 	bl	8008118 <HAL_SD_ConfigWideBusOperation>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac14:	79fb      	ldrb	r3, [r7, #7]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000368 	.word	0x20000368

0800ac24 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	4b11      	ldr	r3, [pc, #68]	; (800ac84 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0201 	bic.w	r2, r2, #1
 800ac46:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac48:	4b0e      	ldr	r3, [pc, #56]	; (800ac84 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800ac50:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0210 	bic.w	r2, r2, #16
 800ac62:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	4806      	ldr	r0, [pc, #24]	; (800ac84 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac6c:	f7fc fd70 	bl	8007750 <HAL_SD_ReadBlocks_DMA>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20000368 	.word	0x20000368

0800ac88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800ac98:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <BSP_SD_WriteBlocks_DMA+0x60>)
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 0201 	bic.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acac:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb0:	2210      	movs	r2, #16
 800acb2:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800acb4:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f042 0210 	orr.w	r2, r2, #16
 800acc6:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	68f9      	ldr	r1, [r7, #12]
 800acce:	4806      	ldr	r0, [pc, #24]	; (800ace8 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acd0:	f7fc fe06 	bl	80078e0 <HAL_SD_WriteBlocks_DMA>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20000368 	.word	0x20000368

0800acec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800acf0:	4805      	ldr	r0, [pc, #20]	; (800ad08 <BSP_SD_GetCardState+0x1c>)
 800acf2:	f7fd facd 	bl	8008290 <HAL_SD_GetCardState>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	bf14      	ite	ne
 800acfc:	2301      	movne	r3, #1
 800acfe:	2300      	moveq	r3, #0
 800ad00:	b2db      	uxtb	r3, r3
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000368 	.word	0x20000368

0800ad0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4803      	ldr	r0, [pc, #12]	; (800ad24 <BSP_SD_GetCardInfo+0x18>)
 800ad18:	f7fd f9d2 	bl	80080c0 <HAL_SD_GetCardInfo>
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	20000368 	.word	0x20000368

0800ad28 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ad30:	f000 f818 	bl	800ad64 <BSP_SD_AbortCallback>
}
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ad44:	f000 f9a8 	bl	800b098 <BSP_SD_WriteCpltCallback>
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad58:	f000 f9aa 	bl	800b0b0 <BSP_SD_ReadCpltCallback>
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0

}
 800ad68:	bf00      	nop
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b082      	sub	sp, #8
 800ad76:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ad7c:	f000 f80c 	bl	800ad98 <BSP_PlatformIsDetected>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ad86:	2300      	movs	r3, #0
 800ad88:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ad8a:	79fb      	ldrb	r3, [r7, #7]
 800ad8c:	b2db      	uxtb	r3, r3
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ada2:	2180      	movs	r1, #128	; 0x80
 800ada4:	4806      	ldr	r0, [pc, #24]	; (800adc0 <BSP_PlatformIsDetected+0x28>)
 800ada6:	f7f7 ffff 	bl	8002da8 <HAL_GPIO_ReadPin>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800adb0:	2300      	movs	r3, #0
 800adb2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800adb4:	79fb      	ldrb	r3, [r7, #7]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	48000800 	.word	0x48000800

0800adc4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800adcc:	f7f7 fac8 	bl	8002360 <HAL_GetTick>
 800add0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800add2:	e006      	b.n	800ade2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800add4:	f7ff ff8a 	bl	800acec <BSP_SD_GetCardState>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	e009      	b.n	800adf6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ade2:	f7f7 fabd 	bl	8002360 <HAL_GetTick>
 800ade6:	4602      	mov	r2, r0
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d8f0      	bhi.n	800add4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800adf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae0a:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <SD_CheckStatus+0x38>)
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae10:	f7ff ff6c 	bl	800acec <BSP_SD_GetCardState>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d107      	bne.n	800ae2a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae1a:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <SD_CheckStatus+0x38>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <SD_CheckStatus+0x38>)
 800ae28:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae2a:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <SD_CheckStatus+0x38>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	b2db      	uxtb	r3, r3
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20000009 	.word	0x20000009

0800ae3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae46:	f7ff fec7 	bl	800abd8 <BSP_SD_Init>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d107      	bne.n	800ae60 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ae50:	79fb      	ldrb	r3, [r7, #7]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff ffd4 	bl	800ae00 <SD_CheckStatus>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <SD_initialize+0x34>)
 800ae5e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ae60:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <SD_initialize+0x34>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b2db      	uxtb	r3, r3
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000009 	.word	0x20000009

0800ae74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7ff ffbd 	bl	800ae00 <SD_CheckStatus>
 800ae86:	4603      	mov	r3, r0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aea4:	f247 5030 	movw	r0, #30000	; 0x7530
 800aea8:	f7ff ff8c 	bl	800adc4 <SD_CheckStatusWithTimeout>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da01      	bge.n	800aeb6 <SD_read+0x26>
  {
    return res;
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	e03b      	b.n	800af2e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	6879      	ldr	r1, [r7, #4]
 800aeba:	68b8      	ldr	r0, [r7, #8]
 800aebc:	f7ff feb2 	bl	800ac24 <BSP_SD_ReadBlocks_DMA>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d132      	bne.n	800af2c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aec6:	4b1c      	ldr	r3, [pc, #112]	; (800af38 <SD_read+0xa8>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aecc:	f7f7 fa48 	bl	8002360 <HAL_GetTick>
 800aed0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aed2:	bf00      	nop
 800aed4:	4b18      	ldr	r3, [pc, #96]	; (800af38 <SD_read+0xa8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d108      	bne.n	800aeee <SD_read+0x5e>
 800aedc:	f7f7 fa40 	bl	8002360 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	f247 522f 	movw	r2, #29999	; 0x752f
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d9f2      	bls.n	800aed4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aeee:	4b12      	ldr	r3, [pc, #72]	; (800af38 <SD_read+0xa8>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	75fb      	strb	r3, [r7, #23]
 800aefa:	e017      	b.n	800af2c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aefc:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <SD_read+0xa8>)
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af02:	f7f7 fa2d 	bl	8002360 <HAL_GetTick>
 800af06:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af08:	e007      	b.n	800af1a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af0a:	f7ff feef 	bl	800acec <BSP_SD_GetCardState>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <SD_read+0x8a>
          {
            res = RES_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800af18:	e008      	b.n	800af2c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af1a:	f7f7 fa21 	bl	8002360 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	f247 522f 	movw	r2, #29999	; 0x752f
 800af28:	4293      	cmp	r3, r2
 800af2a:	d9ee      	bls.n	800af0a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	2000a76c 	.word	0x2000a76c

0800af3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	607a      	str	r2, [r7, #4]
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800af50:	4b24      	ldr	r3, [pc, #144]	; (800afe4 <SD_write+0xa8>)
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af56:	f247 5030 	movw	r0, #30000	; 0x7530
 800af5a:	f7ff ff33 	bl	800adc4 <SD_CheckStatusWithTimeout>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	da01      	bge.n	800af68 <SD_write+0x2c>
  {
    return res;
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	e038      	b.n	800afda <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	68b8      	ldr	r0, [r7, #8]
 800af6e:	f7ff fe8b 	bl	800ac88 <BSP_SD_WriteBlocks_DMA>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d12f      	bne.n	800afd8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800af78:	f7f7 f9f2 	bl	8002360 <HAL_GetTick>
 800af7c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800af7e:	bf00      	nop
 800af80:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <SD_write+0xa8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d108      	bne.n	800af9a <SD_write+0x5e>
 800af88:	f7f7 f9ea 	bl	8002360 <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	f247 522f 	movw	r2, #29999	; 0x752f
 800af96:	4293      	cmp	r3, r2
 800af98:	d9f2      	bls.n	800af80 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800af9a:	4b12      	ldr	r3, [pc, #72]	; (800afe4 <SD_write+0xa8>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d102      	bne.n	800afa8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	75fb      	strb	r3, [r7, #23]
 800afa6:	e017      	b.n	800afd8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800afa8:	4b0e      	ldr	r3, [pc, #56]	; (800afe4 <SD_write+0xa8>)
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800afae:	f7f7 f9d7 	bl	8002360 <HAL_GetTick>
 800afb2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afb4:	e007      	b.n	800afc6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afb6:	f7ff fe99 	bl	800acec <BSP_SD_GetCardState>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <SD_write+0x8a>
          {
            res = RES_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	75fb      	strb	r3, [r7, #23]
            break;
 800afc4:	e008      	b.n	800afd8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afc6:	f7f7 f9cb 	bl	8002360 <HAL_GetTick>
 800afca:	4602      	mov	r2, r0
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	f247 522f 	movw	r2, #29999	; 0x752f
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d9ee      	bls.n	800afb6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	2000a768 	.word	0x2000a768

0800afe8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08c      	sub	sp, #48	; 0x30
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	603a      	str	r2, [r7, #0]
 800aff2:	71fb      	strb	r3, [r7, #7]
 800aff4:	460b      	mov	r3, r1
 800aff6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800affe:	4b25      	ldr	r3, [pc, #148]	; (800b094 <SD_ioctl+0xac>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <SD_ioctl+0x28>
 800b00c:	2303      	movs	r3, #3
 800b00e:	e03c      	b.n	800b08a <SD_ioctl+0xa2>

  switch (cmd)
 800b010:	79bb      	ldrb	r3, [r7, #6]
 800b012:	2b03      	cmp	r3, #3
 800b014:	d834      	bhi.n	800b080 <SD_ioctl+0x98>
 800b016:	a201      	add	r2, pc, #4	; (adr r2, 800b01c <SD_ioctl+0x34>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b02d 	.word	0x0800b02d
 800b020:	0800b035 	.word	0x0800b035
 800b024:	0800b04d 	.word	0x0800b04d
 800b028:	0800b067 	.word	0x0800b067
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b032:	e028      	b.n	800b086 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff fe67 	bl	800ad0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b04a:	e01c      	b.n	800b086 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b04c:	f107 030c 	add.w	r3, r7, #12
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fe5b 	bl	800ad0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	b29a      	uxth	r2, r3
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b064:	e00f      	b.n	800b086 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b066:	f107 030c 	add.w	r3, r7, #12
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fe4e 	bl	800ad0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	0a5a      	lsrs	r2, r3, #9
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b07e:	e002      	b.n	800b086 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b080:	2304      	movs	r3, #4
 800b082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3730      	adds	r7, #48	; 0x30
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000009 	.word	0x20000009

0800b098 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b09c:	4b03      	ldr	r3, [pc, #12]	; (800b0ac <BSP_SD_WriteCpltCallback+0x14>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
}
 800b0a2:	bf00      	nop
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	2000a768 	.word	0x2000a768

0800b0b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b0b4:	4b03      	ldr	r3, [pc, #12]	; (800b0c4 <BSP_SD_ReadCpltCallback+0x14>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	601a      	str	r2, [r3, #0]
}
 800b0ba:	bf00      	nop
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	2000a76c 	.word	0x2000a76c

0800b0c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0d8:	f005 fe44 	bl	8010d64 <USBD_static_malloc>
 800b0dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d109      	bne.n	800b0f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	32b0      	adds	r2, #176	; 0xb0
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e0d4      	b.n	800b2a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b0f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f006 fe0b 	bl	8011d1a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	32b0      	adds	r2, #176	; 0xb0
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	32b0      	adds	r2, #176	; 0xb0
 800b11e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7c1b      	ldrb	r3, [r3, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d138      	bne.n	800b1a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b130:	4b5e      	ldr	r3, [pc, #376]	; (800b2ac <USBD_CDC_Init+0x1e4>)
 800b132:	7819      	ldrb	r1, [r3, #0]
 800b134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b138:	2202      	movs	r2, #2
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f005 fbfe 	bl	801093c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b140:	4b5a      	ldr	r3, [pc, #360]	; (800b2ac <USBD_CDC_Init+0x1e4>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	f003 020f 	and.w	r2, r3, #15
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	3324      	adds	r3, #36	; 0x24
 800b156:	2201      	movs	r2, #1
 800b158:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b15a:	4b55      	ldr	r3, [pc, #340]	; (800b2b0 <USBD_CDC_Init+0x1e8>)
 800b15c:	7819      	ldrb	r1, [r3, #0]
 800b15e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b162:	2202      	movs	r2, #2
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f005 fbe9 	bl	801093c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b16a:	4b51      	ldr	r3, [pc, #324]	; (800b2b0 <USBD_CDC_Init+0x1e8>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	f003 020f 	and.w	r2, r3, #15
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	440b      	add	r3, r1
 800b17e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b182:	2201      	movs	r2, #1
 800b184:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b186:	4b4b      	ldr	r3, [pc, #300]	; (800b2b4 <USBD_CDC_Init+0x1ec>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	f003 020f 	and.w	r2, r3, #15
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	440b      	add	r3, r1
 800b19a:	3326      	adds	r3, #38	; 0x26
 800b19c:	2210      	movs	r2, #16
 800b19e:	801a      	strh	r2, [r3, #0]
 800b1a0:	e035      	b.n	800b20e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1a2:	4b42      	ldr	r3, [pc, #264]	; (800b2ac <USBD_CDC_Init+0x1e4>)
 800b1a4:	7819      	ldrb	r1, [r3, #0]
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f005 fbc6 	bl	801093c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1b0:	4b3e      	ldr	r3, [pc, #248]	; (800b2ac <USBD_CDC_Init+0x1e4>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	f003 020f 	and.w	r2, r3, #15
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	3324      	adds	r3, #36	; 0x24
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1ca:	4b39      	ldr	r3, [pc, #228]	; (800b2b0 <USBD_CDC_Init+0x1e8>)
 800b1cc:	7819      	ldrb	r1, [r3, #0]
 800b1ce:	2340      	movs	r3, #64	; 0x40
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f005 fbb2 	bl	801093c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b1d8:	4b35      	ldr	r3, [pc, #212]	; (800b2b0 <USBD_CDC_Init+0x1e8>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	f003 020f 	and.w	r2, r3, #15
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	440b      	add	r3, r1
 800b1ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b1f4:	4b2f      	ldr	r3, [pc, #188]	; (800b2b4 <USBD_CDC_Init+0x1ec>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	f003 020f 	and.w	r2, r3, #15
 800b1fc:	6879      	ldr	r1, [r7, #4]
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	440b      	add	r3, r1
 800b208:	3326      	adds	r3, #38	; 0x26
 800b20a:	2210      	movs	r2, #16
 800b20c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b20e:	4b29      	ldr	r3, [pc, #164]	; (800b2b4 <USBD_CDC_Init+0x1ec>)
 800b210:	7819      	ldrb	r1, [r3, #0]
 800b212:	2308      	movs	r3, #8
 800b214:	2203      	movs	r2, #3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f005 fb90 	bl	801093c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b21c:	4b25      	ldr	r3, [pc, #148]	; (800b2b4 <USBD_CDC_Init+0x1ec>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	f003 020f 	and.w	r2, r3, #15
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	440b      	add	r3, r1
 800b230:	3324      	adds	r3, #36	; 0x24
 800b232:	2201      	movs	r2, #1
 800b234:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	33b0      	adds	r3, #176	; 0xb0
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b26c:	2302      	movs	r3, #2
 800b26e:	e018      	b.n	800b2a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	7c1b      	ldrb	r3, [r3, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b278:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <USBD_CDC_Init+0x1e8>)
 800b27a:	7819      	ldrb	r1, [r3, #0]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b282:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f005 fcd2 	bl	8010c30 <USBD_LL_PrepareReceive>
 800b28c:	e008      	b.n	800b2a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b28e:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <USBD_CDC_Init+0x1e8>)
 800b290:	7819      	ldrb	r1, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b298:	2340      	movs	r3, #64	; 0x40
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f005 fcc8 	bl	8010c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000093 	.word	0x20000093
 800b2b0:	20000094 	.word	0x20000094
 800b2b4:	20000095 	.word	0x20000095

0800b2b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b2c4:	4b3a      	ldr	r3, [pc, #232]	; (800b3b0 <USBD_CDC_DeInit+0xf8>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f005 fb74 	bl	80109b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b2d0:	4b37      	ldr	r3, [pc, #220]	; (800b3b0 <USBD_CDC_DeInit+0xf8>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f003 020f 	and.w	r2, r3, #15
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	440b      	add	r3, r1
 800b2e4:	3324      	adds	r3, #36	; 0x24
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b2ea:	4b32      	ldr	r3, [pc, #200]	; (800b3b4 <USBD_CDC_DeInit+0xfc>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f005 fb61 	bl	80109b8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b2f6:	4b2f      	ldr	r3, [pc, #188]	; (800b3b4 <USBD_CDC_DeInit+0xfc>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	f003 020f 	and.w	r2, r3, #15
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	440b      	add	r3, r1
 800b30a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b30e:	2200      	movs	r2, #0
 800b310:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b312:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <USBD_CDC_DeInit+0x100>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f005 fb4d 	bl	80109b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b31e:	4b26      	ldr	r3, [pc, #152]	; (800b3b8 <USBD_CDC_DeInit+0x100>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	f003 020f 	and.w	r2, r3, #15
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	3324      	adds	r3, #36	; 0x24
 800b334:	2200      	movs	r2, #0
 800b336:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b338:	4b1f      	ldr	r3, [pc, #124]	; (800b3b8 <USBD_CDC_DeInit+0x100>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 020f 	and.w	r2, r3, #15
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	440b      	add	r3, r1
 800b34c:	3326      	adds	r3, #38	; 0x26
 800b34e:	2200      	movs	r2, #0
 800b350:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	32b0      	adds	r2, #176	; 0xb0
 800b35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01f      	beq.n	800b3a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	33b0      	adds	r3, #176	; 0xb0
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	32b0      	adds	r2, #176	; 0xb0
 800b382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b386:	4618      	mov	r0, r3
 800b388:	f005 fcfa 	bl	8010d80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	32b0      	adds	r2, #176	; 0xb0
 800b396:	2100      	movs	r1, #0
 800b398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000093 	.word	0x20000093
 800b3b4:	20000094 	.word	0x20000094
 800b3b8:	20000095 	.word	0x20000095

0800b3bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	32b0      	adds	r2, #176	; 0xb0
 800b3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e0bf      	b.n	800b56c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d050      	beq.n	800b49a <USBD_CDC_Setup+0xde>
 800b3f8:	2b20      	cmp	r3, #32
 800b3fa:	f040 80af 	bne.w	800b55c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	88db      	ldrh	r3, [r3, #6]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d03a      	beq.n	800b47c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	da1b      	bge.n	800b448 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	33b0      	adds	r3, #176	; 0xb0
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b426:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	88d2      	ldrh	r2, [r2, #6]
 800b42c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	88db      	ldrh	r3, [r3, #6]
 800b432:	2b07      	cmp	r3, #7
 800b434:	bf28      	it	cs
 800b436:	2307      	movcs	r3, #7
 800b438:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	89fa      	ldrh	r2, [r7, #14]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fd73 	bl	800cf2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b446:	e090      	b.n	800b56a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	785a      	ldrb	r2, [r3, #1]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	88db      	ldrh	r3, [r3, #6]
 800b456:	2b3f      	cmp	r3, #63	; 0x3f
 800b458:	d803      	bhi.n	800b462 <USBD_CDC_Setup+0xa6>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	88db      	ldrh	r3, [r3, #6]
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	e000      	b.n	800b464 <USBD_CDC_Setup+0xa8>
 800b462:	2240      	movs	r2, #64	; 0x40
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b46a:	6939      	ldr	r1, [r7, #16]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b472:	461a      	mov	r2, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 fd85 	bl	800cf84 <USBD_CtlPrepareRx>
      break;
 800b47a:	e076      	b.n	800b56a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	33b0      	adds	r3, #176	; 0xb0
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	7850      	ldrb	r0, [r2, #1]
 800b492:	2200      	movs	r2, #0
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	4798      	blx	r3
      break;
 800b498:	e067      	b.n	800b56a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	785b      	ldrb	r3, [r3, #1]
 800b49e:	2b0b      	cmp	r3, #11
 800b4a0:	d851      	bhi.n	800b546 <USBD_CDC_Setup+0x18a>
 800b4a2:	a201      	add	r2, pc, #4	; (adr r2, 800b4a8 <USBD_CDC_Setup+0xec>)
 800b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a8:	0800b4d9 	.word	0x0800b4d9
 800b4ac:	0800b555 	.word	0x0800b555
 800b4b0:	0800b547 	.word	0x0800b547
 800b4b4:	0800b547 	.word	0x0800b547
 800b4b8:	0800b547 	.word	0x0800b547
 800b4bc:	0800b547 	.word	0x0800b547
 800b4c0:	0800b547 	.word	0x0800b547
 800b4c4:	0800b547 	.word	0x0800b547
 800b4c8:	0800b547 	.word	0x0800b547
 800b4cc:	0800b547 	.word	0x0800b547
 800b4d0:	0800b503 	.word	0x0800b503
 800b4d4:	0800b52d 	.word	0x0800b52d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d107      	bne.n	800b4f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b4e4:	f107 030a 	add.w	r3, r7, #10
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 fd1d 	bl	800cf2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4f2:	e032      	b.n	800b55a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fca7 	bl	800ce4a <USBD_CtlError>
            ret = USBD_FAIL;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	75fb      	strb	r3, [r7, #23]
          break;
 800b500:	e02b      	b.n	800b55a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d107      	bne.n	800b51e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b50e:	f107 030d 	add.w	r3, r7, #13
 800b512:	2201      	movs	r2, #1
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 fd08 	bl	800cf2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b51c:	e01d      	b.n	800b55a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 fc92 	bl	800ce4a <USBD_CtlError>
            ret = USBD_FAIL;
 800b526:	2303      	movs	r3, #3
 800b528:	75fb      	strb	r3, [r7, #23]
          break;
 800b52a:	e016      	b.n	800b55a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b03      	cmp	r3, #3
 800b536:	d00f      	beq.n	800b558 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fc85 	bl	800ce4a <USBD_CtlError>
            ret = USBD_FAIL;
 800b540:	2303      	movs	r3, #3
 800b542:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b544:	e008      	b.n	800b558 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 fc7e 	bl	800ce4a <USBD_CtlError>
          ret = USBD_FAIL;
 800b54e:	2303      	movs	r3, #3
 800b550:	75fb      	strb	r3, [r7, #23]
          break;
 800b552:	e002      	b.n	800b55a <USBD_CDC_Setup+0x19e>
          break;
 800b554:	bf00      	nop
 800b556:	e008      	b.n	800b56a <USBD_CDC_Setup+0x1ae>
          break;
 800b558:	bf00      	nop
      }
      break;
 800b55a:	e006      	b.n	800b56a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 fc73 	bl	800ce4a <USBD_CtlError>
      ret = USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	75fb      	strb	r3, [r7, #23]
      break;
 800b568:	bf00      	nop
  }

  return (uint8_t)ret;
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	32b0      	adds	r2, #176	; 0xb0
 800b592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e065      	b.n	800b66a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	32b0      	adds	r2, #176	; 0xb0
 800b5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	f003 020f 	and.w	r2, r3, #15
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	3318      	adds	r3, #24
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02f      	beq.n	800b628 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	f003 020f 	and.w	r2, r3, #15
 800b5ce:	6879      	ldr	r1, [r7, #4]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	3318      	adds	r3, #24
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	78fb      	ldrb	r3, [r7, #3]
 800b5e0:	f003 010f 	and.w	r1, r3, #15
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	440b      	add	r3, r1
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4403      	add	r3, r0
 800b5f0:	3344      	adds	r3, #68	; 0x44
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5f8:	fb01 f303 	mul.w	r3, r1, r3
 800b5fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d112      	bne.n	800b628 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	f003 020f 	and.w	r2, r3, #15
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	440b      	add	r3, r1
 800b614:	3318      	adds	r3, #24
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b61a:	78f9      	ldrb	r1, [r7, #3]
 800b61c:	2300      	movs	r3, #0
 800b61e:	2200      	movs	r2, #0
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f005 facd 	bl	8010bc0 <USBD_LL_Transmit>
 800b626:	e01f      	b.n	800b668 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	33b0      	adds	r3, #176	; 0xb0
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d010      	beq.n	800b668 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	33b0      	adds	r3, #176	; 0xb0
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	32b0      	adds	r2, #176	; 0xb0
 800b688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	32b0      	adds	r2, #176	; 0xb0
 800b698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e01a      	b.n	800b6da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f005 faf9 	bl	8010ca0 <USBD_LL_GetRxDataSize>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	33b0      	adds	r3, #176	; 0xb0
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	32b0      	adds	r2, #176	; 0xb0
 800b6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b700:	2303      	movs	r3, #3
 800b702:	e025      	b.n	800b750 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	33b0      	adds	r3, #176	; 0xb0
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d01a      	beq.n	800b74e <USBD_CDC_EP0_RxReady+0x6c>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b71e:	2bff      	cmp	r3, #255	; 0xff
 800b720:	d015      	beq.n	800b74e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	33b0      	adds	r3, #176	; 0xb0
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b73a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b742:	b292      	uxth	r2, r2
 800b744:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	22ff      	movs	r2, #255	; 0xff
 800b74a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b760:	2182      	movs	r1, #130	; 0x82
 800b762:	4818      	ldr	r0, [pc, #96]	; (800b7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b764:	f000 fd0f 	bl	800c186 <USBD_GetEpDesc>
 800b768:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b76a:	2101      	movs	r1, #1
 800b76c:	4815      	ldr	r0, [pc, #84]	; (800b7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b76e:	f000 fd0a 	bl	800c186 <USBD_GetEpDesc>
 800b772:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b774:	2181      	movs	r1, #129	; 0x81
 800b776:	4813      	ldr	r0, [pc, #76]	; (800b7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b778:	f000 fd05 	bl	800c186 <USBD_GetEpDesc>
 800b77c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2210      	movs	r2, #16
 800b788:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d006      	beq.n	800b79e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2200      	movs	r2, #0
 800b794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b798:	711a      	strb	r2, [r3, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7ac:	711a      	strb	r2, [r3, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2243      	movs	r2, #67	; 0x43
 800b7b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7b8:	4b02      	ldr	r3, [pc, #8]	; (800b7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	20000050 	.word	0x20000050

0800b7c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7d0:	2182      	movs	r1, #130	; 0x82
 800b7d2:	4818      	ldr	r0, [pc, #96]	; (800b834 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7d4:	f000 fcd7 	bl	800c186 <USBD_GetEpDesc>
 800b7d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4815      	ldr	r0, [pc, #84]	; (800b834 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7de:	f000 fcd2 	bl	800c186 <USBD_GetEpDesc>
 800b7e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7e4:	2181      	movs	r1, #129	; 0x81
 800b7e6:	4813      	ldr	r0, [pc, #76]	; (800b834 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7e8:	f000 fccd 	bl	800c186 <USBD_GetEpDesc>
 800b7ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2210      	movs	r2, #16
 800b7f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	2200      	movs	r2, #0
 800b804:	711a      	strb	r2, [r3, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f042 0202 	orr.w	r2, r2, #2
 800b80c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d006      	beq.n	800b822 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	711a      	strb	r2, [r3, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f042 0202 	orr.w	r2, r2, #2
 800b820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2243      	movs	r2, #67	; 0x43
 800b826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b828:	4b02      	ldr	r3, [pc, #8]	; (800b834 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000050 	.word	0x20000050

0800b838 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b840:	2182      	movs	r1, #130	; 0x82
 800b842:	4818      	ldr	r0, [pc, #96]	; (800b8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b844:	f000 fc9f 	bl	800c186 <USBD_GetEpDesc>
 800b848:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b84a:	2101      	movs	r1, #1
 800b84c:	4815      	ldr	r0, [pc, #84]	; (800b8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b84e:	f000 fc9a 	bl	800c186 <USBD_GetEpDesc>
 800b852:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b854:	2181      	movs	r1, #129	; 0x81
 800b856:	4813      	ldr	r0, [pc, #76]	; (800b8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b858:	f000 fc95 	bl	800c186 <USBD_GetEpDesc>
 800b85c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2210      	movs	r2, #16
 800b868:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d006      	beq.n	800b87e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2200      	movs	r2, #0
 800b874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b878:	711a      	strb	r2, [r3, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d006      	beq.n	800b892 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b88c:	711a      	strb	r2, [r3, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2243      	movs	r2, #67	; 0x43
 800b896:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b898:	4b02      	ldr	r3, [pc, #8]	; (800b8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000050 	.word	0x20000050

0800b8a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	220a      	movs	r2, #10
 800b8b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8b6:	4b03      	ldr	r3, [pc, #12]	; (800b8c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	2000000c 	.word	0x2000000c

0800b8c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8d8:	2303      	movs	r3, #3
 800b8da:	e009      	b.n	800b8f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	33b0      	adds	r3, #176	; 0xb0
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b087      	sub	sp, #28
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	32b0      	adds	r2, #176	; 0xb0
 800b912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b916:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b91e:	2303      	movs	r3, #3
 800b920:	e008      	b.n	800b934 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	371c      	adds	r7, #28
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	32b0      	adds	r2, #176	; 0xb0
 800b954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b958:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b960:	2303      	movs	r3, #3
 800b962:	e004      	b.n	800b96e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	32b0      	adds	r2, #176	; 0xb0
 800b98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b992:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	32b0      	adds	r2, #176	; 0xb0
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e018      	b.n	800b9dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7c1b      	ldrb	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10a      	bne.n	800b9c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <USBD_CDC_ReceivePacket+0x68>)
 800b9b4:	7819      	ldrb	r1, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f005 f935 	bl	8010c30 <USBD_LL_PrepareReceive>
 800b9c6:	e008      	b.n	800b9da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9c8:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <USBD_CDC_ReceivePacket+0x68>)
 800b9ca:	7819      	ldrb	r1, [r3, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f005 f92b 	bl	8010c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20000094 	.word	0x20000094

0800b9e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e01f      	b.n	800ba40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	79fa      	ldrb	r2, [r7, #7]
 800ba32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f004 ff03 	bl	8010840 <USBD_LL_Init>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e025      	b.n	800baac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	32ae      	adds	r2, #174	; 0xae
 800ba72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00f      	beq.n	800ba9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	32ae      	adds	r2, #174	; 0xae
 800ba86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	f107 020e 	add.w	r2, r7, #14
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	4602      	mov	r2, r0
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f004 ff0b 	bl	80108d8 <USBD_LL_Start>
 800bac2:	4603      	mov	r3, r0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	78fa      	ldrb	r2, [r7, #3]
 800bb06:	4611      	mov	r1, r2
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4798      	blx	r3
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	460b      	mov	r3, r1
 800bb24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	4611      	mov	r1, r2
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	4798      	blx	r3
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb40:	2303      	movs	r3, #3
 800bb42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 f938 	bl	800cdd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb74:	461a      	mov	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb82:	f003 031f 	and.w	r3, r3, #31
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d01a      	beq.n	800bbc0 <USBD_LL_SetupStage+0x72>
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d822      	bhi.n	800bbd4 <USBD_LL_SetupStage+0x86>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d002      	beq.n	800bb98 <USBD_LL_SetupStage+0x4a>
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d00a      	beq.n	800bbac <USBD_LL_SetupStage+0x5e>
 800bb96:	e01d      	b.n	800bbd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fb65 	bl	800c270 <USBD_StdDevReq>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbaa:	e020      	b.n	800bbee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fbcd 	bl	800c354 <USBD_StdItfReq>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbbe:	e016      	b.n	800bbee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fc2f 	bl	800c42c <USBD_StdEPReq>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd2:	e00c      	b.n	800bbee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f004 ff1e 	bl	8010a24 <USBD_LL_StallEP>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]
      break;
 800bbec:	bf00      	nop
  }

  return ret;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	460b      	mov	r3, r1
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bc0a:	7afb      	ldrb	r3, [r7, #11]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d16e      	bne.n	800bcee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	f040 8098 	bne.w	800bd54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	689a      	ldr	r2, [r3, #8]
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d913      	bls.n	800bc58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	1ad2      	subs	r2, r2, r3
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	4293      	cmp	r3, r2
 800bc48:	bf28      	it	cs
 800bc4a:	4613      	movcs	r3, r2
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f001 f9b4 	bl	800cfbe <USBD_CtlContinueRx>
 800bc56:	e07d      	b.n	800bd54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc5e:	f003 031f 	and.w	r3, r3, #31
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d014      	beq.n	800bc90 <USBD_LL_DataOutStage+0x98>
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d81d      	bhi.n	800bca6 <USBD_LL_DataOutStage+0xae>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <USBD_LL_DataOutStage+0x7c>
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d003      	beq.n	800bc7a <USBD_LL_DataOutStage+0x82>
 800bc72:	e018      	b.n	800bca6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc74:	2300      	movs	r3, #0
 800bc76:	75bb      	strb	r3, [r7, #22]
            break;
 800bc78:	e018      	b.n	800bcac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	4619      	mov	r1, r3
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 fa64 	bl	800c152 <USBD_CoreFindIF>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc8e:	e00d      	b.n	800bcac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	4619      	mov	r1, r3
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 fa66 	bl	800c16c <USBD_CoreFindEP>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75bb      	strb	r3, [r7, #22]
            break;
 800bca4:	e002      	b.n	800bcac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	75bb      	strb	r3, [r7, #22]
            break;
 800bcaa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bcac:	7dbb      	ldrb	r3, [r7, #22]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d119      	bne.n	800bce6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d113      	bne.n	800bce6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bcbe:	7dba      	ldrb	r2, [r7, #22]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	32ae      	adds	r2, #174	; 0xae
 800bcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00b      	beq.n	800bce6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bcce:	7dba      	ldrb	r2, [r7, #22]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcd6:	7dba      	ldrb	r2, [r7, #22]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	32ae      	adds	r2, #174	; 0xae
 800bcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f001 f97a 	bl	800cfe0 <USBD_CtlSendStatus>
 800bcec:	e032      	b.n	800bd54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcee:	7afb      	ldrb	r3, [r7, #11]
 800bcf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 fa37 	bl	800c16c <USBD_CoreFindEP>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd02:	7dbb      	ldrb	r3, [r7, #22]
 800bd04:	2bff      	cmp	r3, #255	; 0xff
 800bd06:	d025      	beq.n	800bd54 <USBD_LL_DataOutStage+0x15c>
 800bd08:	7dbb      	ldrb	r3, [r7, #22]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d122      	bne.n	800bd54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d117      	bne.n	800bd4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bd1a:	7dba      	ldrb	r2, [r7, #22]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	32ae      	adds	r2, #174	; 0xae
 800bd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00f      	beq.n	800bd4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bd2a:	7dba      	ldrb	r2, [r7, #22]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd32:	7dba      	ldrb	r2, [r7, #22]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	32ae      	adds	r2, #174	; 0xae
 800bd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	7afa      	ldrb	r2, [r7, #11]
 800bd40:	4611      	mov	r1, r2
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	4798      	blx	r3
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	e000      	b.n	800bd56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b086      	sub	sp, #24
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	460b      	mov	r3, r1
 800bd68:	607a      	str	r2, [r7, #4]
 800bd6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd6c:	7afb      	ldrb	r3, [r7, #11]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d16f      	bne.n	800be52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3314      	adds	r3, #20
 800bd76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d15a      	bne.n	800be38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	689a      	ldr	r2, [r3, #8]
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d914      	bls.n	800bdb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	1ad2      	subs	r2, r2, r3
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	461a      	mov	r2, r3
 800bda2:	6879      	ldr	r1, [r7, #4]
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f001 f8dc 	bl	800cf62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2200      	movs	r2, #0
 800bdae:	2100      	movs	r1, #0
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f004 ff3d 	bl	8010c30 <USBD_LL_PrepareReceive>
 800bdb6:	e03f      	b.n	800be38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d11c      	bne.n	800bdfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d316      	bcc.n	800bdfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d20f      	bcs.n	800bdfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdde:	2200      	movs	r2, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f001 f8bd 	bl	800cf62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f004 ff1a 	bl	8010c30 <USBD_LL_PrepareReceive>
 800bdfc:	e01c      	b.n	800be38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b03      	cmp	r3, #3
 800be08:	d10f      	bne.n	800be2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d009      	beq.n	800be2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be2a:	2180      	movs	r1, #128	; 0x80
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f004 fdf9 	bl	8010a24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f001 f8e7 	bl	800d006 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d03a      	beq.n	800beb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff fe42 	bl	800bacc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be50:	e032      	b.n	800beb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be52:	7afb      	ldrb	r3, [r7, #11]
 800be54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	4619      	mov	r1, r3
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f985 	bl	800c16c <USBD_CoreFindEP>
 800be62:	4603      	mov	r3, r0
 800be64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	2bff      	cmp	r3, #255	; 0xff
 800be6a:	d025      	beq.n	800beb8 <USBD_LL_DataInStage+0x15a>
 800be6c:	7dfb      	ldrb	r3, [r7, #23]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d122      	bne.n	800beb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d11c      	bne.n	800beb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be7e:	7dfa      	ldrb	r2, [r7, #23]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	32ae      	adds	r2, #174	; 0xae
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d014      	beq.n	800beb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be8e:	7dfa      	ldrb	r2, [r7, #23]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be96:	7dfa      	ldrb	r2, [r7, #23]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	32ae      	adds	r2, #174	; 0xae
 800be9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	7afa      	ldrb	r2, [r7, #11]
 800bea4:	4611      	mov	r1, r2
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	4798      	blx	r3
 800beaa:	4603      	mov	r3, r0
 800beac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800beae:	7dbb      	ldrb	r3, [r7, #22]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800beb4:	7dbb      	ldrb	r3, [r7, #22]
 800beb6:	e000      	b.n	800beba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d014      	beq.n	800bf28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00e      	beq.n	800bf28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	6852      	ldr	r2, [r2, #4]
 800bf16:	b2d2      	uxtb	r2, r2
 800bf18:	4611      	mov	r1, r2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf24:	2303      	movs	r3, #3
 800bf26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf28:	2340      	movs	r3, #64	; 0x40
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f004 fd04 	bl	801093c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2240      	movs	r2, #64	; 0x40
 800bf40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf44:	2340      	movs	r3, #64	; 0x40
 800bf46:	2200      	movs	r2, #0
 800bf48:	2180      	movs	r1, #128	; 0x80
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f004 fcf6 	bl	801093c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2240      	movs	r2, #64	; 0x40
 800bf5a:	621a      	str	r2, [r3, #32]

  return ret;
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b083      	sub	sp, #12
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	78fa      	ldrb	r2, [r7, #3]
 800bf76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d006      	beq.n	800bfa8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2204      	movs	r2, #4
 800bfac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b083      	sub	sp, #12
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d106      	bne.n	800bfe0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d110      	bne.n	800c024 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d005      	beq.n	800c024 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01e:	69db      	ldr	r3, [r3, #28]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b082      	sub	sp, #8
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	460b      	mov	r3, r1
 800c038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	32ae      	adds	r2, #174	; 0xae
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e01c      	b.n	800c08a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c056:	b2db      	uxtb	r3, r3
 800c058:	2b03      	cmp	r3, #3
 800c05a:	d115      	bne.n	800c088 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	32ae      	adds	r2, #174	; 0xae
 800c066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00b      	beq.n	800c088 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	32ae      	adds	r2, #174	; 0xae
 800c07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	78fa      	ldrb	r2, [r7, #3]
 800c082:	4611      	mov	r1, r2
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b082      	sub	sp, #8
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	32ae      	adds	r2, #174	; 0xae
 800c0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e01c      	b.n	800c0ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d115      	bne.n	800c0ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	32ae      	adds	r2, #174	; 0xae
 800c0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00b      	beq.n	800c0ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	32ae      	adds	r2, #174	; 0xae
 800c0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00e      	beq.n	800c148 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	6852      	ldr	r2, [r2, #4]
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	4611      	mov	r1, r2
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c144:	2303      	movs	r3, #3
 800c146:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c148:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c15e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c178:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b086      	sub	sp, #24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c19a:	2300      	movs	r3, #0
 800c19c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	885b      	ldrh	r3, [r3, #2]
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d920      	bls.n	800c1f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c1b6:	e013      	b.n	800c1e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c1b8:	f107 030a 	add.w	r3, r7, #10
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6978      	ldr	r0, [r7, #20]
 800c1c0:	f000 f81b 	bl	800c1fa <USBD_GetNextDesc>
 800c1c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	785b      	ldrb	r3, [r3, #1]
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d108      	bne.n	800c1e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	789b      	ldrb	r3, [r3, #2]
 800c1d6:	78fa      	ldrb	r2, [r7, #3]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d008      	beq.n	800c1ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	885b      	ldrh	r3, [r3, #2]
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	897b      	ldrh	r3, [r7, #10]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d8e5      	bhi.n	800c1b8 <USBD_GetEpDesc+0x32>
 800c1ec:	e000      	b.n	800c1f0 <USBD_GetEpDesc+0x6a>
          break;
 800c1ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1f0:	693b      	ldr	r3, [r7, #16]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3718      	adds	r7, #24
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b085      	sub	sp, #20
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	881a      	ldrh	r2, [r3, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	b29b      	uxth	r3, r3
 800c212:	4413      	add	r3, r2
 800c214:	b29a      	uxth	r2, r3
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4413      	add	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c226:	68fb      	ldr	r3, [r7, #12]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	3301      	adds	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c252:	8a3b      	ldrh	r3, [r7, #16]
 800c254:	021b      	lsls	r3, r3, #8
 800c256:	b21a      	sxth	r2, r3
 800c258:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	b21b      	sxth	r3, r3
 800c260:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c262:	89fb      	ldrh	r3, [r7, #14]
}
 800c264:	4618      	mov	r0, r3
 800c266:	371c      	adds	r7, #28
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c286:	2b40      	cmp	r3, #64	; 0x40
 800c288:	d005      	beq.n	800c296 <USBD_StdDevReq+0x26>
 800c28a:	2b40      	cmp	r3, #64	; 0x40
 800c28c:	d857      	bhi.n	800c33e <USBD_StdDevReq+0xce>
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00f      	beq.n	800c2b2 <USBD_StdDevReq+0x42>
 800c292:	2b20      	cmp	r3, #32
 800c294:	d153      	bne.n	800c33e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	32ae      	adds	r2, #174	; 0xae
 800c2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	4798      	blx	r3
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c2b0:	e04a      	b.n	800c348 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	785b      	ldrb	r3, [r3, #1]
 800c2b6:	2b09      	cmp	r3, #9
 800c2b8:	d83b      	bhi.n	800c332 <USBD_StdDevReq+0xc2>
 800c2ba:	a201      	add	r2, pc, #4	; (adr r2, 800c2c0 <USBD_StdDevReq+0x50>)
 800c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c0:	0800c315 	.word	0x0800c315
 800c2c4:	0800c329 	.word	0x0800c329
 800c2c8:	0800c333 	.word	0x0800c333
 800c2cc:	0800c31f 	.word	0x0800c31f
 800c2d0:	0800c333 	.word	0x0800c333
 800c2d4:	0800c2f3 	.word	0x0800c2f3
 800c2d8:	0800c2e9 	.word	0x0800c2e9
 800c2dc:	0800c333 	.word	0x0800c333
 800c2e0:	0800c30b 	.word	0x0800c30b
 800c2e4:	0800c2fd 	.word	0x0800c2fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fa3c 	bl	800c768 <USBD_GetDescriptor>
          break;
 800c2f0:	e024      	b.n	800c33c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fbcb 	bl	800ca90 <USBD_SetAddress>
          break;
 800c2fa:	e01f      	b.n	800c33c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fc0a 	bl	800cb18 <USBD_SetConfig>
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
          break;
 800c308:	e018      	b.n	800c33c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fcad 	bl	800cc6c <USBD_GetConfig>
          break;
 800c312:	e013      	b.n	800c33c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fcde 	bl	800ccd8 <USBD_GetStatus>
          break;
 800c31c:	e00e      	b.n	800c33c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c31e:	6839      	ldr	r1, [r7, #0]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fd0d 	bl	800cd40 <USBD_SetFeature>
          break;
 800c326:	e009      	b.n	800c33c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fd31 	bl	800cd92 <USBD_ClrFeature>
          break;
 800c330:	e004      	b.n	800c33c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fd88 	bl	800ce4a <USBD_CtlError>
          break;
 800c33a:	bf00      	nop
      }
      break;
 800c33c:	e004      	b.n	800c348 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fd82 	bl	800ce4a <USBD_CtlError>
      break;
 800c346:	bf00      	nop
  }

  return ret;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop

0800c354 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c36a:	2b40      	cmp	r3, #64	; 0x40
 800c36c:	d005      	beq.n	800c37a <USBD_StdItfReq+0x26>
 800c36e:	2b40      	cmp	r3, #64	; 0x40
 800c370:	d852      	bhi.n	800c418 <USBD_StdItfReq+0xc4>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <USBD_StdItfReq+0x26>
 800c376:	2b20      	cmp	r3, #32
 800c378:	d14e      	bne.n	800c418 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c380:	b2db      	uxtb	r3, r3
 800c382:	3b01      	subs	r3, #1
 800c384:	2b02      	cmp	r3, #2
 800c386:	d840      	bhi.n	800c40a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	889b      	ldrh	r3, [r3, #4]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d836      	bhi.n	800c400 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	889b      	ldrh	r3, [r3, #4]
 800c396:	b2db      	uxtb	r3, r3
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fed9 	bl	800c152 <USBD_CoreFindIF>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
 800c3a6:	2bff      	cmp	r3, #255	; 0xff
 800c3a8:	d01d      	beq.n	800c3e6 <USBD_StdItfReq+0x92>
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d11a      	bne.n	800c3e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c3b0:	7bba      	ldrb	r2, [r7, #14]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	32ae      	adds	r2, #174	; 0xae
 800c3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00f      	beq.n	800c3e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c3c0:	7bba      	ldrb	r2, [r7, #14]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3c8:	7bba      	ldrb	r2, [r7, #14]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	32ae      	adds	r2, #174	; 0xae
 800c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	4798      	blx	r3
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3de:	e004      	b.n	800c3ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3e4:	e001      	b.n	800c3ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	88db      	ldrh	r3, [r3, #6]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d110      	bne.n	800c414 <USBD_StdItfReq+0xc0>
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10d      	bne.n	800c414 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fdf1 	bl	800cfe0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3fe:	e009      	b.n	800c414 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fd21 	bl	800ce4a <USBD_CtlError>
          break;
 800c408:	e004      	b.n	800c414 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fd1c 	bl	800ce4a <USBD_CtlError>
          break;
 800c412:	e000      	b.n	800c416 <USBD_StdItfReq+0xc2>
          break;
 800c414:	bf00      	nop
      }
      break;
 800c416:	e004      	b.n	800c422 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fd15 	bl	800ce4a <USBD_CtlError>
      break;
 800c420:	bf00      	nop
  }

  return ret;
 800c422:	7bfb      	ldrb	r3, [r7, #15]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	889b      	ldrh	r3, [r3, #4]
 800c43e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c448:	2b40      	cmp	r3, #64	; 0x40
 800c44a:	d007      	beq.n	800c45c <USBD_StdEPReq+0x30>
 800c44c:	2b40      	cmp	r3, #64	; 0x40
 800c44e:	f200 817f 	bhi.w	800c750 <USBD_StdEPReq+0x324>
 800c452:	2b00      	cmp	r3, #0
 800c454:	d02a      	beq.n	800c4ac <USBD_StdEPReq+0x80>
 800c456:	2b20      	cmp	r3, #32
 800c458:	f040 817a 	bne.w	800c750 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
 800c45e:	4619      	mov	r1, r3
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff fe83 	bl	800c16c <USBD_CoreFindEP>
 800c466:	4603      	mov	r3, r0
 800c468:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c46a:	7b7b      	ldrb	r3, [r7, #13]
 800c46c:	2bff      	cmp	r3, #255	; 0xff
 800c46e:	f000 8174 	beq.w	800c75a <USBD_StdEPReq+0x32e>
 800c472:	7b7b      	ldrb	r3, [r7, #13]
 800c474:	2b00      	cmp	r3, #0
 800c476:	f040 8170 	bne.w	800c75a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c47a:	7b7a      	ldrb	r2, [r7, #13]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c482:	7b7a      	ldrb	r2, [r7, #13]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	32ae      	adds	r2, #174	; 0xae
 800c488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f000 8163 	beq.w	800c75a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c494:	7b7a      	ldrb	r2, [r7, #13]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	32ae      	adds	r2, #174	; 0xae
 800c49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	4798      	blx	r3
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c4aa:	e156      	b.n	800c75a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	785b      	ldrb	r3, [r3, #1]
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d008      	beq.n	800c4c6 <USBD_StdEPReq+0x9a>
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	f300 8145 	bgt.w	800c744 <USBD_StdEPReq+0x318>
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 809b 	beq.w	800c5f6 <USBD_StdEPReq+0x1ca>
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d03c      	beq.n	800c53e <USBD_StdEPReq+0x112>
 800c4c4:	e13e      	b.n	800c744 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d002      	beq.n	800c4d8 <USBD_StdEPReq+0xac>
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d016      	beq.n	800c504 <USBD_StdEPReq+0xd8>
 800c4d6:	e02c      	b.n	800c532 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00d      	beq.n	800c4fa <USBD_StdEPReq+0xce>
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	2b80      	cmp	r3, #128	; 0x80
 800c4e2:	d00a      	beq.n	800c4fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f004 fa9b 	bl	8010a24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ee:	2180      	movs	r1, #128	; 0x80
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f004 fa97 	bl	8010a24 <USBD_LL_StallEP>
 800c4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4f8:	e020      	b.n	800c53c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fca4 	bl	800ce4a <USBD_CtlError>
              break;
 800c502:	e01b      	b.n	800c53c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	885b      	ldrh	r3, [r3, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10e      	bne.n	800c52a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00b      	beq.n	800c52a <USBD_StdEPReq+0xfe>
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	2b80      	cmp	r3, #128	; 0x80
 800c516:	d008      	beq.n	800c52a <USBD_StdEPReq+0xfe>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	88db      	ldrh	r3, [r3, #6]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	4619      	mov	r1, r3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f004 fa7d 	bl	8010a24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fd58 	bl	800cfe0 <USBD_CtlSendStatus>

              break;
 800c530:	e004      	b.n	800c53c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fc88 	bl	800ce4a <USBD_CtlError>
              break;
 800c53a:	bf00      	nop
          }
          break;
 800c53c:	e107      	b.n	800c74e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b02      	cmp	r3, #2
 800c548:	d002      	beq.n	800c550 <USBD_StdEPReq+0x124>
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	d016      	beq.n	800c57c <USBD_StdEPReq+0x150>
 800c54e:	e04b      	b.n	800c5e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c550:	7bbb      	ldrb	r3, [r7, #14]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00d      	beq.n	800c572 <USBD_StdEPReq+0x146>
 800c556:	7bbb      	ldrb	r3, [r7, #14]
 800c558:	2b80      	cmp	r3, #128	; 0x80
 800c55a:	d00a      	beq.n	800c572 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	4619      	mov	r1, r3
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f004 fa5f 	bl	8010a24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c566:	2180      	movs	r1, #128	; 0x80
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f004 fa5b 	bl	8010a24 <USBD_LL_StallEP>
 800c56e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c570:	e040      	b.n	800c5f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fc68 	bl	800ce4a <USBD_CtlError>
              break;
 800c57a:	e03b      	b.n	800c5f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	885b      	ldrh	r3, [r3, #2]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d136      	bne.n	800c5f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c58e:	7bbb      	ldrb	r3, [r7, #14]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f004 fa7c 	bl	8010a90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fd21 	bl	800cfe0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c59e:	7bbb      	ldrb	r3, [r7, #14]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fde2 	bl	800c16c <USBD_CoreFindEP>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5ac:	7b7b      	ldrb	r3, [r7, #13]
 800c5ae:	2bff      	cmp	r3, #255	; 0xff
 800c5b0:	d01f      	beq.n	800c5f2 <USBD_StdEPReq+0x1c6>
 800c5b2:	7b7b      	ldrb	r3, [r7, #13]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d11c      	bne.n	800c5f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c5b8:	7b7a      	ldrb	r2, [r7, #13]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c5c0:	7b7a      	ldrb	r2, [r7, #13]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	32ae      	adds	r2, #174	; 0xae
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d010      	beq.n	800c5f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5d0:	7b7a      	ldrb	r2, [r7, #13]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	32ae      	adds	r2, #174	; 0xae
 800c5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	4798      	blx	r3
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5e6:	e004      	b.n	800c5f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fc2d 	bl	800ce4a <USBD_CtlError>
              break;
 800c5f0:	e000      	b.n	800c5f4 <USBD_StdEPReq+0x1c8>
              break;
 800c5f2:	bf00      	nop
          }
          break;
 800c5f4:	e0ab      	b.n	800c74e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d002      	beq.n	800c608 <USBD_StdEPReq+0x1dc>
 800c602:	2b03      	cmp	r3, #3
 800c604:	d032      	beq.n	800c66c <USBD_StdEPReq+0x240>
 800c606:	e097      	b.n	800c738 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c608:	7bbb      	ldrb	r3, [r7, #14]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d007      	beq.n	800c61e <USBD_StdEPReq+0x1f2>
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	2b80      	cmp	r3, #128	; 0x80
 800c612:	d004      	beq.n	800c61e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fc17 	bl	800ce4a <USBD_CtlError>
                break;
 800c61c:	e091      	b.n	800c742 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c61e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c622:	2b00      	cmp	r3, #0
 800c624:	da0b      	bge.n	800c63e <USBD_StdEPReq+0x212>
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	3310      	adds	r3, #16
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	4413      	add	r3, r2
 800c63a:	3304      	adds	r3, #4
 800c63c:	e00b      	b.n	800c656 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c63e:	7bbb      	ldrb	r3, [r7, #14]
 800c640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	4413      	add	r3, r2
 800c654:	3304      	adds	r3, #4
 800c656:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	2202      	movs	r2, #2
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fc61 	bl	800cf2c <USBD_CtlSendData>
              break;
 800c66a:	e06a      	b.n	800c742 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c66c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c670:	2b00      	cmp	r3, #0
 800c672:	da11      	bge.n	800c698 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	f003 020f 	and.w	r2, r3, #15
 800c67a:	6879      	ldr	r1, [r7, #4]
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	440b      	add	r3, r1
 800c686:	3324      	adds	r3, #36	; 0x24
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d117      	bne.n	800c6be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 fbda 	bl	800ce4a <USBD_CtlError>
                  break;
 800c696:	e054      	b.n	800c742 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	f003 020f 	and.w	r2, r3, #15
 800c69e:	6879      	ldr	r1, [r7, #4]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	440b      	add	r3, r1
 800c6aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d104      	bne.n	800c6be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fbc7 	bl	800ce4a <USBD_CtlError>
                  break;
 800c6bc:	e041      	b.n	800c742 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	da0b      	bge.n	800c6de <USBD_StdEPReq+0x2b2>
 800c6c6:	7bbb      	ldrb	r3, [r7, #14]
 800c6c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	3310      	adds	r3, #16
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	4413      	add	r3, r2
 800c6da:	3304      	adds	r3, #4
 800c6dc:	e00b      	b.n	800c6f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6de:	7bbb      	ldrb	r3, [r7, #14]
 800c6e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <USBD_StdEPReq+0x2d8>
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
 800c700:	2b80      	cmp	r3, #128	; 0x80
 800c702:	d103      	bne.n	800c70c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	e00e      	b.n	800c72a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f004 f9f3 	bl	8010afc <USBD_LL_IsStallEP>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2201      	movs	r2, #1
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e002      	b.n	800c72a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2202      	movs	r2, #2
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fbfb 	bl	800cf2c <USBD_CtlSendData>
              break;
 800c736:	e004      	b.n	800c742 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fb85 	bl	800ce4a <USBD_CtlError>
              break;
 800c740:	bf00      	nop
          }
          break;
 800c742:	e004      	b.n	800c74e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb7f 	bl	800ce4a <USBD_CtlError>
          break;
 800c74c:	bf00      	nop
      }
      break;
 800c74e:	e005      	b.n	800c75c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb79 	bl	800ce4a <USBD_CtlError>
      break;
 800c758:	e000      	b.n	800c75c <USBD_StdEPReq+0x330>
      break;
 800c75a:	bf00      	nop
  }

  return ret;
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c77a:	2300      	movs	r3, #0
 800c77c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	885b      	ldrh	r3, [r3, #2]
 800c782:	0a1b      	lsrs	r3, r3, #8
 800c784:	b29b      	uxth	r3, r3
 800c786:	3b01      	subs	r3, #1
 800c788:	2b0e      	cmp	r3, #14
 800c78a:	f200 8152 	bhi.w	800ca32 <USBD_GetDescriptor+0x2ca>
 800c78e:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <USBD_GetDescriptor+0x2c>)
 800c790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c794:	0800c805 	.word	0x0800c805
 800c798:	0800c81d 	.word	0x0800c81d
 800c79c:	0800c85d 	.word	0x0800c85d
 800c7a0:	0800ca33 	.word	0x0800ca33
 800c7a4:	0800ca33 	.word	0x0800ca33
 800c7a8:	0800c9d3 	.word	0x0800c9d3
 800c7ac:	0800c9ff 	.word	0x0800c9ff
 800c7b0:	0800ca33 	.word	0x0800ca33
 800c7b4:	0800ca33 	.word	0x0800ca33
 800c7b8:	0800ca33 	.word	0x0800ca33
 800c7bc:	0800ca33 	.word	0x0800ca33
 800c7c0:	0800ca33 	.word	0x0800ca33
 800c7c4:	0800ca33 	.word	0x0800ca33
 800c7c8:	0800ca33 	.word	0x0800ca33
 800c7cc:	0800c7d1 	.word	0x0800c7d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7d6:	69db      	ldr	r3, [r3, #28]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00b      	beq.n	800c7f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e2:	69db      	ldr	r3, [r3, #28]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	7c12      	ldrb	r2, [r2, #16]
 800c7e8:	f107 0108 	add.w	r1, r7, #8
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7f2:	e126      	b.n	800ca42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fb27 	bl	800ce4a <USBD_CtlError>
        err++;
 800c7fc:	7afb      	ldrb	r3, [r7, #11]
 800c7fe:	3301      	adds	r3, #1
 800c800:	72fb      	strb	r3, [r7, #11]
      break;
 800c802:	e11e      	b.n	800ca42 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7c12      	ldrb	r2, [r2, #16]
 800c810:	f107 0108 	add.w	r1, r7, #8
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
      break;
 800c81a:	e112      	b.n	800ca42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	7c1b      	ldrb	r3, [r3, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10d      	bne.n	800c840 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82c:	f107 0208 	add.w	r2, r7, #8
 800c830:	4610      	mov	r0, r2
 800c832:	4798      	blx	r3
 800c834:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3301      	adds	r3, #1
 800c83a:	2202      	movs	r2, #2
 800c83c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c83e:	e100      	b.n	800ca42 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	f107 0208 	add.w	r2, r7, #8
 800c84c:	4610      	mov	r0, r2
 800c84e:	4798      	blx	r3
 800c850:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3301      	adds	r3, #1
 800c856:	2202      	movs	r2, #2
 800c858:	701a      	strb	r2, [r3, #0]
      break;
 800c85a:	e0f2      	b.n	800ca42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	885b      	ldrh	r3, [r3, #2]
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b05      	cmp	r3, #5
 800c864:	f200 80ac 	bhi.w	800c9c0 <USBD_GetDescriptor+0x258>
 800c868:	a201      	add	r2, pc, #4	; (adr r2, 800c870 <USBD_GetDescriptor+0x108>)
 800c86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86e:	bf00      	nop
 800c870:	0800c889 	.word	0x0800c889
 800c874:	0800c8bd 	.word	0x0800c8bd
 800c878:	0800c8f1 	.word	0x0800c8f1
 800c87c:	0800c925 	.word	0x0800c925
 800c880:	0800c959 	.word	0x0800c959
 800c884:	0800c98d 	.word	0x0800c98d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00b      	beq.n	800c8ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	7c12      	ldrb	r2, [r2, #16]
 800c8a0:	f107 0108 	add.w	r1, r7, #8
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8aa:	e091      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 facb 	bl	800ce4a <USBD_CtlError>
            err++;
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ba:	e089      	b.n	800c9d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00b      	beq.n	800c8e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7c12      	ldrb	r2, [r2, #16]
 800c8d4:	f107 0108 	add.w	r1, r7, #8
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4798      	blx	r3
 800c8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8de:	e077      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fab1 	bl	800ce4a <USBD_CtlError>
            err++;
 800c8e8:	7afb      	ldrb	r3, [r7, #11]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ee:	e06f      	b.n	800c9d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00b      	beq.n	800c914 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	7c12      	ldrb	r2, [r2, #16]
 800c908:	f107 0108 	add.w	r1, r7, #8
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
 800c910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c912:	e05d      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa97 	bl	800ce4a <USBD_CtlError>
            err++;
 800c91c:	7afb      	ldrb	r3, [r7, #11]
 800c91e:	3301      	adds	r3, #1
 800c920:	72fb      	strb	r3, [r7, #11]
          break;
 800c922:	e055      	b.n	800c9d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	7c12      	ldrb	r2, [r2, #16]
 800c93c:	f107 0108 	add.w	r1, r7, #8
 800c940:	4610      	mov	r0, r2
 800c942:	4798      	blx	r3
 800c944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c946:	e043      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fa7d 	bl	800ce4a <USBD_CtlError>
            err++;
 800c950:	7afb      	ldrb	r3, [r7, #11]
 800c952:	3301      	adds	r3, #1
 800c954:	72fb      	strb	r3, [r7, #11]
          break;
 800c956:	e03b      	b.n	800c9d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00b      	beq.n	800c97c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	7c12      	ldrb	r2, [r2, #16]
 800c970:	f107 0108 	add.w	r1, r7, #8
 800c974:	4610      	mov	r0, r2
 800c976:	4798      	blx	r3
 800c978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c97a:	e029      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fa63 	bl	800ce4a <USBD_CtlError>
            err++;
 800c984:	7afb      	ldrb	r3, [r7, #11]
 800c986:	3301      	adds	r3, #1
 800c988:	72fb      	strb	r3, [r7, #11]
          break;
 800c98a:	e021      	b.n	800c9d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00b      	beq.n	800c9b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	7c12      	ldrb	r2, [r2, #16]
 800c9a4:	f107 0108 	add.w	r1, r7, #8
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	4798      	blx	r3
 800c9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ae:	e00f      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fa49 	bl	800ce4a <USBD_CtlError>
            err++;
 800c9b8:	7afb      	ldrb	r3, [r7, #11]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c9be:	e007      	b.n	800c9d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa41 	bl	800ce4a <USBD_CtlError>
          err++;
 800c9c8:	7afb      	ldrb	r3, [r7, #11]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c9ce:	bf00      	nop
      }
      break;
 800c9d0:	e037      	b.n	800ca42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	7c1b      	ldrb	r3, [r3, #16]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d109      	bne.n	800c9ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e2:	f107 0208 	add.w	r2, r7, #8
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	4798      	blx	r3
 800c9ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9ec:	e029      	b.n	800ca42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fa2a 	bl	800ce4a <USBD_CtlError>
        err++;
 800c9f6:	7afb      	ldrb	r3, [r7, #11]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c9fc:	e021      	b.n	800ca42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	7c1b      	ldrb	r3, [r3, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10d      	bne.n	800ca22 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0e:	f107 0208 	add.w	r2, r7, #8
 800ca12:	4610      	mov	r0, r2
 800ca14:	4798      	blx	r3
 800ca16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	2207      	movs	r2, #7
 800ca1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca20:	e00f      	b.n	800ca42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fa10 	bl	800ce4a <USBD_CtlError>
        err++;
 800ca2a:	7afb      	ldrb	r3, [r7, #11]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca30:	e007      	b.n	800ca42 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fa08 	bl	800ce4a <USBD_CtlError>
      err++;
 800ca3a:	7afb      	ldrb	r3, [r7, #11]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca40:	bf00      	nop
  }

  if (err != 0U)
 800ca42:	7afb      	ldrb	r3, [r7, #11]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11e      	bne.n	800ca86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	88db      	ldrh	r3, [r3, #6]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d016      	beq.n	800ca7e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca50:	893b      	ldrh	r3, [r7, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00e      	beq.n	800ca74 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	88da      	ldrh	r2, [r3, #6]
 800ca5a:	893b      	ldrh	r3, [r7, #8]
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	bf28      	it	cs
 800ca60:	4613      	movcs	r3, r2
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca66:	893b      	ldrh	r3, [r7, #8]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	68f9      	ldr	r1, [r7, #12]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fa5d 	bl	800cf2c <USBD_CtlSendData>
 800ca72:	e009      	b.n	800ca88 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f9e7 	bl	800ce4a <USBD_CtlError>
 800ca7c:	e004      	b.n	800ca88 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 faae 	bl	800cfe0 <USBD_CtlSendStatus>
 800ca84:	e000      	b.n	800ca88 <USBD_GetDescriptor+0x320>
    return;
 800ca86:	bf00      	nop
  }
}
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop

0800ca90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	889b      	ldrh	r3, [r3, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d131      	bne.n	800cb06 <USBD_SetAddress+0x76>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	88db      	ldrh	r3, [r3, #6]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d12d      	bne.n	800cb06 <USBD_SetAddress+0x76>
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	885b      	ldrh	r3, [r3, #2]
 800caae:	2b7f      	cmp	r3, #127	; 0x7f
 800cab0:	d829      	bhi.n	800cb06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	885b      	ldrh	r3, [r3, #2]
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cabc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d104      	bne.n	800cad4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800caca:	6839      	ldr	r1, [r7, #0]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f9bc 	bl	800ce4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad2:	e01d      	b.n	800cb10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	7bfa      	ldrb	r2, [r7, #15]
 800cad8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f004 f837 	bl	8010b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa7a 	bl	800cfe0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d004      	beq.n	800cafc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2202      	movs	r2, #2
 800caf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cafa:	e009      	b.n	800cb10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb04:	e004      	b.n	800cb10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f99e 	bl	800ce4a <USBD_CtlError>
  }
}
 800cb0e:	bf00      	nop
 800cb10:	bf00      	nop
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	885b      	ldrh	r3, [r3, #2]
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	4b4e      	ldr	r3, [pc, #312]	; (800cc68 <USBD_SetConfig+0x150>)
 800cb2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb30:	4b4d      	ldr	r3, [pc, #308]	; (800cc68 <USBD_SetConfig+0x150>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d905      	bls.n	800cb44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f985 	bl	800ce4a <USBD_CtlError>
    return USBD_FAIL;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e08c      	b.n	800cc5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d002      	beq.n	800cb56 <USBD_SetConfig+0x3e>
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	d029      	beq.n	800cba8 <USBD_SetConfig+0x90>
 800cb54:	e075      	b.n	800cc42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb56:	4b44      	ldr	r3, [pc, #272]	; (800cc68 <USBD_SetConfig+0x150>)
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d020      	beq.n	800cba0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb5e:	4b42      	ldr	r3, [pc, #264]	; (800cc68 <USBD_SetConfig+0x150>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb68:	4b3f      	ldr	r3, [pc, #252]	; (800cc68 <USBD_SetConfig+0x150>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7fe ffb7 	bl	800bae2 <USBD_SetClassConfig>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d008      	beq.n	800cb90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f962 	bl	800ce4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2202      	movs	r2, #2
 800cb8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb8e:	e065      	b.n	800cc5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 fa25 	bl	800cfe0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2203      	movs	r2, #3
 800cb9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb9e:	e05d      	b.n	800cc5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fa1d 	bl	800cfe0 <USBD_CtlSendStatus>
      break;
 800cba6:	e059      	b.n	800cc5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cba8:	4b2f      	ldr	r3, [pc, #188]	; (800cc68 <USBD_SetConfig+0x150>)
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d112      	bne.n	800cbd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cbb8:	4b2b      	ldr	r3, [pc, #172]	; (800cc68 <USBD_SetConfig+0x150>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbc2:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <USBD_SetConfig+0x150>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7fe ffa6 	bl	800bb1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fa06 	bl	800cfe0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbd4:	e042      	b.n	800cc5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cbd6:	4b24      	ldr	r3, [pc, #144]	; (800cc68 <USBD_SetConfig+0x150>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d02a      	beq.n	800cc3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fe ff94 	bl	800bb1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbf2:	4b1d      	ldr	r3, [pc, #116]	; (800cc68 <USBD_SetConfig+0x150>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbfc:	4b1a      	ldr	r3, [pc, #104]	; (800cc68 <USBD_SetConfig+0x150>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7fe ff6d 	bl	800bae2 <USBD_SetClassConfig>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00f      	beq.n	800cc32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f918 	bl	800ce4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7fe ff79 	bl	800bb1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc30:	e014      	b.n	800cc5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f9d4 	bl	800cfe0 <USBD_CtlSendStatus>
      break;
 800cc38:	e010      	b.n	800cc5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f9d0 	bl	800cfe0 <USBD_CtlSendStatus>
      break;
 800cc40:	e00c      	b.n	800cc5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f900 	bl	800ce4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc4a:	4b07      	ldr	r3, [pc, #28]	; (800cc68 <USBD_SetConfig+0x150>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7fe ff62 	bl	800bb1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc56:	2303      	movs	r3, #3
 800cc58:	73fb      	strb	r3, [r7, #15]
      break;
 800cc5a:	bf00      	nop
  }

  return ret;
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	2000a770 	.word	0x2000a770

0800cc6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	88db      	ldrh	r3, [r3, #6]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d004      	beq.n	800cc88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc7e:	6839      	ldr	r1, [r7, #0]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f8e2 	bl	800ce4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc86:	e023      	b.n	800ccd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	dc02      	bgt.n	800cc9a <USBD_GetConfig+0x2e>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dc03      	bgt.n	800cca0 <USBD_GetConfig+0x34>
 800cc98:	e015      	b.n	800ccc6 <USBD_GetConfig+0x5a>
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d00b      	beq.n	800ccb6 <USBD_GetConfig+0x4a>
 800cc9e:	e012      	b.n	800ccc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	3308      	adds	r3, #8
 800ccaa:	2201      	movs	r2, #1
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f93c 	bl	800cf2c <USBD_CtlSendData>
        break;
 800ccb4:	e00c      	b.n	800ccd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	3304      	adds	r3, #4
 800ccba:	2201      	movs	r2, #1
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f934 	bl	800cf2c <USBD_CtlSendData>
        break;
 800ccc4:	e004      	b.n	800ccd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f8be 	bl	800ce4a <USBD_CtlError>
        break;
 800ccce:	bf00      	nop
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	3b01      	subs	r3, #1
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d81e      	bhi.n	800cd2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	88db      	ldrh	r3, [r3, #6]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d004      	beq.n	800cd02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f8a5 	bl	800ce4a <USBD_CtlError>
        break;
 800cd00:	e01a      	b.n	800cd38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d005      	beq.n	800cd1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f043 0202 	orr.w	r2, r3, #2
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	330c      	adds	r3, #12
 800cd22:	2202      	movs	r2, #2
 800cd24:	4619      	mov	r1, r3
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f900 	bl	800cf2c <USBD_CtlSendData>
      break;
 800cd2c:	e004      	b.n	800cd38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f88a 	bl	800ce4a <USBD_CtlError>
      break;
 800cd36:	bf00      	nop
  }
}
 800cd38:	bf00      	nop
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	885b      	ldrh	r3, [r3, #2]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d107      	bne.n	800cd62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f940 	bl	800cfe0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd60:	e013      	b.n	800cd8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	885b      	ldrh	r3, [r3, #2]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d10b      	bne.n	800cd82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	889b      	ldrh	r3, [r3, #4]
 800cd6e:	0a1b      	lsrs	r3, r3, #8
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f930 	bl	800cfe0 <USBD_CtlSendStatus>
}
 800cd80:	e003      	b.n	800cd8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd82:	6839      	ldr	r1, [r7, #0]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f860 	bl	800ce4a <USBD_CtlError>
}
 800cd8a:	bf00      	nop
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	3b01      	subs	r3, #1
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d80b      	bhi.n	800cdc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	885b      	ldrh	r3, [r3, #2]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d10c      	bne.n	800cdcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f910 	bl	800cfe0 <USBD_CtlSendStatus>
      }
      break;
 800cdc0:	e004      	b.n	800cdcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f840 	bl	800ce4a <USBD_CtlError>
      break;
 800cdca:	e000      	b.n	800cdce <USBD_ClrFeature+0x3c>
      break;
 800cdcc:	bf00      	nop
  }
}
 800cdce:	bf00      	nop
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b084      	sub	sp, #16
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	781a      	ldrb	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	781a      	ldrb	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f7ff fa17 	bl	800c234 <SWAPBYTE>
 800ce06:	4603      	mov	r3, r0
 800ce08:	461a      	mov	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3301      	adds	r3, #1
 800ce12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3301      	adds	r3, #1
 800ce18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f7ff fa0a 	bl	800c234 <SWAPBYTE>
 800ce20:	4603      	mov	r3, r0
 800ce22:	461a      	mov	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f7ff f9fd 	bl	800c234 <SWAPBYTE>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	80da      	strh	r2, [r3, #6]
}
 800ce42:	bf00      	nop
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce54:	2180      	movs	r1, #128	; 0x80
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f003 fde4 	bl	8010a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f003 fde0 	bl	8010a24 <USBD_LL_StallEP>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d036      	beq.n	800cef0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce86:	6938      	ldr	r0, [r7, #16]
 800ce88:	f000 f836 	bl	800cef8 <USBD_GetLen>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	3301      	adds	r3, #1
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	4413      	add	r3, r2
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	7812      	ldrb	r2, [r2, #0]
 800cea4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cebc:	e013      	b.n	800cee6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	4413      	add	r3, r2
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	3301      	adds	r3, #1
 800cece:	613b      	str	r3, [r7, #16]
    idx++;
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	3301      	adds	r3, #1
 800ced4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	4413      	add	r3, r2
 800cedc:	2200      	movs	r2, #0
 800cede:	701a      	strb	r2, [r3, #0]
    idx++;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
 800cee2:	3301      	adds	r3, #1
 800cee4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e7      	bne.n	800cebe <USBD_GetString+0x52>
 800ceee:	e000      	b.n	800cef2 <USBD_GetString+0x86>
    return;
 800cef0:	bf00      	nop
  }
}
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf08:	e005      	b.n	800cf16 <USBD_GetLen+0x1e>
  {
    len++;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	3301      	adds	r3, #1
 800cf14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1f5      	bne.n	800cf0a <USBD_GetLen+0x12>
  }

  return len;
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	2100      	movs	r1, #0
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f003 fe34 	bl	8010bc0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b084      	sub	sp, #16
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	2100      	movs	r1, #0
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f003 fe23 	bl	8010bc0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2203      	movs	r2, #3
 800cf94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	2100      	movs	r1, #0
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f003 fe3e 	bl	8010c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	60f8      	str	r0, [r7, #12]
 800cfc6:	60b9      	str	r1, [r7, #8]
 800cfc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	2100      	movs	r1, #0
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f003 fe2d 	bl	8010c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfd6:	2300      	movs	r3, #0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2204      	movs	r2, #4
 800cfec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cff0:	2300      	movs	r3, #0
 800cff2:	2200      	movs	r2, #0
 800cff4:	2100      	movs	r1, #0
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f003 fde2 	bl	8010bc0 <USBD_LL_Transmit>

  return USBD_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b082      	sub	sp, #8
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2205      	movs	r2, #5
 800d012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d016:	2300      	movs	r3, #0
 800d018:	2200      	movs	r2, #0
 800d01a:	2100      	movs	r1, #0
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f003 fe07 	bl	8010c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d036:	79fb      	ldrb	r3, [r7, #7]
 800d038:	4a08      	ldr	r2, [pc, #32]	; (800d05c <disk_status+0x30>)
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	79fa      	ldrb	r2, [r7, #7]
 800d044:	4905      	ldr	r1, [pc, #20]	; (800d05c <disk_status+0x30>)
 800d046:	440a      	add	r2, r1
 800d048:	7a12      	ldrb	r2, [r2, #8]
 800d04a:	4610      	mov	r0, r2
 800d04c:	4798      	blx	r3
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d052:	7bfb      	ldrb	r3, [r7, #15]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	2000a79c 	.word	0x2000a79c

0800d060 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	4a0d      	ldr	r2, [pc, #52]	; (800d0a8 <disk_initialize+0x48>)
 800d072:	5cd3      	ldrb	r3, [r2, r3]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d111      	bne.n	800d09c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	4a0b      	ldr	r2, [pc, #44]	; (800d0a8 <disk_initialize+0x48>)
 800d07c:	2101      	movs	r1, #1
 800d07e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	4a09      	ldr	r2, [pc, #36]	; (800d0a8 <disk_initialize+0x48>)
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	79fa      	ldrb	r2, [r7, #7]
 800d08e:	4906      	ldr	r1, [pc, #24]	; (800d0a8 <disk_initialize+0x48>)
 800d090:	440a      	add	r2, r1
 800d092:	7a12      	ldrb	r2, [r2, #8]
 800d094:	4610      	mov	r0, r2
 800d096:	4798      	blx	r3
 800d098:	4603      	mov	r3, r0
 800d09a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	2000a79c 	.word	0x2000a79c

0800d0ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60b9      	str	r1, [r7, #8]
 800d0b4:	607a      	str	r2, [r7, #4]
 800d0b6:	603b      	str	r3, [r7, #0]
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
 800d0be:	4a0a      	ldr	r2, [pc, #40]	; (800d0e8 <disk_read+0x3c>)
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	4413      	add	r3, r2
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	689c      	ldr	r4, [r3, #8]
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ca:	4a07      	ldr	r2, [pc, #28]	; (800d0e8 <disk_read+0x3c>)
 800d0cc:	4413      	add	r3, r2
 800d0ce:	7a18      	ldrb	r0, [r3, #8]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	68b9      	ldr	r1, [r7, #8]
 800d0d6:	47a0      	blx	r4
 800d0d8:	4603      	mov	r3, r0
 800d0da:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	371c      	adds	r7, #28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd90      	pop	{r4, r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	2000a79c 	.word	0x2000a79c

0800d0ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d0ec:	b590      	push	{r4, r7, lr}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60b9      	str	r1, [r7, #8]
 800d0f4:	607a      	str	r2, [r7, #4]
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	4a0a      	ldr	r2, [pc, #40]	; (800d128 <disk_write+0x3c>)
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4413      	add	r3, r2
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	68dc      	ldr	r4, [r3, #12]
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	4a07      	ldr	r2, [pc, #28]	; (800d128 <disk_write+0x3c>)
 800d10c:	4413      	add	r3, r2
 800d10e:	7a18      	ldrb	r0, [r3, #8]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	47a0      	blx	r4
 800d118:	4603      	mov	r3, r0
 800d11a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	bd90      	pop	{r4, r7, pc}
 800d126:	bf00      	nop
 800d128:	2000a79c 	.word	0x2000a79c

0800d12c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	603a      	str	r2, [r7, #0]
 800d136:	71fb      	strb	r3, [r7, #7]
 800d138:	460b      	mov	r3, r1
 800d13a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d13c:	79fb      	ldrb	r3, [r7, #7]
 800d13e:	4a09      	ldr	r2, [pc, #36]	; (800d164 <disk_ioctl+0x38>)
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	79fa      	ldrb	r2, [r7, #7]
 800d14a:	4906      	ldr	r1, [pc, #24]	; (800d164 <disk_ioctl+0x38>)
 800d14c:	440a      	add	r2, r1
 800d14e:	7a10      	ldrb	r0, [r2, #8]
 800d150:	79b9      	ldrb	r1, [r7, #6]
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	4798      	blx	r3
 800d156:	4603      	mov	r3, r0
 800d158:	73fb      	strb	r3, [r7, #15]
  return res;
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	2000a79c 	.word	0x2000a79c

0800d168 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	3301      	adds	r3, #1
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	021b      	lsls	r3, r3, #8
 800d17c:	b21a      	sxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	b21b      	sxth	r3, r3
 800d184:	4313      	orrs	r3, r2
 800d186:	b21b      	sxth	r3, r3
 800d188:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d18a:	89fb      	ldrh	r3, [r7, #14]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3303      	adds	r3, #3
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	021b      	lsls	r3, r3, #8
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	3202      	adds	r2, #2
 800d1b0:	7812      	ldrb	r2, [r2, #0]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	021b      	lsls	r3, r3, #8
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	3201      	adds	r2, #1
 800d1be:	7812      	ldrb	r2, [r2, #0]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	7812      	ldrb	r2, [r2, #0]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d1de:	b480      	push	{r7}
 800d1e0:	b083      	sub	sp, #12
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	887a      	ldrh	r2, [r7, #2]
 800d1f2:	b2d2      	uxtb	r2, r2
 800d1f4:	701a      	strb	r2, [r3, #0]
 800d1f6:	887b      	ldrh	r3, [r7, #2]
 800d1f8:	0a1b      	lsrs	r3, r3, #8
 800d1fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	607a      	str	r2, [r7, #4]
 800d202:	887a      	ldrh	r2, [r7, #2]
 800d204:	b2d2      	uxtb	r2, r2
 800d206:	701a      	strb	r2, [r3, #0]
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	0a1b      	lsrs	r3, r3, #8
 800d22e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	607a      	str	r2, [r7, #4]
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	0a1b      	lsrs	r3, r3, #8
 800d240:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	b2d2      	uxtb	r2, r2
 800d24c:	701a      	strb	r2, [r3, #0]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	0a1b      	lsrs	r3, r3, #8
 800d252:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	607a      	str	r2, [r7, #4]
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	b2d2      	uxtb	r2, r2
 800d25e:	701a      	strb	r2, [r3, #0]
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d26c:	b480      	push	{r7}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00d      	beq.n	800d2a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	1c53      	adds	r3, r2, #1
 800d28a:	613b      	str	r3, [r7, #16]
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	1c59      	adds	r1, r3, #1
 800d290:	6179      	str	r1, [r7, #20]
 800d292:	7812      	ldrb	r2, [r2, #0]
 800d294:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	3b01      	subs	r3, #1
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1f1      	bne.n	800d286 <mem_cpy+0x1a>
	}
}
 800d2a2:	bf00      	nop
 800d2a4:	371c      	adds	r7, #28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d2ae:	b480      	push	{r7}
 800d2b0:	b087      	sub	sp, #28
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	617a      	str	r2, [r7, #20]
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	b2d2      	uxtb	r2, r2
 800d2c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	607b      	str	r3, [r7, #4]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1f3      	bne.n	800d2be <mem_set+0x10>
}
 800d2d6:	bf00      	nop
 800d2d8:	bf00      	nop
 800d2da:	371c      	adds	r7, #28
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d2e4:	b480      	push	{r7}
 800d2e6:	b089      	sub	sp, #36	; 0x24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	61fb      	str	r3, [r7, #28]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	61fa      	str	r2, [r7, #28]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	4619      	mov	r1, r3
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	61ba      	str	r2, [r7, #24]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	1acb      	subs	r3, r1, r3
 800d310:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3b01      	subs	r3, #1
 800d316:	607b      	str	r3, [r7, #4]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d002      	beq.n	800d324 <mem_cmp+0x40>
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d0eb      	beq.n	800d2fc <mem_cmp+0x18>

	return r;
 800d324:	697b      	ldr	r3, [r7, #20]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3724      	adds	r7, #36	; 0x24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d33c:	e002      	b.n	800d344 <chk_chr+0x12>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	3301      	adds	r3, #1
 800d342:	607b      	str	r3, [r7, #4]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d005      	beq.n	800d358 <chk_chr+0x26>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	4293      	cmp	r3, r2
 800d356:	d1f2      	bne.n	800d33e <chk_chr+0xc>
	return *str;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	781b      	ldrb	r3, [r3, #0]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d372:	2300      	movs	r3, #0
 800d374:	60bb      	str	r3, [r7, #8]
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	60fb      	str	r3, [r7, #12]
 800d37a:	e029      	b.n	800d3d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d37c:	4a27      	ldr	r2, [pc, #156]	; (800d41c <chk_lock+0xb4>)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	011b      	lsls	r3, r3, #4
 800d382:	4413      	add	r3, r2
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d01d      	beq.n	800d3c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d38a:	4a24      	ldr	r2, [pc, #144]	; (800d41c <chk_lock+0xb4>)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	011b      	lsls	r3, r3, #4
 800d390:	4413      	add	r3, r2
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d116      	bne.n	800d3ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d39c:	4a1f      	ldr	r2, [pc, #124]	; (800d41c <chk_lock+0xb4>)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	4413      	add	r3, r2
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d10c      	bne.n	800d3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d3b0:	4a1a      	ldr	r2, [pc, #104]	; (800d41c <chk_lock+0xb4>)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	011b      	lsls	r3, r3, #4
 800d3b6:	4413      	add	r3, r2
 800d3b8:	3308      	adds	r3, #8
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d102      	bne.n	800d3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d3c4:	e007      	b.n	800d3d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d9d2      	bls.n	800d37c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d109      	bne.n	800d3f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d102      	bne.n	800d3e8 <chk_lock+0x80>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d101      	bne.n	800d3ec <chk_lock+0x84>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	e010      	b.n	800d40e <chk_lock+0xa6>
 800d3ec:	2312      	movs	r3, #18
 800d3ee:	e00e      	b.n	800d40e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d108      	bne.n	800d408 <chk_lock+0xa0>
 800d3f6:	4a09      	ldr	r2, [pc, #36]	; (800d41c <chk_lock+0xb4>)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	011b      	lsls	r3, r3, #4
 800d3fc:	4413      	add	r3, r2
 800d3fe:	330c      	adds	r3, #12
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d406:	d101      	bne.n	800d40c <chk_lock+0xa4>
 800d408:	2310      	movs	r3, #16
 800d40a:	e000      	b.n	800d40e <chk_lock+0xa6>
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	2000a77c 	.word	0x2000a77c

0800d420 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d426:	2300      	movs	r3, #0
 800d428:	607b      	str	r3, [r7, #4]
 800d42a:	e002      	b.n	800d432 <enq_lock+0x12>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3301      	adds	r3, #1
 800d430:	607b      	str	r3, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d806      	bhi.n	800d446 <enq_lock+0x26>
 800d438:	4a09      	ldr	r2, [pc, #36]	; (800d460 <enq_lock+0x40>)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	4413      	add	r3, r2
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1f2      	bne.n	800d42c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	bf14      	ite	ne
 800d44c:	2301      	movne	r3, #1
 800d44e:	2300      	moveq	r3, #0
 800d450:	b2db      	uxtb	r3, r3
}
 800d452:	4618      	mov	r0, r3
 800d454:	370c      	adds	r7, #12
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	2000a77c 	.word	0x2000a77c

0800d464 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d46e:	2300      	movs	r3, #0
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	e01f      	b.n	800d4b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d474:	4a41      	ldr	r2, [pc, #260]	; (800d57c <inc_lock+0x118>)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	011b      	lsls	r3, r3, #4
 800d47a:	4413      	add	r3, r2
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d113      	bne.n	800d4ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d486:	4a3d      	ldr	r2, [pc, #244]	; (800d57c <inc_lock+0x118>)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	4413      	add	r3, r2
 800d48e:	3304      	adds	r3, #4
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d496:	429a      	cmp	r2, r3
 800d498:	d109      	bne.n	800d4ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d49a:	4a38      	ldr	r2, [pc, #224]	; (800d57c <inc_lock+0x118>)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	011b      	lsls	r3, r3, #4
 800d4a0:	4413      	add	r3, r2
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d006      	beq.n	800d4bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d9dc      	bls.n	800d474 <inc_lock+0x10>
 800d4ba:	e000      	b.n	800d4be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d4bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	d132      	bne.n	800d52a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	e002      	b.n	800d4d0 <inc_lock+0x6c>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d806      	bhi.n	800d4e4 <inc_lock+0x80>
 800d4d6:	4a29      	ldr	r2, [pc, #164]	; (800d57c <inc_lock+0x118>)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	011b      	lsls	r3, r3, #4
 800d4dc:	4413      	add	r3, r2
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f2      	bne.n	800d4ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d101      	bne.n	800d4ee <inc_lock+0x8a>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e040      	b.n	800d570 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4922      	ldr	r1, [pc, #136]	; (800d57c <inc_lock+0x118>)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	011b      	lsls	r3, r3, #4
 800d4f8:	440b      	add	r3, r1
 800d4fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	689a      	ldr	r2, [r3, #8]
 800d500:	491e      	ldr	r1, [pc, #120]	; (800d57c <inc_lock+0x118>)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	440b      	add	r3, r1
 800d508:	3304      	adds	r3, #4
 800d50a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	695a      	ldr	r2, [r3, #20]
 800d510:	491a      	ldr	r1, [pc, #104]	; (800d57c <inc_lock+0x118>)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	011b      	lsls	r3, r3, #4
 800d516:	440b      	add	r3, r1
 800d518:	3308      	adds	r3, #8
 800d51a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d51c:	4a17      	ldr	r2, [pc, #92]	; (800d57c <inc_lock+0x118>)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	4413      	add	r3, r2
 800d524:	330c      	adds	r3, #12
 800d526:	2200      	movs	r2, #0
 800d528:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d009      	beq.n	800d544 <inc_lock+0xe0>
 800d530:	4a12      	ldr	r2, [pc, #72]	; (800d57c <inc_lock+0x118>)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	011b      	lsls	r3, r3, #4
 800d536:	4413      	add	r3, r2
 800d538:	330c      	adds	r3, #12
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <inc_lock+0xe0>
 800d540:	2300      	movs	r3, #0
 800d542:	e015      	b.n	800d570 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d108      	bne.n	800d55c <inc_lock+0xf8>
 800d54a:	4a0c      	ldr	r2, [pc, #48]	; (800d57c <inc_lock+0x118>)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	011b      	lsls	r3, r3, #4
 800d550:	4413      	add	r3, r2
 800d552:	330c      	adds	r3, #12
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	3301      	adds	r3, #1
 800d558:	b29a      	uxth	r2, r3
 800d55a:	e001      	b.n	800d560 <inc_lock+0xfc>
 800d55c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d560:	4906      	ldr	r1, [pc, #24]	; (800d57c <inc_lock+0x118>)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	011b      	lsls	r3, r3, #4
 800d566:	440b      	add	r3, r1
 800d568:	330c      	adds	r3, #12
 800d56a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3301      	adds	r3, #1
}
 800d570:	4618      	mov	r0, r3
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	2000a77c 	.word	0x2000a77c

0800d580 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d825      	bhi.n	800d5e0 <dec_lock+0x60>
		n = Files[i].ctr;
 800d594:	4a17      	ldr	r2, [pc, #92]	; (800d5f4 <dec_lock+0x74>)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	4413      	add	r3, r2
 800d59c:	330c      	adds	r3, #12
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d5a2:	89fb      	ldrh	r3, [r7, #14]
 800d5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5a8:	d101      	bne.n	800d5ae <dec_lock+0x2e>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d5ae:	89fb      	ldrh	r3, [r7, #14]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d002      	beq.n	800d5ba <dec_lock+0x3a>
 800d5b4:	89fb      	ldrh	r3, [r7, #14]
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d5ba:	4a0e      	ldr	r2, [pc, #56]	; (800d5f4 <dec_lock+0x74>)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	011b      	lsls	r3, r3, #4
 800d5c0:	4413      	add	r3, r2
 800d5c2:	330c      	adds	r3, #12
 800d5c4:	89fa      	ldrh	r2, [r7, #14]
 800d5c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d5c8:	89fb      	ldrh	r3, [r7, #14]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d105      	bne.n	800d5da <dec_lock+0x5a>
 800d5ce:	4a09      	ldr	r2, [pc, #36]	; (800d5f4 <dec_lock+0x74>)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	011b      	lsls	r3, r3, #4
 800d5d4:	4413      	add	r3, r2
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	737b      	strb	r3, [r7, #13]
 800d5de:	e001      	b.n	800d5e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d5e4:	7b7b      	ldrb	r3, [r7, #13]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	2000a77c 	.word	0x2000a77c

0800d5f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d600:	2300      	movs	r3, #0
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	e010      	b.n	800d628 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d606:	4a0d      	ldr	r2, [pc, #52]	; (800d63c <clear_lock+0x44>)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	011b      	lsls	r3, r3, #4
 800d60c:	4413      	add	r3, r2
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	429a      	cmp	r2, r3
 800d614:	d105      	bne.n	800d622 <clear_lock+0x2a>
 800d616:	4a09      	ldr	r2, [pc, #36]	; (800d63c <clear_lock+0x44>)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	011b      	lsls	r3, r3, #4
 800d61c:	4413      	add	r3, r2
 800d61e:	2200      	movs	r2, #0
 800d620:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3301      	adds	r3, #1
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d9eb      	bls.n	800d606 <clear_lock+0xe>
	}
}
 800d62e:	bf00      	nop
 800d630:	bf00      	nop
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	2000a77c 	.word	0x2000a77c

0800d640 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	78db      	ldrb	r3, [r3, #3]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d034      	beq.n	800d6be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7858      	ldrb	r0, [r3, #1]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d664:	2301      	movs	r3, #1
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	f7ff fd40 	bl	800d0ec <disk_write>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d672:	2301      	movs	r3, #1
 800d674:	73fb      	strb	r3, [r7, #15]
 800d676:	e022      	b.n	800d6be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	1ad2      	subs	r2, r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d217      	bcs.n	800d6be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	789b      	ldrb	r3, [r3, #2]
 800d692:	613b      	str	r3, [r7, #16]
 800d694:	e010      	b.n	800d6b8 <sync_window+0x78>
					wsect += fs->fsize;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	699b      	ldr	r3, [r3, #24]
 800d69a:	697a      	ldr	r2, [r7, #20]
 800d69c:	4413      	add	r3, r2
 800d69e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7858      	ldrb	r0, [r3, #1]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	f7ff fd1d 	bl	800d0ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	613b      	str	r3, [r7, #16]
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d8eb      	bhi.n	800d696 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3718      	adds	r7, #24
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d01b      	beq.n	800d718 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff ffad 	bl	800d640 <sync_window>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d113      	bne.n	800d718 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	7858      	ldrb	r0, [r3, #1]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	f7ff fcd5 	bl	800d0ac <disk_read>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d708:	f04f 33ff 	mov.w	r3, #4294967295
 800d70c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d70e:	2301      	movs	r3, #1
 800d710:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d718:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
	...

0800d724 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff ff87 	bl	800d640 <sync_window>
 800d732:	4603      	mov	r3, r0
 800d734:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d736:	7bfb      	ldrb	r3, [r7, #15]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d158      	bne.n	800d7ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b03      	cmp	r3, #3
 800d742:	d148      	bne.n	800d7d6 <sync_fs+0xb2>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	791b      	ldrb	r3, [r3, #4]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d144      	bne.n	800d7d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3330      	adds	r3, #48	; 0x30
 800d750:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d754:	2100      	movs	r1, #0
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fda9 	bl	800d2ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3330      	adds	r3, #48	; 0x30
 800d760:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d764:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff fd38 	bl	800d1de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	3330      	adds	r3, #48	; 0x30
 800d772:	4921      	ldr	r1, [pc, #132]	; (800d7f8 <sync_fs+0xd4>)
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff fd4d 	bl	800d214 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	3330      	adds	r3, #48	; 0x30
 800d77e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d782:	491e      	ldr	r1, [pc, #120]	; (800d7fc <sync_fs+0xd8>)
 800d784:	4618      	mov	r0, r3
 800d786:	f7ff fd45 	bl	800d214 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	3330      	adds	r3, #48	; 0x30
 800d78e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	4619      	mov	r1, r3
 800d798:	4610      	mov	r0, r2
 800d79a:	f7ff fd3b 	bl	800d214 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	3330      	adds	r3, #48	; 0x30
 800d7a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	f7ff fd31 	bl	800d214 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	7858      	ldrb	r0, [r3, #1]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	f7ff fc8e 	bl	800d0ec <disk_write>
			fs->fsi_flag = 0;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	785b      	ldrb	r3, [r3, #1]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fca4 	bl	800d12c <disk_ioctl>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <sync_fs+0xca>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	41615252 	.word	0x41615252
 800d7fc:	61417272 	.word	0x61417272

0800d800 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	3b02      	subs	r3, #2
 800d80e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	695b      	ldr	r3, [r3, #20]
 800d814:	3b02      	subs	r3, #2
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d301      	bcc.n	800d820 <clust2sect+0x20>
 800d81c:	2300      	movs	r3, #0
 800d81e:	e008      	b.n	800d832 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	895b      	ldrh	r3, [r3, #10]
 800d824:	461a      	mov	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	fb03 f202 	mul.w	r2, r3, r2
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d830:	4413      	add	r3, r2
}
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b086      	sub	sp, #24
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d904      	bls.n	800d85e <get_fat+0x20>
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d302      	bcc.n	800d864 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d85e:	2301      	movs	r3, #1
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	e08f      	b.n	800d984 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d864:	f04f 33ff 	mov.w	r3, #4294967295
 800d868:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d062      	beq.n	800d938 <get_fat+0xfa>
 800d872:	2b03      	cmp	r3, #3
 800d874:	dc7c      	bgt.n	800d970 <get_fat+0x132>
 800d876:	2b01      	cmp	r3, #1
 800d878:	d002      	beq.n	800d880 <get_fat+0x42>
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d042      	beq.n	800d904 <get_fat+0xc6>
 800d87e:	e077      	b.n	800d970 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	085b      	lsrs	r3, r3, #1
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	4413      	add	r3, r2
 800d88c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	6a1a      	ldr	r2, [r3, #32]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	0a5b      	lsrs	r3, r3, #9
 800d896:	4413      	add	r3, r2
 800d898:	4619      	mov	r1, r3
 800d89a:	6938      	ldr	r0, [r7, #16]
 800d89c:	f7ff ff14 	bl	800d6c8 <move_window>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d167      	bne.n	800d976 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	60fa      	str	r2, [r7, #12]
 800d8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	6a1a      	ldr	r2, [r3, #32]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	0a5b      	lsrs	r3, r3, #9
 800d8c2:	4413      	add	r3, r2
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6938      	ldr	r0, [r7, #16]
 800d8c8:	f7ff fefe 	bl	800d6c8 <move_window>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d153      	bne.n	800d97a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8d8:	693a      	ldr	r2, [r7, #16]
 800d8da:	4413      	add	r3, r2
 800d8dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8e0:	021b      	lsls	r3, r3, #8
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <get_fat+0xbc>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	091b      	lsrs	r3, r3, #4
 800d8f8:	e002      	b.n	800d900 <get_fat+0xc2>
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d900:	617b      	str	r3, [r7, #20]
			break;
 800d902:	e03f      	b.n	800d984 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	6a1a      	ldr	r2, [r3, #32]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	0a1b      	lsrs	r3, r3, #8
 800d90c:	4413      	add	r3, r2
 800d90e:	4619      	mov	r1, r3
 800d910:	6938      	ldr	r0, [r7, #16]
 800d912:	f7ff fed9 	bl	800d6c8 <move_window>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d130      	bne.n	800d97e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d92a:	4413      	add	r3, r2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7ff fc1b 	bl	800d168 <ld_word>
 800d932:	4603      	mov	r3, r0
 800d934:	617b      	str	r3, [r7, #20]
			break;
 800d936:	e025      	b.n	800d984 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	6a1a      	ldr	r2, [r3, #32]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	09db      	lsrs	r3, r3, #7
 800d940:	4413      	add	r3, r2
 800d942:	4619      	mov	r1, r3
 800d944:	6938      	ldr	r0, [r7, #16]
 800d946:	f7ff febf 	bl	800d6c8 <move_window>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d118      	bne.n	800d982 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d95e:	4413      	add	r3, r2
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fc19 	bl	800d198 <ld_dword>
 800d966:	4603      	mov	r3, r0
 800d968:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d96c:	617b      	str	r3, [r7, #20]
			break;
 800d96e:	e009      	b.n	800d984 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d970:	2301      	movs	r3, #1
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	e006      	b.n	800d984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d976:	bf00      	nop
 800d978:	e004      	b.n	800d984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d97a:	bf00      	nop
 800d97c:	e002      	b.n	800d984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d97e:	bf00      	nop
 800d980:	e000      	b.n	800d984 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d982:	bf00      	nop
		}
	}

	return val;
 800d984:	697b      	ldr	r3, [r7, #20]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d98e:	b590      	push	{r4, r7, lr}
 800d990:	b089      	sub	sp, #36	; 0x24
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	60b9      	str	r1, [r7, #8]
 800d998:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d99a:	2302      	movs	r3, #2
 800d99c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	f240 80d9 	bls.w	800db58 <put_fat+0x1ca>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	f080 80d3 	bcs.w	800db58 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	f000 8096 	beq.w	800dae8 <put_fat+0x15a>
 800d9bc:	2b03      	cmp	r3, #3
 800d9be:	f300 80cb 	bgt.w	800db58 <put_fat+0x1ca>
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d002      	beq.n	800d9cc <put_fat+0x3e>
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d06e      	beq.n	800daa8 <put_fat+0x11a>
 800d9ca:	e0c5      	b.n	800db58 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	61bb      	str	r3, [r7, #24]
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	085b      	lsrs	r3, r3, #1
 800d9d4:	69ba      	ldr	r2, [r7, #24]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6a1a      	ldr	r2, [r3, #32]
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	0a5b      	lsrs	r3, r3, #9
 800d9e2:	4413      	add	r3, r2
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7ff fe6e 	bl	800d6c8 <move_window>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9f0:	7ffb      	ldrb	r3, [r7, #31]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f040 80a9 	bne.w	800db4a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	1c59      	adds	r1, r3, #1
 800da02:	61b9      	str	r1, [r7, #24]
 800da04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da08:	4413      	add	r3, r2
 800da0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00d      	beq.n	800da32 <put_fat+0xa4>
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	b25b      	sxtb	r3, r3
 800da1c:	f003 030f 	and.w	r3, r3, #15
 800da20:	b25a      	sxtb	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	b2db      	uxtb	r3, r3
 800da26:	011b      	lsls	r3, r3, #4
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	4313      	orrs	r3, r2
 800da2c:	b25b      	sxtb	r3, r3
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	e001      	b.n	800da36 <put_fat+0xa8>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2201      	movs	r2, #1
 800da3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6a1a      	ldr	r2, [r3, #32]
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	0a5b      	lsrs	r3, r3, #9
 800da48:	4413      	add	r3, r2
 800da4a:	4619      	mov	r1, r3
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7ff fe3b 	bl	800d6c8 <move_window>
 800da52:	4603      	mov	r3, r0
 800da54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da56:	7ffb      	ldrb	r3, [r7, #31]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d178      	bne.n	800db4e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da68:	4413      	add	r3, r2
 800da6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <put_fat+0xf0>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	091b      	lsrs	r3, r3, #4
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	e00e      	b.n	800da9c <put_fat+0x10e>
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	b25b      	sxtb	r3, r3
 800da84:	f023 030f 	bic.w	r3, r3, #15
 800da88:	b25a      	sxtb	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	0a1b      	lsrs	r3, r3, #8
 800da8e:	b25b      	sxtb	r3, r3
 800da90:	f003 030f 	and.w	r3, r3, #15
 800da94:	b25b      	sxtb	r3, r3
 800da96:	4313      	orrs	r3, r2
 800da98:	b25b      	sxtb	r3, r3
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2201      	movs	r2, #1
 800daa4:	70da      	strb	r2, [r3, #3]
			break;
 800daa6:	e057      	b.n	800db58 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6a1a      	ldr	r2, [r3, #32]
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	0a1b      	lsrs	r3, r3, #8
 800dab0:	4413      	add	r3, r2
 800dab2:	4619      	mov	r1, r3
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff fe07 	bl	800d6c8 <move_window>
 800daba:	4603      	mov	r3, r0
 800dabc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dabe:	7ffb      	ldrb	r3, [r7, #31]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d146      	bne.n	800db52 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dad2:	4413      	add	r3, r2
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	b292      	uxth	r2, r2
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff fb7f 	bl	800d1de <st_word>
			fs->wflag = 1;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2201      	movs	r2, #1
 800dae4:	70da      	strb	r2, [r3, #3]
			break;
 800dae6:	e037      	b.n	800db58 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6a1a      	ldr	r2, [r3, #32]
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	09db      	lsrs	r3, r3, #7
 800daf0:	4413      	add	r3, r2
 800daf2:	4619      	mov	r1, r3
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f7ff fde7 	bl	800d6c8 <move_window>
 800dafa:	4603      	mov	r3, r0
 800dafc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dafe:	7ffb      	ldrb	r3, [r7, #31]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d128      	bne.n	800db56 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db18:	4413      	add	r3, r2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7ff fb3c 	bl	800d198 <ld_dword>
 800db20:	4603      	mov	r3, r0
 800db22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db26:	4323      	orrs	r3, r4
 800db28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db38:	4413      	add	r3, r2
 800db3a:	6879      	ldr	r1, [r7, #4]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7ff fb69 	bl	800d214 <st_dword>
			fs->wflag = 1;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2201      	movs	r2, #1
 800db46:	70da      	strb	r2, [r3, #3]
			break;
 800db48:	e006      	b.n	800db58 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db4a:	bf00      	nop
 800db4c:	e004      	b.n	800db58 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db4e:	bf00      	nop
 800db50:	e002      	b.n	800db58 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db52:	bf00      	nop
 800db54:	e000      	b.n	800db58 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db56:	bf00      	nop
		}
	}
	return res;
 800db58:	7ffb      	ldrb	r3, [r7, #31]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3724      	adds	r7, #36	; 0x24
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd90      	pop	{r4, r7, pc}

0800db62 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b088      	sub	sp, #32
 800db66:	af00      	add	r7, sp, #0
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d904      	bls.n	800db88 <remove_chain+0x26>
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	429a      	cmp	r2, r3
 800db86:	d301      	bcc.n	800db8c <remove_chain+0x2a>
 800db88:	2302      	movs	r3, #2
 800db8a:	e04b      	b.n	800dc24 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00c      	beq.n	800dbac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800db92:	f04f 32ff 	mov.w	r2, #4294967295
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	69b8      	ldr	r0, [r7, #24]
 800db9a:	f7ff fef8 	bl	800d98e <put_fat>
 800db9e:	4603      	mov	r3, r0
 800dba0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dba2:	7ffb      	ldrb	r3, [r7, #31]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <remove_chain+0x4a>
 800dba8:	7ffb      	ldrb	r3, [r7, #31]
 800dbaa:	e03b      	b.n	800dc24 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dbac:	68b9      	ldr	r1, [r7, #8]
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f7ff fe45 	bl	800d83e <get_fat>
 800dbb4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d031      	beq.n	800dc20 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d101      	bne.n	800dbc6 <remove_chain+0x64>
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	e02e      	b.n	800dc24 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbcc:	d101      	bne.n	800dbd2 <remove_chain+0x70>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e028      	b.n	800dc24 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	69b8      	ldr	r0, [r7, #24]
 800dbd8:	f7ff fed9 	bl	800d98e <put_fat>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dbe0:	7ffb      	ldrb	r3, [r7, #31]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <remove_chain+0x88>
 800dbe6:	7ffb      	ldrb	r3, [r7, #31]
 800dbe8:	e01c      	b.n	800dc24 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	691a      	ldr	r2, [r3, #16]
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	3b02      	subs	r3, #2
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d20b      	bcs.n	800dc10 <remove_chain+0xae>
			fs->free_clst++;
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	1c5a      	adds	r2, r3, #1
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	791b      	ldrb	r3, [r3, #4]
 800dc06:	f043 0301 	orr.w	r3, r3, #1
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	695b      	ldr	r3, [r3, #20]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d3c6      	bcc.n	800dbac <remove_chain+0x4a>
 800dc1e:	e000      	b.n	800dc22 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dc20:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10d      	bne.n	800dc5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d004      	beq.n	800dc58 <create_chain+0x2c>
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	695b      	ldr	r3, [r3, #20]
 800dc52:	69ba      	ldr	r2, [r7, #24]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d31b      	bcc.n	800dc90 <create_chain+0x64>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	61bb      	str	r3, [r7, #24]
 800dc5c:	e018      	b.n	800dc90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff fdec 	bl	800d83e <get_fat>
 800dc66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d801      	bhi.n	800dc72 <create_chain+0x46>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e070      	b.n	800dd54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc78:	d101      	bne.n	800dc7e <create_chain+0x52>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	e06a      	b.n	800dd54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d201      	bcs.n	800dc8c <create_chain+0x60>
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	e063      	b.n	800dd54 <create_chain+0x128>
		scl = clst;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	3301      	adds	r3, #1
 800dc98:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	69fa      	ldr	r2, [r7, #28]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d307      	bcc.n	800dcb4 <create_chain+0x88>
				ncl = 2;
 800dca4:	2302      	movs	r3, #2
 800dca6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dca8:	69fa      	ldr	r2, [r7, #28]
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d901      	bls.n	800dcb4 <create_chain+0x88>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	e04f      	b.n	800dd54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dcb4:	69f9      	ldr	r1, [r7, #28]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff fdc1 	bl	800d83e <get_fat>
 800dcbc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00e      	beq.n	800dce2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d003      	beq.n	800dcd2 <create_chain+0xa6>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d101      	bne.n	800dcd6 <create_chain+0xaa>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	e03e      	b.n	800dd54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dcd6:	69fa      	ldr	r2, [r7, #28]
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d1da      	bne.n	800dc94 <create_chain+0x68>
 800dcde:	2300      	movs	r3, #0
 800dce0:	e038      	b.n	800dd54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dce2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dce4:	f04f 32ff 	mov.w	r2, #4294967295
 800dce8:	69f9      	ldr	r1, [r7, #28]
 800dcea:	6938      	ldr	r0, [r7, #16]
 800dcec:	f7ff fe4f 	bl	800d98e <put_fat>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d109      	bne.n	800dd0e <create_chain+0xe2>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d006      	beq.n	800dd0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dd00:	69fa      	ldr	r2, [r7, #28]
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6938      	ldr	r0, [r7, #16]
 800dd06:	f7ff fe42 	bl	800d98e <put_fat>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd0e:	7dfb      	ldrb	r3, [r7, #23]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d116      	bne.n	800dd42 <create_chain+0x116>
		fs->last_clst = ncl;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	69fa      	ldr	r2, [r7, #28]
 800dd18:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	691a      	ldr	r2, [r3, #16]
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	3b02      	subs	r3, #2
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d804      	bhi.n	800dd32 <create_chain+0x106>
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	1e5a      	subs	r2, r3, #1
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	791b      	ldrb	r3, [r3, #4]
 800dd36:	f043 0301 	orr.w	r3, r3, #1
 800dd3a:	b2da      	uxtb	r2, r3
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	711a      	strb	r2, [r3, #4]
 800dd40:	e007      	b.n	800dd52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d102      	bne.n	800dd4e <create_chain+0x122>
 800dd48:	f04f 33ff 	mov.w	r3, #4294967295
 800dd4c:	e000      	b.n	800dd50 <create_chain+0x124>
 800dd4e:	2301      	movs	r3, #1
 800dd50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dd52:	69fb      	ldr	r3, [r7, #28]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b087      	sub	sp, #28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	3304      	adds	r3, #4
 800dd72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	0a5b      	lsrs	r3, r3, #9
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	8952      	ldrh	r2, [r2, #10]
 800dd7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	1d1a      	adds	r2, r3, #4
 800dd86:	613a      	str	r2, [r7, #16]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d101      	bne.n	800dd96 <clmt_clust+0x3a>
 800dd92:	2300      	movs	r3, #0
 800dd94:	e010      	b.n	800ddb8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d307      	bcc.n	800ddae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	617b      	str	r3, [r7, #20]
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	3304      	adds	r3, #4
 800ddaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ddac:	e7e9      	b.n	800dd82 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ddae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	4413      	add	r3, r2
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	371c      	adds	r7, #28
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddda:	d204      	bcs.n	800dde6 <dir_sdi+0x22>
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	f003 031f 	and.w	r3, r3, #31
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d001      	beq.n	800ddea <dir_sdi+0x26>
		return FR_INT_ERR;
 800dde6:	2302      	movs	r3, #2
 800dde8:	e063      	b.n	800deb2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d106      	bne.n	800de0a <dir_sdi+0x46>
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b02      	cmp	r3, #2
 800de02:	d902      	bls.n	800de0a <dir_sdi+0x46>
		clst = fs->dirbase;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10c      	bne.n	800de2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	095b      	lsrs	r3, r3, #5
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	8912      	ldrh	r2, [r2, #8]
 800de18:	4293      	cmp	r3, r2
 800de1a:	d301      	bcc.n	800de20 <dir_sdi+0x5c>
 800de1c:	2302      	movs	r3, #2
 800de1e:	e048      	b.n	800deb2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	61da      	str	r2, [r3, #28]
 800de28:	e029      	b.n	800de7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	895b      	ldrh	r3, [r3, #10]
 800de2e:	025b      	lsls	r3, r3, #9
 800de30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de32:	e019      	b.n	800de68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6979      	ldr	r1, [r7, #20]
 800de38:	4618      	mov	r0, r3
 800de3a:	f7ff fd00 	bl	800d83e <get_fat>
 800de3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de46:	d101      	bne.n	800de4c <dir_sdi+0x88>
 800de48:	2301      	movs	r3, #1
 800de4a:	e032      	b.n	800deb2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d904      	bls.n	800de5c <dir_sdi+0x98>
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d301      	bcc.n	800de60 <dir_sdi+0x9c>
 800de5c:	2302      	movs	r3, #2
 800de5e:	e028      	b.n	800deb2 <dir_sdi+0xee>
			ofs -= csz;
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d2e1      	bcs.n	800de34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800de70:	6979      	ldr	r1, [r7, #20]
 800de72:	6938      	ldr	r0, [r7, #16]
 800de74:	f7ff fcc4 	bl	800d800 <clust2sect>
 800de78:	4602      	mov	r2, r0
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	69db      	ldr	r3, [r3, #28]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <dir_sdi+0xcc>
 800de8c:	2302      	movs	r3, #2
 800de8e:	e010      	b.n	800deb2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	69da      	ldr	r2, [r3, #28]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	0a5b      	lsrs	r3, r3, #9
 800de98:	441a      	add	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deaa:	441a      	add	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800deb0:	2300      	movs	r3, #0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800deba:	b580      	push	{r7, lr}
 800debc:	b086      	sub	sp, #24
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	3320      	adds	r3, #32
 800ded0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d003      	beq.n	800dee2 <dir_next+0x28>
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dee0:	d301      	bcc.n	800dee6 <dir_next+0x2c>
 800dee2:	2304      	movs	r3, #4
 800dee4:	e0aa      	b.n	800e03c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8098 	bne.w	800e022 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	69db      	ldr	r3, [r3, #28]
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10b      	bne.n	800df1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	095b      	lsrs	r3, r3, #5
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	8912      	ldrh	r2, [r2, #8]
 800df0c:	4293      	cmp	r3, r2
 800df0e:	f0c0 8088 	bcc.w	800e022 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	61da      	str	r2, [r3, #28]
 800df18:	2304      	movs	r3, #4
 800df1a:	e08f      	b.n	800e03c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	0a5b      	lsrs	r3, r3, #9
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	8952      	ldrh	r2, [r2, #10]
 800df24:	3a01      	subs	r2, #1
 800df26:	4013      	ands	r3, r2
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d17a      	bne.n	800e022 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	4619      	mov	r1, r3
 800df34:	4610      	mov	r0, r2
 800df36:	f7ff fc82 	bl	800d83e <get_fat>
 800df3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d801      	bhi.n	800df46 <dir_next+0x8c>
 800df42:	2302      	movs	r3, #2
 800df44:	e07a      	b.n	800e03c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4c:	d101      	bne.n	800df52 <dir_next+0x98>
 800df4e:	2301      	movs	r3, #1
 800df50:	e074      	b.n	800e03c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	697a      	ldr	r2, [r7, #20]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d358      	bcc.n	800e00e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d104      	bne.n	800df6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	61da      	str	r2, [r3, #28]
 800df68:	2304      	movs	r3, #4
 800df6a:	e067      	b.n	800e03c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	4619      	mov	r1, r3
 800df74:	4610      	mov	r0, r2
 800df76:	f7ff fe59 	bl	800dc2c <create_chain>
 800df7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <dir_next+0xcc>
 800df82:	2307      	movs	r3, #7
 800df84:	e05a      	b.n	800e03c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d101      	bne.n	800df90 <dir_next+0xd6>
 800df8c:	2302      	movs	r3, #2
 800df8e:	e055      	b.n	800e03c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df96:	d101      	bne.n	800df9c <dir_next+0xe2>
 800df98:	2301      	movs	r3, #1
 800df9a:	e04f      	b.n	800e03c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7ff fb4f 	bl	800d640 <sync_window>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <dir_next+0xf2>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e047      	b.n	800e03c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3330      	adds	r3, #48	; 0x30
 800dfb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7ff f979 	bl	800d2ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	613b      	str	r3, [r7, #16]
 800dfc0:	6979      	ldr	r1, [r7, #20]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7ff fc1c 	bl	800d800 <clust2sect>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	62da      	str	r2, [r3, #44]	; 0x2c
 800dfce:	e012      	b.n	800dff6 <dir_next+0x13c>
						fs->wflag = 1;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f7ff fb32 	bl	800d640 <sync_window>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <dir_next+0x12c>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e02a      	b.n	800e03c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	613b      	str	r3, [r7, #16]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	62da      	str	r2, [r3, #44]	; 0x2c
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	895b      	ldrh	r3, [r3, #10]
 800dffa:	461a      	mov	r2, r3
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	4293      	cmp	r3, r2
 800e000:	d3e6      	bcc.n	800dfd0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	1ad2      	subs	r2, r2, r3
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e014:	6979      	ldr	r1, [r7, #20]
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7ff fbf2 	bl	800d800 <clust2sect>
 800e01c:	4602      	mov	r2, r0
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e034:	441a      	add	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e054:	2100      	movs	r1, #0
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff feb4 	bl	800ddc4 <dir_sdi>
 800e05c:	4603      	mov	r3, r0
 800e05e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e060:	7dfb      	ldrb	r3, [r7, #23]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d12b      	bne.n	800e0be <dir_alloc+0x7a>
		n = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	4619      	mov	r1, r3
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f7ff fb29 	bl	800d6c8 <move_window>
 800e076:	4603      	mov	r3, r0
 800e078:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11d      	bne.n	800e0bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a1b      	ldr	r3, [r3, #32]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2be5      	cmp	r3, #229	; 0xe5
 800e088:	d004      	beq.n	800e094 <dir_alloc+0x50>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d107      	bne.n	800e0a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	3301      	adds	r3, #1
 800e098:	613b      	str	r3, [r7, #16]
 800e09a:	693a      	ldr	r2, [r7, #16]
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d102      	bne.n	800e0a8 <dir_alloc+0x64>
 800e0a2:	e00c      	b.n	800e0be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff ff05 	bl	800deba <dir_next>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0d7      	beq.n	800e06a <dir_alloc+0x26>
 800e0ba:	e000      	b.n	800e0be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e0bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
 800e0c0:	2b04      	cmp	r3, #4
 800e0c2:	d101      	bne.n	800e0c8 <dir_alloc+0x84>
 800e0c4:	2307      	movs	r3, #7
 800e0c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3718      	adds	r7, #24
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	331a      	adds	r3, #26
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff f841 	bl	800d168 <ld_word>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d109      	bne.n	800e106 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	3314      	adds	r3, #20
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7ff f836 	bl	800d168 <ld_word>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	041b      	lsls	r3, r3, #16
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	4313      	orrs	r3, r2
 800e104:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e106:	68fb      	ldr	r3, [r7, #12]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3710      	adds	r7, #16
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	331a      	adds	r3, #26
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	b292      	uxth	r2, r2
 800e124:	4611      	mov	r1, r2
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff f859 	bl	800d1de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b03      	cmp	r3, #3
 800e132:	d109      	bne.n	800e148 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	f103 0214 	add.w	r2, r3, #20
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	0c1b      	lsrs	r3, r3, #16
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4619      	mov	r1, r3
 800e142:	4610      	mov	r0, r2
 800e144:	f7ff f84b 	bl	800d1de <st_word>
	}
}
 800e148:	bf00      	nop
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e15e:	2100      	movs	r1, #0
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff fe2f 	bl	800ddc4 <dir_sdi>
 800e166:	4603      	mov	r3, r0
 800e168:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <dir_find+0x24>
 800e170:	7dfb      	ldrb	r3, [r7, #23]
 800e172:	e03e      	b.n	800e1f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	69db      	ldr	r3, [r3, #28]
 800e178:	4619      	mov	r1, r3
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f7ff faa4 	bl	800d6c8 <move_window>
 800e180:	4603      	mov	r3, r0
 800e182:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d12f      	bne.n	800e1ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a1b      	ldr	r3, [r3, #32]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <dir_find+0x4e>
 800e198:	2304      	movs	r3, #4
 800e19a:	75fb      	strb	r3, [r7, #23]
 800e19c:	e028      	b.n	800e1f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a1b      	ldr	r3, [r3, #32]
 800e1a2:	330b      	adds	r3, #11
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a1b      	ldr	r3, [r3, #32]
 800e1b4:	330b      	adds	r3, #11
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	f003 0308 	and.w	r3, r3, #8
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10a      	bne.n	800e1d6 <dir_find+0x86>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a18      	ldr	r0, [r3, #32]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3324      	adds	r3, #36	; 0x24
 800e1c8:	220b      	movs	r2, #11
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	f7ff f88a 	bl	800d2e4 <mem_cmp>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00b      	beq.n	800e1ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff fe6e 	bl	800deba <dir_next>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0c5      	beq.n	800e174 <dir_find+0x24>
 800e1e8:	e002      	b.n	800e1f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e1ea:	bf00      	nop
 800e1ec:	e000      	b.n	800e1f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e1ee:	bf00      	nop

	return res;
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3718      	adds	r7, #24
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b084      	sub	sp, #16
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e208:	2101      	movs	r1, #1
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff ff1a 	bl	800e044 <dir_alloc>
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d11c      	bne.n	800e254 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	69db      	ldr	r3, [r3, #28]
 800e21e:	4619      	mov	r1, r3
 800e220:	68b8      	ldr	r0, [r7, #8]
 800e222:	f7ff fa51 	bl	800d6c8 <move_window>
 800e226:	4603      	mov	r3, r0
 800e228:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e22a:	7bfb      	ldrb	r3, [r7, #15]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d111      	bne.n	800e254 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	2220      	movs	r2, #32
 800e236:	2100      	movs	r1, #0
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff f838 	bl	800d2ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a18      	ldr	r0, [r3, #32]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3324      	adds	r3, #36	; 0x24
 800e246:	220b      	movs	r2, #11
 800e248:	4619      	mov	r1, r3
 800e24a:	f7ff f80f 	bl	800d26c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2201      	movs	r2, #1
 800e252:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e254:	7bfb      	ldrb	r3, [r7, #15]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3324      	adds	r3, #36	; 0x24
 800e274:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e276:	220b      	movs	r2, #11
 800e278:	2120      	movs	r1, #32
 800e27a:	68b8      	ldr	r0, [r7, #8]
 800e27c:	f7ff f817 	bl	800d2ae <mem_set>
	si = i = 0; ni = 8;
 800e280:	2300      	movs	r3, #0
 800e282:	613b      	str	r3, [r7, #16]
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	61fb      	str	r3, [r7, #28]
 800e288:	2308      	movs	r3, #8
 800e28a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	61fa      	str	r2, [r7, #28]
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	4413      	add	r3, r2
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e29a:	7efb      	ldrb	r3, [r7, #27]
 800e29c:	2b20      	cmp	r3, #32
 800e29e:	d94e      	bls.n	800e33e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e2a0:	7efb      	ldrb	r3, [r7, #27]
 800e2a2:	2b2f      	cmp	r3, #47	; 0x2f
 800e2a4:	d006      	beq.n	800e2b4 <create_name+0x54>
 800e2a6:	7efb      	ldrb	r3, [r7, #27]
 800e2a8:	2b5c      	cmp	r3, #92	; 0x5c
 800e2aa:	d110      	bne.n	800e2ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e2ac:	e002      	b.n	800e2b4 <create_name+0x54>
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	61fb      	str	r3, [r7, #28]
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2be:	d0f6      	beq.n	800e2ae <create_name+0x4e>
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ca:	d0f0      	beq.n	800e2ae <create_name+0x4e>
			break;
 800e2cc:	e038      	b.n	800e340 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e2ce:	7efb      	ldrb	r3, [r7, #27]
 800e2d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e2d2:	d003      	beq.n	800e2dc <create_name+0x7c>
 800e2d4:	693a      	ldr	r2, [r7, #16]
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d30c      	bcc.n	800e2f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	2b0b      	cmp	r3, #11
 800e2e0:	d002      	beq.n	800e2e8 <create_name+0x88>
 800e2e2:	7efb      	ldrb	r3, [r7, #27]
 800e2e4:	2b2e      	cmp	r3, #46	; 0x2e
 800e2e6:	d001      	beq.n	800e2ec <create_name+0x8c>
 800e2e8:	2306      	movs	r3, #6
 800e2ea:	e044      	b.n	800e376 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e2ec:	2308      	movs	r3, #8
 800e2ee:	613b      	str	r3, [r7, #16]
 800e2f0:	230b      	movs	r3, #11
 800e2f2:	617b      	str	r3, [r7, #20]
			continue;
 800e2f4:	e022      	b.n	800e33c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e2f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	da04      	bge.n	800e308 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e2fe:	7efb      	ldrb	r3, [r7, #27]
 800e300:	3b80      	subs	r3, #128	; 0x80
 800e302:	4a1f      	ldr	r2, [pc, #124]	; (800e380 <create_name+0x120>)
 800e304:	5cd3      	ldrb	r3, [r2, r3]
 800e306:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e308:	7efb      	ldrb	r3, [r7, #27]
 800e30a:	4619      	mov	r1, r3
 800e30c:	481d      	ldr	r0, [pc, #116]	; (800e384 <create_name+0x124>)
 800e30e:	f7ff f810 	bl	800d332 <chk_chr>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d001      	beq.n	800e31c <create_name+0xbc>
 800e318:	2306      	movs	r3, #6
 800e31a:	e02c      	b.n	800e376 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e31c:	7efb      	ldrb	r3, [r7, #27]
 800e31e:	2b60      	cmp	r3, #96	; 0x60
 800e320:	d905      	bls.n	800e32e <create_name+0xce>
 800e322:	7efb      	ldrb	r3, [r7, #27]
 800e324:	2b7a      	cmp	r3, #122	; 0x7a
 800e326:	d802      	bhi.n	800e32e <create_name+0xce>
 800e328:	7efb      	ldrb	r3, [r7, #27]
 800e32a:	3b20      	subs	r3, #32
 800e32c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	613a      	str	r2, [r7, #16]
 800e334:	68ba      	ldr	r2, [r7, #8]
 800e336:	4413      	add	r3, r2
 800e338:	7efa      	ldrb	r2, [r7, #27]
 800e33a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e33c:	e7a6      	b.n	800e28c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e33e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	441a      	add	r2, r3
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d101      	bne.n	800e354 <create_name+0xf4>
 800e350:	2306      	movs	r3, #6
 800e352:	e010      	b.n	800e376 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2be5      	cmp	r3, #229	; 0xe5
 800e35a:	d102      	bne.n	800e362 <create_name+0x102>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2205      	movs	r2, #5
 800e360:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e362:	7efb      	ldrb	r3, [r7, #27]
 800e364:	2b20      	cmp	r3, #32
 800e366:	d801      	bhi.n	800e36c <create_name+0x10c>
 800e368:	2204      	movs	r2, #4
 800e36a:	e000      	b.n	800e36e <create_name+0x10e>
 800e36c:	2200      	movs	r2, #0
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	330b      	adds	r3, #11
 800e372:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e374:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e376:	4618      	mov	r0, r3
 800e378:	3720      	adds	r7, #32
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	08015784 	.word	0x08015784
 800e384:	080156a4 	.word	0x080156a4

0800e388 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e39c:	e002      	b.n	800e3a4 <follow_path+0x1c>
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b2f      	cmp	r3, #47	; 0x2f
 800e3aa:	d0f8      	beq.n	800e39e <follow_path+0x16>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	2b5c      	cmp	r3, #92	; 0x5c
 800e3b2:	d0f4      	beq.n	800e39e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b1f      	cmp	r3, #31
 800e3c0:	d80a      	bhi.n	800e3d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2280      	movs	r2, #128	; 0x80
 800e3c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff fcf9 	bl	800ddc4 <dir_sdi>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	75fb      	strb	r3, [r7, #23]
 800e3d6:	e043      	b.n	800e460 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3d8:	463b      	mov	r3, r7
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ff3f 	bl	800e260 <create_name>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3e6:	7dfb      	ldrb	r3, [r7, #23]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d134      	bne.n	800e456 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff feaf 	bl	800e150 <dir_find>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e3fe:	7dfb      	ldrb	r3, [r7, #23]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00a      	beq.n	800e41a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	2b04      	cmp	r3, #4
 800e408:	d127      	bne.n	800e45a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e40a:	7afb      	ldrb	r3, [r7, #11]
 800e40c:	f003 0304 	and.w	r3, r3, #4
 800e410:	2b00      	cmp	r3, #0
 800e412:	d122      	bne.n	800e45a <follow_path+0xd2>
 800e414:	2305      	movs	r3, #5
 800e416:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e418:	e01f      	b.n	800e45a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e41a:	7afb      	ldrb	r3, [r7, #11]
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d11c      	bne.n	800e45e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	799b      	ldrb	r3, [r3, #6]
 800e428:	f003 0310 	and.w	r3, r3, #16
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d102      	bne.n	800e436 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e430:	2305      	movs	r3, #5
 800e432:	75fb      	strb	r3, [r7, #23]
 800e434:	e014      	b.n	800e460 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e444:	4413      	add	r3, r2
 800e446:	4619      	mov	r1, r3
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f7ff fe42 	bl	800e0d2 <ld_clust>
 800e44e:	4602      	mov	r2, r0
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e454:	e7c0      	b.n	800e3d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e456:	bf00      	nop
 800e458:	e002      	b.n	800e460 <follow_path+0xd8>
				break;
 800e45a:	bf00      	nop
 800e45c:	e000      	b.n	800e460 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e45e:	bf00      	nop
			}
		}
	}

	return res;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b087      	sub	sp, #28
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e472:	f04f 33ff 	mov.w	r3, #4294967295
 800e476:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d031      	beq.n	800e4e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	617b      	str	r3, [r7, #20]
 800e486:	e002      	b.n	800e48e <get_ldnumber+0x24>
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	3301      	adds	r3, #1
 800e48c:	617b      	str	r3, [r7, #20]
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	2b20      	cmp	r3, #32
 800e494:	d903      	bls.n	800e49e <get_ldnumber+0x34>
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2b3a      	cmp	r3, #58	; 0x3a
 800e49c:	d1f4      	bne.n	800e488 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	2b3a      	cmp	r3, #58	; 0x3a
 800e4a4:	d11c      	bne.n	800e4e0 <get_ldnumber+0x76>
			tp = *path;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	60fa      	str	r2, [r7, #12]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	3b30      	subs	r3, #48	; 0x30
 800e4b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2b09      	cmp	r3, #9
 800e4bc:	d80e      	bhi.n	800e4dc <get_ldnumber+0x72>
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d10a      	bne.n	800e4dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d107      	bne.n	800e4dc <get_ldnumber+0x72>
					vol = (int)i;
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	617b      	str	r3, [r7, #20]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	697a      	ldr	r2, [r7, #20]
 800e4da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	e002      	b.n	800e4e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e4e4:	693b      	ldr	r3, [r7, #16]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
	...

0800e4f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	70da      	strb	r2, [r3, #3]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f04f 32ff 	mov.w	r2, #4294967295
 800e50a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff f8da 	bl	800d6c8 <move_window>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <check_fs+0x2a>
 800e51a:	2304      	movs	r3, #4
 800e51c:	e038      	b.n	800e590 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	3330      	adds	r3, #48	; 0x30
 800e522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e526:	4618      	mov	r0, r3
 800e528:	f7fe fe1e 	bl	800d168 <ld_word>
 800e52c:	4603      	mov	r3, r0
 800e52e:	461a      	mov	r2, r3
 800e530:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e534:	429a      	cmp	r2, r3
 800e536:	d001      	beq.n	800e53c <check_fs+0x48>
 800e538:	2303      	movs	r3, #3
 800e53a:	e029      	b.n	800e590 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e542:	2be9      	cmp	r3, #233	; 0xe9
 800e544:	d009      	beq.n	800e55a <check_fs+0x66>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e54c:	2beb      	cmp	r3, #235	; 0xeb
 800e54e:	d11e      	bne.n	800e58e <check_fs+0x9a>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e556:	2b90      	cmp	r3, #144	; 0x90
 800e558:	d119      	bne.n	800e58e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	3330      	adds	r3, #48	; 0x30
 800e55e:	3336      	adds	r3, #54	; 0x36
 800e560:	4618      	mov	r0, r3
 800e562:	f7fe fe19 	bl	800d198 <ld_dword>
 800e566:	4603      	mov	r3, r0
 800e568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e56c:	4a0a      	ldr	r2, [pc, #40]	; (800e598 <check_fs+0xa4>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d101      	bne.n	800e576 <check_fs+0x82>
 800e572:	2300      	movs	r3, #0
 800e574:	e00c      	b.n	800e590 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3330      	adds	r3, #48	; 0x30
 800e57a:	3352      	adds	r3, #82	; 0x52
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fe fe0b 	bl	800d198 <ld_dword>
 800e582:	4603      	mov	r3, r0
 800e584:	4a05      	ldr	r2, [pc, #20]	; (800e59c <check_fs+0xa8>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d101      	bne.n	800e58e <check_fs+0x9a>
 800e58a:	2300      	movs	r3, #0
 800e58c:	e000      	b.n	800e590 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e58e:	2302      	movs	r3, #2
}
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	00544146 	.word	0x00544146
 800e59c:	33544146 	.word	0x33544146

0800e5a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b096      	sub	sp, #88	; 0x58
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7ff ff58 	bl	800e46a <get_ldnumber>
 800e5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	da01      	bge.n	800e5c6 <find_volume+0x26>
 800e5c2:	230b      	movs	r3, #11
 800e5c4:	e22d      	b.n	800ea22 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e5c6:	4aa1      	ldr	r2, [pc, #644]	; (800e84c <find_volume+0x2ac>)
 800e5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <find_volume+0x3a>
 800e5d6:	230c      	movs	r3, #12
 800e5d8:	e223      	b.n	800ea22 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e5e0:	79fb      	ldrb	r3, [r7, #7]
 800e5e2:	f023 0301 	bic.w	r3, r3, #1
 800e5e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d01a      	beq.n	800e626 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fe fd19 	bl	800d02c <disk_status>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e604:	f003 0301 	and.w	r3, r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10c      	bne.n	800e626 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d007      	beq.n	800e622 <find_volume+0x82>
 800e612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e616:	f003 0304 	and.w	r3, r3, #4
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e61e:	230a      	movs	r3, #10
 800e620:	e1ff      	b.n	800ea22 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e622:	2300      	movs	r3, #0
 800e624:	e1fd      	b.n	800ea22 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e628:	2200      	movs	r2, #0
 800e62a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62e:	b2da      	uxtb	r2, r3
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	785b      	ldrb	r3, [r3, #1]
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fe fd11 	bl	800d060 <disk_initialize>
 800e63e:	4603      	mov	r3, r0
 800e640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e648:	f003 0301 	and.w	r3, r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e650:	2303      	movs	r3, #3
 800e652:	e1e6      	b.n	800ea22 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e654:	79fb      	ldrb	r3, [r7, #7]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d007      	beq.n	800e66a <find_volume+0xca>
 800e65a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e65e:	f003 0304 	and.w	r3, r3, #4
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e666:	230a      	movs	r3, #10
 800e668:	e1db      	b.n	800ea22 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e66e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e672:	f7ff ff3f 	bl	800e4f4 <check_fs>
 800e676:	4603      	mov	r3, r0
 800e678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e67c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e680:	2b02      	cmp	r3, #2
 800e682:	d149      	bne.n	800e718 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e684:	2300      	movs	r3, #0
 800e686:	643b      	str	r3, [r7, #64]	; 0x40
 800e688:	e01e      	b.n	800e6c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e692:	011b      	lsls	r3, r3, #4
 800e694:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e698:	4413      	add	r3, r2
 800e69a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	3304      	adds	r3, #4
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d006      	beq.n	800e6b4 <find_volume+0x114>
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe fd74 	bl	800d198 <ld_dword>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	e000      	b.n	800e6b6 <find_volume+0x116>
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	3358      	adds	r3, #88	; 0x58
 800e6bc:	443b      	add	r3, r7
 800e6be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d9dd      	bls.n	800e68a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <find_volume+0x13e>
 800e6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e6de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	3358      	adds	r3, #88	; 0x58
 800e6e4:	443b      	add	r3, r7
 800e6e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e6ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e6ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d005      	beq.n	800e6fe <find_volume+0x15e>
 800e6f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6f6:	f7ff fefd 	bl	800e4f4 <check_fs>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	e000      	b.n	800e700 <find_volume+0x160>
 800e6fe:	2303      	movs	r3, #3
 800e700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d905      	bls.n	800e718 <find_volume+0x178>
 800e70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e70e:	3301      	adds	r3, #1
 800e710:	643b      	str	r3, [r7, #64]	; 0x40
 800e712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e714:	2b03      	cmp	r3, #3
 800e716:	d9e2      	bls.n	800e6de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e71c:	2b04      	cmp	r3, #4
 800e71e:	d101      	bne.n	800e724 <find_volume+0x184>
 800e720:	2301      	movs	r3, #1
 800e722:	e17e      	b.n	800ea22 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d901      	bls.n	800e730 <find_volume+0x190>
 800e72c:	230d      	movs	r3, #13
 800e72e:	e178      	b.n	800ea22 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	3330      	adds	r3, #48	; 0x30
 800e734:	330b      	adds	r3, #11
 800e736:	4618      	mov	r0, r3
 800e738:	f7fe fd16 	bl	800d168 <ld_word>
 800e73c:	4603      	mov	r3, r0
 800e73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e742:	d001      	beq.n	800e748 <find_volume+0x1a8>
 800e744:	230d      	movs	r3, #13
 800e746:	e16c      	b.n	800ea22 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74a:	3330      	adds	r3, #48	; 0x30
 800e74c:	3316      	adds	r3, #22
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fe fd0a 	bl	800d168 <ld_word>
 800e754:	4603      	mov	r3, r0
 800e756:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <find_volume+0x1cc>
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	3330      	adds	r3, #48	; 0x30
 800e762:	3324      	adds	r3, #36	; 0x24
 800e764:	4618      	mov	r0, r3
 800e766:	f7fe fd17 	bl	800d198 <ld_dword>
 800e76a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e770:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77e:	789b      	ldrb	r3, [r3, #2]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d005      	beq.n	800e790 <find_volume+0x1f0>
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	789b      	ldrb	r3, [r3, #2]
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d001      	beq.n	800e790 <find_volume+0x1f0>
 800e78c:	230d      	movs	r3, #13
 800e78e:	e148      	b.n	800ea22 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e792:	789b      	ldrb	r3, [r3, #2]
 800e794:	461a      	mov	r2, r3
 800e796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e798:	fb02 f303 	mul.w	r3, r2, r3
 800e79c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	895b      	ldrh	r3, [r3, #10]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d008      	beq.n	800e7c4 <find_volume+0x224>
 800e7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b4:	895b      	ldrh	r3, [r3, #10]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	895b      	ldrh	r3, [r3, #10]
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	4013      	ands	r3, r2
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d001      	beq.n	800e7c8 <find_volume+0x228>
 800e7c4:	230d      	movs	r3, #13
 800e7c6:	e12c      	b.n	800ea22 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ca:	3330      	adds	r3, #48	; 0x30
 800e7cc:	3311      	adds	r3, #17
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fe fcca 	bl	800d168 <ld_word>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7de:	891b      	ldrh	r3, [r3, #8]
 800e7e0:	f003 030f 	and.w	r3, r3, #15
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <find_volume+0x24e>
 800e7ea:	230d      	movs	r3, #13
 800e7ec:	e119      	b.n	800ea22 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	3330      	adds	r3, #48	; 0x30
 800e7f2:	3313      	adds	r3, #19
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fe fcb7 	bl	800d168 <ld_word>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e800:	2b00      	cmp	r3, #0
 800e802:	d106      	bne.n	800e812 <find_volume+0x272>
 800e804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e806:	3330      	adds	r3, #48	; 0x30
 800e808:	3320      	adds	r3, #32
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fe fcc4 	bl	800d198 <ld_dword>
 800e810:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	3330      	adds	r3, #48	; 0x30
 800e816:	330e      	adds	r3, #14
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fe fca5 	bl	800d168 <ld_word>
 800e81e:	4603      	mov	r3, r0
 800e820:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <find_volume+0x28c>
 800e828:	230d      	movs	r3, #13
 800e82a:	e0fa      	b.n	800ea22 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e82c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e830:	4413      	add	r3, r2
 800e832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e834:	8912      	ldrh	r2, [r2, #8]
 800e836:	0912      	lsrs	r2, r2, #4
 800e838:	b292      	uxth	r2, r2
 800e83a:	4413      	add	r3, r2
 800e83c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e83e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e842:	429a      	cmp	r2, r3
 800e844:	d204      	bcs.n	800e850 <find_volume+0x2b0>
 800e846:	230d      	movs	r3, #13
 800e848:	e0eb      	b.n	800ea22 <find_volume+0x482>
 800e84a:	bf00      	nop
 800e84c:	2000a774 	.word	0x2000a774
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e858:	8952      	ldrh	r2, [r2, #10]
 800e85a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	2b00      	cmp	r3, #0
 800e864:	d101      	bne.n	800e86a <find_volume+0x2ca>
 800e866:	230d      	movs	r3, #13
 800e868:	e0db      	b.n	800ea22 <find_volume+0x482>
		fmt = FS_FAT32;
 800e86a:	2303      	movs	r3, #3
 800e86c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e876:	4293      	cmp	r3, r2
 800e878:	d802      	bhi.n	800e880 <find_volume+0x2e0>
 800e87a:	2302      	movs	r3, #2
 800e87c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e886:	4293      	cmp	r3, r2
 800e888:	d802      	bhi.n	800e890 <find_volume+0x2f0>
 800e88a:	2301      	movs	r3, #1
 800e88c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	1c9a      	adds	r2, r3, #2
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e89c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e89e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a2:	441a      	add	r2, r3
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e8a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ac:	441a      	add	r2, r3
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e8b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d11e      	bne.n	800e8f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8bc:	3330      	adds	r3, #48	; 0x30
 800e8be:	332a      	adds	r3, #42	; 0x2a
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fc51 	bl	800d168 <ld_word>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <find_volume+0x330>
 800e8cc:	230d      	movs	r3, #13
 800e8ce:	e0a8      	b.n	800ea22 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d2:	891b      	ldrh	r3, [r3, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <find_volume+0x33c>
 800e8d8:	230d      	movs	r3, #13
 800e8da:	e0a2      	b.n	800ea22 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	3330      	adds	r3, #48	; 0x30
 800e8e0:	332c      	adds	r3, #44	; 0x2c
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fe fc58 	bl	800d198 <ld_dword>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e8f6:	e01f      	b.n	800e938 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	891b      	ldrh	r3, [r3, #8]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <find_volume+0x364>
 800e900:	230d      	movs	r3, #13
 800e902:	e08e      	b.n	800ea22 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e906:	6a1a      	ldr	r2, [r3, #32]
 800e908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e90a:	441a      	add	r2, r3
 800e90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e914:	2b02      	cmp	r3, #2
 800e916:	d103      	bne.n	800e920 <find_volume+0x380>
 800e918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91a:	695b      	ldr	r3, [r3, #20]
 800e91c:	005b      	lsls	r3, r3, #1
 800e91e:	e00a      	b.n	800e936 <find_volume+0x396>
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	695a      	ldr	r2, [r3, #20]
 800e924:	4613      	mov	r3, r2
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	4413      	add	r3, r2
 800e92a:	085a      	lsrs	r2, r3, #1
 800e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92e:	695b      	ldr	r3, [r3, #20]
 800e930:	f003 0301 	and.w	r3, r3, #1
 800e934:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e936:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	699a      	ldr	r2, [r3, #24]
 800e93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e93e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e942:	0a5b      	lsrs	r3, r3, #9
 800e944:	429a      	cmp	r2, r3
 800e946:	d201      	bcs.n	800e94c <find_volume+0x3ac>
 800e948:	230d      	movs	r3, #13
 800e94a:	e06a      	b.n	800ea22 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	f04f 32ff 	mov.w	r2, #4294967295
 800e952:	611a      	str	r2, [r3, #16]
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	691a      	ldr	r2, [r3, #16]
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	2280      	movs	r2, #128	; 0x80
 800e960:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e962:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e966:	2b03      	cmp	r3, #3
 800e968:	d149      	bne.n	800e9fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96c:	3330      	adds	r3, #48	; 0x30
 800e96e:	3330      	adds	r3, #48	; 0x30
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe fbf9 	bl	800d168 <ld_word>
 800e976:	4603      	mov	r3, r0
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d140      	bne.n	800e9fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e97e:	3301      	adds	r3, #1
 800e980:	4619      	mov	r1, r3
 800e982:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e984:	f7fe fea0 	bl	800d6c8 <move_window>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d137      	bne.n	800e9fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	2200      	movs	r2, #0
 800e992:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	3330      	adds	r3, #48	; 0x30
 800e998:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fe fbe3 	bl	800d168 <ld_word>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d127      	bne.n	800e9fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b0:	3330      	adds	r3, #48	; 0x30
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fe fbf0 	bl	800d198 <ld_dword>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	4a1c      	ldr	r2, [pc, #112]	; (800ea2c <find_volume+0x48c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d11e      	bne.n	800e9fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c2:	3330      	adds	r3, #48	; 0x30
 800e9c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fe fbe5 	bl	800d198 <ld_dword>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	4a17      	ldr	r2, [pc, #92]	; (800ea30 <find_volume+0x490>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d113      	bne.n	800e9fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	3330      	adds	r3, #48	; 0x30
 800e9da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fbda 	bl	800d198 <ld_dword>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ec:	3330      	adds	r3, #48	; 0x30
 800e9ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fe fbd0 	bl	800d198 <ld_dword>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ea04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ea06:	4b0b      	ldr	r3, [pc, #44]	; (800ea34 <find_volume+0x494>)
 800ea08:	881b      	ldrh	r3, [r3, #0]
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <find_volume+0x494>)
 800ea10:	801a      	strh	r2, [r3, #0]
 800ea12:	4b08      	ldr	r3, [pc, #32]	; (800ea34 <find_volume+0x494>)
 800ea14:	881a      	ldrh	r2, [r3, #0]
 800ea16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea18:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ea1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea1c:	f7fe fdec 	bl	800d5f8 <clear_lock>
#endif
	return FR_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3758      	adds	r7, #88	; 0x58
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	41615252 	.word	0x41615252
 800ea30:	61417272 	.word	0x61417272
 800ea34:	2000a778 	.word	0x2000a778

0800ea38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ea42:	2309      	movs	r3, #9
 800ea44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d01c      	beq.n	800ea86 <validate+0x4e>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d018      	beq.n	800ea86 <validate+0x4e>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d013      	beq.n	800ea86 <validate+0x4e>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	889a      	ldrh	r2, [r3, #4]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	88db      	ldrh	r3, [r3, #6]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d10c      	bne.n	800ea86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	785b      	ldrb	r3, [r3, #1]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fada 	bl	800d02c <disk_status>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d101      	bne.n	800ea86 <validate+0x4e>
			res = FR_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d102      	bne.n	800ea92 <validate+0x5a>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	e000      	b.n	800ea94 <validate+0x5c>
 800ea92:	2300      	movs	r3, #0
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	6013      	str	r3, [r2, #0]
	return res;
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
	...

0800eaa4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b088      	sub	sp, #32
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	4613      	mov	r3, r2
 800eab0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800eab6:	f107 0310 	add.w	r3, r7, #16
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff fcd5 	bl	800e46a <get_ldnumber>
 800eac0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	da01      	bge.n	800eacc <f_mount+0x28>
 800eac8:	230b      	movs	r3, #11
 800eaca:	e02b      	b.n	800eb24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eacc:	4a17      	ldr	r2, [pc, #92]	; (800eb2c <f_mount+0x88>)
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ead4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d005      	beq.n	800eae8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eadc:	69b8      	ldr	r0, [r7, #24]
 800eade:	f7fe fd8b 	bl	800d5f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	2200      	movs	r2, #0
 800eae6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	490d      	ldr	r1, [pc, #52]	; (800eb2c <f_mount+0x88>)
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <f_mount+0x66>
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d001      	beq.n	800eb0e <f_mount+0x6a>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e00a      	b.n	800eb24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eb0e:	f107 010c 	add.w	r1, r7, #12
 800eb12:	f107 0308 	add.w	r3, r7, #8
 800eb16:	2200      	movs	r2, #0
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff fd41 	bl	800e5a0 <find_volume>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3720      	adds	r7, #32
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	2000a774 	.word	0x2000a774

0800eb30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b098      	sub	sp, #96	; 0x60
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <f_open+0x18>
 800eb44:	2309      	movs	r3, #9
 800eb46:	e1ad      	b.n	800eea4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eb48:	79fb      	ldrb	r3, [r7, #7]
 800eb4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb4e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eb50:	79fa      	ldrb	r2, [r7, #7]
 800eb52:	f107 0110 	add.w	r1, r7, #16
 800eb56:	f107 0308 	add.w	r3, r7, #8
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7ff fd20 	bl	800e5a0 <find_volume>
 800eb60:	4603      	mov	r3, r0
 800eb62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800eb66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f040 8191 	bne.w	800ee92 <f_open+0x362>
		dj.obj.fs = fs;
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eb74:	68ba      	ldr	r2, [r7, #8]
 800eb76:	f107 0314 	add.w	r3, r7, #20
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7ff fc03 	bl	800e388 <follow_path>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eb88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d11a      	bne.n	800ebc6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eb90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb94:	b25b      	sxtb	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	da03      	bge.n	800eba2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eb9a:	2306      	movs	r3, #6
 800eb9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eba0:	e011      	b.n	800ebc6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eba2:	79fb      	ldrb	r3, [r7, #7]
 800eba4:	f023 0301 	bic.w	r3, r3, #1
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	bf14      	ite	ne
 800ebac:	2301      	movne	r3, #1
 800ebae:	2300      	moveq	r3, #0
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f107 0314 	add.w	r3, r7, #20
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe fbd4 	bl	800d368 <chk_lock>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ebc6:	79fb      	ldrb	r3, [r7, #7]
 800ebc8:	f003 031c 	and.w	r3, r3, #28
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d07f      	beq.n	800ecd0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ebd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d017      	beq.n	800ec08 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ebd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebdc:	2b04      	cmp	r3, #4
 800ebde:	d10e      	bne.n	800ebfe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ebe0:	f7fe fc1e 	bl	800d420 <enq_lock>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d006      	beq.n	800ebf8 <f_open+0xc8>
 800ebea:	f107 0314 	add.w	r3, r7, #20
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff fb03 	bl	800e1fa <dir_register>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	e000      	b.n	800ebfa <f_open+0xca>
 800ebf8:	2312      	movs	r3, #18
 800ebfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ebfe:	79fb      	ldrb	r3, [r7, #7]
 800ec00:	f043 0308 	orr.w	r3, r3, #8
 800ec04:	71fb      	strb	r3, [r7, #7]
 800ec06:	e010      	b.n	800ec2a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ec08:	7ebb      	ldrb	r3, [r7, #26]
 800ec0a:	f003 0311 	and.w	r3, r3, #17
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <f_open+0xea>
					res = FR_DENIED;
 800ec12:	2307      	movs	r3, #7
 800ec14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec18:	e007      	b.n	800ec2a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <f_open+0xfa>
 800ec24:	2308      	movs	r3, #8
 800ec26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ec2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d168      	bne.n	800ed04 <f_open+0x1d4>
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	f003 0308 	and.w	r3, r3, #8
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d063      	beq.n	800ed04 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ec3c:	f7fb ffc4 	bl	800abc8 <get_fattime>
 800ec40:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ec42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec44:	330e      	adds	r3, #14
 800ec46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe fae3 	bl	800d214 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ec4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec50:	3316      	adds	r3, #22
 800ec52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fe fadd 	bl	800d214 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ec5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5c:	330b      	adds	r3, #11
 800ec5e:	2220      	movs	r2, #32
 800ec60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff fa32 	bl	800e0d2 <ld_clust>
 800ec6e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec74:	2200      	movs	r2, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff fa4a 	bl	800e110 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7e:	331c      	adds	r3, #28
 800ec80:	2100      	movs	r1, #0
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fe fac6 	bl	800d214 <st_dword>
					fs->wflag = 1;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ec8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d037      	beq.n	800ed04 <f_open+0x1d4>
						dw = fs->winsect;
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec98:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ec9a:	f107 0314 	add.w	r3, r7, #20
 800ec9e:	2200      	movs	r2, #0
 800eca0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe ff5d 	bl	800db62 <remove_chain>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ecae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d126      	bne.n	800ed04 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe fd04 	bl	800d6c8 <move_window>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecca:	3a01      	subs	r2, #1
 800eccc:	60da      	str	r2, [r3, #12]
 800ecce:	e019      	b.n	800ed04 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ecd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d115      	bne.n	800ed04 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ecd8:	7ebb      	ldrb	r3, [r7, #26]
 800ecda:	f003 0310 	and.w	r3, r3, #16
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d003      	beq.n	800ecea <f_open+0x1ba>
					res = FR_NO_FILE;
 800ece2:	2304      	movs	r3, #4
 800ece4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ece8:	e00c      	b.n	800ed04 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ecea:	79fb      	ldrb	r3, [r7, #7]
 800ecec:	f003 0302 	and.w	r3, r3, #2
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d007      	beq.n	800ed04 <f_open+0x1d4>
 800ecf4:	7ebb      	ldrb	r3, [r7, #26]
 800ecf6:	f003 0301 	and.w	r3, r3, #1
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <f_open+0x1d4>
						res = FR_DENIED;
 800ecfe:	2307      	movs	r3, #7
 800ed00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ed04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d128      	bne.n	800ed5e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ed0c:	79fb      	ldrb	r3, [r7, #7]
 800ed0e:	f003 0308 	and.w	r3, r3, #8
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d003      	beq.n	800ed1e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed1c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ed26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	f023 0301 	bic.w	r3, r3, #1
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bf14      	ite	ne
 800ed36:	2301      	movne	r3, #1
 800ed38:	2300      	moveq	r3, #0
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	f107 0314 	add.w	r3, r7, #20
 800ed42:	4611      	mov	r1, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fe fb8d 	bl	800d464 <inc_lock>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d102      	bne.n	800ed5e <f_open+0x22e>
 800ed58:	2302      	movs	r3, #2
 800ed5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ed5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f040 8095 	bne.w	800ee92 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff f9af 	bl	800e0d2 <ld_clust>
 800ed74:	4602      	mov	r2, r0
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ed7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed7c:	331c      	adds	r3, #28
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fe fa0a 	bl	800d198 <ld_dword>
 800ed84:	4602      	mov	r2, r0
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ed90:	693a      	ldr	r2, [r7, #16]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	88da      	ldrh	r2, [r3, #6]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	79fa      	ldrb	r2, [r7, #7]
 800eda2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2200      	movs	r2, #0
 800eda8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3330      	adds	r3, #48	; 0x30
 800edba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edbe:	2100      	movs	r1, #0
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fe fa74 	bl	800d2ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800edc6:	79fb      	ldrb	r3, [r7, #7]
 800edc8:	f003 0320 	and.w	r3, r3, #32
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d060      	beq.n	800ee92 <f_open+0x362>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d05c      	beq.n	800ee92 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	68da      	ldr	r2, [r3, #12]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	895b      	ldrh	r3, [r3, #10]
 800ede4:	025b      	lsls	r3, r3, #9
 800ede6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	657b      	str	r3, [r7, #84]	; 0x54
 800edf4:	e016      	b.n	800ee24 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fe fd1f 	bl	800d83e <get_fat>
 800ee00:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ee02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d802      	bhi.n	800ee0e <f_open+0x2de>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d102      	bne.n	800ee1c <f_open+0x2ec>
 800ee16:	2301      	movs	r3, #1
 800ee18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	657b      	str	r3, [r7, #84]	; 0x54
 800ee24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d103      	bne.n	800ee34 <f_open+0x304>
 800ee2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d8e0      	bhi.n	800edf6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d127      	bne.n	800ee92 <f_open+0x362>
 800ee42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d022      	beq.n	800ee92 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fe fcd5 	bl	800d800 <clust2sect>
 800ee56:	6478      	str	r0, [r7, #68]	; 0x44
 800ee58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d103      	bne.n	800ee66 <f_open+0x336>
						res = FR_INT_ERR;
 800ee5e:	2302      	movs	r3, #2
 800ee60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ee64:	e015      	b.n	800ee92 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ee66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee68:	0a5a      	lsrs	r2, r3, #9
 800ee6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee6c:	441a      	add	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	7858      	ldrb	r0, [r3, #1]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6a1a      	ldr	r2, [r3, #32]
 800ee80:	2301      	movs	r3, #1
 800ee82:	f7fe f913 	bl	800d0ac <disk_read>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <f_open+0x362>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ee92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <f_open+0x370>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3760      	adds	r7, #96	; 0x60
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08c      	sub	sp, #48	; 0x30
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
 800eeb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	2200      	movs	r2, #0
 800eec2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f107 0210 	add.w	r2, r7, #16
 800eeca:	4611      	mov	r1, r2
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff fdb3 	bl	800ea38 <validate>
 800eed2:	4603      	mov	r3, r0
 800eed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d107      	bne.n	800eef0 <f_write+0x44>
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	7d5b      	ldrb	r3, [r3, #21]
 800eee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d002      	beq.n	800eef6 <f_write+0x4a>
 800eef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eef4:	e14b      	b.n	800f18e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	f003 0302 	and.w	r3, r3, #2
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d101      	bne.n	800ef06 <f_write+0x5a>
 800ef02:	2307      	movs	r3, #7
 800ef04:	e143      	b.n	800f18e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	699a      	ldr	r2, [r3, #24]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	441a      	add	r2, r3
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	f080 812d 	bcs.w	800f172 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	699b      	ldr	r3, [r3, #24]
 800ef1c:	43db      	mvns	r3, r3
 800ef1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ef20:	e127      	b.n	800f172 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	699b      	ldr	r3, [r3, #24]
 800ef26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f040 80e3 	bne.w	800f0f6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	699b      	ldr	r3, [r3, #24]
 800ef34:	0a5b      	lsrs	r3, r3, #9
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	8952      	ldrh	r2, [r2, #10]
 800ef3a:	3a01      	subs	r2, #1
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d143      	bne.n	800efce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10c      	bne.n	800ef68 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d11a      	bne.n	800ef90 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe fe64 	bl	800dc2c <create_chain>
 800ef64:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef66:	e013      	b.n	800ef90 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d007      	beq.n	800ef80 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	4619      	mov	r1, r3
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f7fe fef0 	bl	800dd5c <clmt_clust>
 800ef7c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef7e:	e007      	b.n	800ef90 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	69db      	ldr	r3, [r3, #28]
 800ef86:	4619      	mov	r1, r3
 800ef88:	4610      	mov	r0, r2
 800ef8a:	f7fe fe4f 	bl	800dc2c <create_chain>
 800ef8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f000 80f2 	beq.w	800f17c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ef98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d104      	bne.n	800efa8 <f_write+0xfc>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2202      	movs	r2, #2
 800efa2:	755a      	strb	r2, [r3, #21]
 800efa4:	2302      	movs	r3, #2
 800efa6:	e0f2      	b.n	800f18e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efae:	d104      	bne.n	800efba <f_write+0x10e>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2201      	movs	r2, #1
 800efb4:	755a      	strb	r2, [r3, #21]
 800efb6:	2301      	movs	r3, #1
 800efb8:	e0e9      	b.n	800f18e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efbe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <f_write+0x122>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efcc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	7d1b      	ldrb	r3, [r3, #20]
 800efd2:	b25b      	sxtb	r3, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	da18      	bge.n	800f00a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	7858      	ldrb	r0, [r3, #1]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	6a1a      	ldr	r2, [r3, #32]
 800efe6:	2301      	movs	r3, #1
 800efe8:	f7fe f880 	bl	800d0ec <disk_write>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d004      	beq.n	800effc <f_write+0x150>
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2201      	movs	r2, #1
 800eff6:	755a      	strb	r2, [r3, #21]
 800eff8:	2301      	movs	r3, #1
 800effa:	e0c8      	b.n	800f18e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	7d1b      	ldrb	r3, [r3, #20]
 800f000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f004:	b2da      	uxtb	r2, r3
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	4619      	mov	r1, r3
 800f012:	4610      	mov	r0, r2
 800f014:	f7fe fbf4 	bl	800d800 <clust2sect>
 800f018:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d104      	bne.n	800f02a <f_write+0x17e>
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2202      	movs	r2, #2
 800f024:	755a      	strb	r2, [r3, #21]
 800f026:	2302      	movs	r3, #2
 800f028:	e0b1      	b.n	800f18e <f_write+0x2e2>
			sect += csect;
 800f02a:	697a      	ldr	r2, [r7, #20]
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	4413      	add	r3, r2
 800f030:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	0a5b      	lsrs	r3, r3, #9
 800f036:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f038:	6a3b      	ldr	r3, [r7, #32]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d03c      	beq.n	800f0b8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f03e:	69ba      	ldr	r2, [r7, #24]
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	4413      	add	r3, r2
 800f044:	693a      	ldr	r2, [r7, #16]
 800f046:	8952      	ldrh	r2, [r2, #10]
 800f048:	4293      	cmp	r3, r2
 800f04a:	d905      	bls.n	800f058 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	895b      	ldrh	r3, [r3, #10]
 800f050:	461a      	mov	r2, r3
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	7858      	ldrb	r0, [r3, #1]
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	69f9      	ldr	r1, [r7, #28]
 800f062:	f7fe f843 	bl	800d0ec <disk_write>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d004      	beq.n	800f076 <f_write+0x1ca>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2201      	movs	r2, #1
 800f070:	755a      	strb	r2, [r3, #21]
 800f072:	2301      	movs	r3, #1
 800f074:	e08b      	b.n	800f18e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6a1a      	ldr	r2, [r3, #32]
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	6a3a      	ldr	r2, [r7, #32]
 800f080:	429a      	cmp	r2, r3
 800f082:	d915      	bls.n	800f0b0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6a1a      	ldr	r2, [r3, #32]
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	025b      	lsls	r3, r3, #9
 800f094:	69fa      	ldr	r2, [r7, #28]
 800f096:	4413      	add	r3, r2
 800f098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f09c:	4619      	mov	r1, r3
 800f09e:	f7fe f8e5 	bl	800d26c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	7d1b      	ldrb	r3, [r3, #20]
 800f0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f0b0:	6a3b      	ldr	r3, [r7, #32]
 800f0b2:	025b      	lsls	r3, r3, #9
 800f0b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f0b6:	e03f      	b.n	800f138 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6a1b      	ldr	r3, [r3, #32]
 800f0bc:	697a      	ldr	r2, [r7, #20]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d016      	beq.n	800f0f0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	699a      	ldr	r2, [r3, #24]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d210      	bcs.n	800f0f0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	7858      	ldrb	r0, [r3, #1]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0d8:	2301      	movs	r3, #1
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	f7fd ffe6 	bl	800d0ac <disk_read>
 800f0e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d004      	beq.n	800f0f0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	755a      	strb	r2, [r3, #21]
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e04e      	b.n	800f18e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f102:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d901      	bls.n	800f110 <f_write+0x264>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	699b      	ldr	r3, [r3, #24]
 800f11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f11e:	4413      	add	r3, r2
 800f120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f122:	69f9      	ldr	r1, [r7, #28]
 800f124:	4618      	mov	r0, r3
 800f126:	f7fe f8a1 	bl	800d26c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7d1b      	ldrb	r3, [r3, #20]
 800f12e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f132:	b2da      	uxtb	r2, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f138:	69fa      	ldr	r2, [r7, #28]
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	4413      	add	r3, r2
 800f13e:	61fb      	str	r3, [r7, #28]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	699a      	ldr	r2, [r3, #24]
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	441a      	add	r2, r3
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	619a      	str	r2, [r3, #24]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	68da      	ldr	r2, [r3, #12]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	699b      	ldr	r3, [r3, #24]
 800f154:	429a      	cmp	r2, r3
 800f156:	bf38      	it	cc
 800f158:	461a      	movcc	r2, r3
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	60da      	str	r2, [r3, #12]
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	441a      	add	r2, r3
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2b00      	cmp	r3, #0
 800f176:	f47f aed4 	bne.w	800ef22 <f_write+0x76>
 800f17a:	e000      	b.n	800f17e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f17c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	7d1b      	ldrb	r3, [r3, #20]
 800f182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f186:	b2da      	uxtb	r2, r3
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3730      	adds	r7, #48	; 0x30
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b086      	sub	sp, #24
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f107 0208 	add.w	r2, r7, #8
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7ff fc46 	bl	800ea38 <validate>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1b0:	7dfb      	ldrb	r3, [r7, #23]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d168      	bne.n	800f288 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d062      	beq.n	800f288 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
 800f1c6:	b25b      	sxtb	r3, r3
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	da15      	bge.n	800f1f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	7858      	ldrb	r0, [r3, #1]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a1a      	ldr	r2, [r3, #32]
 800f1da:	2301      	movs	r3, #1
 800f1dc:	f7fd ff86 	bl	800d0ec <disk_write>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <f_sync+0x54>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e04f      	b.n	800f28a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	7d1b      	ldrb	r3, [r3, #20]
 800f1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f1f8:	f7fb fce6 	bl	800abc8 <get_fattime>
 800f1fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7fe fa5e 	bl	800d6c8 <move_window>
 800f20c:	4603      	mov	r3, r0
 800f20e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d138      	bne.n	800f288 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	330b      	adds	r3, #11
 800f220:	781a      	ldrb	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	330b      	adds	r3, #11
 800f226:	f042 0220 	orr.w	r2, r2, #32
 800f22a:	b2d2      	uxtb	r2, r2
 800f22c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6818      	ldr	r0, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	461a      	mov	r2, r3
 800f238:	68f9      	ldr	r1, [r7, #12]
 800f23a:	f7fe ff69 	bl	800e110 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f103 021c 	add.w	r2, r3, #28
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	4619      	mov	r1, r3
 800f24a:	4610      	mov	r0, r2
 800f24c:	f7fd ffe2 	bl	800d214 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	3316      	adds	r3, #22
 800f254:	6939      	ldr	r1, [r7, #16]
 800f256:	4618      	mov	r0, r3
 800f258:	f7fd ffdc 	bl	800d214 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	3312      	adds	r3, #18
 800f260:	2100      	movs	r1, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f7fd ffbb 	bl	800d1de <st_word>
					fs->wflag = 1;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2201      	movs	r2, #1
 800f26c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	4618      	mov	r0, r3
 800f272:	f7fe fa57 	bl	800d724 <sync_fs>
 800f276:	4603      	mov	r3, r0
 800f278:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	7d1b      	ldrb	r3, [r3, #20]
 800f27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f282:	b2da      	uxtb	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f288:	7dfb      	ldrb	r3, [r7, #23]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3718      	adds	r7, #24
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b084      	sub	sp, #16
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7ff ff7b 	bl	800f196 <f_sync>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d118      	bne.n	800f2dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f107 0208 	add.w	r2, r7, #8
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7ff fbc0 	bl	800ea38 <validate>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f2bc:	7bfb      	ldrb	r3, [r7, #15]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10c      	bne.n	800f2dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fe f95a 	bl	800d580 <dec_lock>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f2d0:	7bfb      	ldrb	r3, [r7, #15]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d102      	bne.n	800f2dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b09d      	sub	sp, #116	; 0x74
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f2fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f300:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f302:	f107 030c 	add.w	r3, r7, #12
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff f8af 	bl	800e46a <get_ldnumber>
 800f30c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f310:	2b00      	cmp	r3, #0
 800f312:	da02      	bge.n	800f31a <f_mkfs+0x32>
 800f314:	230b      	movs	r3, #11
 800f316:	f000 bc0d 	b.w	800fb34 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f31a:	4a94      	ldr	r2, [pc, #592]	; (800f56c <f_mkfs+0x284>)
 800f31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d005      	beq.n	800f332 <f_mkfs+0x4a>
 800f326:	4a91      	ldr	r2, [pc, #580]	; (800f56c <f_mkfs+0x284>)
 800f328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32e:	2200      	movs	r2, #0
 800f330:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f334:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f338:	2300      	movs	r3, #0
 800f33a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f33e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f342:	4618      	mov	r0, r3
 800f344:	f7fd fe8c 	bl	800d060 <disk_initialize>
 800f348:	4603      	mov	r3, r0
 800f34a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f34e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <f_mkfs+0x76>
 800f35a:	2303      	movs	r3, #3
 800f35c:	e3ea      	b.n	800fb34 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f35e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f362:	f003 0304 	and.w	r3, r3, #4
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <f_mkfs+0x86>
 800f36a:	230a      	movs	r3, #10
 800f36c:	e3e2      	b.n	800fb34 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f36e:	f107 0214 	add.w	r2, r7, #20
 800f372:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f376:	2103      	movs	r1, #3
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fd fed7 	bl	800d12c <disk_ioctl>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d10c      	bne.n	800f39e <f_mkfs+0xb6>
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d009      	beq.n	800f39e <f_mkfs+0xb6>
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f390:	d805      	bhi.n	800f39e <f_mkfs+0xb6>
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	1e5a      	subs	r2, r3, #1
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	4013      	ands	r3, r2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <f_mkfs+0xba>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f3a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3a6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d003      	beq.n	800f3b6 <f_mkfs+0xce>
 800f3ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d309      	bcc.n	800f3ca <f_mkfs+0xe2>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f3bc:	d805      	bhi.n	800f3ca <f_mkfs+0xe2>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	1e5a      	subs	r2, r3, #1
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <f_mkfs+0xe6>
 800f3ca:	2313      	movs	r3, #19
 800f3cc:	e3b2      	b.n	800fb34 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f3ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f3dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f3e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	fb02 f303 	mul.w	r3, r2, r3
 800f3f0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <f_mkfs+0x114>
 800f3f8:	230e      	movs	r3, #14
 800f3fa:	e39b      	b.n	800fb34 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f3fc:	f107 0210 	add.w	r2, r7, #16
 800f400:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f404:	2101      	movs	r1, #1
 800f406:	4618      	mov	r0, r3
 800f408:	f7fd fe90 	bl	800d12c <disk_ioctl>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <f_mkfs+0x12e>
 800f412:	2301      	movs	r3, #1
 800f414:	e38e      	b.n	800fb34 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f416:	7afb      	ldrb	r3, [r7, #11]
 800f418:	f003 0308 	and.w	r3, r3, #8
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <f_mkfs+0x13c>
 800f420:	2300      	movs	r3, #0
 800f422:	e000      	b.n	800f426 <f_mkfs+0x13e>
 800f424:	233f      	movs	r3, #63	; 0x3f
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d901      	bls.n	800f434 <f_mkfs+0x14c>
 800f430:	230e      	movs	r3, #14
 800f432:	e37f      	b.n	800fb34 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	2b7f      	cmp	r3, #127	; 0x7f
 800f440:	d801      	bhi.n	800f446 <f_mkfs+0x15e>
 800f442:	230e      	movs	r3, #14
 800f444:	e376      	b.n	800fb34 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b80      	cmp	r3, #128	; 0x80
 800f44a:	d901      	bls.n	800f450 <f_mkfs+0x168>
 800f44c:	2313      	movs	r3, #19
 800f44e:	e371      	b.n	800fb34 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f450:	7afb      	ldrb	r3, [r7, #11]
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00d      	beq.n	800f476 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f45a:	7afb      	ldrb	r3, [r7, #11]
 800f45c:	f003 0307 	and.w	r3, r3, #7
 800f460:	2b02      	cmp	r3, #2
 800f462:	d004      	beq.n	800f46e <f_mkfs+0x186>
 800f464:	7afb      	ldrb	r3, [r7, #11]
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d103      	bne.n	800f476 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f46e:	2303      	movs	r3, #3
 800f470:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f474:	e009      	b.n	800f48a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f476:	7afb      	ldrb	r3, [r7, #11]
 800f478:	f003 0301 	and.w	r3, r3, #1
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d101      	bne.n	800f484 <f_mkfs+0x19c>
 800f480:	2313      	movs	r3, #19
 800f482:	e357      	b.n	800fb34 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f484:	2302      	movs	r3, #2
 800f486:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f48e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f492:	2b03      	cmp	r3, #3
 800f494:	d13c      	bne.n	800f510 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d11b      	bne.n	800f4d4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	0c5b      	lsrs	r3, r3, #17
 800f4a0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	653b      	str	r3, [r7, #80]	; 0x50
 800f4aa:	e005      	b.n	800f4b8 <f_mkfs+0x1d0>
 800f4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f4b8:	4a2d      	ldr	r2, [pc, #180]	; (800f570 <f_mkfs+0x288>)
 800f4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d007      	beq.n	800f4d4 <f_mkfs+0x1ec>
 800f4c4:	4a2a      	ldr	r2, [pc, #168]	; (800f570 <f_mkfs+0x288>)
 800f4c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d2eb      	bcs.n	800f4ac <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4dc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f4de:	6a3b      	ldr	r3, [r7, #32]
 800f4e0:	3302      	adds	r3, #2
 800f4e2:	009a      	lsls	r2, r3, #2
 800f4e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4e6:	4413      	add	r3, r2
 800f4e8:	1e5a      	subs	r2, r3, #1
 800f4ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f4f2:	2320      	movs	r3, #32
 800f4f4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f500:	4293      	cmp	r3, r2
 800f502:	d903      	bls.n	800f50c <f_mkfs+0x224>
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	4a1b      	ldr	r2, [pc, #108]	; (800f574 <f_mkfs+0x28c>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d952      	bls.n	800f5b2 <f_mkfs+0x2ca>
 800f50c:	230e      	movs	r3, #14
 800f50e:	e311      	b.n	800fb34 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f512:	2b00      	cmp	r3, #0
 800f514:	d11b      	bne.n	800f54e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	0b1b      	lsrs	r3, r3, #12
 800f51a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f51c:	2300      	movs	r3, #0
 800f51e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f520:	2301      	movs	r3, #1
 800f522:	653b      	str	r3, [r7, #80]	; 0x50
 800f524:	e005      	b.n	800f532 <f_mkfs+0x24a>
 800f526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f528:	3301      	adds	r3, #1
 800f52a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	653b      	str	r3, [r7, #80]	; 0x50
 800f532:	4a11      	ldr	r2, [pc, #68]	; (800f578 <f_mkfs+0x290>)
 800f534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d007      	beq.n	800f54e <f_mkfs+0x266>
 800f53e:	4a0e      	ldr	r2, [pc, #56]	; (800f578 <f_mkfs+0x290>)
 800f540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f546:	461a      	mov	r2, r3
 800f548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d2eb      	bcs.n	800f526 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f54e:	693a      	ldr	r2, [r7, #16]
 800f550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f552:	fbb2 f3f3 	udiv	r3, r2, r3
 800f556:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f55e:	4293      	cmp	r3, r2
 800f560:	d90c      	bls.n	800f57c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	3302      	adds	r3, #2
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f56a:	e012      	b.n	800f592 <f_mkfs+0x2aa>
 800f56c:	2000a774 	.word	0x2000a774
 800f570:	08015804 	.word	0x08015804
 800f574:	0ffffff5 	.word	0x0ffffff5
 800f578:	08015814 	.word	0x08015814
				} else {
					fmt = FS_FAT12;
 800f57c:	2301      	movs	r3, #1
 800f57e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f582:	6a3a      	ldr	r2, [r7, #32]
 800f584:	4613      	mov	r3, r2
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	4413      	add	r3, r2
 800f58a:	3301      	adds	r3, #1
 800f58c:	085b      	lsrs	r3, r3, #1
 800f58e:	3303      	adds	r3, #3
 800f590:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f592:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f596:	4413      	add	r3, r2
 800f598:	1e5a      	subs	r2, r3, #1
 800f59a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5a0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a8:	015a      	lsls	r2, r3, #5
 800f5aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5b0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f5b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5b6:	4413      	add	r3, r2
 800f5b8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f5ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5be:	fb03 f202 	mul.w	r2, r3, r2
 800f5c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5c4:	4413      	add	r3, r2
 800f5c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f5c8:	4413      	add	r3, r2
 800f5ca:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f5cc:	697a      	ldr	r2, [r7, #20]
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	1e5a      	subs	r2, r3, #1
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	425b      	negs	r3, r3
 800f5d8:	401a      	ands	r2, r3
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f5e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d108      	bne.n	800f5fa <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f5e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ec:	4413      	add	r3, r2
 800f5ee:	657b      	str	r3, [r7, #84]	; 0x54
 800f5f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5f4:	4413      	add	r3, r2
 800f5f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5f8:	e006      	b.n	800f608 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f5fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f604:	4413      	add	r3, r2
 800f606:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f60a:	011a      	lsls	r2, r3, #4
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	441a      	add	r2, r3
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	1ad2      	subs	r2, r2, r3
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	429a      	cmp	r2, r3
 800f618:	d901      	bls.n	800f61e <f_mkfs+0x336>
 800f61a:	230e      	movs	r3, #14
 800f61c:	e28a      	b.n	800fb34 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f622:	1ad2      	subs	r2, r2, r3
 800f624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f628:	fb01 f303 	mul.w	r3, r1, r3
 800f62c:	1ad2      	subs	r2, r2, r3
 800f62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f630:	1ad2      	subs	r2, r2, r3
 800f632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f634:	fbb2 f3f3 	udiv	r3, r2, r3
 800f638:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f63a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f63e:	2b03      	cmp	r3, #3
 800f640:	d10f      	bne.n	800f662 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f642:	6a3b      	ldr	r3, [r7, #32]
 800f644:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f648:	4293      	cmp	r3, r2
 800f64a:	d80a      	bhi.n	800f662 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d105      	bne.n	800f65e <f_mkfs+0x376>
 800f652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f654:	085b      	lsrs	r3, r3, #1
 800f656:	607b      	str	r3, [r7, #4]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d144      	bne.n	800f6e8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f65e:	230e      	movs	r3, #14
 800f660:	e268      	b.n	800fb34 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f662:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f666:	2b02      	cmp	r3, #2
 800f668:	d133      	bne.n	800f6d2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f66a:	6a3b      	ldr	r3, [r7, #32]
 800f66c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f670:	4293      	cmp	r3, r2
 800f672:	d91e      	bls.n	800f6b2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d107      	bne.n	800f68a <f_mkfs+0x3a2>
 800f67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	2b40      	cmp	r3, #64	; 0x40
 800f680:	d803      	bhi.n	800f68a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	607b      	str	r3, [r7, #4]
 800f688:	e033      	b.n	800f6f2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f68a:	7afb      	ldrb	r3, [r7, #11]
 800f68c:	f003 0302 	and.w	r3, r3, #2
 800f690:	2b00      	cmp	r3, #0
 800f692:	d003      	beq.n	800f69c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f694:	2303      	movs	r3, #3
 800f696:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f69a:	e02a      	b.n	800f6f2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d105      	bne.n	800f6ae <f_mkfs+0x3c6>
 800f6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	607b      	str	r3, [r7, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2b80      	cmp	r3, #128	; 0x80
 800f6ac:	d91e      	bls.n	800f6ec <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f6ae:	230e      	movs	r3, #14
 800f6b0:	e240      	b.n	800fb34 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
 800f6b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d80a      	bhi.n	800f6d2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d105      	bne.n	800f6ce <f_mkfs+0x3e6>
 800f6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6c4:	005b      	lsls	r3, r3, #1
 800f6c6:	607b      	str	r3, [r7, #4]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b80      	cmp	r3, #128	; 0x80
 800f6cc:	d910      	bls.n	800f6f0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f6ce:	230e      	movs	r3, #14
 800f6d0:	e230      	b.n	800fb34 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f6d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d10c      	bne.n	800f6f4 <f_mkfs+0x40c>
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d907      	bls.n	800f6f4 <f_mkfs+0x40c>
 800f6e4:	230e      	movs	r3, #14
 800f6e6:	e225      	b.n	800fb34 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f6e8:	bf00      	nop
 800f6ea:	e6ce      	b.n	800f48a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f6ec:	bf00      	nop
 800f6ee:	e6cc      	b.n	800f48a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f6f0:	bf00      	nop
			pau = au;
 800f6f2:	e6ca      	b.n	800f48a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f6f4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f6f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6fe:	f7fd fdd6 	bl	800d2ae <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f702:	220b      	movs	r2, #11
 800f704:	49b2      	ldr	r1, [pc, #712]	; (800f9d0 <f_mkfs+0x6e8>)
 800f706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f708:	f7fd fdb0 	bl	800d26c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	330b      	adds	r3, #11
 800f710:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f7fd fd62 	bl	800d1de <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	330d      	adds	r3, #13
 800f71e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f720:	b2d2      	uxtb	r2, r2
 800f722:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	330e      	adds	r3, #14
 800f728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f72a:	b292      	uxth	r2, r2
 800f72c:	4611      	mov	r1, r2
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd fd55 	bl	800d1de <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	3310      	adds	r3, #16
 800f738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f73a:	b2d2      	uxtb	r2, r2
 800f73c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	f103 0211 	add.w	r2, r3, #17
 800f744:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f748:	2b03      	cmp	r3, #3
 800f74a:	d002      	beq.n	800f752 <f_mkfs+0x46a>
 800f74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f74e:	b29b      	uxth	r3, r3
 800f750:	e000      	b.n	800f754 <f_mkfs+0x46c>
 800f752:	2300      	movs	r3, #0
 800f754:	4619      	mov	r1, r3
 800f756:	4610      	mov	r0, r2
 800f758:	f7fd fd41 	bl	800d1de <st_word>
		if (sz_vol < 0x10000) {
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f762:	d208      	bcs.n	800f776 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	3313      	adds	r3, #19
 800f768:	693a      	ldr	r2, [r7, #16]
 800f76a:	b292      	uxth	r2, r2
 800f76c:	4611      	mov	r1, r2
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fd fd35 	bl	800d1de <st_word>
 800f774:	e006      	b.n	800f784 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	3320      	adds	r3, #32
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	4611      	mov	r1, r2
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fd fd48 	bl	800d214 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	3315      	adds	r3, #21
 800f788:	22f8      	movs	r2, #248	; 0xf8
 800f78a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78e:	3318      	adds	r3, #24
 800f790:	213f      	movs	r1, #63	; 0x3f
 800f792:	4618      	mov	r0, r3
 800f794:	f7fd fd23 	bl	800d1de <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	331a      	adds	r3, #26
 800f79c:	21ff      	movs	r1, #255	; 0xff
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fd fd1d 	bl	800d1de <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	331c      	adds	r3, #28
 800f7a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fd fd32 	bl	800d214 <st_dword>
		if (fmt == FS_FAT32) {
 800f7b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7b4:	2b03      	cmp	r3, #3
 800f7b6:	d131      	bne.n	800f81c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ba:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f7be:	f7fb fa03 	bl	800abc8 <get_fattime>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f7fd fd24 	bl	800d214 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	3324      	adds	r3, #36	; 0x24
 800f7d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fd fd1e 	bl	800d214 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	332c      	adds	r3, #44	; 0x2c
 800f7dc:	2102      	movs	r1, #2
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fd fd18 	bl	800d214 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e6:	3330      	adds	r3, #48	; 0x30
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fd fcf7 	bl	800d1de <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f2:	3332      	adds	r3, #50	; 0x32
 800f7f4:	2106      	movs	r1, #6
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fd fcf1 	bl	800d1de <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	3340      	adds	r3, #64	; 0x40
 800f800:	2280      	movs	r2, #128	; 0x80
 800f802:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f806:	3342      	adds	r3, #66	; 0x42
 800f808:	2229      	movs	r2, #41	; 0x29
 800f80a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80e:	3347      	adds	r3, #71	; 0x47
 800f810:	2213      	movs	r2, #19
 800f812:	4970      	ldr	r1, [pc, #448]	; (800f9d4 <f_mkfs+0x6ec>)
 800f814:	4618      	mov	r0, r3
 800f816:	f7fd fd29 	bl	800d26c <mem_cpy>
 800f81a:	e020      	b.n	800f85e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f822:	f7fb f9d1 	bl	800abc8 <get_fattime>
 800f826:	4603      	mov	r3, r0
 800f828:	4619      	mov	r1, r3
 800f82a:	4620      	mov	r0, r4
 800f82c:	f7fd fcf2 	bl	800d214 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f832:	3316      	adds	r3, #22
 800f834:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f836:	b292      	uxth	r2, r2
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fd fccf 	bl	800d1de <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	3324      	adds	r3, #36	; 0x24
 800f844:	2280      	movs	r2, #128	; 0x80
 800f846:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	3326      	adds	r3, #38	; 0x26
 800f84c:	2229      	movs	r2, #41	; 0x29
 800f84e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	332b      	adds	r3, #43	; 0x2b
 800f854:	2213      	movs	r2, #19
 800f856:	4960      	ldr	r1, [pc, #384]	; (800f9d8 <f_mkfs+0x6f0>)
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fd fd07 	bl	800d26c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f860:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f864:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fd fcb8 	bl	800d1de <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f86e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f872:	2301      	movs	r3, #1
 800f874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f878:	f7fd fc38 	bl	800d0ec <disk_write>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <f_mkfs+0x59e>
 800f882:	2301      	movs	r3, #1
 800f884:	e156      	b.n	800fb34 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f886:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d140      	bne.n	800f910 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f890:	1d9a      	adds	r2, r3, #6
 800f892:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f896:	2301      	movs	r3, #1
 800f898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f89a:	f7fd fc27 	bl	800d0ec <disk_write>
			mem_set(buf, 0, ss);
 800f89e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8a6:	f7fd fd02 	bl	800d2ae <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f8aa:	494c      	ldr	r1, [pc, #304]	; (800f9dc <f_mkfs+0x6f4>)
 800f8ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8ae:	f7fd fcb1 	bl	800d214 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8b8:	4949      	ldr	r1, [pc, #292]	; (800f9e0 <f_mkfs+0x6f8>)
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fd fcaa 	bl	800d214 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	4610      	mov	r0, r2
 800f8ce:	f7fd fca1 	bl	800d214 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f8d8:	2102      	movs	r1, #2
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fd fc9a 	bl	800d214 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fd fc77 	bl	800d1de <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	1dda      	adds	r2, r3, #7
 800f8f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8fc:	f7fd fbf6 	bl	800d0ec <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f908:	2301      	movs	r3, #1
 800f90a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f90c:	f7fd fbee 	bl	800d0ec <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f912:	2100      	movs	r1, #0
 800f914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f916:	f7fd fcca 	bl	800d2ae <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f91a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f91c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f91e:	2300      	movs	r3, #0
 800f920:	64bb      	str	r3, [r7, #72]	; 0x48
 800f922:	e04b      	b.n	800f9bc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f924:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f928:	2b03      	cmp	r3, #3
 800f92a:	d113      	bne.n	800f954 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f92c:	f06f 0107 	mvn.w	r1, #7
 800f930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f932:	f7fd fc6f 	bl	800d214 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	3304      	adds	r3, #4
 800f93a:	f04f 31ff 	mov.w	r1, #4294967295
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fd fc68 	bl	800d214 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	3308      	adds	r3, #8
 800f948:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fd fc61 	bl	800d214 <st_dword>
 800f952:	e00b      	b.n	800f96c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f954:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d101      	bne.n	800f960 <f_mkfs+0x678>
 800f95c:	4b21      	ldr	r3, [pc, #132]	; (800f9e4 <f_mkfs+0x6fc>)
 800f95e:	e001      	b.n	800f964 <f_mkfs+0x67c>
 800f960:	f06f 0307 	mvn.w	r3, #7
 800f964:	4619      	mov	r1, r3
 800f966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f968:	f7fd fc54 	bl	800d214 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f96c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f96e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f974:	4293      	cmp	r3, r2
 800f976:	bf28      	it	cs
 800f978:	4613      	movcs	r3, r2
 800f97a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f97c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f982:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f986:	f7fd fbb1 	bl	800d0ec <disk_write>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <f_mkfs+0x6ac>
 800f990:	2301      	movs	r3, #1
 800f992:	e0cf      	b.n	800fb34 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f996:	461a      	mov	r2, r3
 800f998:	2100      	movs	r1, #0
 800f99a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f99c:	f7fd fc87 	bl	800d2ae <mem_set>
				sect += n; nsect -= n;
 800f9a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f9a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9a4:	4413      	add	r3, r2
 800f9a6:	667b      	str	r3, [r7, #100]	; 0x64
 800f9a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800f9b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1dc      	bne.n	800f970 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d3af      	bcc.n	800f924 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f9c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f9c8:	2b03      	cmp	r3, #3
 800f9ca:	d10d      	bne.n	800f9e8 <f_mkfs+0x700>
 800f9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ce:	e00c      	b.n	800f9ea <f_mkfs+0x702>
 800f9d0:	080156b4 	.word	0x080156b4
 800f9d4:	080156c0 	.word	0x080156c0
 800f9d8:	080156d4 	.word	0x080156d4
 800f9dc:	41615252 	.word	0x41615252
 800f9e0:	61417272 	.word	0x61417272
 800f9e4:	00fffff8 	.word	0x00fffff8
 800f9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ea:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f9ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	bf28      	it	cs
 800f9f4:	4613      	movcs	r3, r2
 800f9f6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f9f8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f9fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa02:	f7fd fb73 	bl	800d0ec <disk_write>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <f_mkfs+0x728>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e091      	b.n	800fb34 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800fa10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa14:	4413      	add	r3, r2
 800fa16:	667b      	str	r3, [r7, #100]	; 0x64
 800fa18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800fa20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d1e2      	bne.n	800f9ec <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800fa26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d103      	bne.n	800fa36 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800fa2e:	230c      	movs	r3, #12
 800fa30:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fa34:	e010      	b.n	800fa58 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa3c:	d303      	bcc.n	800fa46 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800fa3e:	2306      	movs	r3, #6
 800fa40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fa44:	e008      	b.n	800fa58 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800fa46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	d101      	bne.n	800fa52 <f_mkfs+0x76a>
 800fa4e:	2304      	movs	r3, #4
 800fa50:	e000      	b.n	800fa54 <f_mkfs+0x76c>
 800fa52:	2301      	movs	r3, #1
 800fa54:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800fa58:	7afb      	ldrb	r3, [r7, #11]
 800fa5a:	f003 0308 	and.w	r3, r3, #8
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d15b      	bne.n	800fb1a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800fa62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa64:	461a      	mov	r2, r3
 800fa66:	2100      	movs	r1, #0
 800fa68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa6a:	f7fd fc20 	bl	800d2ae <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa74:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fd fbb0 	bl	800d1de <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fa84:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	2201      	movs	r2, #1
 800fa92:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	3302      	adds	r3, #2
 800fa98:	2201      	movs	r2, #1
 800fa9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	3303      	adds	r3, #3
 800faa0:	2200      	movs	r2, #0
 800faa2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	3304      	adds	r3, #4
 800faa8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800faac:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	441a      	add	r2, r3
 800fab4:	4b21      	ldr	r3, [pc, #132]	; (800fb3c <f_mkfs+0x854>)
 800fab6:	fba3 1302 	umull	r1, r3, r3, r2
 800faba:	1ad2      	subs	r2, r2, r3
 800fabc:	0852      	lsrs	r2, r2, #1
 800fabe:	4413      	add	r3, r2
 800fac0:	0b5b      	lsrs	r3, r3, #13
 800fac2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	3305      	adds	r3, #5
 800fac8:	22fe      	movs	r2, #254	; 0xfe
 800faca:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800facc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800face:	089b      	lsrs	r3, r3, #2
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	3306      	adds	r3, #6
 800fad6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800fada:	b2d2      	uxtb	r2, r2
 800fadc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	3307      	adds	r3, #7
 800fae2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fae4:	b2d2      	uxtb	r2, r2
 800fae6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	3308      	adds	r3, #8
 800faec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fd fb90 	bl	800d214 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	330c      	adds	r3, #12
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	4611      	mov	r1, r2
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7fd fb89 	bl	800d214 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fb02:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fb06:	2301      	movs	r3, #1
 800fb08:	2200      	movs	r2, #0
 800fb0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb0c:	f7fd faee 	bl	800d0ec <disk_write>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d001      	beq.n	800fb1a <f_mkfs+0x832>
 800fb16:	2301      	movs	r3, #1
 800fb18:	e00c      	b.n	800fb34 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fb1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fb1e:	2200      	movs	r2, #0
 800fb20:	2100      	movs	r1, #0
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fd fb02 	bl	800d12c <disk_ioctl>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d001      	beq.n	800fb32 <f_mkfs+0x84a>
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e000      	b.n	800fb34 <f_mkfs+0x84c>

	return FR_OK;
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3774      	adds	r7, #116	; 0x74
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd90      	pop	{r4, r7, pc}
 800fb3c:	0515565b 	.word	0x0515565b

0800fb40 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800fb4c:	78fb      	ldrb	r3, [r7, #3]
 800fb4e:	2b0a      	cmp	r3, #10
 800fb50:	d103      	bne.n	800fb5a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fb52:	210d      	movs	r1, #13
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7ff fff3 	bl	800fb40 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	db25      	blt.n	800fbb2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	1c5a      	adds	r2, r3, #1
 800fb6a:	60fa      	str	r2, [r7, #12]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	4413      	add	r3, r2
 800fb70:	78fa      	ldrb	r2, [r7, #3]
 800fb72:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b3c      	cmp	r3, #60	; 0x3c
 800fb78:	dd12      	ble.n	800fba0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6818      	ldr	r0, [r3, #0]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f103 010c 	add.w	r1, r3, #12
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	f107 0308 	add.w	r3, r7, #8
 800fb8a:	f7ff f98f 	bl	800eeac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d101      	bne.n	800fb9a <putc_bfd+0x5a>
 800fb96:	2300      	movs	r3, #0
 800fb98:	e001      	b.n	800fb9e <putc_bfd+0x5e>
 800fb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb9e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	609a      	str	r2, [r3, #8]
 800fbb0:	e000      	b.n	800fbb4 <putc_bfd+0x74>
	if (i < 0) return;
 800fbb2:	bf00      	nop
}
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b084      	sub	sp, #16
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	db16      	blt.n	800fbf8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6818      	ldr	r0, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f103 010c 	add.w	r1, r3, #12
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	f107 030c 	add.w	r3, r7, #12
 800fbde:	f7ff f965 	bl	800eeac <f_write>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d107      	bne.n	800fbf8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d102      	bne.n	800fbf8 <putc_flush+0x3e>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	e001      	b.n	800fbfc <putc_flush+0x42>
	return EOF;
 800fbf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	605a      	str	r2, [r3, #4]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	609a      	str	r2, [r3, #8]
}
 800fc22:	bf00      	nop
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr
	...

0800fc30 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800fc30:	b40e      	push	{r1, r2, r3}
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b0a7      	sub	sp, #156	; 0x9c
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800fc3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7ff ffdf 	bl	800fc04 <putc_init>

	va_start(arp, fmt);
 800fc46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fc4a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800fc4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800fc5c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f000 81f2 	beq.w	801004a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800fc66:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc6a:	2b25      	cmp	r3, #37	; 0x25
 800fc6c:	d008      	beq.n	800fc80 <f_printf+0x50>
			putc_bfd(&pb, c);
 800fc6e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800fc72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff ff61 	bl	800fb40 <putc_bfd>
			continue;
 800fc7e:	e1e3      	b.n	8010048 <f_printf+0x418>
		}
		w = f = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fc86:	2300      	movs	r3, #0
 800fc88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800fc8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc90:	1c5a      	adds	r2, r3, #1
 800fc92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800fc9c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fca0:	2b30      	cmp	r3, #48	; 0x30
 800fca2:	d10b      	bne.n	800fcbc <f_printf+0x8c>
			f = 1; c = *fmt++;
 800fca4:	2301      	movs	r3, #1
 800fca6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fcaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800fcba:	e024      	b.n	800fd06 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800fcbc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fcc0:	2b2d      	cmp	r3, #45	; 0x2d
 800fcc2:	d120      	bne.n	800fd06 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fcca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcce:	1c5a      	adds	r2, r3, #1
 800fcd0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800fcda:	e014      	b.n	800fd06 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800fcdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fce0:	4613      	mov	r3, r2
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	4413      	add	r3, r2
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	461a      	mov	r2, r3
 800fcea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fcee:	4413      	add	r3, r2
 800fcf0:	3b30      	subs	r3, #48	; 0x30
 800fcf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800fcf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800fd06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fd0a:	2b2f      	cmp	r3, #47	; 0x2f
 800fd0c:	d903      	bls.n	800fd16 <f_printf+0xe6>
 800fd0e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fd12:	2b39      	cmp	r3, #57	; 0x39
 800fd14:	d9e2      	bls.n	800fcdc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800fd16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fd1a:	2b6c      	cmp	r3, #108	; 0x6c
 800fd1c:	d003      	beq.n	800fd26 <f_printf+0xf6>
 800fd1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fd22:	2b4c      	cmp	r3, #76	; 0x4c
 800fd24:	d10d      	bne.n	800fd42 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800fd26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fd2a:	f043 0304 	orr.w	r3, r3, #4
 800fd2e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fd32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800fd42:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 8181 	beq.w	801004e <f_printf+0x41e>
		d = c;
 800fd4c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fd50:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800fd54:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fd58:	2b60      	cmp	r3, #96	; 0x60
 800fd5a:	d908      	bls.n	800fd6e <f_printf+0x13e>
 800fd5c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fd60:	2b7a      	cmp	r3, #122	; 0x7a
 800fd62:	d804      	bhi.n	800fd6e <f_printf+0x13e>
 800fd64:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fd68:	3b20      	subs	r3, #32
 800fd6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800fd6e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fd72:	3b42      	subs	r3, #66	; 0x42
 800fd74:	2b16      	cmp	r3, #22
 800fd76:	f200 8098 	bhi.w	800feaa <f_printf+0x27a>
 800fd7a:	a201      	add	r2, pc, #4	; (adr r2, 800fd80 <f_printf+0x150>)
 800fd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd80:	0800fe8b 	.word	0x0800fe8b
 800fd84:	0800fe73 	.word	0x0800fe73
 800fd88:	0800fe9b 	.word	0x0800fe9b
 800fd8c:	0800feab 	.word	0x0800feab
 800fd90:	0800feab 	.word	0x0800feab
 800fd94:	0800feab 	.word	0x0800feab
 800fd98:	0800feab 	.word	0x0800feab
 800fd9c:	0800feab 	.word	0x0800feab
 800fda0:	0800feab 	.word	0x0800feab
 800fda4:	0800feab 	.word	0x0800feab
 800fda8:	0800feab 	.word	0x0800feab
 800fdac:	0800feab 	.word	0x0800feab
 800fdb0:	0800feab 	.word	0x0800feab
 800fdb4:	0800fe93 	.word	0x0800fe93
 800fdb8:	0800feab 	.word	0x0800feab
 800fdbc:	0800feab 	.word	0x0800feab
 800fdc0:	0800feab 	.word	0x0800feab
 800fdc4:	0800fddd 	.word	0x0800fddd
 800fdc8:	0800feab 	.word	0x0800feab
 800fdcc:	0800fe9b 	.word	0x0800fe9b
 800fdd0:	0800feab 	.word	0x0800feab
 800fdd4:	0800feab 	.word	0x0800feab
 800fdd8:	0800fea3 	.word	0x0800fea3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800fddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdde:	1d1a      	adds	r2, r3, #4
 800fde0:	67ba      	str	r2, [r7, #120]	; 0x78
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800fde6:	2300      	movs	r3, #0
 800fde8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fdec:	e004      	b.n	800fdf8 <f_printf+0x1c8>
 800fdee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fdf8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fdfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdfe:	4413      	add	r3, r2
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1f3      	bne.n	800fdee <f_printf+0x1be>
			if (!(f & 2)) {
 800fe06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fe0a:	f003 0302 	and.w	r3, r3, #2
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d11a      	bne.n	800fe48 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800fe12:	e005      	b.n	800fe20 <f_printf+0x1f0>
 800fe14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe18:	2120      	movs	r1, #32
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff fe90 	bl	800fb40 <putc_bfd>
 800fe20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe24:	1c5a      	adds	r2, r3, #1
 800fe26:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fe2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d8f0      	bhi.n	800fe14 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800fe32:	e009      	b.n	800fe48 <f_printf+0x218>
 800fe34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	67fa      	str	r2, [r7, #124]	; 0x7c
 800fe3a:	781a      	ldrb	r2, [r3, #0]
 800fe3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe40:	4611      	mov	r1, r2
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7ff fe7c 	bl	800fb40 <putc_bfd>
 800fe48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1f1      	bne.n	800fe34 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800fe50:	e005      	b.n	800fe5e <f_printf+0x22e>
 800fe52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe56:	2120      	movs	r1, #32
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fe71 	bl	800fb40 <putc_bfd>
 800fe5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fe68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d8f0      	bhi.n	800fe52 <f_printf+0x222>
			continue;
 800fe70:	e0ea      	b.n	8010048 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800fe72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe74:	1d1a      	adds	r2, r3, #4
 800fe76:	67ba      	str	r2, [r7, #120]	; 0x78
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	b2da      	uxtb	r2, r3
 800fe7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe80:	4611      	mov	r1, r2
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff fe5c 	bl	800fb40 <putc_bfd>
 800fe88:	e0de      	b.n	8010048 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fe90:	e014      	b.n	800febc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800fe92:	2308      	movs	r3, #8
 800fe94:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fe98:	e010      	b.n	800febc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800fe9a:	230a      	movs	r3, #10
 800fe9c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fea0:	e00c      	b.n	800febc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800fea2:	2310      	movs	r3, #16
 800fea4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fea8:	e008      	b.n	800febc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800feaa:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800feae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800feb2:	4611      	mov	r1, r2
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff fe43 	bl	800fb40 <putc_bfd>
 800feba:	e0c5      	b.n	8010048 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800febc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fec0:	f003 0304 	and.w	r3, r3, #4
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d004      	beq.n	800fed2 <f_printf+0x2a2>
 800fec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800feca:	1d1a      	adds	r2, r3, #4
 800fecc:	67ba      	str	r2, [r7, #120]	; 0x78
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	e00c      	b.n	800feec <f_printf+0x2bc>
 800fed2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fed6:	2b44      	cmp	r3, #68	; 0x44
 800fed8:	d104      	bne.n	800fee4 <f_printf+0x2b4>
 800feda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fedc:	1d1a      	adds	r2, r3, #4
 800fede:	67ba      	str	r2, [r7, #120]	; 0x78
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	e003      	b.n	800feec <f_printf+0x2bc>
 800fee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fee6:	1d1a      	adds	r2, r3, #4
 800fee8:	67ba      	str	r2, [r7, #120]	; 0x78
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800fef0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fef4:	2b44      	cmp	r3, #68	; 0x44
 800fef6:	d10e      	bne.n	800ff16 <f_printf+0x2e6>
 800fef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	da0a      	bge.n	800ff16 <f_printf+0x2e6>
			v = 0 - v;
 800ff00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff04:	425b      	negs	r3, r3
 800ff06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800ff0a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff0e:	f043 0308 	orr.w	r3, r3, #8
 800ff12:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ff1c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ff20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff24:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff28:	fb01 f202 	mul.w	r2, r1, r2
 800ff2c:	1a9b      	subs	r3, r3, r2
 800ff2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800ff32:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800ff36:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ff3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ff42:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ff46:	2b09      	cmp	r3, #9
 800ff48:	d90b      	bls.n	800ff62 <f_printf+0x332>
 800ff4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ff4e:	2b78      	cmp	r3, #120	; 0x78
 800ff50:	d101      	bne.n	800ff56 <f_printf+0x326>
 800ff52:	2227      	movs	r2, #39	; 0x27
 800ff54:	e000      	b.n	800ff58 <f_printf+0x328>
 800ff56:	2207      	movs	r2, #7
 800ff58:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ff5c:	4413      	add	r3, r2
 800ff5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ff62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff66:	1c5a      	adds	r2, r3, #1
 800ff68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ff6c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ff70:	3230      	adds	r2, #48	; 0x30
 800ff72:	b2d2      	uxtb	r2, r2
 800ff74:	3398      	adds	r3, #152	; 0x98
 800ff76:	443b      	add	r3, r7
 800ff78:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ff7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d003      	beq.n	800ff8c <f_printf+0x35c>
 800ff84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff88:	2b1f      	cmp	r3, #31
 800ff8a:	d9c7      	bls.n	800ff1c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ff8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff90:	f003 0308 	and.w	r3, r3, #8
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d009      	beq.n	800ffac <f_printf+0x37c>
 800ff98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ffa2:	3398      	adds	r3, #152	; 0x98
 800ffa4:	443b      	add	r3, r7
 800ffa6:	222d      	movs	r2, #45	; 0x2d
 800ffa8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ffac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ffb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d001      	beq.n	800ffc4 <f_printf+0x394>
 800ffc0:	2330      	movs	r3, #48	; 0x30
 800ffc2:	e000      	b.n	800ffc6 <f_printf+0x396>
 800ffc4:	2320      	movs	r3, #32
 800ffc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ffca:	e007      	b.n	800ffdc <f_printf+0x3ac>
 800ffcc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ffd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7ff fdb2 	bl	800fb40 <putc_bfd>
 800ffdc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ffe0:	f003 0302 	and.w	r3, r3, #2
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d108      	bne.n	800fffa <f_printf+0x3ca>
 800ffe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffec:	1c5a      	adds	r2, r3, #1
 800ffee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fff2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d8e8      	bhi.n	800ffcc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800fffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fffe:	3b01      	subs	r3, #1
 8010000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010004:	f107 020c 	add.w	r2, r7, #12
 8010008:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801000c:	4413      	add	r3, r2
 801000e:	781a      	ldrb	r2, [r3, #0]
 8010010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010014:	4611      	mov	r1, r2
 8010016:	4618      	mov	r0, r3
 8010018:	f7ff fd92 	bl	800fb40 <putc_bfd>
		} while (i);
 801001c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1ea      	bne.n	800fffa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8010024:	e007      	b.n	8010036 <f_printf+0x406>
 8010026:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801002a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801002e:	4611      	mov	r1, r2
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff fd85 	bl	800fb40 <putc_bfd>
 8010036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801003a:	1c5a      	adds	r2, r3, #1
 801003c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010040:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010044:	429a      	cmp	r2, r3
 8010046:	d8ee      	bhi.n	8010026 <f_printf+0x3f6>
		c = *fmt++;
 8010048:	e600      	b.n	800fc4c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801004a:	bf00      	nop
 801004c:	e000      	b.n	8010050 <f_printf+0x420>
		if (!c) break;
 801004e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8010050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010054:	4618      	mov	r0, r3
 8010056:	f7ff fdb0 	bl	800fbba <putc_flush>
 801005a:	4603      	mov	r3, r0
}
 801005c:	4618      	mov	r0, r3
 801005e:	379c      	adds	r7, #156	; 0x9c
 8010060:	46bd      	mov	sp, r7
 8010062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010066:	b003      	add	sp, #12
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801006c:	b480      	push	{r7}
 801006e:	b087      	sub	sp, #28
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	4613      	mov	r3, r2
 8010078:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801007a:	2301      	movs	r3, #1
 801007c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010082:	4b1f      	ldr	r3, [pc, #124]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 8010084:	7a5b      	ldrb	r3, [r3, #9]
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	d131      	bne.n	80100f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801008c:	4b1c      	ldr	r3, [pc, #112]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 801008e:	7a5b      	ldrb	r3, [r3, #9]
 8010090:	b2db      	uxtb	r3, r3
 8010092:	461a      	mov	r2, r3
 8010094:	4b1a      	ldr	r3, [pc, #104]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 8010096:	2100      	movs	r1, #0
 8010098:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801009a:	4b19      	ldr	r3, [pc, #100]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 801009c:	7a5b      	ldrb	r3, [r3, #9]
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	4a17      	ldr	r2, [pc, #92]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	4413      	add	r3, r2
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80100aa:	4b15      	ldr	r3, [pc, #84]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 80100ac:	7a5b      	ldrb	r3, [r3, #9]
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	461a      	mov	r2, r3
 80100b2:	4b13      	ldr	r3, [pc, #76]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 80100b4:	4413      	add	r3, r2
 80100b6:	79fa      	ldrb	r2, [r7, #7]
 80100b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80100ba:	4b11      	ldr	r3, [pc, #68]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 80100bc:	7a5b      	ldrb	r3, [r3, #9]
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	1c5a      	adds	r2, r3, #1
 80100c2:	b2d1      	uxtb	r1, r2
 80100c4:	4a0e      	ldr	r2, [pc, #56]	; (8010100 <FATFS_LinkDriverEx+0x94>)
 80100c6:	7251      	strb	r1, [r2, #9]
 80100c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80100ca:	7dbb      	ldrb	r3, [r7, #22]
 80100cc:	3330      	adds	r3, #48	; 0x30
 80100ce:	b2da      	uxtb	r2, r3
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	3301      	adds	r3, #1
 80100d8:	223a      	movs	r2, #58	; 0x3a
 80100da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	3302      	adds	r3, #2
 80100e0:	222f      	movs	r2, #47	; 0x2f
 80100e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	3303      	adds	r3, #3
 80100e8:	2200      	movs	r2, #0
 80100ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	371c      	adds	r7, #28
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop
 8010100:	2000a79c 	.word	0x2000a79c

08010104 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801010e:	2200      	movs	r2, #0
 8010110:	6839      	ldr	r1, [r7, #0]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff ffaa 	bl	801006c <FATFS_LinkDriverEx>
 8010118:	4603      	mov	r3, r0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
	...

08010124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010128:	2200      	movs	r2, #0
 801012a:	4912      	ldr	r1, [pc, #72]	; (8010174 <MX_USB_DEVICE_Init+0x50>)
 801012c:	4812      	ldr	r0, [pc, #72]	; (8010178 <MX_USB_DEVICE_Init+0x54>)
 801012e:	f7fb fc5b 	bl	800b9e8 <USBD_Init>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010138:	f7f1 f8f6 	bl	8001328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801013c:	490f      	ldr	r1, [pc, #60]	; (801017c <MX_USB_DEVICE_Init+0x58>)
 801013e:	480e      	ldr	r0, [pc, #56]	; (8010178 <MX_USB_DEVICE_Init+0x54>)
 8010140:	f7fb fc82 	bl	800ba48 <USBD_RegisterClass>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801014a:	f7f1 f8ed 	bl	8001328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801014e:	490c      	ldr	r1, [pc, #48]	; (8010180 <MX_USB_DEVICE_Init+0x5c>)
 8010150:	4809      	ldr	r0, [pc, #36]	; (8010178 <MX_USB_DEVICE_Init+0x54>)
 8010152:	f7fb fbb9 	bl	800b8c8 <USBD_CDC_RegisterInterface>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801015c:	f7f1 f8e4 	bl	8001328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010160:	4805      	ldr	r0, [pc, #20]	; (8010178 <MX_USB_DEVICE_Init+0x54>)
 8010162:	f7fb fca7 	bl	800bab4 <USBD_Start>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801016c:	f7f1 f8dc 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010170:	bf00      	nop
 8010172:	bd80      	pop	{r7, pc}
 8010174:	200000ac 	.word	0x200000ac
 8010178:	2000a7a8 	.word	0x2000a7a8
 801017c:	20000018 	.word	0x20000018
 8010180:	20000098 	.word	0x20000098

08010184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010188:	2200      	movs	r2, #0
 801018a:	4905      	ldr	r1, [pc, #20]	; (80101a0 <CDC_Init_FS+0x1c>)
 801018c:	4805      	ldr	r0, [pc, #20]	; (80101a4 <CDC_Init_FS+0x20>)
 801018e:	f7fb fbb5 	bl	800b8fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010192:	4905      	ldr	r1, [pc, #20]	; (80101a8 <CDC_Init_FS+0x24>)
 8010194:	4803      	ldr	r0, [pc, #12]	; (80101a4 <CDC_Init_FS+0x20>)
 8010196:	f7fb fbd3 	bl	800b940 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801019a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801019c:	4618      	mov	r0, r3
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	2000b284 	.word	0x2000b284
 80101a4:	2000a7a8 	.word	0x2000a7a8
 80101a8:	2000aa84 	.word	0x2000aa84

080101ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80101ac:	b480      	push	{r7}
 80101ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80101b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	6039      	str	r1, [r7, #0]
 80101c6:	71fb      	strb	r3, [r7, #7]
 80101c8:	4613      	mov	r3, r2
 80101ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	2b23      	cmp	r3, #35	; 0x23
 80101d0:	d84a      	bhi.n	8010268 <CDC_Control_FS+0xac>
 80101d2:	a201      	add	r2, pc, #4	; (adr r2, 80101d8 <CDC_Control_FS+0x1c>)
 80101d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d8:	08010269 	.word	0x08010269
 80101dc:	08010269 	.word	0x08010269
 80101e0:	08010269 	.word	0x08010269
 80101e4:	08010269 	.word	0x08010269
 80101e8:	08010269 	.word	0x08010269
 80101ec:	08010269 	.word	0x08010269
 80101f0:	08010269 	.word	0x08010269
 80101f4:	08010269 	.word	0x08010269
 80101f8:	08010269 	.word	0x08010269
 80101fc:	08010269 	.word	0x08010269
 8010200:	08010269 	.word	0x08010269
 8010204:	08010269 	.word	0x08010269
 8010208:	08010269 	.word	0x08010269
 801020c:	08010269 	.word	0x08010269
 8010210:	08010269 	.word	0x08010269
 8010214:	08010269 	.word	0x08010269
 8010218:	08010269 	.word	0x08010269
 801021c:	08010269 	.word	0x08010269
 8010220:	08010269 	.word	0x08010269
 8010224:	08010269 	.word	0x08010269
 8010228:	08010269 	.word	0x08010269
 801022c:	08010269 	.word	0x08010269
 8010230:	08010269 	.word	0x08010269
 8010234:	08010269 	.word	0x08010269
 8010238:	08010269 	.word	0x08010269
 801023c:	08010269 	.word	0x08010269
 8010240:	08010269 	.word	0x08010269
 8010244:	08010269 	.word	0x08010269
 8010248:	08010269 	.word	0x08010269
 801024c:	08010269 	.word	0x08010269
 8010250:	08010269 	.word	0x08010269
 8010254:	08010269 	.word	0x08010269
 8010258:	08010269 	.word	0x08010269
 801025c:	08010269 	.word	0x08010269
 8010260:	08010269 	.word	0x08010269
 8010264:	08010269 	.word	0x08010269
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010268:	bf00      	nop
  }

  return (USBD_OK);
 801026a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801026c:	4618      	mov	r0, r3
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010282:	6879      	ldr	r1, [r7, #4]
 8010284:	480f      	ldr	r0, [pc, #60]	; (80102c4 <CDC_Receive_FS+0x4c>)
 8010286:	f7fb fb5b 	bl	800b940 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801028a:	480e      	ldr	r0, [pc, #56]	; (80102c4 <CDC_Receive_FS+0x4c>)
 801028c:	f7fb fb76 	bl	800b97c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 8010296:	2240      	movs	r2, #64	; 0x40
 8010298:	2100      	movs	r1, #0
 801029a:	480b      	ldr	r0, [pc, #44]	; (80102c8 <CDC_Receive_FS+0x50>)
 801029c:	f001 fd3d 	bl	8011d1a <memset>
  memcpy(inBuff, Buf, len);
 80102a0:	7bfb      	ldrb	r3, [r7, #15]
 80102a2:	461a      	mov	r2, r3
 80102a4:	6879      	ldr	r1, [r7, #4]
 80102a6:	4808      	ldr	r0, [pc, #32]	; (80102c8 <CDC_Receive_FS+0x50>)
 80102a8:	f001 fdb6 	bl	8011e18 <memcpy>
  memset(Buf, '\0', len);
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	461a      	mov	r2, r3
 80102b0:	2100      	movs	r1, #0
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f001 fd31 	bl	8011d1a <memset>
  return (USBD_OK);
 80102b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	2000a7a8 	.word	0x2000a7a8
 80102c8:	2000a2b8 	.word	0x2000a2b8

080102cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	4613      	mov	r3, r2
 80102d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80102da:	2300      	movs	r3, #0
 80102dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80102de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
	...

080102f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	4603      	mov	r3, r0
 80102f8:	6039      	str	r1, [r7, #0]
 80102fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	2212      	movs	r2, #18
 8010300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010302:	4b03      	ldr	r3, [pc, #12]	; (8010310 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010304:	4618      	mov	r0, r3
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	200000cc 	.word	0x200000cc

08010314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	6039      	str	r1, [r7, #0]
 801031e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	2204      	movs	r2, #4
 8010324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010326:	4b03      	ldr	r3, [pc, #12]	; (8010334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010328:	4618      	mov	r0, r3
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	200000ec 	.word	0x200000ec

08010338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	6039      	str	r1, [r7, #0]
 8010342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010344:	79fb      	ldrb	r3, [r7, #7]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d105      	bne.n	8010356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801034a:	683a      	ldr	r2, [r7, #0]
 801034c:	4907      	ldr	r1, [pc, #28]	; (801036c <USBD_FS_ProductStrDescriptor+0x34>)
 801034e:	4808      	ldr	r0, [pc, #32]	; (8010370 <USBD_FS_ProductStrDescriptor+0x38>)
 8010350:	f7fc fd8c 	bl	800ce6c <USBD_GetString>
 8010354:	e004      	b.n	8010360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	4904      	ldr	r1, [pc, #16]	; (801036c <USBD_FS_ProductStrDescriptor+0x34>)
 801035a:	4805      	ldr	r0, [pc, #20]	; (8010370 <USBD_FS_ProductStrDescriptor+0x38>)
 801035c:	f7fc fd86 	bl	800ce6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010360:	4b02      	ldr	r3, [pc, #8]	; (801036c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010362:	4618      	mov	r0, r3
 8010364:	3708      	adds	r7, #8
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	2000ba84 	.word	0x2000ba84
 8010370:	080156e8 	.word	0x080156e8

08010374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	4603      	mov	r3, r0
 801037c:	6039      	str	r1, [r7, #0]
 801037e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010380:	683a      	ldr	r2, [r7, #0]
 8010382:	4904      	ldr	r1, [pc, #16]	; (8010394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010384:	4804      	ldr	r0, [pc, #16]	; (8010398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010386:	f7fc fd71 	bl	800ce6c <USBD_GetString>
  return USBD_StrDesc;
 801038a:	4b02      	ldr	r3, [pc, #8]	; (8010394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801038c:	4618      	mov	r0, r3
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	2000ba84 	.word	0x2000ba84
 8010398:	080156f8 	.word	0x080156f8

0801039c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	6039      	str	r1, [r7, #0]
 80103a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	221a      	movs	r2, #26
 80103ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80103ae:	f000 f855 	bl	801045c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80103b2:	4b02      	ldr	r3, [pc, #8]	; (80103bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	200000f0 	.word	0x200000f0

080103c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	4603      	mov	r3, r0
 80103c8:	6039      	str	r1, [r7, #0]
 80103ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d105      	bne.n	80103de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103d2:	683a      	ldr	r2, [r7, #0]
 80103d4:	4907      	ldr	r1, [pc, #28]	; (80103f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80103d6:	4808      	ldr	r0, [pc, #32]	; (80103f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80103d8:	f7fc fd48 	bl	800ce6c <USBD_GetString>
 80103dc:	e004      	b.n	80103e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103de:	683a      	ldr	r2, [r7, #0]
 80103e0:	4904      	ldr	r1, [pc, #16]	; (80103f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80103e2:	4805      	ldr	r0, [pc, #20]	; (80103f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80103e4:	f7fc fd42 	bl	800ce6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80103e8:	4b02      	ldr	r3, [pc, #8]	; (80103f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	2000ba84 	.word	0x2000ba84
 80103f8:	0801570c 	.word	0x0801570c

080103fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	4603      	mov	r3, r0
 8010404:	6039      	str	r1, [r7, #0]
 8010406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010408:	79fb      	ldrb	r3, [r7, #7]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d105      	bne.n	801041a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	4907      	ldr	r1, [pc, #28]	; (8010430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010412:	4808      	ldr	r0, [pc, #32]	; (8010434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010414:	f7fc fd2a 	bl	800ce6c <USBD_GetString>
 8010418:	e004      	b.n	8010424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	4904      	ldr	r1, [pc, #16]	; (8010430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801041e:	4805      	ldr	r0, [pc, #20]	; (8010434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010420:	f7fc fd24 	bl	800ce6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010424:	4b02      	ldr	r3, [pc, #8]	; (8010430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010426:	4618      	mov	r0, r3
 8010428:	3708      	adds	r7, #8
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	2000ba84 	.word	0x2000ba84
 8010434:	08015718 	.word	0x08015718

08010438 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	4603      	mov	r3, r0
 8010440:	6039      	str	r1, [r7, #0]
 8010442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	220c      	movs	r2, #12
 8010448:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801044a:	4b03      	ldr	r3, [pc, #12]	; (8010458 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801044c:	4618      	mov	r0, r3
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr
 8010458:	200000e0 	.word	0x200000e0

0801045c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010462:	4b0f      	ldr	r3, [pc, #60]	; (80104a0 <Get_SerialNum+0x44>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010468:	4b0e      	ldr	r3, [pc, #56]	; (80104a4 <Get_SerialNum+0x48>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801046e:	4b0e      	ldr	r3, [pc, #56]	; (80104a8 <Get_SerialNum+0x4c>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4413      	add	r3, r2
 801047a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d009      	beq.n	8010496 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010482:	2208      	movs	r2, #8
 8010484:	4909      	ldr	r1, [pc, #36]	; (80104ac <Get_SerialNum+0x50>)
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f000 f814 	bl	80104b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801048c:	2204      	movs	r2, #4
 801048e:	4908      	ldr	r1, [pc, #32]	; (80104b0 <Get_SerialNum+0x54>)
 8010490:	68b8      	ldr	r0, [r7, #8]
 8010492:	f000 f80f 	bl	80104b4 <IntToUnicode>
  }
}
 8010496:	bf00      	nop
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	1fff7590 	.word	0x1fff7590
 80104a4:	1fff7594 	.word	0x1fff7594
 80104a8:	1fff7598 	.word	0x1fff7598
 80104ac:	200000f2 	.word	0x200000f2
 80104b0:	20000102 	.word	0x20000102

080104b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b087      	sub	sp, #28
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	4613      	mov	r3, r2
 80104c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80104c2:	2300      	movs	r3, #0
 80104c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80104c6:	2300      	movs	r3, #0
 80104c8:	75fb      	strb	r3, [r7, #23]
 80104ca:	e027      	b.n	801051c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	0f1b      	lsrs	r3, r3, #28
 80104d0:	2b09      	cmp	r3, #9
 80104d2:	d80b      	bhi.n	80104ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	0f1b      	lsrs	r3, r3, #28
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	7dfb      	ldrb	r3, [r7, #23]
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4619      	mov	r1, r3
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	440b      	add	r3, r1
 80104e4:	3230      	adds	r2, #48	; 0x30
 80104e6:	b2d2      	uxtb	r2, r2
 80104e8:	701a      	strb	r2, [r3, #0]
 80104ea:	e00a      	b.n	8010502 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	0f1b      	lsrs	r3, r3, #28
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	7dfb      	ldrb	r3, [r7, #23]
 80104f4:	005b      	lsls	r3, r3, #1
 80104f6:	4619      	mov	r1, r3
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	440b      	add	r3, r1
 80104fc:	3237      	adds	r2, #55	; 0x37
 80104fe:	b2d2      	uxtb	r2, r2
 8010500:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	011b      	lsls	r3, r3, #4
 8010506:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010508:	7dfb      	ldrb	r3, [r7, #23]
 801050a:	005b      	lsls	r3, r3, #1
 801050c:	3301      	adds	r3, #1
 801050e:	68ba      	ldr	r2, [r7, #8]
 8010510:	4413      	add	r3, r2
 8010512:	2200      	movs	r2, #0
 8010514:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010516:	7dfb      	ldrb	r3, [r7, #23]
 8010518:	3301      	adds	r3, #1
 801051a:	75fb      	strb	r3, [r7, #23]
 801051c:	7dfa      	ldrb	r2, [r7, #23]
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	429a      	cmp	r2, r3
 8010522:	d3d3      	bcc.n	80104cc <IntToUnicode+0x18>
  }
}
 8010524:	bf00      	nop
 8010526:	bf00      	nop
 8010528:	371c      	adds	r7, #28
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
	...

08010534 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b0ac      	sub	sp, #176	; 0xb0
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801053c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]
 8010544:	605a      	str	r2, [r3, #4]
 8010546:	609a      	str	r2, [r3, #8]
 8010548:	60da      	str	r2, [r3, #12]
 801054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801054c:	f107 0314 	add.w	r3, r7, #20
 8010550:	2288      	movs	r2, #136	; 0x88
 8010552:	2100      	movs	r1, #0
 8010554:	4618      	mov	r0, r3
 8010556:	f001 fbe0 	bl	8011d1a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010562:	d164      	bne.n	801062e <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010568:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801056a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801056e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010572:	f107 0314 	add.w	r3, r7, #20
 8010576:	4618      	mov	r0, r3
 8010578:	f7f5 fa98 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8010582:	f7f0 fed1 	bl	8001328 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010586:	4b2c      	ldr	r3, [pc, #176]	; (8010638 <HAL_PCD_MspInit+0x104>)
 8010588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801058a:	4a2b      	ldr	r2, [pc, #172]	; (8010638 <HAL_PCD_MspInit+0x104>)
 801058c:	f043 0301 	orr.w	r3, r3, #1
 8010590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010592:	4b29      	ldr	r3, [pc, #164]	; (8010638 <HAL_PCD_MspInit+0x104>)
 8010594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	613b      	str	r3, [r7, #16]
 801059c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801059e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80105a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105a6:	2302      	movs	r3, #2
 80105a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105ac:	2300      	movs	r3, #0
 80105ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105b2:	2303      	movs	r3, #3
 80105b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80105b8:	230a      	movs	r3, #10
 80105ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80105c2:	4619      	mov	r1, r3
 80105c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80105c8:	f7f2 fa44 	bl	8002a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105cc:	4b1a      	ldr	r3, [pc, #104]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105d0:	4a19      	ldr	r2, [pc, #100]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80105d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80105d8:	4b17      	ldr	r3, [pc, #92]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80105e0:	60fb      	str	r3, [r7, #12]
 80105e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80105e4:	4b14      	ldr	r3, [pc, #80]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d114      	bne.n	801061a <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80105f0:	4b11      	ldr	r3, [pc, #68]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105f4:	4a10      	ldr	r2, [pc, #64]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105fa:	6593      	str	r3, [r2, #88]	; 0x58
 80105fc:	4b0e      	ldr	r3, [pc, #56]	; (8010638 <HAL_PCD_MspInit+0x104>)
 80105fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010604:	60bb      	str	r3, [r7, #8]
 8010606:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010608:	f7f4 fc26 	bl	8004e58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801060c:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <HAL_PCD_MspInit+0x104>)
 801060e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010610:	4a09      	ldr	r2, [pc, #36]	; (8010638 <HAL_PCD_MspInit+0x104>)
 8010612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010616:	6593      	str	r3, [r2, #88]	; 0x58
 8010618:	e001      	b.n	801061e <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801061a:	f7f4 fc1d 	bl	8004e58 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801061e:	2200      	movs	r2, #0
 8010620:	2100      	movs	r1, #0
 8010622:	2043      	movs	r0, #67	; 0x43
 8010624:	f7f1 ffa7 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010628:	2043      	movs	r0, #67	; 0x43
 801062a:	f7f1 ffc0 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801062e:	bf00      	nop
 8010630:	37b0      	adds	r7, #176	; 0xb0
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	40021000 	.word	0x40021000

0801063c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010650:	4619      	mov	r1, r3
 8010652:	4610      	mov	r0, r2
 8010654:	f7fb fa7b 	bl	800bb4e <USBD_LL_SetupStage>
}
 8010658:	bf00      	nop
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010672:	78fa      	ldrb	r2, [r7, #3]
 8010674:	6879      	ldr	r1, [r7, #4]
 8010676:	4613      	mov	r3, r2
 8010678:	00db      	lsls	r3, r3, #3
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	440b      	add	r3, r1
 8010680:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	78fb      	ldrb	r3, [r7, #3]
 8010688:	4619      	mov	r1, r3
 801068a:	f7fb fab5 	bl	800bbf8 <USBD_LL_DataOutStage>
}
 801068e:	bf00      	nop
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b082      	sub	sp, #8
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	460b      	mov	r3, r1
 80106a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80106a8:	78fa      	ldrb	r2, [r7, #3]
 80106aa:	6879      	ldr	r1, [r7, #4]
 80106ac:	4613      	mov	r3, r2
 80106ae:	00db      	lsls	r3, r3, #3
 80106b0:	4413      	add	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	440b      	add	r3, r1
 80106b6:	3348      	adds	r3, #72	; 0x48
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	78fb      	ldrb	r3, [r7, #3]
 80106bc:	4619      	mov	r1, r3
 80106be:	f7fb fb4e 	bl	800bd5e <USBD_LL_DataInStage>
}
 80106c2:	bf00      	nop
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b082      	sub	sp, #8
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fb fc88 	bl	800bfee <USBD_LL_SOF>
}
 80106de:	bf00      	nop
 80106e0:	3708      	adds	r7, #8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106e6:	b580      	push	{r7, lr}
 80106e8:	b084      	sub	sp, #16
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106ee:	2301      	movs	r3, #1
 80106f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	2b02      	cmp	r3, #2
 80106f8:	d001      	beq.n	80106fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80106fa:	f7f0 fe15 	bl	8001328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010704:	7bfa      	ldrb	r2, [r7, #15]
 8010706:	4611      	mov	r1, r2
 8010708:	4618      	mov	r0, r3
 801070a:	f7fb fc2c 	bl	800bf66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010714:	4618      	mov	r0, r3
 8010716:	f7fb fbd4 	bl	800bec2 <USBD_LL_Reset>
}
 801071a:	bf00      	nop
 801071c:	3710      	adds	r7, #16
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
	...

08010724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	6812      	ldr	r2, [r2, #0]
 801073a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801073e:	f043 0301 	orr.w	r3, r3, #1
 8010742:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801074a:	4618      	mov	r0, r3
 801074c:	f7fb fc1b 	bl	800bf86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6a1b      	ldr	r3, [r3, #32]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d005      	beq.n	8010764 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010758:	4b04      	ldr	r3, [pc, #16]	; (801076c <HAL_PCD_SuspendCallback+0x48>)
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	4a03      	ldr	r2, [pc, #12]	; (801076c <HAL_PCD_SuspendCallback+0x48>)
 801075e:	f043 0306 	orr.w	r3, r3, #6
 8010762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010764:	bf00      	nop
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	e000ed00 	.word	0xe000ed00

08010770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	6812      	ldr	r2, [r2, #0]
 8010786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801078a:	f023 0301 	bic.w	r3, r3, #1
 801078e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6a1b      	ldr	r3, [r3, #32]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d007      	beq.n	80107a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010798:	4b08      	ldr	r3, [pc, #32]	; (80107bc <HAL_PCD_ResumeCallback+0x4c>)
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	4a07      	ldr	r2, [pc, #28]	; (80107bc <HAL_PCD_ResumeCallback+0x4c>)
 801079e:	f023 0306 	bic.w	r3, r3, #6
 80107a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80107a4:	f000 faf6 	bl	8010d94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fb fc05 	bl	800bfbe <USBD_LL_Resume>
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	e000ed00 	.word	0xe000ed00

080107c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	460b      	mov	r3, r1
 80107ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107d2:	78fa      	ldrb	r2, [r7, #3]
 80107d4:	4611      	mov	r1, r2
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fb fc5b 	bl	800c092 <USBD_LL_IsoOUTIncomplete>
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	460b      	mov	r3, r1
 80107ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80107f6:	78fa      	ldrb	r2, [r7, #3]
 80107f8:	4611      	mov	r1, r2
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fb fc17 	bl	800c02e <USBD_LL_IsoINIncomplete>
}
 8010800:	bf00      	nop
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010816:	4618      	mov	r0, r3
 8010818:	f7fb fc6d 	bl	800c0f6 <USBD_LL_DevConnected>
}
 801081c:	bf00      	nop
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010832:	4618      	mov	r0, r3
 8010834:	f7fb fc6a 	bl	800c10c <USBD_LL_DevDisconnected>
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d13c      	bne.n	80108ca <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010850:	4a20      	ldr	r2, [pc, #128]	; (80108d4 <USBD_LL_Init+0x94>)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4a1e      	ldr	r2, [pc, #120]	; (80108d4 <USBD_LL_Init+0x94>)
 801085c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010860:	4b1c      	ldr	r3, [pc, #112]	; (80108d4 <USBD_LL_Init+0x94>)
 8010862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010868:	4b1a      	ldr	r3, [pc, #104]	; (80108d4 <USBD_LL_Init+0x94>)
 801086a:	2206      	movs	r2, #6
 801086c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801086e:	4b19      	ldr	r3, [pc, #100]	; (80108d4 <USBD_LL_Init+0x94>)
 8010870:	2202      	movs	r2, #2
 8010872:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010874:	4b17      	ldr	r3, [pc, #92]	; (80108d4 <USBD_LL_Init+0x94>)
 8010876:	2202      	movs	r2, #2
 8010878:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801087a:	4b16      	ldr	r3, [pc, #88]	; (80108d4 <USBD_LL_Init+0x94>)
 801087c:	2200      	movs	r2, #0
 801087e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010880:	4b14      	ldr	r3, [pc, #80]	; (80108d4 <USBD_LL_Init+0x94>)
 8010882:	2200      	movs	r2, #0
 8010884:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010886:	4b13      	ldr	r3, [pc, #76]	; (80108d4 <USBD_LL_Init+0x94>)
 8010888:	2200      	movs	r2, #0
 801088a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801088c:	4b11      	ldr	r3, [pc, #68]	; (80108d4 <USBD_LL_Init+0x94>)
 801088e:	2200      	movs	r2, #0
 8010890:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010892:	4b10      	ldr	r3, [pc, #64]	; (80108d4 <USBD_LL_Init+0x94>)
 8010894:	2200      	movs	r2, #0
 8010896:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010898:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <USBD_LL_Init+0x94>)
 801089a:	2200      	movs	r2, #0
 801089c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801089e:	480d      	ldr	r0, [pc, #52]	; (80108d4 <USBD_LL_Init+0x94>)
 80108a0:	f7f3 f8cf 	bl	8003a42 <HAL_PCD_Init>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d001      	beq.n	80108ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80108aa:	f7f0 fd3d 	bl	8001328 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80108ae:	2180      	movs	r1, #128	; 0x80
 80108b0:	4808      	ldr	r0, [pc, #32]	; (80108d4 <USBD_LL_Init+0x94>)
 80108b2:	f7f4 fa38 	bl	8004d26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80108b6:	2240      	movs	r2, #64	; 0x40
 80108b8:	2100      	movs	r1, #0
 80108ba:	4806      	ldr	r0, [pc, #24]	; (80108d4 <USBD_LL_Init+0x94>)
 80108bc:	f7f4 f9ec 	bl	8004c98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80108c0:	2280      	movs	r2, #128	; 0x80
 80108c2:	2101      	movs	r1, #1
 80108c4:	4803      	ldr	r0, [pc, #12]	; (80108d4 <USBD_LL_Init+0x94>)
 80108c6:	f7f4 f9e7 	bl	8004c98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	2000bc84 	.word	0x2000bc84

080108d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108e0:	2300      	movs	r3, #0
 80108e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108e4:	2300      	movs	r3, #0
 80108e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7f3 f9cb 	bl	8003c8a <HAL_PCD_Start>
 80108f4:	4603      	mov	r3, r0
 80108f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80108f8:	7bbb      	ldrb	r3, [r7, #14]
 80108fa:	2b03      	cmp	r3, #3
 80108fc:	d816      	bhi.n	801092c <USBD_LL_Start+0x54>
 80108fe:	a201      	add	r2, pc, #4	; (adr r2, 8010904 <USBD_LL_Start+0x2c>)
 8010900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010904:	08010915 	.word	0x08010915
 8010908:	0801091b 	.word	0x0801091b
 801090c:	08010921 	.word	0x08010921
 8010910:	08010927 	.word	0x08010927
    case HAL_OK :
      usb_status = USBD_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	73fb      	strb	r3, [r7, #15]
    break;
 8010918:	e00b      	b.n	8010932 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801091a:	2303      	movs	r3, #3
 801091c:	73fb      	strb	r3, [r7, #15]
    break;
 801091e:	e008      	b.n	8010932 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010920:	2301      	movs	r3, #1
 8010922:	73fb      	strb	r3, [r7, #15]
    break;
 8010924:	e005      	b.n	8010932 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010926:	2303      	movs	r3, #3
 8010928:	73fb      	strb	r3, [r7, #15]
    break;
 801092a:	e002      	b.n	8010932 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801092c:	2303      	movs	r3, #3
 801092e:	73fb      	strb	r3, [r7, #15]
    break;
 8010930:	bf00      	nop
  }
  return usb_status;
 8010932:	7bfb      	ldrb	r3, [r7, #15]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3710      	adds	r7, #16
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	4608      	mov	r0, r1
 8010946:	4611      	mov	r1, r2
 8010948:	461a      	mov	r2, r3
 801094a:	4603      	mov	r3, r0
 801094c:	70fb      	strb	r3, [r7, #3]
 801094e:	460b      	mov	r3, r1
 8010950:	70bb      	strb	r3, [r7, #2]
 8010952:	4613      	mov	r3, r2
 8010954:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010956:	2300      	movs	r3, #0
 8010958:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801095a:	2300      	movs	r3, #0
 801095c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010964:	78bb      	ldrb	r3, [r7, #2]
 8010966:	883a      	ldrh	r2, [r7, #0]
 8010968:	78f9      	ldrb	r1, [r7, #3]
 801096a:	f7f3 fe75 	bl	8004658 <HAL_PCD_EP_Open>
 801096e:	4603      	mov	r3, r0
 8010970:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010972:	7bbb      	ldrb	r3, [r7, #14]
 8010974:	2b03      	cmp	r3, #3
 8010976:	d817      	bhi.n	80109a8 <USBD_LL_OpenEP+0x6c>
 8010978:	a201      	add	r2, pc, #4	; (adr r2, 8010980 <USBD_LL_OpenEP+0x44>)
 801097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801097e:	bf00      	nop
 8010980:	08010991 	.word	0x08010991
 8010984:	08010997 	.word	0x08010997
 8010988:	0801099d 	.word	0x0801099d
 801098c:	080109a3 	.word	0x080109a3
    case HAL_OK :
      usb_status = USBD_OK;
 8010990:	2300      	movs	r3, #0
 8010992:	73fb      	strb	r3, [r7, #15]
    break;
 8010994:	e00b      	b.n	80109ae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010996:	2303      	movs	r3, #3
 8010998:	73fb      	strb	r3, [r7, #15]
    break;
 801099a:	e008      	b.n	80109ae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801099c:	2301      	movs	r3, #1
 801099e:	73fb      	strb	r3, [r7, #15]
    break;
 80109a0:	e005      	b.n	80109ae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109a2:	2303      	movs	r3, #3
 80109a4:	73fb      	strb	r3, [r7, #15]
    break;
 80109a6:	e002      	b.n	80109ae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80109a8:	2303      	movs	r3, #3
 80109aa:	73fb      	strb	r3, [r7, #15]
    break;
 80109ac:	bf00      	nop
  }
  return usb_status;
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109c4:	2300      	movs	r3, #0
 80109c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109c8:	2300      	movs	r3, #0
 80109ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109d2:	78fa      	ldrb	r2, [r7, #3]
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7f3 fea6 	bl	8004728 <HAL_PCD_EP_Close>
 80109dc:	4603      	mov	r3, r0
 80109de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	2b03      	cmp	r3, #3
 80109e4:	d816      	bhi.n	8010a14 <USBD_LL_CloseEP+0x5c>
 80109e6:	a201      	add	r2, pc, #4	; (adr r2, 80109ec <USBD_LL_CloseEP+0x34>)
 80109e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ec:	080109fd 	.word	0x080109fd
 80109f0:	08010a03 	.word	0x08010a03
 80109f4:	08010a09 	.word	0x08010a09
 80109f8:	08010a0f 	.word	0x08010a0f
    case HAL_OK :
      usb_status = USBD_OK;
 80109fc:	2300      	movs	r3, #0
 80109fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010a00:	e00b      	b.n	8010a1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a02:	2303      	movs	r3, #3
 8010a04:	73fb      	strb	r3, [r7, #15]
    break;
 8010a06:	e008      	b.n	8010a1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a0c:	e005      	b.n	8010a1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	73fb      	strb	r3, [r7, #15]
    break;
 8010a12:	e002      	b.n	8010a1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010a14:	2303      	movs	r3, #3
 8010a16:	73fb      	strb	r3, [r7, #15]
    break;
 8010a18:	bf00      	nop
  }
  return usb_status;
 8010a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a30:	2300      	movs	r3, #0
 8010a32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a3e:	78fa      	ldrb	r2, [r7, #3]
 8010a40:	4611      	mov	r1, r2
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7f3 ff35 	bl	80048b2 <HAL_PCD_EP_SetStall>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010a4c:	7bbb      	ldrb	r3, [r7, #14]
 8010a4e:	2b03      	cmp	r3, #3
 8010a50:	d816      	bhi.n	8010a80 <USBD_LL_StallEP+0x5c>
 8010a52:	a201      	add	r2, pc, #4	; (adr r2, 8010a58 <USBD_LL_StallEP+0x34>)
 8010a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a58:	08010a69 	.word	0x08010a69
 8010a5c:	08010a6f 	.word	0x08010a6f
 8010a60:	08010a75 	.word	0x08010a75
 8010a64:	08010a7b 	.word	0x08010a7b
    case HAL_OK :
      usb_status = USBD_OK;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a6c:	e00b      	b.n	8010a86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a6e:	2303      	movs	r3, #3
 8010a70:	73fb      	strb	r3, [r7, #15]
    break;
 8010a72:	e008      	b.n	8010a86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a74:	2301      	movs	r3, #1
 8010a76:	73fb      	strb	r3, [r7, #15]
    break;
 8010a78:	e005      	b.n	8010a86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a7a:	2303      	movs	r3, #3
 8010a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8010a7e:	e002      	b.n	8010a86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010a80:	2303      	movs	r3, #3
 8010a82:	73fb      	strb	r3, [r7, #15]
    break;
 8010a84:	bf00      	nop
  }
  return usb_status;
 8010a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3710      	adds	r7, #16
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	460b      	mov	r3, r1
 8010a9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010aaa:	78fa      	ldrb	r2, [r7, #3]
 8010aac:	4611      	mov	r1, r2
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7f3 ff61 	bl	8004976 <HAL_PCD_EP_ClrStall>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010ab8:	7bbb      	ldrb	r3, [r7, #14]
 8010aba:	2b03      	cmp	r3, #3
 8010abc:	d816      	bhi.n	8010aec <USBD_LL_ClearStallEP+0x5c>
 8010abe:	a201      	add	r2, pc, #4	; (adr r2, 8010ac4 <USBD_LL_ClearStallEP+0x34>)
 8010ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac4:	08010ad5 	.word	0x08010ad5
 8010ac8:	08010adb 	.word	0x08010adb
 8010acc:	08010ae1 	.word	0x08010ae1
 8010ad0:	08010ae7 	.word	0x08010ae7
    case HAL_OK :
      usb_status = USBD_OK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ad8:	e00b      	b.n	8010af2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ada:	2303      	movs	r3, #3
 8010adc:	73fb      	strb	r3, [r7, #15]
    break;
 8010ade:	e008      	b.n	8010af2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae4:	e005      	b.n	8010af2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8010aea:	e002      	b.n	8010af2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010aec:	2303      	movs	r3, #3
 8010aee:	73fb      	strb	r3, [r7, #15]
    break;
 8010af0:	bf00      	nop
  }
  return usb_status;
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	460b      	mov	r3, r1
 8010b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da0b      	bge.n	8010b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b18:	78fb      	ldrb	r3, [r7, #3]
 8010b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b1e:	68f9      	ldr	r1, [r7, #12]
 8010b20:	4613      	mov	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	4413      	add	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	440b      	add	r3, r1
 8010b2a:	333e      	adds	r3, #62	; 0x3e
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	e00b      	b.n	8010b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b30:	78fb      	ldrb	r3, [r7, #3]
 8010b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b36:	68f9      	ldr	r1, [r7, #12]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	00db      	lsls	r3, r3, #3
 8010b3c:	4413      	add	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	440b      	add	r3, r1
 8010b42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3714      	adds	r7, #20
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b6e:	78fa      	ldrb	r2, [r7, #3]
 8010b70:	4611      	mov	r1, r2
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7f3 fd4b 	bl	800460e <HAL_PCD_SetAddress>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010b7c:	7bbb      	ldrb	r3, [r7, #14]
 8010b7e:	2b03      	cmp	r3, #3
 8010b80:	d816      	bhi.n	8010bb0 <USBD_LL_SetUSBAddress+0x5c>
 8010b82:	a201      	add	r2, pc, #4	; (adr r2, 8010b88 <USBD_LL_SetUSBAddress+0x34>)
 8010b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b88:	08010b99 	.word	0x08010b99
 8010b8c:	08010b9f 	.word	0x08010b9f
 8010b90:	08010ba5 	.word	0x08010ba5
 8010b94:	08010bab 	.word	0x08010bab
    case HAL_OK :
      usb_status = USBD_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b9c:	e00b      	b.n	8010bb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b9e:	2303      	movs	r3, #3
 8010ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ba2:	e008      	b.n	8010bb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ba8:	e005      	b.n	8010bb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010baa:	2303      	movs	r3, #3
 8010bac:	73fb      	strb	r3, [r7, #15]
    break;
 8010bae:	e002      	b.n	8010bb6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8010bb4:	bf00      	nop
  }
  return usb_status;
 8010bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	607a      	str	r2, [r7, #4]
 8010bca:	603b      	str	r3, [r7, #0]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010bde:	7af9      	ldrb	r1, [r7, #11]
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	f7f3 fe34 	bl	8004850 <HAL_PCD_EP_Transmit>
 8010be8:	4603      	mov	r3, r0
 8010bea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010bec:	7dbb      	ldrb	r3, [r7, #22]
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	d816      	bhi.n	8010c20 <USBD_LL_Transmit+0x60>
 8010bf2:	a201      	add	r2, pc, #4	; (adr r2, 8010bf8 <USBD_LL_Transmit+0x38>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c09 	.word	0x08010c09
 8010bfc:	08010c0f 	.word	0x08010c0f
 8010c00:	08010c15 	.word	0x08010c15
 8010c04:	08010c1b 	.word	0x08010c1b
    case HAL_OK :
      usb_status = USBD_OK;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	75fb      	strb	r3, [r7, #23]
    break;
 8010c0c:	e00b      	b.n	8010c26 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c0e:	2303      	movs	r3, #3
 8010c10:	75fb      	strb	r3, [r7, #23]
    break;
 8010c12:	e008      	b.n	8010c26 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c14:	2301      	movs	r3, #1
 8010c16:	75fb      	strb	r3, [r7, #23]
    break;
 8010c18:	e005      	b.n	8010c26 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c1a:	2303      	movs	r3, #3
 8010c1c:	75fb      	strb	r3, [r7, #23]
    break;
 8010c1e:	e002      	b.n	8010c26 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010c20:	2303      	movs	r3, #3
 8010c22:	75fb      	strb	r3, [r7, #23]
    break;
 8010c24:	bf00      	nop
  }
  return usb_status;
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	607a      	str	r2, [r7, #4]
 8010c3a:	603b      	str	r3, [r7, #0]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010c4e:	7af9      	ldrb	r1, [r7, #11]
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	f7f3 fdb2 	bl	80047bc <HAL_PCD_EP_Receive>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010c5c:	7dbb      	ldrb	r3, [r7, #22]
 8010c5e:	2b03      	cmp	r3, #3
 8010c60:	d816      	bhi.n	8010c90 <USBD_LL_PrepareReceive+0x60>
 8010c62:	a201      	add	r2, pc, #4	; (adr r2, 8010c68 <USBD_LL_PrepareReceive+0x38>)
 8010c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c68:	08010c79 	.word	0x08010c79
 8010c6c:	08010c7f 	.word	0x08010c7f
 8010c70:	08010c85 	.word	0x08010c85
 8010c74:	08010c8b 	.word	0x08010c8b
    case HAL_OK :
      usb_status = USBD_OK;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	75fb      	strb	r3, [r7, #23]
    break;
 8010c7c:	e00b      	b.n	8010c96 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c7e:	2303      	movs	r3, #3
 8010c80:	75fb      	strb	r3, [r7, #23]
    break;
 8010c82:	e008      	b.n	8010c96 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c84:	2301      	movs	r3, #1
 8010c86:	75fb      	strb	r3, [r7, #23]
    break;
 8010c88:	e005      	b.n	8010c96 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c8a:	2303      	movs	r3, #3
 8010c8c:	75fb      	strb	r3, [r7, #23]
    break;
 8010c8e:	e002      	b.n	8010c96 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010c90:	2303      	movs	r3, #3
 8010c92:	75fb      	strb	r3, [r7, #23]
    break;
 8010c94:	bf00      	nop
  }
  return usb_status;
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010cb2:	78fa      	ldrb	r2, [r7, #3]
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7f3 fdb2 	bl	8004820 <HAL_PCD_EP_GetRxCount>
 8010cbc:	4603      	mov	r3, r0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010cd4:	78fb      	ldrb	r3, [r7, #3]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d002      	beq.n	8010ce0 <HAL_PCDEx_LPM_Callback+0x18>
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d01f      	beq.n	8010d1e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010cde:	e03b      	b.n	8010d58 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a1b      	ldr	r3, [r3, #32]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d007      	beq.n	8010cf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010ce8:	f000 f854 	bl	8010d94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010cec:	4b1c      	ldr	r3, [pc, #112]	; (8010d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	4a1b      	ldr	r2, [pc, #108]	; (8010d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8010cf2:	f023 0306 	bic.w	r3, r3, #6
 8010cf6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	6812      	ldr	r2, [r2, #0]
 8010d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d0a:	f023 0301 	bic.w	r3, r3, #1
 8010d0e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fb f951 	bl	800bfbe <USBD_LL_Resume>
    break;
 8010d1c:	e01c      	b.n	8010d58 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	6812      	ldr	r2, [r2, #0]
 8010d2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d30:	f043 0301 	orr.w	r3, r3, #1
 8010d34:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fb f922 	bl	800bf86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6a1b      	ldr	r3, [r3, #32]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d005      	beq.n	8010d56 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d4a:	4b05      	ldr	r3, [pc, #20]	; (8010d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	4a04      	ldr	r2, [pc, #16]	; (8010d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8010d50:	f043 0306 	orr.w	r3, r3, #6
 8010d54:	6113      	str	r3, [r2, #16]
    break;
 8010d56:	bf00      	nop
}
 8010d58:	bf00      	nop
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	e000ed00 	.word	0xe000ed00

08010d64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010d6c:	4b03      	ldr	r3, [pc, #12]	; (8010d7c <USBD_static_malloc+0x18>)
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	370c      	adds	r7, #12
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr
 8010d7a:	bf00      	nop
 8010d7c:	2000c190 	.word	0x2000c190

08010d80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]

}
 8010d88:	bf00      	nop
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010d98:	f7f0 f91c 	bl	8000fd4 <SystemClock_Config>
}
 8010d9c:	bf00      	nop
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <__cvt>:
 8010da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010da4:	ec55 4b10 	vmov	r4, r5, d0
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	460e      	mov	r6, r1
 8010dac:	4619      	mov	r1, r3
 8010dae:	462b      	mov	r3, r5
 8010db0:	bfbb      	ittet	lt
 8010db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010db6:	461d      	movlt	r5, r3
 8010db8:	2300      	movge	r3, #0
 8010dba:	232d      	movlt	r3, #45	; 0x2d
 8010dbc:	700b      	strb	r3, [r1, #0]
 8010dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010dc4:	4691      	mov	r9, r2
 8010dc6:	f023 0820 	bic.w	r8, r3, #32
 8010dca:	bfbc      	itt	lt
 8010dcc:	4622      	movlt	r2, r4
 8010dce:	4614      	movlt	r4, r2
 8010dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010dd4:	d005      	beq.n	8010de2 <__cvt+0x42>
 8010dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010dda:	d100      	bne.n	8010dde <__cvt+0x3e>
 8010ddc:	3601      	adds	r6, #1
 8010dde:	2102      	movs	r1, #2
 8010de0:	e000      	b.n	8010de4 <__cvt+0x44>
 8010de2:	2103      	movs	r1, #3
 8010de4:	ab03      	add	r3, sp, #12
 8010de6:	9301      	str	r3, [sp, #4]
 8010de8:	ab02      	add	r3, sp, #8
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	ec45 4b10 	vmov	d0, r4, r5
 8010df0:	4653      	mov	r3, sl
 8010df2:	4632      	mov	r2, r6
 8010df4:	f001 f8ac 	bl	8011f50 <_dtoa_r>
 8010df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010dfc:	4607      	mov	r7, r0
 8010dfe:	d102      	bne.n	8010e06 <__cvt+0x66>
 8010e00:	f019 0f01 	tst.w	r9, #1
 8010e04:	d022      	beq.n	8010e4c <__cvt+0xac>
 8010e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010e0a:	eb07 0906 	add.w	r9, r7, r6
 8010e0e:	d110      	bne.n	8010e32 <__cvt+0x92>
 8010e10:	783b      	ldrb	r3, [r7, #0]
 8010e12:	2b30      	cmp	r3, #48	; 0x30
 8010e14:	d10a      	bne.n	8010e2c <__cvt+0x8c>
 8010e16:	2200      	movs	r2, #0
 8010e18:	2300      	movs	r3, #0
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	4629      	mov	r1, r5
 8010e1e:	f7ef fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e22:	b918      	cbnz	r0, 8010e2c <__cvt+0x8c>
 8010e24:	f1c6 0601 	rsb	r6, r6, #1
 8010e28:	f8ca 6000 	str.w	r6, [sl]
 8010e2c:	f8da 3000 	ldr.w	r3, [sl]
 8010e30:	4499      	add	r9, r3
 8010e32:	2200      	movs	r2, #0
 8010e34:	2300      	movs	r3, #0
 8010e36:	4620      	mov	r0, r4
 8010e38:	4629      	mov	r1, r5
 8010e3a:	f7ef fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e3e:	b108      	cbz	r0, 8010e44 <__cvt+0xa4>
 8010e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e44:	2230      	movs	r2, #48	; 0x30
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	454b      	cmp	r3, r9
 8010e4a:	d307      	bcc.n	8010e5c <__cvt+0xbc>
 8010e4c:	9b03      	ldr	r3, [sp, #12]
 8010e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e50:	1bdb      	subs	r3, r3, r7
 8010e52:	4638      	mov	r0, r7
 8010e54:	6013      	str	r3, [r2, #0]
 8010e56:	b004      	add	sp, #16
 8010e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e5c:	1c59      	adds	r1, r3, #1
 8010e5e:	9103      	str	r1, [sp, #12]
 8010e60:	701a      	strb	r2, [r3, #0]
 8010e62:	e7f0      	b.n	8010e46 <__cvt+0xa6>

08010e64 <__exponent>:
 8010e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e66:	4603      	mov	r3, r0
 8010e68:	2900      	cmp	r1, #0
 8010e6a:	bfb8      	it	lt
 8010e6c:	4249      	neglt	r1, r1
 8010e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8010e72:	bfb4      	ite	lt
 8010e74:	222d      	movlt	r2, #45	; 0x2d
 8010e76:	222b      	movge	r2, #43	; 0x2b
 8010e78:	2909      	cmp	r1, #9
 8010e7a:	7042      	strb	r2, [r0, #1]
 8010e7c:	dd2a      	ble.n	8010ed4 <__exponent+0x70>
 8010e7e:	f10d 0207 	add.w	r2, sp, #7
 8010e82:	4617      	mov	r7, r2
 8010e84:	260a      	movs	r6, #10
 8010e86:	4694      	mov	ip, r2
 8010e88:	fb91 f5f6 	sdiv	r5, r1, r6
 8010e8c:	fb06 1415 	mls	r4, r6, r5, r1
 8010e90:	3430      	adds	r4, #48	; 0x30
 8010e92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010e96:	460c      	mov	r4, r1
 8010e98:	2c63      	cmp	r4, #99	; 0x63
 8010e9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	dcf1      	bgt.n	8010e86 <__exponent+0x22>
 8010ea2:	3130      	adds	r1, #48	; 0x30
 8010ea4:	f1ac 0402 	sub.w	r4, ip, #2
 8010ea8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010eac:	1c41      	adds	r1, r0, #1
 8010eae:	4622      	mov	r2, r4
 8010eb0:	42ba      	cmp	r2, r7
 8010eb2:	d30a      	bcc.n	8010eca <__exponent+0x66>
 8010eb4:	f10d 0209 	add.w	r2, sp, #9
 8010eb8:	eba2 020c 	sub.w	r2, r2, ip
 8010ebc:	42bc      	cmp	r4, r7
 8010ebe:	bf88      	it	hi
 8010ec0:	2200      	movhi	r2, #0
 8010ec2:	4413      	add	r3, r2
 8010ec4:	1a18      	subs	r0, r3, r0
 8010ec6:	b003      	add	sp, #12
 8010ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010ece:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010ed2:	e7ed      	b.n	8010eb0 <__exponent+0x4c>
 8010ed4:	2330      	movs	r3, #48	; 0x30
 8010ed6:	3130      	adds	r1, #48	; 0x30
 8010ed8:	7083      	strb	r3, [r0, #2]
 8010eda:	70c1      	strb	r1, [r0, #3]
 8010edc:	1d03      	adds	r3, r0, #4
 8010ede:	e7f1      	b.n	8010ec4 <__exponent+0x60>

08010ee0 <_printf_float>:
 8010ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	ed2d 8b02 	vpush	{d8}
 8010ee8:	b08d      	sub	sp, #52	; 0x34
 8010eea:	460c      	mov	r4, r1
 8010eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010ef0:	4616      	mov	r6, r2
 8010ef2:	461f      	mov	r7, r3
 8010ef4:	4605      	mov	r5, r0
 8010ef6:	f000 ff19 	bl	8011d2c <_localeconv_r>
 8010efa:	f8d0 a000 	ldr.w	sl, [r0]
 8010efe:	4650      	mov	r0, sl
 8010f00:	f7ef f9b6 	bl	8000270 <strlen>
 8010f04:	2300      	movs	r3, #0
 8010f06:	930a      	str	r3, [sp, #40]	; 0x28
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	9305      	str	r3, [sp, #20]
 8010f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010f14:	3307      	adds	r3, #7
 8010f16:	f023 0307 	bic.w	r3, r3, #7
 8010f1a:	f103 0208 	add.w	r2, r3, #8
 8010f1e:	f8c8 2000 	str.w	r2, [r8]
 8010f22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010f2a:	9307      	str	r3, [sp, #28]
 8010f2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f30:	ee08 0a10 	vmov	s16, r0
 8010f34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f3c:	4b9e      	ldr	r3, [pc, #632]	; (80111b8 <_printf_float+0x2d8>)
 8010f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f42:	f7ef fdf3 	bl	8000b2c <__aeabi_dcmpun>
 8010f46:	bb88      	cbnz	r0, 8010fac <_printf_float+0xcc>
 8010f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f4c:	4b9a      	ldr	r3, [pc, #616]	; (80111b8 <_printf_float+0x2d8>)
 8010f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f52:	f7ef fdcd 	bl	8000af0 <__aeabi_dcmple>
 8010f56:	bb48      	cbnz	r0, 8010fac <_printf_float+0xcc>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4649      	mov	r1, r9
 8010f60:	f7ef fdbc 	bl	8000adc <__aeabi_dcmplt>
 8010f64:	b110      	cbz	r0, 8010f6c <_printf_float+0x8c>
 8010f66:	232d      	movs	r3, #45	; 0x2d
 8010f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f6c:	4a93      	ldr	r2, [pc, #588]	; (80111bc <_printf_float+0x2dc>)
 8010f6e:	4b94      	ldr	r3, [pc, #592]	; (80111c0 <_printf_float+0x2e0>)
 8010f70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010f74:	bf94      	ite	ls
 8010f76:	4690      	movls	r8, r2
 8010f78:	4698      	movhi	r8, r3
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	6123      	str	r3, [r4, #16]
 8010f7e:	9b05      	ldr	r3, [sp, #20]
 8010f80:	f023 0304 	bic.w	r3, r3, #4
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	f04f 0900 	mov.w	r9, #0
 8010f8a:	9700      	str	r7, [sp, #0]
 8010f8c:	4633      	mov	r3, r6
 8010f8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010f90:	4621      	mov	r1, r4
 8010f92:	4628      	mov	r0, r5
 8010f94:	f000 f9da 	bl	801134c <_printf_common>
 8010f98:	3001      	adds	r0, #1
 8010f9a:	f040 8090 	bne.w	80110be <_printf_float+0x1de>
 8010f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa2:	b00d      	add	sp, #52	; 0x34
 8010fa4:	ecbd 8b02 	vpop	{d8}
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	4642      	mov	r2, r8
 8010fae:	464b      	mov	r3, r9
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	4649      	mov	r1, r9
 8010fb4:	f7ef fdba 	bl	8000b2c <__aeabi_dcmpun>
 8010fb8:	b140      	cbz	r0, 8010fcc <_printf_float+0xec>
 8010fba:	464b      	mov	r3, r9
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	bfbc      	itt	lt
 8010fc0:	232d      	movlt	r3, #45	; 0x2d
 8010fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010fc6:	4a7f      	ldr	r2, [pc, #508]	; (80111c4 <_printf_float+0x2e4>)
 8010fc8:	4b7f      	ldr	r3, [pc, #508]	; (80111c8 <_printf_float+0x2e8>)
 8010fca:	e7d1      	b.n	8010f70 <_printf_float+0x90>
 8010fcc:	6863      	ldr	r3, [r4, #4]
 8010fce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010fd2:	9206      	str	r2, [sp, #24]
 8010fd4:	1c5a      	adds	r2, r3, #1
 8010fd6:	d13f      	bne.n	8011058 <_printf_float+0x178>
 8010fd8:	2306      	movs	r3, #6
 8010fda:	6063      	str	r3, [r4, #4]
 8010fdc:	9b05      	ldr	r3, [sp, #20]
 8010fde:	6861      	ldr	r1, [r4, #4]
 8010fe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	9303      	str	r3, [sp, #12]
 8010fe8:	ab0a      	add	r3, sp, #40	; 0x28
 8010fea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010fee:	ab09      	add	r3, sp, #36	; 0x24
 8010ff0:	ec49 8b10 	vmov	d0, r8, r9
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	6022      	str	r2, [r4, #0]
 8010ff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f7ff fecf 	bl	8010da0 <__cvt>
 8011002:	9b06      	ldr	r3, [sp, #24]
 8011004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011006:	2b47      	cmp	r3, #71	; 0x47
 8011008:	4680      	mov	r8, r0
 801100a:	d108      	bne.n	801101e <_printf_float+0x13e>
 801100c:	1cc8      	adds	r0, r1, #3
 801100e:	db02      	blt.n	8011016 <_printf_float+0x136>
 8011010:	6863      	ldr	r3, [r4, #4]
 8011012:	4299      	cmp	r1, r3
 8011014:	dd41      	ble.n	801109a <_printf_float+0x1ba>
 8011016:	f1ab 0302 	sub.w	r3, fp, #2
 801101a:	fa5f fb83 	uxtb.w	fp, r3
 801101e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011022:	d820      	bhi.n	8011066 <_printf_float+0x186>
 8011024:	3901      	subs	r1, #1
 8011026:	465a      	mov	r2, fp
 8011028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801102c:	9109      	str	r1, [sp, #36]	; 0x24
 801102e:	f7ff ff19 	bl	8010e64 <__exponent>
 8011032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011034:	1813      	adds	r3, r2, r0
 8011036:	2a01      	cmp	r2, #1
 8011038:	4681      	mov	r9, r0
 801103a:	6123      	str	r3, [r4, #16]
 801103c:	dc02      	bgt.n	8011044 <_printf_float+0x164>
 801103e:	6822      	ldr	r2, [r4, #0]
 8011040:	07d2      	lsls	r2, r2, #31
 8011042:	d501      	bpl.n	8011048 <_printf_float+0x168>
 8011044:	3301      	adds	r3, #1
 8011046:	6123      	str	r3, [r4, #16]
 8011048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801104c:	2b00      	cmp	r3, #0
 801104e:	d09c      	beq.n	8010f8a <_printf_float+0xaa>
 8011050:	232d      	movs	r3, #45	; 0x2d
 8011052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011056:	e798      	b.n	8010f8a <_printf_float+0xaa>
 8011058:	9a06      	ldr	r2, [sp, #24]
 801105a:	2a47      	cmp	r2, #71	; 0x47
 801105c:	d1be      	bne.n	8010fdc <_printf_float+0xfc>
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1bc      	bne.n	8010fdc <_printf_float+0xfc>
 8011062:	2301      	movs	r3, #1
 8011064:	e7b9      	b.n	8010fda <_printf_float+0xfa>
 8011066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801106a:	d118      	bne.n	801109e <_printf_float+0x1be>
 801106c:	2900      	cmp	r1, #0
 801106e:	6863      	ldr	r3, [r4, #4]
 8011070:	dd0b      	ble.n	801108a <_printf_float+0x1aa>
 8011072:	6121      	str	r1, [r4, #16]
 8011074:	b913      	cbnz	r3, 801107c <_printf_float+0x19c>
 8011076:	6822      	ldr	r2, [r4, #0]
 8011078:	07d0      	lsls	r0, r2, #31
 801107a:	d502      	bpl.n	8011082 <_printf_float+0x1a2>
 801107c:	3301      	adds	r3, #1
 801107e:	440b      	add	r3, r1
 8011080:	6123      	str	r3, [r4, #16]
 8011082:	65a1      	str	r1, [r4, #88]	; 0x58
 8011084:	f04f 0900 	mov.w	r9, #0
 8011088:	e7de      	b.n	8011048 <_printf_float+0x168>
 801108a:	b913      	cbnz	r3, 8011092 <_printf_float+0x1b2>
 801108c:	6822      	ldr	r2, [r4, #0]
 801108e:	07d2      	lsls	r2, r2, #31
 8011090:	d501      	bpl.n	8011096 <_printf_float+0x1b6>
 8011092:	3302      	adds	r3, #2
 8011094:	e7f4      	b.n	8011080 <_printf_float+0x1a0>
 8011096:	2301      	movs	r3, #1
 8011098:	e7f2      	b.n	8011080 <_printf_float+0x1a0>
 801109a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801109e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110a0:	4299      	cmp	r1, r3
 80110a2:	db05      	blt.n	80110b0 <_printf_float+0x1d0>
 80110a4:	6823      	ldr	r3, [r4, #0]
 80110a6:	6121      	str	r1, [r4, #16]
 80110a8:	07d8      	lsls	r0, r3, #31
 80110aa:	d5ea      	bpl.n	8011082 <_printf_float+0x1a2>
 80110ac:	1c4b      	adds	r3, r1, #1
 80110ae:	e7e7      	b.n	8011080 <_printf_float+0x1a0>
 80110b0:	2900      	cmp	r1, #0
 80110b2:	bfd4      	ite	le
 80110b4:	f1c1 0202 	rsble	r2, r1, #2
 80110b8:	2201      	movgt	r2, #1
 80110ba:	4413      	add	r3, r2
 80110bc:	e7e0      	b.n	8011080 <_printf_float+0x1a0>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	055a      	lsls	r2, r3, #21
 80110c2:	d407      	bmi.n	80110d4 <_printf_float+0x1f4>
 80110c4:	6923      	ldr	r3, [r4, #16]
 80110c6:	4642      	mov	r2, r8
 80110c8:	4631      	mov	r1, r6
 80110ca:	4628      	mov	r0, r5
 80110cc:	47b8      	blx	r7
 80110ce:	3001      	adds	r0, #1
 80110d0:	d12c      	bne.n	801112c <_printf_float+0x24c>
 80110d2:	e764      	b.n	8010f9e <_printf_float+0xbe>
 80110d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80110d8:	f240 80e0 	bls.w	801129c <_printf_float+0x3bc>
 80110dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80110e0:	2200      	movs	r2, #0
 80110e2:	2300      	movs	r3, #0
 80110e4:	f7ef fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d034      	beq.n	8011156 <_printf_float+0x276>
 80110ec:	4a37      	ldr	r2, [pc, #220]	; (80111cc <_printf_float+0x2ec>)
 80110ee:	2301      	movs	r3, #1
 80110f0:	4631      	mov	r1, r6
 80110f2:	4628      	mov	r0, r5
 80110f4:	47b8      	blx	r7
 80110f6:	3001      	adds	r0, #1
 80110f8:	f43f af51 	beq.w	8010f9e <_printf_float+0xbe>
 80110fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011100:	429a      	cmp	r2, r3
 8011102:	db02      	blt.n	801110a <_printf_float+0x22a>
 8011104:	6823      	ldr	r3, [r4, #0]
 8011106:	07d8      	lsls	r0, r3, #31
 8011108:	d510      	bpl.n	801112c <_printf_float+0x24c>
 801110a:	ee18 3a10 	vmov	r3, s16
 801110e:	4652      	mov	r2, sl
 8011110:	4631      	mov	r1, r6
 8011112:	4628      	mov	r0, r5
 8011114:	47b8      	blx	r7
 8011116:	3001      	adds	r0, #1
 8011118:	f43f af41 	beq.w	8010f9e <_printf_float+0xbe>
 801111c:	f04f 0800 	mov.w	r8, #0
 8011120:	f104 091a 	add.w	r9, r4, #26
 8011124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011126:	3b01      	subs	r3, #1
 8011128:	4543      	cmp	r3, r8
 801112a:	dc09      	bgt.n	8011140 <_printf_float+0x260>
 801112c:	6823      	ldr	r3, [r4, #0]
 801112e:	079b      	lsls	r3, r3, #30
 8011130:	f100 8107 	bmi.w	8011342 <_printf_float+0x462>
 8011134:	68e0      	ldr	r0, [r4, #12]
 8011136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011138:	4298      	cmp	r0, r3
 801113a:	bfb8      	it	lt
 801113c:	4618      	movlt	r0, r3
 801113e:	e730      	b.n	8010fa2 <_printf_float+0xc2>
 8011140:	2301      	movs	r3, #1
 8011142:	464a      	mov	r2, r9
 8011144:	4631      	mov	r1, r6
 8011146:	4628      	mov	r0, r5
 8011148:	47b8      	blx	r7
 801114a:	3001      	adds	r0, #1
 801114c:	f43f af27 	beq.w	8010f9e <_printf_float+0xbe>
 8011150:	f108 0801 	add.w	r8, r8, #1
 8011154:	e7e6      	b.n	8011124 <_printf_float+0x244>
 8011156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011158:	2b00      	cmp	r3, #0
 801115a:	dc39      	bgt.n	80111d0 <_printf_float+0x2f0>
 801115c:	4a1b      	ldr	r2, [pc, #108]	; (80111cc <_printf_float+0x2ec>)
 801115e:	2301      	movs	r3, #1
 8011160:	4631      	mov	r1, r6
 8011162:	4628      	mov	r0, r5
 8011164:	47b8      	blx	r7
 8011166:	3001      	adds	r0, #1
 8011168:	f43f af19 	beq.w	8010f9e <_printf_float+0xbe>
 801116c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011170:	4313      	orrs	r3, r2
 8011172:	d102      	bne.n	801117a <_printf_float+0x29a>
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	07d9      	lsls	r1, r3, #31
 8011178:	d5d8      	bpl.n	801112c <_printf_float+0x24c>
 801117a:	ee18 3a10 	vmov	r3, s16
 801117e:	4652      	mov	r2, sl
 8011180:	4631      	mov	r1, r6
 8011182:	4628      	mov	r0, r5
 8011184:	47b8      	blx	r7
 8011186:	3001      	adds	r0, #1
 8011188:	f43f af09 	beq.w	8010f9e <_printf_float+0xbe>
 801118c:	f04f 0900 	mov.w	r9, #0
 8011190:	f104 0a1a 	add.w	sl, r4, #26
 8011194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011196:	425b      	negs	r3, r3
 8011198:	454b      	cmp	r3, r9
 801119a:	dc01      	bgt.n	80111a0 <_printf_float+0x2c0>
 801119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119e:	e792      	b.n	80110c6 <_printf_float+0x1e6>
 80111a0:	2301      	movs	r3, #1
 80111a2:	4652      	mov	r2, sl
 80111a4:	4631      	mov	r1, r6
 80111a6:	4628      	mov	r0, r5
 80111a8:	47b8      	blx	r7
 80111aa:	3001      	adds	r0, #1
 80111ac:	f43f aef7 	beq.w	8010f9e <_printf_float+0xbe>
 80111b0:	f109 0901 	add.w	r9, r9, #1
 80111b4:	e7ee      	b.n	8011194 <_printf_float+0x2b4>
 80111b6:	bf00      	nop
 80111b8:	7fefffff 	.word	0x7fefffff
 80111bc:	08015822 	.word	0x08015822
 80111c0:	08015826 	.word	0x08015826
 80111c4:	0801582a 	.word	0x0801582a
 80111c8:	0801582e 	.word	0x0801582e
 80111cc:	08015832 	.word	0x08015832
 80111d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80111d4:	429a      	cmp	r2, r3
 80111d6:	bfa8      	it	ge
 80111d8:	461a      	movge	r2, r3
 80111da:	2a00      	cmp	r2, #0
 80111dc:	4691      	mov	r9, r2
 80111de:	dc37      	bgt.n	8011250 <_printf_float+0x370>
 80111e0:	f04f 0b00 	mov.w	fp, #0
 80111e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111e8:	f104 021a 	add.w	r2, r4, #26
 80111ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80111ee:	9305      	str	r3, [sp, #20]
 80111f0:	eba3 0309 	sub.w	r3, r3, r9
 80111f4:	455b      	cmp	r3, fp
 80111f6:	dc33      	bgt.n	8011260 <_printf_float+0x380>
 80111f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111fc:	429a      	cmp	r2, r3
 80111fe:	db3b      	blt.n	8011278 <_printf_float+0x398>
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	07da      	lsls	r2, r3, #31
 8011204:	d438      	bmi.n	8011278 <_printf_float+0x398>
 8011206:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801120a:	eba2 0903 	sub.w	r9, r2, r3
 801120e:	9b05      	ldr	r3, [sp, #20]
 8011210:	1ad2      	subs	r2, r2, r3
 8011212:	4591      	cmp	r9, r2
 8011214:	bfa8      	it	ge
 8011216:	4691      	movge	r9, r2
 8011218:	f1b9 0f00 	cmp.w	r9, #0
 801121c:	dc35      	bgt.n	801128a <_printf_float+0x3aa>
 801121e:	f04f 0800 	mov.w	r8, #0
 8011222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011226:	f104 0a1a 	add.w	sl, r4, #26
 801122a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801122e:	1a9b      	subs	r3, r3, r2
 8011230:	eba3 0309 	sub.w	r3, r3, r9
 8011234:	4543      	cmp	r3, r8
 8011236:	f77f af79 	ble.w	801112c <_printf_float+0x24c>
 801123a:	2301      	movs	r3, #1
 801123c:	4652      	mov	r2, sl
 801123e:	4631      	mov	r1, r6
 8011240:	4628      	mov	r0, r5
 8011242:	47b8      	blx	r7
 8011244:	3001      	adds	r0, #1
 8011246:	f43f aeaa 	beq.w	8010f9e <_printf_float+0xbe>
 801124a:	f108 0801 	add.w	r8, r8, #1
 801124e:	e7ec      	b.n	801122a <_printf_float+0x34a>
 8011250:	4613      	mov	r3, r2
 8011252:	4631      	mov	r1, r6
 8011254:	4642      	mov	r2, r8
 8011256:	4628      	mov	r0, r5
 8011258:	47b8      	blx	r7
 801125a:	3001      	adds	r0, #1
 801125c:	d1c0      	bne.n	80111e0 <_printf_float+0x300>
 801125e:	e69e      	b.n	8010f9e <_printf_float+0xbe>
 8011260:	2301      	movs	r3, #1
 8011262:	4631      	mov	r1, r6
 8011264:	4628      	mov	r0, r5
 8011266:	9205      	str	r2, [sp, #20]
 8011268:	47b8      	blx	r7
 801126a:	3001      	adds	r0, #1
 801126c:	f43f ae97 	beq.w	8010f9e <_printf_float+0xbe>
 8011270:	9a05      	ldr	r2, [sp, #20]
 8011272:	f10b 0b01 	add.w	fp, fp, #1
 8011276:	e7b9      	b.n	80111ec <_printf_float+0x30c>
 8011278:	ee18 3a10 	vmov	r3, s16
 801127c:	4652      	mov	r2, sl
 801127e:	4631      	mov	r1, r6
 8011280:	4628      	mov	r0, r5
 8011282:	47b8      	blx	r7
 8011284:	3001      	adds	r0, #1
 8011286:	d1be      	bne.n	8011206 <_printf_float+0x326>
 8011288:	e689      	b.n	8010f9e <_printf_float+0xbe>
 801128a:	9a05      	ldr	r2, [sp, #20]
 801128c:	464b      	mov	r3, r9
 801128e:	4442      	add	r2, r8
 8011290:	4631      	mov	r1, r6
 8011292:	4628      	mov	r0, r5
 8011294:	47b8      	blx	r7
 8011296:	3001      	adds	r0, #1
 8011298:	d1c1      	bne.n	801121e <_printf_float+0x33e>
 801129a:	e680      	b.n	8010f9e <_printf_float+0xbe>
 801129c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801129e:	2a01      	cmp	r2, #1
 80112a0:	dc01      	bgt.n	80112a6 <_printf_float+0x3c6>
 80112a2:	07db      	lsls	r3, r3, #31
 80112a4:	d53a      	bpl.n	801131c <_printf_float+0x43c>
 80112a6:	2301      	movs	r3, #1
 80112a8:	4642      	mov	r2, r8
 80112aa:	4631      	mov	r1, r6
 80112ac:	4628      	mov	r0, r5
 80112ae:	47b8      	blx	r7
 80112b0:	3001      	adds	r0, #1
 80112b2:	f43f ae74 	beq.w	8010f9e <_printf_float+0xbe>
 80112b6:	ee18 3a10 	vmov	r3, s16
 80112ba:	4652      	mov	r2, sl
 80112bc:	4631      	mov	r1, r6
 80112be:	4628      	mov	r0, r5
 80112c0:	47b8      	blx	r7
 80112c2:	3001      	adds	r0, #1
 80112c4:	f43f ae6b 	beq.w	8010f9e <_printf_float+0xbe>
 80112c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80112cc:	2200      	movs	r2, #0
 80112ce:	2300      	movs	r3, #0
 80112d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80112d4:	f7ef fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80112d8:	b9d8      	cbnz	r0, 8011312 <_printf_float+0x432>
 80112da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80112de:	f108 0201 	add.w	r2, r8, #1
 80112e2:	4631      	mov	r1, r6
 80112e4:	4628      	mov	r0, r5
 80112e6:	47b8      	blx	r7
 80112e8:	3001      	adds	r0, #1
 80112ea:	d10e      	bne.n	801130a <_printf_float+0x42a>
 80112ec:	e657      	b.n	8010f9e <_printf_float+0xbe>
 80112ee:	2301      	movs	r3, #1
 80112f0:	4652      	mov	r2, sl
 80112f2:	4631      	mov	r1, r6
 80112f4:	4628      	mov	r0, r5
 80112f6:	47b8      	blx	r7
 80112f8:	3001      	adds	r0, #1
 80112fa:	f43f ae50 	beq.w	8010f9e <_printf_float+0xbe>
 80112fe:	f108 0801 	add.w	r8, r8, #1
 8011302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011304:	3b01      	subs	r3, #1
 8011306:	4543      	cmp	r3, r8
 8011308:	dcf1      	bgt.n	80112ee <_printf_float+0x40e>
 801130a:	464b      	mov	r3, r9
 801130c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011310:	e6da      	b.n	80110c8 <_printf_float+0x1e8>
 8011312:	f04f 0800 	mov.w	r8, #0
 8011316:	f104 0a1a 	add.w	sl, r4, #26
 801131a:	e7f2      	b.n	8011302 <_printf_float+0x422>
 801131c:	2301      	movs	r3, #1
 801131e:	4642      	mov	r2, r8
 8011320:	e7df      	b.n	80112e2 <_printf_float+0x402>
 8011322:	2301      	movs	r3, #1
 8011324:	464a      	mov	r2, r9
 8011326:	4631      	mov	r1, r6
 8011328:	4628      	mov	r0, r5
 801132a:	47b8      	blx	r7
 801132c:	3001      	adds	r0, #1
 801132e:	f43f ae36 	beq.w	8010f9e <_printf_float+0xbe>
 8011332:	f108 0801 	add.w	r8, r8, #1
 8011336:	68e3      	ldr	r3, [r4, #12]
 8011338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801133a:	1a5b      	subs	r3, r3, r1
 801133c:	4543      	cmp	r3, r8
 801133e:	dcf0      	bgt.n	8011322 <_printf_float+0x442>
 8011340:	e6f8      	b.n	8011134 <_printf_float+0x254>
 8011342:	f04f 0800 	mov.w	r8, #0
 8011346:	f104 0919 	add.w	r9, r4, #25
 801134a:	e7f4      	b.n	8011336 <_printf_float+0x456>

0801134c <_printf_common>:
 801134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011350:	4616      	mov	r6, r2
 8011352:	4699      	mov	r9, r3
 8011354:	688a      	ldr	r2, [r1, #8]
 8011356:	690b      	ldr	r3, [r1, #16]
 8011358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801135c:	4293      	cmp	r3, r2
 801135e:	bfb8      	it	lt
 8011360:	4613      	movlt	r3, r2
 8011362:	6033      	str	r3, [r6, #0]
 8011364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011368:	4607      	mov	r7, r0
 801136a:	460c      	mov	r4, r1
 801136c:	b10a      	cbz	r2, 8011372 <_printf_common+0x26>
 801136e:	3301      	adds	r3, #1
 8011370:	6033      	str	r3, [r6, #0]
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	0699      	lsls	r1, r3, #26
 8011376:	bf42      	ittt	mi
 8011378:	6833      	ldrmi	r3, [r6, #0]
 801137a:	3302      	addmi	r3, #2
 801137c:	6033      	strmi	r3, [r6, #0]
 801137e:	6825      	ldr	r5, [r4, #0]
 8011380:	f015 0506 	ands.w	r5, r5, #6
 8011384:	d106      	bne.n	8011394 <_printf_common+0x48>
 8011386:	f104 0a19 	add.w	sl, r4, #25
 801138a:	68e3      	ldr	r3, [r4, #12]
 801138c:	6832      	ldr	r2, [r6, #0]
 801138e:	1a9b      	subs	r3, r3, r2
 8011390:	42ab      	cmp	r3, r5
 8011392:	dc26      	bgt.n	80113e2 <_printf_common+0x96>
 8011394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011398:	1e13      	subs	r3, r2, #0
 801139a:	6822      	ldr	r2, [r4, #0]
 801139c:	bf18      	it	ne
 801139e:	2301      	movne	r3, #1
 80113a0:	0692      	lsls	r2, r2, #26
 80113a2:	d42b      	bmi.n	80113fc <_printf_common+0xb0>
 80113a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113a8:	4649      	mov	r1, r9
 80113aa:	4638      	mov	r0, r7
 80113ac:	47c0      	blx	r8
 80113ae:	3001      	adds	r0, #1
 80113b0:	d01e      	beq.n	80113f0 <_printf_common+0xa4>
 80113b2:	6823      	ldr	r3, [r4, #0]
 80113b4:	6922      	ldr	r2, [r4, #16]
 80113b6:	f003 0306 	and.w	r3, r3, #6
 80113ba:	2b04      	cmp	r3, #4
 80113bc:	bf02      	ittt	eq
 80113be:	68e5      	ldreq	r5, [r4, #12]
 80113c0:	6833      	ldreq	r3, [r6, #0]
 80113c2:	1aed      	subeq	r5, r5, r3
 80113c4:	68a3      	ldr	r3, [r4, #8]
 80113c6:	bf0c      	ite	eq
 80113c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113cc:	2500      	movne	r5, #0
 80113ce:	4293      	cmp	r3, r2
 80113d0:	bfc4      	itt	gt
 80113d2:	1a9b      	subgt	r3, r3, r2
 80113d4:	18ed      	addgt	r5, r5, r3
 80113d6:	2600      	movs	r6, #0
 80113d8:	341a      	adds	r4, #26
 80113da:	42b5      	cmp	r5, r6
 80113dc:	d11a      	bne.n	8011414 <_printf_common+0xc8>
 80113de:	2000      	movs	r0, #0
 80113e0:	e008      	b.n	80113f4 <_printf_common+0xa8>
 80113e2:	2301      	movs	r3, #1
 80113e4:	4652      	mov	r2, sl
 80113e6:	4649      	mov	r1, r9
 80113e8:	4638      	mov	r0, r7
 80113ea:	47c0      	blx	r8
 80113ec:	3001      	adds	r0, #1
 80113ee:	d103      	bne.n	80113f8 <_printf_common+0xac>
 80113f0:	f04f 30ff 	mov.w	r0, #4294967295
 80113f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f8:	3501      	adds	r5, #1
 80113fa:	e7c6      	b.n	801138a <_printf_common+0x3e>
 80113fc:	18e1      	adds	r1, r4, r3
 80113fe:	1c5a      	adds	r2, r3, #1
 8011400:	2030      	movs	r0, #48	; 0x30
 8011402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011406:	4422      	add	r2, r4
 8011408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801140c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011410:	3302      	adds	r3, #2
 8011412:	e7c7      	b.n	80113a4 <_printf_common+0x58>
 8011414:	2301      	movs	r3, #1
 8011416:	4622      	mov	r2, r4
 8011418:	4649      	mov	r1, r9
 801141a:	4638      	mov	r0, r7
 801141c:	47c0      	blx	r8
 801141e:	3001      	adds	r0, #1
 8011420:	d0e6      	beq.n	80113f0 <_printf_common+0xa4>
 8011422:	3601      	adds	r6, #1
 8011424:	e7d9      	b.n	80113da <_printf_common+0x8e>
	...

08011428 <_printf_i>:
 8011428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801142c:	7e0f      	ldrb	r7, [r1, #24]
 801142e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011430:	2f78      	cmp	r7, #120	; 0x78
 8011432:	4691      	mov	r9, r2
 8011434:	4680      	mov	r8, r0
 8011436:	460c      	mov	r4, r1
 8011438:	469a      	mov	sl, r3
 801143a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801143e:	d807      	bhi.n	8011450 <_printf_i+0x28>
 8011440:	2f62      	cmp	r7, #98	; 0x62
 8011442:	d80a      	bhi.n	801145a <_printf_i+0x32>
 8011444:	2f00      	cmp	r7, #0
 8011446:	f000 80d4 	beq.w	80115f2 <_printf_i+0x1ca>
 801144a:	2f58      	cmp	r7, #88	; 0x58
 801144c:	f000 80c0 	beq.w	80115d0 <_printf_i+0x1a8>
 8011450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011458:	e03a      	b.n	80114d0 <_printf_i+0xa8>
 801145a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801145e:	2b15      	cmp	r3, #21
 8011460:	d8f6      	bhi.n	8011450 <_printf_i+0x28>
 8011462:	a101      	add	r1, pc, #4	; (adr r1, 8011468 <_printf_i+0x40>)
 8011464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011468:	080114c1 	.word	0x080114c1
 801146c:	080114d5 	.word	0x080114d5
 8011470:	08011451 	.word	0x08011451
 8011474:	08011451 	.word	0x08011451
 8011478:	08011451 	.word	0x08011451
 801147c:	08011451 	.word	0x08011451
 8011480:	080114d5 	.word	0x080114d5
 8011484:	08011451 	.word	0x08011451
 8011488:	08011451 	.word	0x08011451
 801148c:	08011451 	.word	0x08011451
 8011490:	08011451 	.word	0x08011451
 8011494:	080115d9 	.word	0x080115d9
 8011498:	08011501 	.word	0x08011501
 801149c:	08011593 	.word	0x08011593
 80114a0:	08011451 	.word	0x08011451
 80114a4:	08011451 	.word	0x08011451
 80114a8:	080115fb 	.word	0x080115fb
 80114ac:	08011451 	.word	0x08011451
 80114b0:	08011501 	.word	0x08011501
 80114b4:	08011451 	.word	0x08011451
 80114b8:	08011451 	.word	0x08011451
 80114bc:	0801159b 	.word	0x0801159b
 80114c0:	682b      	ldr	r3, [r5, #0]
 80114c2:	1d1a      	adds	r2, r3, #4
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	602a      	str	r2, [r5, #0]
 80114c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114d0:	2301      	movs	r3, #1
 80114d2:	e09f      	b.n	8011614 <_printf_i+0x1ec>
 80114d4:	6820      	ldr	r0, [r4, #0]
 80114d6:	682b      	ldr	r3, [r5, #0]
 80114d8:	0607      	lsls	r7, r0, #24
 80114da:	f103 0104 	add.w	r1, r3, #4
 80114de:	6029      	str	r1, [r5, #0]
 80114e0:	d501      	bpl.n	80114e6 <_printf_i+0xbe>
 80114e2:	681e      	ldr	r6, [r3, #0]
 80114e4:	e003      	b.n	80114ee <_printf_i+0xc6>
 80114e6:	0646      	lsls	r6, r0, #25
 80114e8:	d5fb      	bpl.n	80114e2 <_printf_i+0xba>
 80114ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	da03      	bge.n	80114fa <_printf_i+0xd2>
 80114f2:	232d      	movs	r3, #45	; 0x2d
 80114f4:	4276      	negs	r6, r6
 80114f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114fa:	485a      	ldr	r0, [pc, #360]	; (8011664 <_printf_i+0x23c>)
 80114fc:	230a      	movs	r3, #10
 80114fe:	e012      	b.n	8011526 <_printf_i+0xfe>
 8011500:	682b      	ldr	r3, [r5, #0]
 8011502:	6820      	ldr	r0, [r4, #0]
 8011504:	1d19      	adds	r1, r3, #4
 8011506:	6029      	str	r1, [r5, #0]
 8011508:	0605      	lsls	r5, r0, #24
 801150a:	d501      	bpl.n	8011510 <_printf_i+0xe8>
 801150c:	681e      	ldr	r6, [r3, #0]
 801150e:	e002      	b.n	8011516 <_printf_i+0xee>
 8011510:	0641      	lsls	r1, r0, #25
 8011512:	d5fb      	bpl.n	801150c <_printf_i+0xe4>
 8011514:	881e      	ldrh	r6, [r3, #0]
 8011516:	4853      	ldr	r0, [pc, #332]	; (8011664 <_printf_i+0x23c>)
 8011518:	2f6f      	cmp	r7, #111	; 0x6f
 801151a:	bf0c      	ite	eq
 801151c:	2308      	moveq	r3, #8
 801151e:	230a      	movne	r3, #10
 8011520:	2100      	movs	r1, #0
 8011522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011526:	6865      	ldr	r5, [r4, #4]
 8011528:	60a5      	str	r5, [r4, #8]
 801152a:	2d00      	cmp	r5, #0
 801152c:	bfa2      	ittt	ge
 801152e:	6821      	ldrge	r1, [r4, #0]
 8011530:	f021 0104 	bicge.w	r1, r1, #4
 8011534:	6021      	strge	r1, [r4, #0]
 8011536:	b90e      	cbnz	r6, 801153c <_printf_i+0x114>
 8011538:	2d00      	cmp	r5, #0
 801153a:	d04b      	beq.n	80115d4 <_printf_i+0x1ac>
 801153c:	4615      	mov	r5, r2
 801153e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011542:	fb03 6711 	mls	r7, r3, r1, r6
 8011546:	5dc7      	ldrb	r7, [r0, r7]
 8011548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801154c:	4637      	mov	r7, r6
 801154e:	42bb      	cmp	r3, r7
 8011550:	460e      	mov	r6, r1
 8011552:	d9f4      	bls.n	801153e <_printf_i+0x116>
 8011554:	2b08      	cmp	r3, #8
 8011556:	d10b      	bne.n	8011570 <_printf_i+0x148>
 8011558:	6823      	ldr	r3, [r4, #0]
 801155a:	07de      	lsls	r6, r3, #31
 801155c:	d508      	bpl.n	8011570 <_printf_i+0x148>
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	6861      	ldr	r1, [r4, #4]
 8011562:	4299      	cmp	r1, r3
 8011564:	bfde      	ittt	le
 8011566:	2330      	movle	r3, #48	; 0x30
 8011568:	f805 3c01 	strble.w	r3, [r5, #-1]
 801156c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011570:	1b52      	subs	r2, r2, r5
 8011572:	6122      	str	r2, [r4, #16]
 8011574:	f8cd a000 	str.w	sl, [sp]
 8011578:	464b      	mov	r3, r9
 801157a:	aa03      	add	r2, sp, #12
 801157c:	4621      	mov	r1, r4
 801157e:	4640      	mov	r0, r8
 8011580:	f7ff fee4 	bl	801134c <_printf_common>
 8011584:	3001      	adds	r0, #1
 8011586:	d14a      	bne.n	801161e <_printf_i+0x1f6>
 8011588:	f04f 30ff 	mov.w	r0, #4294967295
 801158c:	b004      	add	sp, #16
 801158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	f043 0320 	orr.w	r3, r3, #32
 8011598:	6023      	str	r3, [r4, #0]
 801159a:	4833      	ldr	r0, [pc, #204]	; (8011668 <_printf_i+0x240>)
 801159c:	2778      	movs	r7, #120	; 0x78
 801159e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80115a2:	6823      	ldr	r3, [r4, #0]
 80115a4:	6829      	ldr	r1, [r5, #0]
 80115a6:	061f      	lsls	r7, r3, #24
 80115a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80115ac:	d402      	bmi.n	80115b4 <_printf_i+0x18c>
 80115ae:	065f      	lsls	r7, r3, #25
 80115b0:	bf48      	it	mi
 80115b2:	b2b6      	uxthmi	r6, r6
 80115b4:	07df      	lsls	r7, r3, #31
 80115b6:	bf48      	it	mi
 80115b8:	f043 0320 	orrmi.w	r3, r3, #32
 80115bc:	6029      	str	r1, [r5, #0]
 80115be:	bf48      	it	mi
 80115c0:	6023      	strmi	r3, [r4, #0]
 80115c2:	b91e      	cbnz	r6, 80115cc <_printf_i+0x1a4>
 80115c4:	6823      	ldr	r3, [r4, #0]
 80115c6:	f023 0320 	bic.w	r3, r3, #32
 80115ca:	6023      	str	r3, [r4, #0]
 80115cc:	2310      	movs	r3, #16
 80115ce:	e7a7      	b.n	8011520 <_printf_i+0xf8>
 80115d0:	4824      	ldr	r0, [pc, #144]	; (8011664 <_printf_i+0x23c>)
 80115d2:	e7e4      	b.n	801159e <_printf_i+0x176>
 80115d4:	4615      	mov	r5, r2
 80115d6:	e7bd      	b.n	8011554 <_printf_i+0x12c>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	6826      	ldr	r6, [r4, #0]
 80115dc:	6961      	ldr	r1, [r4, #20]
 80115de:	1d18      	adds	r0, r3, #4
 80115e0:	6028      	str	r0, [r5, #0]
 80115e2:	0635      	lsls	r5, r6, #24
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	d501      	bpl.n	80115ec <_printf_i+0x1c4>
 80115e8:	6019      	str	r1, [r3, #0]
 80115ea:	e002      	b.n	80115f2 <_printf_i+0x1ca>
 80115ec:	0670      	lsls	r0, r6, #25
 80115ee:	d5fb      	bpl.n	80115e8 <_printf_i+0x1c0>
 80115f0:	8019      	strh	r1, [r3, #0]
 80115f2:	2300      	movs	r3, #0
 80115f4:	6123      	str	r3, [r4, #16]
 80115f6:	4615      	mov	r5, r2
 80115f8:	e7bc      	b.n	8011574 <_printf_i+0x14c>
 80115fa:	682b      	ldr	r3, [r5, #0]
 80115fc:	1d1a      	adds	r2, r3, #4
 80115fe:	602a      	str	r2, [r5, #0]
 8011600:	681d      	ldr	r5, [r3, #0]
 8011602:	6862      	ldr	r2, [r4, #4]
 8011604:	2100      	movs	r1, #0
 8011606:	4628      	mov	r0, r5
 8011608:	f7ee fde2 	bl	80001d0 <memchr>
 801160c:	b108      	cbz	r0, 8011612 <_printf_i+0x1ea>
 801160e:	1b40      	subs	r0, r0, r5
 8011610:	6060      	str	r0, [r4, #4]
 8011612:	6863      	ldr	r3, [r4, #4]
 8011614:	6123      	str	r3, [r4, #16]
 8011616:	2300      	movs	r3, #0
 8011618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801161c:	e7aa      	b.n	8011574 <_printf_i+0x14c>
 801161e:	6923      	ldr	r3, [r4, #16]
 8011620:	462a      	mov	r2, r5
 8011622:	4649      	mov	r1, r9
 8011624:	4640      	mov	r0, r8
 8011626:	47d0      	blx	sl
 8011628:	3001      	adds	r0, #1
 801162a:	d0ad      	beq.n	8011588 <_printf_i+0x160>
 801162c:	6823      	ldr	r3, [r4, #0]
 801162e:	079b      	lsls	r3, r3, #30
 8011630:	d413      	bmi.n	801165a <_printf_i+0x232>
 8011632:	68e0      	ldr	r0, [r4, #12]
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	4298      	cmp	r0, r3
 8011638:	bfb8      	it	lt
 801163a:	4618      	movlt	r0, r3
 801163c:	e7a6      	b.n	801158c <_printf_i+0x164>
 801163e:	2301      	movs	r3, #1
 8011640:	4632      	mov	r2, r6
 8011642:	4649      	mov	r1, r9
 8011644:	4640      	mov	r0, r8
 8011646:	47d0      	blx	sl
 8011648:	3001      	adds	r0, #1
 801164a:	d09d      	beq.n	8011588 <_printf_i+0x160>
 801164c:	3501      	adds	r5, #1
 801164e:	68e3      	ldr	r3, [r4, #12]
 8011650:	9903      	ldr	r1, [sp, #12]
 8011652:	1a5b      	subs	r3, r3, r1
 8011654:	42ab      	cmp	r3, r5
 8011656:	dcf2      	bgt.n	801163e <_printf_i+0x216>
 8011658:	e7eb      	b.n	8011632 <_printf_i+0x20a>
 801165a:	2500      	movs	r5, #0
 801165c:	f104 0619 	add.w	r6, r4, #25
 8011660:	e7f5      	b.n	801164e <_printf_i+0x226>
 8011662:	bf00      	nop
 8011664:	08015834 	.word	0x08015834
 8011668:	08015845 	.word	0x08015845

0801166c <_scanf_float>:
 801166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011670:	b087      	sub	sp, #28
 8011672:	4617      	mov	r7, r2
 8011674:	9303      	str	r3, [sp, #12]
 8011676:	688b      	ldr	r3, [r1, #8]
 8011678:	1e5a      	subs	r2, r3, #1
 801167a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801167e:	bf83      	ittte	hi
 8011680:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011684:	195b      	addhi	r3, r3, r5
 8011686:	9302      	strhi	r3, [sp, #8]
 8011688:	2300      	movls	r3, #0
 801168a:	bf86      	itte	hi
 801168c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011690:	608b      	strhi	r3, [r1, #8]
 8011692:	9302      	strls	r3, [sp, #8]
 8011694:	680b      	ldr	r3, [r1, #0]
 8011696:	468b      	mov	fp, r1
 8011698:	2500      	movs	r5, #0
 801169a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801169e:	f84b 3b1c 	str.w	r3, [fp], #28
 80116a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80116a6:	4680      	mov	r8, r0
 80116a8:	460c      	mov	r4, r1
 80116aa:	465e      	mov	r6, fp
 80116ac:	46aa      	mov	sl, r5
 80116ae:	46a9      	mov	r9, r5
 80116b0:	9501      	str	r5, [sp, #4]
 80116b2:	68a2      	ldr	r2, [r4, #8]
 80116b4:	b152      	cbz	r2, 80116cc <_scanf_float+0x60>
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	2b4e      	cmp	r3, #78	; 0x4e
 80116bc:	d864      	bhi.n	8011788 <_scanf_float+0x11c>
 80116be:	2b40      	cmp	r3, #64	; 0x40
 80116c0:	d83c      	bhi.n	801173c <_scanf_float+0xd0>
 80116c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80116c6:	b2c8      	uxtb	r0, r1
 80116c8:	280e      	cmp	r0, #14
 80116ca:	d93a      	bls.n	8011742 <_scanf_float+0xd6>
 80116cc:	f1b9 0f00 	cmp.w	r9, #0
 80116d0:	d003      	beq.n	80116da <_scanf_float+0x6e>
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80116d8:	6023      	str	r3, [r4, #0]
 80116da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80116de:	f1ba 0f01 	cmp.w	sl, #1
 80116e2:	f200 8113 	bhi.w	801190c <_scanf_float+0x2a0>
 80116e6:	455e      	cmp	r6, fp
 80116e8:	f200 8105 	bhi.w	80118f6 <_scanf_float+0x28a>
 80116ec:	2501      	movs	r5, #1
 80116ee:	4628      	mov	r0, r5
 80116f0:	b007      	add	sp, #28
 80116f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80116fa:	2a0d      	cmp	r2, #13
 80116fc:	d8e6      	bhi.n	80116cc <_scanf_float+0x60>
 80116fe:	a101      	add	r1, pc, #4	; (adr r1, 8011704 <_scanf_float+0x98>)
 8011700:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011704:	08011843 	.word	0x08011843
 8011708:	080116cd 	.word	0x080116cd
 801170c:	080116cd 	.word	0x080116cd
 8011710:	080116cd 	.word	0x080116cd
 8011714:	080118a3 	.word	0x080118a3
 8011718:	0801187b 	.word	0x0801187b
 801171c:	080116cd 	.word	0x080116cd
 8011720:	080116cd 	.word	0x080116cd
 8011724:	08011851 	.word	0x08011851
 8011728:	080116cd 	.word	0x080116cd
 801172c:	080116cd 	.word	0x080116cd
 8011730:	080116cd 	.word	0x080116cd
 8011734:	080116cd 	.word	0x080116cd
 8011738:	08011809 	.word	0x08011809
 801173c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011740:	e7db      	b.n	80116fa <_scanf_float+0x8e>
 8011742:	290e      	cmp	r1, #14
 8011744:	d8c2      	bhi.n	80116cc <_scanf_float+0x60>
 8011746:	a001      	add	r0, pc, #4	; (adr r0, 801174c <_scanf_float+0xe0>)
 8011748:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801174c:	080117fb 	.word	0x080117fb
 8011750:	080116cd 	.word	0x080116cd
 8011754:	080117fb 	.word	0x080117fb
 8011758:	0801188f 	.word	0x0801188f
 801175c:	080116cd 	.word	0x080116cd
 8011760:	080117a9 	.word	0x080117a9
 8011764:	080117e5 	.word	0x080117e5
 8011768:	080117e5 	.word	0x080117e5
 801176c:	080117e5 	.word	0x080117e5
 8011770:	080117e5 	.word	0x080117e5
 8011774:	080117e5 	.word	0x080117e5
 8011778:	080117e5 	.word	0x080117e5
 801177c:	080117e5 	.word	0x080117e5
 8011780:	080117e5 	.word	0x080117e5
 8011784:	080117e5 	.word	0x080117e5
 8011788:	2b6e      	cmp	r3, #110	; 0x6e
 801178a:	d809      	bhi.n	80117a0 <_scanf_float+0x134>
 801178c:	2b60      	cmp	r3, #96	; 0x60
 801178e:	d8b2      	bhi.n	80116f6 <_scanf_float+0x8a>
 8011790:	2b54      	cmp	r3, #84	; 0x54
 8011792:	d077      	beq.n	8011884 <_scanf_float+0x218>
 8011794:	2b59      	cmp	r3, #89	; 0x59
 8011796:	d199      	bne.n	80116cc <_scanf_float+0x60>
 8011798:	2d07      	cmp	r5, #7
 801179a:	d197      	bne.n	80116cc <_scanf_float+0x60>
 801179c:	2508      	movs	r5, #8
 801179e:	e029      	b.n	80117f4 <_scanf_float+0x188>
 80117a0:	2b74      	cmp	r3, #116	; 0x74
 80117a2:	d06f      	beq.n	8011884 <_scanf_float+0x218>
 80117a4:	2b79      	cmp	r3, #121	; 0x79
 80117a6:	e7f6      	b.n	8011796 <_scanf_float+0x12a>
 80117a8:	6821      	ldr	r1, [r4, #0]
 80117aa:	05c8      	lsls	r0, r1, #23
 80117ac:	d51a      	bpl.n	80117e4 <_scanf_float+0x178>
 80117ae:	9b02      	ldr	r3, [sp, #8]
 80117b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80117b4:	6021      	str	r1, [r4, #0]
 80117b6:	f109 0901 	add.w	r9, r9, #1
 80117ba:	b11b      	cbz	r3, 80117c4 <_scanf_float+0x158>
 80117bc:	3b01      	subs	r3, #1
 80117be:	3201      	adds	r2, #1
 80117c0:	9302      	str	r3, [sp, #8]
 80117c2:	60a2      	str	r2, [r4, #8]
 80117c4:	68a3      	ldr	r3, [r4, #8]
 80117c6:	3b01      	subs	r3, #1
 80117c8:	60a3      	str	r3, [r4, #8]
 80117ca:	6923      	ldr	r3, [r4, #16]
 80117cc:	3301      	adds	r3, #1
 80117ce:	6123      	str	r3, [r4, #16]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	3b01      	subs	r3, #1
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	607b      	str	r3, [r7, #4]
 80117d8:	f340 8084 	ble.w	80118e4 <_scanf_float+0x278>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	3301      	adds	r3, #1
 80117e0:	603b      	str	r3, [r7, #0]
 80117e2:	e766      	b.n	80116b2 <_scanf_float+0x46>
 80117e4:	eb1a 0f05 	cmn.w	sl, r5
 80117e8:	f47f af70 	bne.w	80116cc <_scanf_float+0x60>
 80117ec:	6822      	ldr	r2, [r4, #0]
 80117ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80117f2:	6022      	str	r2, [r4, #0]
 80117f4:	f806 3b01 	strb.w	r3, [r6], #1
 80117f8:	e7e4      	b.n	80117c4 <_scanf_float+0x158>
 80117fa:	6822      	ldr	r2, [r4, #0]
 80117fc:	0610      	lsls	r0, r2, #24
 80117fe:	f57f af65 	bpl.w	80116cc <_scanf_float+0x60>
 8011802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011806:	e7f4      	b.n	80117f2 <_scanf_float+0x186>
 8011808:	f1ba 0f00 	cmp.w	sl, #0
 801180c:	d10e      	bne.n	801182c <_scanf_float+0x1c0>
 801180e:	f1b9 0f00 	cmp.w	r9, #0
 8011812:	d10e      	bne.n	8011832 <_scanf_float+0x1c6>
 8011814:	6822      	ldr	r2, [r4, #0]
 8011816:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801181a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801181e:	d108      	bne.n	8011832 <_scanf_float+0x1c6>
 8011820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011824:	6022      	str	r2, [r4, #0]
 8011826:	f04f 0a01 	mov.w	sl, #1
 801182a:	e7e3      	b.n	80117f4 <_scanf_float+0x188>
 801182c:	f1ba 0f02 	cmp.w	sl, #2
 8011830:	d055      	beq.n	80118de <_scanf_float+0x272>
 8011832:	2d01      	cmp	r5, #1
 8011834:	d002      	beq.n	801183c <_scanf_float+0x1d0>
 8011836:	2d04      	cmp	r5, #4
 8011838:	f47f af48 	bne.w	80116cc <_scanf_float+0x60>
 801183c:	3501      	adds	r5, #1
 801183e:	b2ed      	uxtb	r5, r5
 8011840:	e7d8      	b.n	80117f4 <_scanf_float+0x188>
 8011842:	f1ba 0f01 	cmp.w	sl, #1
 8011846:	f47f af41 	bne.w	80116cc <_scanf_float+0x60>
 801184a:	f04f 0a02 	mov.w	sl, #2
 801184e:	e7d1      	b.n	80117f4 <_scanf_float+0x188>
 8011850:	b97d      	cbnz	r5, 8011872 <_scanf_float+0x206>
 8011852:	f1b9 0f00 	cmp.w	r9, #0
 8011856:	f47f af3c 	bne.w	80116d2 <_scanf_float+0x66>
 801185a:	6822      	ldr	r2, [r4, #0]
 801185c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011860:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011864:	f47f af39 	bne.w	80116da <_scanf_float+0x6e>
 8011868:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801186c:	6022      	str	r2, [r4, #0]
 801186e:	2501      	movs	r5, #1
 8011870:	e7c0      	b.n	80117f4 <_scanf_float+0x188>
 8011872:	2d03      	cmp	r5, #3
 8011874:	d0e2      	beq.n	801183c <_scanf_float+0x1d0>
 8011876:	2d05      	cmp	r5, #5
 8011878:	e7de      	b.n	8011838 <_scanf_float+0x1cc>
 801187a:	2d02      	cmp	r5, #2
 801187c:	f47f af26 	bne.w	80116cc <_scanf_float+0x60>
 8011880:	2503      	movs	r5, #3
 8011882:	e7b7      	b.n	80117f4 <_scanf_float+0x188>
 8011884:	2d06      	cmp	r5, #6
 8011886:	f47f af21 	bne.w	80116cc <_scanf_float+0x60>
 801188a:	2507      	movs	r5, #7
 801188c:	e7b2      	b.n	80117f4 <_scanf_float+0x188>
 801188e:	6822      	ldr	r2, [r4, #0]
 8011890:	0591      	lsls	r1, r2, #22
 8011892:	f57f af1b 	bpl.w	80116cc <_scanf_float+0x60>
 8011896:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801189a:	6022      	str	r2, [r4, #0]
 801189c:	f8cd 9004 	str.w	r9, [sp, #4]
 80118a0:	e7a8      	b.n	80117f4 <_scanf_float+0x188>
 80118a2:	6822      	ldr	r2, [r4, #0]
 80118a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80118a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80118ac:	d006      	beq.n	80118bc <_scanf_float+0x250>
 80118ae:	0550      	lsls	r0, r2, #21
 80118b0:	f57f af0c 	bpl.w	80116cc <_scanf_float+0x60>
 80118b4:	f1b9 0f00 	cmp.w	r9, #0
 80118b8:	f43f af0f 	beq.w	80116da <_scanf_float+0x6e>
 80118bc:	0591      	lsls	r1, r2, #22
 80118be:	bf58      	it	pl
 80118c0:	9901      	ldrpl	r1, [sp, #4]
 80118c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80118c6:	bf58      	it	pl
 80118c8:	eba9 0101 	subpl.w	r1, r9, r1
 80118cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80118d0:	bf58      	it	pl
 80118d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80118d6:	6022      	str	r2, [r4, #0]
 80118d8:	f04f 0900 	mov.w	r9, #0
 80118dc:	e78a      	b.n	80117f4 <_scanf_float+0x188>
 80118de:	f04f 0a03 	mov.w	sl, #3
 80118e2:	e787      	b.n	80117f4 <_scanf_float+0x188>
 80118e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80118e8:	4639      	mov	r1, r7
 80118ea:	4640      	mov	r0, r8
 80118ec:	4798      	blx	r3
 80118ee:	2800      	cmp	r0, #0
 80118f0:	f43f aedf 	beq.w	80116b2 <_scanf_float+0x46>
 80118f4:	e6ea      	b.n	80116cc <_scanf_float+0x60>
 80118f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118fe:	463a      	mov	r2, r7
 8011900:	4640      	mov	r0, r8
 8011902:	4798      	blx	r3
 8011904:	6923      	ldr	r3, [r4, #16]
 8011906:	3b01      	subs	r3, #1
 8011908:	6123      	str	r3, [r4, #16]
 801190a:	e6ec      	b.n	80116e6 <_scanf_float+0x7a>
 801190c:	1e6b      	subs	r3, r5, #1
 801190e:	2b06      	cmp	r3, #6
 8011910:	d825      	bhi.n	801195e <_scanf_float+0x2f2>
 8011912:	2d02      	cmp	r5, #2
 8011914:	d836      	bhi.n	8011984 <_scanf_float+0x318>
 8011916:	455e      	cmp	r6, fp
 8011918:	f67f aee8 	bls.w	80116ec <_scanf_float+0x80>
 801191c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011920:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011924:	463a      	mov	r2, r7
 8011926:	4640      	mov	r0, r8
 8011928:	4798      	blx	r3
 801192a:	6923      	ldr	r3, [r4, #16]
 801192c:	3b01      	subs	r3, #1
 801192e:	6123      	str	r3, [r4, #16]
 8011930:	e7f1      	b.n	8011916 <_scanf_float+0x2aa>
 8011932:	9802      	ldr	r0, [sp, #8]
 8011934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011938:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801193c:	9002      	str	r0, [sp, #8]
 801193e:	463a      	mov	r2, r7
 8011940:	4640      	mov	r0, r8
 8011942:	4798      	blx	r3
 8011944:	6923      	ldr	r3, [r4, #16]
 8011946:	3b01      	subs	r3, #1
 8011948:	6123      	str	r3, [r4, #16]
 801194a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801194e:	fa5f fa8a 	uxtb.w	sl, sl
 8011952:	f1ba 0f02 	cmp.w	sl, #2
 8011956:	d1ec      	bne.n	8011932 <_scanf_float+0x2c6>
 8011958:	3d03      	subs	r5, #3
 801195a:	b2ed      	uxtb	r5, r5
 801195c:	1b76      	subs	r6, r6, r5
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	05da      	lsls	r2, r3, #23
 8011962:	d52f      	bpl.n	80119c4 <_scanf_float+0x358>
 8011964:	055b      	lsls	r3, r3, #21
 8011966:	d510      	bpl.n	801198a <_scanf_float+0x31e>
 8011968:	455e      	cmp	r6, fp
 801196a:	f67f aebf 	bls.w	80116ec <_scanf_float+0x80>
 801196e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011976:	463a      	mov	r2, r7
 8011978:	4640      	mov	r0, r8
 801197a:	4798      	blx	r3
 801197c:	6923      	ldr	r3, [r4, #16]
 801197e:	3b01      	subs	r3, #1
 8011980:	6123      	str	r3, [r4, #16]
 8011982:	e7f1      	b.n	8011968 <_scanf_float+0x2fc>
 8011984:	46aa      	mov	sl, r5
 8011986:	9602      	str	r6, [sp, #8]
 8011988:	e7df      	b.n	801194a <_scanf_float+0x2de>
 801198a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801198e:	6923      	ldr	r3, [r4, #16]
 8011990:	2965      	cmp	r1, #101	; 0x65
 8011992:	f103 33ff 	add.w	r3, r3, #4294967295
 8011996:	f106 35ff 	add.w	r5, r6, #4294967295
 801199a:	6123      	str	r3, [r4, #16]
 801199c:	d00c      	beq.n	80119b8 <_scanf_float+0x34c>
 801199e:	2945      	cmp	r1, #69	; 0x45
 80119a0:	d00a      	beq.n	80119b8 <_scanf_float+0x34c>
 80119a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119a6:	463a      	mov	r2, r7
 80119a8:	4640      	mov	r0, r8
 80119aa:	4798      	blx	r3
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80119b2:	3b01      	subs	r3, #1
 80119b4:	1eb5      	subs	r5, r6, #2
 80119b6:	6123      	str	r3, [r4, #16]
 80119b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119bc:	463a      	mov	r2, r7
 80119be:	4640      	mov	r0, r8
 80119c0:	4798      	blx	r3
 80119c2:	462e      	mov	r6, r5
 80119c4:	6825      	ldr	r5, [r4, #0]
 80119c6:	f015 0510 	ands.w	r5, r5, #16
 80119ca:	d158      	bne.n	8011a7e <_scanf_float+0x412>
 80119cc:	7035      	strb	r5, [r6, #0]
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80119d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119d8:	d11c      	bne.n	8011a14 <_scanf_float+0x3a8>
 80119da:	9b01      	ldr	r3, [sp, #4]
 80119dc:	454b      	cmp	r3, r9
 80119de:	eba3 0209 	sub.w	r2, r3, r9
 80119e2:	d124      	bne.n	8011a2e <_scanf_float+0x3c2>
 80119e4:	2200      	movs	r2, #0
 80119e6:	4659      	mov	r1, fp
 80119e8:	4640      	mov	r0, r8
 80119ea:	f002 fc5d 	bl	80142a8 <_strtod_r>
 80119ee:	9b03      	ldr	r3, [sp, #12]
 80119f0:	6821      	ldr	r1, [r4, #0]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f011 0f02 	tst.w	r1, #2
 80119f8:	ec57 6b10 	vmov	r6, r7, d0
 80119fc:	f103 0204 	add.w	r2, r3, #4
 8011a00:	d020      	beq.n	8011a44 <_scanf_float+0x3d8>
 8011a02:	9903      	ldr	r1, [sp, #12]
 8011a04:	600a      	str	r2, [r1, #0]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	e9c3 6700 	strd	r6, r7, [r3]
 8011a0c:	68e3      	ldr	r3, [r4, #12]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	60e3      	str	r3, [r4, #12]
 8011a12:	e66c      	b.n	80116ee <_scanf_float+0x82>
 8011a14:	9b04      	ldr	r3, [sp, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d0e4      	beq.n	80119e4 <_scanf_float+0x378>
 8011a1a:	9905      	ldr	r1, [sp, #20]
 8011a1c:	230a      	movs	r3, #10
 8011a1e:	462a      	mov	r2, r5
 8011a20:	3101      	adds	r1, #1
 8011a22:	4640      	mov	r0, r8
 8011a24:	f002 fcc8 	bl	80143b8 <_strtol_r>
 8011a28:	9b04      	ldr	r3, [sp, #16]
 8011a2a:	9e05      	ldr	r6, [sp, #20]
 8011a2c:	1ac2      	subs	r2, r0, r3
 8011a2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011a32:	429e      	cmp	r6, r3
 8011a34:	bf28      	it	cs
 8011a36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011a3a:	4912      	ldr	r1, [pc, #72]	; (8011a84 <_scanf_float+0x418>)
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f000 f909 	bl	8011c54 <siprintf>
 8011a42:	e7cf      	b.n	80119e4 <_scanf_float+0x378>
 8011a44:	f011 0f04 	tst.w	r1, #4
 8011a48:	9903      	ldr	r1, [sp, #12]
 8011a4a:	600a      	str	r2, [r1, #0]
 8011a4c:	d1db      	bne.n	8011a06 <_scanf_float+0x39a>
 8011a4e:	f8d3 8000 	ldr.w	r8, [r3]
 8011a52:	ee10 2a10 	vmov	r2, s0
 8011a56:	ee10 0a10 	vmov	r0, s0
 8011a5a:	463b      	mov	r3, r7
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	f7ef f865 	bl	8000b2c <__aeabi_dcmpun>
 8011a62:	b128      	cbz	r0, 8011a70 <_scanf_float+0x404>
 8011a64:	4808      	ldr	r0, [pc, #32]	; (8011a88 <_scanf_float+0x41c>)
 8011a66:	f000 f9e5 	bl	8011e34 <nanf>
 8011a6a:	ed88 0a00 	vstr	s0, [r8]
 8011a6e:	e7cd      	b.n	8011a0c <_scanf_float+0x3a0>
 8011a70:	4630      	mov	r0, r6
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ef f8b8 	bl	8000be8 <__aeabi_d2f>
 8011a78:	f8c8 0000 	str.w	r0, [r8]
 8011a7c:	e7c6      	b.n	8011a0c <_scanf_float+0x3a0>
 8011a7e:	2500      	movs	r5, #0
 8011a80:	e635      	b.n	80116ee <_scanf_float+0x82>
 8011a82:	bf00      	nop
 8011a84:	08015856 	.word	0x08015856
 8011a88:	08015bed 	.word	0x08015bed

08011a8c <std>:
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	b510      	push	{r4, lr}
 8011a90:	4604      	mov	r4, r0
 8011a92:	e9c0 3300 	strd	r3, r3, [r0]
 8011a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a9a:	6083      	str	r3, [r0, #8]
 8011a9c:	8181      	strh	r1, [r0, #12]
 8011a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8011aa0:	81c2      	strh	r2, [r0, #14]
 8011aa2:	6183      	str	r3, [r0, #24]
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	2208      	movs	r2, #8
 8011aa8:	305c      	adds	r0, #92	; 0x5c
 8011aaa:	f000 f936 	bl	8011d1a <memset>
 8011aae:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <std+0x38>)
 8011ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ab2:	4b05      	ldr	r3, [pc, #20]	; (8011ac8 <std+0x3c>)
 8011ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ab6:	4b05      	ldr	r3, [pc, #20]	; (8011acc <std+0x40>)
 8011ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011aba:	4b05      	ldr	r3, [pc, #20]	; (8011ad0 <std+0x44>)
 8011abc:	6224      	str	r4, [r4, #32]
 8011abe:	6323      	str	r3, [r4, #48]	; 0x30
 8011ac0:	bd10      	pop	{r4, pc}
 8011ac2:	bf00      	nop
 8011ac4:	08011c95 	.word	0x08011c95
 8011ac8:	08011cb7 	.word	0x08011cb7
 8011acc:	08011cef 	.word	0x08011cef
 8011ad0:	08011d13 	.word	0x08011d13

08011ad4 <stdio_exit_handler>:
 8011ad4:	4a02      	ldr	r2, [pc, #8]	; (8011ae0 <stdio_exit_handler+0xc>)
 8011ad6:	4903      	ldr	r1, [pc, #12]	; (8011ae4 <stdio_exit_handler+0x10>)
 8011ad8:	4803      	ldr	r0, [pc, #12]	; (8011ae8 <stdio_exit_handler+0x14>)
 8011ada:	f000 b869 	b.w	8011bb0 <_fwalk_sglue>
 8011ade:	bf00      	nop
 8011ae0:	2000010c 	.word	0x2000010c
 8011ae4:	08014779 	.word	0x08014779
 8011ae8:	20000118 	.word	0x20000118

08011aec <cleanup_stdio>:
 8011aec:	6841      	ldr	r1, [r0, #4]
 8011aee:	4b0c      	ldr	r3, [pc, #48]	; (8011b20 <cleanup_stdio+0x34>)
 8011af0:	4299      	cmp	r1, r3
 8011af2:	b510      	push	{r4, lr}
 8011af4:	4604      	mov	r4, r0
 8011af6:	d001      	beq.n	8011afc <cleanup_stdio+0x10>
 8011af8:	f002 fe3e 	bl	8014778 <_fflush_r>
 8011afc:	68a1      	ldr	r1, [r4, #8]
 8011afe:	4b09      	ldr	r3, [pc, #36]	; (8011b24 <cleanup_stdio+0x38>)
 8011b00:	4299      	cmp	r1, r3
 8011b02:	d002      	beq.n	8011b0a <cleanup_stdio+0x1e>
 8011b04:	4620      	mov	r0, r4
 8011b06:	f002 fe37 	bl	8014778 <_fflush_r>
 8011b0a:	68e1      	ldr	r1, [r4, #12]
 8011b0c:	4b06      	ldr	r3, [pc, #24]	; (8011b28 <cleanup_stdio+0x3c>)
 8011b0e:	4299      	cmp	r1, r3
 8011b10:	d004      	beq.n	8011b1c <cleanup_stdio+0x30>
 8011b12:	4620      	mov	r0, r4
 8011b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b18:	f002 be2e 	b.w	8014778 <_fflush_r>
 8011b1c:	bd10      	pop	{r4, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000c3b0 	.word	0x2000c3b0
 8011b24:	2000c418 	.word	0x2000c418
 8011b28:	2000c480 	.word	0x2000c480

08011b2c <global_stdio_init.part.0>:
 8011b2c:	b510      	push	{r4, lr}
 8011b2e:	4b0b      	ldr	r3, [pc, #44]	; (8011b5c <global_stdio_init.part.0+0x30>)
 8011b30:	4c0b      	ldr	r4, [pc, #44]	; (8011b60 <global_stdio_init.part.0+0x34>)
 8011b32:	4a0c      	ldr	r2, [pc, #48]	; (8011b64 <global_stdio_init.part.0+0x38>)
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	4620      	mov	r0, r4
 8011b38:	2200      	movs	r2, #0
 8011b3a:	2104      	movs	r1, #4
 8011b3c:	f7ff ffa6 	bl	8011a8c <std>
 8011b40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011b44:	2201      	movs	r2, #1
 8011b46:	2109      	movs	r1, #9
 8011b48:	f7ff ffa0 	bl	8011a8c <std>
 8011b4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011b50:	2202      	movs	r2, #2
 8011b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b56:	2112      	movs	r1, #18
 8011b58:	f7ff bf98 	b.w	8011a8c <std>
 8011b5c:	2000c4e8 	.word	0x2000c4e8
 8011b60:	2000c3b0 	.word	0x2000c3b0
 8011b64:	08011ad5 	.word	0x08011ad5

08011b68 <__sfp_lock_acquire>:
 8011b68:	4801      	ldr	r0, [pc, #4]	; (8011b70 <__sfp_lock_acquire+0x8>)
 8011b6a:	f000 b953 	b.w	8011e14 <__retarget_lock_acquire_recursive>
 8011b6e:	bf00      	nop
 8011b70:	2000c4f1 	.word	0x2000c4f1

08011b74 <__sfp_lock_release>:
 8011b74:	4801      	ldr	r0, [pc, #4]	; (8011b7c <__sfp_lock_release+0x8>)
 8011b76:	f000 b94e 	b.w	8011e16 <__retarget_lock_release_recursive>
 8011b7a:	bf00      	nop
 8011b7c:	2000c4f1 	.word	0x2000c4f1

08011b80 <__sinit>:
 8011b80:	b510      	push	{r4, lr}
 8011b82:	4604      	mov	r4, r0
 8011b84:	f7ff fff0 	bl	8011b68 <__sfp_lock_acquire>
 8011b88:	6a23      	ldr	r3, [r4, #32]
 8011b8a:	b11b      	cbz	r3, 8011b94 <__sinit+0x14>
 8011b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b90:	f7ff bff0 	b.w	8011b74 <__sfp_lock_release>
 8011b94:	4b04      	ldr	r3, [pc, #16]	; (8011ba8 <__sinit+0x28>)
 8011b96:	6223      	str	r3, [r4, #32]
 8011b98:	4b04      	ldr	r3, [pc, #16]	; (8011bac <__sinit+0x2c>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1f5      	bne.n	8011b8c <__sinit+0xc>
 8011ba0:	f7ff ffc4 	bl	8011b2c <global_stdio_init.part.0>
 8011ba4:	e7f2      	b.n	8011b8c <__sinit+0xc>
 8011ba6:	bf00      	nop
 8011ba8:	08011aed 	.word	0x08011aed
 8011bac:	2000c4e8 	.word	0x2000c4e8

08011bb0 <_fwalk_sglue>:
 8011bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	4688      	mov	r8, r1
 8011bb8:	4614      	mov	r4, r2
 8011bba:	2600      	movs	r6, #0
 8011bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8011bc4:	d505      	bpl.n	8011bd2 <_fwalk_sglue+0x22>
 8011bc6:	6824      	ldr	r4, [r4, #0]
 8011bc8:	2c00      	cmp	r4, #0
 8011bca:	d1f7      	bne.n	8011bbc <_fwalk_sglue+0xc>
 8011bcc:	4630      	mov	r0, r6
 8011bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd2:	89ab      	ldrh	r3, [r5, #12]
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d907      	bls.n	8011be8 <_fwalk_sglue+0x38>
 8011bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	d003      	beq.n	8011be8 <_fwalk_sglue+0x38>
 8011be0:	4629      	mov	r1, r5
 8011be2:	4638      	mov	r0, r7
 8011be4:	47c0      	blx	r8
 8011be6:	4306      	orrs	r6, r0
 8011be8:	3568      	adds	r5, #104	; 0x68
 8011bea:	e7e9      	b.n	8011bc0 <_fwalk_sglue+0x10>

08011bec <sniprintf>:
 8011bec:	b40c      	push	{r2, r3}
 8011bee:	b530      	push	{r4, r5, lr}
 8011bf0:	4b17      	ldr	r3, [pc, #92]	; (8011c50 <sniprintf+0x64>)
 8011bf2:	1e0c      	subs	r4, r1, #0
 8011bf4:	681d      	ldr	r5, [r3, #0]
 8011bf6:	b09d      	sub	sp, #116	; 0x74
 8011bf8:	da08      	bge.n	8011c0c <sniprintf+0x20>
 8011bfa:	238b      	movs	r3, #139	; 0x8b
 8011bfc:	602b      	str	r3, [r5, #0]
 8011bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8011c02:	b01d      	add	sp, #116	; 0x74
 8011c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c08:	b002      	add	sp, #8
 8011c0a:	4770      	bx	lr
 8011c0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011c10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011c14:	bf14      	ite	ne
 8011c16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011c1a:	4623      	moveq	r3, r4
 8011c1c:	9304      	str	r3, [sp, #16]
 8011c1e:	9307      	str	r3, [sp, #28]
 8011c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c24:	9002      	str	r0, [sp, #8]
 8011c26:	9006      	str	r0, [sp, #24]
 8011c28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011c2e:	ab21      	add	r3, sp, #132	; 0x84
 8011c30:	a902      	add	r1, sp, #8
 8011c32:	4628      	mov	r0, r5
 8011c34:	9301      	str	r3, [sp, #4]
 8011c36:	f002 fc1b 	bl	8014470 <_svfiprintf_r>
 8011c3a:	1c43      	adds	r3, r0, #1
 8011c3c:	bfbc      	itt	lt
 8011c3e:	238b      	movlt	r3, #139	; 0x8b
 8011c40:	602b      	strlt	r3, [r5, #0]
 8011c42:	2c00      	cmp	r4, #0
 8011c44:	d0dd      	beq.n	8011c02 <sniprintf+0x16>
 8011c46:	9b02      	ldr	r3, [sp, #8]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	701a      	strb	r2, [r3, #0]
 8011c4c:	e7d9      	b.n	8011c02 <sniprintf+0x16>
 8011c4e:	bf00      	nop
 8011c50:	20000164 	.word	0x20000164

08011c54 <siprintf>:
 8011c54:	b40e      	push	{r1, r2, r3}
 8011c56:	b500      	push	{lr}
 8011c58:	b09c      	sub	sp, #112	; 0x70
 8011c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8011c5c:	9002      	str	r0, [sp, #8]
 8011c5e:	9006      	str	r0, [sp, #24]
 8011c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c64:	4809      	ldr	r0, [pc, #36]	; (8011c8c <siprintf+0x38>)
 8011c66:	9107      	str	r1, [sp, #28]
 8011c68:	9104      	str	r1, [sp, #16]
 8011c6a:	4909      	ldr	r1, [pc, #36]	; (8011c90 <siprintf+0x3c>)
 8011c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c70:	9105      	str	r1, [sp, #20]
 8011c72:	6800      	ldr	r0, [r0, #0]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	a902      	add	r1, sp, #8
 8011c78:	f002 fbfa 	bl	8014470 <_svfiprintf_r>
 8011c7c:	9b02      	ldr	r3, [sp, #8]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	701a      	strb	r2, [r3, #0]
 8011c82:	b01c      	add	sp, #112	; 0x70
 8011c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c88:	b003      	add	sp, #12
 8011c8a:	4770      	bx	lr
 8011c8c:	20000164 	.word	0x20000164
 8011c90:	ffff0208 	.word	0xffff0208

08011c94 <__sread>:
 8011c94:	b510      	push	{r4, lr}
 8011c96:	460c      	mov	r4, r1
 8011c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9c:	f000 f86c 	bl	8011d78 <_read_r>
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	bfab      	itete	ge
 8011ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ca8:	181b      	addge	r3, r3, r0
 8011caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cae:	bfac      	ite	ge
 8011cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cb2:	81a3      	strhlt	r3, [r4, #12]
 8011cb4:	bd10      	pop	{r4, pc}

08011cb6 <__swrite>:
 8011cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cba:	461f      	mov	r7, r3
 8011cbc:	898b      	ldrh	r3, [r1, #12]
 8011cbe:	05db      	lsls	r3, r3, #23
 8011cc0:	4605      	mov	r5, r0
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	4616      	mov	r6, r2
 8011cc6:	d505      	bpl.n	8011cd4 <__swrite+0x1e>
 8011cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ccc:	2302      	movs	r3, #2
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f000 f840 	bl	8011d54 <_lseek_r>
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cde:	81a3      	strh	r3, [r4, #12]
 8011ce0:	4632      	mov	r2, r6
 8011ce2:	463b      	mov	r3, r7
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cea:	f000 b857 	b.w	8011d9c <_write_r>

08011cee <__sseek>:
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	460c      	mov	r4, r1
 8011cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cf6:	f000 f82d 	bl	8011d54 <_lseek_r>
 8011cfa:	1c43      	adds	r3, r0, #1
 8011cfc:	89a3      	ldrh	r3, [r4, #12]
 8011cfe:	bf15      	itete	ne
 8011d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d0a:	81a3      	strheq	r3, [r4, #12]
 8011d0c:	bf18      	it	ne
 8011d0e:	81a3      	strhne	r3, [r4, #12]
 8011d10:	bd10      	pop	{r4, pc}

08011d12 <__sclose>:
 8011d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d16:	f000 b80d 	b.w	8011d34 <_close_r>

08011d1a <memset>:
 8011d1a:	4402      	add	r2, r0
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d100      	bne.n	8011d24 <memset+0xa>
 8011d22:	4770      	bx	lr
 8011d24:	f803 1b01 	strb.w	r1, [r3], #1
 8011d28:	e7f9      	b.n	8011d1e <memset+0x4>
	...

08011d2c <_localeconv_r>:
 8011d2c:	4800      	ldr	r0, [pc, #0]	; (8011d30 <_localeconv_r+0x4>)
 8011d2e:	4770      	bx	lr
 8011d30:	20000258 	.word	0x20000258

08011d34 <_close_r>:
 8011d34:	b538      	push	{r3, r4, r5, lr}
 8011d36:	4d06      	ldr	r5, [pc, #24]	; (8011d50 <_close_r+0x1c>)
 8011d38:	2300      	movs	r3, #0
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	4608      	mov	r0, r1
 8011d3e:	602b      	str	r3, [r5, #0]
 8011d40:	f7f0 f9ff 	bl	8002142 <_close>
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d102      	bne.n	8011d4e <_close_r+0x1a>
 8011d48:	682b      	ldr	r3, [r5, #0]
 8011d4a:	b103      	cbz	r3, 8011d4e <_close_r+0x1a>
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	2000c4ec 	.word	0x2000c4ec

08011d54 <_lseek_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4d07      	ldr	r5, [pc, #28]	; (8011d74 <_lseek_r+0x20>)
 8011d58:	4604      	mov	r4, r0
 8011d5a:	4608      	mov	r0, r1
 8011d5c:	4611      	mov	r1, r2
 8011d5e:	2200      	movs	r2, #0
 8011d60:	602a      	str	r2, [r5, #0]
 8011d62:	461a      	mov	r2, r3
 8011d64:	f7f0 fa14 	bl	8002190 <_lseek>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	d102      	bne.n	8011d72 <_lseek_r+0x1e>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	b103      	cbz	r3, 8011d72 <_lseek_r+0x1e>
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	2000c4ec 	.word	0x2000c4ec

08011d78 <_read_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4d07      	ldr	r5, [pc, #28]	; (8011d98 <_read_r+0x20>)
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	4608      	mov	r0, r1
 8011d80:	4611      	mov	r1, r2
 8011d82:	2200      	movs	r2, #0
 8011d84:	602a      	str	r2, [r5, #0]
 8011d86:	461a      	mov	r2, r3
 8011d88:	f7f0 f9a2 	bl	80020d0 <_read>
 8011d8c:	1c43      	adds	r3, r0, #1
 8011d8e:	d102      	bne.n	8011d96 <_read_r+0x1e>
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	b103      	cbz	r3, 8011d96 <_read_r+0x1e>
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	2000c4ec 	.word	0x2000c4ec

08011d9c <_write_r>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	4d07      	ldr	r5, [pc, #28]	; (8011dbc <_write_r+0x20>)
 8011da0:	4604      	mov	r4, r0
 8011da2:	4608      	mov	r0, r1
 8011da4:	4611      	mov	r1, r2
 8011da6:	2200      	movs	r2, #0
 8011da8:	602a      	str	r2, [r5, #0]
 8011daa:	461a      	mov	r2, r3
 8011dac:	f7f0 f9ad 	bl	800210a <_write>
 8011db0:	1c43      	adds	r3, r0, #1
 8011db2:	d102      	bne.n	8011dba <_write_r+0x1e>
 8011db4:	682b      	ldr	r3, [r5, #0]
 8011db6:	b103      	cbz	r3, 8011dba <_write_r+0x1e>
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	bd38      	pop	{r3, r4, r5, pc}
 8011dbc:	2000c4ec 	.word	0x2000c4ec

08011dc0 <__errno>:
 8011dc0:	4b01      	ldr	r3, [pc, #4]	; (8011dc8 <__errno+0x8>)
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop
 8011dc8:	20000164 	.word	0x20000164

08011dcc <__libc_init_array>:
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	4d0d      	ldr	r5, [pc, #52]	; (8011e04 <__libc_init_array+0x38>)
 8011dd0:	4c0d      	ldr	r4, [pc, #52]	; (8011e08 <__libc_init_array+0x3c>)
 8011dd2:	1b64      	subs	r4, r4, r5
 8011dd4:	10a4      	asrs	r4, r4, #2
 8011dd6:	2600      	movs	r6, #0
 8011dd8:	42a6      	cmp	r6, r4
 8011dda:	d109      	bne.n	8011df0 <__libc_init_array+0x24>
 8011ddc:	4d0b      	ldr	r5, [pc, #44]	; (8011e0c <__libc_init_array+0x40>)
 8011dde:	4c0c      	ldr	r4, [pc, #48]	; (8011e10 <__libc_init_array+0x44>)
 8011de0:	f003 fc0a 	bl	80155f8 <_init>
 8011de4:	1b64      	subs	r4, r4, r5
 8011de6:	10a4      	asrs	r4, r4, #2
 8011de8:	2600      	movs	r6, #0
 8011dea:	42a6      	cmp	r6, r4
 8011dec:	d105      	bne.n	8011dfa <__libc_init_array+0x2e>
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011df4:	4798      	blx	r3
 8011df6:	3601      	adds	r6, #1
 8011df8:	e7ee      	b.n	8011dd8 <__libc_init_array+0xc>
 8011dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dfe:	4798      	blx	r3
 8011e00:	3601      	adds	r6, #1
 8011e02:	e7f2      	b.n	8011dea <__libc_init_array+0x1e>
 8011e04:	08015c50 	.word	0x08015c50
 8011e08:	08015c50 	.word	0x08015c50
 8011e0c:	08015c50 	.word	0x08015c50
 8011e10:	08015c54 	.word	0x08015c54

08011e14 <__retarget_lock_acquire_recursive>:
 8011e14:	4770      	bx	lr

08011e16 <__retarget_lock_release_recursive>:
 8011e16:	4770      	bx	lr

08011e18 <memcpy>:
 8011e18:	440a      	add	r2, r1
 8011e1a:	4291      	cmp	r1, r2
 8011e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e20:	d100      	bne.n	8011e24 <memcpy+0xc>
 8011e22:	4770      	bx	lr
 8011e24:	b510      	push	{r4, lr}
 8011e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e2e:	4291      	cmp	r1, r2
 8011e30:	d1f9      	bne.n	8011e26 <memcpy+0xe>
 8011e32:	bd10      	pop	{r4, pc}

08011e34 <nanf>:
 8011e34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011e3c <nanf+0x8>
 8011e38:	4770      	bx	lr
 8011e3a:	bf00      	nop
 8011e3c:	7fc00000 	.word	0x7fc00000

08011e40 <quorem>:
 8011e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e44:	6903      	ldr	r3, [r0, #16]
 8011e46:	690c      	ldr	r4, [r1, #16]
 8011e48:	42a3      	cmp	r3, r4
 8011e4a:	4607      	mov	r7, r0
 8011e4c:	db7e      	blt.n	8011f4c <quorem+0x10c>
 8011e4e:	3c01      	subs	r4, #1
 8011e50:	f101 0814 	add.w	r8, r1, #20
 8011e54:	f100 0514 	add.w	r5, r0, #20
 8011e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e5c:	9301      	str	r3, [sp, #4]
 8011e5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e66:	3301      	adds	r3, #1
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e72:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e76:	d331      	bcc.n	8011edc <quorem+0x9c>
 8011e78:	f04f 0e00 	mov.w	lr, #0
 8011e7c:	4640      	mov	r0, r8
 8011e7e:	46ac      	mov	ip, r5
 8011e80:	46f2      	mov	sl, lr
 8011e82:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e86:	b293      	uxth	r3, r2
 8011e88:	fb06 e303 	mla	r3, r6, r3, lr
 8011e8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e90:	0c1a      	lsrs	r2, r3, #16
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	ebaa 0303 	sub.w	r3, sl, r3
 8011e98:	f8dc a000 	ldr.w	sl, [ip]
 8011e9c:	fa13 f38a 	uxtah	r3, r3, sl
 8011ea0:	fb06 220e 	mla	r2, r6, lr, r2
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	9b00      	ldr	r3, [sp, #0]
 8011ea8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011eac:	b292      	uxth	r2, r2
 8011eae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011eb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011eb6:	f8bd 3000 	ldrh.w	r3, [sp]
 8011eba:	4581      	cmp	r9, r0
 8011ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ec0:	f84c 3b04 	str.w	r3, [ip], #4
 8011ec4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ec8:	d2db      	bcs.n	8011e82 <quorem+0x42>
 8011eca:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ece:	b92b      	cbnz	r3, 8011edc <quorem+0x9c>
 8011ed0:	9b01      	ldr	r3, [sp, #4]
 8011ed2:	3b04      	subs	r3, #4
 8011ed4:	429d      	cmp	r5, r3
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	d32c      	bcc.n	8011f34 <quorem+0xf4>
 8011eda:	613c      	str	r4, [r7, #16]
 8011edc:	4638      	mov	r0, r7
 8011ede:	f001 f9ef 	bl	80132c0 <__mcmp>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	db22      	blt.n	8011f2c <quorem+0xec>
 8011ee6:	3601      	adds	r6, #1
 8011ee8:	4629      	mov	r1, r5
 8011eea:	2000      	movs	r0, #0
 8011eec:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ef0:	f8d1 c000 	ldr.w	ip, [r1]
 8011ef4:	b293      	uxth	r3, r2
 8011ef6:	1ac3      	subs	r3, r0, r3
 8011ef8:	0c12      	lsrs	r2, r2, #16
 8011efa:	fa13 f38c 	uxtah	r3, r3, ip
 8011efe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f0c:	45c1      	cmp	r9, r8
 8011f0e:	f841 3b04 	str.w	r3, [r1], #4
 8011f12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f16:	d2e9      	bcs.n	8011eec <quorem+0xac>
 8011f18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f20:	b922      	cbnz	r2, 8011f2c <quorem+0xec>
 8011f22:	3b04      	subs	r3, #4
 8011f24:	429d      	cmp	r5, r3
 8011f26:	461a      	mov	r2, r3
 8011f28:	d30a      	bcc.n	8011f40 <quorem+0x100>
 8011f2a:	613c      	str	r4, [r7, #16]
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	b003      	add	sp, #12
 8011f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f34:	6812      	ldr	r2, [r2, #0]
 8011f36:	3b04      	subs	r3, #4
 8011f38:	2a00      	cmp	r2, #0
 8011f3a:	d1ce      	bne.n	8011eda <quorem+0x9a>
 8011f3c:	3c01      	subs	r4, #1
 8011f3e:	e7c9      	b.n	8011ed4 <quorem+0x94>
 8011f40:	6812      	ldr	r2, [r2, #0]
 8011f42:	3b04      	subs	r3, #4
 8011f44:	2a00      	cmp	r2, #0
 8011f46:	d1f0      	bne.n	8011f2a <quorem+0xea>
 8011f48:	3c01      	subs	r4, #1
 8011f4a:	e7eb      	b.n	8011f24 <quorem+0xe4>
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	e7ee      	b.n	8011f2e <quorem+0xee>

08011f50 <_dtoa_r>:
 8011f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	ed2d 8b04 	vpush	{d8-d9}
 8011f58:	69c5      	ldr	r5, [r0, #28]
 8011f5a:	b093      	sub	sp, #76	; 0x4c
 8011f5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f60:	ec57 6b10 	vmov	r6, r7, d0
 8011f64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f68:	9107      	str	r1, [sp, #28]
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8011f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8011f70:	b975      	cbnz	r5, 8011f90 <_dtoa_r+0x40>
 8011f72:	2010      	movs	r0, #16
 8011f74:	f000 fe2a 	bl	8012bcc <malloc>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	61e0      	str	r0, [r4, #28]
 8011f7c:	b920      	cbnz	r0, 8011f88 <_dtoa_r+0x38>
 8011f7e:	4bae      	ldr	r3, [pc, #696]	; (8012238 <_dtoa_r+0x2e8>)
 8011f80:	21ef      	movs	r1, #239	; 0xef
 8011f82:	48ae      	ldr	r0, [pc, #696]	; (801223c <_dtoa_r+0x2ec>)
 8011f84:	f002 fc64 	bl	8014850 <__assert_func>
 8011f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f8c:	6005      	str	r5, [r0, #0]
 8011f8e:	60c5      	str	r5, [r0, #12]
 8011f90:	69e3      	ldr	r3, [r4, #28]
 8011f92:	6819      	ldr	r1, [r3, #0]
 8011f94:	b151      	cbz	r1, 8011fac <_dtoa_r+0x5c>
 8011f96:	685a      	ldr	r2, [r3, #4]
 8011f98:	604a      	str	r2, [r1, #4]
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	4093      	lsls	r3, r2
 8011f9e:	608b      	str	r3, [r1, #8]
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f000 ff07 	bl	8012db4 <_Bfree>
 8011fa6:	69e3      	ldr	r3, [r4, #28]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	601a      	str	r2, [r3, #0]
 8011fac:	1e3b      	subs	r3, r7, #0
 8011fae:	bfbb      	ittet	lt
 8011fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011fb4:	9303      	strlt	r3, [sp, #12]
 8011fb6:	2300      	movge	r3, #0
 8011fb8:	2201      	movlt	r2, #1
 8011fba:	bfac      	ite	ge
 8011fbc:	f8c8 3000 	strge.w	r3, [r8]
 8011fc0:	f8c8 2000 	strlt.w	r2, [r8]
 8011fc4:	4b9e      	ldr	r3, [pc, #632]	; (8012240 <_dtoa_r+0x2f0>)
 8011fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011fca:	ea33 0308 	bics.w	r3, r3, r8
 8011fce:	d11b      	bne.n	8012008 <_dtoa_r+0xb8>
 8011fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011fdc:	4333      	orrs	r3, r6
 8011fde:	f000 8593 	beq.w	8012b08 <_dtoa_r+0xbb8>
 8011fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fe4:	b963      	cbnz	r3, 8012000 <_dtoa_r+0xb0>
 8011fe6:	4b97      	ldr	r3, [pc, #604]	; (8012244 <_dtoa_r+0x2f4>)
 8011fe8:	e027      	b.n	801203a <_dtoa_r+0xea>
 8011fea:	4b97      	ldr	r3, [pc, #604]	; (8012248 <_dtoa_r+0x2f8>)
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	3308      	adds	r3, #8
 8011ff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011ff2:	6013      	str	r3, [r2, #0]
 8011ff4:	9800      	ldr	r0, [sp, #0]
 8011ff6:	b013      	add	sp, #76	; 0x4c
 8011ff8:	ecbd 8b04 	vpop	{d8-d9}
 8011ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012000:	4b90      	ldr	r3, [pc, #576]	; (8012244 <_dtoa_r+0x2f4>)
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	3303      	adds	r3, #3
 8012006:	e7f3      	b.n	8011ff0 <_dtoa_r+0xa0>
 8012008:	ed9d 7b02 	vldr	d7, [sp, #8]
 801200c:	2200      	movs	r2, #0
 801200e:	ec51 0b17 	vmov	r0, r1, d7
 8012012:	eeb0 8a47 	vmov.f32	s16, s14
 8012016:	eef0 8a67 	vmov.f32	s17, s15
 801201a:	2300      	movs	r3, #0
 801201c:	f7ee fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8012020:	4681      	mov	r9, r0
 8012022:	b160      	cbz	r0, 801203e <_dtoa_r+0xee>
 8012024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012026:	2301      	movs	r3, #1
 8012028:	6013      	str	r3, [r2, #0]
 801202a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801202c:	2b00      	cmp	r3, #0
 801202e:	f000 8568 	beq.w	8012b02 <_dtoa_r+0xbb2>
 8012032:	4b86      	ldr	r3, [pc, #536]	; (801224c <_dtoa_r+0x2fc>)
 8012034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012036:	6013      	str	r3, [r2, #0]
 8012038:	3b01      	subs	r3, #1
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	e7da      	b.n	8011ff4 <_dtoa_r+0xa4>
 801203e:	aa10      	add	r2, sp, #64	; 0x40
 8012040:	a911      	add	r1, sp, #68	; 0x44
 8012042:	4620      	mov	r0, r4
 8012044:	eeb0 0a48 	vmov.f32	s0, s16
 8012048:	eef0 0a68 	vmov.f32	s1, s17
 801204c:	f001 fa4e 	bl	80134ec <__d2b>
 8012050:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012054:	4682      	mov	sl, r0
 8012056:	2d00      	cmp	r5, #0
 8012058:	d07f      	beq.n	801215a <_dtoa_r+0x20a>
 801205a:	ee18 3a90 	vmov	r3, s17
 801205e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012062:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012066:	ec51 0b18 	vmov	r0, r1, d8
 801206a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801206e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012072:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012076:	4619      	mov	r1, r3
 8012078:	2200      	movs	r2, #0
 801207a:	4b75      	ldr	r3, [pc, #468]	; (8012250 <_dtoa_r+0x300>)
 801207c:	f7ee f904 	bl	8000288 <__aeabi_dsub>
 8012080:	a367      	add	r3, pc, #412	; (adr r3, 8012220 <_dtoa_r+0x2d0>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	f7ee fab7 	bl	80005f8 <__aeabi_dmul>
 801208a:	a367      	add	r3, pc, #412	; (adr r3, 8012228 <_dtoa_r+0x2d8>)
 801208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012090:	f7ee f8fc 	bl	800028c <__adddf3>
 8012094:	4606      	mov	r6, r0
 8012096:	4628      	mov	r0, r5
 8012098:	460f      	mov	r7, r1
 801209a:	f7ee fa43 	bl	8000524 <__aeabi_i2d>
 801209e:	a364      	add	r3, pc, #400	; (adr r3, 8012230 <_dtoa_r+0x2e0>)
 80120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a4:	f7ee faa8 	bl	80005f8 <__aeabi_dmul>
 80120a8:	4602      	mov	r2, r0
 80120aa:	460b      	mov	r3, r1
 80120ac:	4630      	mov	r0, r6
 80120ae:	4639      	mov	r1, r7
 80120b0:	f7ee f8ec 	bl	800028c <__adddf3>
 80120b4:	4606      	mov	r6, r0
 80120b6:	460f      	mov	r7, r1
 80120b8:	f7ee fd4e 	bl	8000b58 <__aeabi_d2iz>
 80120bc:	2200      	movs	r2, #0
 80120be:	4683      	mov	fp, r0
 80120c0:	2300      	movs	r3, #0
 80120c2:	4630      	mov	r0, r6
 80120c4:	4639      	mov	r1, r7
 80120c6:	f7ee fd09 	bl	8000adc <__aeabi_dcmplt>
 80120ca:	b148      	cbz	r0, 80120e0 <_dtoa_r+0x190>
 80120cc:	4658      	mov	r0, fp
 80120ce:	f7ee fa29 	bl	8000524 <__aeabi_i2d>
 80120d2:	4632      	mov	r2, r6
 80120d4:	463b      	mov	r3, r7
 80120d6:	f7ee fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80120da:	b908      	cbnz	r0, 80120e0 <_dtoa_r+0x190>
 80120dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80120e0:	f1bb 0f16 	cmp.w	fp, #22
 80120e4:	d857      	bhi.n	8012196 <_dtoa_r+0x246>
 80120e6:	4b5b      	ldr	r3, [pc, #364]	; (8012254 <_dtoa_r+0x304>)
 80120e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80120ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f0:	ec51 0b18 	vmov	r0, r1, d8
 80120f4:	f7ee fcf2 	bl	8000adc <__aeabi_dcmplt>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	d04e      	beq.n	801219a <_dtoa_r+0x24a>
 80120fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012100:	2300      	movs	r3, #0
 8012102:	930c      	str	r3, [sp, #48]	; 0x30
 8012104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012106:	1b5b      	subs	r3, r3, r5
 8012108:	1e5a      	subs	r2, r3, #1
 801210a:	bf45      	ittet	mi
 801210c:	f1c3 0301 	rsbmi	r3, r3, #1
 8012110:	9305      	strmi	r3, [sp, #20]
 8012112:	2300      	movpl	r3, #0
 8012114:	2300      	movmi	r3, #0
 8012116:	9206      	str	r2, [sp, #24]
 8012118:	bf54      	ite	pl
 801211a:	9305      	strpl	r3, [sp, #20]
 801211c:	9306      	strmi	r3, [sp, #24]
 801211e:	f1bb 0f00 	cmp.w	fp, #0
 8012122:	db3c      	blt.n	801219e <_dtoa_r+0x24e>
 8012124:	9b06      	ldr	r3, [sp, #24]
 8012126:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801212a:	445b      	add	r3, fp
 801212c:	9306      	str	r3, [sp, #24]
 801212e:	2300      	movs	r3, #0
 8012130:	9308      	str	r3, [sp, #32]
 8012132:	9b07      	ldr	r3, [sp, #28]
 8012134:	2b09      	cmp	r3, #9
 8012136:	d868      	bhi.n	801220a <_dtoa_r+0x2ba>
 8012138:	2b05      	cmp	r3, #5
 801213a:	bfc4      	itt	gt
 801213c:	3b04      	subgt	r3, #4
 801213e:	9307      	strgt	r3, [sp, #28]
 8012140:	9b07      	ldr	r3, [sp, #28]
 8012142:	f1a3 0302 	sub.w	r3, r3, #2
 8012146:	bfcc      	ite	gt
 8012148:	2500      	movgt	r5, #0
 801214a:	2501      	movle	r5, #1
 801214c:	2b03      	cmp	r3, #3
 801214e:	f200 8085 	bhi.w	801225c <_dtoa_r+0x30c>
 8012152:	e8df f003 	tbb	[pc, r3]
 8012156:	3b2e      	.short	0x3b2e
 8012158:	5839      	.short	0x5839
 801215a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801215e:	441d      	add	r5, r3
 8012160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012164:	2b20      	cmp	r3, #32
 8012166:	bfc1      	itttt	gt
 8012168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801216c:	fa08 f803 	lslgt.w	r8, r8, r3
 8012170:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012174:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012178:	bfd6      	itet	le
 801217a:	f1c3 0320 	rsble	r3, r3, #32
 801217e:	ea48 0003 	orrgt.w	r0, r8, r3
 8012182:	fa06 f003 	lslle.w	r0, r6, r3
 8012186:	f7ee f9bd 	bl	8000504 <__aeabi_ui2d>
 801218a:	2201      	movs	r2, #1
 801218c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012190:	3d01      	subs	r5, #1
 8012192:	920e      	str	r2, [sp, #56]	; 0x38
 8012194:	e76f      	b.n	8012076 <_dtoa_r+0x126>
 8012196:	2301      	movs	r3, #1
 8012198:	e7b3      	b.n	8012102 <_dtoa_r+0x1b2>
 801219a:	900c      	str	r0, [sp, #48]	; 0x30
 801219c:	e7b2      	b.n	8012104 <_dtoa_r+0x1b4>
 801219e:	9b05      	ldr	r3, [sp, #20]
 80121a0:	eba3 030b 	sub.w	r3, r3, fp
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	f1cb 0300 	rsb	r3, fp, #0
 80121aa:	9308      	str	r3, [sp, #32]
 80121ac:	2300      	movs	r3, #0
 80121ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80121b0:	e7bf      	b.n	8012132 <_dtoa_r+0x1e2>
 80121b2:	2300      	movs	r3, #0
 80121b4:	9309      	str	r3, [sp, #36]	; 0x24
 80121b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dc52      	bgt.n	8012262 <_dtoa_r+0x312>
 80121bc:	2301      	movs	r3, #1
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	9304      	str	r3, [sp, #16]
 80121c2:	461a      	mov	r2, r3
 80121c4:	920a      	str	r2, [sp, #40]	; 0x28
 80121c6:	e00b      	b.n	80121e0 <_dtoa_r+0x290>
 80121c8:	2301      	movs	r3, #1
 80121ca:	e7f3      	b.n	80121b4 <_dtoa_r+0x264>
 80121cc:	2300      	movs	r3, #0
 80121ce:	9309      	str	r3, [sp, #36]	; 0x24
 80121d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121d2:	445b      	add	r3, fp
 80121d4:	9301      	str	r3, [sp, #4]
 80121d6:	3301      	adds	r3, #1
 80121d8:	2b01      	cmp	r3, #1
 80121da:	9304      	str	r3, [sp, #16]
 80121dc:	bfb8      	it	lt
 80121de:	2301      	movlt	r3, #1
 80121e0:	69e0      	ldr	r0, [r4, #28]
 80121e2:	2100      	movs	r1, #0
 80121e4:	2204      	movs	r2, #4
 80121e6:	f102 0614 	add.w	r6, r2, #20
 80121ea:	429e      	cmp	r6, r3
 80121ec:	d93d      	bls.n	801226a <_dtoa_r+0x31a>
 80121ee:	6041      	str	r1, [r0, #4]
 80121f0:	4620      	mov	r0, r4
 80121f2:	f000 fd9f 	bl	8012d34 <_Balloc>
 80121f6:	9000      	str	r0, [sp, #0]
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d139      	bne.n	8012270 <_dtoa_r+0x320>
 80121fc:	4b16      	ldr	r3, [pc, #88]	; (8012258 <_dtoa_r+0x308>)
 80121fe:	4602      	mov	r2, r0
 8012200:	f240 11af 	movw	r1, #431	; 0x1af
 8012204:	e6bd      	b.n	8011f82 <_dtoa_r+0x32>
 8012206:	2301      	movs	r3, #1
 8012208:	e7e1      	b.n	80121ce <_dtoa_r+0x27e>
 801220a:	2501      	movs	r5, #1
 801220c:	2300      	movs	r3, #0
 801220e:	9307      	str	r3, [sp, #28]
 8012210:	9509      	str	r5, [sp, #36]	; 0x24
 8012212:	f04f 33ff 	mov.w	r3, #4294967295
 8012216:	9301      	str	r3, [sp, #4]
 8012218:	9304      	str	r3, [sp, #16]
 801221a:	2200      	movs	r2, #0
 801221c:	2312      	movs	r3, #18
 801221e:	e7d1      	b.n	80121c4 <_dtoa_r+0x274>
 8012220:	636f4361 	.word	0x636f4361
 8012224:	3fd287a7 	.word	0x3fd287a7
 8012228:	8b60c8b3 	.word	0x8b60c8b3
 801222c:	3fc68a28 	.word	0x3fc68a28
 8012230:	509f79fb 	.word	0x509f79fb
 8012234:	3fd34413 	.word	0x3fd34413
 8012238:	08015868 	.word	0x08015868
 801223c:	0801587f 	.word	0x0801587f
 8012240:	7ff00000 	.word	0x7ff00000
 8012244:	08015864 	.word	0x08015864
 8012248:	0801585b 	.word	0x0801585b
 801224c:	08015833 	.word	0x08015833
 8012250:	3ff80000 	.word	0x3ff80000
 8012254:	08015970 	.word	0x08015970
 8012258:	080158d7 	.word	0x080158d7
 801225c:	2301      	movs	r3, #1
 801225e:	9309      	str	r3, [sp, #36]	; 0x24
 8012260:	e7d7      	b.n	8012212 <_dtoa_r+0x2c2>
 8012262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	9304      	str	r3, [sp, #16]
 8012268:	e7ba      	b.n	80121e0 <_dtoa_r+0x290>
 801226a:	3101      	adds	r1, #1
 801226c:	0052      	lsls	r2, r2, #1
 801226e:	e7ba      	b.n	80121e6 <_dtoa_r+0x296>
 8012270:	69e3      	ldr	r3, [r4, #28]
 8012272:	9a00      	ldr	r2, [sp, #0]
 8012274:	601a      	str	r2, [r3, #0]
 8012276:	9b04      	ldr	r3, [sp, #16]
 8012278:	2b0e      	cmp	r3, #14
 801227a:	f200 80a8 	bhi.w	80123ce <_dtoa_r+0x47e>
 801227e:	2d00      	cmp	r5, #0
 8012280:	f000 80a5 	beq.w	80123ce <_dtoa_r+0x47e>
 8012284:	f1bb 0f00 	cmp.w	fp, #0
 8012288:	dd38      	ble.n	80122fc <_dtoa_r+0x3ac>
 801228a:	4bc0      	ldr	r3, [pc, #768]	; (801258c <_dtoa_r+0x63c>)
 801228c:	f00b 020f 	and.w	r2, fp, #15
 8012290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012294:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012298:	e9d3 6700 	ldrd	r6, r7, [r3]
 801229c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80122a0:	d019      	beq.n	80122d6 <_dtoa_r+0x386>
 80122a2:	4bbb      	ldr	r3, [pc, #748]	; (8012590 <_dtoa_r+0x640>)
 80122a4:	ec51 0b18 	vmov	r0, r1, d8
 80122a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122ac:	f7ee face 	bl	800084c <__aeabi_ddiv>
 80122b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122b4:	f008 080f 	and.w	r8, r8, #15
 80122b8:	2503      	movs	r5, #3
 80122ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012590 <_dtoa_r+0x640>
 80122be:	f1b8 0f00 	cmp.w	r8, #0
 80122c2:	d10a      	bne.n	80122da <_dtoa_r+0x38a>
 80122c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122c8:	4632      	mov	r2, r6
 80122ca:	463b      	mov	r3, r7
 80122cc:	f7ee fabe 	bl	800084c <__aeabi_ddiv>
 80122d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d4:	e02b      	b.n	801232e <_dtoa_r+0x3de>
 80122d6:	2502      	movs	r5, #2
 80122d8:	e7ef      	b.n	80122ba <_dtoa_r+0x36a>
 80122da:	f018 0f01 	tst.w	r8, #1
 80122de:	d008      	beq.n	80122f2 <_dtoa_r+0x3a2>
 80122e0:	4630      	mov	r0, r6
 80122e2:	4639      	mov	r1, r7
 80122e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80122e8:	f7ee f986 	bl	80005f8 <__aeabi_dmul>
 80122ec:	3501      	adds	r5, #1
 80122ee:	4606      	mov	r6, r0
 80122f0:	460f      	mov	r7, r1
 80122f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80122f6:	f109 0908 	add.w	r9, r9, #8
 80122fa:	e7e0      	b.n	80122be <_dtoa_r+0x36e>
 80122fc:	f000 809f 	beq.w	801243e <_dtoa_r+0x4ee>
 8012300:	f1cb 0600 	rsb	r6, fp, #0
 8012304:	4ba1      	ldr	r3, [pc, #644]	; (801258c <_dtoa_r+0x63c>)
 8012306:	4fa2      	ldr	r7, [pc, #648]	; (8012590 <_dtoa_r+0x640>)
 8012308:	f006 020f 	and.w	r2, r6, #15
 801230c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012314:	ec51 0b18 	vmov	r0, r1, d8
 8012318:	f7ee f96e 	bl	80005f8 <__aeabi_dmul>
 801231c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012320:	1136      	asrs	r6, r6, #4
 8012322:	2300      	movs	r3, #0
 8012324:	2502      	movs	r5, #2
 8012326:	2e00      	cmp	r6, #0
 8012328:	d17e      	bne.n	8012428 <_dtoa_r+0x4d8>
 801232a:	2b00      	cmp	r3, #0
 801232c:	d1d0      	bne.n	80122d0 <_dtoa_r+0x380>
 801232e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012330:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	f000 8084 	beq.w	8012442 <_dtoa_r+0x4f2>
 801233a:	4b96      	ldr	r3, [pc, #600]	; (8012594 <_dtoa_r+0x644>)
 801233c:	2200      	movs	r2, #0
 801233e:	4640      	mov	r0, r8
 8012340:	4649      	mov	r1, r9
 8012342:	f7ee fbcb 	bl	8000adc <__aeabi_dcmplt>
 8012346:	2800      	cmp	r0, #0
 8012348:	d07b      	beq.n	8012442 <_dtoa_r+0x4f2>
 801234a:	9b04      	ldr	r3, [sp, #16]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d078      	beq.n	8012442 <_dtoa_r+0x4f2>
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	2b00      	cmp	r3, #0
 8012354:	dd39      	ble.n	80123ca <_dtoa_r+0x47a>
 8012356:	4b90      	ldr	r3, [pc, #576]	; (8012598 <_dtoa_r+0x648>)
 8012358:	2200      	movs	r2, #0
 801235a:	4640      	mov	r0, r8
 801235c:	4649      	mov	r1, r9
 801235e:	f7ee f94b 	bl	80005f8 <__aeabi_dmul>
 8012362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012366:	9e01      	ldr	r6, [sp, #4]
 8012368:	f10b 37ff 	add.w	r7, fp, #4294967295
 801236c:	3501      	adds	r5, #1
 801236e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012372:	4628      	mov	r0, r5
 8012374:	f7ee f8d6 	bl	8000524 <__aeabi_i2d>
 8012378:	4642      	mov	r2, r8
 801237a:	464b      	mov	r3, r9
 801237c:	f7ee f93c 	bl	80005f8 <__aeabi_dmul>
 8012380:	4b86      	ldr	r3, [pc, #536]	; (801259c <_dtoa_r+0x64c>)
 8012382:	2200      	movs	r2, #0
 8012384:	f7ed ff82 	bl	800028c <__adddf3>
 8012388:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801238c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012390:	9303      	str	r3, [sp, #12]
 8012392:	2e00      	cmp	r6, #0
 8012394:	d158      	bne.n	8012448 <_dtoa_r+0x4f8>
 8012396:	4b82      	ldr	r3, [pc, #520]	; (80125a0 <_dtoa_r+0x650>)
 8012398:	2200      	movs	r2, #0
 801239a:	4640      	mov	r0, r8
 801239c:	4649      	mov	r1, r9
 801239e:	f7ed ff73 	bl	8000288 <__aeabi_dsub>
 80123a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123a6:	4680      	mov	r8, r0
 80123a8:	4689      	mov	r9, r1
 80123aa:	f7ee fbb5 	bl	8000b18 <__aeabi_dcmpgt>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f040 8296 	bne.w	80128e0 <_dtoa_r+0x990>
 80123b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80123b8:	4640      	mov	r0, r8
 80123ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123be:	4649      	mov	r1, r9
 80123c0:	f7ee fb8c 	bl	8000adc <__aeabi_dcmplt>
 80123c4:	2800      	cmp	r0, #0
 80123c6:	f040 8289 	bne.w	80128dc <_dtoa_r+0x98c>
 80123ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80123ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f2c0 814e 	blt.w	8012672 <_dtoa_r+0x722>
 80123d6:	f1bb 0f0e 	cmp.w	fp, #14
 80123da:	f300 814a 	bgt.w	8012672 <_dtoa_r+0x722>
 80123de:	4b6b      	ldr	r3, [pc, #428]	; (801258c <_dtoa_r+0x63c>)
 80123e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f280 80dc 	bge.w	80125a8 <_dtoa_r+0x658>
 80123f0:	9b04      	ldr	r3, [sp, #16]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f300 80d8 	bgt.w	80125a8 <_dtoa_r+0x658>
 80123f8:	f040 826f 	bne.w	80128da <_dtoa_r+0x98a>
 80123fc:	4b68      	ldr	r3, [pc, #416]	; (80125a0 <_dtoa_r+0x650>)
 80123fe:	2200      	movs	r2, #0
 8012400:	4640      	mov	r0, r8
 8012402:	4649      	mov	r1, r9
 8012404:	f7ee f8f8 	bl	80005f8 <__aeabi_dmul>
 8012408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801240c:	f7ee fb7a 	bl	8000b04 <__aeabi_dcmpge>
 8012410:	9e04      	ldr	r6, [sp, #16]
 8012412:	4637      	mov	r7, r6
 8012414:	2800      	cmp	r0, #0
 8012416:	f040 8245 	bne.w	80128a4 <_dtoa_r+0x954>
 801241a:	9d00      	ldr	r5, [sp, #0]
 801241c:	2331      	movs	r3, #49	; 0x31
 801241e:	f805 3b01 	strb.w	r3, [r5], #1
 8012422:	f10b 0b01 	add.w	fp, fp, #1
 8012426:	e241      	b.n	80128ac <_dtoa_r+0x95c>
 8012428:	07f2      	lsls	r2, r6, #31
 801242a:	d505      	bpl.n	8012438 <_dtoa_r+0x4e8>
 801242c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012430:	f7ee f8e2 	bl	80005f8 <__aeabi_dmul>
 8012434:	3501      	adds	r5, #1
 8012436:	2301      	movs	r3, #1
 8012438:	1076      	asrs	r6, r6, #1
 801243a:	3708      	adds	r7, #8
 801243c:	e773      	b.n	8012326 <_dtoa_r+0x3d6>
 801243e:	2502      	movs	r5, #2
 8012440:	e775      	b.n	801232e <_dtoa_r+0x3de>
 8012442:	9e04      	ldr	r6, [sp, #16]
 8012444:	465f      	mov	r7, fp
 8012446:	e792      	b.n	801236e <_dtoa_r+0x41e>
 8012448:	9900      	ldr	r1, [sp, #0]
 801244a:	4b50      	ldr	r3, [pc, #320]	; (801258c <_dtoa_r+0x63c>)
 801244c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012450:	4431      	add	r1, r6
 8012452:	9102      	str	r1, [sp, #8]
 8012454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012456:	eeb0 9a47 	vmov.f32	s18, s14
 801245a:	eef0 9a67 	vmov.f32	s19, s15
 801245e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012466:	2900      	cmp	r1, #0
 8012468:	d044      	beq.n	80124f4 <_dtoa_r+0x5a4>
 801246a:	494e      	ldr	r1, [pc, #312]	; (80125a4 <_dtoa_r+0x654>)
 801246c:	2000      	movs	r0, #0
 801246e:	f7ee f9ed 	bl	800084c <__aeabi_ddiv>
 8012472:	ec53 2b19 	vmov	r2, r3, d9
 8012476:	f7ed ff07 	bl	8000288 <__aeabi_dsub>
 801247a:	9d00      	ldr	r5, [sp, #0]
 801247c:	ec41 0b19 	vmov	d9, r0, r1
 8012480:	4649      	mov	r1, r9
 8012482:	4640      	mov	r0, r8
 8012484:	f7ee fb68 	bl	8000b58 <__aeabi_d2iz>
 8012488:	4606      	mov	r6, r0
 801248a:	f7ee f84b 	bl	8000524 <__aeabi_i2d>
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4640      	mov	r0, r8
 8012494:	4649      	mov	r1, r9
 8012496:	f7ed fef7 	bl	8000288 <__aeabi_dsub>
 801249a:	3630      	adds	r6, #48	; 0x30
 801249c:	f805 6b01 	strb.w	r6, [r5], #1
 80124a0:	ec53 2b19 	vmov	r2, r3, d9
 80124a4:	4680      	mov	r8, r0
 80124a6:	4689      	mov	r9, r1
 80124a8:	f7ee fb18 	bl	8000adc <__aeabi_dcmplt>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d164      	bne.n	801257a <_dtoa_r+0x62a>
 80124b0:	4642      	mov	r2, r8
 80124b2:	464b      	mov	r3, r9
 80124b4:	4937      	ldr	r1, [pc, #220]	; (8012594 <_dtoa_r+0x644>)
 80124b6:	2000      	movs	r0, #0
 80124b8:	f7ed fee6 	bl	8000288 <__aeabi_dsub>
 80124bc:	ec53 2b19 	vmov	r2, r3, d9
 80124c0:	f7ee fb0c 	bl	8000adc <__aeabi_dcmplt>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	f040 80b6 	bne.w	8012636 <_dtoa_r+0x6e6>
 80124ca:	9b02      	ldr	r3, [sp, #8]
 80124cc:	429d      	cmp	r5, r3
 80124ce:	f43f af7c 	beq.w	80123ca <_dtoa_r+0x47a>
 80124d2:	4b31      	ldr	r3, [pc, #196]	; (8012598 <_dtoa_r+0x648>)
 80124d4:	ec51 0b19 	vmov	r0, r1, d9
 80124d8:	2200      	movs	r2, #0
 80124da:	f7ee f88d 	bl	80005f8 <__aeabi_dmul>
 80124de:	4b2e      	ldr	r3, [pc, #184]	; (8012598 <_dtoa_r+0x648>)
 80124e0:	ec41 0b19 	vmov	d9, r0, r1
 80124e4:	2200      	movs	r2, #0
 80124e6:	4640      	mov	r0, r8
 80124e8:	4649      	mov	r1, r9
 80124ea:	f7ee f885 	bl	80005f8 <__aeabi_dmul>
 80124ee:	4680      	mov	r8, r0
 80124f0:	4689      	mov	r9, r1
 80124f2:	e7c5      	b.n	8012480 <_dtoa_r+0x530>
 80124f4:	ec51 0b17 	vmov	r0, r1, d7
 80124f8:	f7ee f87e 	bl	80005f8 <__aeabi_dmul>
 80124fc:	9b02      	ldr	r3, [sp, #8]
 80124fe:	9d00      	ldr	r5, [sp, #0]
 8012500:	930f      	str	r3, [sp, #60]	; 0x3c
 8012502:	ec41 0b19 	vmov	d9, r0, r1
 8012506:	4649      	mov	r1, r9
 8012508:	4640      	mov	r0, r8
 801250a:	f7ee fb25 	bl	8000b58 <__aeabi_d2iz>
 801250e:	4606      	mov	r6, r0
 8012510:	f7ee f808 	bl	8000524 <__aeabi_i2d>
 8012514:	3630      	adds	r6, #48	; 0x30
 8012516:	4602      	mov	r2, r0
 8012518:	460b      	mov	r3, r1
 801251a:	4640      	mov	r0, r8
 801251c:	4649      	mov	r1, r9
 801251e:	f7ed feb3 	bl	8000288 <__aeabi_dsub>
 8012522:	f805 6b01 	strb.w	r6, [r5], #1
 8012526:	9b02      	ldr	r3, [sp, #8]
 8012528:	429d      	cmp	r5, r3
 801252a:	4680      	mov	r8, r0
 801252c:	4689      	mov	r9, r1
 801252e:	f04f 0200 	mov.w	r2, #0
 8012532:	d124      	bne.n	801257e <_dtoa_r+0x62e>
 8012534:	4b1b      	ldr	r3, [pc, #108]	; (80125a4 <_dtoa_r+0x654>)
 8012536:	ec51 0b19 	vmov	r0, r1, d9
 801253a:	f7ed fea7 	bl	800028c <__adddf3>
 801253e:	4602      	mov	r2, r0
 8012540:	460b      	mov	r3, r1
 8012542:	4640      	mov	r0, r8
 8012544:	4649      	mov	r1, r9
 8012546:	f7ee fae7 	bl	8000b18 <__aeabi_dcmpgt>
 801254a:	2800      	cmp	r0, #0
 801254c:	d173      	bne.n	8012636 <_dtoa_r+0x6e6>
 801254e:	ec53 2b19 	vmov	r2, r3, d9
 8012552:	4914      	ldr	r1, [pc, #80]	; (80125a4 <_dtoa_r+0x654>)
 8012554:	2000      	movs	r0, #0
 8012556:	f7ed fe97 	bl	8000288 <__aeabi_dsub>
 801255a:	4602      	mov	r2, r0
 801255c:	460b      	mov	r3, r1
 801255e:	4640      	mov	r0, r8
 8012560:	4649      	mov	r1, r9
 8012562:	f7ee fabb 	bl	8000adc <__aeabi_dcmplt>
 8012566:	2800      	cmp	r0, #0
 8012568:	f43f af2f 	beq.w	80123ca <_dtoa_r+0x47a>
 801256c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801256e:	1e6b      	subs	r3, r5, #1
 8012570:	930f      	str	r3, [sp, #60]	; 0x3c
 8012572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012576:	2b30      	cmp	r3, #48	; 0x30
 8012578:	d0f8      	beq.n	801256c <_dtoa_r+0x61c>
 801257a:	46bb      	mov	fp, r7
 801257c:	e04a      	b.n	8012614 <_dtoa_r+0x6c4>
 801257e:	4b06      	ldr	r3, [pc, #24]	; (8012598 <_dtoa_r+0x648>)
 8012580:	f7ee f83a 	bl	80005f8 <__aeabi_dmul>
 8012584:	4680      	mov	r8, r0
 8012586:	4689      	mov	r9, r1
 8012588:	e7bd      	b.n	8012506 <_dtoa_r+0x5b6>
 801258a:	bf00      	nop
 801258c:	08015970 	.word	0x08015970
 8012590:	08015948 	.word	0x08015948
 8012594:	3ff00000 	.word	0x3ff00000
 8012598:	40240000 	.word	0x40240000
 801259c:	401c0000 	.word	0x401c0000
 80125a0:	40140000 	.word	0x40140000
 80125a4:	3fe00000 	.word	0x3fe00000
 80125a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80125ac:	9d00      	ldr	r5, [sp, #0]
 80125ae:	4642      	mov	r2, r8
 80125b0:	464b      	mov	r3, r9
 80125b2:	4630      	mov	r0, r6
 80125b4:	4639      	mov	r1, r7
 80125b6:	f7ee f949 	bl	800084c <__aeabi_ddiv>
 80125ba:	f7ee facd 	bl	8000b58 <__aeabi_d2iz>
 80125be:	9001      	str	r0, [sp, #4]
 80125c0:	f7ed ffb0 	bl	8000524 <__aeabi_i2d>
 80125c4:	4642      	mov	r2, r8
 80125c6:	464b      	mov	r3, r9
 80125c8:	f7ee f816 	bl	80005f8 <__aeabi_dmul>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	4630      	mov	r0, r6
 80125d2:	4639      	mov	r1, r7
 80125d4:	f7ed fe58 	bl	8000288 <__aeabi_dsub>
 80125d8:	9e01      	ldr	r6, [sp, #4]
 80125da:	9f04      	ldr	r7, [sp, #16]
 80125dc:	3630      	adds	r6, #48	; 0x30
 80125de:	f805 6b01 	strb.w	r6, [r5], #1
 80125e2:	9e00      	ldr	r6, [sp, #0]
 80125e4:	1bae      	subs	r6, r5, r6
 80125e6:	42b7      	cmp	r7, r6
 80125e8:	4602      	mov	r2, r0
 80125ea:	460b      	mov	r3, r1
 80125ec:	d134      	bne.n	8012658 <_dtoa_r+0x708>
 80125ee:	f7ed fe4d 	bl	800028c <__adddf3>
 80125f2:	4642      	mov	r2, r8
 80125f4:	464b      	mov	r3, r9
 80125f6:	4606      	mov	r6, r0
 80125f8:	460f      	mov	r7, r1
 80125fa:	f7ee fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 80125fe:	b9c8      	cbnz	r0, 8012634 <_dtoa_r+0x6e4>
 8012600:	4642      	mov	r2, r8
 8012602:	464b      	mov	r3, r9
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	f7ee fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 801260c:	b110      	cbz	r0, 8012614 <_dtoa_r+0x6c4>
 801260e:	9b01      	ldr	r3, [sp, #4]
 8012610:	07db      	lsls	r3, r3, #31
 8012612:	d40f      	bmi.n	8012634 <_dtoa_r+0x6e4>
 8012614:	4651      	mov	r1, sl
 8012616:	4620      	mov	r0, r4
 8012618:	f000 fbcc 	bl	8012db4 <_Bfree>
 801261c:	2300      	movs	r3, #0
 801261e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012620:	702b      	strb	r3, [r5, #0]
 8012622:	f10b 0301 	add.w	r3, fp, #1
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801262a:	2b00      	cmp	r3, #0
 801262c:	f43f ace2 	beq.w	8011ff4 <_dtoa_r+0xa4>
 8012630:	601d      	str	r5, [r3, #0]
 8012632:	e4df      	b.n	8011ff4 <_dtoa_r+0xa4>
 8012634:	465f      	mov	r7, fp
 8012636:	462b      	mov	r3, r5
 8012638:	461d      	mov	r5, r3
 801263a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801263e:	2a39      	cmp	r2, #57	; 0x39
 8012640:	d106      	bne.n	8012650 <_dtoa_r+0x700>
 8012642:	9a00      	ldr	r2, [sp, #0]
 8012644:	429a      	cmp	r2, r3
 8012646:	d1f7      	bne.n	8012638 <_dtoa_r+0x6e8>
 8012648:	9900      	ldr	r1, [sp, #0]
 801264a:	2230      	movs	r2, #48	; 0x30
 801264c:	3701      	adds	r7, #1
 801264e:	700a      	strb	r2, [r1, #0]
 8012650:	781a      	ldrb	r2, [r3, #0]
 8012652:	3201      	adds	r2, #1
 8012654:	701a      	strb	r2, [r3, #0]
 8012656:	e790      	b.n	801257a <_dtoa_r+0x62a>
 8012658:	4ba3      	ldr	r3, [pc, #652]	; (80128e8 <_dtoa_r+0x998>)
 801265a:	2200      	movs	r2, #0
 801265c:	f7ed ffcc 	bl	80005f8 <__aeabi_dmul>
 8012660:	2200      	movs	r2, #0
 8012662:	2300      	movs	r3, #0
 8012664:	4606      	mov	r6, r0
 8012666:	460f      	mov	r7, r1
 8012668:	f7ee fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801266c:	2800      	cmp	r0, #0
 801266e:	d09e      	beq.n	80125ae <_dtoa_r+0x65e>
 8012670:	e7d0      	b.n	8012614 <_dtoa_r+0x6c4>
 8012672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012674:	2a00      	cmp	r2, #0
 8012676:	f000 80ca 	beq.w	801280e <_dtoa_r+0x8be>
 801267a:	9a07      	ldr	r2, [sp, #28]
 801267c:	2a01      	cmp	r2, #1
 801267e:	f300 80ad 	bgt.w	80127dc <_dtoa_r+0x88c>
 8012682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012684:	2a00      	cmp	r2, #0
 8012686:	f000 80a5 	beq.w	80127d4 <_dtoa_r+0x884>
 801268a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801268e:	9e08      	ldr	r6, [sp, #32]
 8012690:	9d05      	ldr	r5, [sp, #20]
 8012692:	9a05      	ldr	r2, [sp, #20]
 8012694:	441a      	add	r2, r3
 8012696:	9205      	str	r2, [sp, #20]
 8012698:	9a06      	ldr	r2, [sp, #24]
 801269a:	2101      	movs	r1, #1
 801269c:	441a      	add	r2, r3
 801269e:	4620      	mov	r0, r4
 80126a0:	9206      	str	r2, [sp, #24]
 80126a2:	f000 fc87 	bl	8012fb4 <__i2b>
 80126a6:	4607      	mov	r7, r0
 80126a8:	b165      	cbz	r5, 80126c4 <_dtoa_r+0x774>
 80126aa:	9b06      	ldr	r3, [sp, #24]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	dd09      	ble.n	80126c4 <_dtoa_r+0x774>
 80126b0:	42ab      	cmp	r3, r5
 80126b2:	9a05      	ldr	r2, [sp, #20]
 80126b4:	bfa8      	it	ge
 80126b6:	462b      	movge	r3, r5
 80126b8:	1ad2      	subs	r2, r2, r3
 80126ba:	9205      	str	r2, [sp, #20]
 80126bc:	9a06      	ldr	r2, [sp, #24]
 80126be:	1aed      	subs	r5, r5, r3
 80126c0:	1ad3      	subs	r3, r2, r3
 80126c2:	9306      	str	r3, [sp, #24]
 80126c4:	9b08      	ldr	r3, [sp, #32]
 80126c6:	b1f3      	cbz	r3, 8012706 <_dtoa_r+0x7b6>
 80126c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	f000 80a3 	beq.w	8012816 <_dtoa_r+0x8c6>
 80126d0:	2e00      	cmp	r6, #0
 80126d2:	dd10      	ble.n	80126f6 <_dtoa_r+0x7a6>
 80126d4:	4639      	mov	r1, r7
 80126d6:	4632      	mov	r2, r6
 80126d8:	4620      	mov	r0, r4
 80126da:	f000 fd2b 	bl	8013134 <__pow5mult>
 80126de:	4652      	mov	r2, sl
 80126e0:	4601      	mov	r1, r0
 80126e2:	4607      	mov	r7, r0
 80126e4:	4620      	mov	r0, r4
 80126e6:	f000 fc7b 	bl	8012fe0 <__multiply>
 80126ea:	4651      	mov	r1, sl
 80126ec:	4680      	mov	r8, r0
 80126ee:	4620      	mov	r0, r4
 80126f0:	f000 fb60 	bl	8012db4 <_Bfree>
 80126f4:	46c2      	mov	sl, r8
 80126f6:	9b08      	ldr	r3, [sp, #32]
 80126f8:	1b9a      	subs	r2, r3, r6
 80126fa:	d004      	beq.n	8012706 <_dtoa_r+0x7b6>
 80126fc:	4651      	mov	r1, sl
 80126fe:	4620      	mov	r0, r4
 8012700:	f000 fd18 	bl	8013134 <__pow5mult>
 8012704:	4682      	mov	sl, r0
 8012706:	2101      	movs	r1, #1
 8012708:	4620      	mov	r0, r4
 801270a:	f000 fc53 	bl	8012fb4 <__i2b>
 801270e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012710:	2b00      	cmp	r3, #0
 8012712:	4606      	mov	r6, r0
 8012714:	f340 8081 	ble.w	801281a <_dtoa_r+0x8ca>
 8012718:	461a      	mov	r2, r3
 801271a:	4601      	mov	r1, r0
 801271c:	4620      	mov	r0, r4
 801271e:	f000 fd09 	bl	8013134 <__pow5mult>
 8012722:	9b07      	ldr	r3, [sp, #28]
 8012724:	2b01      	cmp	r3, #1
 8012726:	4606      	mov	r6, r0
 8012728:	dd7a      	ble.n	8012820 <_dtoa_r+0x8d0>
 801272a:	f04f 0800 	mov.w	r8, #0
 801272e:	6933      	ldr	r3, [r6, #16]
 8012730:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012734:	6918      	ldr	r0, [r3, #16]
 8012736:	f000 fbef 	bl	8012f18 <__hi0bits>
 801273a:	f1c0 0020 	rsb	r0, r0, #32
 801273e:	9b06      	ldr	r3, [sp, #24]
 8012740:	4418      	add	r0, r3
 8012742:	f010 001f 	ands.w	r0, r0, #31
 8012746:	f000 8094 	beq.w	8012872 <_dtoa_r+0x922>
 801274a:	f1c0 0320 	rsb	r3, r0, #32
 801274e:	2b04      	cmp	r3, #4
 8012750:	f340 8085 	ble.w	801285e <_dtoa_r+0x90e>
 8012754:	9b05      	ldr	r3, [sp, #20]
 8012756:	f1c0 001c 	rsb	r0, r0, #28
 801275a:	4403      	add	r3, r0
 801275c:	9305      	str	r3, [sp, #20]
 801275e:	9b06      	ldr	r3, [sp, #24]
 8012760:	4403      	add	r3, r0
 8012762:	4405      	add	r5, r0
 8012764:	9306      	str	r3, [sp, #24]
 8012766:	9b05      	ldr	r3, [sp, #20]
 8012768:	2b00      	cmp	r3, #0
 801276a:	dd05      	ble.n	8012778 <_dtoa_r+0x828>
 801276c:	4651      	mov	r1, sl
 801276e:	461a      	mov	r2, r3
 8012770:	4620      	mov	r0, r4
 8012772:	f000 fd39 	bl	80131e8 <__lshift>
 8012776:	4682      	mov	sl, r0
 8012778:	9b06      	ldr	r3, [sp, #24]
 801277a:	2b00      	cmp	r3, #0
 801277c:	dd05      	ble.n	801278a <_dtoa_r+0x83a>
 801277e:	4631      	mov	r1, r6
 8012780:	461a      	mov	r2, r3
 8012782:	4620      	mov	r0, r4
 8012784:	f000 fd30 	bl	80131e8 <__lshift>
 8012788:	4606      	mov	r6, r0
 801278a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801278c:	2b00      	cmp	r3, #0
 801278e:	d072      	beq.n	8012876 <_dtoa_r+0x926>
 8012790:	4631      	mov	r1, r6
 8012792:	4650      	mov	r0, sl
 8012794:	f000 fd94 	bl	80132c0 <__mcmp>
 8012798:	2800      	cmp	r0, #0
 801279a:	da6c      	bge.n	8012876 <_dtoa_r+0x926>
 801279c:	2300      	movs	r3, #0
 801279e:	4651      	mov	r1, sl
 80127a0:	220a      	movs	r2, #10
 80127a2:	4620      	mov	r0, r4
 80127a4:	f000 fb28 	bl	8012df8 <__multadd>
 80127a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127ae:	4682      	mov	sl, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 81b0 	beq.w	8012b16 <_dtoa_r+0xbc6>
 80127b6:	2300      	movs	r3, #0
 80127b8:	4639      	mov	r1, r7
 80127ba:	220a      	movs	r2, #10
 80127bc:	4620      	mov	r0, r4
 80127be:	f000 fb1b 	bl	8012df8 <__multadd>
 80127c2:	9b01      	ldr	r3, [sp, #4]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	4607      	mov	r7, r0
 80127c8:	f300 8096 	bgt.w	80128f8 <_dtoa_r+0x9a8>
 80127cc:	9b07      	ldr	r3, [sp, #28]
 80127ce:	2b02      	cmp	r3, #2
 80127d0:	dc59      	bgt.n	8012886 <_dtoa_r+0x936>
 80127d2:	e091      	b.n	80128f8 <_dtoa_r+0x9a8>
 80127d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80127da:	e758      	b.n	801268e <_dtoa_r+0x73e>
 80127dc:	9b04      	ldr	r3, [sp, #16]
 80127de:	1e5e      	subs	r6, r3, #1
 80127e0:	9b08      	ldr	r3, [sp, #32]
 80127e2:	42b3      	cmp	r3, r6
 80127e4:	bfbf      	itttt	lt
 80127e6:	9b08      	ldrlt	r3, [sp, #32]
 80127e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80127ea:	9608      	strlt	r6, [sp, #32]
 80127ec:	1af3      	sublt	r3, r6, r3
 80127ee:	bfb4      	ite	lt
 80127f0:	18d2      	addlt	r2, r2, r3
 80127f2:	1b9e      	subge	r6, r3, r6
 80127f4:	9b04      	ldr	r3, [sp, #16]
 80127f6:	bfbc      	itt	lt
 80127f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80127fa:	2600      	movlt	r6, #0
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	bfb7      	itett	lt
 8012800:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012804:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012808:	1a9d      	sublt	r5, r3, r2
 801280a:	2300      	movlt	r3, #0
 801280c:	e741      	b.n	8012692 <_dtoa_r+0x742>
 801280e:	9e08      	ldr	r6, [sp, #32]
 8012810:	9d05      	ldr	r5, [sp, #20]
 8012812:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012814:	e748      	b.n	80126a8 <_dtoa_r+0x758>
 8012816:	9a08      	ldr	r2, [sp, #32]
 8012818:	e770      	b.n	80126fc <_dtoa_r+0x7ac>
 801281a:	9b07      	ldr	r3, [sp, #28]
 801281c:	2b01      	cmp	r3, #1
 801281e:	dc19      	bgt.n	8012854 <_dtoa_r+0x904>
 8012820:	9b02      	ldr	r3, [sp, #8]
 8012822:	b9bb      	cbnz	r3, 8012854 <_dtoa_r+0x904>
 8012824:	9b03      	ldr	r3, [sp, #12]
 8012826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801282a:	b99b      	cbnz	r3, 8012854 <_dtoa_r+0x904>
 801282c:	9b03      	ldr	r3, [sp, #12]
 801282e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012832:	0d1b      	lsrs	r3, r3, #20
 8012834:	051b      	lsls	r3, r3, #20
 8012836:	b183      	cbz	r3, 801285a <_dtoa_r+0x90a>
 8012838:	9b05      	ldr	r3, [sp, #20]
 801283a:	3301      	adds	r3, #1
 801283c:	9305      	str	r3, [sp, #20]
 801283e:	9b06      	ldr	r3, [sp, #24]
 8012840:	3301      	adds	r3, #1
 8012842:	9306      	str	r3, [sp, #24]
 8012844:	f04f 0801 	mov.w	r8, #1
 8012848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801284a:	2b00      	cmp	r3, #0
 801284c:	f47f af6f 	bne.w	801272e <_dtoa_r+0x7de>
 8012850:	2001      	movs	r0, #1
 8012852:	e774      	b.n	801273e <_dtoa_r+0x7ee>
 8012854:	f04f 0800 	mov.w	r8, #0
 8012858:	e7f6      	b.n	8012848 <_dtoa_r+0x8f8>
 801285a:	4698      	mov	r8, r3
 801285c:	e7f4      	b.n	8012848 <_dtoa_r+0x8f8>
 801285e:	d082      	beq.n	8012766 <_dtoa_r+0x816>
 8012860:	9a05      	ldr	r2, [sp, #20]
 8012862:	331c      	adds	r3, #28
 8012864:	441a      	add	r2, r3
 8012866:	9205      	str	r2, [sp, #20]
 8012868:	9a06      	ldr	r2, [sp, #24]
 801286a:	441a      	add	r2, r3
 801286c:	441d      	add	r5, r3
 801286e:	9206      	str	r2, [sp, #24]
 8012870:	e779      	b.n	8012766 <_dtoa_r+0x816>
 8012872:	4603      	mov	r3, r0
 8012874:	e7f4      	b.n	8012860 <_dtoa_r+0x910>
 8012876:	9b04      	ldr	r3, [sp, #16]
 8012878:	2b00      	cmp	r3, #0
 801287a:	dc37      	bgt.n	80128ec <_dtoa_r+0x99c>
 801287c:	9b07      	ldr	r3, [sp, #28]
 801287e:	2b02      	cmp	r3, #2
 8012880:	dd34      	ble.n	80128ec <_dtoa_r+0x99c>
 8012882:	9b04      	ldr	r3, [sp, #16]
 8012884:	9301      	str	r3, [sp, #4]
 8012886:	9b01      	ldr	r3, [sp, #4]
 8012888:	b963      	cbnz	r3, 80128a4 <_dtoa_r+0x954>
 801288a:	4631      	mov	r1, r6
 801288c:	2205      	movs	r2, #5
 801288e:	4620      	mov	r0, r4
 8012890:	f000 fab2 	bl	8012df8 <__multadd>
 8012894:	4601      	mov	r1, r0
 8012896:	4606      	mov	r6, r0
 8012898:	4650      	mov	r0, sl
 801289a:	f000 fd11 	bl	80132c0 <__mcmp>
 801289e:	2800      	cmp	r0, #0
 80128a0:	f73f adbb 	bgt.w	801241a <_dtoa_r+0x4ca>
 80128a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128a6:	9d00      	ldr	r5, [sp, #0]
 80128a8:	ea6f 0b03 	mvn.w	fp, r3
 80128ac:	f04f 0800 	mov.w	r8, #0
 80128b0:	4631      	mov	r1, r6
 80128b2:	4620      	mov	r0, r4
 80128b4:	f000 fa7e 	bl	8012db4 <_Bfree>
 80128b8:	2f00      	cmp	r7, #0
 80128ba:	f43f aeab 	beq.w	8012614 <_dtoa_r+0x6c4>
 80128be:	f1b8 0f00 	cmp.w	r8, #0
 80128c2:	d005      	beq.n	80128d0 <_dtoa_r+0x980>
 80128c4:	45b8      	cmp	r8, r7
 80128c6:	d003      	beq.n	80128d0 <_dtoa_r+0x980>
 80128c8:	4641      	mov	r1, r8
 80128ca:	4620      	mov	r0, r4
 80128cc:	f000 fa72 	bl	8012db4 <_Bfree>
 80128d0:	4639      	mov	r1, r7
 80128d2:	4620      	mov	r0, r4
 80128d4:	f000 fa6e 	bl	8012db4 <_Bfree>
 80128d8:	e69c      	b.n	8012614 <_dtoa_r+0x6c4>
 80128da:	2600      	movs	r6, #0
 80128dc:	4637      	mov	r7, r6
 80128de:	e7e1      	b.n	80128a4 <_dtoa_r+0x954>
 80128e0:	46bb      	mov	fp, r7
 80128e2:	4637      	mov	r7, r6
 80128e4:	e599      	b.n	801241a <_dtoa_r+0x4ca>
 80128e6:	bf00      	nop
 80128e8:	40240000 	.word	0x40240000
 80128ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f000 80c8 	beq.w	8012a84 <_dtoa_r+0xb34>
 80128f4:	9b04      	ldr	r3, [sp, #16]
 80128f6:	9301      	str	r3, [sp, #4]
 80128f8:	2d00      	cmp	r5, #0
 80128fa:	dd05      	ble.n	8012908 <_dtoa_r+0x9b8>
 80128fc:	4639      	mov	r1, r7
 80128fe:	462a      	mov	r2, r5
 8012900:	4620      	mov	r0, r4
 8012902:	f000 fc71 	bl	80131e8 <__lshift>
 8012906:	4607      	mov	r7, r0
 8012908:	f1b8 0f00 	cmp.w	r8, #0
 801290c:	d05b      	beq.n	80129c6 <_dtoa_r+0xa76>
 801290e:	6879      	ldr	r1, [r7, #4]
 8012910:	4620      	mov	r0, r4
 8012912:	f000 fa0f 	bl	8012d34 <_Balloc>
 8012916:	4605      	mov	r5, r0
 8012918:	b928      	cbnz	r0, 8012926 <_dtoa_r+0x9d6>
 801291a:	4b83      	ldr	r3, [pc, #524]	; (8012b28 <_dtoa_r+0xbd8>)
 801291c:	4602      	mov	r2, r0
 801291e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012922:	f7ff bb2e 	b.w	8011f82 <_dtoa_r+0x32>
 8012926:	693a      	ldr	r2, [r7, #16]
 8012928:	3202      	adds	r2, #2
 801292a:	0092      	lsls	r2, r2, #2
 801292c:	f107 010c 	add.w	r1, r7, #12
 8012930:	300c      	adds	r0, #12
 8012932:	f7ff fa71 	bl	8011e18 <memcpy>
 8012936:	2201      	movs	r2, #1
 8012938:	4629      	mov	r1, r5
 801293a:	4620      	mov	r0, r4
 801293c:	f000 fc54 	bl	80131e8 <__lshift>
 8012940:	9b00      	ldr	r3, [sp, #0]
 8012942:	3301      	adds	r3, #1
 8012944:	9304      	str	r3, [sp, #16]
 8012946:	e9dd 2300 	ldrd	r2, r3, [sp]
 801294a:	4413      	add	r3, r2
 801294c:	9308      	str	r3, [sp, #32]
 801294e:	9b02      	ldr	r3, [sp, #8]
 8012950:	f003 0301 	and.w	r3, r3, #1
 8012954:	46b8      	mov	r8, r7
 8012956:	9306      	str	r3, [sp, #24]
 8012958:	4607      	mov	r7, r0
 801295a:	9b04      	ldr	r3, [sp, #16]
 801295c:	4631      	mov	r1, r6
 801295e:	3b01      	subs	r3, #1
 8012960:	4650      	mov	r0, sl
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	f7ff fa6c 	bl	8011e40 <quorem>
 8012968:	4641      	mov	r1, r8
 801296a:	9002      	str	r0, [sp, #8]
 801296c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012970:	4650      	mov	r0, sl
 8012972:	f000 fca5 	bl	80132c0 <__mcmp>
 8012976:	463a      	mov	r2, r7
 8012978:	9005      	str	r0, [sp, #20]
 801297a:	4631      	mov	r1, r6
 801297c:	4620      	mov	r0, r4
 801297e:	f000 fcbb 	bl	80132f8 <__mdiff>
 8012982:	68c2      	ldr	r2, [r0, #12]
 8012984:	4605      	mov	r5, r0
 8012986:	bb02      	cbnz	r2, 80129ca <_dtoa_r+0xa7a>
 8012988:	4601      	mov	r1, r0
 801298a:	4650      	mov	r0, sl
 801298c:	f000 fc98 	bl	80132c0 <__mcmp>
 8012990:	4602      	mov	r2, r0
 8012992:	4629      	mov	r1, r5
 8012994:	4620      	mov	r0, r4
 8012996:	9209      	str	r2, [sp, #36]	; 0x24
 8012998:	f000 fa0c 	bl	8012db4 <_Bfree>
 801299c:	9b07      	ldr	r3, [sp, #28]
 801299e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129a0:	9d04      	ldr	r5, [sp, #16]
 80129a2:	ea43 0102 	orr.w	r1, r3, r2
 80129a6:	9b06      	ldr	r3, [sp, #24]
 80129a8:	4319      	orrs	r1, r3
 80129aa:	d110      	bne.n	80129ce <_dtoa_r+0xa7e>
 80129ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80129b0:	d029      	beq.n	8012a06 <_dtoa_r+0xab6>
 80129b2:	9b05      	ldr	r3, [sp, #20]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	dd02      	ble.n	80129be <_dtoa_r+0xa6e>
 80129b8:	9b02      	ldr	r3, [sp, #8]
 80129ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80129be:	9b01      	ldr	r3, [sp, #4]
 80129c0:	f883 9000 	strb.w	r9, [r3]
 80129c4:	e774      	b.n	80128b0 <_dtoa_r+0x960>
 80129c6:	4638      	mov	r0, r7
 80129c8:	e7ba      	b.n	8012940 <_dtoa_r+0x9f0>
 80129ca:	2201      	movs	r2, #1
 80129cc:	e7e1      	b.n	8012992 <_dtoa_r+0xa42>
 80129ce:	9b05      	ldr	r3, [sp, #20]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	db04      	blt.n	80129de <_dtoa_r+0xa8e>
 80129d4:	9907      	ldr	r1, [sp, #28]
 80129d6:	430b      	orrs	r3, r1
 80129d8:	9906      	ldr	r1, [sp, #24]
 80129da:	430b      	orrs	r3, r1
 80129dc:	d120      	bne.n	8012a20 <_dtoa_r+0xad0>
 80129de:	2a00      	cmp	r2, #0
 80129e0:	dded      	ble.n	80129be <_dtoa_r+0xa6e>
 80129e2:	4651      	mov	r1, sl
 80129e4:	2201      	movs	r2, #1
 80129e6:	4620      	mov	r0, r4
 80129e8:	f000 fbfe 	bl	80131e8 <__lshift>
 80129ec:	4631      	mov	r1, r6
 80129ee:	4682      	mov	sl, r0
 80129f0:	f000 fc66 	bl	80132c0 <__mcmp>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	dc03      	bgt.n	8012a00 <_dtoa_r+0xab0>
 80129f8:	d1e1      	bne.n	80129be <_dtoa_r+0xa6e>
 80129fa:	f019 0f01 	tst.w	r9, #1
 80129fe:	d0de      	beq.n	80129be <_dtoa_r+0xa6e>
 8012a00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012a04:	d1d8      	bne.n	80129b8 <_dtoa_r+0xa68>
 8012a06:	9a01      	ldr	r2, [sp, #4]
 8012a08:	2339      	movs	r3, #57	; 0x39
 8012a0a:	7013      	strb	r3, [r2, #0]
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	461d      	mov	r5, r3
 8012a10:	3b01      	subs	r3, #1
 8012a12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a16:	2a39      	cmp	r2, #57	; 0x39
 8012a18:	d06c      	beq.n	8012af4 <_dtoa_r+0xba4>
 8012a1a:	3201      	adds	r2, #1
 8012a1c:	701a      	strb	r2, [r3, #0]
 8012a1e:	e747      	b.n	80128b0 <_dtoa_r+0x960>
 8012a20:	2a00      	cmp	r2, #0
 8012a22:	dd07      	ble.n	8012a34 <_dtoa_r+0xae4>
 8012a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012a28:	d0ed      	beq.n	8012a06 <_dtoa_r+0xab6>
 8012a2a:	9a01      	ldr	r2, [sp, #4]
 8012a2c:	f109 0301 	add.w	r3, r9, #1
 8012a30:	7013      	strb	r3, [r2, #0]
 8012a32:	e73d      	b.n	80128b0 <_dtoa_r+0x960>
 8012a34:	9b04      	ldr	r3, [sp, #16]
 8012a36:	9a08      	ldr	r2, [sp, #32]
 8012a38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d043      	beq.n	8012ac8 <_dtoa_r+0xb78>
 8012a40:	4651      	mov	r1, sl
 8012a42:	2300      	movs	r3, #0
 8012a44:	220a      	movs	r2, #10
 8012a46:	4620      	mov	r0, r4
 8012a48:	f000 f9d6 	bl	8012df8 <__multadd>
 8012a4c:	45b8      	cmp	r8, r7
 8012a4e:	4682      	mov	sl, r0
 8012a50:	f04f 0300 	mov.w	r3, #0
 8012a54:	f04f 020a 	mov.w	r2, #10
 8012a58:	4641      	mov	r1, r8
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	d107      	bne.n	8012a6e <_dtoa_r+0xb1e>
 8012a5e:	f000 f9cb 	bl	8012df8 <__multadd>
 8012a62:	4680      	mov	r8, r0
 8012a64:	4607      	mov	r7, r0
 8012a66:	9b04      	ldr	r3, [sp, #16]
 8012a68:	3301      	adds	r3, #1
 8012a6a:	9304      	str	r3, [sp, #16]
 8012a6c:	e775      	b.n	801295a <_dtoa_r+0xa0a>
 8012a6e:	f000 f9c3 	bl	8012df8 <__multadd>
 8012a72:	4639      	mov	r1, r7
 8012a74:	4680      	mov	r8, r0
 8012a76:	2300      	movs	r3, #0
 8012a78:	220a      	movs	r2, #10
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	f000 f9bc 	bl	8012df8 <__multadd>
 8012a80:	4607      	mov	r7, r0
 8012a82:	e7f0      	b.n	8012a66 <_dtoa_r+0xb16>
 8012a84:	9b04      	ldr	r3, [sp, #16]
 8012a86:	9301      	str	r3, [sp, #4]
 8012a88:	9d00      	ldr	r5, [sp, #0]
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4650      	mov	r0, sl
 8012a8e:	f7ff f9d7 	bl	8011e40 <quorem>
 8012a92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012a96:	9b00      	ldr	r3, [sp, #0]
 8012a98:	f805 9b01 	strb.w	r9, [r5], #1
 8012a9c:	1aea      	subs	r2, r5, r3
 8012a9e:	9b01      	ldr	r3, [sp, #4]
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	dd07      	ble.n	8012ab4 <_dtoa_r+0xb64>
 8012aa4:	4651      	mov	r1, sl
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	220a      	movs	r2, #10
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f000 f9a4 	bl	8012df8 <__multadd>
 8012ab0:	4682      	mov	sl, r0
 8012ab2:	e7ea      	b.n	8012a8a <_dtoa_r+0xb3a>
 8012ab4:	9b01      	ldr	r3, [sp, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	bfc8      	it	gt
 8012aba:	461d      	movgt	r5, r3
 8012abc:	9b00      	ldr	r3, [sp, #0]
 8012abe:	bfd8      	it	le
 8012ac0:	2501      	movle	r5, #1
 8012ac2:	441d      	add	r5, r3
 8012ac4:	f04f 0800 	mov.w	r8, #0
 8012ac8:	4651      	mov	r1, sl
 8012aca:	2201      	movs	r2, #1
 8012acc:	4620      	mov	r0, r4
 8012ace:	f000 fb8b 	bl	80131e8 <__lshift>
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	4682      	mov	sl, r0
 8012ad6:	f000 fbf3 	bl	80132c0 <__mcmp>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	dc96      	bgt.n	8012a0c <_dtoa_r+0xabc>
 8012ade:	d102      	bne.n	8012ae6 <_dtoa_r+0xb96>
 8012ae0:	f019 0f01 	tst.w	r9, #1
 8012ae4:	d192      	bne.n	8012a0c <_dtoa_r+0xabc>
 8012ae6:	462b      	mov	r3, r5
 8012ae8:	461d      	mov	r5, r3
 8012aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012aee:	2a30      	cmp	r2, #48	; 0x30
 8012af0:	d0fa      	beq.n	8012ae8 <_dtoa_r+0xb98>
 8012af2:	e6dd      	b.n	80128b0 <_dtoa_r+0x960>
 8012af4:	9a00      	ldr	r2, [sp, #0]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d189      	bne.n	8012a0e <_dtoa_r+0xabe>
 8012afa:	f10b 0b01 	add.w	fp, fp, #1
 8012afe:	2331      	movs	r3, #49	; 0x31
 8012b00:	e796      	b.n	8012a30 <_dtoa_r+0xae0>
 8012b02:	4b0a      	ldr	r3, [pc, #40]	; (8012b2c <_dtoa_r+0xbdc>)
 8012b04:	f7ff ba99 	b.w	801203a <_dtoa_r+0xea>
 8012b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f47f aa6d 	bne.w	8011fea <_dtoa_r+0x9a>
 8012b10:	4b07      	ldr	r3, [pc, #28]	; (8012b30 <_dtoa_r+0xbe0>)
 8012b12:	f7ff ba92 	b.w	801203a <_dtoa_r+0xea>
 8012b16:	9b01      	ldr	r3, [sp, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	dcb5      	bgt.n	8012a88 <_dtoa_r+0xb38>
 8012b1c:	9b07      	ldr	r3, [sp, #28]
 8012b1e:	2b02      	cmp	r3, #2
 8012b20:	f73f aeb1 	bgt.w	8012886 <_dtoa_r+0x936>
 8012b24:	e7b0      	b.n	8012a88 <_dtoa_r+0xb38>
 8012b26:	bf00      	nop
 8012b28:	080158d7 	.word	0x080158d7
 8012b2c:	08015832 	.word	0x08015832
 8012b30:	0801585b 	.word	0x0801585b

08012b34 <_free_r>:
 8012b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b36:	2900      	cmp	r1, #0
 8012b38:	d044      	beq.n	8012bc4 <_free_r+0x90>
 8012b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b3e:	9001      	str	r0, [sp, #4]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f1a1 0404 	sub.w	r4, r1, #4
 8012b46:	bfb8      	it	lt
 8012b48:	18e4      	addlt	r4, r4, r3
 8012b4a:	f000 f8e7 	bl	8012d1c <__malloc_lock>
 8012b4e:	4a1e      	ldr	r2, [pc, #120]	; (8012bc8 <_free_r+0x94>)
 8012b50:	9801      	ldr	r0, [sp, #4]
 8012b52:	6813      	ldr	r3, [r2, #0]
 8012b54:	b933      	cbnz	r3, 8012b64 <_free_r+0x30>
 8012b56:	6063      	str	r3, [r4, #4]
 8012b58:	6014      	str	r4, [r2, #0]
 8012b5a:	b003      	add	sp, #12
 8012b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b60:	f000 b8e2 	b.w	8012d28 <__malloc_unlock>
 8012b64:	42a3      	cmp	r3, r4
 8012b66:	d908      	bls.n	8012b7a <_free_r+0x46>
 8012b68:	6825      	ldr	r5, [r4, #0]
 8012b6a:	1961      	adds	r1, r4, r5
 8012b6c:	428b      	cmp	r3, r1
 8012b6e:	bf01      	itttt	eq
 8012b70:	6819      	ldreq	r1, [r3, #0]
 8012b72:	685b      	ldreq	r3, [r3, #4]
 8012b74:	1949      	addeq	r1, r1, r5
 8012b76:	6021      	streq	r1, [r4, #0]
 8012b78:	e7ed      	b.n	8012b56 <_free_r+0x22>
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	b10b      	cbz	r3, 8012b84 <_free_r+0x50>
 8012b80:	42a3      	cmp	r3, r4
 8012b82:	d9fa      	bls.n	8012b7a <_free_r+0x46>
 8012b84:	6811      	ldr	r1, [r2, #0]
 8012b86:	1855      	adds	r5, r2, r1
 8012b88:	42a5      	cmp	r5, r4
 8012b8a:	d10b      	bne.n	8012ba4 <_free_r+0x70>
 8012b8c:	6824      	ldr	r4, [r4, #0]
 8012b8e:	4421      	add	r1, r4
 8012b90:	1854      	adds	r4, r2, r1
 8012b92:	42a3      	cmp	r3, r4
 8012b94:	6011      	str	r1, [r2, #0]
 8012b96:	d1e0      	bne.n	8012b5a <_free_r+0x26>
 8012b98:	681c      	ldr	r4, [r3, #0]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	6053      	str	r3, [r2, #4]
 8012b9e:	440c      	add	r4, r1
 8012ba0:	6014      	str	r4, [r2, #0]
 8012ba2:	e7da      	b.n	8012b5a <_free_r+0x26>
 8012ba4:	d902      	bls.n	8012bac <_free_r+0x78>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	6003      	str	r3, [r0, #0]
 8012baa:	e7d6      	b.n	8012b5a <_free_r+0x26>
 8012bac:	6825      	ldr	r5, [r4, #0]
 8012bae:	1961      	adds	r1, r4, r5
 8012bb0:	428b      	cmp	r3, r1
 8012bb2:	bf04      	itt	eq
 8012bb4:	6819      	ldreq	r1, [r3, #0]
 8012bb6:	685b      	ldreq	r3, [r3, #4]
 8012bb8:	6063      	str	r3, [r4, #4]
 8012bba:	bf04      	itt	eq
 8012bbc:	1949      	addeq	r1, r1, r5
 8012bbe:	6021      	streq	r1, [r4, #0]
 8012bc0:	6054      	str	r4, [r2, #4]
 8012bc2:	e7ca      	b.n	8012b5a <_free_r+0x26>
 8012bc4:	b003      	add	sp, #12
 8012bc6:	bd30      	pop	{r4, r5, pc}
 8012bc8:	2000c4f4 	.word	0x2000c4f4

08012bcc <malloc>:
 8012bcc:	4b02      	ldr	r3, [pc, #8]	; (8012bd8 <malloc+0xc>)
 8012bce:	4601      	mov	r1, r0
 8012bd0:	6818      	ldr	r0, [r3, #0]
 8012bd2:	f000 b823 	b.w	8012c1c <_malloc_r>
 8012bd6:	bf00      	nop
 8012bd8:	20000164 	.word	0x20000164

08012bdc <sbrk_aligned>:
 8012bdc:	b570      	push	{r4, r5, r6, lr}
 8012bde:	4e0e      	ldr	r6, [pc, #56]	; (8012c18 <sbrk_aligned+0x3c>)
 8012be0:	460c      	mov	r4, r1
 8012be2:	6831      	ldr	r1, [r6, #0]
 8012be4:	4605      	mov	r5, r0
 8012be6:	b911      	cbnz	r1, 8012bee <sbrk_aligned+0x12>
 8012be8:	f001 fe1a 	bl	8014820 <_sbrk_r>
 8012bec:	6030      	str	r0, [r6, #0]
 8012bee:	4621      	mov	r1, r4
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	f001 fe15 	bl	8014820 <_sbrk_r>
 8012bf6:	1c43      	adds	r3, r0, #1
 8012bf8:	d00a      	beq.n	8012c10 <sbrk_aligned+0x34>
 8012bfa:	1cc4      	adds	r4, r0, #3
 8012bfc:	f024 0403 	bic.w	r4, r4, #3
 8012c00:	42a0      	cmp	r0, r4
 8012c02:	d007      	beq.n	8012c14 <sbrk_aligned+0x38>
 8012c04:	1a21      	subs	r1, r4, r0
 8012c06:	4628      	mov	r0, r5
 8012c08:	f001 fe0a 	bl	8014820 <_sbrk_r>
 8012c0c:	3001      	adds	r0, #1
 8012c0e:	d101      	bne.n	8012c14 <sbrk_aligned+0x38>
 8012c10:	f04f 34ff 	mov.w	r4, #4294967295
 8012c14:	4620      	mov	r0, r4
 8012c16:	bd70      	pop	{r4, r5, r6, pc}
 8012c18:	2000c4f8 	.word	0x2000c4f8

08012c1c <_malloc_r>:
 8012c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c20:	1ccd      	adds	r5, r1, #3
 8012c22:	f025 0503 	bic.w	r5, r5, #3
 8012c26:	3508      	adds	r5, #8
 8012c28:	2d0c      	cmp	r5, #12
 8012c2a:	bf38      	it	cc
 8012c2c:	250c      	movcc	r5, #12
 8012c2e:	2d00      	cmp	r5, #0
 8012c30:	4607      	mov	r7, r0
 8012c32:	db01      	blt.n	8012c38 <_malloc_r+0x1c>
 8012c34:	42a9      	cmp	r1, r5
 8012c36:	d905      	bls.n	8012c44 <_malloc_r+0x28>
 8012c38:	230c      	movs	r3, #12
 8012c3a:	603b      	str	r3, [r7, #0]
 8012c3c:	2600      	movs	r6, #0
 8012c3e:	4630      	mov	r0, r6
 8012c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012d18 <_malloc_r+0xfc>
 8012c48:	f000 f868 	bl	8012d1c <__malloc_lock>
 8012c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8012c50:	461c      	mov	r4, r3
 8012c52:	bb5c      	cbnz	r4, 8012cac <_malloc_r+0x90>
 8012c54:	4629      	mov	r1, r5
 8012c56:	4638      	mov	r0, r7
 8012c58:	f7ff ffc0 	bl	8012bdc <sbrk_aligned>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	4604      	mov	r4, r0
 8012c60:	d155      	bne.n	8012d0e <_malloc_r+0xf2>
 8012c62:	f8d8 4000 	ldr.w	r4, [r8]
 8012c66:	4626      	mov	r6, r4
 8012c68:	2e00      	cmp	r6, #0
 8012c6a:	d145      	bne.n	8012cf8 <_malloc_r+0xdc>
 8012c6c:	2c00      	cmp	r4, #0
 8012c6e:	d048      	beq.n	8012d02 <_malloc_r+0xe6>
 8012c70:	6823      	ldr	r3, [r4, #0]
 8012c72:	4631      	mov	r1, r6
 8012c74:	4638      	mov	r0, r7
 8012c76:	eb04 0903 	add.w	r9, r4, r3
 8012c7a:	f001 fdd1 	bl	8014820 <_sbrk_r>
 8012c7e:	4581      	cmp	r9, r0
 8012c80:	d13f      	bne.n	8012d02 <_malloc_r+0xe6>
 8012c82:	6821      	ldr	r1, [r4, #0]
 8012c84:	1a6d      	subs	r5, r5, r1
 8012c86:	4629      	mov	r1, r5
 8012c88:	4638      	mov	r0, r7
 8012c8a:	f7ff ffa7 	bl	8012bdc <sbrk_aligned>
 8012c8e:	3001      	adds	r0, #1
 8012c90:	d037      	beq.n	8012d02 <_malloc_r+0xe6>
 8012c92:	6823      	ldr	r3, [r4, #0]
 8012c94:	442b      	add	r3, r5
 8012c96:	6023      	str	r3, [r4, #0]
 8012c98:	f8d8 3000 	ldr.w	r3, [r8]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d038      	beq.n	8012d12 <_malloc_r+0xf6>
 8012ca0:	685a      	ldr	r2, [r3, #4]
 8012ca2:	42a2      	cmp	r2, r4
 8012ca4:	d12b      	bne.n	8012cfe <_malloc_r+0xe2>
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	605a      	str	r2, [r3, #4]
 8012caa:	e00f      	b.n	8012ccc <_malloc_r+0xb0>
 8012cac:	6822      	ldr	r2, [r4, #0]
 8012cae:	1b52      	subs	r2, r2, r5
 8012cb0:	d41f      	bmi.n	8012cf2 <_malloc_r+0xd6>
 8012cb2:	2a0b      	cmp	r2, #11
 8012cb4:	d917      	bls.n	8012ce6 <_malloc_r+0xca>
 8012cb6:	1961      	adds	r1, r4, r5
 8012cb8:	42a3      	cmp	r3, r4
 8012cba:	6025      	str	r5, [r4, #0]
 8012cbc:	bf18      	it	ne
 8012cbe:	6059      	strne	r1, [r3, #4]
 8012cc0:	6863      	ldr	r3, [r4, #4]
 8012cc2:	bf08      	it	eq
 8012cc4:	f8c8 1000 	streq.w	r1, [r8]
 8012cc8:	5162      	str	r2, [r4, r5]
 8012cca:	604b      	str	r3, [r1, #4]
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f104 060b 	add.w	r6, r4, #11
 8012cd2:	f000 f829 	bl	8012d28 <__malloc_unlock>
 8012cd6:	f026 0607 	bic.w	r6, r6, #7
 8012cda:	1d23      	adds	r3, r4, #4
 8012cdc:	1af2      	subs	r2, r6, r3
 8012cde:	d0ae      	beq.n	8012c3e <_malloc_r+0x22>
 8012ce0:	1b9b      	subs	r3, r3, r6
 8012ce2:	50a3      	str	r3, [r4, r2]
 8012ce4:	e7ab      	b.n	8012c3e <_malloc_r+0x22>
 8012ce6:	42a3      	cmp	r3, r4
 8012ce8:	6862      	ldr	r2, [r4, #4]
 8012cea:	d1dd      	bne.n	8012ca8 <_malloc_r+0x8c>
 8012cec:	f8c8 2000 	str.w	r2, [r8]
 8012cf0:	e7ec      	b.n	8012ccc <_malloc_r+0xb0>
 8012cf2:	4623      	mov	r3, r4
 8012cf4:	6864      	ldr	r4, [r4, #4]
 8012cf6:	e7ac      	b.n	8012c52 <_malloc_r+0x36>
 8012cf8:	4634      	mov	r4, r6
 8012cfa:	6876      	ldr	r6, [r6, #4]
 8012cfc:	e7b4      	b.n	8012c68 <_malloc_r+0x4c>
 8012cfe:	4613      	mov	r3, r2
 8012d00:	e7cc      	b.n	8012c9c <_malloc_r+0x80>
 8012d02:	230c      	movs	r3, #12
 8012d04:	603b      	str	r3, [r7, #0]
 8012d06:	4638      	mov	r0, r7
 8012d08:	f000 f80e 	bl	8012d28 <__malloc_unlock>
 8012d0c:	e797      	b.n	8012c3e <_malloc_r+0x22>
 8012d0e:	6025      	str	r5, [r4, #0]
 8012d10:	e7dc      	b.n	8012ccc <_malloc_r+0xb0>
 8012d12:	605b      	str	r3, [r3, #4]
 8012d14:	deff      	udf	#255	; 0xff
 8012d16:	bf00      	nop
 8012d18:	2000c4f4 	.word	0x2000c4f4

08012d1c <__malloc_lock>:
 8012d1c:	4801      	ldr	r0, [pc, #4]	; (8012d24 <__malloc_lock+0x8>)
 8012d1e:	f7ff b879 	b.w	8011e14 <__retarget_lock_acquire_recursive>
 8012d22:	bf00      	nop
 8012d24:	2000c4f0 	.word	0x2000c4f0

08012d28 <__malloc_unlock>:
 8012d28:	4801      	ldr	r0, [pc, #4]	; (8012d30 <__malloc_unlock+0x8>)
 8012d2a:	f7ff b874 	b.w	8011e16 <__retarget_lock_release_recursive>
 8012d2e:	bf00      	nop
 8012d30:	2000c4f0 	.word	0x2000c4f0

08012d34 <_Balloc>:
 8012d34:	b570      	push	{r4, r5, r6, lr}
 8012d36:	69c6      	ldr	r6, [r0, #28]
 8012d38:	4604      	mov	r4, r0
 8012d3a:	460d      	mov	r5, r1
 8012d3c:	b976      	cbnz	r6, 8012d5c <_Balloc+0x28>
 8012d3e:	2010      	movs	r0, #16
 8012d40:	f7ff ff44 	bl	8012bcc <malloc>
 8012d44:	4602      	mov	r2, r0
 8012d46:	61e0      	str	r0, [r4, #28]
 8012d48:	b920      	cbnz	r0, 8012d54 <_Balloc+0x20>
 8012d4a:	4b18      	ldr	r3, [pc, #96]	; (8012dac <_Balloc+0x78>)
 8012d4c:	4818      	ldr	r0, [pc, #96]	; (8012db0 <_Balloc+0x7c>)
 8012d4e:	216b      	movs	r1, #107	; 0x6b
 8012d50:	f001 fd7e 	bl	8014850 <__assert_func>
 8012d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d58:	6006      	str	r6, [r0, #0]
 8012d5a:	60c6      	str	r6, [r0, #12]
 8012d5c:	69e6      	ldr	r6, [r4, #28]
 8012d5e:	68f3      	ldr	r3, [r6, #12]
 8012d60:	b183      	cbz	r3, 8012d84 <_Balloc+0x50>
 8012d62:	69e3      	ldr	r3, [r4, #28]
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d6a:	b9b8      	cbnz	r0, 8012d9c <_Balloc+0x68>
 8012d6c:	2101      	movs	r1, #1
 8012d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8012d72:	1d72      	adds	r2, r6, #5
 8012d74:	0092      	lsls	r2, r2, #2
 8012d76:	4620      	mov	r0, r4
 8012d78:	f001 fd88 	bl	801488c <_calloc_r>
 8012d7c:	b160      	cbz	r0, 8012d98 <_Balloc+0x64>
 8012d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d82:	e00e      	b.n	8012da2 <_Balloc+0x6e>
 8012d84:	2221      	movs	r2, #33	; 0x21
 8012d86:	2104      	movs	r1, #4
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f001 fd7f 	bl	801488c <_calloc_r>
 8012d8e:	69e3      	ldr	r3, [r4, #28]
 8012d90:	60f0      	str	r0, [r6, #12]
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1e4      	bne.n	8012d62 <_Balloc+0x2e>
 8012d98:	2000      	movs	r0, #0
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	6802      	ldr	r2, [r0, #0]
 8012d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012da2:	2300      	movs	r3, #0
 8012da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012da8:	e7f7      	b.n	8012d9a <_Balloc+0x66>
 8012daa:	bf00      	nop
 8012dac:	08015868 	.word	0x08015868
 8012db0:	080158e8 	.word	0x080158e8

08012db4 <_Bfree>:
 8012db4:	b570      	push	{r4, r5, r6, lr}
 8012db6:	69c6      	ldr	r6, [r0, #28]
 8012db8:	4605      	mov	r5, r0
 8012dba:	460c      	mov	r4, r1
 8012dbc:	b976      	cbnz	r6, 8012ddc <_Bfree+0x28>
 8012dbe:	2010      	movs	r0, #16
 8012dc0:	f7ff ff04 	bl	8012bcc <malloc>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	61e8      	str	r0, [r5, #28]
 8012dc8:	b920      	cbnz	r0, 8012dd4 <_Bfree+0x20>
 8012dca:	4b09      	ldr	r3, [pc, #36]	; (8012df0 <_Bfree+0x3c>)
 8012dcc:	4809      	ldr	r0, [pc, #36]	; (8012df4 <_Bfree+0x40>)
 8012dce:	218f      	movs	r1, #143	; 0x8f
 8012dd0:	f001 fd3e 	bl	8014850 <__assert_func>
 8012dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dd8:	6006      	str	r6, [r0, #0]
 8012dda:	60c6      	str	r6, [r0, #12]
 8012ddc:	b13c      	cbz	r4, 8012dee <_Bfree+0x3a>
 8012dde:	69eb      	ldr	r3, [r5, #28]
 8012de0:	6862      	ldr	r2, [r4, #4]
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012de8:	6021      	str	r1, [r4, #0]
 8012dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012dee:	bd70      	pop	{r4, r5, r6, pc}
 8012df0:	08015868 	.word	0x08015868
 8012df4:	080158e8 	.word	0x080158e8

08012df8 <__multadd>:
 8012df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfc:	690d      	ldr	r5, [r1, #16]
 8012dfe:	4607      	mov	r7, r0
 8012e00:	460c      	mov	r4, r1
 8012e02:	461e      	mov	r6, r3
 8012e04:	f101 0c14 	add.w	ip, r1, #20
 8012e08:	2000      	movs	r0, #0
 8012e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8012e0e:	b299      	uxth	r1, r3
 8012e10:	fb02 6101 	mla	r1, r2, r1, r6
 8012e14:	0c1e      	lsrs	r6, r3, #16
 8012e16:	0c0b      	lsrs	r3, r1, #16
 8012e18:	fb02 3306 	mla	r3, r2, r6, r3
 8012e1c:	b289      	uxth	r1, r1
 8012e1e:	3001      	adds	r0, #1
 8012e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e24:	4285      	cmp	r5, r0
 8012e26:	f84c 1b04 	str.w	r1, [ip], #4
 8012e2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e2e:	dcec      	bgt.n	8012e0a <__multadd+0x12>
 8012e30:	b30e      	cbz	r6, 8012e76 <__multadd+0x7e>
 8012e32:	68a3      	ldr	r3, [r4, #8]
 8012e34:	42ab      	cmp	r3, r5
 8012e36:	dc19      	bgt.n	8012e6c <__multadd+0x74>
 8012e38:	6861      	ldr	r1, [r4, #4]
 8012e3a:	4638      	mov	r0, r7
 8012e3c:	3101      	adds	r1, #1
 8012e3e:	f7ff ff79 	bl	8012d34 <_Balloc>
 8012e42:	4680      	mov	r8, r0
 8012e44:	b928      	cbnz	r0, 8012e52 <__multadd+0x5a>
 8012e46:	4602      	mov	r2, r0
 8012e48:	4b0c      	ldr	r3, [pc, #48]	; (8012e7c <__multadd+0x84>)
 8012e4a:	480d      	ldr	r0, [pc, #52]	; (8012e80 <__multadd+0x88>)
 8012e4c:	21ba      	movs	r1, #186	; 0xba
 8012e4e:	f001 fcff 	bl	8014850 <__assert_func>
 8012e52:	6922      	ldr	r2, [r4, #16]
 8012e54:	3202      	adds	r2, #2
 8012e56:	f104 010c 	add.w	r1, r4, #12
 8012e5a:	0092      	lsls	r2, r2, #2
 8012e5c:	300c      	adds	r0, #12
 8012e5e:	f7fe ffdb 	bl	8011e18 <memcpy>
 8012e62:	4621      	mov	r1, r4
 8012e64:	4638      	mov	r0, r7
 8012e66:	f7ff ffa5 	bl	8012db4 <_Bfree>
 8012e6a:	4644      	mov	r4, r8
 8012e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e70:	3501      	adds	r5, #1
 8012e72:	615e      	str	r6, [r3, #20]
 8012e74:	6125      	str	r5, [r4, #16]
 8012e76:	4620      	mov	r0, r4
 8012e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e7c:	080158d7 	.word	0x080158d7
 8012e80:	080158e8 	.word	0x080158e8

08012e84 <__s2b>:
 8012e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e88:	460c      	mov	r4, r1
 8012e8a:	4615      	mov	r5, r2
 8012e8c:	461f      	mov	r7, r3
 8012e8e:	2209      	movs	r2, #9
 8012e90:	3308      	adds	r3, #8
 8012e92:	4606      	mov	r6, r0
 8012e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e98:	2100      	movs	r1, #0
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	db09      	blt.n	8012eb4 <__s2b+0x30>
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f7ff ff47 	bl	8012d34 <_Balloc>
 8012ea6:	b940      	cbnz	r0, 8012eba <__s2b+0x36>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	4b19      	ldr	r3, [pc, #100]	; (8012f10 <__s2b+0x8c>)
 8012eac:	4819      	ldr	r0, [pc, #100]	; (8012f14 <__s2b+0x90>)
 8012eae:	21d3      	movs	r1, #211	; 0xd3
 8012eb0:	f001 fcce 	bl	8014850 <__assert_func>
 8012eb4:	0052      	lsls	r2, r2, #1
 8012eb6:	3101      	adds	r1, #1
 8012eb8:	e7f0      	b.n	8012e9c <__s2b+0x18>
 8012eba:	9b08      	ldr	r3, [sp, #32]
 8012ebc:	6143      	str	r3, [r0, #20]
 8012ebe:	2d09      	cmp	r5, #9
 8012ec0:	f04f 0301 	mov.w	r3, #1
 8012ec4:	6103      	str	r3, [r0, #16]
 8012ec6:	dd16      	ble.n	8012ef6 <__s2b+0x72>
 8012ec8:	f104 0909 	add.w	r9, r4, #9
 8012ecc:	46c8      	mov	r8, r9
 8012ece:	442c      	add	r4, r5
 8012ed0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ed4:	4601      	mov	r1, r0
 8012ed6:	3b30      	subs	r3, #48	; 0x30
 8012ed8:	220a      	movs	r2, #10
 8012eda:	4630      	mov	r0, r6
 8012edc:	f7ff ff8c 	bl	8012df8 <__multadd>
 8012ee0:	45a0      	cmp	r8, r4
 8012ee2:	d1f5      	bne.n	8012ed0 <__s2b+0x4c>
 8012ee4:	f1a5 0408 	sub.w	r4, r5, #8
 8012ee8:	444c      	add	r4, r9
 8012eea:	1b2d      	subs	r5, r5, r4
 8012eec:	1963      	adds	r3, r4, r5
 8012eee:	42bb      	cmp	r3, r7
 8012ef0:	db04      	blt.n	8012efc <__s2b+0x78>
 8012ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ef6:	340a      	adds	r4, #10
 8012ef8:	2509      	movs	r5, #9
 8012efa:	e7f6      	b.n	8012eea <__s2b+0x66>
 8012efc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f00:	4601      	mov	r1, r0
 8012f02:	3b30      	subs	r3, #48	; 0x30
 8012f04:	220a      	movs	r2, #10
 8012f06:	4630      	mov	r0, r6
 8012f08:	f7ff ff76 	bl	8012df8 <__multadd>
 8012f0c:	e7ee      	b.n	8012eec <__s2b+0x68>
 8012f0e:	bf00      	nop
 8012f10:	080158d7 	.word	0x080158d7
 8012f14:	080158e8 	.word	0x080158e8

08012f18 <__hi0bits>:
 8012f18:	0c03      	lsrs	r3, r0, #16
 8012f1a:	041b      	lsls	r3, r3, #16
 8012f1c:	b9d3      	cbnz	r3, 8012f54 <__hi0bits+0x3c>
 8012f1e:	0400      	lsls	r0, r0, #16
 8012f20:	2310      	movs	r3, #16
 8012f22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012f26:	bf04      	itt	eq
 8012f28:	0200      	lsleq	r0, r0, #8
 8012f2a:	3308      	addeq	r3, #8
 8012f2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012f30:	bf04      	itt	eq
 8012f32:	0100      	lsleq	r0, r0, #4
 8012f34:	3304      	addeq	r3, #4
 8012f36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012f3a:	bf04      	itt	eq
 8012f3c:	0080      	lsleq	r0, r0, #2
 8012f3e:	3302      	addeq	r3, #2
 8012f40:	2800      	cmp	r0, #0
 8012f42:	db05      	blt.n	8012f50 <__hi0bits+0x38>
 8012f44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f48:	f103 0301 	add.w	r3, r3, #1
 8012f4c:	bf08      	it	eq
 8012f4e:	2320      	moveq	r3, #32
 8012f50:	4618      	mov	r0, r3
 8012f52:	4770      	bx	lr
 8012f54:	2300      	movs	r3, #0
 8012f56:	e7e4      	b.n	8012f22 <__hi0bits+0xa>

08012f58 <__lo0bits>:
 8012f58:	6803      	ldr	r3, [r0, #0]
 8012f5a:	f013 0207 	ands.w	r2, r3, #7
 8012f5e:	d00c      	beq.n	8012f7a <__lo0bits+0x22>
 8012f60:	07d9      	lsls	r1, r3, #31
 8012f62:	d422      	bmi.n	8012faa <__lo0bits+0x52>
 8012f64:	079a      	lsls	r2, r3, #30
 8012f66:	bf49      	itett	mi
 8012f68:	085b      	lsrmi	r3, r3, #1
 8012f6a:	089b      	lsrpl	r3, r3, #2
 8012f6c:	6003      	strmi	r3, [r0, #0]
 8012f6e:	2201      	movmi	r2, #1
 8012f70:	bf5c      	itt	pl
 8012f72:	6003      	strpl	r3, [r0, #0]
 8012f74:	2202      	movpl	r2, #2
 8012f76:	4610      	mov	r0, r2
 8012f78:	4770      	bx	lr
 8012f7a:	b299      	uxth	r1, r3
 8012f7c:	b909      	cbnz	r1, 8012f82 <__lo0bits+0x2a>
 8012f7e:	0c1b      	lsrs	r3, r3, #16
 8012f80:	2210      	movs	r2, #16
 8012f82:	b2d9      	uxtb	r1, r3
 8012f84:	b909      	cbnz	r1, 8012f8a <__lo0bits+0x32>
 8012f86:	3208      	adds	r2, #8
 8012f88:	0a1b      	lsrs	r3, r3, #8
 8012f8a:	0719      	lsls	r1, r3, #28
 8012f8c:	bf04      	itt	eq
 8012f8e:	091b      	lsreq	r3, r3, #4
 8012f90:	3204      	addeq	r2, #4
 8012f92:	0799      	lsls	r1, r3, #30
 8012f94:	bf04      	itt	eq
 8012f96:	089b      	lsreq	r3, r3, #2
 8012f98:	3202      	addeq	r2, #2
 8012f9a:	07d9      	lsls	r1, r3, #31
 8012f9c:	d403      	bmi.n	8012fa6 <__lo0bits+0x4e>
 8012f9e:	085b      	lsrs	r3, r3, #1
 8012fa0:	f102 0201 	add.w	r2, r2, #1
 8012fa4:	d003      	beq.n	8012fae <__lo0bits+0x56>
 8012fa6:	6003      	str	r3, [r0, #0]
 8012fa8:	e7e5      	b.n	8012f76 <__lo0bits+0x1e>
 8012faa:	2200      	movs	r2, #0
 8012fac:	e7e3      	b.n	8012f76 <__lo0bits+0x1e>
 8012fae:	2220      	movs	r2, #32
 8012fb0:	e7e1      	b.n	8012f76 <__lo0bits+0x1e>
	...

08012fb4 <__i2b>:
 8012fb4:	b510      	push	{r4, lr}
 8012fb6:	460c      	mov	r4, r1
 8012fb8:	2101      	movs	r1, #1
 8012fba:	f7ff febb 	bl	8012d34 <_Balloc>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	b928      	cbnz	r0, 8012fce <__i2b+0x1a>
 8012fc2:	4b05      	ldr	r3, [pc, #20]	; (8012fd8 <__i2b+0x24>)
 8012fc4:	4805      	ldr	r0, [pc, #20]	; (8012fdc <__i2b+0x28>)
 8012fc6:	f240 1145 	movw	r1, #325	; 0x145
 8012fca:	f001 fc41 	bl	8014850 <__assert_func>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	6144      	str	r4, [r0, #20]
 8012fd2:	6103      	str	r3, [r0, #16]
 8012fd4:	bd10      	pop	{r4, pc}
 8012fd6:	bf00      	nop
 8012fd8:	080158d7 	.word	0x080158d7
 8012fdc:	080158e8 	.word	0x080158e8

08012fe0 <__multiply>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	4691      	mov	r9, r2
 8012fe6:	690a      	ldr	r2, [r1, #16]
 8012fe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	bfb8      	it	lt
 8012ff0:	460b      	movlt	r3, r1
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	bfbc      	itt	lt
 8012ff6:	464c      	movlt	r4, r9
 8012ff8:	4699      	movlt	r9, r3
 8012ffa:	6927      	ldr	r7, [r4, #16]
 8012ffc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013000:	68a3      	ldr	r3, [r4, #8]
 8013002:	6861      	ldr	r1, [r4, #4]
 8013004:	eb07 060a 	add.w	r6, r7, sl
 8013008:	42b3      	cmp	r3, r6
 801300a:	b085      	sub	sp, #20
 801300c:	bfb8      	it	lt
 801300e:	3101      	addlt	r1, #1
 8013010:	f7ff fe90 	bl	8012d34 <_Balloc>
 8013014:	b930      	cbnz	r0, 8013024 <__multiply+0x44>
 8013016:	4602      	mov	r2, r0
 8013018:	4b44      	ldr	r3, [pc, #272]	; (801312c <__multiply+0x14c>)
 801301a:	4845      	ldr	r0, [pc, #276]	; (8013130 <__multiply+0x150>)
 801301c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013020:	f001 fc16 	bl	8014850 <__assert_func>
 8013024:	f100 0514 	add.w	r5, r0, #20
 8013028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801302c:	462b      	mov	r3, r5
 801302e:	2200      	movs	r2, #0
 8013030:	4543      	cmp	r3, r8
 8013032:	d321      	bcc.n	8013078 <__multiply+0x98>
 8013034:	f104 0314 	add.w	r3, r4, #20
 8013038:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801303c:	f109 0314 	add.w	r3, r9, #20
 8013040:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013044:	9202      	str	r2, [sp, #8]
 8013046:	1b3a      	subs	r2, r7, r4
 8013048:	3a15      	subs	r2, #21
 801304a:	f022 0203 	bic.w	r2, r2, #3
 801304e:	3204      	adds	r2, #4
 8013050:	f104 0115 	add.w	r1, r4, #21
 8013054:	428f      	cmp	r7, r1
 8013056:	bf38      	it	cc
 8013058:	2204      	movcc	r2, #4
 801305a:	9201      	str	r2, [sp, #4]
 801305c:	9a02      	ldr	r2, [sp, #8]
 801305e:	9303      	str	r3, [sp, #12]
 8013060:	429a      	cmp	r2, r3
 8013062:	d80c      	bhi.n	801307e <__multiply+0x9e>
 8013064:	2e00      	cmp	r6, #0
 8013066:	dd03      	ble.n	8013070 <__multiply+0x90>
 8013068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801306c:	2b00      	cmp	r3, #0
 801306e:	d05b      	beq.n	8013128 <__multiply+0x148>
 8013070:	6106      	str	r6, [r0, #16]
 8013072:	b005      	add	sp, #20
 8013074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013078:	f843 2b04 	str.w	r2, [r3], #4
 801307c:	e7d8      	b.n	8013030 <__multiply+0x50>
 801307e:	f8b3 a000 	ldrh.w	sl, [r3]
 8013082:	f1ba 0f00 	cmp.w	sl, #0
 8013086:	d024      	beq.n	80130d2 <__multiply+0xf2>
 8013088:	f104 0e14 	add.w	lr, r4, #20
 801308c:	46a9      	mov	r9, r5
 801308e:	f04f 0c00 	mov.w	ip, #0
 8013092:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013096:	f8d9 1000 	ldr.w	r1, [r9]
 801309a:	fa1f fb82 	uxth.w	fp, r2
 801309e:	b289      	uxth	r1, r1
 80130a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80130a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80130a8:	f8d9 2000 	ldr.w	r2, [r9]
 80130ac:	4461      	add	r1, ip
 80130ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80130b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80130b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80130ba:	b289      	uxth	r1, r1
 80130bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80130c0:	4577      	cmp	r7, lr
 80130c2:	f849 1b04 	str.w	r1, [r9], #4
 80130c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80130ca:	d8e2      	bhi.n	8013092 <__multiply+0xb2>
 80130cc:	9a01      	ldr	r2, [sp, #4]
 80130ce:	f845 c002 	str.w	ip, [r5, r2]
 80130d2:	9a03      	ldr	r2, [sp, #12]
 80130d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80130d8:	3304      	adds	r3, #4
 80130da:	f1b9 0f00 	cmp.w	r9, #0
 80130de:	d021      	beq.n	8013124 <__multiply+0x144>
 80130e0:	6829      	ldr	r1, [r5, #0]
 80130e2:	f104 0c14 	add.w	ip, r4, #20
 80130e6:	46ae      	mov	lr, r5
 80130e8:	f04f 0a00 	mov.w	sl, #0
 80130ec:	f8bc b000 	ldrh.w	fp, [ip]
 80130f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80130f4:	fb09 220b 	mla	r2, r9, fp, r2
 80130f8:	4452      	add	r2, sl
 80130fa:	b289      	uxth	r1, r1
 80130fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013100:	f84e 1b04 	str.w	r1, [lr], #4
 8013104:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013108:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801310c:	f8be 1000 	ldrh.w	r1, [lr]
 8013110:	fb09 110a 	mla	r1, r9, sl, r1
 8013114:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013118:	4567      	cmp	r7, ip
 801311a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801311e:	d8e5      	bhi.n	80130ec <__multiply+0x10c>
 8013120:	9a01      	ldr	r2, [sp, #4]
 8013122:	50a9      	str	r1, [r5, r2]
 8013124:	3504      	adds	r5, #4
 8013126:	e799      	b.n	801305c <__multiply+0x7c>
 8013128:	3e01      	subs	r6, #1
 801312a:	e79b      	b.n	8013064 <__multiply+0x84>
 801312c:	080158d7 	.word	0x080158d7
 8013130:	080158e8 	.word	0x080158e8

08013134 <__pow5mult>:
 8013134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013138:	4615      	mov	r5, r2
 801313a:	f012 0203 	ands.w	r2, r2, #3
 801313e:	4606      	mov	r6, r0
 8013140:	460f      	mov	r7, r1
 8013142:	d007      	beq.n	8013154 <__pow5mult+0x20>
 8013144:	4c25      	ldr	r4, [pc, #148]	; (80131dc <__pow5mult+0xa8>)
 8013146:	3a01      	subs	r2, #1
 8013148:	2300      	movs	r3, #0
 801314a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801314e:	f7ff fe53 	bl	8012df8 <__multadd>
 8013152:	4607      	mov	r7, r0
 8013154:	10ad      	asrs	r5, r5, #2
 8013156:	d03d      	beq.n	80131d4 <__pow5mult+0xa0>
 8013158:	69f4      	ldr	r4, [r6, #28]
 801315a:	b97c      	cbnz	r4, 801317c <__pow5mult+0x48>
 801315c:	2010      	movs	r0, #16
 801315e:	f7ff fd35 	bl	8012bcc <malloc>
 8013162:	4602      	mov	r2, r0
 8013164:	61f0      	str	r0, [r6, #28]
 8013166:	b928      	cbnz	r0, 8013174 <__pow5mult+0x40>
 8013168:	4b1d      	ldr	r3, [pc, #116]	; (80131e0 <__pow5mult+0xac>)
 801316a:	481e      	ldr	r0, [pc, #120]	; (80131e4 <__pow5mult+0xb0>)
 801316c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013170:	f001 fb6e 	bl	8014850 <__assert_func>
 8013174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013178:	6004      	str	r4, [r0, #0]
 801317a:	60c4      	str	r4, [r0, #12]
 801317c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013184:	b94c      	cbnz	r4, 801319a <__pow5mult+0x66>
 8013186:	f240 2171 	movw	r1, #625	; 0x271
 801318a:	4630      	mov	r0, r6
 801318c:	f7ff ff12 	bl	8012fb4 <__i2b>
 8013190:	2300      	movs	r3, #0
 8013192:	f8c8 0008 	str.w	r0, [r8, #8]
 8013196:	4604      	mov	r4, r0
 8013198:	6003      	str	r3, [r0, #0]
 801319a:	f04f 0900 	mov.w	r9, #0
 801319e:	07eb      	lsls	r3, r5, #31
 80131a0:	d50a      	bpl.n	80131b8 <__pow5mult+0x84>
 80131a2:	4639      	mov	r1, r7
 80131a4:	4622      	mov	r2, r4
 80131a6:	4630      	mov	r0, r6
 80131a8:	f7ff ff1a 	bl	8012fe0 <__multiply>
 80131ac:	4639      	mov	r1, r7
 80131ae:	4680      	mov	r8, r0
 80131b0:	4630      	mov	r0, r6
 80131b2:	f7ff fdff 	bl	8012db4 <_Bfree>
 80131b6:	4647      	mov	r7, r8
 80131b8:	106d      	asrs	r5, r5, #1
 80131ba:	d00b      	beq.n	80131d4 <__pow5mult+0xa0>
 80131bc:	6820      	ldr	r0, [r4, #0]
 80131be:	b938      	cbnz	r0, 80131d0 <__pow5mult+0x9c>
 80131c0:	4622      	mov	r2, r4
 80131c2:	4621      	mov	r1, r4
 80131c4:	4630      	mov	r0, r6
 80131c6:	f7ff ff0b 	bl	8012fe0 <__multiply>
 80131ca:	6020      	str	r0, [r4, #0]
 80131cc:	f8c0 9000 	str.w	r9, [r0]
 80131d0:	4604      	mov	r4, r0
 80131d2:	e7e4      	b.n	801319e <__pow5mult+0x6a>
 80131d4:	4638      	mov	r0, r7
 80131d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131da:	bf00      	nop
 80131dc:	08015a38 	.word	0x08015a38
 80131e0:	08015868 	.word	0x08015868
 80131e4:	080158e8 	.word	0x080158e8

080131e8 <__lshift>:
 80131e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ec:	460c      	mov	r4, r1
 80131ee:	6849      	ldr	r1, [r1, #4]
 80131f0:	6923      	ldr	r3, [r4, #16]
 80131f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131f6:	68a3      	ldr	r3, [r4, #8]
 80131f8:	4607      	mov	r7, r0
 80131fa:	4691      	mov	r9, r2
 80131fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013200:	f108 0601 	add.w	r6, r8, #1
 8013204:	42b3      	cmp	r3, r6
 8013206:	db0b      	blt.n	8013220 <__lshift+0x38>
 8013208:	4638      	mov	r0, r7
 801320a:	f7ff fd93 	bl	8012d34 <_Balloc>
 801320e:	4605      	mov	r5, r0
 8013210:	b948      	cbnz	r0, 8013226 <__lshift+0x3e>
 8013212:	4602      	mov	r2, r0
 8013214:	4b28      	ldr	r3, [pc, #160]	; (80132b8 <__lshift+0xd0>)
 8013216:	4829      	ldr	r0, [pc, #164]	; (80132bc <__lshift+0xd4>)
 8013218:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801321c:	f001 fb18 	bl	8014850 <__assert_func>
 8013220:	3101      	adds	r1, #1
 8013222:	005b      	lsls	r3, r3, #1
 8013224:	e7ee      	b.n	8013204 <__lshift+0x1c>
 8013226:	2300      	movs	r3, #0
 8013228:	f100 0114 	add.w	r1, r0, #20
 801322c:	f100 0210 	add.w	r2, r0, #16
 8013230:	4618      	mov	r0, r3
 8013232:	4553      	cmp	r3, sl
 8013234:	db33      	blt.n	801329e <__lshift+0xb6>
 8013236:	6920      	ldr	r0, [r4, #16]
 8013238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801323c:	f104 0314 	add.w	r3, r4, #20
 8013240:	f019 091f 	ands.w	r9, r9, #31
 8013244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801324c:	d02b      	beq.n	80132a6 <__lshift+0xbe>
 801324e:	f1c9 0e20 	rsb	lr, r9, #32
 8013252:	468a      	mov	sl, r1
 8013254:	2200      	movs	r2, #0
 8013256:	6818      	ldr	r0, [r3, #0]
 8013258:	fa00 f009 	lsl.w	r0, r0, r9
 801325c:	4310      	orrs	r0, r2
 801325e:	f84a 0b04 	str.w	r0, [sl], #4
 8013262:	f853 2b04 	ldr.w	r2, [r3], #4
 8013266:	459c      	cmp	ip, r3
 8013268:	fa22 f20e 	lsr.w	r2, r2, lr
 801326c:	d8f3      	bhi.n	8013256 <__lshift+0x6e>
 801326e:	ebac 0304 	sub.w	r3, ip, r4
 8013272:	3b15      	subs	r3, #21
 8013274:	f023 0303 	bic.w	r3, r3, #3
 8013278:	3304      	adds	r3, #4
 801327a:	f104 0015 	add.w	r0, r4, #21
 801327e:	4584      	cmp	ip, r0
 8013280:	bf38      	it	cc
 8013282:	2304      	movcc	r3, #4
 8013284:	50ca      	str	r2, [r1, r3]
 8013286:	b10a      	cbz	r2, 801328c <__lshift+0xa4>
 8013288:	f108 0602 	add.w	r6, r8, #2
 801328c:	3e01      	subs	r6, #1
 801328e:	4638      	mov	r0, r7
 8013290:	612e      	str	r6, [r5, #16]
 8013292:	4621      	mov	r1, r4
 8013294:	f7ff fd8e 	bl	8012db4 <_Bfree>
 8013298:	4628      	mov	r0, r5
 801329a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801329e:	f842 0f04 	str.w	r0, [r2, #4]!
 80132a2:	3301      	adds	r3, #1
 80132a4:	e7c5      	b.n	8013232 <__lshift+0x4a>
 80132a6:	3904      	subs	r1, #4
 80132a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80132b0:	459c      	cmp	ip, r3
 80132b2:	d8f9      	bhi.n	80132a8 <__lshift+0xc0>
 80132b4:	e7ea      	b.n	801328c <__lshift+0xa4>
 80132b6:	bf00      	nop
 80132b8:	080158d7 	.word	0x080158d7
 80132bc:	080158e8 	.word	0x080158e8

080132c0 <__mcmp>:
 80132c0:	b530      	push	{r4, r5, lr}
 80132c2:	6902      	ldr	r2, [r0, #16]
 80132c4:	690c      	ldr	r4, [r1, #16]
 80132c6:	1b12      	subs	r2, r2, r4
 80132c8:	d10e      	bne.n	80132e8 <__mcmp+0x28>
 80132ca:	f100 0314 	add.w	r3, r0, #20
 80132ce:	3114      	adds	r1, #20
 80132d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80132d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80132d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80132dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80132e0:	42a5      	cmp	r5, r4
 80132e2:	d003      	beq.n	80132ec <__mcmp+0x2c>
 80132e4:	d305      	bcc.n	80132f2 <__mcmp+0x32>
 80132e6:	2201      	movs	r2, #1
 80132e8:	4610      	mov	r0, r2
 80132ea:	bd30      	pop	{r4, r5, pc}
 80132ec:	4283      	cmp	r3, r0
 80132ee:	d3f3      	bcc.n	80132d8 <__mcmp+0x18>
 80132f0:	e7fa      	b.n	80132e8 <__mcmp+0x28>
 80132f2:	f04f 32ff 	mov.w	r2, #4294967295
 80132f6:	e7f7      	b.n	80132e8 <__mcmp+0x28>

080132f8 <__mdiff>:
 80132f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fc:	460c      	mov	r4, r1
 80132fe:	4606      	mov	r6, r0
 8013300:	4611      	mov	r1, r2
 8013302:	4620      	mov	r0, r4
 8013304:	4690      	mov	r8, r2
 8013306:	f7ff ffdb 	bl	80132c0 <__mcmp>
 801330a:	1e05      	subs	r5, r0, #0
 801330c:	d110      	bne.n	8013330 <__mdiff+0x38>
 801330e:	4629      	mov	r1, r5
 8013310:	4630      	mov	r0, r6
 8013312:	f7ff fd0f 	bl	8012d34 <_Balloc>
 8013316:	b930      	cbnz	r0, 8013326 <__mdiff+0x2e>
 8013318:	4b3a      	ldr	r3, [pc, #232]	; (8013404 <__mdiff+0x10c>)
 801331a:	4602      	mov	r2, r0
 801331c:	f240 2137 	movw	r1, #567	; 0x237
 8013320:	4839      	ldr	r0, [pc, #228]	; (8013408 <__mdiff+0x110>)
 8013322:	f001 fa95 	bl	8014850 <__assert_func>
 8013326:	2301      	movs	r3, #1
 8013328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801332c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013330:	bfa4      	itt	ge
 8013332:	4643      	movge	r3, r8
 8013334:	46a0      	movge	r8, r4
 8013336:	4630      	mov	r0, r6
 8013338:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801333c:	bfa6      	itte	ge
 801333e:	461c      	movge	r4, r3
 8013340:	2500      	movge	r5, #0
 8013342:	2501      	movlt	r5, #1
 8013344:	f7ff fcf6 	bl	8012d34 <_Balloc>
 8013348:	b920      	cbnz	r0, 8013354 <__mdiff+0x5c>
 801334a:	4b2e      	ldr	r3, [pc, #184]	; (8013404 <__mdiff+0x10c>)
 801334c:	4602      	mov	r2, r0
 801334e:	f240 2145 	movw	r1, #581	; 0x245
 8013352:	e7e5      	b.n	8013320 <__mdiff+0x28>
 8013354:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013358:	6926      	ldr	r6, [r4, #16]
 801335a:	60c5      	str	r5, [r0, #12]
 801335c:	f104 0914 	add.w	r9, r4, #20
 8013360:	f108 0514 	add.w	r5, r8, #20
 8013364:	f100 0e14 	add.w	lr, r0, #20
 8013368:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801336c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013370:	f108 0210 	add.w	r2, r8, #16
 8013374:	46f2      	mov	sl, lr
 8013376:	2100      	movs	r1, #0
 8013378:	f859 3b04 	ldr.w	r3, [r9], #4
 801337c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013380:	fa11 f88b 	uxtah	r8, r1, fp
 8013384:	b299      	uxth	r1, r3
 8013386:	0c1b      	lsrs	r3, r3, #16
 8013388:	eba8 0801 	sub.w	r8, r8, r1
 801338c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013390:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013394:	fa1f f888 	uxth.w	r8, r8
 8013398:	1419      	asrs	r1, r3, #16
 801339a:	454e      	cmp	r6, r9
 801339c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80133a0:	f84a 3b04 	str.w	r3, [sl], #4
 80133a4:	d8e8      	bhi.n	8013378 <__mdiff+0x80>
 80133a6:	1b33      	subs	r3, r6, r4
 80133a8:	3b15      	subs	r3, #21
 80133aa:	f023 0303 	bic.w	r3, r3, #3
 80133ae:	3304      	adds	r3, #4
 80133b0:	3415      	adds	r4, #21
 80133b2:	42a6      	cmp	r6, r4
 80133b4:	bf38      	it	cc
 80133b6:	2304      	movcc	r3, #4
 80133b8:	441d      	add	r5, r3
 80133ba:	4473      	add	r3, lr
 80133bc:	469e      	mov	lr, r3
 80133be:	462e      	mov	r6, r5
 80133c0:	4566      	cmp	r6, ip
 80133c2:	d30e      	bcc.n	80133e2 <__mdiff+0xea>
 80133c4:	f10c 0203 	add.w	r2, ip, #3
 80133c8:	1b52      	subs	r2, r2, r5
 80133ca:	f022 0203 	bic.w	r2, r2, #3
 80133ce:	3d03      	subs	r5, #3
 80133d0:	45ac      	cmp	ip, r5
 80133d2:	bf38      	it	cc
 80133d4:	2200      	movcc	r2, #0
 80133d6:	4413      	add	r3, r2
 80133d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80133dc:	b17a      	cbz	r2, 80133fe <__mdiff+0x106>
 80133de:	6107      	str	r7, [r0, #16]
 80133e0:	e7a4      	b.n	801332c <__mdiff+0x34>
 80133e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80133e6:	fa11 f288 	uxtah	r2, r1, r8
 80133ea:	1414      	asrs	r4, r2, #16
 80133ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80133f0:	b292      	uxth	r2, r2
 80133f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80133f6:	f84e 2b04 	str.w	r2, [lr], #4
 80133fa:	1421      	asrs	r1, r4, #16
 80133fc:	e7e0      	b.n	80133c0 <__mdiff+0xc8>
 80133fe:	3f01      	subs	r7, #1
 8013400:	e7ea      	b.n	80133d8 <__mdiff+0xe0>
 8013402:	bf00      	nop
 8013404:	080158d7 	.word	0x080158d7
 8013408:	080158e8 	.word	0x080158e8

0801340c <__ulp>:
 801340c:	b082      	sub	sp, #8
 801340e:	ed8d 0b00 	vstr	d0, [sp]
 8013412:	9a01      	ldr	r2, [sp, #4]
 8013414:	4b0f      	ldr	r3, [pc, #60]	; (8013454 <__ulp+0x48>)
 8013416:	4013      	ands	r3, r2
 8013418:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801341c:	2b00      	cmp	r3, #0
 801341e:	dc08      	bgt.n	8013432 <__ulp+0x26>
 8013420:	425b      	negs	r3, r3
 8013422:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013426:	ea4f 5223 	mov.w	r2, r3, asr #20
 801342a:	da04      	bge.n	8013436 <__ulp+0x2a>
 801342c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013430:	4113      	asrs	r3, r2
 8013432:	2200      	movs	r2, #0
 8013434:	e008      	b.n	8013448 <__ulp+0x3c>
 8013436:	f1a2 0314 	sub.w	r3, r2, #20
 801343a:	2b1e      	cmp	r3, #30
 801343c:	bfda      	itte	le
 801343e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013442:	40da      	lsrle	r2, r3
 8013444:	2201      	movgt	r2, #1
 8013446:	2300      	movs	r3, #0
 8013448:	4619      	mov	r1, r3
 801344a:	4610      	mov	r0, r2
 801344c:	ec41 0b10 	vmov	d0, r0, r1
 8013450:	b002      	add	sp, #8
 8013452:	4770      	bx	lr
 8013454:	7ff00000 	.word	0x7ff00000

08013458 <__b2d>:
 8013458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345c:	6906      	ldr	r6, [r0, #16]
 801345e:	f100 0814 	add.w	r8, r0, #20
 8013462:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013466:	1f37      	subs	r7, r6, #4
 8013468:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801346c:	4610      	mov	r0, r2
 801346e:	f7ff fd53 	bl	8012f18 <__hi0bits>
 8013472:	f1c0 0320 	rsb	r3, r0, #32
 8013476:	280a      	cmp	r0, #10
 8013478:	600b      	str	r3, [r1, #0]
 801347a:	491b      	ldr	r1, [pc, #108]	; (80134e8 <__b2d+0x90>)
 801347c:	dc15      	bgt.n	80134aa <__b2d+0x52>
 801347e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013482:	fa22 f30c 	lsr.w	r3, r2, ip
 8013486:	45b8      	cmp	r8, r7
 8013488:	ea43 0501 	orr.w	r5, r3, r1
 801348c:	bf34      	ite	cc
 801348e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013492:	2300      	movcs	r3, #0
 8013494:	3015      	adds	r0, #21
 8013496:	fa02 f000 	lsl.w	r0, r2, r0
 801349a:	fa23 f30c 	lsr.w	r3, r3, ip
 801349e:	4303      	orrs	r3, r0
 80134a0:	461c      	mov	r4, r3
 80134a2:	ec45 4b10 	vmov	d0, r4, r5
 80134a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134aa:	45b8      	cmp	r8, r7
 80134ac:	bf3a      	itte	cc
 80134ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80134b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80134b6:	2300      	movcs	r3, #0
 80134b8:	380b      	subs	r0, #11
 80134ba:	d012      	beq.n	80134e2 <__b2d+0x8a>
 80134bc:	f1c0 0120 	rsb	r1, r0, #32
 80134c0:	fa23 f401 	lsr.w	r4, r3, r1
 80134c4:	4082      	lsls	r2, r0
 80134c6:	4322      	orrs	r2, r4
 80134c8:	4547      	cmp	r7, r8
 80134ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80134ce:	bf8c      	ite	hi
 80134d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80134d4:	2200      	movls	r2, #0
 80134d6:	4083      	lsls	r3, r0
 80134d8:	40ca      	lsrs	r2, r1
 80134da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80134de:	4313      	orrs	r3, r2
 80134e0:	e7de      	b.n	80134a0 <__b2d+0x48>
 80134e2:	ea42 0501 	orr.w	r5, r2, r1
 80134e6:	e7db      	b.n	80134a0 <__b2d+0x48>
 80134e8:	3ff00000 	.word	0x3ff00000

080134ec <__d2b>:
 80134ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134f0:	460f      	mov	r7, r1
 80134f2:	2101      	movs	r1, #1
 80134f4:	ec59 8b10 	vmov	r8, r9, d0
 80134f8:	4616      	mov	r6, r2
 80134fa:	f7ff fc1b 	bl	8012d34 <_Balloc>
 80134fe:	4604      	mov	r4, r0
 8013500:	b930      	cbnz	r0, 8013510 <__d2b+0x24>
 8013502:	4602      	mov	r2, r0
 8013504:	4b24      	ldr	r3, [pc, #144]	; (8013598 <__d2b+0xac>)
 8013506:	4825      	ldr	r0, [pc, #148]	; (801359c <__d2b+0xb0>)
 8013508:	f240 310f 	movw	r1, #783	; 0x30f
 801350c:	f001 f9a0 	bl	8014850 <__assert_func>
 8013510:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013514:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013518:	bb2d      	cbnz	r5, 8013566 <__d2b+0x7a>
 801351a:	9301      	str	r3, [sp, #4]
 801351c:	f1b8 0300 	subs.w	r3, r8, #0
 8013520:	d026      	beq.n	8013570 <__d2b+0x84>
 8013522:	4668      	mov	r0, sp
 8013524:	9300      	str	r3, [sp, #0]
 8013526:	f7ff fd17 	bl	8012f58 <__lo0bits>
 801352a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801352e:	b1e8      	cbz	r0, 801356c <__d2b+0x80>
 8013530:	f1c0 0320 	rsb	r3, r0, #32
 8013534:	fa02 f303 	lsl.w	r3, r2, r3
 8013538:	430b      	orrs	r3, r1
 801353a:	40c2      	lsrs	r2, r0
 801353c:	6163      	str	r3, [r4, #20]
 801353e:	9201      	str	r2, [sp, #4]
 8013540:	9b01      	ldr	r3, [sp, #4]
 8013542:	61a3      	str	r3, [r4, #24]
 8013544:	2b00      	cmp	r3, #0
 8013546:	bf14      	ite	ne
 8013548:	2202      	movne	r2, #2
 801354a:	2201      	moveq	r2, #1
 801354c:	6122      	str	r2, [r4, #16]
 801354e:	b1bd      	cbz	r5, 8013580 <__d2b+0x94>
 8013550:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013554:	4405      	add	r5, r0
 8013556:	603d      	str	r5, [r7, #0]
 8013558:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801355c:	6030      	str	r0, [r6, #0]
 801355e:	4620      	mov	r0, r4
 8013560:	b003      	add	sp, #12
 8013562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801356a:	e7d6      	b.n	801351a <__d2b+0x2e>
 801356c:	6161      	str	r1, [r4, #20]
 801356e:	e7e7      	b.n	8013540 <__d2b+0x54>
 8013570:	a801      	add	r0, sp, #4
 8013572:	f7ff fcf1 	bl	8012f58 <__lo0bits>
 8013576:	9b01      	ldr	r3, [sp, #4]
 8013578:	6163      	str	r3, [r4, #20]
 801357a:	3020      	adds	r0, #32
 801357c:	2201      	movs	r2, #1
 801357e:	e7e5      	b.n	801354c <__d2b+0x60>
 8013580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013588:	6038      	str	r0, [r7, #0]
 801358a:	6918      	ldr	r0, [r3, #16]
 801358c:	f7ff fcc4 	bl	8012f18 <__hi0bits>
 8013590:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013594:	e7e2      	b.n	801355c <__d2b+0x70>
 8013596:	bf00      	nop
 8013598:	080158d7 	.word	0x080158d7
 801359c:	080158e8 	.word	0x080158e8

080135a0 <__ratio>:
 80135a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a4:	4688      	mov	r8, r1
 80135a6:	4669      	mov	r1, sp
 80135a8:	4681      	mov	r9, r0
 80135aa:	f7ff ff55 	bl	8013458 <__b2d>
 80135ae:	a901      	add	r1, sp, #4
 80135b0:	4640      	mov	r0, r8
 80135b2:	ec55 4b10 	vmov	r4, r5, d0
 80135b6:	f7ff ff4f 	bl	8013458 <__b2d>
 80135ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80135c2:	eba3 0c02 	sub.w	ip, r3, r2
 80135c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80135ca:	1a9b      	subs	r3, r3, r2
 80135cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80135d0:	ec51 0b10 	vmov	r0, r1, d0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	bfd6      	itet	le
 80135d8:	460a      	movle	r2, r1
 80135da:	462a      	movgt	r2, r5
 80135dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80135e0:	468b      	mov	fp, r1
 80135e2:	462f      	mov	r7, r5
 80135e4:	bfd4      	ite	le
 80135e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80135ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80135ee:	4620      	mov	r0, r4
 80135f0:	ee10 2a10 	vmov	r2, s0
 80135f4:	465b      	mov	r3, fp
 80135f6:	4639      	mov	r1, r7
 80135f8:	f7ed f928 	bl	800084c <__aeabi_ddiv>
 80135fc:	ec41 0b10 	vmov	d0, r0, r1
 8013600:	b003      	add	sp, #12
 8013602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013606 <__copybits>:
 8013606:	3901      	subs	r1, #1
 8013608:	b570      	push	{r4, r5, r6, lr}
 801360a:	1149      	asrs	r1, r1, #5
 801360c:	6914      	ldr	r4, [r2, #16]
 801360e:	3101      	adds	r1, #1
 8013610:	f102 0314 	add.w	r3, r2, #20
 8013614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801361c:	1f05      	subs	r5, r0, #4
 801361e:	42a3      	cmp	r3, r4
 8013620:	d30c      	bcc.n	801363c <__copybits+0x36>
 8013622:	1aa3      	subs	r3, r4, r2
 8013624:	3b11      	subs	r3, #17
 8013626:	f023 0303 	bic.w	r3, r3, #3
 801362a:	3211      	adds	r2, #17
 801362c:	42a2      	cmp	r2, r4
 801362e:	bf88      	it	hi
 8013630:	2300      	movhi	r3, #0
 8013632:	4418      	add	r0, r3
 8013634:	2300      	movs	r3, #0
 8013636:	4288      	cmp	r0, r1
 8013638:	d305      	bcc.n	8013646 <__copybits+0x40>
 801363a:	bd70      	pop	{r4, r5, r6, pc}
 801363c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013640:	f845 6f04 	str.w	r6, [r5, #4]!
 8013644:	e7eb      	b.n	801361e <__copybits+0x18>
 8013646:	f840 3b04 	str.w	r3, [r0], #4
 801364a:	e7f4      	b.n	8013636 <__copybits+0x30>

0801364c <__any_on>:
 801364c:	f100 0214 	add.w	r2, r0, #20
 8013650:	6900      	ldr	r0, [r0, #16]
 8013652:	114b      	asrs	r3, r1, #5
 8013654:	4298      	cmp	r0, r3
 8013656:	b510      	push	{r4, lr}
 8013658:	db11      	blt.n	801367e <__any_on+0x32>
 801365a:	dd0a      	ble.n	8013672 <__any_on+0x26>
 801365c:	f011 011f 	ands.w	r1, r1, #31
 8013660:	d007      	beq.n	8013672 <__any_on+0x26>
 8013662:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013666:	fa24 f001 	lsr.w	r0, r4, r1
 801366a:	fa00 f101 	lsl.w	r1, r0, r1
 801366e:	428c      	cmp	r4, r1
 8013670:	d10b      	bne.n	801368a <__any_on+0x3e>
 8013672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013676:	4293      	cmp	r3, r2
 8013678:	d803      	bhi.n	8013682 <__any_on+0x36>
 801367a:	2000      	movs	r0, #0
 801367c:	bd10      	pop	{r4, pc}
 801367e:	4603      	mov	r3, r0
 8013680:	e7f7      	b.n	8013672 <__any_on+0x26>
 8013682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013686:	2900      	cmp	r1, #0
 8013688:	d0f5      	beq.n	8013676 <__any_on+0x2a>
 801368a:	2001      	movs	r0, #1
 801368c:	e7f6      	b.n	801367c <__any_on+0x30>

0801368e <sulp>:
 801368e:	b570      	push	{r4, r5, r6, lr}
 8013690:	4604      	mov	r4, r0
 8013692:	460d      	mov	r5, r1
 8013694:	ec45 4b10 	vmov	d0, r4, r5
 8013698:	4616      	mov	r6, r2
 801369a:	f7ff feb7 	bl	801340c <__ulp>
 801369e:	ec51 0b10 	vmov	r0, r1, d0
 80136a2:	b17e      	cbz	r6, 80136c4 <sulp+0x36>
 80136a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80136a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	dd09      	ble.n	80136c4 <sulp+0x36>
 80136b0:	051b      	lsls	r3, r3, #20
 80136b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80136b6:	2400      	movs	r4, #0
 80136b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80136bc:	4622      	mov	r2, r4
 80136be:	462b      	mov	r3, r5
 80136c0:	f7ec ff9a 	bl	80005f8 <__aeabi_dmul>
 80136c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080136c8 <_strtod_l>:
 80136c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136cc:	ed2d 8b02 	vpush	{d8}
 80136d0:	b09b      	sub	sp, #108	; 0x6c
 80136d2:	4604      	mov	r4, r0
 80136d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80136d6:	2200      	movs	r2, #0
 80136d8:	9216      	str	r2, [sp, #88]	; 0x58
 80136da:	460d      	mov	r5, r1
 80136dc:	f04f 0800 	mov.w	r8, #0
 80136e0:	f04f 0900 	mov.w	r9, #0
 80136e4:	460a      	mov	r2, r1
 80136e6:	9215      	str	r2, [sp, #84]	; 0x54
 80136e8:	7811      	ldrb	r1, [r2, #0]
 80136ea:	292b      	cmp	r1, #43	; 0x2b
 80136ec:	d04c      	beq.n	8013788 <_strtod_l+0xc0>
 80136ee:	d83a      	bhi.n	8013766 <_strtod_l+0x9e>
 80136f0:	290d      	cmp	r1, #13
 80136f2:	d834      	bhi.n	801375e <_strtod_l+0x96>
 80136f4:	2908      	cmp	r1, #8
 80136f6:	d834      	bhi.n	8013762 <_strtod_l+0x9a>
 80136f8:	2900      	cmp	r1, #0
 80136fa:	d03d      	beq.n	8013778 <_strtod_l+0xb0>
 80136fc:	2200      	movs	r2, #0
 80136fe:	920a      	str	r2, [sp, #40]	; 0x28
 8013700:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013702:	7832      	ldrb	r2, [r6, #0]
 8013704:	2a30      	cmp	r2, #48	; 0x30
 8013706:	f040 80b4 	bne.w	8013872 <_strtod_l+0x1aa>
 801370a:	7872      	ldrb	r2, [r6, #1]
 801370c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013710:	2a58      	cmp	r2, #88	; 0x58
 8013712:	d170      	bne.n	80137f6 <_strtod_l+0x12e>
 8013714:	9302      	str	r3, [sp, #8]
 8013716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013718:	9301      	str	r3, [sp, #4]
 801371a:	ab16      	add	r3, sp, #88	; 0x58
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	4a8e      	ldr	r2, [pc, #568]	; (8013958 <_strtod_l+0x290>)
 8013720:	ab17      	add	r3, sp, #92	; 0x5c
 8013722:	a915      	add	r1, sp, #84	; 0x54
 8013724:	4620      	mov	r0, r4
 8013726:	f001 f92f 	bl	8014988 <__gethex>
 801372a:	f010 070f 	ands.w	r7, r0, #15
 801372e:	4605      	mov	r5, r0
 8013730:	d005      	beq.n	801373e <_strtod_l+0x76>
 8013732:	2f06      	cmp	r7, #6
 8013734:	d12a      	bne.n	801378c <_strtod_l+0xc4>
 8013736:	3601      	adds	r6, #1
 8013738:	2300      	movs	r3, #0
 801373a:	9615      	str	r6, [sp, #84]	; 0x54
 801373c:	930a      	str	r3, [sp, #40]	; 0x28
 801373e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013740:	2b00      	cmp	r3, #0
 8013742:	f040 857f 	bne.w	8014244 <_strtod_l+0xb7c>
 8013746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013748:	b1db      	cbz	r3, 8013782 <_strtod_l+0xba>
 801374a:	4642      	mov	r2, r8
 801374c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013750:	ec43 2b10 	vmov	d0, r2, r3
 8013754:	b01b      	add	sp, #108	; 0x6c
 8013756:	ecbd 8b02 	vpop	{d8}
 801375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375e:	2920      	cmp	r1, #32
 8013760:	d1cc      	bne.n	80136fc <_strtod_l+0x34>
 8013762:	3201      	adds	r2, #1
 8013764:	e7bf      	b.n	80136e6 <_strtod_l+0x1e>
 8013766:	292d      	cmp	r1, #45	; 0x2d
 8013768:	d1c8      	bne.n	80136fc <_strtod_l+0x34>
 801376a:	2101      	movs	r1, #1
 801376c:	910a      	str	r1, [sp, #40]	; 0x28
 801376e:	1c51      	adds	r1, r2, #1
 8013770:	9115      	str	r1, [sp, #84]	; 0x54
 8013772:	7852      	ldrb	r2, [r2, #1]
 8013774:	2a00      	cmp	r2, #0
 8013776:	d1c3      	bne.n	8013700 <_strtod_l+0x38>
 8013778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801377a:	9515      	str	r5, [sp, #84]	; 0x54
 801377c:	2b00      	cmp	r3, #0
 801377e:	f040 855f 	bne.w	8014240 <_strtod_l+0xb78>
 8013782:	4642      	mov	r2, r8
 8013784:	464b      	mov	r3, r9
 8013786:	e7e3      	b.n	8013750 <_strtod_l+0x88>
 8013788:	2100      	movs	r1, #0
 801378a:	e7ef      	b.n	801376c <_strtod_l+0xa4>
 801378c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801378e:	b13a      	cbz	r2, 80137a0 <_strtod_l+0xd8>
 8013790:	2135      	movs	r1, #53	; 0x35
 8013792:	a818      	add	r0, sp, #96	; 0x60
 8013794:	f7ff ff37 	bl	8013606 <__copybits>
 8013798:	9916      	ldr	r1, [sp, #88]	; 0x58
 801379a:	4620      	mov	r0, r4
 801379c:	f7ff fb0a 	bl	8012db4 <_Bfree>
 80137a0:	3f01      	subs	r7, #1
 80137a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80137a4:	2f04      	cmp	r7, #4
 80137a6:	d806      	bhi.n	80137b6 <_strtod_l+0xee>
 80137a8:	e8df f007 	tbb	[pc, r7]
 80137ac:	201d0314 	.word	0x201d0314
 80137b0:	14          	.byte	0x14
 80137b1:	00          	.byte	0x00
 80137b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80137b6:	05e9      	lsls	r1, r5, #23
 80137b8:	bf48      	it	mi
 80137ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80137be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80137c2:	0d1b      	lsrs	r3, r3, #20
 80137c4:	051b      	lsls	r3, r3, #20
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d1b9      	bne.n	801373e <_strtod_l+0x76>
 80137ca:	f7fe faf9 	bl	8011dc0 <__errno>
 80137ce:	2322      	movs	r3, #34	; 0x22
 80137d0:	6003      	str	r3, [r0, #0]
 80137d2:	e7b4      	b.n	801373e <_strtod_l+0x76>
 80137d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80137d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80137dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80137e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80137e4:	e7e7      	b.n	80137b6 <_strtod_l+0xee>
 80137e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013960 <_strtod_l+0x298>
 80137ea:	e7e4      	b.n	80137b6 <_strtod_l+0xee>
 80137ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80137f0:	f04f 38ff 	mov.w	r8, #4294967295
 80137f4:	e7df      	b.n	80137b6 <_strtod_l+0xee>
 80137f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137f8:	1c5a      	adds	r2, r3, #1
 80137fa:	9215      	str	r2, [sp, #84]	; 0x54
 80137fc:	785b      	ldrb	r3, [r3, #1]
 80137fe:	2b30      	cmp	r3, #48	; 0x30
 8013800:	d0f9      	beq.n	80137f6 <_strtod_l+0x12e>
 8013802:	2b00      	cmp	r3, #0
 8013804:	d09b      	beq.n	801373e <_strtod_l+0x76>
 8013806:	2301      	movs	r3, #1
 8013808:	f04f 0a00 	mov.w	sl, #0
 801380c:	9304      	str	r3, [sp, #16]
 801380e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013810:	930b      	str	r3, [sp, #44]	; 0x2c
 8013812:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013816:	46d3      	mov	fp, sl
 8013818:	220a      	movs	r2, #10
 801381a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801381c:	7806      	ldrb	r6, [r0, #0]
 801381e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013822:	b2d9      	uxtb	r1, r3
 8013824:	2909      	cmp	r1, #9
 8013826:	d926      	bls.n	8013876 <_strtod_l+0x1ae>
 8013828:	494c      	ldr	r1, [pc, #304]	; (801395c <_strtod_l+0x294>)
 801382a:	2201      	movs	r2, #1
 801382c:	f000 ffe6 	bl	80147fc <strncmp>
 8013830:	2800      	cmp	r0, #0
 8013832:	d030      	beq.n	8013896 <_strtod_l+0x1ce>
 8013834:	2000      	movs	r0, #0
 8013836:	4632      	mov	r2, r6
 8013838:	9005      	str	r0, [sp, #20]
 801383a:	465e      	mov	r6, fp
 801383c:	4603      	mov	r3, r0
 801383e:	2a65      	cmp	r2, #101	; 0x65
 8013840:	d001      	beq.n	8013846 <_strtod_l+0x17e>
 8013842:	2a45      	cmp	r2, #69	; 0x45
 8013844:	d113      	bne.n	801386e <_strtod_l+0x1a6>
 8013846:	b91e      	cbnz	r6, 8013850 <_strtod_l+0x188>
 8013848:	9a04      	ldr	r2, [sp, #16]
 801384a:	4302      	orrs	r2, r0
 801384c:	d094      	beq.n	8013778 <_strtod_l+0xb0>
 801384e:	2600      	movs	r6, #0
 8013850:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013852:	1c6a      	adds	r2, r5, #1
 8013854:	9215      	str	r2, [sp, #84]	; 0x54
 8013856:	786a      	ldrb	r2, [r5, #1]
 8013858:	2a2b      	cmp	r2, #43	; 0x2b
 801385a:	d074      	beq.n	8013946 <_strtod_l+0x27e>
 801385c:	2a2d      	cmp	r2, #45	; 0x2d
 801385e:	d078      	beq.n	8013952 <_strtod_l+0x28a>
 8013860:	f04f 0c00 	mov.w	ip, #0
 8013864:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013868:	2909      	cmp	r1, #9
 801386a:	d97f      	bls.n	801396c <_strtod_l+0x2a4>
 801386c:	9515      	str	r5, [sp, #84]	; 0x54
 801386e:	2700      	movs	r7, #0
 8013870:	e09e      	b.n	80139b0 <_strtod_l+0x2e8>
 8013872:	2300      	movs	r3, #0
 8013874:	e7c8      	b.n	8013808 <_strtod_l+0x140>
 8013876:	f1bb 0f08 	cmp.w	fp, #8
 801387a:	bfd8      	it	le
 801387c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801387e:	f100 0001 	add.w	r0, r0, #1
 8013882:	bfda      	itte	le
 8013884:	fb02 3301 	mlale	r3, r2, r1, r3
 8013888:	9309      	strle	r3, [sp, #36]	; 0x24
 801388a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801388e:	f10b 0b01 	add.w	fp, fp, #1
 8013892:	9015      	str	r0, [sp, #84]	; 0x54
 8013894:	e7c1      	b.n	801381a <_strtod_l+0x152>
 8013896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013898:	1c5a      	adds	r2, r3, #1
 801389a:	9215      	str	r2, [sp, #84]	; 0x54
 801389c:	785a      	ldrb	r2, [r3, #1]
 801389e:	f1bb 0f00 	cmp.w	fp, #0
 80138a2:	d037      	beq.n	8013914 <_strtod_l+0x24c>
 80138a4:	9005      	str	r0, [sp, #20]
 80138a6:	465e      	mov	r6, fp
 80138a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80138ac:	2b09      	cmp	r3, #9
 80138ae:	d912      	bls.n	80138d6 <_strtod_l+0x20e>
 80138b0:	2301      	movs	r3, #1
 80138b2:	e7c4      	b.n	801383e <_strtod_l+0x176>
 80138b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	9215      	str	r2, [sp, #84]	; 0x54
 80138ba:	785a      	ldrb	r2, [r3, #1]
 80138bc:	3001      	adds	r0, #1
 80138be:	2a30      	cmp	r2, #48	; 0x30
 80138c0:	d0f8      	beq.n	80138b4 <_strtod_l+0x1ec>
 80138c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80138c6:	2b08      	cmp	r3, #8
 80138c8:	f200 84c1 	bhi.w	801424e <_strtod_l+0xb86>
 80138cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138ce:	9005      	str	r0, [sp, #20]
 80138d0:	2000      	movs	r0, #0
 80138d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80138d4:	4606      	mov	r6, r0
 80138d6:	3a30      	subs	r2, #48	; 0x30
 80138d8:	f100 0301 	add.w	r3, r0, #1
 80138dc:	d014      	beq.n	8013908 <_strtod_l+0x240>
 80138de:	9905      	ldr	r1, [sp, #20]
 80138e0:	4419      	add	r1, r3
 80138e2:	9105      	str	r1, [sp, #20]
 80138e4:	4633      	mov	r3, r6
 80138e6:	eb00 0c06 	add.w	ip, r0, r6
 80138ea:	210a      	movs	r1, #10
 80138ec:	4563      	cmp	r3, ip
 80138ee:	d113      	bne.n	8013918 <_strtod_l+0x250>
 80138f0:	1833      	adds	r3, r6, r0
 80138f2:	2b08      	cmp	r3, #8
 80138f4:	f106 0601 	add.w	r6, r6, #1
 80138f8:	4406      	add	r6, r0
 80138fa:	dc1a      	bgt.n	8013932 <_strtod_l+0x26a>
 80138fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138fe:	230a      	movs	r3, #10
 8013900:	fb03 2301 	mla	r3, r3, r1, r2
 8013904:	9309      	str	r3, [sp, #36]	; 0x24
 8013906:	2300      	movs	r3, #0
 8013908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801390a:	1c51      	adds	r1, r2, #1
 801390c:	9115      	str	r1, [sp, #84]	; 0x54
 801390e:	7852      	ldrb	r2, [r2, #1]
 8013910:	4618      	mov	r0, r3
 8013912:	e7c9      	b.n	80138a8 <_strtod_l+0x1e0>
 8013914:	4658      	mov	r0, fp
 8013916:	e7d2      	b.n	80138be <_strtod_l+0x1f6>
 8013918:	2b08      	cmp	r3, #8
 801391a:	f103 0301 	add.w	r3, r3, #1
 801391e:	dc03      	bgt.n	8013928 <_strtod_l+0x260>
 8013920:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013922:	434f      	muls	r7, r1
 8013924:	9709      	str	r7, [sp, #36]	; 0x24
 8013926:	e7e1      	b.n	80138ec <_strtod_l+0x224>
 8013928:	2b10      	cmp	r3, #16
 801392a:	bfd8      	it	le
 801392c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013930:	e7dc      	b.n	80138ec <_strtod_l+0x224>
 8013932:	2e10      	cmp	r6, #16
 8013934:	bfdc      	itt	le
 8013936:	230a      	movle	r3, #10
 8013938:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801393c:	e7e3      	b.n	8013906 <_strtod_l+0x23e>
 801393e:	2300      	movs	r3, #0
 8013940:	9305      	str	r3, [sp, #20]
 8013942:	2301      	movs	r3, #1
 8013944:	e780      	b.n	8013848 <_strtod_l+0x180>
 8013946:	f04f 0c00 	mov.w	ip, #0
 801394a:	1caa      	adds	r2, r5, #2
 801394c:	9215      	str	r2, [sp, #84]	; 0x54
 801394e:	78aa      	ldrb	r2, [r5, #2]
 8013950:	e788      	b.n	8013864 <_strtod_l+0x19c>
 8013952:	f04f 0c01 	mov.w	ip, #1
 8013956:	e7f8      	b.n	801394a <_strtod_l+0x282>
 8013958:	08015a48 	.word	0x08015a48
 801395c:	08015a44 	.word	0x08015a44
 8013960:	7ff00000 	.word	0x7ff00000
 8013964:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013966:	1c51      	adds	r1, r2, #1
 8013968:	9115      	str	r1, [sp, #84]	; 0x54
 801396a:	7852      	ldrb	r2, [r2, #1]
 801396c:	2a30      	cmp	r2, #48	; 0x30
 801396e:	d0f9      	beq.n	8013964 <_strtod_l+0x29c>
 8013970:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013974:	2908      	cmp	r1, #8
 8013976:	f63f af7a 	bhi.w	801386e <_strtod_l+0x1a6>
 801397a:	3a30      	subs	r2, #48	; 0x30
 801397c:	9208      	str	r2, [sp, #32]
 801397e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013980:	920c      	str	r2, [sp, #48]	; 0x30
 8013982:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013984:	1c57      	adds	r7, r2, #1
 8013986:	9715      	str	r7, [sp, #84]	; 0x54
 8013988:	7852      	ldrb	r2, [r2, #1]
 801398a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801398e:	f1be 0f09 	cmp.w	lr, #9
 8013992:	d938      	bls.n	8013a06 <_strtod_l+0x33e>
 8013994:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013996:	1a7f      	subs	r7, r7, r1
 8013998:	2f08      	cmp	r7, #8
 801399a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801399e:	dc03      	bgt.n	80139a8 <_strtod_l+0x2e0>
 80139a0:	9908      	ldr	r1, [sp, #32]
 80139a2:	428f      	cmp	r7, r1
 80139a4:	bfa8      	it	ge
 80139a6:	460f      	movge	r7, r1
 80139a8:	f1bc 0f00 	cmp.w	ip, #0
 80139ac:	d000      	beq.n	80139b0 <_strtod_l+0x2e8>
 80139ae:	427f      	negs	r7, r7
 80139b0:	2e00      	cmp	r6, #0
 80139b2:	d14f      	bne.n	8013a54 <_strtod_l+0x38c>
 80139b4:	9904      	ldr	r1, [sp, #16]
 80139b6:	4301      	orrs	r1, r0
 80139b8:	f47f aec1 	bne.w	801373e <_strtod_l+0x76>
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f47f aedb 	bne.w	8013778 <_strtod_l+0xb0>
 80139c2:	2a69      	cmp	r2, #105	; 0x69
 80139c4:	d029      	beq.n	8013a1a <_strtod_l+0x352>
 80139c6:	dc26      	bgt.n	8013a16 <_strtod_l+0x34e>
 80139c8:	2a49      	cmp	r2, #73	; 0x49
 80139ca:	d026      	beq.n	8013a1a <_strtod_l+0x352>
 80139cc:	2a4e      	cmp	r2, #78	; 0x4e
 80139ce:	f47f aed3 	bne.w	8013778 <_strtod_l+0xb0>
 80139d2:	499b      	ldr	r1, [pc, #620]	; (8013c40 <_strtod_l+0x578>)
 80139d4:	a815      	add	r0, sp, #84	; 0x54
 80139d6:	f001 fa17 	bl	8014e08 <__match>
 80139da:	2800      	cmp	r0, #0
 80139dc:	f43f aecc 	beq.w	8013778 <_strtod_l+0xb0>
 80139e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	2b28      	cmp	r3, #40	; 0x28
 80139e6:	d12f      	bne.n	8013a48 <_strtod_l+0x380>
 80139e8:	4996      	ldr	r1, [pc, #600]	; (8013c44 <_strtod_l+0x57c>)
 80139ea:	aa18      	add	r2, sp, #96	; 0x60
 80139ec:	a815      	add	r0, sp, #84	; 0x54
 80139ee:	f001 fa1f 	bl	8014e30 <__hexnan>
 80139f2:	2805      	cmp	r0, #5
 80139f4:	d128      	bne.n	8013a48 <_strtod_l+0x380>
 80139f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80139fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013a00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013a04:	e69b      	b.n	801373e <_strtod_l+0x76>
 8013a06:	9f08      	ldr	r7, [sp, #32]
 8013a08:	210a      	movs	r1, #10
 8013a0a:	fb01 2107 	mla	r1, r1, r7, r2
 8013a0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013a12:	9208      	str	r2, [sp, #32]
 8013a14:	e7b5      	b.n	8013982 <_strtod_l+0x2ba>
 8013a16:	2a6e      	cmp	r2, #110	; 0x6e
 8013a18:	e7d9      	b.n	80139ce <_strtod_l+0x306>
 8013a1a:	498b      	ldr	r1, [pc, #556]	; (8013c48 <_strtod_l+0x580>)
 8013a1c:	a815      	add	r0, sp, #84	; 0x54
 8013a1e:	f001 f9f3 	bl	8014e08 <__match>
 8013a22:	2800      	cmp	r0, #0
 8013a24:	f43f aea8 	beq.w	8013778 <_strtod_l+0xb0>
 8013a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a2a:	4988      	ldr	r1, [pc, #544]	; (8013c4c <_strtod_l+0x584>)
 8013a2c:	3b01      	subs	r3, #1
 8013a2e:	a815      	add	r0, sp, #84	; 0x54
 8013a30:	9315      	str	r3, [sp, #84]	; 0x54
 8013a32:	f001 f9e9 	bl	8014e08 <__match>
 8013a36:	b910      	cbnz	r0, 8013a3e <_strtod_l+0x376>
 8013a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	9315      	str	r3, [sp, #84]	; 0x54
 8013a3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013c5c <_strtod_l+0x594>
 8013a42:	f04f 0800 	mov.w	r8, #0
 8013a46:	e67a      	b.n	801373e <_strtod_l+0x76>
 8013a48:	4881      	ldr	r0, [pc, #516]	; (8013c50 <_strtod_l+0x588>)
 8013a4a:	f000 fef9 	bl	8014840 <nan>
 8013a4e:	ec59 8b10 	vmov	r8, r9, d0
 8013a52:	e674      	b.n	801373e <_strtod_l+0x76>
 8013a54:	9b05      	ldr	r3, [sp, #20]
 8013a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a58:	1afb      	subs	r3, r7, r3
 8013a5a:	f1bb 0f00 	cmp.w	fp, #0
 8013a5e:	bf08      	it	eq
 8013a60:	46b3      	moveq	fp, r6
 8013a62:	2e10      	cmp	r6, #16
 8013a64:	9308      	str	r3, [sp, #32]
 8013a66:	4635      	mov	r5, r6
 8013a68:	bfa8      	it	ge
 8013a6a:	2510      	movge	r5, #16
 8013a6c:	f7ec fd4a 	bl	8000504 <__aeabi_ui2d>
 8013a70:	2e09      	cmp	r6, #9
 8013a72:	4680      	mov	r8, r0
 8013a74:	4689      	mov	r9, r1
 8013a76:	dd13      	ble.n	8013aa0 <_strtod_l+0x3d8>
 8013a78:	4b76      	ldr	r3, [pc, #472]	; (8013c54 <_strtod_l+0x58c>)
 8013a7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013a7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013a82:	f7ec fdb9 	bl	80005f8 <__aeabi_dmul>
 8013a86:	4680      	mov	r8, r0
 8013a88:	4650      	mov	r0, sl
 8013a8a:	4689      	mov	r9, r1
 8013a8c:	f7ec fd3a 	bl	8000504 <__aeabi_ui2d>
 8013a90:	4602      	mov	r2, r0
 8013a92:	460b      	mov	r3, r1
 8013a94:	4640      	mov	r0, r8
 8013a96:	4649      	mov	r1, r9
 8013a98:	f7ec fbf8 	bl	800028c <__adddf3>
 8013a9c:	4680      	mov	r8, r0
 8013a9e:	4689      	mov	r9, r1
 8013aa0:	2e0f      	cmp	r6, #15
 8013aa2:	dc38      	bgt.n	8013b16 <_strtod_l+0x44e>
 8013aa4:	9b08      	ldr	r3, [sp, #32]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f43f ae49 	beq.w	801373e <_strtod_l+0x76>
 8013aac:	dd24      	ble.n	8013af8 <_strtod_l+0x430>
 8013aae:	2b16      	cmp	r3, #22
 8013ab0:	dc0b      	bgt.n	8013aca <_strtod_l+0x402>
 8013ab2:	4968      	ldr	r1, [pc, #416]	; (8013c54 <_strtod_l+0x58c>)
 8013ab4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013abc:	4642      	mov	r2, r8
 8013abe:	464b      	mov	r3, r9
 8013ac0:	f7ec fd9a 	bl	80005f8 <__aeabi_dmul>
 8013ac4:	4680      	mov	r8, r0
 8013ac6:	4689      	mov	r9, r1
 8013ac8:	e639      	b.n	801373e <_strtod_l+0x76>
 8013aca:	9a08      	ldr	r2, [sp, #32]
 8013acc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	db20      	blt.n	8013b16 <_strtod_l+0x44e>
 8013ad4:	4c5f      	ldr	r4, [pc, #380]	; (8013c54 <_strtod_l+0x58c>)
 8013ad6:	f1c6 060f 	rsb	r6, r6, #15
 8013ada:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013ade:	4642      	mov	r2, r8
 8013ae0:	464b      	mov	r3, r9
 8013ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ae6:	f7ec fd87 	bl	80005f8 <__aeabi_dmul>
 8013aea:	9b08      	ldr	r3, [sp, #32]
 8013aec:	1b9e      	subs	r6, r3, r6
 8013aee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013af2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013af6:	e7e3      	b.n	8013ac0 <_strtod_l+0x3f8>
 8013af8:	9b08      	ldr	r3, [sp, #32]
 8013afa:	3316      	adds	r3, #22
 8013afc:	db0b      	blt.n	8013b16 <_strtod_l+0x44e>
 8013afe:	9b05      	ldr	r3, [sp, #20]
 8013b00:	1bdf      	subs	r7, r3, r7
 8013b02:	4b54      	ldr	r3, [pc, #336]	; (8013c54 <_strtod_l+0x58c>)
 8013b04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b0c:	4640      	mov	r0, r8
 8013b0e:	4649      	mov	r1, r9
 8013b10:	f7ec fe9c 	bl	800084c <__aeabi_ddiv>
 8013b14:	e7d6      	b.n	8013ac4 <_strtod_l+0x3fc>
 8013b16:	9b08      	ldr	r3, [sp, #32]
 8013b18:	1b75      	subs	r5, r6, r5
 8013b1a:	441d      	add	r5, r3
 8013b1c:	2d00      	cmp	r5, #0
 8013b1e:	dd70      	ble.n	8013c02 <_strtod_l+0x53a>
 8013b20:	f015 030f 	ands.w	r3, r5, #15
 8013b24:	d00a      	beq.n	8013b3c <_strtod_l+0x474>
 8013b26:	494b      	ldr	r1, [pc, #300]	; (8013c54 <_strtod_l+0x58c>)
 8013b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b2c:	4642      	mov	r2, r8
 8013b2e:	464b      	mov	r3, r9
 8013b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b34:	f7ec fd60 	bl	80005f8 <__aeabi_dmul>
 8013b38:	4680      	mov	r8, r0
 8013b3a:	4689      	mov	r9, r1
 8013b3c:	f035 050f 	bics.w	r5, r5, #15
 8013b40:	d04d      	beq.n	8013bde <_strtod_l+0x516>
 8013b42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013b46:	dd22      	ble.n	8013b8e <_strtod_l+0x4c6>
 8013b48:	2500      	movs	r5, #0
 8013b4a:	46ab      	mov	fp, r5
 8013b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8013b4e:	9505      	str	r5, [sp, #20]
 8013b50:	2322      	movs	r3, #34	; 0x22
 8013b52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013c5c <_strtod_l+0x594>
 8013b56:	6023      	str	r3, [r4, #0]
 8013b58:	f04f 0800 	mov.w	r8, #0
 8013b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f43f aded 	beq.w	801373e <_strtod_l+0x76>
 8013b64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b66:	4620      	mov	r0, r4
 8013b68:	f7ff f924 	bl	8012db4 <_Bfree>
 8013b6c:	9905      	ldr	r1, [sp, #20]
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f7ff f920 	bl	8012db4 <_Bfree>
 8013b74:	4659      	mov	r1, fp
 8013b76:	4620      	mov	r0, r4
 8013b78:	f7ff f91c 	bl	8012db4 <_Bfree>
 8013b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f7ff f918 	bl	8012db4 <_Bfree>
 8013b84:	4629      	mov	r1, r5
 8013b86:	4620      	mov	r0, r4
 8013b88:	f7ff f914 	bl	8012db4 <_Bfree>
 8013b8c:	e5d7      	b.n	801373e <_strtod_l+0x76>
 8013b8e:	4b32      	ldr	r3, [pc, #200]	; (8013c58 <_strtod_l+0x590>)
 8013b90:	9304      	str	r3, [sp, #16]
 8013b92:	2300      	movs	r3, #0
 8013b94:	112d      	asrs	r5, r5, #4
 8013b96:	4640      	mov	r0, r8
 8013b98:	4649      	mov	r1, r9
 8013b9a:	469a      	mov	sl, r3
 8013b9c:	2d01      	cmp	r5, #1
 8013b9e:	dc21      	bgt.n	8013be4 <_strtod_l+0x51c>
 8013ba0:	b10b      	cbz	r3, 8013ba6 <_strtod_l+0x4de>
 8013ba2:	4680      	mov	r8, r0
 8013ba4:	4689      	mov	r9, r1
 8013ba6:	492c      	ldr	r1, [pc, #176]	; (8013c58 <_strtod_l+0x590>)
 8013ba8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013bac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013bb0:	4642      	mov	r2, r8
 8013bb2:	464b      	mov	r3, r9
 8013bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bb8:	f7ec fd1e 	bl	80005f8 <__aeabi_dmul>
 8013bbc:	4b27      	ldr	r3, [pc, #156]	; (8013c5c <_strtod_l+0x594>)
 8013bbe:	460a      	mov	r2, r1
 8013bc0:	400b      	ands	r3, r1
 8013bc2:	4927      	ldr	r1, [pc, #156]	; (8013c60 <_strtod_l+0x598>)
 8013bc4:	428b      	cmp	r3, r1
 8013bc6:	4680      	mov	r8, r0
 8013bc8:	d8be      	bhi.n	8013b48 <_strtod_l+0x480>
 8013bca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013bce:	428b      	cmp	r3, r1
 8013bd0:	bf86      	itte	hi
 8013bd2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013c64 <_strtod_l+0x59c>
 8013bd6:	f04f 38ff 	movhi.w	r8, #4294967295
 8013bda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013bde:	2300      	movs	r3, #0
 8013be0:	9304      	str	r3, [sp, #16]
 8013be2:	e07b      	b.n	8013cdc <_strtod_l+0x614>
 8013be4:	07ea      	lsls	r2, r5, #31
 8013be6:	d505      	bpl.n	8013bf4 <_strtod_l+0x52c>
 8013be8:	9b04      	ldr	r3, [sp, #16]
 8013bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bee:	f7ec fd03 	bl	80005f8 <__aeabi_dmul>
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	9a04      	ldr	r2, [sp, #16]
 8013bf6:	3208      	adds	r2, #8
 8013bf8:	f10a 0a01 	add.w	sl, sl, #1
 8013bfc:	106d      	asrs	r5, r5, #1
 8013bfe:	9204      	str	r2, [sp, #16]
 8013c00:	e7cc      	b.n	8013b9c <_strtod_l+0x4d4>
 8013c02:	d0ec      	beq.n	8013bde <_strtod_l+0x516>
 8013c04:	426d      	negs	r5, r5
 8013c06:	f015 020f 	ands.w	r2, r5, #15
 8013c0a:	d00a      	beq.n	8013c22 <_strtod_l+0x55a>
 8013c0c:	4b11      	ldr	r3, [pc, #68]	; (8013c54 <_strtod_l+0x58c>)
 8013c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c12:	4640      	mov	r0, r8
 8013c14:	4649      	mov	r1, r9
 8013c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1a:	f7ec fe17 	bl	800084c <__aeabi_ddiv>
 8013c1e:	4680      	mov	r8, r0
 8013c20:	4689      	mov	r9, r1
 8013c22:	112d      	asrs	r5, r5, #4
 8013c24:	d0db      	beq.n	8013bde <_strtod_l+0x516>
 8013c26:	2d1f      	cmp	r5, #31
 8013c28:	dd1e      	ble.n	8013c68 <_strtod_l+0x5a0>
 8013c2a:	2500      	movs	r5, #0
 8013c2c:	46ab      	mov	fp, r5
 8013c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8013c30:	9505      	str	r5, [sp, #20]
 8013c32:	2322      	movs	r3, #34	; 0x22
 8013c34:	f04f 0800 	mov.w	r8, #0
 8013c38:	f04f 0900 	mov.w	r9, #0
 8013c3c:	6023      	str	r3, [r4, #0]
 8013c3e:	e78d      	b.n	8013b5c <_strtod_l+0x494>
 8013c40:	0801582f 	.word	0x0801582f
 8013c44:	08015a5c 	.word	0x08015a5c
 8013c48:	08015827 	.word	0x08015827
 8013c4c:	0801585e 	.word	0x0801585e
 8013c50:	08015bed 	.word	0x08015bed
 8013c54:	08015970 	.word	0x08015970
 8013c58:	08015948 	.word	0x08015948
 8013c5c:	7ff00000 	.word	0x7ff00000
 8013c60:	7ca00000 	.word	0x7ca00000
 8013c64:	7fefffff 	.word	0x7fefffff
 8013c68:	f015 0310 	ands.w	r3, r5, #16
 8013c6c:	bf18      	it	ne
 8013c6e:	236a      	movne	r3, #106	; 0x6a
 8013c70:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8014014 <_strtod_l+0x94c>
 8013c74:	9304      	str	r3, [sp, #16]
 8013c76:	4640      	mov	r0, r8
 8013c78:	4649      	mov	r1, r9
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	07ea      	lsls	r2, r5, #31
 8013c7e:	d504      	bpl.n	8013c8a <_strtod_l+0x5c2>
 8013c80:	e9da 2300 	ldrd	r2, r3, [sl]
 8013c84:	f7ec fcb8 	bl	80005f8 <__aeabi_dmul>
 8013c88:	2301      	movs	r3, #1
 8013c8a:	106d      	asrs	r5, r5, #1
 8013c8c:	f10a 0a08 	add.w	sl, sl, #8
 8013c90:	d1f4      	bne.n	8013c7c <_strtod_l+0x5b4>
 8013c92:	b10b      	cbz	r3, 8013c98 <_strtod_l+0x5d0>
 8013c94:	4680      	mov	r8, r0
 8013c96:	4689      	mov	r9, r1
 8013c98:	9b04      	ldr	r3, [sp, #16]
 8013c9a:	b1bb      	cbz	r3, 8013ccc <_strtod_l+0x604>
 8013c9c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013ca0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	4649      	mov	r1, r9
 8013ca8:	dd10      	ble.n	8013ccc <_strtod_l+0x604>
 8013caa:	2b1f      	cmp	r3, #31
 8013cac:	f340 811e 	ble.w	8013eec <_strtod_l+0x824>
 8013cb0:	2b34      	cmp	r3, #52	; 0x34
 8013cb2:	bfde      	ittt	le
 8013cb4:	f04f 33ff 	movle.w	r3, #4294967295
 8013cb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013cbc:	4093      	lslle	r3, r2
 8013cbe:	f04f 0800 	mov.w	r8, #0
 8013cc2:	bfcc      	ite	gt
 8013cc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013cc8:	ea03 0901 	andle.w	r9, r3, r1
 8013ccc:	2200      	movs	r2, #0
 8013cce:	2300      	movs	r3, #0
 8013cd0:	4640      	mov	r0, r8
 8013cd2:	4649      	mov	r1, r9
 8013cd4:	f7ec fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d1a6      	bne.n	8013c2a <_strtod_l+0x562>
 8013cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cde:	9300      	str	r3, [sp, #0]
 8013ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ce2:	4633      	mov	r3, r6
 8013ce4:	465a      	mov	r2, fp
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f7ff f8cc 	bl	8012e84 <__s2b>
 8013cec:	9009      	str	r0, [sp, #36]	; 0x24
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	f43f af2a 	beq.w	8013b48 <_strtod_l+0x480>
 8013cf4:	9a08      	ldr	r2, [sp, #32]
 8013cf6:	9b05      	ldr	r3, [sp, #20]
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	eba3 0307 	sub.w	r3, r3, r7
 8013cfe:	bfa8      	it	ge
 8013d00:	2300      	movge	r3, #0
 8013d02:	930c      	str	r3, [sp, #48]	; 0x30
 8013d04:	2500      	movs	r5, #0
 8013d06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8013d0c:	46ab      	mov	fp, r5
 8013d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d10:	4620      	mov	r0, r4
 8013d12:	6859      	ldr	r1, [r3, #4]
 8013d14:	f7ff f80e 	bl	8012d34 <_Balloc>
 8013d18:	9005      	str	r0, [sp, #20]
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	f43f af18 	beq.w	8013b50 <_strtod_l+0x488>
 8013d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d22:	691a      	ldr	r2, [r3, #16]
 8013d24:	3202      	adds	r2, #2
 8013d26:	f103 010c 	add.w	r1, r3, #12
 8013d2a:	0092      	lsls	r2, r2, #2
 8013d2c:	300c      	adds	r0, #12
 8013d2e:	f7fe f873 	bl	8011e18 <memcpy>
 8013d32:	ec49 8b10 	vmov	d0, r8, r9
 8013d36:	aa18      	add	r2, sp, #96	; 0x60
 8013d38:	a917      	add	r1, sp, #92	; 0x5c
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f7ff fbd6 	bl	80134ec <__d2b>
 8013d40:	ec49 8b18 	vmov	d8, r8, r9
 8013d44:	9016      	str	r0, [sp, #88]	; 0x58
 8013d46:	2800      	cmp	r0, #0
 8013d48:	f43f af02 	beq.w	8013b50 <_strtod_l+0x488>
 8013d4c:	2101      	movs	r1, #1
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f7ff f930 	bl	8012fb4 <__i2b>
 8013d54:	4683      	mov	fp, r0
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f43f aefa 	beq.w	8013b50 <_strtod_l+0x488>
 8013d5c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013d5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d60:	2e00      	cmp	r6, #0
 8013d62:	bfab      	itete	ge
 8013d64:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013d66:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013d68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013d6a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013d6e:	bfac      	ite	ge
 8013d70:	eb06 0a03 	addge.w	sl, r6, r3
 8013d74:	1b9f      	sublt	r7, r3, r6
 8013d76:	9b04      	ldr	r3, [sp, #16]
 8013d78:	1af6      	subs	r6, r6, r3
 8013d7a:	4416      	add	r6, r2
 8013d7c:	4ba0      	ldr	r3, [pc, #640]	; (8014000 <_strtod_l+0x938>)
 8013d7e:	3e01      	subs	r6, #1
 8013d80:	429e      	cmp	r6, r3
 8013d82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013d86:	f280 80c4 	bge.w	8013f12 <_strtod_l+0x84a>
 8013d8a:	1b9b      	subs	r3, r3, r6
 8013d8c:	2b1f      	cmp	r3, #31
 8013d8e:	eba2 0203 	sub.w	r2, r2, r3
 8013d92:	f04f 0101 	mov.w	r1, #1
 8013d96:	f300 80b0 	bgt.w	8013efa <_strtod_l+0x832>
 8013d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8013d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8013da0:	2300      	movs	r3, #0
 8013da2:	930d      	str	r3, [sp, #52]	; 0x34
 8013da4:	eb0a 0602 	add.w	r6, sl, r2
 8013da8:	9b04      	ldr	r3, [sp, #16]
 8013daa:	45b2      	cmp	sl, r6
 8013dac:	4417      	add	r7, r2
 8013dae:	441f      	add	r7, r3
 8013db0:	4653      	mov	r3, sl
 8013db2:	bfa8      	it	ge
 8013db4:	4633      	movge	r3, r6
 8013db6:	42bb      	cmp	r3, r7
 8013db8:	bfa8      	it	ge
 8013dba:	463b      	movge	r3, r7
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	bfc2      	ittt	gt
 8013dc0:	1af6      	subgt	r6, r6, r3
 8013dc2:	1aff      	subgt	r7, r7, r3
 8013dc4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	dd17      	ble.n	8013dfe <_strtod_l+0x736>
 8013dce:	4659      	mov	r1, fp
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f7ff f9ae 	bl	8013134 <__pow5mult>
 8013dd8:	4683      	mov	fp, r0
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	f43f aeb8 	beq.w	8013b50 <_strtod_l+0x488>
 8013de0:	4601      	mov	r1, r0
 8013de2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013de4:	4620      	mov	r0, r4
 8013de6:	f7ff f8fb 	bl	8012fe0 <__multiply>
 8013dea:	900b      	str	r0, [sp, #44]	; 0x2c
 8013dec:	2800      	cmp	r0, #0
 8013dee:	f43f aeaf 	beq.w	8013b50 <_strtod_l+0x488>
 8013df2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013df4:	4620      	mov	r0, r4
 8013df6:	f7fe ffdd 	bl	8012db4 <_Bfree>
 8013dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dfc:	9316      	str	r3, [sp, #88]	; 0x58
 8013dfe:	2e00      	cmp	r6, #0
 8013e00:	f300 808c 	bgt.w	8013f1c <_strtod_l+0x854>
 8013e04:	9b08      	ldr	r3, [sp, #32]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	dd08      	ble.n	8013e1c <_strtod_l+0x754>
 8013e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e0c:	9905      	ldr	r1, [sp, #20]
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f7ff f990 	bl	8013134 <__pow5mult>
 8013e14:	9005      	str	r0, [sp, #20]
 8013e16:	2800      	cmp	r0, #0
 8013e18:	f43f ae9a 	beq.w	8013b50 <_strtod_l+0x488>
 8013e1c:	2f00      	cmp	r7, #0
 8013e1e:	dd08      	ble.n	8013e32 <_strtod_l+0x76a>
 8013e20:	9905      	ldr	r1, [sp, #20]
 8013e22:	463a      	mov	r2, r7
 8013e24:	4620      	mov	r0, r4
 8013e26:	f7ff f9df 	bl	80131e8 <__lshift>
 8013e2a:	9005      	str	r0, [sp, #20]
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	f43f ae8f 	beq.w	8013b50 <_strtod_l+0x488>
 8013e32:	f1ba 0f00 	cmp.w	sl, #0
 8013e36:	dd08      	ble.n	8013e4a <_strtod_l+0x782>
 8013e38:	4659      	mov	r1, fp
 8013e3a:	4652      	mov	r2, sl
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f7ff f9d3 	bl	80131e8 <__lshift>
 8013e42:	4683      	mov	fp, r0
 8013e44:	2800      	cmp	r0, #0
 8013e46:	f43f ae83 	beq.w	8013b50 <_strtod_l+0x488>
 8013e4a:	9a05      	ldr	r2, [sp, #20]
 8013e4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f7ff fa52 	bl	80132f8 <__mdiff>
 8013e54:	4605      	mov	r5, r0
 8013e56:	2800      	cmp	r0, #0
 8013e58:	f43f ae7a 	beq.w	8013b50 <_strtod_l+0x488>
 8013e5c:	68c3      	ldr	r3, [r0, #12]
 8013e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e60:	2300      	movs	r3, #0
 8013e62:	60c3      	str	r3, [r0, #12]
 8013e64:	4659      	mov	r1, fp
 8013e66:	f7ff fa2b 	bl	80132c0 <__mcmp>
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	da60      	bge.n	8013f30 <_strtod_l+0x868>
 8013e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e70:	ea53 0308 	orrs.w	r3, r3, r8
 8013e74:	f040 8084 	bne.w	8013f80 <_strtod_l+0x8b8>
 8013e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d17f      	bne.n	8013f80 <_strtod_l+0x8b8>
 8013e80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013e84:	0d1b      	lsrs	r3, r3, #20
 8013e86:	051b      	lsls	r3, r3, #20
 8013e88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013e8c:	d978      	bls.n	8013f80 <_strtod_l+0x8b8>
 8013e8e:	696b      	ldr	r3, [r5, #20]
 8013e90:	b913      	cbnz	r3, 8013e98 <_strtod_l+0x7d0>
 8013e92:	692b      	ldr	r3, [r5, #16]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	dd73      	ble.n	8013f80 <_strtod_l+0x8b8>
 8013e98:	4629      	mov	r1, r5
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	f7ff f9a3 	bl	80131e8 <__lshift>
 8013ea2:	4659      	mov	r1, fp
 8013ea4:	4605      	mov	r5, r0
 8013ea6:	f7ff fa0b 	bl	80132c0 <__mcmp>
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	dd68      	ble.n	8013f80 <_strtod_l+0x8b8>
 8013eae:	9904      	ldr	r1, [sp, #16]
 8013eb0:	4a54      	ldr	r2, [pc, #336]	; (8014004 <_strtod_l+0x93c>)
 8013eb2:	464b      	mov	r3, r9
 8013eb4:	2900      	cmp	r1, #0
 8013eb6:	f000 8084 	beq.w	8013fc2 <_strtod_l+0x8fa>
 8013eba:	ea02 0109 	and.w	r1, r2, r9
 8013ebe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013ec2:	dc7e      	bgt.n	8013fc2 <_strtod_l+0x8fa>
 8013ec4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ec8:	f77f aeb3 	ble.w	8013c32 <_strtod_l+0x56a>
 8013ecc:	4b4e      	ldr	r3, [pc, #312]	; (8014008 <_strtod_l+0x940>)
 8013ece:	4640      	mov	r0, r8
 8013ed0:	4649      	mov	r1, r9
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	f7ec fb90 	bl	80005f8 <__aeabi_dmul>
 8013ed8:	4b4a      	ldr	r3, [pc, #296]	; (8014004 <_strtod_l+0x93c>)
 8013eda:	400b      	ands	r3, r1
 8013edc:	4680      	mov	r8, r0
 8013ede:	4689      	mov	r9, r1
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f47f ae3f 	bne.w	8013b64 <_strtod_l+0x49c>
 8013ee6:	2322      	movs	r3, #34	; 0x22
 8013ee8:	6023      	str	r3, [r4, #0]
 8013eea:	e63b      	b.n	8013b64 <_strtod_l+0x49c>
 8013eec:	f04f 32ff 	mov.w	r2, #4294967295
 8013ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef4:	ea03 0808 	and.w	r8, r3, r8
 8013ef8:	e6e8      	b.n	8013ccc <_strtod_l+0x604>
 8013efa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013efe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013f02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013f06:	36e2      	adds	r6, #226	; 0xe2
 8013f08:	fa01 f306 	lsl.w	r3, r1, r6
 8013f0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013f10:	e748      	b.n	8013da4 <_strtod_l+0x6dc>
 8013f12:	2100      	movs	r1, #0
 8013f14:	2301      	movs	r3, #1
 8013f16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013f1a:	e743      	b.n	8013da4 <_strtod_l+0x6dc>
 8013f1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013f1e:	4632      	mov	r2, r6
 8013f20:	4620      	mov	r0, r4
 8013f22:	f7ff f961 	bl	80131e8 <__lshift>
 8013f26:	9016      	str	r0, [sp, #88]	; 0x58
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	f47f af6b 	bne.w	8013e04 <_strtod_l+0x73c>
 8013f2e:	e60f      	b.n	8013b50 <_strtod_l+0x488>
 8013f30:	46ca      	mov	sl, r9
 8013f32:	d171      	bne.n	8014018 <_strtod_l+0x950>
 8013f34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f3a:	b352      	cbz	r2, 8013f92 <_strtod_l+0x8ca>
 8013f3c:	4a33      	ldr	r2, [pc, #204]	; (801400c <_strtod_l+0x944>)
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d12a      	bne.n	8013f98 <_strtod_l+0x8d0>
 8013f42:	9b04      	ldr	r3, [sp, #16]
 8013f44:	4641      	mov	r1, r8
 8013f46:	b1fb      	cbz	r3, 8013f88 <_strtod_l+0x8c0>
 8013f48:	4b2e      	ldr	r3, [pc, #184]	; (8014004 <_strtod_l+0x93c>)
 8013f4a:	ea09 0303 	and.w	r3, r9, r3
 8013f4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013f52:	f04f 32ff 	mov.w	r2, #4294967295
 8013f56:	d81a      	bhi.n	8013f8e <_strtod_l+0x8c6>
 8013f58:	0d1b      	lsrs	r3, r3, #20
 8013f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8013f62:	4299      	cmp	r1, r3
 8013f64:	d118      	bne.n	8013f98 <_strtod_l+0x8d0>
 8013f66:	4b2a      	ldr	r3, [pc, #168]	; (8014010 <_strtod_l+0x948>)
 8013f68:	459a      	cmp	sl, r3
 8013f6a:	d102      	bne.n	8013f72 <_strtod_l+0x8aa>
 8013f6c:	3101      	adds	r1, #1
 8013f6e:	f43f adef 	beq.w	8013b50 <_strtod_l+0x488>
 8013f72:	4b24      	ldr	r3, [pc, #144]	; (8014004 <_strtod_l+0x93c>)
 8013f74:	ea0a 0303 	and.w	r3, sl, r3
 8013f78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013f7c:	f04f 0800 	mov.w	r8, #0
 8013f80:	9b04      	ldr	r3, [sp, #16]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d1a2      	bne.n	8013ecc <_strtod_l+0x804>
 8013f86:	e5ed      	b.n	8013b64 <_strtod_l+0x49c>
 8013f88:	f04f 33ff 	mov.w	r3, #4294967295
 8013f8c:	e7e9      	b.n	8013f62 <_strtod_l+0x89a>
 8013f8e:	4613      	mov	r3, r2
 8013f90:	e7e7      	b.n	8013f62 <_strtod_l+0x89a>
 8013f92:	ea53 0308 	orrs.w	r3, r3, r8
 8013f96:	d08a      	beq.n	8013eae <_strtod_l+0x7e6>
 8013f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f9a:	b1e3      	cbz	r3, 8013fd6 <_strtod_l+0x90e>
 8013f9c:	ea13 0f0a 	tst.w	r3, sl
 8013fa0:	d0ee      	beq.n	8013f80 <_strtod_l+0x8b8>
 8013fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fa4:	9a04      	ldr	r2, [sp, #16]
 8013fa6:	4640      	mov	r0, r8
 8013fa8:	4649      	mov	r1, r9
 8013faa:	b1c3      	cbz	r3, 8013fde <_strtod_l+0x916>
 8013fac:	f7ff fb6f 	bl	801368e <sulp>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	ec51 0b18 	vmov	r0, r1, d8
 8013fb8:	f7ec f968 	bl	800028c <__adddf3>
 8013fbc:	4680      	mov	r8, r0
 8013fbe:	4689      	mov	r9, r1
 8013fc0:	e7de      	b.n	8013f80 <_strtod_l+0x8b8>
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013fc8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013fcc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013fd0:	f04f 38ff 	mov.w	r8, #4294967295
 8013fd4:	e7d4      	b.n	8013f80 <_strtod_l+0x8b8>
 8013fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fd8:	ea13 0f08 	tst.w	r3, r8
 8013fdc:	e7e0      	b.n	8013fa0 <_strtod_l+0x8d8>
 8013fde:	f7ff fb56 	bl	801368e <sulp>
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	460b      	mov	r3, r1
 8013fe6:	ec51 0b18 	vmov	r0, r1, d8
 8013fea:	f7ec f94d 	bl	8000288 <__aeabi_dsub>
 8013fee:	2200      	movs	r2, #0
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	4680      	mov	r8, r0
 8013ff4:	4689      	mov	r9, r1
 8013ff6:	f7ec fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	d0c0      	beq.n	8013f80 <_strtod_l+0x8b8>
 8013ffe:	e618      	b.n	8013c32 <_strtod_l+0x56a>
 8014000:	fffffc02 	.word	0xfffffc02
 8014004:	7ff00000 	.word	0x7ff00000
 8014008:	39500000 	.word	0x39500000
 801400c:	000fffff 	.word	0x000fffff
 8014010:	7fefffff 	.word	0x7fefffff
 8014014:	08015a70 	.word	0x08015a70
 8014018:	4659      	mov	r1, fp
 801401a:	4628      	mov	r0, r5
 801401c:	f7ff fac0 	bl	80135a0 <__ratio>
 8014020:	ec57 6b10 	vmov	r6, r7, d0
 8014024:	ee10 0a10 	vmov	r0, s0
 8014028:	2200      	movs	r2, #0
 801402a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801402e:	4639      	mov	r1, r7
 8014030:	f7ec fd5e 	bl	8000af0 <__aeabi_dcmple>
 8014034:	2800      	cmp	r0, #0
 8014036:	d071      	beq.n	801411c <_strtod_l+0xa54>
 8014038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801403a:	2b00      	cmp	r3, #0
 801403c:	d17c      	bne.n	8014138 <_strtod_l+0xa70>
 801403e:	f1b8 0f00 	cmp.w	r8, #0
 8014042:	d15a      	bne.n	80140fa <_strtod_l+0xa32>
 8014044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014048:	2b00      	cmp	r3, #0
 801404a:	d15d      	bne.n	8014108 <_strtod_l+0xa40>
 801404c:	4b90      	ldr	r3, [pc, #576]	; (8014290 <_strtod_l+0xbc8>)
 801404e:	2200      	movs	r2, #0
 8014050:	4630      	mov	r0, r6
 8014052:	4639      	mov	r1, r7
 8014054:	f7ec fd42 	bl	8000adc <__aeabi_dcmplt>
 8014058:	2800      	cmp	r0, #0
 801405a:	d15c      	bne.n	8014116 <_strtod_l+0xa4e>
 801405c:	4630      	mov	r0, r6
 801405e:	4639      	mov	r1, r7
 8014060:	4b8c      	ldr	r3, [pc, #560]	; (8014294 <_strtod_l+0xbcc>)
 8014062:	2200      	movs	r2, #0
 8014064:	f7ec fac8 	bl	80005f8 <__aeabi_dmul>
 8014068:	4606      	mov	r6, r0
 801406a:	460f      	mov	r7, r1
 801406c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014070:	9606      	str	r6, [sp, #24]
 8014072:	9307      	str	r3, [sp, #28]
 8014074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014078:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801407c:	4b86      	ldr	r3, [pc, #536]	; (8014298 <_strtod_l+0xbd0>)
 801407e:	ea0a 0303 	and.w	r3, sl, r3
 8014082:	930d      	str	r3, [sp, #52]	; 0x34
 8014084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014086:	4b85      	ldr	r3, [pc, #532]	; (801429c <_strtod_l+0xbd4>)
 8014088:	429a      	cmp	r2, r3
 801408a:	f040 8090 	bne.w	80141ae <_strtod_l+0xae6>
 801408e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8014092:	ec49 8b10 	vmov	d0, r8, r9
 8014096:	f7ff f9b9 	bl	801340c <__ulp>
 801409a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801409e:	ec51 0b10 	vmov	r0, r1, d0
 80140a2:	f7ec faa9 	bl	80005f8 <__aeabi_dmul>
 80140a6:	4642      	mov	r2, r8
 80140a8:	464b      	mov	r3, r9
 80140aa:	f7ec f8ef 	bl	800028c <__adddf3>
 80140ae:	460b      	mov	r3, r1
 80140b0:	4979      	ldr	r1, [pc, #484]	; (8014298 <_strtod_l+0xbd0>)
 80140b2:	4a7b      	ldr	r2, [pc, #492]	; (80142a0 <_strtod_l+0xbd8>)
 80140b4:	4019      	ands	r1, r3
 80140b6:	4291      	cmp	r1, r2
 80140b8:	4680      	mov	r8, r0
 80140ba:	d944      	bls.n	8014146 <_strtod_l+0xa7e>
 80140bc:	ee18 2a90 	vmov	r2, s17
 80140c0:	4b78      	ldr	r3, [pc, #480]	; (80142a4 <_strtod_l+0xbdc>)
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d104      	bne.n	80140d0 <_strtod_l+0xa08>
 80140c6:	ee18 3a10 	vmov	r3, s16
 80140ca:	3301      	adds	r3, #1
 80140cc:	f43f ad40 	beq.w	8013b50 <_strtod_l+0x488>
 80140d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80142a4 <_strtod_l+0xbdc>
 80140d4:	f04f 38ff 	mov.w	r8, #4294967295
 80140d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80140da:	4620      	mov	r0, r4
 80140dc:	f7fe fe6a 	bl	8012db4 <_Bfree>
 80140e0:	9905      	ldr	r1, [sp, #20]
 80140e2:	4620      	mov	r0, r4
 80140e4:	f7fe fe66 	bl	8012db4 <_Bfree>
 80140e8:	4659      	mov	r1, fp
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7fe fe62 	bl	8012db4 <_Bfree>
 80140f0:	4629      	mov	r1, r5
 80140f2:	4620      	mov	r0, r4
 80140f4:	f7fe fe5e 	bl	8012db4 <_Bfree>
 80140f8:	e609      	b.n	8013d0e <_strtod_l+0x646>
 80140fa:	f1b8 0f01 	cmp.w	r8, #1
 80140fe:	d103      	bne.n	8014108 <_strtod_l+0xa40>
 8014100:	f1b9 0f00 	cmp.w	r9, #0
 8014104:	f43f ad95 	beq.w	8013c32 <_strtod_l+0x56a>
 8014108:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014260 <_strtod_l+0xb98>
 801410c:	4f60      	ldr	r7, [pc, #384]	; (8014290 <_strtod_l+0xbc8>)
 801410e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014112:	2600      	movs	r6, #0
 8014114:	e7ae      	b.n	8014074 <_strtod_l+0x9ac>
 8014116:	4f5f      	ldr	r7, [pc, #380]	; (8014294 <_strtod_l+0xbcc>)
 8014118:	2600      	movs	r6, #0
 801411a:	e7a7      	b.n	801406c <_strtod_l+0x9a4>
 801411c:	4b5d      	ldr	r3, [pc, #372]	; (8014294 <_strtod_l+0xbcc>)
 801411e:	4630      	mov	r0, r6
 8014120:	4639      	mov	r1, r7
 8014122:	2200      	movs	r2, #0
 8014124:	f7ec fa68 	bl	80005f8 <__aeabi_dmul>
 8014128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801412a:	4606      	mov	r6, r0
 801412c:	460f      	mov	r7, r1
 801412e:	2b00      	cmp	r3, #0
 8014130:	d09c      	beq.n	801406c <_strtod_l+0x9a4>
 8014132:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014136:	e79d      	b.n	8014074 <_strtod_l+0x9ac>
 8014138:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014268 <_strtod_l+0xba0>
 801413c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014140:	ec57 6b17 	vmov	r6, r7, d7
 8014144:	e796      	b.n	8014074 <_strtod_l+0x9ac>
 8014146:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801414a:	9b04      	ldr	r3, [sp, #16]
 801414c:	46ca      	mov	sl, r9
 801414e:	2b00      	cmp	r3, #0
 8014150:	d1c2      	bne.n	80140d8 <_strtod_l+0xa10>
 8014152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014158:	0d1b      	lsrs	r3, r3, #20
 801415a:	051b      	lsls	r3, r3, #20
 801415c:	429a      	cmp	r2, r3
 801415e:	d1bb      	bne.n	80140d8 <_strtod_l+0xa10>
 8014160:	4630      	mov	r0, r6
 8014162:	4639      	mov	r1, r7
 8014164:	f7ec fd90 	bl	8000c88 <__aeabi_d2lz>
 8014168:	f7ec fa18 	bl	800059c <__aeabi_l2d>
 801416c:	4602      	mov	r2, r0
 801416e:	460b      	mov	r3, r1
 8014170:	4630      	mov	r0, r6
 8014172:	4639      	mov	r1, r7
 8014174:	f7ec f888 	bl	8000288 <__aeabi_dsub>
 8014178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801417a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801417e:	ea43 0308 	orr.w	r3, r3, r8
 8014182:	4313      	orrs	r3, r2
 8014184:	4606      	mov	r6, r0
 8014186:	460f      	mov	r7, r1
 8014188:	d054      	beq.n	8014234 <_strtod_l+0xb6c>
 801418a:	a339      	add	r3, pc, #228	; (adr r3, 8014270 <_strtod_l+0xba8>)
 801418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014190:	f7ec fca4 	bl	8000adc <__aeabi_dcmplt>
 8014194:	2800      	cmp	r0, #0
 8014196:	f47f ace5 	bne.w	8013b64 <_strtod_l+0x49c>
 801419a:	a337      	add	r3, pc, #220	; (adr r3, 8014278 <_strtod_l+0xbb0>)
 801419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a0:	4630      	mov	r0, r6
 80141a2:	4639      	mov	r1, r7
 80141a4:	f7ec fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d095      	beq.n	80140d8 <_strtod_l+0xa10>
 80141ac:	e4da      	b.n	8013b64 <_strtod_l+0x49c>
 80141ae:	9b04      	ldr	r3, [sp, #16]
 80141b0:	b333      	cbz	r3, 8014200 <_strtod_l+0xb38>
 80141b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80141b8:	d822      	bhi.n	8014200 <_strtod_l+0xb38>
 80141ba:	a331      	add	r3, pc, #196	; (adr r3, 8014280 <_strtod_l+0xbb8>)
 80141bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c0:	4630      	mov	r0, r6
 80141c2:	4639      	mov	r1, r7
 80141c4:	f7ec fc94 	bl	8000af0 <__aeabi_dcmple>
 80141c8:	b1a0      	cbz	r0, 80141f4 <_strtod_l+0xb2c>
 80141ca:	4639      	mov	r1, r7
 80141cc:	4630      	mov	r0, r6
 80141ce:	f7ec fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80141d2:	2801      	cmp	r0, #1
 80141d4:	bf38      	it	cc
 80141d6:	2001      	movcc	r0, #1
 80141d8:	f7ec f994 	bl	8000504 <__aeabi_ui2d>
 80141dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141de:	4606      	mov	r6, r0
 80141e0:	460f      	mov	r7, r1
 80141e2:	bb23      	cbnz	r3, 801422e <_strtod_l+0xb66>
 80141e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141e8:	9010      	str	r0, [sp, #64]	; 0x40
 80141ea:	9311      	str	r3, [sp, #68]	; 0x44
 80141ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80141f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80141f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80141fc:	1a9b      	subs	r3, r3, r2
 80141fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014200:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014204:	eeb0 0a48 	vmov.f32	s0, s16
 8014208:	eef0 0a68 	vmov.f32	s1, s17
 801420c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014210:	f7ff f8fc 	bl	801340c <__ulp>
 8014214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014218:	ec53 2b10 	vmov	r2, r3, d0
 801421c:	f7ec f9ec 	bl	80005f8 <__aeabi_dmul>
 8014220:	ec53 2b18 	vmov	r2, r3, d8
 8014224:	f7ec f832 	bl	800028c <__adddf3>
 8014228:	4680      	mov	r8, r0
 801422a:	4689      	mov	r9, r1
 801422c:	e78d      	b.n	801414a <_strtod_l+0xa82>
 801422e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014232:	e7db      	b.n	80141ec <_strtod_l+0xb24>
 8014234:	a314      	add	r3, pc, #80	; (adr r3, 8014288 <_strtod_l+0xbc0>)
 8014236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423a:	f7ec fc4f 	bl	8000adc <__aeabi_dcmplt>
 801423e:	e7b3      	b.n	80141a8 <_strtod_l+0xae0>
 8014240:	2300      	movs	r3, #0
 8014242:	930a      	str	r3, [sp, #40]	; 0x28
 8014244:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014248:	6013      	str	r3, [r2, #0]
 801424a:	f7ff ba7c 	b.w	8013746 <_strtod_l+0x7e>
 801424e:	2a65      	cmp	r2, #101	; 0x65
 8014250:	f43f ab75 	beq.w	801393e <_strtod_l+0x276>
 8014254:	2a45      	cmp	r2, #69	; 0x45
 8014256:	f43f ab72 	beq.w	801393e <_strtod_l+0x276>
 801425a:	2301      	movs	r3, #1
 801425c:	f7ff bbaa 	b.w	80139b4 <_strtod_l+0x2ec>
 8014260:	00000000 	.word	0x00000000
 8014264:	bff00000 	.word	0xbff00000
 8014268:	00000000 	.word	0x00000000
 801426c:	3ff00000 	.word	0x3ff00000
 8014270:	94a03595 	.word	0x94a03595
 8014274:	3fdfffff 	.word	0x3fdfffff
 8014278:	35afe535 	.word	0x35afe535
 801427c:	3fe00000 	.word	0x3fe00000
 8014280:	ffc00000 	.word	0xffc00000
 8014284:	41dfffff 	.word	0x41dfffff
 8014288:	94a03595 	.word	0x94a03595
 801428c:	3fcfffff 	.word	0x3fcfffff
 8014290:	3ff00000 	.word	0x3ff00000
 8014294:	3fe00000 	.word	0x3fe00000
 8014298:	7ff00000 	.word	0x7ff00000
 801429c:	7fe00000 	.word	0x7fe00000
 80142a0:	7c9fffff 	.word	0x7c9fffff
 80142a4:	7fefffff 	.word	0x7fefffff

080142a8 <_strtod_r>:
 80142a8:	4b01      	ldr	r3, [pc, #4]	; (80142b0 <_strtod_r+0x8>)
 80142aa:	f7ff ba0d 	b.w	80136c8 <_strtod_l>
 80142ae:	bf00      	nop
 80142b0:	20000168 	.word	0x20000168

080142b4 <_strtol_l.constprop.0>:
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142ba:	d001      	beq.n	80142c0 <_strtol_l.constprop.0+0xc>
 80142bc:	2b24      	cmp	r3, #36	; 0x24
 80142be:	d906      	bls.n	80142ce <_strtol_l.constprop.0+0x1a>
 80142c0:	f7fd fd7e 	bl	8011dc0 <__errno>
 80142c4:	2316      	movs	r3, #22
 80142c6:	6003      	str	r3, [r0, #0]
 80142c8:	2000      	movs	r0, #0
 80142ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80143b4 <_strtol_l.constprop.0+0x100>
 80142d2:	460d      	mov	r5, r1
 80142d4:	462e      	mov	r6, r5
 80142d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80142de:	f017 0708 	ands.w	r7, r7, #8
 80142e2:	d1f7      	bne.n	80142d4 <_strtol_l.constprop.0+0x20>
 80142e4:	2c2d      	cmp	r4, #45	; 0x2d
 80142e6:	d132      	bne.n	801434e <_strtol_l.constprop.0+0x9a>
 80142e8:	782c      	ldrb	r4, [r5, #0]
 80142ea:	2701      	movs	r7, #1
 80142ec:	1cb5      	adds	r5, r6, #2
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d05b      	beq.n	80143aa <_strtol_l.constprop.0+0xf6>
 80142f2:	2b10      	cmp	r3, #16
 80142f4:	d109      	bne.n	801430a <_strtol_l.constprop.0+0x56>
 80142f6:	2c30      	cmp	r4, #48	; 0x30
 80142f8:	d107      	bne.n	801430a <_strtol_l.constprop.0+0x56>
 80142fa:	782c      	ldrb	r4, [r5, #0]
 80142fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014300:	2c58      	cmp	r4, #88	; 0x58
 8014302:	d14d      	bne.n	80143a0 <_strtol_l.constprop.0+0xec>
 8014304:	786c      	ldrb	r4, [r5, #1]
 8014306:	2310      	movs	r3, #16
 8014308:	3502      	adds	r5, #2
 801430a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801430e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014312:	f04f 0e00 	mov.w	lr, #0
 8014316:	fbb8 f9f3 	udiv	r9, r8, r3
 801431a:	4676      	mov	r6, lr
 801431c:	fb03 8a19 	mls	sl, r3, r9, r8
 8014320:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014324:	f1bc 0f09 	cmp.w	ip, #9
 8014328:	d816      	bhi.n	8014358 <_strtol_l.constprop.0+0xa4>
 801432a:	4664      	mov	r4, ip
 801432c:	42a3      	cmp	r3, r4
 801432e:	dd24      	ble.n	801437a <_strtol_l.constprop.0+0xc6>
 8014330:	f1be 3fff 	cmp.w	lr, #4294967295
 8014334:	d008      	beq.n	8014348 <_strtol_l.constprop.0+0x94>
 8014336:	45b1      	cmp	r9, r6
 8014338:	d31c      	bcc.n	8014374 <_strtol_l.constprop.0+0xc0>
 801433a:	d101      	bne.n	8014340 <_strtol_l.constprop.0+0x8c>
 801433c:	45a2      	cmp	sl, r4
 801433e:	db19      	blt.n	8014374 <_strtol_l.constprop.0+0xc0>
 8014340:	fb06 4603 	mla	r6, r6, r3, r4
 8014344:	f04f 0e01 	mov.w	lr, #1
 8014348:	f815 4b01 	ldrb.w	r4, [r5], #1
 801434c:	e7e8      	b.n	8014320 <_strtol_l.constprop.0+0x6c>
 801434e:	2c2b      	cmp	r4, #43	; 0x2b
 8014350:	bf04      	itt	eq
 8014352:	782c      	ldrbeq	r4, [r5, #0]
 8014354:	1cb5      	addeq	r5, r6, #2
 8014356:	e7ca      	b.n	80142ee <_strtol_l.constprop.0+0x3a>
 8014358:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801435c:	f1bc 0f19 	cmp.w	ip, #25
 8014360:	d801      	bhi.n	8014366 <_strtol_l.constprop.0+0xb2>
 8014362:	3c37      	subs	r4, #55	; 0x37
 8014364:	e7e2      	b.n	801432c <_strtol_l.constprop.0+0x78>
 8014366:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801436a:	f1bc 0f19 	cmp.w	ip, #25
 801436e:	d804      	bhi.n	801437a <_strtol_l.constprop.0+0xc6>
 8014370:	3c57      	subs	r4, #87	; 0x57
 8014372:	e7db      	b.n	801432c <_strtol_l.constprop.0+0x78>
 8014374:	f04f 3eff 	mov.w	lr, #4294967295
 8014378:	e7e6      	b.n	8014348 <_strtol_l.constprop.0+0x94>
 801437a:	f1be 3fff 	cmp.w	lr, #4294967295
 801437e:	d105      	bne.n	801438c <_strtol_l.constprop.0+0xd8>
 8014380:	2322      	movs	r3, #34	; 0x22
 8014382:	6003      	str	r3, [r0, #0]
 8014384:	4646      	mov	r6, r8
 8014386:	b942      	cbnz	r2, 801439a <_strtol_l.constprop.0+0xe6>
 8014388:	4630      	mov	r0, r6
 801438a:	e79e      	b.n	80142ca <_strtol_l.constprop.0+0x16>
 801438c:	b107      	cbz	r7, 8014390 <_strtol_l.constprop.0+0xdc>
 801438e:	4276      	negs	r6, r6
 8014390:	2a00      	cmp	r2, #0
 8014392:	d0f9      	beq.n	8014388 <_strtol_l.constprop.0+0xd4>
 8014394:	f1be 0f00 	cmp.w	lr, #0
 8014398:	d000      	beq.n	801439c <_strtol_l.constprop.0+0xe8>
 801439a:	1e69      	subs	r1, r5, #1
 801439c:	6011      	str	r1, [r2, #0]
 801439e:	e7f3      	b.n	8014388 <_strtol_l.constprop.0+0xd4>
 80143a0:	2430      	movs	r4, #48	; 0x30
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1b1      	bne.n	801430a <_strtol_l.constprop.0+0x56>
 80143a6:	2308      	movs	r3, #8
 80143a8:	e7af      	b.n	801430a <_strtol_l.constprop.0+0x56>
 80143aa:	2c30      	cmp	r4, #48	; 0x30
 80143ac:	d0a5      	beq.n	80142fa <_strtol_l.constprop.0+0x46>
 80143ae:	230a      	movs	r3, #10
 80143b0:	e7ab      	b.n	801430a <_strtol_l.constprop.0+0x56>
 80143b2:	bf00      	nop
 80143b4:	08015a99 	.word	0x08015a99

080143b8 <_strtol_r>:
 80143b8:	f7ff bf7c 	b.w	80142b4 <_strtol_l.constprop.0>

080143bc <__ssputs_r>:
 80143bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c0:	688e      	ldr	r6, [r1, #8]
 80143c2:	461f      	mov	r7, r3
 80143c4:	42be      	cmp	r6, r7
 80143c6:	680b      	ldr	r3, [r1, #0]
 80143c8:	4682      	mov	sl, r0
 80143ca:	460c      	mov	r4, r1
 80143cc:	4690      	mov	r8, r2
 80143ce:	d82c      	bhi.n	801442a <__ssputs_r+0x6e>
 80143d0:	898a      	ldrh	r2, [r1, #12]
 80143d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143d6:	d026      	beq.n	8014426 <__ssputs_r+0x6a>
 80143d8:	6965      	ldr	r5, [r4, #20]
 80143da:	6909      	ldr	r1, [r1, #16]
 80143dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143e0:	eba3 0901 	sub.w	r9, r3, r1
 80143e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143e8:	1c7b      	adds	r3, r7, #1
 80143ea:	444b      	add	r3, r9
 80143ec:	106d      	asrs	r5, r5, #1
 80143ee:	429d      	cmp	r5, r3
 80143f0:	bf38      	it	cc
 80143f2:	461d      	movcc	r5, r3
 80143f4:	0553      	lsls	r3, r2, #21
 80143f6:	d527      	bpl.n	8014448 <__ssputs_r+0x8c>
 80143f8:	4629      	mov	r1, r5
 80143fa:	f7fe fc0f 	bl	8012c1c <_malloc_r>
 80143fe:	4606      	mov	r6, r0
 8014400:	b360      	cbz	r0, 801445c <__ssputs_r+0xa0>
 8014402:	6921      	ldr	r1, [r4, #16]
 8014404:	464a      	mov	r2, r9
 8014406:	f7fd fd07 	bl	8011e18 <memcpy>
 801440a:	89a3      	ldrh	r3, [r4, #12]
 801440c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014414:	81a3      	strh	r3, [r4, #12]
 8014416:	6126      	str	r6, [r4, #16]
 8014418:	6165      	str	r5, [r4, #20]
 801441a:	444e      	add	r6, r9
 801441c:	eba5 0509 	sub.w	r5, r5, r9
 8014420:	6026      	str	r6, [r4, #0]
 8014422:	60a5      	str	r5, [r4, #8]
 8014424:	463e      	mov	r6, r7
 8014426:	42be      	cmp	r6, r7
 8014428:	d900      	bls.n	801442c <__ssputs_r+0x70>
 801442a:	463e      	mov	r6, r7
 801442c:	6820      	ldr	r0, [r4, #0]
 801442e:	4632      	mov	r2, r6
 8014430:	4641      	mov	r1, r8
 8014432:	f000 f9c9 	bl	80147c8 <memmove>
 8014436:	68a3      	ldr	r3, [r4, #8]
 8014438:	1b9b      	subs	r3, r3, r6
 801443a:	60a3      	str	r3, [r4, #8]
 801443c:	6823      	ldr	r3, [r4, #0]
 801443e:	4433      	add	r3, r6
 8014440:	6023      	str	r3, [r4, #0]
 8014442:	2000      	movs	r0, #0
 8014444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014448:	462a      	mov	r2, r5
 801444a:	f000 fd9e 	bl	8014f8a <_realloc_r>
 801444e:	4606      	mov	r6, r0
 8014450:	2800      	cmp	r0, #0
 8014452:	d1e0      	bne.n	8014416 <__ssputs_r+0x5a>
 8014454:	6921      	ldr	r1, [r4, #16]
 8014456:	4650      	mov	r0, sl
 8014458:	f7fe fb6c 	bl	8012b34 <_free_r>
 801445c:	230c      	movs	r3, #12
 801445e:	f8ca 3000 	str.w	r3, [sl]
 8014462:	89a3      	ldrh	r3, [r4, #12]
 8014464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014468:	81a3      	strh	r3, [r4, #12]
 801446a:	f04f 30ff 	mov.w	r0, #4294967295
 801446e:	e7e9      	b.n	8014444 <__ssputs_r+0x88>

08014470 <_svfiprintf_r>:
 8014470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014474:	4698      	mov	r8, r3
 8014476:	898b      	ldrh	r3, [r1, #12]
 8014478:	061b      	lsls	r3, r3, #24
 801447a:	b09d      	sub	sp, #116	; 0x74
 801447c:	4607      	mov	r7, r0
 801447e:	460d      	mov	r5, r1
 8014480:	4614      	mov	r4, r2
 8014482:	d50e      	bpl.n	80144a2 <_svfiprintf_r+0x32>
 8014484:	690b      	ldr	r3, [r1, #16]
 8014486:	b963      	cbnz	r3, 80144a2 <_svfiprintf_r+0x32>
 8014488:	2140      	movs	r1, #64	; 0x40
 801448a:	f7fe fbc7 	bl	8012c1c <_malloc_r>
 801448e:	6028      	str	r0, [r5, #0]
 8014490:	6128      	str	r0, [r5, #16]
 8014492:	b920      	cbnz	r0, 801449e <_svfiprintf_r+0x2e>
 8014494:	230c      	movs	r3, #12
 8014496:	603b      	str	r3, [r7, #0]
 8014498:	f04f 30ff 	mov.w	r0, #4294967295
 801449c:	e0d0      	b.n	8014640 <_svfiprintf_r+0x1d0>
 801449e:	2340      	movs	r3, #64	; 0x40
 80144a0:	616b      	str	r3, [r5, #20]
 80144a2:	2300      	movs	r3, #0
 80144a4:	9309      	str	r3, [sp, #36]	; 0x24
 80144a6:	2320      	movs	r3, #32
 80144a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80144b0:	2330      	movs	r3, #48	; 0x30
 80144b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014658 <_svfiprintf_r+0x1e8>
 80144b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144ba:	f04f 0901 	mov.w	r9, #1
 80144be:	4623      	mov	r3, r4
 80144c0:	469a      	mov	sl, r3
 80144c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144c6:	b10a      	cbz	r2, 80144cc <_svfiprintf_r+0x5c>
 80144c8:	2a25      	cmp	r2, #37	; 0x25
 80144ca:	d1f9      	bne.n	80144c0 <_svfiprintf_r+0x50>
 80144cc:	ebba 0b04 	subs.w	fp, sl, r4
 80144d0:	d00b      	beq.n	80144ea <_svfiprintf_r+0x7a>
 80144d2:	465b      	mov	r3, fp
 80144d4:	4622      	mov	r2, r4
 80144d6:	4629      	mov	r1, r5
 80144d8:	4638      	mov	r0, r7
 80144da:	f7ff ff6f 	bl	80143bc <__ssputs_r>
 80144de:	3001      	adds	r0, #1
 80144e0:	f000 80a9 	beq.w	8014636 <_svfiprintf_r+0x1c6>
 80144e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144e6:	445a      	add	r2, fp
 80144e8:	9209      	str	r2, [sp, #36]	; 0x24
 80144ea:	f89a 3000 	ldrb.w	r3, [sl]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f000 80a1 	beq.w	8014636 <_svfiprintf_r+0x1c6>
 80144f4:	2300      	movs	r3, #0
 80144f6:	f04f 32ff 	mov.w	r2, #4294967295
 80144fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144fe:	f10a 0a01 	add.w	sl, sl, #1
 8014502:	9304      	str	r3, [sp, #16]
 8014504:	9307      	str	r3, [sp, #28]
 8014506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801450a:	931a      	str	r3, [sp, #104]	; 0x68
 801450c:	4654      	mov	r4, sl
 801450e:	2205      	movs	r2, #5
 8014510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014514:	4850      	ldr	r0, [pc, #320]	; (8014658 <_svfiprintf_r+0x1e8>)
 8014516:	f7eb fe5b 	bl	80001d0 <memchr>
 801451a:	9a04      	ldr	r2, [sp, #16]
 801451c:	b9d8      	cbnz	r0, 8014556 <_svfiprintf_r+0xe6>
 801451e:	06d0      	lsls	r0, r2, #27
 8014520:	bf44      	itt	mi
 8014522:	2320      	movmi	r3, #32
 8014524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014528:	0711      	lsls	r1, r2, #28
 801452a:	bf44      	itt	mi
 801452c:	232b      	movmi	r3, #43	; 0x2b
 801452e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014532:	f89a 3000 	ldrb.w	r3, [sl]
 8014536:	2b2a      	cmp	r3, #42	; 0x2a
 8014538:	d015      	beq.n	8014566 <_svfiprintf_r+0xf6>
 801453a:	9a07      	ldr	r2, [sp, #28]
 801453c:	4654      	mov	r4, sl
 801453e:	2000      	movs	r0, #0
 8014540:	f04f 0c0a 	mov.w	ip, #10
 8014544:	4621      	mov	r1, r4
 8014546:	f811 3b01 	ldrb.w	r3, [r1], #1
 801454a:	3b30      	subs	r3, #48	; 0x30
 801454c:	2b09      	cmp	r3, #9
 801454e:	d94d      	bls.n	80145ec <_svfiprintf_r+0x17c>
 8014550:	b1b0      	cbz	r0, 8014580 <_svfiprintf_r+0x110>
 8014552:	9207      	str	r2, [sp, #28]
 8014554:	e014      	b.n	8014580 <_svfiprintf_r+0x110>
 8014556:	eba0 0308 	sub.w	r3, r0, r8
 801455a:	fa09 f303 	lsl.w	r3, r9, r3
 801455e:	4313      	orrs	r3, r2
 8014560:	9304      	str	r3, [sp, #16]
 8014562:	46a2      	mov	sl, r4
 8014564:	e7d2      	b.n	801450c <_svfiprintf_r+0x9c>
 8014566:	9b03      	ldr	r3, [sp, #12]
 8014568:	1d19      	adds	r1, r3, #4
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	9103      	str	r1, [sp, #12]
 801456e:	2b00      	cmp	r3, #0
 8014570:	bfbb      	ittet	lt
 8014572:	425b      	neglt	r3, r3
 8014574:	f042 0202 	orrlt.w	r2, r2, #2
 8014578:	9307      	strge	r3, [sp, #28]
 801457a:	9307      	strlt	r3, [sp, #28]
 801457c:	bfb8      	it	lt
 801457e:	9204      	strlt	r2, [sp, #16]
 8014580:	7823      	ldrb	r3, [r4, #0]
 8014582:	2b2e      	cmp	r3, #46	; 0x2e
 8014584:	d10c      	bne.n	80145a0 <_svfiprintf_r+0x130>
 8014586:	7863      	ldrb	r3, [r4, #1]
 8014588:	2b2a      	cmp	r3, #42	; 0x2a
 801458a:	d134      	bne.n	80145f6 <_svfiprintf_r+0x186>
 801458c:	9b03      	ldr	r3, [sp, #12]
 801458e:	1d1a      	adds	r2, r3, #4
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	9203      	str	r2, [sp, #12]
 8014594:	2b00      	cmp	r3, #0
 8014596:	bfb8      	it	lt
 8014598:	f04f 33ff 	movlt.w	r3, #4294967295
 801459c:	3402      	adds	r4, #2
 801459e:	9305      	str	r3, [sp, #20]
 80145a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014668 <_svfiprintf_r+0x1f8>
 80145a4:	7821      	ldrb	r1, [r4, #0]
 80145a6:	2203      	movs	r2, #3
 80145a8:	4650      	mov	r0, sl
 80145aa:	f7eb fe11 	bl	80001d0 <memchr>
 80145ae:	b138      	cbz	r0, 80145c0 <_svfiprintf_r+0x150>
 80145b0:	9b04      	ldr	r3, [sp, #16]
 80145b2:	eba0 000a 	sub.w	r0, r0, sl
 80145b6:	2240      	movs	r2, #64	; 0x40
 80145b8:	4082      	lsls	r2, r0
 80145ba:	4313      	orrs	r3, r2
 80145bc:	3401      	adds	r4, #1
 80145be:	9304      	str	r3, [sp, #16]
 80145c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145c4:	4825      	ldr	r0, [pc, #148]	; (801465c <_svfiprintf_r+0x1ec>)
 80145c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145ca:	2206      	movs	r2, #6
 80145cc:	f7eb fe00 	bl	80001d0 <memchr>
 80145d0:	2800      	cmp	r0, #0
 80145d2:	d038      	beq.n	8014646 <_svfiprintf_r+0x1d6>
 80145d4:	4b22      	ldr	r3, [pc, #136]	; (8014660 <_svfiprintf_r+0x1f0>)
 80145d6:	bb1b      	cbnz	r3, 8014620 <_svfiprintf_r+0x1b0>
 80145d8:	9b03      	ldr	r3, [sp, #12]
 80145da:	3307      	adds	r3, #7
 80145dc:	f023 0307 	bic.w	r3, r3, #7
 80145e0:	3308      	adds	r3, #8
 80145e2:	9303      	str	r3, [sp, #12]
 80145e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e6:	4433      	add	r3, r6
 80145e8:	9309      	str	r3, [sp, #36]	; 0x24
 80145ea:	e768      	b.n	80144be <_svfiprintf_r+0x4e>
 80145ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80145f0:	460c      	mov	r4, r1
 80145f2:	2001      	movs	r0, #1
 80145f4:	e7a6      	b.n	8014544 <_svfiprintf_r+0xd4>
 80145f6:	2300      	movs	r3, #0
 80145f8:	3401      	adds	r4, #1
 80145fa:	9305      	str	r3, [sp, #20]
 80145fc:	4619      	mov	r1, r3
 80145fe:	f04f 0c0a 	mov.w	ip, #10
 8014602:	4620      	mov	r0, r4
 8014604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014608:	3a30      	subs	r2, #48	; 0x30
 801460a:	2a09      	cmp	r2, #9
 801460c:	d903      	bls.n	8014616 <_svfiprintf_r+0x1a6>
 801460e:	2b00      	cmp	r3, #0
 8014610:	d0c6      	beq.n	80145a0 <_svfiprintf_r+0x130>
 8014612:	9105      	str	r1, [sp, #20]
 8014614:	e7c4      	b.n	80145a0 <_svfiprintf_r+0x130>
 8014616:	fb0c 2101 	mla	r1, ip, r1, r2
 801461a:	4604      	mov	r4, r0
 801461c:	2301      	movs	r3, #1
 801461e:	e7f0      	b.n	8014602 <_svfiprintf_r+0x192>
 8014620:	ab03      	add	r3, sp, #12
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	462a      	mov	r2, r5
 8014626:	4b0f      	ldr	r3, [pc, #60]	; (8014664 <_svfiprintf_r+0x1f4>)
 8014628:	a904      	add	r1, sp, #16
 801462a:	4638      	mov	r0, r7
 801462c:	f7fc fc58 	bl	8010ee0 <_printf_float>
 8014630:	1c42      	adds	r2, r0, #1
 8014632:	4606      	mov	r6, r0
 8014634:	d1d6      	bne.n	80145e4 <_svfiprintf_r+0x174>
 8014636:	89ab      	ldrh	r3, [r5, #12]
 8014638:	065b      	lsls	r3, r3, #25
 801463a:	f53f af2d 	bmi.w	8014498 <_svfiprintf_r+0x28>
 801463e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014640:	b01d      	add	sp, #116	; 0x74
 8014642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014646:	ab03      	add	r3, sp, #12
 8014648:	9300      	str	r3, [sp, #0]
 801464a:	462a      	mov	r2, r5
 801464c:	4b05      	ldr	r3, [pc, #20]	; (8014664 <_svfiprintf_r+0x1f4>)
 801464e:	a904      	add	r1, sp, #16
 8014650:	4638      	mov	r0, r7
 8014652:	f7fc fee9 	bl	8011428 <_printf_i>
 8014656:	e7eb      	b.n	8014630 <_svfiprintf_r+0x1c0>
 8014658:	08015b99 	.word	0x08015b99
 801465c:	08015ba3 	.word	0x08015ba3
 8014660:	08010ee1 	.word	0x08010ee1
 8014664:	080143bd 	.word	0x080143bd
 8014668:	08015b9f 	.word	0x08015b9f

0801466c <__sflush_r>:
 801466c:	898a      	ldrh	r2, [r1, #12]
 801466e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014672:	4605      	mov	r5, r0
 8014674:	0710      	lsls	r0, r2, #28
 8014676:	460c      	mov	r4, r1
 8014678:	d458      	bmi.n	801472c <__sflush_r+0xc0>
 801467a:	684b      	ldr	r3, [r1, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	dc05      	bgt.n	801468c <__sflush_r+0x20>
 8014680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014682:	2b00      	cmp	r3, #0
 8014684:	dc02      	bgt.n	801468c <__sflush_r+0x20>
 8014686:	2000      	movs	r0, #0
 8014688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801468c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801468e:	2e00      	cmp	r6, #0
 8014690:	d0f9      	beq.n	8014686 <__sflush_r+0x1a>
 8014692:	2300      	movs	r3, #0
 8014694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014698:	682f      	ldr	r7, [r5, #0]
 801469a:	6a21      	ldr	r1, [r4, #32]
 801469c:	602b      	str	r3, [r5, #0]
 801469e:	d032      	beq.n	8014706 <__sflush_r+0x9a>
 80146a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80146a2:	89a3      	ldrh	r3, [r4, #12]
 80146a4:	075a      	lsls	r2, r3, #29
 80146a6:	d505      	bpl.n	80146b4 <__sflush_r+0x48>
 80146a8:	6863      	ldr	r3, [r4, #4]
 80146aa:	1ac0      	subs	r0, r0, r3
 80146ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80146ae:	b10b      	cbz	r3, 80146b4 <__sflush_r+0x48>
 80146b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146b2:	1ac0      	subs	r0, r0, r3
 80146b4:	2300      	movs	r3, #0
 80146b6:	4602      	mov	r2, r0
 80146b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146ba:	6a21      	ldr	r1, [r4, #32]
 80146bc:	4628      	mov	r0, r5
 80146be:	47b0      	blx	r6
 80146c0:	1c43      	adds	r3, r0, #1
 80146c2:	89a3      	ldrh	r3, [r4, #12]
 80146c4:	d106      	bne.n	80146d4 <__sflush_r+0x68>
 80146c6:	6829      	ldr	r1, [r5, #0]
 80146c8:	291d      	cmp	r1, #29
 80146ca:	d82b      	bhi.n	8014724 <__sflush_r+0xb8>
 80146cc:	4a29      	ldr	r2, [pc, #164]	; (8014774 <__sflush_r+0x108>)
 80146ce:	410a      	asrs	r2, r1
 80146d0:	07d6      	lsls	r6, r2, #31
 80146d2:	d427      	bmi.n	8014724 <__sflush_r+0xb8>
 80146d4:	2200      	movs	r2, #0
 80146d6:	6062      	str	r2, [r4, #4]
 80146d8:	04d9      	lsls	r1, r3, #19
 80146da:	6922      	ldr	r2, [r4, #16]
 80146dc:	6022      	str	r2, [r4, #0]
 80146de:	d504      	bpl.n	80146ea <__sflush_r+0x7e>
 80146e0:	1c42      	adds	r2, r0, #1
 80146e2:	d101      	bne.n	80146e8 <__sflush_r+0x7c>
 80146e4:	682b      	ldr	r3, [r5, #0]
 80146e6:	b903      	cbnz	r3, 80146ea <__sflush_r+0x7e>
 80146e8:	6560      	str	r0, [r4, #84]	; 0x54
 80146ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146ec:	602f      	str	r7, [r5, #0]
 80146ee:	2900      	cmp	r1, #0
 80146f0:	d0c9      	beq.n	8014686 <__sflush_r+0x1a>
 80146f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146f6:	4299      	cmp	r1, r3
 80146f8:	d002      	beq.n	8014700 <__sflush_r+0x94>
 80146fa:	4628      	mov	r0, r5
 80146fc:	f7fe fa1a 	bl	8012b34 <_free_r>
 8014700:	2000      	movs	r0, #0
 8014702:	6360      	str	r0, [r4, #52]	; 0x34
 8014704:	e7c0      	b.n	8014688 <__sflush_r+0x1c>
 8014706:	2301      	movs	r3, #1
 8014708:	4628      	mov	r0, r5
 801470a:	47b0      	blx	r6
 801470c:	1c41      	adds	r1, r0, #1
 801470e:	d1c8      	bne.n	80146a2 <__sflush_r+0x36>
 8014710:	682b      	ldr	r3, [r5, #0]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d0c5      	beq.n	80146a2 <__sflush_r+0x36>
 8014716:	2b1d      	cmp	r3, #29
 8014718:	d001      	beq.n	801471e <__sflush_r+0xb2>
 801471a:	2b16      	cmp	r3, #22
 801471c:	d101      	bne.n	8014722 <__sflush_r+0xb6>
 801471e:	602f      	str	r7, [r5, #0]
 8014720:	e7b1      	b.n	8014686 <__sflush_r+0x1a>
 8014722:	89a3      	ldrh	r3, [r4, #12]
 8014724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014728:	81a3      	strh	r3, [r4, #12]
 801472a:	e7ad      	b.n	8014688 <__sflush_r+0x1c>
 801472c:	690f      	ldr	r7, [r1, #16]
 801472e:	2f00      	cmp	r7, #0
 8014730:	d0a9      	beq.n	8014686 <__sflush_r+0x1a>
 8014732:	0793      	lsls	r3, r2, #30
 8014734:	680e      	ldr	r6, [r1, #0]
 8014736:	bf08      	it	eq
 8014738:	694b      	ldreq	r3, [r1, #20]
 801473a:	600f      	str	r7, [r1, #0]
 801473c:	bf18      	it	ne
 801473e:	2300      	movne	r3, #0
 8014740:	eba6 0807 	sub.w	r8, r6, r7
 8014744:	608b      	str	r3, [r1, #8]
 8014746:	f1b8 0f00 	cmp.w	r8, #0
 801474a:	dd9c      	ble.n	8014686 <__sflush_r+0x1a>
 801474c:	6a21      	ldr	r1, [r4, #32]
 801474e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014750:	4643      	mov	r3, r8
 8014752:	463a      	mov	r2, r7
 8014754:	4628      	mov	r0, r5
 8014756:	47b0      	blx	r6
 8014758:	2800      	cmp	r0, #0
 801475a:	dc06      	bgt.n	801476a <__sflush_r+0xfe>
 801475c:	89a3      	ldrh	r3, [r4, #12]
 801475e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014762:	81a3      	strh	r3, [r4, #12]
 8014764:	f04f 30ff 	mov.w	r0, #4294967295
 8014768:	e78e      	b.n	8014688 <__sflush_r+0x1c>
 801476a:	4407      	add	r7, r0
 801476c:	eba8 0800 	sub.w	r8, r8, r0
 8014770:	e7e9      	b.n	8014746 <__sflush_r+0xda>
 8014772:	bf00      	nop
 8014774:	dfbffffe 	.word	0xdfbffffe

08014778 <_fflush_r>:
 8014778:	b538      	push	{r3, r4, r5, lr}
 801477a:	690b      	ldr	r3, [r1, #16]
 801477c:	4605      	mov	r5, r0
 801477e:	460c      	mov	r4, r1
 8014780:	b913      	cbnz	r3, 8014788 <_fflush_r+0x10>
 8014782:	2500      	movs	r5, #0
 8014784:	4628      	mov	r0, r5
 8014786:	bd38      	pop	{r3, r4, r5, pc}
 8014788:	b118      	cbz	r0, 8014792 <_fflush_r+0x1a>
 801478a:	6a03      	ldr	r3, [r0, #32]
 801478c:	b90b      	cbnz	r3, 8014792 <_fflush_r+0x1a>
 801478e:	f7fd f9f7 	bl	8011b80 <__sinit>
 8014792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d0f3      	beq.n	8014782 <_fflush_r+0xa>
 801479a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801479c:	07d0      	lsls	r0, r2, #31
 801479e:	d404      	bmi.n	80147aa <_fflush_r+0x32>
 80147a0:	0599      	lsls	r1, r3, #22
 80147a2:	d402      	bmi.n	80147aa <_fflush_r+0x32>
 80147a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147a6:	f7fd fb35 	bl	8011e14 <__retarget_lock_acquire_recursive>
 80147aa:	4628      	mov	r0, r5
 80147ac:	4621      	mov	r1, r4
 80147ae:	f7ff ff5d 	bl	801466c <__sflush_r>
 80147b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147b4:	07da      	lsls	r2, r3, #31
 80147b6:	4605      	mov	r5, r0
 80147b8:	d4e4      	bmi.n	8014784 <_fflush_r+0xc>
 80147ba:	89a3      	ldrh	r3, [r4, #12]
 80147bc:	059b      	lsls	r3, r3, #22
 80147be:	d4e1      	bmi.n	8014784 <_fflush_r+0xc>
 80147c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147c2:	f7fd fb28 	bl	8011e16 <__retarget_lock_release_recursive>
 80147c6:	e7dd      	b.n	8014784 <_fflush_r+0xc>

080147c8 <memmove>:
 80147c8:	4288      	cmp	r0, r1
 80147ca:	b510      	push	{r4, lr}
 80147cc:	eb01 0402 	add.w	r4, r1, r2
 80147d0:	d902      	bls.n	80147d8 <memmove+0x10>
 80147d2:	4284      	cmp	r4, r0
 80147d4:	4623      	mov	r3, r4
 80147d6:	d807      	bhi.n	80147e8 <memmove+0x20>
 80147d8:	1e43      	subs	r3, r0, #1
 80147da:	42a1      	cmp	r1, r4
 80147dc:	d008      	beq.n	80147f0 <memmove+0x28>
 80147de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147e6:	e7f8      	b.n	80147da <memmove+0x12>
 80147e8:	4402      	add	r2, r0
 80147ea:	4601      	mov	r1, r0
 80147ec:	428a      	cmp	r2, r1
 80147ee:	d100      	bne.n	80147f2 <memmove+0x2a>
 80147f0:	bd10      	pop	{r4, pc}
 80147f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147fa:	e7f7      	b.n	80147ec <memmove+0x24>

080147fc <strncmp>:
 80147fc:	b510      	push	{r4, lr}
 80147fe:	b16a      	cbz	r2, 801481c <strncmp+0x20>
 8014800:	3901      	subs	r1, #1
 8014802:	1884      	adds	r4, r0, r2
 8014804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014808:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801480c:	429a      	cmp	r2, r3
 801480e:	d103      	bne.n	8014818 <strncmp+0x1c>
 8014810:	42a0      	cmp	r0, r4
 8014812:	d001      	beq.n	8014818 <strncmp+0x1c>
 8014814:	2a00      	cmp	r2, #0
 8014816:	d1f5      	bne.n	8014804 <strncmp+0x8>
 8014818:	1ad0      	subs	r0, r2, r3
 801481a:	bd10      	pop	{r4, pc}
 801481c:	4610      	mov	r0, r2
 801481e:	e7fc      	b.n	801481a <strncmp+0x1e>

08014820 <_sbrk_r>:
 8014820:	b538      	push	{r3, r4, r5, lr}
 8014822:	4d06      	ldr	r5, [pc, #24]	; (801483c <_sbrk_r+0x1c>)
 8014824:	2300      	movs	r3, #0
 8014826:	4604      	mov	r4, r0
 8014828:	4608      	mov	r0, r1
 801482a:	602b      	str	r3, [r5, #0]
 801482c:	f7ed fcbe 	bl	80021ac <_sbrk>
 8014830:	1c43      	adds	r3, r0, #1
 8014832:	d102      	bne.n	801483a <_sbrk_r+0x1a>
 8014834:	682b      	ldr	r3, [r5, #0]
 8014836:	b103      	cbz	r3, 801483a <_sbrk_r+0x1a>
 8014838:	6023      	str	r3, [r4, #0]
 801483a:	bd38      	pop	{r3, r4, r5, pc}
 801483c:	2000c4ec 	.word	0x2000c4ec

08014840 <nan>:
 8014840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014848 <nan+0x8>
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	00000000 	.word	0x00000000
 801484c:	7ff80000 	.word	0x7ff80000

08014850 <__assert_func>:
 8014850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014852:	4614      	mov	r4, r2
 8014854:	461a      	mov	r2, r3
 8014856:	4b09      	ldr	r3, [pc, #36]	; (801487c <__assert_func+0x2c>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	4605      	mov	r5, r0
 801485c:	68d8      	ldr	r0, [r3, #12]
 801485e:	b14c      	cbz	r4, 8014874 <__assert_func+0x24>
 8014860:	4b07      	ldr	r3, [pc, #28]	; (8014880 <__assert_func+0x30>)
 8014862:	9100      	str	r1, [sp, #0]
 8014864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014868:	4906      	ldr	r1, [pc, #24]	; (8014884 <__assert_func+0x34>)
 801486a:	462b      	mov	r3, r5
 801486c:	f000 fbca 	bl	8015004 <fiprintf>
 8014870:	f000 fbda 	bl	8015028 <abort>
 8014874:	4b04      	ldr	r3, [pc, #16]	; (8014888 <__assert_func+0x38>)
 8014876:	461c      	mov	r4, r3
 8014878:	e7f3      	b.n	8014862 <__assert_func+0x12>
 801487a:	bf00      	nop
 801487c:	20000164 	.word	0x20000164
 8014880:	08015bb2 	.word	0x08015bb2
 8014884:	08015bbf 	.word	0x08015bbf
 8014888:	08015bed 	.word	0x08015bed

0801488c <_calloc_r>:
 801488c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801488e:	fba1 2402 	umull	r2, r4, r1, r2
 8014892:	b94c      	cbnz	r4, 80148a8 <_calloc_r+0x1c>
 8014894:	4611      	mov	r1, r2
 8014896:	9201      	str	r2, [sp, #4]
 8014898:	f7fe f9c0 	bl	8012c1c <_malloc_r>
 801489c:	9a01      	ldr	r2, [sp, #4]
 801489e:	4605      	mov	r5, r0
 80148a0:	b930      	cbnz	r0, 80148b0 <_calloc_r+0x24>
 80148a2:	4628      	mov	r0, r5
 80148a4:	b003      	add	sp, #12
 80148a6:	bd30      	pop	{r4, r5, pc}
 80148a8:	220c      	movs	r2, #12
 80148aa:	6002      	str	r2, [r0, #0]
 80148ac:	2500      	movs	r5, #0
 80148ae:	e7f8      	b.n	80148a2 <_calloc_r+0x16>
 80148b0:	4621      	mov	r1, r4
 80148b2:	f7fd fa32 	bl	8011d1a <memset>
 80148b6:	e7f4      	b.n	80148a2 <_calloc_r+0x16>

080148b8 <rshift>:
 80148b8:	6903      	ldr	r3, [r0, #16]
 80148ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80148be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80148c6:	f100 0414 	add.w	r4, r0, #20
 80148ca:	dd45      	ble.n	8014958 <rshift+0xa0>
 80148cc:	f011 011f 	ands.w	r1, r1, #31
 80148d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80148d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80148d8:	d10c      	bne.n	80148f4 <rshift+0x3c>
 80148da:	f100 0710 	add.w	r7, r0, #16
 80148de:	4629      	mov	r1, r5
 80148e0:	42b1      	cmp	r1, r6
 80148e2:	d334      	bcc.n	801494e <rshift+0x96>
 80148e4:	1a9b      	subs	r3, r3, r2
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	1eea      	subs	r2, r5, #3
 80148ea:	4296      	cmp	r6, r2
 80148ec:	bf38      	it	cc
 80148ee:	2300      	movcc	r3, #0
 80148f0:	4423      	add	r3, r4
 80148f2:	e015      	b.n	8014920 <rshift+0x68>
 80148f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80148f8:	f1c1 0820 	rsb	r8, r1, #32
 80148fc:	40cf      	lsrs	r7, r1
 80148fe:	f105 0e04 	add.w	lr, r5, #4
 8014902:	46a1      	mov	r9, r4
 8014904:	4576      	cmp	r6, lr
 8014906:	46f4      	mov	ip, lr
 8014908:	d815      	bhi.n	8014936 <rshift+0x7e>
 801490a:	1a9a      	subs	r2, r3, r2
 801490c:	0092      	lsls	r2, r2, #2
 801490e:	3a04      	subs	r2, #4
 8014910:	3501      	adds	r5, #1
 8014912:	42ae      	cmp	r6, r5
 8014914:	bf38      	it	cc
 8014916:	2200      	movcc	r2, #0
 8014918:	18a3      	adds	r3, r4, r2
 801491a:	50a7      	str	r7, [r4, r2]
 801491c:	b107      	cbz	r7, 8014920 <rshift+0x68>
 801491e:	3304      	adds	r3, #4
 8014920:	1b1a      	subs	r2, r3, r4
 8014922:	42a3      	cmp	r3, r4
 8014924:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014928:	bf08      	it	eq
 801492a:	2300      	moveq	r3, #0
 801492c:	6102      	str	r2, [r0, #16]
 801492e:	bf08      	it	eq
 8014930:	6143      	streq	r3, [r0, #20]
 8014932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014936:	f8dc c000 	ldr.w	ip, [ip]
 801493a:	fa0c fc08 	lsl.w	ip, ip, r8
 801493e:	ea4c 0707 	orr.w	r7, ip, r7
 8014942:	f849 7b04 	str.w	r7, [r9], #4
 8014946:	f85e 7b04 	ldr.w	r7, [lr], #4
 801494a:	40cf      	lsrs	r7, r1
 801494c:	e7da      	b.n	8014904 <rshift+0x4c>
 801494e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014952:	f847 cf04 	str.w	ip, [r7, #4]!
 8014956:	e7c3      	b.n	80148e0 <rshift+0x28>
 8014958:	4623      	mov	r3, r4
 801495a:	e7e1      	b.n	8014920 <rshift+0x68>

0801495c <__hexdig_fun>:
 801495c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014960:	2b09      	cmp	r3, #9
 8014962:	d802      	bhi.n	801496a <__hexdig_fun+0xe>
 8014964:	3820      	subs	r0, #32
 8014966:	b2c0      	uxtb	r0, r0
 8014968:	4770      	bx	lr
 801496a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801496e:	2b05      	cmp	r3, #5
 8014970:	d801      	bhi.n	8014976 <__hexdig_fun+0x1a>
 8014972:	3847      	subs	r0, #71	; 0x47
 8014974:	e7f7      	b.n	8014966 <__hexdig_fun+0xa>
 8014976:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801497a:	2b05      	cmp	r3, #5
 801497c:	d801      	bhi.n	8014982 <__hexdig_fun+0x26>
 801497e:	3827      	subs	r0, #39	; 0x27
 8014980:	e7f1      	b.n	8014966 <__hexdig_fun+0xa>
 8014982:	2000      	movs	r0, #0
 8014984:	4770      	bx	lr
	...

08014988 <__gethex>:
 8014988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801498c:	4617      	mov	r7, r2
 801498e:	680a      	ldr	r2, [r1, #0]
 8014990:	b085      	sub	sp, #20
 8014992:	f102 0b02 	add.w	fp, r2, #2
 8014996:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801499a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801499e:	4681      	mov	r9, r0
 80149a0:	468a      	mov	sl, r1
 80149a2:	9302      	str	r3, [sp, #8]
 80149a4:	32fe      	adds	r2, #254	; 0xfe
 80149a6:	eb02 030b 	add.w	r3, r2, fp
 80149aa:	46d8      	mov	r8, fp
 80149ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80149b0:	9301      	str	r3, [sp, #4]
 80149b2:	2830      	cmp	r0, #48	; 0x30
 80149b4:	d0f7      	beq.n	80149a6 <__gethex+0x1e>
 80149b6:	f7ff ffd1 	bl	801495c <__hexdig_fun>
 80149ba:	4604      	mov	r4, r0
 80149bc:	2800      	cmp	r0, #0
 80149be:	d138      	bne.n	8014a32 <__gethex+0xaa>
 80149c0:	49a7      	ldr	r1, [pc, #668]	; (8014c60 <__gethex+0x2d8>)
 80149c2:	2201      	movs	r2, #1
 80149c4:	4640      	mov	r0, r8
 80149c6:	f7ff ff19 	bl	80147fc <strncmp>
 80149ca:	4606      	mov	r6, r0
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d169      	bne.n	8014aa4 <__gethex+0x11c>
 80149d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80149d4:	465d      	mov	r5, fp
 80149d6:	f7ff ffc1 	bl	801495c <__hexdig_fun>
 80149da:	2800      	cmp	r0, #0
 80149dc:	d064      	beq.n	8014aa8 <__gethex+0x120>
 80149de:	465a      	mov	r2, fp
 80149e0:	7810      	ldrb	r0, [r2, #0]
 80149e2:	2830      	cmp	r0, #48	; 0x30
 80149e4:	4690      	mov	r8, r2
 80149e6:	f102 0201 	add.w	r2, r2, #1
 80149ea:	d0f9      	beq.n	80149e0 <__gethex+0x58>
 80149ec:	f7ff ffb6 	bl	801495c <__hexdig_fun>
 80149f0:	2301      	movs	r3, #1
 80149f2:	fab0 f480 	clz	r4, r0
 80149f6:	0964      	lsrs	r4, r4, #5
 80149f8:	465e      	mov	r6, fp
 80149fa:	9301      	str	r3, [sp, #4]
 80149fc:	4642      	mov	r2, r8
 80149fe:	4615      	mov	r5, r2
 8014a00:	3201      	adds	r2, #1
 8014a02:	7828      	ldrb	r0, [r5, #0]
 8014a04:	f7ff ffaa 	bl	801495c <__hexdig_fun>
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d1f8      	bne.n	80149fe <__gethex+0x76>
 8014a0c:	4994      	ldr	r1, [pc, #592]	; (8014c60 <__gethex+0x2d8>)
 8014a0e:	2201      	movs	r2, #1
 8014a10:	4628      	mov	r0, r5
 8014a12:	f7ff fef3 	bl	80147fc <strncmp>
 8014a16:	b978      	cbnz	r0, 8014a38 <__gethex+0xb0>
 8014a18:	b946      	cbnz	r6, 8014a2c <__gethex+0xa4>
 8014a1a:	1c6e      	adds	r6, r5, #1
 8014a1c:	4632      	mov	r2, r6
 8014a1e:	4615      	mov	r5, r2
 8014a20:	3201      	adds	r2, #1
 8014a22:	7828      	ldrb	r0, [r5, #0]
 8014a24:	f7ff ff9a 	bl	801495c <__hexdig_fun>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d1f8      	bne.n	8014a1e <__gethex+0x96>
 8014a2c:	1b73      	subs	r3, r6, r5
 8014a2e:	009e      	lsls	r6, r3, #2
 8014a30:	e004      	b.n	8014a3c <__gethex+0xb4>
 8014a32:	2400      	movs	r4, #0
 8014a34:	4626      	mov	r6, r4
 8014a36:	e7e1      	b.n	80149fc <__gethex+0x74>
 8014a38:	2e00      	cmp	r6, #0
 8014a3a:	d1f7      	bne.n	8014a2c <__gethex+0xa4>
 8014a3c:	782b      	ldrb	r3, [r5, #0]
 8014a3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a42:	2b50      	cmp	r3, #80	; 0x50
 8014a44:	d13d      	bne.n	8014ac2 <__gethex+0x13a>
 8014a46:	786b      	ldrb	r3, [r5, #1]
 8014a48:	2b2b      	cmp	r3, #43	; 0x2b
 8014a4a:	d02f      	beq.n	8014aac <__gethex+0x124>
 8014a4c:	2b2d      	cmp	r3, #45	; 0x2d
 8014a4e:	d031      	beq.n	8014ab4 <__gethex+0x12c>
 8014a50:	1c69      	adds	r1, r5, #1
 8014a52:	f04f 0b00 	mov.w	fp, #0
 8014a56:	7808      	ldrb	r0, [r1, #0]
 8014a58:	f7ff ff80 	bl	801495c <__hexdig_fun>
 8014a5c:	1e42      	subs	r2, r0, #1
 8014a5e:	b2d2      	uxtb	r2, r2
 8014a60:	2a18      	cmp	r2, #24
 8014a62:	d82e      	bhi.n	8014ac2 <__gethex+0x13a>
 8014a64:	f1a0 0210 	sub.w	r2, r0, #16
 8014a68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a6c:	f7ff ff76 	bl	801495c <__hexdig_fun>
 8014a70:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a74:	fa5f fc8c 	uxtb.w	ip, ip
 8014a78:	f1bc 0f18 	cmp.w	ip, #24
 8014a7c:	d91d      	bls.n	8014aba <__gethex+0x132>
 8014a7e:	f1bb 0f00 	cmp.w	fp, #0
 8014a82:	d000      	beq.n	8014a86 <__gethex+0xfe>
 8014a84:	4252      	negs	r2, r2
 8014a86:	4416      	add	r6, r2
 8014a88:	f8ca 1000 	str.w	r1, [sl]
 8014a8c:	b1dc      	cbz	r4, 8014ac6 <__gethex+0x13e>
 8014a8e:	9b01      	ldr	r3, [sp, #4]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	bf14      	ite	ne
 8014a94:	f04f 0800 	movne.w	r8, #0
 8014a98:	f04f 0806 	moveq.w	r8, #6
 8014a9c:	4640      	mov	r0, r8
 8014a9e:	b005      	add	sp, #20
 8014aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa4:	4645      	mov	r5, r8
 8014aa6:	4626      	mov	r6, r4
 8014aa8:	2401      	movs	r4, #1
 8014aaa:	e7c7      	b.n	8014a3c <__gethex+0xb4>
 8014aac:	f04f 0b00 	mov.w	fp, #0
 8014ab0:	1ca9      	adds	r1, r5, #2
 8014ab2:	e7d0      	b.n	8014a56 <__gethex+0xce>
 8014ab4:	f04f 0b01 	mov.w	fp, #1
 8014ab8:	e7fa      	b.n	8014ab0 <__gethex+0x128>
 8014aba:	230a      	movs	r3, #10
 8014abc:	fb03 0002 	mla	r0, r3, r2, r0
 8014ac0:	e7d0      	b.n	8014a64 <__gethex+0xdc>
 8014ac2:	4629      	mov	r1, r5
 8014ac4:	e7e0      	b.n	8014a88 <__gethex+0x100>
 8014ac6:	eba5 0308 	sub.w	r3, r5, r8
 8014aca:	3b01      	subs	r3, #1
 8014acc:	4621      	mov	r1, r4
 8014ace:	2b07      	cmp	r3, #7
 8014ad0:	dc0a      	bgt.n	8014ae8 <__gethex+0x160>
 8014ad2:	4648      	mov	r0, r9
 8014ad4:	f7fe f92e 	bl	8012d34 <_Balloc>
 8014ad8:	4604      	mov	r4, r0
 8014ada:	b940      	cbnz	r0, 8014aee <__gethex+0x166>
 8014adc:	4b61      	ldr	r3, [pc, #388]	; (8014c64 <__gethex+0x2dc>)
 8014ade:	4602      	mov	r2, r0
 8014ae0:	21e4      	movs	r1, #228	; 0xe4
 8014ae2:	4861      	ldr	r0, [pc, #388]	; (8014c68 <__gethex+0x2e0>)
 8014ae4:	f7ff feb4 	bl	8014850 <__assert_func>
 8014ae8:	3101      	adds	r1, #1
 8014aea:	105b      	asrs	r3, r3, #1
 8014aec:	e7ef      	b.n	8014ace <__gethex+0x146>
 8014aee:	f100 0a14 	add.w	sl, r0, #20
 8014af2:	2300      	movs	r3, #0
 8014af4:	495a      	ldr	r1, [pc, #360]	; (8014c60 <__gethex+0x2d8>)
 8014af6:	f8cd a004 	str.w	sl, [sp, #4]
 8014afa:	469b      	mov	fp, r3
 8014afc:	45a8      	cmp	r8, r5
 8014afe:	d342      	bcc.n	8014b86 <__gethex+0x1fe>
 8014b00:	9801      	ldr	r0, [sp, #4]
 8014b02:	f840 bb04 	str.w	fp, [r0], #4
 8014b06:	eba0 000a 	sub.w	r0, r0, sl
 8014b0a:	1080      	asrs	r0, r0, #2
 8014b0c:	6120      	str	r0, [r4, #16]
 8014b0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014b12:	4658      	mov	r0, fp
 8014b14:	f7fe fa00 	bl	8012f18 <__hi0bits>
 8014b18:	683d      	ldr	r5, [r7, #0]
 8014b1a:	eba8 0000 	sub.w	r0, r8, r0
 8014b1e:	42a8      	cmp	r0, r5
 8014b20:	dd59      	ble.n	8014bd6 <__gethex+0x24e>
 8014b22:	eba0 0805 	sub.w	r8, r0, r5
 8014b26:	4641      	mov	r1, r8
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f7fe fd8f 	bl	801364c <__any_on>
 8014b2e:	4683      	mov	fp, r0
 8014b30:	b1b8      	cbz	r0, 8014b62 <__gethex+0x1da>
 8014b32:	f108 33ff 	add.w	r3, r8, #4294967295
 8014b36:	1159      	asrs	r1, r3, #5
 8014b38:	f003 021f 	and.w	r2, r3, #31
 8014b3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014b40:	f04f 0b01 	mov.w	fp, #1
 8014b44:	fa0b f202 	lsl.w	r2, fp, r2
 8014b48:	420a      	tst	r2, r1
 8014b4a:	d00a      	beq.n	8014b62 <__gethex+0x1da>
 8014b4c:	455b      	cmp	r3, fp
 8014b4e:	dd06      	ble.n	8014b5e <__gethex+0x1d6>
 8014b50:	f1a8 0102 	sub.w	r1, r8, #2
 8014b54:	4620      	mov	r0, r4
 8014b56:	f7fe fd79 	bl	801364c <__any_on>
 8014b5a:	2800      	cmp	r0, #0
 8014b5c:	d138      	bne.n	8014bd0 <__gethex+0x248>
 8014b5e:	f04f 0b02 	mov.w	fp, #2
 8014b62:	4641      	mov	r1, r8
 8014b64:	4620      	mov	r0, r4
 8014b66:	f7ff fea7 	bl	80148b8 <rshift>
 8014b6a:	4446      	add	r6, r8
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	42b3      	cmp	r3, r6
 8014b70:	da41      	bge.n	8014bf6 <__gethex+0x26e>
 8014b72:	4621      	mov	r1, r4
 8014b74:	4648      	mov	r0, r9
 8014b76:	f7fe f91d 	bl	8012db4 <_Bfree>
 8014b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	6013      	str	r3, [r2, #0]
 8014b80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014b84:	e78a      	b.n	8014a9c <__gethex+0x114>
 8014b86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014b8a:	2a2e      	cmp	r2, #46	; 0x2e
 8014b8c:	d014      	beq.n	8014bb8 <__gethex+0x230>
 8014b8e:	2b20      	cmp	r3, #32
 8014b90:	d106      	bne.n	8014ba0 <__gethex+0x218>
 8014b92:	9b01      	ldr	r3, [sp, #4]
 8014b94:	f843 bb04 	str.w	fp, [r3], #4
 8014b98:	f04f 0b00 	mov.w	fp, #0
 8014b9c:	9301      	str	r3, [sp, #4]
 8014b9e:	465b      	mov	r3, fp
 8014ba0:	7828      	ldrb	r0, [r5, #0]
 8014ba2:	9303      	str	r3, [sp, #12]
 8014ba4:	f7ff feda 	bl	801495c <__hexdig_fun>
 8014ba8:	9b03      	ldr	r3, [sp, #12]
 8014baa:	f000 000f 	and.w	r0, r0, #15
 8014bae:	4098      	lsls	r0, r3
 8014bb0:	ea4b 0b00 	orr.w	fp, fp, r0
 8014bb4:	3304      	adds	r3, #4
 8014bb6:	e7a1      	b.n	8014afc <__gethex+0x174>
 8014bb8:	45a8      	cmp	r8, r5
 8014bba:	d8e8      	bhi.n	8014b8e <__gethex+0x206>
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	4628      	mov	r0, r5
 8014bc0:	9303      	str	r3, [sp, #12]
 8014bc2:	f7ff fe1b 	bl	80147fc <strncmp>
 8014bc6:	4926      	ldr	r1, [pc, #152]	; (8014c60 <__gethex+0x2d8>)
 8014bc8:	9b03      	ldr	r3, [sp, #12]
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d1df      	bne.n	8014b8e <__gethex+0x206>
 8014bce:	e795      	b.n	8014afc <__gethex+0x174>
 8014bd0:	f04f 0b03 	mov.w	fp, #3
 8014bd4:	e7c5      	b.n	8014b62 <__gethex+0x1da>
 8014bd6:	da0b      	bge.n	8014bf0 <__gethex+0x268>
 8014bd8:	eba5 0800 	sub.w	r8, r5, r0
 8014bdc:	4621      	mov	r1, r4
 8014bde:	4642      	mov	r2, r8
 8014be0:	4648      	mov	r0, r9
 8014be2:	f7fe fb01 	bl	80131e8 <__lshift>
 8014be6:	eba6 0608 	sub.w	r6, r6, r8
 8014bea:	4604      	mov	r4, r0
 8014bec:	f100 0a14 	add.w	sl, r0, #20
 8014bf0:	f04f 0b00 	mov.w	fp, #0
 8014bf4:	e7ba      	b.n	8014b6c <__gethex+0x1e4>
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	42b3      	cmp	r3, r6
 8014bfa:	dd73      	ble.n	8014ce4 <__gethex+0x35c>
 8014bfc:	1b9e      	subs	r6, r3, r6
 8014bfe:	42b5      	cmp	r5, r6
 8014c00:	dc34      	bgt.n	8014c6c <__gethex+0x2e4>
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2b02      	cmp	r3, #2
 8014c06:	d023      	beq.n	8014c50 <__gethex+0x2c8>
 8014c08:	2b03      	cmp	r3, #3
 8014c0a:	d025      	beq.n	8014c58 <__gethex+0x2d0>
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d115      	bne.n	8014c3c <__gethex+0x2b4>
 8014c10:	42b5      	cmp	r5, r6
 8014c12:	d113      	bne.n	8014c3c <__gethex+0x2b4>
 8014c14:	2d01      	cmp	r5, #1
 8014c16:	d10b      	bne.n	8014c30 <__gethex+0x2a8>
 8014c18:	9a02      	ldr	r2, [sp, #8]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6013      	str	r3, [r2, #0]
 8014c1e:	2301      	movs	r3, #1
 8014c20:	6123      	str	r3, [r4, #16]
 8014c22:	f8ca 3000 	str.w	r3, [sl]
 8014c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c28:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014c2c:	601c      	str	r4, [r3, #0]
 8014c2e:	e735      	b.n	8014a9c <__gethex+0x114>
 8014c30:	1e69      	subs	r1, r5, #1
 8014c32:	4620      	mov	r0, r4
 8014c34:	f7fe fd0a 	bl	801364c <__any_on>
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d1ed      	bne.n	8014c18 <__gethex+0x290>
 8014c3c:	4621      	mov	r1, r4
 8014c3e:	4648      	mov	r0, r9
 8014c40:	f7fe f8b8 	bl	8012db4 <_Bfree>
 8014c44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c46:	2300      	movs	r3, #0
 8014c48:	6013      	str	r3, [r2, #0]
 8014c4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014c4e:	e725      	b.n	8014a9c <__gethex+0x114>
 8014c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d1f2      	bne.n	8014c3c <__gethex+0x2b4>
 8014c56:	e7df      	b.n	8014c18 <__gethex+0x290>
 8014c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d1dc      	bne.n	8014c18 <__gethex+0x290>
 8014c5e:	e7ed      	b.n	8014c3c <__gethex+0x2b4>
 8014c60:	08015a44 	.word	0x08015a44
 8014c64:	080158d7 	.word	0x080158d7
 8014c68:	08015bee 	.word	0x08015bee
 8014c6c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014c70:	f1bb 0f00 	cmp.w	fp, #0
 8014c74:	d133      	bne.n	8014cde <__gethex+0x356>
 8014c76:	f1b8 0f00 	cmp.w	r8, #0
 8014c7a:	d004      	beq.n	8014c86 <__gethex+0x2fe>
 8014c7c:	4641      	mov	r1, r8
 8014c7e:	4620      	mov	r0, r4
 8014c80:	f7fe fce4 	bl	801364c <__any_on>
 8014c84:	4683      	mov	fp, r0
 8014c86:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014c90:	f008 081f 	and.w	r8, r8, #31
 8014c94:	fa03 f308 	lsl.w	r3, r3, r8
 8014c98:	4213      	tst	r3, r2
 8014c9a:	4631      	mov	r1, r6
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	bf18      	it	ne
 8014ca0:	f04b 0b02 	orrne.w	fp, fp, #2
 8014ca4:	1bad      	subs	r5, r5, r6
 8014ca6:	f7ff fe07 	bl	80148b8 <rshift>
 8014caa:	687e      	ldr	r6, [r7, #4]
 8014cac:	f04f 0802 	mov.w	r8, #2
 8014cb0:	f1bb 0f00 	cmp.w	fp, #0
 8014cb4:	d04a      	beq.n	8014d4c <__gethex+0x3c4>
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2b02      	cmp	r3, #2
 8014cba:	d016      	beq.n	8014cea <__gethex+0x362>
 8014cbc:	2b03      	cmp	r3, #3
 8014cbe:	d018      	beq.n	8014cf2 <__gethex+0x36a>
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d109      	bne.n	8014cd8 <__gethex+0x350>
 8014cc4:	f01b 0f02 	tst.w	fp, #2
 8014cc8:	d006      	beq.n	8014cd8 <__gethex+0x350>
 8014cca:	f8da 3000 	ldr.w	r3, [sl]
 8014cce:	ea4b 0b03 	orr.w	fp, fp, r3
 8014cd2:	f01b 0f01 	tst.w	fp, #1
 8014cd6:	d10f      	bne.n	8014cf8 <__gethex+0x370>
 8014cd8:	f048 0810 	orr.w	r8, r8, #16
 8014cdc:	e036      	b.n	8014d4c <__gethex+0x3c4>
 8014cde:	f04f 0b01 	mov.w	fp, #1
 8014ce2:	e7d0      	b.n	8014c86 <__gethex+0x2fe>
 8014ce4:	f04f 0801 	mov.w	r8, #1
 8014ce8:	e7e2      	b.n	8014cb0 <__gethex+0x328>
 8014cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cec:	f1c3 0301 	rsb	r3, r3, #1
 8014cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d0ef      	beq.n	8014cd8 <__gethex+0x350>
 8014cf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014cfc:	f104 0214 	add.w	r2, r4, #20
 8014d00:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014d04:	9301      	str	r3, [sp, #4]
 8014d06:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	4694      	mov	ip, r2
 8014d0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8014d12:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014d16:	d01e      	beq.n	8014d56 <__gethex+0x3ce>
 8014d18:	3101      	adds	r1, #1
 8014d1a:	f8cc 1000 	str.w	r1, [ip]
 8014d1e:	f1b8 0f02 	cmp.w	r8, #2
 8014d22:	f104 0214 	add.w	r2, r4, #20
 8014d26:	d13d      	bne.n	8014da4 <__gethex+0x41c>
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	3b01      	subs	r3, #1
 8014d2c:	42ab      	cmp	r3, r5
 8014d2e:	d10b      	bne.n	8014d48 <__gethex+0x3c0>
 8014d30:	1169      	asrs	r1, r5, #5
 8014d32:	2301      	movs	r3, #1
 8014d34:	f005 051f 	and.w	r5, r5, #31
 8014d38:	fa03 f505 	lsl.w	r5, r3, r5
 8014d3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d40:	421d      	tst	r5, r3
 8014d42:	bf18      	it	ne
 8014d44:	f04f 0801 	movne.w	r8, #1
 8014d48:	f048 0820 	orr.w	r8, r8, #32
 8014d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d4e:	601c      	str	r4, [r3, #0]
 8014d50:	9b02      	ldr	r3, [sp, #8]
 8014d52:	601e      	str	r6, [r3, #0]
 8014d54:	e6a2      	b.n	8014a9c <__gethex+0x114>
 8014d56:	4290      	cmp	r0, r2
 8014d58:	f842 3c04 	str.w	r3, [r2, #-4]
 8014d5c:	d8d6      	bhi.n	8014d0c <__gethex+0x384>
 8014d5e:	68a2      	ldr	r2, [r4, #8]
 8014d60:	4593      	cmp	fp, r2
 8014d62:	db17      	blt.n	8014d94 <__gethex+0x40c>
 8014d64:	6861      	ldr	r1, [r4, #4]
 8014d66:	4648      	mov	r0, r9
 8014d68:	3101      	adds	r1, #1
 8014d6a:	f7fd ffe3 	bl	8012d34 <_Balloc>
 8014d6e:	4682      	mov	sl, r0
 8014d70:	b918      	cbnz	r0, 8014d7a <__gethex+0x3f2>
 8014d72:	4b1b      	ldr	r3, [pc, #108]	; (8014de0 <__gethex+0x458>)
 8014d74:	4602      	mov	r2, r0
 8014d76:	2184      	movs	r1, #132	; 0x84
 8014d78:	e6b3      	b.n	8014ae2 <__gethex+0x15a>
 8014d7a:	6922      	ldr	r2, [r4, #16]
 8014d7c:	3202      	adds	r2, #2
 8014d7e:	f104 010c 	add.w	r1, r4, #12
 8014d82:	0092      	lsls	r2, r2, #2
 8014d84:	300c      	adds	r0, #12
 8014d86:	f7fd f847 	bl	8011e18 <memcpy>
 8014d8a:	4621      	mov	r1, r4
 8014d8c:	4648      	mov	r0, r9
 8014d8e:	f7fe f811 	bl	8012db4 <_Bfree>
 8014d92:	4654      	mov	r4, sl
 8014d94:	6922      	ldr	r2, [r4, #16]
 8014d96:	1c51      	adds	r1, r2, #1
 8014d98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014d9c:	6121      	str	r1, [r4, #16]
 8014d9e:	2101      	movs	r1, #1
 8014da0:	6151      	str	r1, [r2, #20]
 8014da2:	e7bc      	b.n	8014d1e <__gethex+0x396>
 8014da4:	6921      	ldr	r1, [r4, #16]
 8014da6:	4559      	cmp	r1, fp
 8014da8:	dd0b      	ble.n	8014dc2 <__gethex+0x43a>
 8014daa:	2101      	movs	r1, #1
 8014dac:	4620      	mov	r0, r4
 8014dae:	f7ff fd83 	bl	80148b8 <rshift>
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	3601      	adds	r6, #1
 8014db6:	42b3      	cmp	r3, r6
 8014db8:	f6ff aedb 	blt.w	8014b72 <__gethex+0x1ea>
 8014dbc:	f04f 0801 	mov.w	r8, #1
 8014dc0:	e7c2      	b.n	8014d48 <__gethex+0x3c0>
 8014dc2:	f015 051f 	ands.w	r5, r5, #31
 8014dc6:	d0f9      	beq.n	8014dbc <__gethex+0x434>
 8014dc8:	9b01      	ldr	r3, [sp, #4]
 8014dca:	441a      	add	r2, r3
 8014dcc:	f1c5 0520 	rsb	r5, r5, #32
 8014dd0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014dd4:	f7fe f8a0 	bl	8012f18 <__hi0bits>
 8014dd8:	42a8      	cmp	r0, r5
 8014dda:	dbe6      	blt.n	8014daa <__gethex+0x422>
 8014ddc:	e7ee      	b.n	8014dbc <__gethex+0x434>
 8014dde:	bf00      	nop
 8014de0:	080158d7 	.word	0x080158d7

08014de4 <L_shift>:
 8014de4:	f1c2 0208 	rsb	r2, r2, #8
 8014de8:	0092      	lsls	r2, r2, #2
 8014dea:	b570      	push	{r4, r5, r6, lr}
 8014dec:	f1c2 0620 	rsb	r6, r2, #32
 8014df0:	6843      	ldr	r3, [r0, #4]
 8014df2:	6804      	ldr	r4, [r0, #0]
 8014df4:	fa03 f506 	lsl.w	r5, r3, r6
 8014df8:	432c      	orrs	r4, r5
 8014dfa:	40d3      	lsrs	r3, r2
 8014dfc:	6004      	str	r4, [r0, #0]
 8014dfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8014e02:	4288      	cmp	r0, r1
 8014e04:	d3f4      	bcc.n	8014df0 <L_shift+0xc>
 8014e06:	bd70      	pop	{r4, r5, r6, pc}

08014e08 <__match>:
 8014e08:	b530      	push	{r4, r5, lr}
 8014e0a:	6803      	ldr	r3, [r0, #0]
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e12:	b914      	cbnz	r4, 8014e1a <__match+0x12>
 8014e14:	6003      	str	r3, [r0, #0]
 8014e16:	2001      	movs	r0, #1
 8014e18:	bd30      	pop	{r4, r5, pc}
 8014e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014e22:	2d19      	cmp	r5, #25
 8014e24:	bf98      	it	ls
 8014e26:	3220      	addls	r2, #32
 8014e28:	42a2      	cmp	r2, r4
 8014e2a:	d0f0      	beq.n	8014e0e <__match+0x6>
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	e7f3      	b.n	8014e18 <__match+0x10>

08014e30 <__hexnan>:
 8014e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e34:	680b      	ldr	r3, [r1, #0]
 8014e36:	6801      	ldr	r1, [r0, #0]
 8014e38:	115e      	asrs	r6, r3, #5
 8014e3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014e3e:	f013 031f 	ands.w	r3, r3, #31
 8014e42:	b087      	sub	sp, #28
 8014e44:	bf18      	it	ne
 8014e46:	3604      	addne	r6, #4
 8014e48:	2500      	movs	r5, #0
 8014e4a:	1f37      	subs	r7, r6, #4
 8014e4c:	4682      	mov	sl, r0
 8014e4e:	4690      	mov	r8, r2
 8014e50:	9301      	str	r3, [sp, #4]
 8014e52:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e56:	46b9      	mov	r9, r7
 8014e58:	463c      	mov	r4, r7
 8014e5a:	9502      	str	r5, [sp, #8]
 8014e5c:	46ab      	mov	fp, r5
 8014e5e:	784a      	ldrb	r2, [r1, #1]
 8014e60:	1c4b      	adds	r3, r1, #1
 8014e62:	9303      	str	r3, [sp, #12]
 8014e64:	b342      	cbz	r2, 8014eb8 <__hexnan+0x88>
 8014e66:	4610      	mov	r0, r2
 8014e68:	9105      	str	r1, [sp, #20]
 8014e6a:	9204      	str	r2, [sp, #16]
 8014e6c:	f7ff fd76 	bl	801495c <__hexdig_fun>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	d14f      	bne.n	8014f14 <__hexnan+0xe4>
 8014e74:	9a04      	ldr	r2, [sp, #16]
 8014e76:	9905      	ldr	r1, [sp, #20]
 8014e78:	2a20      	cmp	r2, #32
 8014e7a:	d818      	bhi.n	8014eae <__hexnan+0x7e>
 8014e7c:	9b02      	ldr	r3, [sp, #8]
 8014e7e:	459b      	cmp	fp, r3
 8014e80:	dd13      	ble.n	8014eaa <__hexnan+0x7a>
 8014e82:	454c      	cmp	r4, r9
 8014e84:	d206      	bcs.n	8014e94 <__hexnan+0x64>
 8014e86:	2d07      	cmp	r5, #7
 8014e88:	dc04      	bgt.n	8014e94 <__hexnan+0x64>
 8014e8a:	462a      	mov	r2, r5
 8014e8c:	4649      	mov	r1, r9
 8014e8e:	4620      	mov	r0, r4
 8014e90:	f7ff ffa8 	bl	8014de4 <L_shift>
 8014e94:	4544      	cmp	r4, r8
 8014e96:	d950      	bls.n	8014f3a <__hexnan+0x10a>
 8014e98:	2300      	movs	r3, #0
 8014e9a:	f1a4 0904 	sub.w	r9, r4, #4
 8014e9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ea2:	f8cd b008 	str.w	fp, [sp, #8]
 8014ea6:	464c      	mov	r4, r9
 8014ea8:	461d      	mov	r5, r3
 8014eaa:	9903      	ldr	r1, [sp, #12]
 8014eac:	e7d7      	b.n	8014e5e <__hexnan+0x2e>
 8014eae:	2a29      	cmp	r2, #41	; 0x29
 8014eb0:	d155      	bne.n	8014f5e <__hexnan+0x12e>
 8014eb2:	3102      	adds	r1, #2
 8014eb4:	f8ca 1000 	str.w	r1, [sl]
 8014eb8:	f1bb 0f00 	cmp.w	fp, #0
 8014ebc:	d04f      	beq.n	8014f5e <__hexnan+0x12e>
 8014ebe:	454c      	cmp	r4, r9
 8014ec0:	d206      	bcs.n	8014ed0 <__hexnan+0xa0>
 8014ec2:	2d07      	cmp	r5, #7
 8014ec4:	dc04      	bgt.n	8014ed0 <__hexnan+0xa0>
 8014ec6:	462a      	mov	r2, r5
 8014ec8:	4649      	mov	r1, r9
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f7ff ff8a 	bl	8014de4 <L_shift>
 8014ed0:	4544      	cmp	r4, r8
 8014ed2:	d934      	bls.n	8014f3e <__hexnan+0x10e>
 8014ed4:	f1a8 0204 	sub.w	r2, r8, #4
 8014ed8:	4623      	mov	r3, r4
 8014eda:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ede:	f842 1f04 	str.w	r1, [r2, #4]!
 8014ee2:	429f      	cmp	r7, r3
 8014ee4:	d2f9      	bcs.n	8014eda <__hexnan+0xaa>
 8014ee6:	1b3b      	subs	r3, r7, r4
 8014ee8:	f023 0303 	bic.w	r3, r3, #3
 8014eec:	3304      	adds	r3, #4
 8014eee:	3e03      	subs	r6, #3
 8014ef0:	3401      	adds	r4, #1
 8014ef2:	42a6      	cmp	r6, r4
 8014ef4:	bf38      	it	cc
 8014ef6:	2304      	movcc	r3, #4
 8014ef8:	4443      	add	r3, r8
 8014efa:	2200      	movs	r2, #0
 8014efc:	f843 2b04 	str.w	r2, [r3], #4
 8014f00:	429f      	cmp	r7, r3
 8014f02:	d2fb      	bcs.n	8014efc <__hexnan+0xcc>
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	b91b      	cbnz	r3, 8014f10 <__hexnan+0xe0>
 8014f08:	4547      	cmp	r7, r8
 8014f0a:	d126      	bne.n	8014f5a <__hexnan+0x12a>
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	603b      	str	r3, [r7, #0]
 8014f10:	2005      	movs	r0, #5
 8014f12:	e025      	b.n	8014f60 <__hexnan+0x130>
 8014f14:	3501      	adds	r5, #1
 8014f16:	2d08      	cmp	r5, #8
 8014f18:	f10b 0b01 	add.w	fp, fp, #1
 8014f1c:	dd06      	ble.n	8014f2c <__hexnan+0xfc>
 8014f1e:	4544      	cmp	r4, r8
 8014f20:	d9c3      	bls.n	8014eaa <__hexnan+0x7a>
 8014f22:	2300      	movs	r3, #0
 8014f24:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f28:	2501      	movs	r5, #1
 8014f2a:	3c04      	subs	r4, #4
 8014f2c:	6822      	ldr	r2, [r4, #0]
 8014f2e:	f000 000f 	and.w	r0, r0, #15
 8014f32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014f36:	6020      	str	r0, [r4, #0]
 8014f38:	e7b7      	b.n	8014eaa <__hexnan+0x7a>
 8014f3a:	2508      	movs	r5, #8
 8014f3c:	e7b5      	b.n	8014eaa <__hexnan+0x7a>
 8014f3e:	9b01      	ldr	r3, [sp, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d0df      	beq.n	8014f04 <__hexnan+0xd4>
 8014f44:	f1c3 0320 	rsb	r3, r3, #32
 8014f48:	f04f 32ff 	mov.w	r2, #4294967295
 8014f4c:	40da      	lsrs	r2, r3
 8014f4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014f52:	4013      	ands	r3, r2
 8014f54:	f846 3c04 	str.w	r3, [r6, #-4]
 8014f58:	e7d4      	b.n	8014f04 <__hexnan+0xd4>
 8014f5a:	3f04      	subs	r7, #4
 8014f5c:	e7d2      	b.n	8014f04 <__hexnan+0xd4>
 8014f5e:	2004      	movs	r0, #4
 8014f60:	b007      	add	sp, #28
 8014f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f66 <__ascii_mbtowc>:
 8014f66:	b082      	sub	sp, #8
 8014f68:	b901      	cbnz	r1, 8014f6c <__ascii_mbtowc+0x6>
 8014f6a:	a901      	add	r1, sp, #4
 8014f6c:	b142      	cbz	r2, 8014f80 <__ascii_mbtowc+0x1a>
 8014f6e:	b14b      	cbz	r3, 8014f84 <__ascii_mbtowc+0x1e>
 8014f70:	7813      	ldrb	r3, [r2, #0]
 8014f72:	600b      	str	r3, [r1, #0]
 8014f74:	7812      	ldrb	r2, [r2, #0]
 8014f76:	1e10      	subs	r0, r2, #0
 8014f78:	bf18      	it	ne
 8014f7a:	2001      	movne	r0, #1
 8014f7c:	b002      	add	sp, #8
 8014f7e:	4770      	bx	lr
 8014f80:	4610      	mov	r0, r2
 8014f82:	e7fb      	b.n	8014f7c <__ascii_mbtowc+0x16>
 8014f84:	f06f 0001 	mvn.w	r0, #1
 8014f88:	e7f8      	b.n	8014f7c <__ascii_mbtowc+0x16>

08014f8a <_realloc_r>:
 8014f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f8e:	4680      	mov	r8, r0
 8014f90:	4614      	mov	r4, r2
 8014f92:	460e      	mov	r6, r1
 8014f94:	b921      	cbnz	r1, 8014fa0 <_realloc_r+0x16>
 8014f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9a:	4611      	mov	r1, r2
 8014f9c:	f7fd be3e 	b.w	8012c1c <_malloc_r>
 8014fa0:	b92a      	cbnz	r2, 8014fae <_realloc_r+0x24>
 8014fa2:	f7fd fdc7 	bl	8012b34 <_free_r>
 8014fa6:	4625      	mov	r5, r4
 8014fa8:	4628      	mov	r0, r5
 8014faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fae:	f000 f842 	bl	8015036 <_malloc_usable_size_r>
 8014fb2:	4284      	cmp	r4, r0
 8014fb4:	4607      	mov	r7, r0
 8014fb6:	d802      	bhi.n	8014fbe <_realloc_r+0x34>
 8014fb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014fbc:	d812      	bhi.n	8014fe4 <_realloc_r+0x5a>
 8014fbe:	4621      	mov	r1, r4
 8014fc0:	4640      	mov	r0, r8
 8014fc2:	f7fd fe2b 	bl	8012c1c <_malloc_r>
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	2800      	cmp	r0, #0
 8014fca:	d0ed      	beq.n	8014fa8 <_realloc_r+0x1e>
 8014fcc:	42bc      	cmp	r4, r7
 8014fce:	4622      	mov	r2, r4
 8014fd0:	4631      	mov	r1, r6
 8014fd2:	bf28      	it	cs
 8014fd4:	463a      	movcs	r2, r7
 8014fd6:	f7fc ff1f 	bl	8011e18 <memcpy>
 8014fda:	4631      	mov	r1, r6
 8014fdc:	4640      	mov	r0, r8
 8014fde:	f7fd fda9 	bl	8012b34 <_free_r>
 8014fe2:	e7e1      	b.n	8014fa8 <_realloc_r+0x1e>
 8014fe4:	4635      	mov	r5, r6
 8014fe6:	e7df      	b.n	8014fa8 <_realloc_r+0x1e>

08014fe8 <__ascii_wctomb>:
 8014fe8:	b149      	cbz	r1, 8014ffe <__ascii_wctomb+0x16>
 8014fea:	2aff      	cmp	r2, #255	; 0xff
 8014fec:	bf85      	ittet	hi
 8014fee:	238a      	movhi	r3, #138	; 0x8a
 8014ff0:	6003      	strhi	r3, [r0, #0]
 8014ff2:	700a      	strbls	r2, [r1, #0]
 8014ff4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ff8:	bf98      	it	ls
 8014ffa:	2001      	movls	r0, #1
 8014ffc:	4770      	bx	lr
 8014ffe:	4608      	mov	r0, r1
 8015000:	4770      	bx	lr
	...

08015004 <fiprintf>:
 8015004:	b40e      	push	{r1, r2, r3}
 8015006:	b503      	push	{r0, r1, lr}
 8015008:	4601      	mov	r1, r0
 801500a:	ab03      	add	r3, sp, #12
 801500c:	4805      	ldr	r0, [pc, #20]	; (8015024 <fiprintf+0x20>)
 801500e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015012:	6800      	ldr	r0, [r0, #0]
 8015014:	9301      	str	r3, [sp, #4]
 8015016:	f000 f83f 	bl	8015098 <_vfiprintf_r>
 801501a:	b002      	add	sp, #8
 801501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015020:	b003      	add	sp, #12
 8015022:	4770      	bx	lr
 8015024:	20000164 	.word	0x20000164

08015028 <abort>:
 8015028:	b508      	push	{r3, lr}
 801502a:	2006      	movs	r0, #6
 801502c:	f000 fa0c 	bl	8015448 <raise>
 8015030:	2001      	movs	r0, #1
 8015032:	f7ed f843 	bl	80020bc <_exit>

08015036 <_malloc_usable_size_r>:
 8015036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801503a:	1f18      	subs	r0, r3, #4
 801503c:	2b00      	cmp	r3, #0
 801503e:	bfbc      	itt	lt
 8015040:	580b      	ldrlt	r3, [r1, r0]
 8015042:	18c0      	addlt	r0, r0, r3
 8015044:	4770      	bx	lr

08015046 <__sfputc_r>:
 8015046:	6893      	ldr	r3, [r2, #8]
 8015048:	3b01      	subs	r3, #1
 801504a:	2b00      	cmp	r3, #0
 801504c:	b410      	push	{r4}
 801504e:	6093      	str	r3, [r2, #8]
 8015050:	da08      	bge.n	8015064 <__sfputc_r+0x1e>
 8015052:	6994      	ldr	r4, [r2, #24]
 8015054:	42a3      	cmp	r3, r4
 8015056:	db01      	blt.n	801505c <__sfputc_r+0x16>
 8015058:	290a      	cmp	r1, #10
 801505a:	d103      	bne.n	8015064 <__sfputc_r+0x1e>
 801505c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015060:	f000 b934 	b.w	80152cc <__swbuf_r>
 8015064:	6813      	ldr	r3, [r2, #0]
 8015066:	1c58      	adds	r0, r3, #1
 8015068:	6010      	str	r0, [r2, #0]
 801506a:	7019      	strb	r1, [r3, #0]
 801506c:	4608      	mov	r0, r1
 801506e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015072:	4770      	bx	lr

08015074 <__sfputs_r>:
 8015074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015076:	4606      	mov	r6, r0
 8015078:	460f      	mov	r7, r1
 801507a:	4614      	mov	r4, r2
 801507c:	18d5      	adds	r5, r2, r3
 801507e:	42ac      	cmp	r4, r5
 8015080:	d101      	bne.n	8015086 <__sfputs_r+0x12>
 8015082:	2000      	movs	r0, #0
 8015084:	e007      	b.n	8015096 <__sfputs_r+0x22>
 8015086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801508a:	463a      	mov	r2, r7
 801508c:	4630      	mov	r0, r6
 801508e:	f7ff ffda 	bl	8015046 <__sfputc_r>
 8015092:	1c43      	adds	r3, r0, #1
 8015094:	d1f3      	bne.n	801507e <__sfputs_r+0xa>
 8015096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015098 <_vfiprintf_r>:
 8015098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509c:	460d      	mov	r5, r1
 801509e:	b09d      	sub	sp, #116	; 0x74
 80150a0:	4614      	mov	r4, r2
 80150a2:	4698      	mov	r8, r3
 80150a4:	4606      	mov	r6, r0
 80150a6:	b118      	cbz	r0, 80150b0 <_vfiprintf_r+0x18>
 80150a8:	6a03      	ldr	r3, [r0, #32]
 80150aa:	b90b      	cbnz	r3, 80150b0 <_vfiprintf_r+0x18>
 80150ac:	f7fc fd68 	bl	8011b80 <__sinit>
 80150b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150b2:	07d9      	lsls	r1, r3, #31
 80150b4:	d405      	bmi.n	80150c2 <_vfiprintf_r+0x2a>
 80150b6:	89ab      	ldrh	r3, [r5, #12]
 80150b8:	059a      	lsls	r2, r3, #22
 80150ba:	d402      	bmi.n	80150c2 <_vfiprintf_r+0x2a>
 80150bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150be:	f7fc fea9 	bl	8011e14 <__retarget_lock_acquire_recursive>
 80150c2:	89ab      	ldrh	r3, [r5, #12]
 80150c4:	071b      	lsls	r3, r3, #28
 80150c6:	d501      	bpl.n	80150cc <_vfiprintf_r+0x34>
 80150c8:	692b      	ldr	r3, [r5, #16]
 80150ca:	b99b      	cbnz	r3, 80150f4 <_vfiprintf_r+0x5c>
 80150cc:	4629      	mov	r1, r5
 80150ce:	4630      	mov	r0, r6
 80150d0:	f000 f93a 	bl	8015348 <__swsetup_r>
 80150d4:	b170      	cbz	r0, 80150f4 <_vfiprintf_r+0x5c>
 80150d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150d8:	07dc      	lsls	r4, r3, #31
 80150da:	d504      	bpl.n	80150e6 <_vfiprintf_r+0x4e>
 80150dc:	f04f 30ff 	mov.w	r0, #4294967295
 80150e0:	b01d      	add	sp, #116	; 0x74
 80150e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e6:	89ab      	ldrh	r3, [r5, #12]
 80150e8:	0598      	lsls	r0, r3, #22
 80150ea:	d4f7      	bmi.n	80150dc <_vfiprintf_r+0x44>
 80150ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150ee:	f7fc fe92 	bl	8011e16 <__retarget_lock_release_recursive>
 80150f2:	e7f3      	b.n	80150dc <_vfiprintf_r+0x44>
 80150f4:	2300      	movs	r3, #0
 80150f6:	9309      	str	r3, [sp, #36]	; 0x24
 80150f8:	2320      	movs	r3, #32
 80150fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015102:	2330      	movs	r3, #48	; 0x30
 8015104:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80152b8 <_vfiprintf_r+0x220>
 8015108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801510c:	f04f 0901 	mov.w	r9, #1
 8015110:	4623      	mov	r3, r4
 8015112:	469a      	mov	sl, r3
 8015114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015118:	b10a      	cbz	r2, 801511e <_vfiprintf_r+0x86>
 801511a:	2a25      	cmp	r2, #37	; 0x25
 801511c:	d1f9      	bne.n	8015112 <_vfiprintf_r+0x7a>
 801511e:	ebba 0b04 	subs.w	fp, sl, r4
 8015122:	d00b      	beq.n	801513c <_vfiprintf_r+0xa4>
 8015124:	465b      	mov	r3, fp
 8015126:	4622      	mov	r2, r4
 8015128:	4629      	mov	r1, r5
 801512a:	4630      	mov	r0, r6
 801512c:	f7ff ffa2 	bl	8015074 <__sfputs_r>
 8015130:	3001      	adds	r0, #1
 8015132:	f000 80a9 	beq.w	8015288 <_vfiprintf_r+0x1f0>
 8015136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015138:	445a      	add	r2, fp
 801513a:	9209      	str	r2, [sp, #36]	; 0x24
 801513c:	f89a 3000 	ldrb.w	r3, [sl]
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 80a1 	beq.w	8015288 <_vfiprintf_r+0x1f0>
 8015146:	2300      	movs	r3, #0
 8015148:	f04f 32ff 	mov.w	r2, #4294967295
 801514c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015150:	f10a 0a01 	add.w	sl, sl, #1
 8015154:	9304      	str	r3, [sp, #16]
 8015156:	9307      	str	r3, [sp, #28]
 8015158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801515c:	931a      	str	r3, [sp, #104]	; 0x68
 801515e:	4654      	mov	r4, sl
 8015160:	2205      	movs	r2, #5
 8015162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015166:	4854      	ldr	r0, [pc, #336]	; (80152b8 <_vfiprintf_r+0x220>)
 8015168:	f7eb f832 	bl	80001d0 <memchr>
 801516c:	9a04      	ldr	r2, [sp, #16]
 801516e:	b9d8      	cbnz	r0, 80151a8 <_vfiprintf_r+0x110>
 8015170:	06d1      	lsls	r1, r2, #27
 8015172:	bf44      	itt	mi
 8015174:	2320      	movmi	r3, #32
 8015176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801517a:	0713      	lsls	r3, r2, #28
 801517c:	bf44      	itt	mi
 801517e:	232b      	movmi	r3, #43	; 0x2b
 8015180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015184:	f89a 3000 	ldrb.w	r3, [sl]
 8015188:	2b2a      	cmp	r3, #42	; 0x2a
 801518a:	d015      	beq.n	80151b8 <_vfiprintf_r+0x120>
 801518c:	9a07      	ldr	r2, [sp, #28]
 801518e:	4654      	mov	r4, sl
 8015190:	2000      	movs	r0, #0
 8015192:	f04f 0c0a 	mov.w	ip, #10
 8015196:	4621      	mov	r1, r4
 8015198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801519c:	3b30      	subs	r3, #48	; 0x30
 801519e:	2b09      	cmp	r3, #9
 80151a0:	d94d      	bls.n	801523e <_vfiprintf_r+0x1a6>
 80151a2:	b1b0      	cbz	r0, 80151d2 <_vfiprintf_r+0x13a>
 80151a4:	9207      	str	r2, [sp, #28]
 80151a6:	e014      	b.n	80151d2 <_vfiprintf_r+0x13a>
 80151a8:	eba0 0308 	sub.w	r3, r0, r8
 80151ac:	fa09 f303 	lsl.w	r3, r9, r3
 80151b0:	4313      	orrs	r3, r2
 80151b2:	9304      	str	r3, [sp, #16]
 80151b4:	46a2      	mov	sl, r4
 80151b6:	e7d2      	b.n	801515e <_vfiprintf_r+0xc6>
 80151b8:	9b03      	ldr	r3, [sp, #12]
 80151ba:	1d19      	adds	r1, r3, #4
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	9103      	str	r1, [sp, #12]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	bfbb      	ittet	lt
 80151c4:	425b      	neglt	r3, r3
 80151c6:	f042 0202 	orrlt.w	r2, r2, #2
 80151ca:	9307      	strge	r3, [sp, #28]
 80151cc:	9307      	strlt	r3, [sp, #28]
 80151ce:	bfb8      	it	lt
 80151d0:	9204      	strlt	r2, [sp, #16]
 80151d2:	7823      	ldrb	r3, [r4, #0]
 80151d4:	2b2e      	cmp	r3, #46	; 0x2e
 80151d6:	d10c      	bne.n	80151f2 <_vfiprintf_r+0x15a>
 80151d8:	7863      	ldrb	r3, [r4, #1]
 80151da:	2b2a      	cmp	r3, #42	; 0x2a
 80151dc:	d134      	bne.n	8015248 <_vfiprintf_r+0x1b0>
 80151de:	9b03      	ldr	r3, [sp, #12]
 80151e0:	1d1a      	adds	r2, r3, #4
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	9203      	str	r2, [sp, #12]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	bfb8      	it	lt
 80151ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80151ee:	3402      	adds	r4, #2
 80151f0:	9305      	str	r3, [sp, #20]
 80151f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80152c8 <_vfiprintf_r+0x230>
 80151f6:	7821      	ldrb	r1, [r4, #0]
 80151f8:	2203      	movs	r2, #3
 80151fa:	4650      	mov	r0, sl
 80151fc:	f7ea ffe8 	bl	80001d0 <memchr>
 8015200:	b138      	cbz	r0, 8015212 <_vfiprintf_r+0x17a>
 8015202:	9b04      	ldr	r3, [sp, #16]
 8015204:	eba0 000a 	sub.w	r0, r0, sl
 8015208:	2240      	movs	r2, #64	; 0x40
 801520a:	4082      	lsls	r2, r0
 801520c:	4313      	orrs	r3, r2
 801520e:	3401      	adds	r4, #1
 8015210:	9304      	str	r3, [sp, #16]
 8015212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015216:	4829      	ldr	r0, [pc, #164]	; (80152bc <_vfiprintf_r+0x224>)
 8015218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801521c:	2206      	movs	r2, #6
 801521e:	f7ea ffd7 	bl	80001d0 <memchr>
 8015222:	2800      	cmp	r0, #0
 8015224:	d03f      	beq.n	80152a6 <_vfiprintf_r+0x20e>
 8015226:	4b26      	ldr	r3, [pc, #152]	; (80152c0 <_vfiprintf_r+0x228>)
 8015228:	bb1b      	cbnz	r3, 8015272 <_vfiprintf_r+0x1da>
 801522a:	9b03      	ldr	r3, [sp, #12]
 801522c:	3307      	adds	r3, #7
 801522e:	f023 0307 	bic.w	r3, r3, #7
 8015232:	3308      	adds	r3, #8
 8015234:	9303      	str	r3, [sp, #12]
 8015236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015238:	443b      	add	r3, r7
 801523a:	9309      	str	r3, [sp, #36]	; 0x24
 801523c:	e768      	b.n	8015110 <_vfiprintf_r+0x78>
 801523e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015242:	460c      	mov	r4, r1
 8015244:	2001      	movs	r0, #1
 8015246:	e7a6      	b.n	8015196 <_vfiprintf_r+0xfe>
 8015248:	2300      	movs	r3, #0
 801524a:	3401      	adds	r4, #1
 801524c:	9305      	str	r3, [sp, #20]
 801524e:	4619      	mov	r1, r3
 8015250:	f04f 0c0a 	mov.w	ip, #10
 8015254:	4620      	mov	r0, r4
 8015256:	f810 2b01 	ldrb.w	r2, [r0], #1
 801525a:	3a30      	subs	r2, #48	; 0x30
 801525c:	2a09      	cmp	r2, #9
 801525e:	d903      	bls.n	8015268 <_vfiprintf_r+0x1d0>
 8015260:	2b00      	cmp	r3, #0
 8015262:	d0c6      	beq.n	80151f2 <_vfiprintf_r+0x15a>
 8015264:	9105      	str	r1, [sp, #20]
 8015266:	e7c4      	b.n	80151f2 <_vfiprintf_r+0x15a>
 8015268:	fb0c 2101 	mla	r1, ip, r1, r2
 801526c:	4604      	mov	r4, r0
 801526e:	2301      	movs	r3, #1
 8015270:	e7f0      	b.n	8015254 <_vfiprintf_r+0x1bc>
 8015272:	ab03      	add	r3, sp, #12
 8015274:	9300      	str	r3, [sp, #0]
 8015276:	462a      	mov	r2, r5
 8015278:	4b12      	ldr	r3, [pc, #72]	; (80152c4 <_vfiprintf_r+0x22c>)
 801527a:	a904      	add	r1, sp, #16
 801527c:	4630      	mov	r0, r6
 801527e:	f7fb fe2f 	bl	8010ee0 <_printf_float>
 8015282:	4607      	mov	r7, r0
 8015284:	1c78      	adds	r0, r7, #1
 8015286:	d1d6      	bne.n	8015236 <_vfiprintf_r+0x19e>
 8015288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801528a:	07d9      	lsls	r1, r3, #31
 801528c:	d405      	bmi.n	801529a <_vfiprintf_r+0x202>
 801528e:	89ab      	ldrh	r3, [r5, #12]
 8015290:	059a      	lsls	r2, r3, #22
 8015292:	d402      	bmi.n	801529a <_vfiprintf_r+0x202>
 8015294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015296:	f7fc fdbe 	bl	8011e16 <__retarget_lock_release_recursive>
 801529a:	89ab      	ldrh	r3, [r5, #12]
 801529c:	065b      	lsls	r3, r3, #25
 801529e:	f53f af1d 	bmi.w	80150dc <_vfiprintf_r+0x44>
 80152a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152a4:	e71c      	b.n	80150e0 <_vfiprintf_r+0x48>
 80152a6:	ab03      	add	r3, sp, #12
 80152a8:	9300      	str	r3, [sp, #0]
 80152aa:	462a      	mov	r2, r5
 80152ac:	4b05      	ldr	r3, [pc, #20]	; (80152c4 <_vfiprintf_r+0x22c>)
 80152ae:	a904      	add	r1, sp, #16
 80152b0:	4630      	mov	r0, r6
 80152b2:	f7fc f8b9 	bl	8011428 <_printf_i>
 80152b6:	e7e4      	b.n	8015282 <_vfiprintf_r+0x1ea>
 80152b8:	08015b99 	.word	0x08015b99
 80152bc:	08015ba3 	.word	0x08015ba3
 80152c0:	08010ee1 	.word	0x08010ee1
 80152c4:	08015075 	.word	0x08015075
 80152c8:	08015b9f 	.word	0x08015b9f

080152cc <__swbuf_r>:
 80152cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ce:	460e      	mov	r6, r1
 80152d0:	4614      	mov	r4, r2
 80152d2:	4605      	mov	r5, r0
 80152d4:	b118      	cbz	r0, 80152de <__swbuf_r+0x12>
 80152d6:	6a03      	ldr	r3, [r0, #32]
 80152d8:	b90b      	cbnz	r3, 80152de <__swbuf_r+0x12>
 80152da:	f7fc fc51 	bl	8011b80 <__sinit>
 80152de:	69a3      	ldr	r3, [r4, #24]
 80152e0:	60a3      	str	r3, [r4, #8]
 80152e2:	89a3      	ldrh	r3, [r4, #12]
 80152e4:	071a      	lsls	r2, r3, #28
 80152e6:	d525      	bpl.n	8015334 <__swbuf_r+0x68>
 80152e8:	6923      	ldr	r3, [r4, #16]
 80152ea:	b31b      	cbz	r3, 8015334 <__swbuf_r+0x68>
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	6922      	ldr	r2, [r4, #16]
 80152f0:	1a98      	subs	r0, r3, r2
 80152f2:	6963      	ldr	r3, [r4, #20]
 80152f4:	b2f6      	uxtb	r6, r6
 80152f6:	4283      	cmp	r3, r0
 80152f8:	4637      	mov	r7, r6
 80152fa:	dc04      	bgt.n	8015306 <__swbuf_r+0x3a>
 80152fc:	4621      	mov	r1, r4
 80152fe:	4628      	mov	r0, r5
 8015300:	f7ff fa3a 	bl	8014778 <_fflush_r>
 8015304:	b9e0      	cbnz	r0, 8015340 <__swbuf_r+0x74>
 8015306:	68a3      	ldr	r3, [r4, #8]
 8015308:	3b01      	subs	r3, #1
 801530a:	60a3      	str	r3, [r4, #8]
 801530c:	6823      	ldr	r3, [r4, #0]
 801530e:	1c5a      	adds	r2, r3, #1
 8015310:	6022      	str	r2, [r4, #0]
 8015312:	701e      	strb	r6, [r3, #0]
 8015314:	6962      	ldr	r2, [r4, #20]
 8015316:	1c43      	adds	r3, r0, #1
 8015318:	429a      	cmp	r2, r3
 801531a:	d004      	beq.n	8015326 <__swbuf_r+0x5a>
 801531c:	89a3      	ldrh	r3, [r4, #12]
 801531e:	07db      	lsls	r3, r3, #31
 8015320:	d506      	bpl.n	8015330 <__swbuf_r+0x64>
 8015322:	2e0a      	cmp	r6, #10
 8015324:	d104      	bne.n	8015330 <__swbuf_r+0x64>
 8015326:	4621      	mov	r1, r4
 8015328:	4628      	mov	r0, r5
 801532a:	f7ff fa25 	bl	8014778 <_fflush_r>
 801532e:	b938      	cbnz	r0, 8015340 <__swbuf_r+0x74>
 8015330:	4638      	mov	r0, r7
 8015332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015334:	4621      	mov	r1, r4
 8015336:	4628      	mov	r0, r5
 8015338:	f000 f806 	bl	8015348 <__swsetup_r>
 801533c:	2800      	cmp	r0, #0
 801533e:	d0d5      	beq.n	80152ec <__swbuf_r+0x20>
 8015340:	f04f 37ff 	mov.w	r7, #4294967295
 8015344:	e7f4      	b.n	8015330 <__swbuf_r+0x64>
	...

08015348 <__swsetup_r>:
 8015348:	b538      	push	{r3, r4, r5, lr}
 801534a:	4b2a      	ldr	r3, [pc, #168]	; (80153f4 <__swsetup_r+0xac>)
 801534c:	4605      	mov	r5, r0
 801534e:	6818      	ldr	r0, [r3, #0]
 8015350:	460c      	mov	r4, r1
 8015352:	b118      	cbz	r0, 801535c <__swsetup_r+0x14>
 8015354:	6a03      	ldr	r3, [r0, #32]
 8015356:	b90b      	cbnz	r3, 801535c <__swsetup_r+0x14>
 8015358:	f7fc fc12 	bl	8011b80 <__sinit>
 801535c:	89a3      	ldrh	r3, [r4, #12]
 801535e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015362:	0718      	lsls	r0, r3, #28
 8015364:	d422      	bmi.n	80153ac <__swsetup_r+0x64>
 8015366:	06d9      	lsls	r1, r3, #27
 8015368:	d407      	bmi.n	801537a <__swsetup_r+0x32>
 801536a:	2309      	movs	r3, #9
 801536c:	602b      	str	r3, [r5, #0]
 801536e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015372:	81a3      	strh	r3, [r4, #12]
 8015374:	f04f 30ff 	mov.w	r0, #4294967295
 8015378:	e034      	b.n	80153e4 <__swsetup_r+0x9c>
 801537a:	0758      	lsls	r0, r3, #29
 801537c:	d512      	bpl.n	80153a4 <__swsetup_r+0x5c>
 801537e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015380:	b141      	cbz	r1, 8015394 <__swsetup_r+0x4c>
 8015382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015386:	4299      	cmp	r1, r3
 8015388:	d002      	beq.n	8015390 <__swsetup_r+0x48>
 801538a:	4628      	mov	r0, r5
 801538c:	f7fd fbd2 	bl	8012b34 <_free_r>
 8015390:	2300      	movs	r3, #0
 8015392:	6363      	str	r3, [r4, #52]	; 0x34
 8015394:	89a3      	ldrh	r3, [r4, #12]
 8015396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801539a:	81a3      	strh	r3, [r4, #12]
 801539c:	2300      	movs	r3, #0
 801539e:	6063      	str	r3, [r4, #4]
 80153a0:	6923      	ldr	r3, [r4, #16]
 80153a2:	6023      	str	r3, [r4, #0]
 80153a4:	89a3      	ldrh	r3, [r4, #12]
 80153a6:	f043 0308 	orr.w	r3, r3, #8
 80153aa:	81a3      	strh	r3, [r4, #12]
 80153ac:	6923      	ldr	r3, [r4, #16]
 80153ae:	b94b      	cbnz	r3, 80153c4 <__swsetup_r+0x7c>
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80153b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153ba:	d003      	beq.n	80153c4 <__swsetup_r+0x7c>
 80153bc:	4621      	mov	r1, r4
 80153be:	4628      	mov	r0, r5
 80153c0:	f000 f884 	bl	80154cc <__smakebuf_r>
 80153c4:	89a0      	ldrh	r0, [r4, #12]
 80153c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153ca:	f010 0301 	ands.w	r3, r0, #1
 80153ce:	d00a      	beq.n	80153e6 <__swsetup_r+0x9e>
 80153d0:	2300      	movs	r3, #0
 80153d2:	60a3      	str	r3, [r4, #8]
 80153d4:	6963      	ldr	r3, [r4, #20]
 80153d6:	425b      	negs	r3, r3
 80153d8:	61a3      	str	r3, [r4, #24]
 80153da:	6923      	ldr	r3, [r4, #16]
 80153dc:	b943      	cbnz	r3, 80153f0 <__swsetup_r+0xa8>
 80153de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80153e2:	d1c4      	bne.n	801536e <__swsetup_r+0x26>
 80153e4:	bd38      	pop	{r3, r4, r5, pc}
 80153e6:	0781      	lsls	r1, r0, #30
 80153e8:	bf58      	it	pl
 80153ea:	6963      	ldrpl	r3, [r4, #20]
 80153ec:	60a3      	str	r3, [r4, #8]
 80153ee:	e7f4      	b.n	80153da <__swsetup_r+0x92>
 80153f0:	2000      	movs	r0, #0
 80153f2:	e7f7      	b.n	80153e4 <__swsetup_r+0x9c>
 80153f4:	20000164 	.word	0x20000164

080153f8 <_raise_r>:
 80153f8:	291f      	cmp	r1, #31
 80153fa:	b538      	push	{r3, r4, r5, lr}
 80153fc:	4604      	mov	r4, r0
 80153fe:	460d      	mov	r5, r1
 8015400:	d904      	bls.n	801540c <_raise_r+0x14>
 8015402:	2316      	movs	r3, #22
 8015404:	6003      	str	r3, [r0, #0]
 8015406:	f04f 30ff 	mov.w	r0, #4294967295
 801540a:	bd38      	pop	{r3, r4, r5, pc}
 801540c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801540e:	b112      	cbz	r2, 8015416 <_raise_r+0x1e>
 8015410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015414:	b94b      	cbnz	r3, 801542a <_raise_r+0x32>
 8015416:	4620      	mov	r0, r4
 8015418:	f000 f830 	bl	801547c <_getpid_r>
 801541c:	462a      	mov	r2, r5
 801541e:	4601      	mov	r1, r0
 8015420:	4620      	mov	r0, r4
 8015422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015426:	f000 b817 	b.w	8015458 <_kill_r>
 801542a:	2b01      	cmp	r3, #1
 801542c:	d00a      	beq.n	8015444 <_raise_r+0x4c>
 801542e:	1c59      	adds	r1, r3, #1
 8015430:	d103      	bne.n	801543a <_raise_r+0x42>
 8015432:	2316      	movs	r3, #22
 8015434:	6003      	str	r3, [r0, #0]
 8015436:	2001      	movs	r0, #1
 8015438:	e7e7      	b.n	801540a <_raise_r+0x12>
 801543a:	2400      	movs	r4, #0
 801543c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015440:	4628      	mov	r0, r5
 8015442:	4798      	blx	r3
 8015444:	2000      	movs	r0, #0
 8015446:	e7e0      	b.n	801540a <_raise_r+0x12>

08015448 <raise>:
 8015448:	4b02      	ldr	r3, [pc, #8]	; (8015454 <raise+0xc>)
 801544a:	4601      	mov	r1, r0
 801544c:	6818      	ldr	r0, [r3, #0]
 801544e:	f7ff bfd3 	b.w	80153f8 <_raise_r>
 8015452:	bf00      	nop
 8015454:	20000164 	.word	0x20000164

08015458 <_kill_r>:
 8015458:	b538      	push	{r3, r4, r5, lr}
 801545a:	4d07      	ldr	r5, [pc, #28]	; (8015478 <_kill_r+0x20>)
 801545c:	2300      	movs	r3, #0
 801545e:	4604      	mov	r4, r0
 8015460:	4608      	mov	r0, r1
 8015462:	4611      	mov	r1, r2
 8015464:	602b      	str	r3, [r5, #0]
 8015466:	f7ec fe19 	bl	800209c <_kill>
 801546a:	1c43      	adds	r3, r0, #1
 801546c:	d102      	bne.n	8015474 <_kill_r+0x1c>
 801546e:	682b      	ldr	r3, [r5, #0]
 8015470:	b103      	cbz	r3, 8015474 <_kill_r+0x1c>
 8015472:	6023      	str	r3, [r4, #0]
 8015474:	bd38      	pop	{r3, r4, r5, pc}
 8015476:	bf00      	nop
 8015478:	2000c4ec 	.word	0x2000c4ec

0801547c <_getpid_r>:
 801547c:	f7ec be06 	b.w	800208c <_getpid>

08015480 <__swhatbuf_r>:
 8015480:	b570      	push	{r4, r5, r6, lr}
 8015482:	460c      	mov	r4, r1
 8015484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015488:	2900      	cmp	r1, #0
 801548a:	b096      	sub	sp, #88	; 0x58
 801548c:	4615      	mov	r5, r2
 801548e:	461e      	mov	r6, r3
 8015490:	da0d      	bge.n	80154ae <__swhatbuf_r+0x2e>
 8015492:	89a3      	ldrh	r3, [r4, #12]
 8015494:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015498:	f04f 0100 	mov.w	r1, #0
 801549c:	bf0c      	ite	eq
 801549e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80154a2:	2340      	movne	r3, #64	; 0x40
 80154a4:	2000      	movs	r0, #0
 80154a6:	6031      	str	r1, [r6, #0]
 80154a8:	602b      	str	r3, [r5, #0]
 80154aa:	b016      	add	sp, #88	; 0x58
 80154ac:	bd70      	pop	{r4, r5, r6, pc}
 80154ae:	466a      	mov	r2, sp
 80154b0:	f000 f848 	bl	8015544 <_fstat_r>
 80154b4:	2800      	cmp	r0, #0
 80154b6:	dbec      	blt.n	8015492 <__swhatbuf_r+0x12>
 80154b8:	9901      	ldr	r1, [sp, #4]
 80154ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80154be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80154c2:	4259      	negs	r1, r3
 80154c4:	4159      	adcs	r1, r3
 80154c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80154ca:	e7eb      	b.n	80154a4 <__swhatbuf_r+0x24>

080154cc <__smakebuf_r>:
 80154cc:	898b      	ldrh	r3, [r1, #12]
 80154ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154d0:	079d      	lsls	r5, r3, #30
 80154d2:	4606      	mov	r6, r0
 80154d4:	460c      	mov	r4, r1
 80154d6:	d507      	bpl.n	80154e8 <__smakebuf_r+0x1c>
 80154d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80154dc:	6023      	str	r3, [r4, #0]
 80154de:	6123      	str	r3, [r4, #16]
 80154e0:	2301      	movs	r3, #1
 80154e2:	6163      	str	r3, [r4, #20]
 80154e4:	b002      	add	sp, #8
 80154e6:	bd70      	pop	{r4, r5, r6, pc}
 80154e8:	ab01      	add	r3, sp, #4
 80154ea:	466a      	mov	r2, sp
 80154ec:	f7ff ffc8 	bl	8015480 <__swhatbuf_r>
 80154f0:	9900      	ldr	r1, [sp, #0]
 80154f2:	4605      	mov	r5, r0
 80154f4:	4630      	mov	r0, r6
 80154f6:	f7fd fb91 	bl	8012c1c <_malloc_r>
 80154fa:	b948      	cbnz	r0, 8015510 <__smakebuf_r+0x44>
 80154fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015500:	059a      	lsls	r2, r3, #22
 8015502:	d4ef      	bmi.n	80154e4 <__smakebuf_r+0x18>
 8015504:	f023 0303 	bic.w	r3, r3, #3
 8015508:	f043 0302 	orr.w	r3, r3, #2
 801550c:	81a3      	strh	r3, [r4, #12]
 801550e:	e7e3      	b.n	80154d8 <__smakebuf_r+0xc>
 8015510:	89a3      	ldrh	r3, [r4, #12]
 8015512:	6020      	str	r0, [r4, #0]
 8015514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015518:	81a3      	strh	r3, [r4, #12]
 801551a:	9b00      	ldr	r3, [sp, #0]
 801551c:	6163      	str	r3, [r4, #20]
 801551e:	9b01      	ldr	r3, [sp, #4]
 8015520:	6120      	str	r0, [r4, #16]
 8015522:	b15b      	cbz	r3, 801553c <__smakebuf_r+0x70>
 8015524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015528:	4630      	mov	r0, r6
 801552a:	f000 f81d 	bl	8015568 <_isatty_r>
 801552e:	b128      	cbz	r0, 801553c <__smakebuf_r+0x70>
 8015530:	89a3      	ldrh	r3, [r4, #12]
 8015532:	f023 0303 	bic.w	r3, r3, #3
 8015536:	f043 0301 	orr.w	r3, r3, #1
 801553a:	81a3      	strh	r3, [r4, #12]
 801553c:	89a3      	ldrh	r3, [r4, #12]
 801553e:	431d      	orrs	r5, r3
 8015540:	81a5      	strh	r5, [r4, #12]
 8015542:	e7cf      	b.n	80154e4 <__smakebuf_r+0x18>

08015544 <_fstat_r>:
 8015544:	b538      	push	{r3, r4, r5, lr}
 8015546:	4d07      	ldr	r5, [pc, #28]	; (8015564 <_fstat_r+0x20>)
 8015548:	2300      	movs	r3, #0
 801554a:	4604      	mov	r4, r0
 801554c:	4608      	mov	r0, r1
 801554e:	4611      	mov	r1, r2
 8015550:	602b      	str	r3, [r5, #0]
 8015552:	f7ec fe02 	bl	800215a <_fstat>
 8015556:	1c43      	adds	r3, r0, #1
 8015558:	d102      	bne.n	8015560 <_fstat_r+0x1c>
 801555a:	682b      	ldr	r3, [r5, #0]
 801555c:	b103      	cbz	r3, 8015560 <_fstat_r+0x1c>
 801555e:	6023      	str	r3, [r4, #0]
 8015560:	bd38      	pop	{r3, r4, r5, pc}
 8015562:	bf00      	nop
 8015564:	2000c4ec 	.word	0x2000c4ec

08015568 <_isatty_r>:
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	4d06      	ldr	r5, [pc, #24]	; (8015584 <_isatty_r+0x1c>)
 801556c:	2300      	movs	r3, #0
 801556e:	4604      	mov	r4, r0
 8015570:	4608      	mov	r0, r1
 8015572:	602b      	str	r3, [r5, #0]
 8015574:	f7ec fe01 	bl	800217a <_isatty>
 8015578:	1c43      	adds	r3, r0, #1
 801557a:	d102      	bne.n	8015582 <_isatty_r+0x1a>
 801557c:	682b      	ldr	r3, [r5, #0]
 801557e:	b103      	cbz	r3, 8015582 <_isatty_r+0x1a>
 8015580:	6023      	str	r3, [r4, #0]
 8015582:	bd38      	pop	{r3, r4, r5, pc}
 8015584:	2000c4ec 	.word	0x2000c4ec

08015588 <fmaxf>:
 8015588:	b508      	push	{r3, lr}
 801558a:	ed2d 8b02 	vpush	{d8}
 801558e:	eeb0 8a40 	vmov.f32	s16, s0
 8015592:	eef0 8a60 	vmov.f32	s17, s1
 8015596:	f000 f813 	bl	80155c0 <__fpclassifyf>
 801559a:	b148      	cbz	r0, 80155b0 <fmaxf+0x28>
 801559c:	eeb0 0a68 	vmov.f32	s0, s17
 80155a0:	f000 f80e 	bl	80155c0 <__fpclassifyf>
 80155a4:	b130      	cbz	r0, 80155b4 <fmaxf+0x2c>
 80155a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80155aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ae:	dc01      	bgt.n	80155b4 <fmaxf+0x2c>
 80155b0:	eeb0 8a68 	vmov.f32	s16, s17
 80155b4:	eeb0 0a48 	vmov.f32	s0, s16
 80155b8:	ecbd 8b02 	vpop	{d8}
 80155bc:	bd08      	pop	{r3, pc}
	...

080155c0 <__fpclassifyf>:
 80155c0:	ee10 3a10 	vmov	r3, s0
 80155c4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80155c8:	d00d      	beq.n	80155e6 <__fpclassifyf+0x26>
 80155ca:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80155ce:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80155d2:	d30a      	bcc.n	80155ea <__fpclassifyf+0x2a>
 80155d4:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <__fpclassifyf+0x34>)
 80155d6:	1e42      	subs	r2, r0, #1
 80155d8:	429a      	cmp	r2, r3
 80155da:	d908      	bls.n	80155ee <__fpclassifyf+0x2e>
 80155dc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80155e0:	4258      	negs	r0, r3
 80155e2:	4158      	adcs	r0, r3
 80155e4:	4770      	bx	lr
 80155e6:	2002      	movs	r0, #2
 80155e8:	4770      	bx	lr
 80155ea:	2004      	movs	r0, #4
 80155ec:	4770      	bx	lr
 80155ee:	2003      	movs	r0, #3
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	007ffffe 	.word	0x007ffffe

080155f8 <_init>:
 80155f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155fa:	bf00      	nop
 80155fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155fe:	bc08      	pop	{r3}
 8015600:	469e      	mov	lr, r3
 8015602:	4770      	bx	lr

08015604 <_fini>:
 8015604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015606:	bf00      	nop
 8015608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801560a:	bc08      	pop	{r3}
 801560c:	469e      	mov	lr, r3
 801560e:	4770      	bx	lr
