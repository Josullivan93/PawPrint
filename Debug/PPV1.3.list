
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c07c  0800c07c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c07c  0800c07c  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c07c  0800c07c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800c084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  2000010c  0800c190  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001ebc  0800c190  00021ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b018  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a79  00000000  00000000  0003b197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001103  00000000  00000000  000412c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb93  00000000  00000000  000423c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee7d  00000000  00000000  0006df56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f115d  00000000  00000000  0008cdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ad4  00000000  00000000  0017df30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00183a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bfc0 	.word	0x0800bfc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	0800bfc0 	.word	0x0800bfc0

080001c8 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af04      	add	r7, sp, #16
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	460b      	mov	r3, r1
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 80001d6:	7afb      	ldrb	r3, [r7, #11]
 80001d8:	b29a      	uxth	r2, r3
 80001da:	f04f 33ff 	mov.w	r3, #4294967295
 80001de:	9302      	str	r3, [sp, #8]
 80001e0:	2301      	movs	r3, #1
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2301      	movs	r3, #1
 80001ea:	213d      	movs	r1, #61	; 0x3d
 80001ec:	68f8      	ldr	r0, [r7, #12]
 80001ee:	f001 fbab 	bl	8001948 <HAL_I2C_Mem_Read>
 80001f2:	4603      	mov	r3, r0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af04      	add	r7, sp, #16
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	460b      	mov	r3, r1
 8000206:	607a      	str	r2, [r7, #4]
 8000208:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800020a:	7afb      	ldrb	r3, [r7, #11]
 800020c:	b29a      	uxth	r2, r3
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	9302      	str	r3, [sp, #8]
 8000214:	2301      	movs	r3, #1
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	21d7      	movs	r1, #215	; 0xd7
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f001 fb91 	bl	8001948 <HAL_I2C_Mem_Read>
 8000226:	4603      	mov	r3, r0
}
 8000228:	4618      	mov	r0, r3
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <LSM6DSO_WriteReg>:
HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af04      	add	r7, sp, #16
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	460b      	mov	r3, r1
 800023a:	607a      	str	r2, [r7, #4]
 800023c:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800023e:	7afb      	ldrb	r3, [r7, #11]
 8000240:	b29a      	uxth	r2, r3
 8000242:	f04f 33ff 	mov.w	r3, #4294967295
 8000246:	9302      	str	r3, [sp, #8]
 8000248:	2301      	movs	r3, #1
 800024a:	9301      	str	r3, [sp, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2301      	movs	r3, #1
 8000252:	21d7      	movs	r1, #215	; 0xd7
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f001 fa63 	bl	8001720 <HAL_I2C_Mem_Write>
 800025a:	4603      	mov	r3, r0
}
 800025c:	4618      	mov	r0, r3
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fc19 	bl	8000a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f814 	bl	8000298 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000270:	f000 f861 	bl	8000336 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f916 	bl	80004a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000278:	f000 f8ee 	bl	8000458 <MX_DMA_Init>
  MX_I2C3_Init();
 800027c:	f000 f88a 	bl	8000394 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000280:	f000 f8c8 	bl	8000414 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000284:	f008 fdfe 	bl	8008e84 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000288:	f00b f864 	bl	800b354 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pawprint_init(&hi2c3);
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <main+0x30>)
 800028e:	f000 f978 	bl	8000582 <pawprint_init>
 8000292:	e7fb      	b.n	800028c <main+0x28>
 8000294:	20000128 	.word	0x20000128

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b096      	sub	sp, #88	; 0x58
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	2244      	movs	r2, #68	; 0x44
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f00b fe5e 	bl	800bf68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002be:	f003 f961 	bl	8003584 <HAL_PWREx_ControlVoltageScaling>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c8:	f000 f956 	bl	8000578 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	2303      	movs	r3, #3
 80002dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002de:	2301      	movs	r3, #1
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002e2:	2308      	movs	r3, #8
 80002e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 f9aa 	bl	8003650 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000302:	f000 f939 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031a:	463b      	mov	r3, r7
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fd72 	bl	8003e08 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800032a:	f000 f925 	bl	8000578 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3758      	adds	r7, #88	; 0x58
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b0a2      	sub	sp, #136	; 0x88
 800033a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2288      	movs	r2, #136	; 0x88
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f00b fe10 	bl	800bf68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1;
 8000348:	f44f 2302 	mov.w	r3, #532480	; 0x82000
 800034c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800034e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000352:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000358:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800035a:	2303      	movs	r3, #3
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800035e:	2301      	movs	r3, #1
 8000360:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000362:	2308      	movs	r3, #8
 8000364:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000366:	2307      	movs	r3, #7
 8000368:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800036a:	2302      	movs	r3, #2
 800036c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000372:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000376:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4618      	mov	r0, r3
 800037c:	f003 ff68 	bl	8004250 <HAL_RCCEx_PeriphCLKConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000386:	f000 f8f7 	bl	8000578 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3788      	adds	r7, #136	; 0x88
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_I2C3_Init+0x74>)
 800039a:	4a1c      	ldr	r2, [pc, #112]	; (800040c <MX_I2C3_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_I2C3_Init+0x74>)
 80003a0:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <MX_I2C3_Init+0x7c>)
 80003a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_I2C3_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_I2C3_Init+0x74>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_I2C3_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_I2C3_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_I2C3_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_I2C3_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_I2C3_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80003ce:	480e      	ldr	r0, [pc, #56]	; (8000408 <MX_I2C3_Init+0x74>)
 80003d0:	f001 f90a 	bl	80015e8 <HAL_I2C_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80003da:	f000 f8cd 	bl	8000578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003de:	2100      	movs	r1, #0
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <MX_I2C3_Init+0x74>)
 80003e2:	f001 fe83 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80003ec:	f000 f8c4 	bl	8000578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80003f0:	2100      	movs	r1, #0
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_I2C3_Init+0x74>)
 80003f4:	f001 fec5 	bl	8002182 <HAL_I2CEx_ConfigDigitalFilter>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f8bb 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000128 	.word	0x20000128
 800040c:	40005c00 	.word	0x40005c00
 8000410:	20303e5d 	.word	0x20303e5d

08000414 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <MX_SDMMC1_SD_Init+0x40>)
 800041c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 8000432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000436:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <MX_SDMMC1_SD_Init+0x3c>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	2000017c 	.word	0x2000017c
 8000454:	40012800 	.word	0x40012800

08000458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <MX_DMA_Init+0x48>)
 8000460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000462:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <MX_DMA_Init+0x48>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	6493      	str	r3, [r2, #72]	; 0x48
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <MX_DMA_Init+0x48>)
 800046c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	203b      	movs	r0, #59	; 0x3b
 800047c:	f000 fc83 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000480:	203b      	movs	r0, #59	; 0x3b
 8000482:	f000 fc9c 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	203c      	movs	r0, #60	; 0x3c
 800048c:	f000 fc7b 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000490:	203c      	movs	r0, #60	; 0x3c
 8000492:	f000 fc94 	bl	8000dbe <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a2c      	ldr	r2, [pc, #176]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a26      	ldr	r2, [pc, #152]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a20      	ldr	r2, [pc, #128]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_GPIO_Init+0xcc>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <MX_GPIO_Init+0xcc>)
 8000508:	f043 0308 	orr.w	r3, r3, #8
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0xcc>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0308 	and.w	r3, r3, #8
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800051a:	2304      	movs	r3, #4
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	4811      	ldr	r0, [pc, #68]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000530:	f000 fe98 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 8000534:	2308      	movs	r3, #8
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000538:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <MX_GPIO_Init+0xd0>)
 800054a:	f000 fe8b 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000556:	2301      	movs	r3, #1
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000562:	f000 fe7f 	bl	8001264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	; 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	48000800 	.word	0x48000800

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>

08000582 <pawprint_init>:
#include "lsm6dso.h"
#include "lis2mdl.h"
#include "stts751.h"
#include "pawprint.h"

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	uint8_t WhoAmI,MasterTemp, RegDat;

	// Create Struct instance

	// Boot Delay
	HAL_Delay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f000 fafc 	bl	8000b88 <HAL_Delay>
	RegDat = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8000594:	f107 030d 	add.w	r3, r7, #13
 8000598:	461a      	mov	r2, r3
 800059a:	2101      	movs	r1, #1
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff fe47 	bl	8000230 <LSM6DSO_WriteReg>
	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &WhoAmI);
 80005a2:	f107 030f 	add.w	r3, r7, #15
 80005a6:	461a      	mov	r2, r3
 80005a8:	210f      	movs	r1, #15
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff fe26 	bl	80001fc <LSM6DSO_ReadReg>

	if( WhoAmI == LSM6DSO_ID ){
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b6c      	cmp	r3, #108	; 0x6c
 80005b4:	d17b      	bne.n	80006ae <pawprint_init+0x12c>
		RegDat = 0x40;
 80005b6:	2340      	movs	r3, #64	; 0x40
 80005b8:	737b      	strb	r3, [r7, #13]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); 										// Enable access to SHUB registers
 80005ba:	f107 030d 	add.w	r3, r7, #13
 80005be:	461a      	mov	r2, r3
 80005c0:	2101      	movs	r1, #1
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fe34 	bl	8000230 <LSM6DSO_WriteReg>
		LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp); 									// Save Master Config to MasterTemp
 80005c8:	f107 030e 	add.w	r3, r7, #14
 80005cc:	461a      	mov	r2, r3
 80005ce:	2114      	movs	r1, #20
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff fe13 	bl	80001fc <LSM6DSO_ReadReg>
		MasterTemp = MasterTemp | 0x20;
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	f043 0320 	orr.w	r3, r3, #32
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73bb      	strb	r3, [r7, #14]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp); 							// Start Config to 1 - sensor hub signal disable
 80005e0:	f107 030e 	add.w	r3, r7, #14
 80005e4:	461a      	mov	r2, r3
 80005e6:	2114      	movs	r1, #20
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe21 	bl	8000230 <LSM6DSO_WriteReg>
		HAL_Delay(5);																							// Delay
 80005ee:	2005      	movs	r0, #5
 80005f0:	f000 faca 	bl	8000b88 <HAL_Delay>
		MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f023 0304 	bic.w	r3, r3, #4
 8000600:	b2db      	uxtb	r3, r3
 8000602:	73bb      	strb	r3, [r7, #14]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);				// Master On bit to 0 to enable
 8000604:	f107 030e 	add.w	r3, r7, #14
 8000608:	461a      	mov	r2, r3
 800060a:	2114      	movs	r1, #20
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fe0f 	bl	8000230 <LSM6DSO_WriteReg>
		MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000618:	b2db      	uxtb	r3, r3
 800061a:	73bb      	strb	r3, [r7, #14]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);				// Start Config to 0 to restore trigger
 800061c:	f107 030e 	add.w	r3, r7, #14
 8000620:	461a      	mov	r2, r3
 8000622:	2114      	movs	r1, #20
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fe03 	bl	8000230 <LSM6DSO_WriteReg>
		MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8000630:	b2db      	uxtb	r3, r3
 8000632:	73bb      	strb	r3, [r7, #14]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);		// Set Pullup to 0 to disable internal pullup
 8000634:	f107 030e 	add.w	r3, r7, #14
 8000638:	461a      	mov	r2, r3
 800063a:	2114      	movs	r1, #20
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdf7 	bl	8000230 <LSM6DSO_WriteReg>
		MasterTemp = 0x10;
 8000642:	2310      	movs	r3, #16
 8000644:	73bb      	strb	r3, [r7, #14]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8000646:	f107 030e 	add.w	r3, r7, #14
 800064a:	461a      	mov	r2, r3
 800064c:	2114      	movs	r1, #20
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff fdee 	bl	8000230 <LSM6DSO_WriteReg>
		RegDat = 0x00;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
		LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 8000658:	f107 030d 	add.w	r3, r7, #13
 800065c:	461a      	mov	r2, r3
 800065e:	2101      	movs	r1, #1
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fde5 	bl	8000230 <LSM6DSO_WriteReg>

		LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &WhoAmI);
 8000666:	f107 030f 	add.w	r3, r7, #15
 800066a:	461a      	mov	r2, r3
 800066c:	214f      	movs	r1, #79	; 0x4f
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff fdaa 	bl	80001c8 <LIS2MDL_ReadReg>

		if( WhoAmI == LIS2MDL_ID){
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b40      	cmp	r3, #64	; 0x40
 8000678:	d102      	bne.n	8000680 <pawprint_init+0xfe>
			HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 fa84 	bl	8000b88 <HAL_Delay>
		}

		STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &WhoAmI);
 8000680:	f107 030f 	add.w	r3, r7, #15
 8000684:	461a      	mov	r2, r3
 8000686:	21fd      	movs	r1, #253	; 0xfd
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f9b3 	bl	80009f4 <STTS751_ReadReg>

		if( WhoAmI == STTS751_PROD_ID){
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10c      	bne.n	80006ae <pawprint_init+0x12c>

			STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &WhoAmI);
 8000694:	f107 030f 	add.w	r3, r7, #15
 8000698:	461a      	mov	r2, r3
 800069a:	21fe      	movs	r1, #254	; 0xfe
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f9a9 	bl	80009f4 <STTS751_ReadReg>

			if (WhoAmI == STTS751_MAN_ID){
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b53      	cmp	r3, #83	; 0x53
 80006a6:	d102      	bne.n	80006ae <pawprint_init+0x12c>
				HAL_Delay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 fa6d 	bl	8000b88 <HAL_Delay>
		}

	}


}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	; 0x58
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0ac      	sub	sp, #176	; 0xb0
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2288      	movs	r2, #136	; 0x88
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f00b fc21 	bl	800bf68 <memset>
  if(hi2c->Instance==I2C3)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <HAL_I2C_MspInit+0xb0>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d13b      	bne.n	80007a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000734:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000736:	2300      	movs	r3, #0
 8000738:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fd86 	bl	8004250 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800074a:	f7ff ff15 	bl	8000578 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <HAL_I2C_MspInit+0xb4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <HAL_I2C_MspInit+0xb4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <HAL_I2C_MspInit+0xb4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000766:	2303      	movs	r3, #3
 8000768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	2312      	movs	r3, #18
 800076e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800077e:	2304      	movs	r3, #4
 8000780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000788:	4619      	mov	r1, r3
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <HAL_I2C_MspInit+0xb8>)
 800078c:	f000 fd6a 	bl	8001264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_I2C_MspInit+0xb4>)
 8000792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_I2C_MspInit+0xb4>)
 8000796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800079a:	6593      	str	r3, [r2, #88]	; 0x58
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_I2C_MspInit+0xb4>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	37b0      	adds	r7, #176	; 0xb0
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40005c00 	.word	0x40005c00
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000800 	.word	0x48000800

080007bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a55      	ldr	r2, [pc, #340]	; (8000930 <HAL_SD_MspInit+0x174>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	f040 80a3 	bne.w	8000926 <HAL_SD_MspInit+0x16a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007e0:	4b54      	ldr	r3, [pc, #336]	; (8000934 <HAL_SD_MspInit+0x178>)
 80007e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e4:	4a53      	ldr	r2, [pc, #332]	; (8000934 <HAL_SD_MspInit+0x178>)
 80007e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ea:	6613      	str	r3, [r2, #96]	; 0x60
 80007ec:	4b51      	ldr	r3, [pc, #324]	; (8000934 <HAL_SD_MspInit+0x178>)
 80007ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <HAL_SD_MspInit+0x178>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a4d      	ldr	r2, [pc, #308]	; (8000934 <HAL_SD_MspInit+0x178>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <HAL_SD_MspInit+0x178>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000810:	4b48      	ldr	r3, [pc, #288]	; (8000934 <HAL_SD_MspInit+0x178>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a47      	ldr	r2, [pc, #284]	; (8000934 <HAL_SD_MspInit+0x178>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b45      	ldr	r3, [pc, #276]	; (8000934 <HAL_SD_MspInit+0x178>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000828:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800082c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800083a:	230c      	movs	r3, #12
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	483c      	ldr	r0, [pc, #240]	; (8000938 <HAL_SD_MspInit+0x17c>)
 8000846:	f000 fd0d 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800084a:	2304      	movs	r3, #4
 800084c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800085a:	230c      	movs	r3, #12
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4835      	ldr	r0, [pc, #212]	; (800093c <HAL_SD_MspInit+0x180>)
 8000866:	f000 fcfd 	bl	8001264 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <HAL_SD_MspInit+0x184>)
 800086c:	4a35      	ldr	r2, [pc, #212]	; (8000944 <HAL_SD_MspInit+0x188>)
 800086e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8000870:	4b33      	ldr	r3, [pc, #204]	; (8000940 <HAL_SD_MspInit+0x184>)
 8000872:	2207      	movs	r2, #7
 8000874:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <HAL_SD_MspInit+0x184>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <HAL_SD_MspInit+0x184>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <HAL_SD_MspInit+0x184>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <HAL_SD_MspInit+0x184>)
 800088a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <HAL_SD_MspInit+0x184>)
 8000892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000896:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_SD_MspInit+0x184>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <HAL_SD_MspInit+0x184>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <HAL_SD_MspInit+0x184>)
 80008a6:	f000 faa5 	bl	8000df4 <HAL_DMA_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_SD_MspInit+0xf8>
    {
      Error_Handler();
 80008b0:	f7ff fe62 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <HAL_SD_MspInit+0x184>)
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ba:	4a21      	ldr	r2, [pc, #132]	; (8000940 <HAL_SD_MspInit+0x184>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008c2:	4a22      	ldr	r2, [pc, #136]	; (800094c <HAL_SD_MspInit+0x190>)
 80008c4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008ce:	2210      	movs	r2, #16
 80008d0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ec:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <HAL_SD_MspInit+0x18c>)
 80008fc:	f000 fa7a 	bl	8000df4 <HAL_DMA_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_SD_MspInit+0x14e>
    {
      Error_Handler();
 8000906:	f7ff fe37 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_SD_MspInit+0x18c>)
 800090e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_SD_MspInit+0x18c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2031      	movs	r0, #49	; 0x31
 800091c:	f000 fa33 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000920:	2031      	movs	r0, #49	; 0x31
 8000922:	f000 fa4c 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40012800 	.word	0x40012800
 8000934:	40021000 	.word	0x40021000
 8000938:	48000800 	.word	0x48000800
 800093c:	48000c00 	.word	0x48000c00
 8000940:	20000200 	.word	0x20000200
 8000944:	40020444 	.word	0x40020444
 8000948:	20000248 	.word	0x20000248
 800094c:	40020458 	.word	0x40020458

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8d4 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <SDMMC1_IRQHandler+0x10>)
 80009aa:	f005 f9d5 	bl	8005d58 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000017c 	.word	0x2000017c

080009b8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <DMA2_Channel4_IRQHandler+0x10>)
 80009be:	f000 fb72 	bl	80010a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000200 	.word	0x20000200

080009cc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <DMA2_Channel5_IRQHandler+0x10>)
 80009d2:	f000 fb68 	bl	80010a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000248 	.word	0x20000248

080009e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <OTG_FS_IRQHandler+0x10>)
 80009e6:	f001 fd6b 	bl	80024c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20001790 	.word	0x20001790

080009f4 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af04      	add	r7, sp, #16
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	460b      	mov	r3, r1
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	2172      	movs	r1, #114	; 0x72
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 ff95 	bl	8001948 <HAL_I2C_Mem_Read>
 8000a1e:	4603      	mov	r3, r0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff ffea 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f00b fa7d 	bl	800bf78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fbf1 	bl	8000264 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000a90:	0800c084 	.word	0x0800c084
  ldr r2, =_sbss
 8000a94:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000a98:	20001ebc 	.word	0x20001ebc

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>

08000a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f961 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 f80e 	bl	8000ad0 <HAL_InitTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac0:	f7ff fdfa 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_InitTick+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d023      	beq.n	8000b2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_InitTick+0x70>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x6c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f96d 	bl	8000dda <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10f      	bne.n	8000b26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d809      	bhi.n	8000b20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f937 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0x74>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e004      	b.n	8000b30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e001      	b.n	8000b30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000290 	.word	0x20000290

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000290 	.word	0x20000290

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff ffee 	bl	8000b70 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffde 	bl	8000b70 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e098      	b.n	8000f38 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b4d      	ldr	r3, [pc, #308]	; (8000f44 <HAL_DMA_Init+0x150>)
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d80f      	bhi.n	8000e32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <HAL_DMA_Init+0x154>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <HAL_DMA_Init+0x158>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	009a      	lsls	r2, r3, #2
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <HAL_DMA_Init+0x15c>)
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_DMA_Init+0x160>)
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <HAL_DMA_Init+0x158>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	009a      	lsls	r2, r3, #2
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a42      	ldr	r2, [pc, #264]	; (8000f58 <HAL_DMA_Init+0x164>)
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eaa:	d039      	beq.n	8000f20 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_DMA_Init+0x15c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d11a      	bne.n	8000eec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_DMA_Init+0x168>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 031c 	and.w	r3, r3, #28
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4924      	ldr	r1, [pc, #144]	; (8000f5c <HAL_DMA_Init+0x168>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <HAL_DMA_Init+0x168>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6859      	ldr	r1, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f003 031c 	and.w	r3, r3, #28
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	491d      	ldr	r1, [pc, #116]	; (8000f5c <HAL_DMA_Init+0x168>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
 8000eea:	e019      	b.n	8000f20 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_DMA_Init+0x16c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f003 031c 	and.w	r3, r3, #28
 8000ef8:	210f      	movs	r1, #15
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4917      	ldr	r1, [pc, #92]	; (8000f60 <HAL_DMA_Init+0x16c>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_DMA_Init+0x16c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f003 031c 	and.w	r3, r3, #28
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	4911      	ldr	r1, [pc, #68]	; (8000f60 <HAL_DMA_Init+0x16c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40020407 	.word	0x40020407
 8000f48:	bffdfff8 	.word	0xbffdfff8
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	40020000 	.word	0x40020000
 8000f54:	bffdfbf8 	.word	0xbffdfbf8
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	400200a8 	.word	0x400200a8
 8000f60:	400204a8 	.word	0x400204a8

08000f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_DMA_Start_IT+0x20>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e04b      	b.n	800101c <HAL_DMA_Start_IT+0xb8>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d13a      	bne.n	800100e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f921 	bl	8001204 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 020e 	orr.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00f      	b.n	8000ffc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0204 	bic.w	r2, r2, #4
 8000fea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 020a 	orr.w	r2, r2, #10
 8000ffa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e005      	b.n	800101a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001016:	2302      	movs	r3, #2
 8001018:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800101a:	7dfb      	ldrb	r3, [r7, #23]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d005      	beq.n	8001048 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e029      	b.n	800109c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	f003 021c 	and.w	r2, r3, #28
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	4798      	blx	r3
    }
  }
  return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 031c 	and.w	r3, r3, #28
 80010c6:	2204      	movs	r2, #4
 80010c8:	409a      	lsls	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d026      	beq.n	8001120 <HAL_DMA_IRQHandler+0x7a>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d021      	beq.n	8001120 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d107      	bne.n	80010fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0204 	bic.w	r2, r2, #4
 80010f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f003 021c 	and.w	r2, r3, #28
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2104      	movs	r1, #4
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	2b00      	cmp	r3, #0
 8001114:	d071      	beq.n	80011fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800111e:	e06c      	b.n	80011fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f003 031c 	and.w	r3, r3, #28
 8001128:	2202      	movs	r2, #2
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d02e      	beq.n	8001192 <HAL_DMA_IRQHandler+0xec>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d029      	beq.n	8001192 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020a 	bic.w	r2, r2, #10
 800115a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 021c 	and.w	r2, r3, #28
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	2102      	movs	r1, #2
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	2b00      	cmp	r3, #0
 8001186:	d038      	beq.n	80011fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001190:	e033      	b.n	80011fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 031c 	and.w	r3, r3, #28
 800119a:	2208      	movs	r2, #8
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d02a      	beq.n	80011fc <HAL_DMA_IRQHandler+0x156>
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f003 021c 	and.w	r2, r3, #28
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
}
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 021c 	and.w	r2, r3, #28
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d108      	bne.n	8001248 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001246:	e007      	b.n	8001258 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	60da      	str	r2, [r3, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	e17f      	b.n	8001574 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8171 	beq.w	800156e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b01      	cmp	r3, #1
 8001296:	d005      	beq.n	80012a4 <HAL_GPIO_Init+0x40>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d130      	bne.n	8001306 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012da:	2201      	movs	r2, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	f003 0201 	and.w	r2, r3, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b03      	cmp	r3, #3
 8001310:	d118      	bne.n	8001344 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80ac 	beq.w	800156e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_GPIO_Init+0x330>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <HAL_GPIO_Init+0x330>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6613      	str	r3, [r2, #96]	; 0x60
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_GPIO_Init+0x330>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800142e:	4a5a      	ldr	r2, [pc, #360]	; (8001598 <HAL_GPIO_Init+0x334>)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x242>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x338>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x23e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x33c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x23a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x340>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x236>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x344>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x232>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_GPIO_Init+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x22e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <HAL_GPIO_Init+0x34c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x22a>
 800148a:	2306      	movs	r3, #6
 800148c:	e00c      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 800148e:	2307      	movs	r3, #7
 8001490:	e00a      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 8001492:	2305      	movs	r3, #5
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 8001496:	2304      	movs	r3, #4
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x244>
 80014a6:	2300      	movs	r3, #0
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b8:	4937      	ldr	r1, [pc, #220]	; (8001598 <HAL_GPIO_Init+0x334>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x350>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <HAL_GPIO_Init+0x350>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_GPIO_Init+0x350>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_GPIO_Init+0x350>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_GPIO_Init+0x350>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_GPIO_Init+0x350>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f ae78 	bne.w	8001274 <HAL_GPIO_Init+0x10>
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000
 800159c:	48000400 	.word	0x48000400
 80015a0:	48000800 	.word	0x48000800
 80015a4:	48000c00 	.word	0x48000c00
 80015a8:	48001000 	.word	0x48001000
 80015ac:	48001400 	.word	0x48001400
 80015b0:	48001800 	.word	0x48001800
 80015b4:	40010400 	.word	0x40010400

080015b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e08d      	b.n	8001716 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff f876 	bl	8000700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2224      	movs	r2, #36	; 0x24
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e006      	b.n	8001670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800166e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d108      	bne.n	800168a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	e007      	b.n	800169a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001698:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69d9      	ldr	r1, [r3, #28]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	460b      	mov	r3, r1
 8001734:	813b      	strh	r3, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b20      	cmp	r3, #32
 8001744:	f040 80f9 	bne.w	800193a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_I2C_Mem_Write+0x34>
 800174e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0ed      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_I2C_Mem_Write+0x4e>
 800176a:	2302      	movs	r3, #2
 800176c:	e0e6      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001776:	f7ff f9fb 	bl	8000b70 <HAL_GetTick>
 800177a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2319      	movs	r3, #25
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 fac3 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d1      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2221      	movs	r2, #33	; 0x21
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017c0:	88f8      	ldrh	r0, [r7, #6]
 80017c2:	893a      	ldrh	r2, [r7, #8]
 80017c4:	8979      	ldrh	r1, [r7, #10]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4603      	mov	r3, r0
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f9d3 	bl	8001b7c <I2C_RequestMemoryWrite>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0a9      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	d90e      	bls.n	8001810 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	22ff      	movs	r2, #255	; 0xff
 80017f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	8979      	ldrh	r1, [r7, #10]
 8001800:	2300      	movs	r3, #0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 fc3d 	bl	8002088 <I2C_TransferConfig>
 800180e:	e00f      	b.n	8001830 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	b2da      	uxtb	r2, r3
 8001820:	8979      	ldrh	r1, [r7, #10]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 fc2c 	bl	8002088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fabc 	bl	8001db2 <I2C_WaitOnTXISFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e07b      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d034      	beq.n	80018e8 <HAL_I2C_Mem_Write+0x1c8>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	2b00      	cmp	r3, #0
 8001884:	d130      	bne.n	80018e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	2200      	movs	r2, #0
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fa3f 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e04d      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d90e      	bls.n	80018c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	8979      	ldrh	r1, [r7, #10]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fbe1 	bl	8002088 <I2C_TransferConfig>
 80018c6:	e00f      	b.n	80018e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fbd0 	bl	8002088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d19e      	bne.n	8001830 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 faa2 	bl	8001e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e01a      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2220      	movs	r2, #32
 800190c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_I2C_Mem_Write+0x224>)
 800191a:	400b      	ands	r3, r1
 800191c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800193a:	2302      	movs	r3, #2
  }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	fe00e800 	.word	0xfe00e800

08001948 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4603      	mov	r3, r0
 8001958:	817b      	strh	r3, [r7, #10]
 800195a:	460b      	mov	r3, r1
 800195c:	813b      	strh	r3, [r7, #8]
 800195e:	4613      	mov	r3, r2
 8001960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b20      	cmp	r3, #32
 800196c:	f040 80fd 	bne.w	8001b6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_I2C_Mem_Read+0x34>
 8001976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0f1      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Mem_Read+0x4e>
 8001992:	2302      	movs	r3, #2
 8001994:	e0ea      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800199e:	f7ff f8e7 	bl	8000b70 <HAL_GetTick>
 80019a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2319      	movs	r3, #25
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f9af 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0d5      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2222      	movs	r2, #34	; 0x22
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e8:	88f8      	ldrh	r0, [r7, #6]
 80019ea:	893a      	ldrh	r2, [r7, #8]
 80019ec:	8979      	ldrh	r1, [r7, #10]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4603      	mov	r3, r0
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f913 	bl	8001c24 <I2C_RequestMemoryRead>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0ad      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d90e      	bls.n	8001a38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	22ff      	movs	r2, #255	; 0xff
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	8979      	ldrh	r1, [r7, #10]
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <HAL_I2C_Mem_Read+0x22c>)
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fb29 	bl	8002088 <I2C_TransferConfig>
 8001a36:	e00f      	b.n	8001a58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	8979      	ldrh	r1, [r7, #10]
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_I2C_Mem_Read+0x22c>)
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fb18 	bl	8002088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2104      	movs	r1, #4
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f956 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e07c      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d034      	beq.n	8001b18 <HAL_I2C_Mem_Read+0x1d0>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d130      	bne.n	8001b18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f927 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e04d      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d90e      	bls.n	8001af8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	22ff      	movs	r2, #255	; 0xff
 8001ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	8979      	ldrh	r1, [r7, #10]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 fac9 	bl	8002088 <I2C_TransferConfig>
 8001af6:	e00f      	b.n	8001b18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fab8 	bl	8002088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d19a      	bne.n	8001a58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f98a 	bl	8001e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e01a      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_I2C_Mem_Read+0x230>)
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	80002400 	.word	0x80002400
 8001b78:	fe00e800 	.word	0xfe00e800

08001b7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	817b      	strh	r3, [r7, #10]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	813b      	strh	r3, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <I2C_RequestMemoryWrite+0xa4>)
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fa6f 	bl	8002088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	69b9      	ldr	r1, [r7, #24]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f8ff 	bl	8001db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e02c      	b.n	8001c18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc4:	893b      	ldrh	r3, [r7, #8]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8001bce:	e015      	b.n	8001bfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bd0:	893b      	ldrh	r3, [r7, #8]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f8e5 	bl	8001db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e012      	b.n	8001c18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf2:	893b      	ldrh	r3, [r7, #8]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2200      	movs	r2, #0
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f884 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	80002000 	.word	0x80002000

08001c24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	817b      	strh	r3, [r7, #10]
 8001c36:	460b      	mov	r3, r1
 8001c38:	813b      	strh	r3, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <I2C_RequestMemoryRead+0xa4>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa1c 	bl	8002088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f8ac 	bl	8001db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e02c      	b.n	8001cbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
 8001c74:	e015      	b.n	8001ca2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c76:	893b      	ldrh	r3, [r7, #8]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f892 	bl	8001db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e012      	b.n	8001cbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c98:	893b      	ldrh	r3, [r7, #8]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f831 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	80002000 	.word	0x80002000

08001ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d103      	bne.n	8001cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d007      	beq.n	8001d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	619a      	str	r2, [r3, #24]
  }
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d24:	e031      	b.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d02d      	beq.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2e:	f7fe ff1f 	bl	8000b70 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d302      	bcc.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d122      	bne.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d113      	bne.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0220 	orr.w	r2, r3, #32
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4013      	ands	r3, r2
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d0be      	beq.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dbe:	e033      	b.n	8001e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f87f 	bl	8001ec8 <I2C_IsErrorOccurred>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e031      	b.n	8001e38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d025      	beq.n	8001e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ddc:	f7fe fec8 	bl	8000b70 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d302      	bcc.n	8001df2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11a      	bne.n	8001e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d013      	beq.n	8001e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e007      	b.n	8001e38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d1c4      	bne.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4c:	e02f      	b.n	8001eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f838 	bl	8001ec8 <I2C_IsErrorOccurred>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e02d      	b.n	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7fe fe85 	bl	8000b70 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11a      	bne.n	8001eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d013      	beq.n	8001eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e007      	b.n	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d1c8      	bne.n	8001e4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d068      	beq.n	8001fc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2210      	movs	r2, #16
 8001efa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001efc:	e049      	b.n	8001f92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d045      	beq.n	8001f92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7fe fe33 	bl	8000b70 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_IsErrorOccurred+0x54>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d13a      	bne.n	8001f92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3e:	d121      	bne.n	8001f84 <I2C_IsErrorOccurred+0xbc>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f46:	d01d      	beq.n	8001f84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d01a      	beq.n	8001f84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f5e:	f7fe fe07 	bl	8000b70 <HAL_GetTick>
 8001f62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f64:	e00e      	b.n	8001f84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f66:	f7fe fe03 	bl	8000b70 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b19      	cmp	r3, #25
 8001f72:	d907      	bls.n	8001f84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	f043 0320 	orr.w	r3, r3, #32
 8001f7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f82:	e006      	b.n	8001f92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d1e9      	bne.n	8001f66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d003      	beq.n	8001fa8 <I2C_IsErrorOccurred+0xe0>
 8001fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0aa      	beq.n	8001efe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d103      	bne.n	8001fb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800200a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fe45 	bl	8001ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <I2C_IsErrorOccurred+0x1bc>)
 800204e:	400b      	ands	r3, r1
 8002050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800207a:	4618      	mov	r0, r3
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	fe00e800 	.word	0xfe00e800

08002088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	817b      	strh	r3, [r7, #10]
 8002096:	4613      	mov	r3, r2
 8002098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020a0:	7a7b      	ldrb	r3, [r7, #9]
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	0d5b      	lsrs	r3, r3, #21
 80020c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <I2C_TransferConfig+0x60>)
 80020c8:	430b      	orrs	r3, r1
 80020ca:	43db      	mvns	r3, r3
 80020cc:	ea02 0103 	and.w	r1, r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	03ff63ff 	.word	0x03ff63ff

080020ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d138      	bne.n	8002174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800210c:	2302      	movs	r3, #2
 800210e:	e032      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	d139      	bne.n	800220c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e033      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2224      	movs	r2, #36	; 0x24
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b08f      	sub	sp, #60	; 0x3c
 800221e:	af0a      	add	r7, sp, #40	; 0x28
 8002220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e116      	b.n	800245a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f009 fa76 	bl	800b738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f005 fc81 	bl	8007b72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	687e      	ldr	r6, [r7, #4]
 8002278:	466d      	mov	r5, sp
 800227a:	f106 0410 	add.w	r4, r6, #16
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228a:	e885 0003 	stmia.w	r5, {r0, r1}
 800228e:	1d33      	adds	r3, r6, #4
 8002290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f005 fb94 	bl	80079c0 <USB_CoreInit>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0d7      	b.n	800245a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fc6f 	bl	8007b94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e04a      	b.n	8002352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	333d      	adds	r3, #61	; 0x3d
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	333c      	adds	r3, #60	; 0x3c
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	b298      	uxth	r0, r3
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3356      	adds	r3, #86	; 0x56
 80022f8:	4602      	mov	r2, r0
 80022fa:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3340      	adds	r3, #64	; 0x40
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3344      	adds	r3, #68	; 0x44
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3348      	adds	r3, #72	; 0x48
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	3301      	adds	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3af      	bcc.n	80022bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e044      	b.n	80023ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3b5      	bcc.n	8002362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	687e      	ldr	r6, [r7, #4]
 80023fe:	466d      	mov	r5, sp
 8002400:	f106 0410 	add.w	r4, r6, #16
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002410:	e885 0003 	stmia.w	r5, {r0, r1}
 8002414:	1d33      	adds	r3, r6, #4
 8002416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f005 fc07 	bl	8007c2c <USB_DevInit>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e014      	b.n	800245a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2b01      	cmp	r3, #1
 8002446:	d102      	bne.n	800244e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f001 f869 	bl	8003520 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f006 fbb5 	bl	8008bc2 <USB_DevDisconnect>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002462 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_Start+0x1c>
 800247a:	2302      	movs	r3, #2
 800247c:	e01c      	b.n	80024b8 <HAL_PCD_Start+0x56>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f005 fb56 	bl	8007b50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f006 fb69 	bl	8008b80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08d      	sub	sp, #52	; 0x34
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f006 fc27 	bl	8008d2a <USB_GetMode>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 847e 	bne.w	8002de0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f006 fb8b 	bl	8008c04 <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8474 	beq.w	8002dde <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f006 fb78 	bl	8008c04 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d107      	bne.n	800252e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f002 0202 	and.w	r2, r2, #2
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f006 fb66 	bl	8008c04 <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b10      	cmp	r3, #16
 8002540:	d161      	bne.n	8002606 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0210 	bic.w	r2, r2, #16
 8002550:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	0c5b      	lsrs	r3, r3, #17
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	2b02      	cmp	r3, #2
 800257c:	d124      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d035      	beq.n	80025f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6a38      	ldr	r0, [r7, #32]
 800259e:	f006 f99d 	bl	80088dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ae:	441a      	add	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c0:	441a      	add	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	e016      	b.n	80025f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	0c5b      	lsrs	r3, r3, #17
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d110      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025da:	2208      	movs	r2, #8
 80025dc:	4619      	mov	r1, r3
 80025de:	6a38      	ldr	r0, [r7, #32]
 80025e0:	f006 f97c 	bl	80088dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f0:	441a      	add	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0210 	orr.w	r2, r2, #16
 8002604:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f006 fafa 	bl	8008c04 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002616:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800261a:	f040 80a7 	bne.w	800276c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f006 faff 	bl	8008c2a <USB_ReadDevAllOutEpInterrupt>
 800262c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800262e:	e099      	b.n	8002764 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 808e 	beq.w	8002758 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f006 fb23 	bl	8008c92 <USB_ReadDevOutEPInterrupt>
 800264c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00c      	beq.n	8002672 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002664:	461a      	mov	r2, r3
 8002666:	2301      	movs	r3, #1
 8002668:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800266a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fe7d 	bl	800336c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00c      	beq.n	8002696 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	461a      	mov	r2, r3
 800268a:	2308      	movs	r3, #8
 800268c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800268e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 feb9 	bl	8003408 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ac:	461a      	mov	r2, r3
 80026ae:	2310      	movs	r3, #16
 80026b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d030      	beq.n	800271e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d109      	bne.n	80026dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	3304      	adds	r3, #4
 80026f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	78db      	ldrb	r3, [r3, #3]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d108      	bne.n	800270c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f009 f93e 	bl	800b988 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002718:	461a      	mov	r2, r3
 800271a:	2302      	movs	r3, #2
 800271c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002734:	461a      	mov	r2, r3
 8002736:	2320      	movs	r3, #32
 8002738:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002756:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3301      	adds	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f af62 	bne.w	8002630 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f006 fa47 	bl	8008c04 <USB_ReadInterrupts>
 8002776:	4603      	mov	r3, r0
 8002778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002780:	f040 80a4 	bne.w	80028cc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f006 fa68 	bl	8008c5e <USB_ReadDevAllInEpInterrupt>
 800278e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002794:	e096      	b.n	80028c4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 808b 	beq.w	80028b8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f006 fa8e 	bl	8008cce <USB_ReadDevInEPInterrupt>
 80027b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d020      	beq.n	8002800 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	2201      	movs	r2, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69f9      	ldr	r1, [r7, #28]
 80027da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027de:	4013      	ands	r3, r2
 80027e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ee:	461a      	mov	r2, r3
 80027f0:	2301      	movs	r3, #1
 80027f2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f009 f82f 	bl	800b85e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002816:	461a      	mov	r2, r3
 8002818:	2308      	movs	r3, #8
 800281a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002832:	461a      	mov	r2, r3
 8002834:	2310      	movs	r3, #16
 8002836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284e:	461a      	mov	r2, r3
 8002850:	2340      	movs	r3, #64	; 0x40
 8002852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d023      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800285e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002860:	6a38      	ldr	r0, [r7, #32]
 8002862:	f005 fb25 	bl	8007eb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	3338      	adds	r3, #56	; 0x38
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	3304      	adds	r3, #4
 8002878:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	78db      	ldrb	r3, [r3, #3]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f009 f88c 	bl	800b9ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2302      	movs	r3, #2
 80028a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fcd2 	bl	800325c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f47f af65 	bne.w	8002796 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f006 f997 	bl	8008c04 <USB_ReadInterrupts>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028e0:	d122      	bne.n	8002928 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f009 fac0 	bl	800be90 <HAL_PCDEx_LPM_Callback>
 8002910:	e002      	b.n	8002918 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f009 f810 	bl	800b938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f006 f969 	bl	8008c04 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	d112      	bne.n	8002964 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f008 ffcc 	bl	800b8ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002962:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f006 f94b 	bl	8008c04 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002978:	d121      	bne.n	80029be <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002988:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029ae:	2101      	movs	r1, #1
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f009 fa6d 	bl	800be90 <HAL_PCDEx_LPM_Callback>
 80029b6:	e002      	b.n	80029be <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f008 ff97 	bl	800b8ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f006 f91e 	bl	8008c04 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	f040 80b5 	bne.w	8002b40 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2110      	movs	r1, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fa5d 	bl	8007eb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	e046      	b.n	8002a8a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	0151      	lsls	r1, r2, #5
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	440a      	add	r2, r1
 8002a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	3301      	adds	r3, #1
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3b3      	bcc.n	80029fc <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac0:	f043 030b 	orr.w	r3, r3, #11
 8002ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f043 030b 	orr.w	r3, r3, #11
 8002ada:	6453      	str	r3, [r2, #68]	; 0x44
 8002adc:	e015      	b.n	8002b0a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f043 030b 	orr.w	r3, r3, #11
 8002b08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f006 f92e 	bl	8008d8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f006 f85d 	bl	8008c04 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b54:	d124      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f006 f8f3 	bl	8008d46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 fa20 	bl	8007faa <USB_GetDevSpeed>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681c      	ldr	r4, [r3, #0]
 8002b76:	f001 fad3 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8002b7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	4620      	mov	r0, r4
 8002b86:	f004 ff47 	bl	8007a18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f008 fe8f 	bl	800b8ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f006 f82d 	bl	8008c04 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d10a      	bne.n	8002bca <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f008 fe6c 	bl	800b892 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f002 0208 	and.w	r2, r2, #8
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f006 f818 	bl	8008c04 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d122      	bne.n	8002c24 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bea:	2301      	movs	r3, #1
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	e014      	b.n	8002c1a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 faf3 	bl	80031fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	3301      	adds	r3, #1
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3e5      	bcc.n	8002bf0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 ffeb 	bl	8008c04 <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c38:	d13b      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	e02b      	b.n	8002c98 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3340      	adds	r3, #64	; 0x40
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d115      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	da12      	bge.n	8002c92 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fab4 	bl	80031fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	3301      	adds	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3ce      	bcc.n	8002c40 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 ffa4 	bl	8008c04 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc6:	d155      	bne.n	8002d74 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc8:	2301      	movs	r3, #1
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e045      	b.n	8002d5a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d12e      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	da2b      	bge.n	8002d54 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d121      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d50:	6053      	str	r3, [r2, #4]
            break;
 8002d52:	e007      	b.n	8002d64 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	3301      	adds	r3, #1
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d3b4      	bcc.n	8002cce <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 ff43 	bl	8008c04 <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d88:	d10a      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f008 fe20 	bl	800b9d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 ff2d 	bl	8008c04 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d115      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f008 fe10 	bl	800b9ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	e000      	b.n	8002de0 <HAL_PCD_IRQHandler+0x920>
      return;
 8002dde:	bf00      	nop
    }
  }
}
 8002de0:	3734      	adds	r7, #52	; 0x34
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}

08002de6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_PCD_SetAddress+0x1a>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e013      	b.n	8002e28 <HAL_PCD_SetAddress+0x42>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f005 fe8b 	bl	8008b34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	70fb      	strb	r3, [r7, #3]
 8002e42:	460b      	mov	r3, r1
 8002e44:	803b      	strh	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da0f      	bge.n	8002e76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	3338      	adds	r3, #56	; 0x38
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	705a      	strb	r2, [r3, #1]
 8002e74:	e00f      	b.n	8002e96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea2:	883a      	ldrh	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	78ba      	ldrb	r2, [r7, #2]
 8002eac:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec0:	78bb      	ldrb	r3, [r7, #2]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d102      	bne.n	8002ecc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_PCD_EP_Open+0xaa>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00e      	b.n	8002ef8 <HAL_PCD_EP_Open+0xc8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 f87d 	bl	8007fe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0f      	bge.n	8002f34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00f      	b.n	8002f54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_PCD_EP_Close+0x6e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e00e      	b.n	8002f8c <HAL_PCD_EP_Close+0x8c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f005 f8bb 	bl	80080f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6979      	ldr	r1, [r7, #20]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 f961 	bl	80082b0 <USB_EPStartXfer>

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	460b      	mov	r3, r1
 8003036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003038:	7afb      	ldrb	r3, [r7, #11]
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	3338      	adds	r3, #56	; 0x38
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2201      	movs	r2, #1
 8003066:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	b2da      	uxtb	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	4618      	mov	r0, r3
 800307c:	f005 f918 	bl	80082b0 <USB_EPStartXfer>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d901      	bls.n	80030a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04e      	b.n	8003146 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da0f      	bge.n	80030d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3338      	adds	r3, #56	; 0x38
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	705a      	strb	r2, [r3, #1]
 80030ce:	e00d      	b.n	80030ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_PCD_EP_SetStall+0x82>
 8003108:	2302      	movs	r3, #2
 800310a:	e01c      	b.n	8003146 <HAL_PCD_EP_SetStall+0xbc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	f005 fc36 	bl	800898c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f005 fe28 	bl	8008d8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d901      	bls.n	800316c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e042      	b.n	80031f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800316c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003170:	2b00      	cmp	r3, #0
 8003172:	da0f      	bge.n	8003194 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	3338      	adds	r3, #56	; 0x38
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	3304      	adds	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	705a      	strb	r2, [r3, #1]
 8003192:	e00f      	b.n	80031b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	3304      	adds	r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_PCD_EP_ClrStall+0x86>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e00e      	b.n	80031f2 <HAL_PCD_EP_ClrStall+0xa4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68f9      	ldr	r1, [r7, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fc40 	bl	8008a68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800320a:	2b00      	cmp	r3, #0
 800320c:	da0c      	bge.n	8003228 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3338      	adds	r3, #56	; 0x38
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e00c      	b.n	8003242 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68f9      	ldr	r1, [r7, #12]
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fa63 	bl	8008714 <USB_EPStopXfer>
 800324e:	4603      	mov	r3, r0
 8003250:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003252:	7afb      	ldrb	r3, [r7, #11]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	3338      	adds	r3, #56	; 0x38
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d901      	bls.n	8003294 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e067      	b.n	8003364 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d902      	bls.n	80032b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3303      	adds	r3, #3
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032b8:	e026      	b.n	8003308 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3303      	adds	r3, #3
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f005 fabc 	bl	8008868 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	441a      	add	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	441a      	add	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	429a      	cmp	r2, r3
 800331c:	d809      	bhi.n	8003332 <PCD_WriteEmptyTxFifo+0xd6>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003326:	429a      	cmp	r2, r3
 8003328:	d203      	bcs.n	8003332 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1c3      	bne.n	80032ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d811      	bhi.n	8003362 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2201      	movs	r2, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	43db      	mvns	r3, r3
 8003358:	6939      	ldr	r1, [r7, #16]
 800335a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335e:	4013      	ands	r3, r2
 8003360:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	333c      	adds	r3, #60	; 0x3c
 8003384:	3304      	adds	r3, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <PCD_EP_OutXfrComplete_int+0x98>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d124      	bne.n	80033ec <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	6093      	str	r3, [r2, #8]
 80033c0:	e01a      	b.n	80033f8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	2320      	movs	r3, #32
 80033dc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f008 fa1f 	bl	800b828 <HAL_PCD_DataOutStageCallback>
 80033ea:	e005      	b.n	80033f8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f008 fa18 	bl	800b828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	4f54310a 	.word	0x4f54310a

08003408 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	333c      	adds	r3, #60	; 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <PCD_EP_OutSetupPacket_int+0x64>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d90e      	bls.n	800345c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f008 f9d1 	bl	800b804 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	4f54300a 	.word	0x4f54300a

08003470 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
 800347c:	4613      	mov	r3, r2
 800347e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800348e:	883b      	ldrh	r3, [r7, #0]
 8003490:	0419      	lsls	r1, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	430a      	orrs	r2, r1
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
 800349c:	e028      	b.n	80034f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e00d      	b.n	80034ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	3340      	adds	r3, #64	; 0x40
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	3301      	adds	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3ec      	bcc.n	80034b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034d8:	883b      	ldrh	r3, [r7, #0]
 80034da:	0418      	lsls	r0, r3, #16
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	4302      	orrs	r2, r0
 80034e8:	3340      	adds	r3, #64	; 0x40
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	f043 0303 	orr.w	r3, r3, #3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_PWREx_GetVoltageRange+0x18>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40007000 	.word	0x40007000

08003584 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003592:	d130      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d038      	beq.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2232      	movs	r2, #50	; 0x32
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0c9b      	lsrs	r3, r3, #18
 80035c4:	3301      	adds	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c8:	e002      	b.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035dc:	d102      	bne.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f2      	bne.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d110      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e00f      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d007      	beq.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800360c:	4a05      	ldr	r2, [pc, #20]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003612:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000
 8003628:	20000000 	.word	0x20000000
 800362c:	431bde83 	.word	0x431bde83

08003630 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_PWREx_EnableVddUSB+0x1c>)
 800363a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363e:	6053      	str	r3, [r2, #4]
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40007000 	.word	0x40007000

08003650 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e3ca      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003662:	4b97      	ldr	r3, [pc, #604]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800366c:	4b94      	ldr	r3, [pc, #592]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80e4 	beq.w	800384c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_RCC_OscConfig+0x4a>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	f040 808b 	bne.w	80037a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b01      	cmp	r3, #1
 8003696:	f040 8087 	bne.w	80037a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369a:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e3a2      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1a      	ldr	r2, [r3, #32]
 80036b6:	4b82      	ldr	r3, [pc, #520]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_RCC_OscConfig+0x7c>
 80036c2:	4b7f      	ldr	r3, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_OscConfig+0x88>
 80036cc:	4b7c      	ldr	r3, [pc, #496]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d8:	4293      	cmp	r3, r2
 80036da:	d223      	bcs.n	8003724 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fd55 	bl	8004190 <RCC_SetFlashLatencyFromMSIRange>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e383      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f0:	4b73      	ldr	r3, [pc, #460]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a72      	ldr	r2, [pc, #456]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b70      	ldr	r3, [pc, #448]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	496d      	ldr	r1, [pc, #436]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	4968      	ldr	r1, [pc, #416]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
 8003722:	e025      	b.n	8003770 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003724:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800372a:	f043 0308 	orr.w	r3, r3, #8
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4960      	ldr	r1, [pc, #384]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003742:	4b5f      	ldr	r3, [pc, #380]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	495b      	ldr	r1, [pc, #364]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd15 	bl	8004190 <RCC_SetFlashLatencyFromMSIRange>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e343      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003770:	f000 fc4a 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b52      	ldr	r3, [pc, #328]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	4950      	ldr	r1, [pc, #320]	; (80038c4 <HAL_RCC_OscConfig+0x274>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
 800378c:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <HAL_RCC_OscConfig+0x278>)
 800378e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003790:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <HAL_RCC_OscConfig+0x27c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd f99b 	bl	8000ad0 <HAL_InitTick>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d052      	beq.n	800384a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	e327      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d032      	beq.n	8003816 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a42      	ldr	r2, [pc, #264]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037bc:	f7fd f9d8 	bl	8000b70 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c4:	f7fd f9d4 	bl	8000b70 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e310      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d6:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a36      	ldr	r2, [pc, #216]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4931      	ldr	r1, [pc, #196]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003800:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	492c      	ldr	r1, [pc, #176]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	e01a      	b.n	800384c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003822:	f7fd f9a5 	bl	8000b70 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800382a:	f7fd f9a1 	bl	8000b70 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e2dd      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800383c:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x1da>
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800384a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d074      	beq.n	8003942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x21a>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d10e      	bne.n	8003882 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d10b      	bne.n	8003882 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d064      	beq.n	8003940 <HAL_RCC_OscConfig+0x2f0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d160      	bne.n	8003940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e2ba      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x24a>
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e026      	b.n	80038e8 <HAL_RCC_OscConfig+0x298>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a2:	d115      	bne.n	80038d0 <HAL_RCC_OscConfig+0x280>
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80038aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <HAL_RCC_OscConfig+0x270>)
 80038b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x298>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0800c020 	.word	0x0800c020
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004
 80038d0:	4ba0      	ldr	r3, [pc, #640]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a9f      	ldr	r2, [pc, #636]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b9d      	ldr	r3, [pc, #628]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a9c      	ldr	r2, [pc, #624]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd f93e 	bl	8000b70 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fd f93a 	bl	8000b70 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e276      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390a:	4b92      	ldr	r3, [pc, #584]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x2a8>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fd f92a 	bl	8000b70 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fd f926 	bl	8000b70 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e262      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003932:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d0>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d060      	beq.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d005      	beq.n	8003960 <HAL_RCC_OscConfig+0x310>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d119      	bne.n	800398e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d116      	bne.n	800398e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003960:	4b7c      	ldr	r3, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_OscConfig+0x328>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e23f      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b76      	ldr	r3, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	4973      	ldr	r1, [pc, #460]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800398c:	e040      	b.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d023      	beq.n	80039de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003996:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6e      	ldr	r2, [pc, #440]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fd f8e5 	bl	8000b70 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fd f8e1 	bl	8000b70 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e21d      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039bc:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	495f      	ldr	r1, [pc, #380]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
 80039dc:	e018      	b.n	8003a10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b5d      	ldr	r3, [pc, #372]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5c      	ldr	r2, [pc, #368]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd f8c1 	bl	8000b70 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fd f8bd 	bl	8000b70 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1f9      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d03c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a24:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd f89c 	bl	8000b70 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fd f898 	bl	8000b70 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1d4      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ef      	beq.n	8003a3c <HAL_RCC_OscConfig+0x3ec>
 8003a5c:	e01b      	b.n	8003a96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a64:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fd f87f 	bl	8000b70 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd f87b 	bl	8000b70 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1b7      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a88:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ef      	bne.n	8003a76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aa8:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x508>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d118      	bne.n	8003b0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_RCC_OscConfig+0x508>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_RCC_OscConfig+0x508>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f842 	bl	8000b70 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fd f83e 	bl	8000b70 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e17a      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_RCC_OscConfig+0x508>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d108      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4d8>
 8003b16:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b26:	e029      	b.n	8003b7c <HAL_RCC_OscConfig+0x52c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d115      	bne.n	8003b5c <HAL_RCC_OscConfig+0x50c>
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a03      	ldr	r2, [pc, #12]	; (8003b54 <HAL_RCC_OscConfig+0x504>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b50:	e014      	b.n	8003b7c <HAL_RCC_OscConfig+0x52c>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	4b9c      	ldr	r3, [pc, #624]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	4a9b      	ldr	r2, [pc, #620]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b6c:	4b98      	ldr	r3, [pc, #608]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	4a97      	ldr	r2, [pc, #604]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d016      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fc fff4 	bl	8000b70 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fc fff0 	bl	8000b70 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e12a      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba2:	4b8b      	ldr	r3, [pc, #556]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ed      	beq.n	8003b8c <HAL_RCC_OscConfig+0x53c>
 8003bb0:	e015      	b.n	8003bde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fc ffdd 	bl	8000b70 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fc ffd9 	bl	8000b70 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e113      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd0:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ed      	bne.n	8003bba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be4:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	4a79      	ldr	r2, [pc, #484]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80fe 	beq.w	8003df6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f040 80d0 	bne.w	8003da4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c04:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d130      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	3b01      	subs	r3, #1
 8003c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d127      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c44:	2a07      	cmp	r2, #7
 8003c46:	bf14      	ite	ne
 8003c48:	2201      	movne	r2, #1
 8003c4a:	2200      	moveq	r2, #0
 8003c4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d113      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d109      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	3b01      	subs	r3, #1
 8003c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d06e      	beq.n	8003d58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d069      	beq.n	8003d54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0ad      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca8:	f7fc ff62 	bl	8000b70 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fc ff5e 	bl	8000b70 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e09a      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cce:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_RCC_OscConfig+0x784>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce8:	0212      	lsls	r2, r2, #8
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf0:	0852      	lsrs	r2, r2, #1
 8003cf2:	3a01      	subs	r2, #1
 8003cf4:	0552      	lsls	r2, r2, #21
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cfc:	0852      	lsrs	r2, r2, #1
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0652      	lsls	r2, r2, #25
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d08:	0912      	lsrs	r2, r2, #4
 8003d0a:	0452      	lsls	r2, r2, #17
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	4930      	ldr	r1, [pc, #192]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2c:	f7fc ff20 	bl	8000b70 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fc ff1c 	bl	8000b70 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e058      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d52:	e050      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e04f      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d148      	bne.n	8003df6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d7c:	f7fc fef8 	bl	8000b70 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fc fef4 	bl	8000b70 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e030      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x734>
 8003da2:	e028      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d023      	beq.n	8003df2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCC_OscConfig+0x780>)
 8003db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fc fedb 	bl	8000b70 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	e00c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fc fed7 	bl	8000b70 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d905      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e013      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_OscConfig+0x7b0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ec      	bne.n	8003dbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_OscConfig+0x7b0>)
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	4905      	ldr	r1, [pc, #20]	; (8003e00 <HAL_RCC_OscConfig+0x7b0>)
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_OscConfig+0x7b4>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
 8003df0:	e001      	b.n	8003df6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	feeefffc 	.word	0xfeeefffc

08003e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0e7      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b75      	ldr	r3, [pc, #468]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d910      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b72      	ldr	r3, [pc, #456]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0207 	bic.w	r2, r3, #7
 8003e32:	4970      	ldr	r1, [pc, #448]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0cf      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d010      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d908      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e68:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4960      	ldr	r1, [pc, #384]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d04c      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d121      	bne.n	8003ede <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0a6      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d115      	bne.n	8003ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e09a      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ebe:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e08e      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ece:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e086      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4943      	ldr	r1, [pc, #268]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fc fe3e 	bl	8000b70 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fc fe3a 	bl	8000b70 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e06e      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d208      	bcs.n	8003f4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	492b      	ldr	r1, [pc, #172]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d210      	bcs.n	8003f7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 0207 	bic.w	r2, r3, #7
 8003f64:	4923      	ldr	r1, [pc, #140]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e036      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4918      	ldr	r1, [pc, #96]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4910      	ldr	r1, [pc, #64]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fbc:	f000 f824 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	490b      	ldr	r1, [pc, #44]	; (8003ffc <HAL_RCC_ClockConfig+0x1f4>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1f8>)
 8003fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fdc:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1fc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fd75 	bl	8000ad0 <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fea:	7afb      	ldrb	r3, [r7, #11]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800c020 	.word	0x0800c020
 8004000:	20000000 	.word	0x20000000
 8004004:	20000004 	.word	0x20000004

08004008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	4b3e      	ldr	r3, [pc, #248]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x34>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d121      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d11e      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800403c:	4b34      	ldr	r3, [pc, #208]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004048:	4b31      	ldr	r3, [pc, #196]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 800404a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404e:	0a1b      	lsrs	r3, r3, #8
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e005      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004064:	4a2b      	ldr	r2, [pc, #172]	; (8004114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b04      	cmp	r3, #4
 800407e:	d102      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_RCC_GetSysClockFreq+0x110>)
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e004      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d101      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_RCC_GetSysClockFreq+0x114>)
 800408e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d134      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0xa6>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d003      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0xac>
 80040ac:	e005      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ae:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <HAL_RCC_GetSysClockFreq+0x110>)
 80040b0:	617b      	str	r3, [r7, #20]
      break;
 80040b2:	e005      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_GetSysClockFreq+0x114>)
 80040b6:	617b      	str	r3, [r7, #20]
      break;
 80040b8:	e002      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	617b      	str	r3, [r7, #20]
      break;
 80040be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	3301      	adds	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	fb03 f202 	mul.w	r2, r3, r2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	0e5b      	lsrs	r3, r3, #25
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	3301      	adds	r3, #1
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004100:	69bb      	ldr	r3, [r7, #24]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	0800c038 	.word	0x0800c038
 8004118:	00f42400 	.word	0x00f42400
 800411c:	00b71b00 	.word	0x00b71b00

08004120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCC_GetHCLKFreq+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000000 	.word	0x20000000

08004138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800413c:	f7ff fff0 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4904      	ldr	r1, [pc, #16]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	0800c030 	.word	0x0800c030

08004164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004168:	f7ff ffda 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	0adb      	lsrs	r3, r3, #11
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4904      	ldr	r1, [pc, #16]	; (800418c <HAL_RCC_GetPCLK2Freq+0x28>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	0800c030 	.word	0x0800c030

08004190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041a8:	f7ff f9de 	bl	8003568 <HAL_PWREx_GetVoltageRange>
 80041ac:	6178      	str	r0, [r7, #20]
 80041ae:	e014      	b.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6593      	str	r3, [r2, #88]	; 0x58
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041c8:	f7ff f9ce 	bl	8003568 <HAL_PWREx_GetVoltageRange>
 80041cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e0:	d10b      	bne.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d919      	bls.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2ba0      	cmp	r3, #160	; 0xa0
 80041ec:	d902      	bls.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ee:	2302      	movs	r3, #2
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e013      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f4:	2301      	movs	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e010      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d902      	bls.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004200:	2303      	movs	r3, #3
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e00a      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d102      	bne.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800420c:	2302      	movs	r3, #2
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e004      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b70      	cmp	r3, #112	; 0x70
 8004216:	d101      	bne.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004218:	2301      	movs	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 0207 	bic.w	r2, r3, #7
 8004224:	4909      	ldr	r1, [pc, #36]	; (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	40022000 	.word	0x40022000

08004250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004258:	2300      	movs	r3, #0
 800425a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800425c:	2300      	movs	r3, #0
 800425e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	2b00      	cmp	r3, #0
 800426a:	d041      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004274:	d02a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800427a:	d824      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800427c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004286:	d81e      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800428c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004290:	d010      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004292:	e018      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004294:	4b86      	ldr	r3, [pc, #536]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a85      	ldr	r2, [pc, #532]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f829 	bl	8005300 <RCCEx_PLLSAI1_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b2:	e00c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3320      	adds	r3, #32
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f914 	bl	80054e8 <RCCEx_PLLSAI2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	74fb      	strb	r3, [r7, #19]
      break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d4:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	4973      	ldr	r1, [pc, #460]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ea:	e001      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d041      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004304:	d02a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800430a:	d824      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800430c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004316:	d81e      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800431c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004320:	d010      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004322:	e018      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004324:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a61      	ldr	r2, [pc, #388]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004330:	e015      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f000 ffe1 	bl	8005300 <RCCEx_PLLSAI1_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004342:	e00c      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3320      	adds	r3, #32
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f8cc 	bl	80054e8 <RCCEx_PLLSAI2_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	74fb      	strb	r3, [r7, #19]
      break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800435c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004372:	494f      	ldr	r1, [pc, #316]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a0 	beq.w	80044ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a8:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	4a40      	ldr	r2, [pc, #256]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6593      	str	r3, [r2, #88]	; 0x58
 80043b4:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c0:	2301      	movs	r3, #1
 80043c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c4:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3a      	ldr	r2, [pc, #232]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d0:	f7fc fbce 	bl	8000b70 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d6:	e009      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d8:	f7fc fbca 	bl	8000b70 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d902      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ea:	e005      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ef      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d15c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043fe:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01f      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	d019      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d016      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fc fb89 	bl	8000b70 <HAL_GetTick>
 800445e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004460:	e00b      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fc fb85 	bl	8000b70 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d902      	bls.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	74fb      	strb	r3, [r7, #19]
            break;
 8004478:	e006      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ec      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044a6:	e009      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	74bb      	strb	r3, [r7, #18]
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044bc:	7c7b      	ldrb	r3, [r7, #17]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b9e      	ldr	r3, [pc, #632]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4a9d      	ldr	r2, [pc, #628]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044da:	4b98      	ldr	r3, [pc, #608]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f023 0203 	bic.w	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	4994      	ldr	r1, [pc, #592]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044fc:	4b8f      	ldr	r3, [pc, #572]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f023 020c 	bic.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	498c      	ldr	r1, [pc, #560]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800451e:	4b87      	ldr	r3, [pc, #540]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	4983      	ldr	r1, [pc, #524]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004540:	4b7e      	ldr	r3, [pc, #504]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	497b      	ldr	r1, [pc, #492]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004562:	4b76      	ldr	r3, [pc, #472]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004570:	4972      	ldr	r1, [pc, #456]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004584:	4b6d      	ldr	r3, [pc, #436]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	496a      	ldr	r1, [pc, #424]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045a6:	4b65      	ldr	r3, [pc, #404]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	4961      	ldr	r1, [pc, #388]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045c8:	4b5c      	ldr	r3, [pc, #368]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d6:	4959      	ldr	r1, [pc, #356]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ea:	4b54      	ldr	r3, [pc, #336]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	4950      	ldr	r1, [pc, #320]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	4948      	ldr	r1, [pc, #288]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800462e:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	493f      	ldr	r1, [pc, #252]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d028      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004650:	4b3a      	ldr	r3, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	4937      	ldr	r1, [pc, #220]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466e:	d106      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a31      	ldr	r2, [pc, #196]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467a:	60d3      	str	r3, [r2, #12]
 800467c:	e011      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004686:	d10c      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fe36 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d028      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ae:	4b23      	ldr	r3, [pc, #140]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	491f      	ldr	r1, [pc, #124]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046cc:	d106      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ce:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d8:	60d3      	str	r3, [r2, #12]
 80046da:	e011      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe07 	bl	8005300 <RCCEx_PLLSAI1_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	4908      	ldr	r1, [pc, #32]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472a:	d109      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a02      	ldr	r2, [pc, #8]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004736:	60d3      	str	r3, [r2, #12]
 8004738:	e014      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004748:	d10c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fdd5 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02f      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477e:	4928      	ldr	r1, [pc, #160]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478e:	d10d      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fdb2 	bl	8005300 <RCCEx_PLLSAI1_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d014      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	74bb      	strb	r3, [r7, #18]
 80047aa:	e011      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3320      	adds	r3, #32
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fe93 	bl	80054e8 <RCCEx_PLLSAI2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ea:	490d      	ldr	r1, [pc, #52]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480e:	4904      	ldr	r1, [pc, #16]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004816:	7cbb      	ldrb	r3, [r7, #18]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004836:	d13e      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004838:	4bb2      	ldr	r3, [pc, #712]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004842:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800484a:	d028      	beq.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004852:	f200 8542 	bhi.w	80052da <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d005      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004864:	d00e      	beq.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004866:	f000 bd38 	b.w	80052da <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800486a:	4ba6      	ldr	r3, [pc, #664]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	f040 8532 	bne.w	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800487a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487e:	61fb      	str	r3, [r7, #28]
      break;
 8004880:	f000 bd2d 	b.w	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004884:	4b9f      	ldr	r3, [pc, #636]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	f040 8527 	bne.w	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004894:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004898:	61fb      	str	r3, [r7, #28]
      break;
 800489a:	f000 bd22 	b.w	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800489e:	4b99      	ldr	r3, [pc, #612]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048aa:	f040 851c 	bne.w	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80048ae:	4b96      	ldr	r3, [pc, #600]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80048b0:	61fb      	str	r3, [r7, #28]
      break;
 80048b2:	f000 bd18 	b.w	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b6:	4b93      	ldr	r3, [pc, #588]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d036      	beq.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d840      	bhi.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d003      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d020      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80048d8:	e039      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80048da:	4b8a      	ldr	r3, [pc, #552]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d116      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80048e6:	4b87      	ldr	r3, [pc, #540]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80048f2:	4b84      	ldr	r3, [pc, #528]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	e005      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80048fe:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	4a80      	ldr	r2, [pc, #512]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004910:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004912:	e01f      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
      break;
 8004918:	e01c      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800491a:	4b7a      	ldr	r3, [pc, #488]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004926:	d102      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004928:	4b79      	ldr	r3, [pc, #484]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800492a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800492c:	e012      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
      break;
 8004932:	e00f      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004934:	4b73      	ldr	r3, [pc, #460]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004940:	d102      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004942:	4b74      	ldr	r3, [pc, #464]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004944:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004946:	e005      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
      break;
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
      break;
 8004952:	bf00      	nop
    }

    switch(PeriphClk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800495a:	f000 80dd 	beq.w	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004964:	f200 84c1 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800496e:	f000 80d3 	beq.w	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004978:	f200 84b7 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	f000 835f 	beq.w	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	f200 84ad 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004996:	f000 847e 	beq.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	f200 84a3 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	f000 82cd 	beq.w	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b4:	f200 8499 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049be:	f000 80ab 	beq.w	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	f200 848f 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	f000 8090 	beq.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	f200 8485 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e6:	d07f      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ee:	f200 847c 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f8:	f000 8403 	beq.w	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	f200 8472 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0c:	f000 83af 	beq.w	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a16:	f200 8468 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a20:	f000 8379 	beq.w	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2a:	f200 845e 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b80      	cmp	r3, #128	; 0x80
 8004a32:	f000 8344 	beq.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	f200 8456 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d84b      	bhi.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 844f 	beq.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	2b1f      	cmp	r3, #31
 8004a52:	f200 844a 	bhi.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004c45 	.word	0x08004c45
 8004a60:	08004cb3 	.word	0x08004cb3
 8004a64:	080052eb 	.word	0x080052eb
 8004a68:	08004d47 	.word	0x08004d47
 8004a6c:	080052eb 	.word	0x080052eb
 8004a70:	080052eb 	.word	0x080052eb
 8004a74:	080052eb 	.word	0x080052eb
 8004a78:	08004dcd 	.word	0x08004dcd
 8004a7c:	080052eb 	.word	0x080052eb
 8004a80:	080052eb 	.word	0x080052eb
 8004a84:	080052eb 	.word	0x080052eb
 8004a88:	080052eb 	.word	0x080052eb
 8004a8c:	080052eb 	.word	0x080052eb
 8004a90:	080052eb 	.word	0x080052eb
 8004a94:	080052eb 	.word	0x080052eb
 8004a98:	08004e45 	.word	0x08004e45
 8004a9c:	080052eb 	.word	0x080052eb
 8004aa0:	080052eb 	.word	0x080052eb
 8004aa4:	080052eb 	.word	0x080052eb
 8004aa8:	080052eb 	.word	0x080052eb
 8004aac:	080052eb 	.word	0x080052eb
 8004ab0:	080052eb 	.word	0x080052eb
 8004ab4:	080052eb 	.word	0x080052eb
 8004ab8:	080052eb 	.word	0x080052eb
 8004abc:	080052eb 	.word	0x080052eb
 8004ac0:	080052eb 	.word	0x080052eb
 8004ac4:	080052eb 	.word	0x080052eb
 8004ac8:	080052eb 	.word	0x080052eb
 8004acc:	080052eb 	.word	0x080052eb
 8004ad0:	080052eb 	.word	0x080052eb
 8004ad4:	080052eb 	.word	0x080052eb
 8004ad8:	08004ec7 	.word	0x08004ec7
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	f000 82c1 	beq.w	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004ae4:	f000 bc01 	b.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004ae8:	69b9      	ldr	r1, [r7, #24]
 8004aea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004aee:	f000 fdd9 	bl	80056a4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004af2:	61f8      	str	r0, [r7, #28]
      break;
 8004af4:	e3fa      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004af6:	69b9      	ldr	r1, [r7, #24]
 8004af8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004afc:	f000 fdd2 	bl	80056a4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004b00:	61f8      	str	r0, [r7, #28]
      break;
 8004b02:	e3f3      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	0005b8d8 	.word	0x0005b8d8
 8004b0c:	0800c038 	.word	0x0800c038
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004b18:	4ba9      	ldr	r3, [pc, #676]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b2a:	d00c      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b32:	d87f      	bhi.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b3a:	d04e      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b42:	d01d      	beq.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004b44:	e076      	b.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004b46:	4b9e      	ldr	r3, [pc, #632]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d172      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004b52:	4b9b      	ldr	r3, [pc, #620]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004b5e:	4b98      	ldr	r3, [pc, #608]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	e005      	b.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004b6a:	4b95      	ldr	r3, [pc, #596]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	4a93      	ldr	r2, [pc, #588]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	61fb      	str	r3, [r7, #28]
          break;
 8004b7e:	e05b      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004b80:	4b8f      	ldr	r3, [pc, #572]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8c:	d156      	bne.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004b8e:	4b8c      	ldr	r3, [pc, #560]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9a:	d14f      	bne.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b9c:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	fb03 f202 	mul.w	r2, r3, r2
 8004bb0:	4b83      	ldr	r3, [pc, #524]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	3301      	adds	r3, #1
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	0d5b      	lsrs	r3, r3, #21
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	61fb      	str	r3, [r7, #28]
          break;
 8004bd8:	e030      	b.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004bda:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be6:	d12b      	bne.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004be8:	4b75      	ldr	r3, [pc, #468]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf4:	d124      	bne.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004bf6:	4b72      	ldr	r3, [pc, #456]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c00:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	fb03 f202 	mul.w	r2, r3, r2
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	3301      	adds	r3, #1
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004c1c:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	0d5b      	lsrs	r3, r3, #21
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	3301      	adds	r3, #1
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	61fb      	str	r3, [r7, #28]
          break;
 8004c32:	e005      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004c34:	bf00      	nop
 8004c36:	e359      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c38:	bf00      	nop
 8004c3a:	e357      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c3c:	bf00      	nop
 8004c3e:	e355      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c40:	bf00      	nop
        break;
 8004c42:	e353      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004c44:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d827      	bhi.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c75 	.word	0x08004c75
 8004c64:	08004c7d 	.word	0x08004c7d
 8004c68:	08004c91 	.word	0x08004c91
          frequency = HAL_RCC_GetPCLK2Freq();
 8004c6c:	f7ff fa7a 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 8004c70:	61f8      	str	r0, [r7, #28]
          break;
 8004c72:	e01d      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c74:	f7ff f9c8 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004c78:	61f8      	str	r0, [r7, #28]
          break;
 8004c7a:	e019      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c7c:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c88:	d10f      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004c8c:	61fb      	str	r3, [r7, #28]
          break;
 8004c8e:	e00c      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c90:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d107      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca2:	61fb      	str	r3, [r7, #28]
          break;
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004ca6:	bf00      	nop
 8004ca8:	e320      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004caa:	bf00      	nop
 8004cac:	e31e      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cae:	bf00      	nop
        break;
 8004cb0:	e31c      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004cb2:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d83a      	bhi.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d3b 	.word	0x08004d3b
 8004cd4:	08004d3b 	.word	0x08004d3b
 8004cd8:	08004d3b 	.word	0x08004d3b
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d3b 	.word	0x08004d3b
 8004ce4:	08004d3b 	.word	0x08004d3b
 8004ce8:	08004d3b 	.word	0x08004d3b
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d3b 	.word	0x08004d3b
 8004cf4:	08004d3b 	.word	0x08004d3b
 8004cf8:	08004d3b 	.word	0x08004d3b
 8004cfc:	08004d25 	.word	0x08004d25
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7ff fa1a 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004d04:	61f8      	str	r0, [r7, #28]
          break;
 8004d06:	e01d      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d08:	f7ff f97e 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004d0c:	61f8      	str	r0, [r7, #28]
          break;
 8004d0e:	e019      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d10:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1c:	d10f      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004d20:	61fb      	str	r3, [r7, #28]
          break;
 8004d22:	e00c      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d24:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d107      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	61fb      	str	r3, [r7, #28]
          break;
 8004d38:	e003      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004d3a:	bf00      	nop
 8004d3c:	e2d6      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d3e:	bf00      	nop
 8004d40:	e2d4      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d42:	bf00      	nop
        break;
 8004d44:	e2d2      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d021      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b30      	cmp	r3, #48	; 0x30
 8004d5c:	d829      	bhi.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d011      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d823      	bhi.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d004      	beq.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004d76:	e01c      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d78:	f7ff f9de 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004d7c:	61f8      	str	r0, [r7, #28]
          break;
 8004d7e:	e01d      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d80:	f7ff f942 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004d84:	61f8      	str	r0, [r7, #28]
          break;
 8004d86:	e019      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d10f      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004d98:	61fb      	str	r3, [r7, #28]
          break;
 8004d9a:	e00c      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d9c:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d107      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dae:	61fb      	str	r3, [r7, #28]
          break;
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004db2:	bf00      	nop
 8004db4:	e29a      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004db6:	bf00      	nop
 8004db8:	e298      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dba:	bf00      	nop
        break;
 8004dbc:	e296      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	0800c038 	.word	0x0800c038
 8004dc8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004dcc:	4b9b      	ldr	r3, [pc, #620]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2bc0      	cmp	r3, #192	; 0xc0
 8004ddc:	d021      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2bc0      	cmp	r3, #192	; 0xc0
 8004de2:	d829      	bhi.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d011      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d823      	bhi.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d004      	beq.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004dfc:	e01c      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dfe:	f7ff f99b 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004e02:	61f8      	str	r0, [r7, #28]
          break;
 8004e04:	e01d      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e06:	f7ff f8ff 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004e0a:	61f8      	str	r0, [r7, #28]
          break;
 8004e0c:	e019      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e0e:	4b8b      	ldr	r3, [pc, #556]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1a:	d10f      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004e1c:	4b88      	ldr	r3, [pc, #544]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004e1e:	61fb      	str	r3, [r7, #28]
          break;
 8004e20:	e00c      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e22:	4b86      	ldr	r3, [pc, #536]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e34:	61fb      	str	r3, [r7, #28]
          break;
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004e38:	bf00      	nop
 8004e3a:	e257      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e3c:	bf00      	nop
 8004e3e:	e255      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e40:	bf00      	nop
        break;
 8004e42:	e253      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004e44:	4b7d      	ldr	r3, [pc, #500]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e56:	d025      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5e:	d82c      	bhi.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e66:	d013      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6e:	d824      	bhi.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7c:	d004      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004e7e:	e01c      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e80:	f7ff f95a 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004e84:	61f8      	str	r0, [r7, #28]
          break;
 8004e86:	e01d      	b.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e88:	f7ff f8be 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004e8c:	61f8      	str	r0, [r7, #28]
          break;
 8004e8e:	e019      	b.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9c:	d10f      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004e9e:	4b68      	ldr	r3, [pc, #416]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004ea0:	61fb      	str	r3, [r7, #28]
          break;
 8004ea2:	e00c      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ea4:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb6:	61fb      	str	r3, [r7, #28]
          break;
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004eba:	bf00      	nop
 8004ebc:	e216      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ebe:	bf00      	nop
 8004ec0:	e214      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ec2:	bf00      	nop
        break;
 8004ec4:	e212      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004ec6:	4b5d      	ldr	r3, [pc, #372]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed8:	d025      	beq.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee0:	d82c      	bhi.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee8:	d013      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	d824      	bhi.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efe:	d004      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004f00:	e01c      	b.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f02:	f7ff f919 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004f06:	61f8      	str	r0, [r7, #28]
          break;
 8004f08:	e01d      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f0a:	f7ff f87d 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004f0e:	61f8      	str	r0, [r7, #28]
          break;
 8004f10:	e019      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f12:	4b4a      	ldr	r3, [pc, #296]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d10f      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004f20:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004f22:	61fb      	str	r3, [r7, #28]
          break;
 8004f24:	e00c      	b.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f26:	4b45      	ldr	r3, [pc, #276]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d107      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f38:	61fb      	str	r3, [r7, #28]
          break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004f3c:	bf00      	nop
 8004f3e:	e1d5      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f40:	bf00      	nop
 8004f42:	e1d3      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f44:	bf00      	nop
        break;
 8004f46:	e1d1      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004f48:	4b3c      	ldr	r3, [pc, #240]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f5a:	d00c      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f62:	d864      	bhi.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d030      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004f74:	e05b      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f76:	f7ff f847 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004f7a:	61f8      	str	r0, [r7, #28]
          break;
 8004f7c:	e05c      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004f7e:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8a:	d152      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d04c      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	fb03 f202 	mul.w	r2, r3, r2
 8004fac:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	0e5b      	lsrs	r3, r3, #25
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	61fb      	str	r3, [r7, #28]
          break;
 8004fd4:	e02d      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004fd6:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe2:	d128      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d022      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	fb03 f202 	mul.w	r2, r3, r2
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	3301      	adds	r3, #1
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	0e5b      	lsrs	r3, r3, #25
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	3301      	adds	r3, #1
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	61fb      	str	r3, [r7, #28]
          break;
 800502c:	e003      	b.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800502e:	bf00      	nop
 8005030:	e15c      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005032:	bf00      	nop
 8005034:	e15a      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005036:	bf00      	nop
        break;
 8005038:	e158      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005044:	4b9d      	ldr	r3, [pc, #628]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800504e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005056:	f7ff f885 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 800505a:	61f8      	str	r0, [r7, #28]
        break;
 800505c:	e146      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe ffd3 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8005062:	61f8      	str	r0, [r7, #28]
        break;
 8005064:	e142      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005066:	4b95      	ldr	r3, [pc, #596]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	d013      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005080:	d819      	bhi.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508e:	d004      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005090:	e011      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005092:	f7ff f851 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8005096:	61f8      	str	r0, [r7, #28]
          break;
 8005098:	e010      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800509a:	f7fe ffb5 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 800509e:	61f8      	str	r0, [r7, #28]
          break;
 80050a0:	e00c      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050a2:	4b86      	ldr	r3, [pc, #536]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ae:	d104      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80050b0:	4b83      	ldr	r3, [pc, #524]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80050b2:	61fb      	str	r3, [r7, #28]
          break;
 80050b4:	e001      	b.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80050b6:	bf00      	nop
 80050b8:	e118      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050ba:	bf00      	nop
        break;
 80050bc:	e116      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80050be:	4b7f      	ldr	r3, [pc, #508]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	d013      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d819      	bhi.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e6:	d004      	beq.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80050e8:	e011      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050ea:	f7ff f825 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 80050ee:	61f8      	str	r0, [r7, #28]
          break;
 80050f0:	e010      	b.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80050f2:	f7fe ff89 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 80050f6:	61f8      	str	r0, [r7, #28]
          break;
 80050f8:	e00c      	b.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050fa:	4b70      	ldr	r3, [pc, #448]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005106:	d104      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005108:	4b6d      	ldr	r3, [pc, #436]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800510a:	61fb      	str	r3, [r7, #28]
          break;
 800510c:	e001      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800510e:	bf00      	nop
 8005110:	e0ec      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005112:	bf00      	nop
        break;
 8005114:	e0ea      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005116:	4b69      	ldr	r3, [pc, #420]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005128:	d013      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005130:	d819      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513e:	d004      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005140:	e011      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005142:	f7fe fff9 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8005146:	61f8      	str	r0, [r7, #28]
          break;
 8005148:	e010      	b.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800514a:	f7fe ff5d 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 800514e:	61f8      	str	r0, [r7, #28]
          break;
 8005150:	e00c      	b.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005152:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515e:	d104      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005160:	4b57      	ldr	r3, [pc, #348]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005162:	61fb      	str	r3, [r7, #28]
          break;
 8005164:	e001      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005166:	bf00      	nop
 8005168:	e0c0      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800516a:	bf00      	nop
        break;
 800516c:	e0be      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800516e:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005180:	d02c      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005188:	d833      	bhi.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005190:	d01a      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005198:	d82b      	bhi.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051a6:	d004      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80051a8:	e023      	b.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051aa:	f7fe ffc5 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 80051ae:	61f8      	str	r0, [r7, #28]
          break;
 80051b0:	e026      	b.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80051b2:	4b42      	ldr	r3, [pc, #264]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d11a      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80051c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80051c4:	61fb      	str	r3, [r7, #28]
          break;
 80051c6:	e016      	b.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051c8:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d111      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80051d6:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80051d8:	61fb      	str	r3, [r7, #28]
          break;
 80051da:	e00e      	b.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051dc:	4b37      	ldr	r3, [pc, #220]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d109      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	61fb      	str	r3, [r7, #28]
          break;
 80051f0:	e005      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80051f2:	bf00      	nop
 80051f4:	e07a      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051f6:	bf00      	nop
 80051f8:	e078      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051fa:	bf00      	nop
 80051fc:	e076      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051fe:	bf00      	nop
        break;
 8005200:	e074      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005202:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005214:	d02c      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800521c:	d833      	bhi.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005224:	d01a      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d82b      	bhi.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d004      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800523c:	e023      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800523e:	f7fe ff7b 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8005242:	61f8      	str	r0, [r7, #28]
          break;
 8005244:	e026      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d11a      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005254:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005258:	61fb      	str	r3, [r7, #28]
          break;
 800525a:	e016      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800525c:	4b17      	ldr	r3, [pc, #92]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005268:	d111      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800526c:	61fb      	str	r3, [r7, #28]
          break;
 800526e:	e00e      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005270:	4b12      	ldr	r3, [pc, #72]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d109      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61fb      	str	r3, [r7, #28]
          break;
 8005284:	e005      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005286:	bf00      	nop
 8005288:	e030      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800528a:	bf00      	nop
 800528c:	e02e      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800528e:	bf00      	nop
 8005290:	e02c      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005292:	bf00      	nop
        break;
 8005294:	e02a      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d009      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80052b0:	e012      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052b2:	f7fe ff41 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 80052b6:	61f8      	str	r0, [r7, #28]
          break;
 80052b8:	e00e      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
 80052c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80052d4:	61fb      	str	r3, [r7, #28]
          break;
 80052d6:	bf00      	nop
        break;
 80052d8:	e008      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80052da:	bf00      	nop
 80052dc:	e006      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80052de:	bf00      	nop
 80052e0:	e004      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80052e2:	bf00      	nop
 80052e4:	e002      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80052e6:	bf00      	nop
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80052ea:	bf00      	nop
    }
  }

  return(frequency);
 80052ec:	69fb      	ldr	r3, [r7, #28]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
 80052fc:	00f42400 	.word	0x00f42400

08005300 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800530e:	4b75      	ldr	r3, [pc, #468]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800531a:	4b72      	ldr	r3, [pc, #456]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d10d      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
       ||
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005332:	4b6c      	ldr	r3, [pc, #432]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
       ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d047      	beq.n	80053d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
 800534a:	e044      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d018      	beq.n	8005386 <RCCEx_PLLSAI1_Config+0x86>
 8005354:	2b03      	cmp	r3, #3
 8005356:	d825      	bhi.n	80053a4 <RCCEx_PLLSAI1_Config+0xa4>
 8005358:	2b01      	cmp	r3, #1
 800535a:	d002      	beq.n	8005362 <RCCEx_PLLSAI1_Config+0x62>
 800535c:	2b02      	cmp	r3, #2
 800535e:	d009      	beq.n	8005374 <RCCEx_PLLSAI1_Config+0x74>
 8005360:	e020      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005362:	4b60      	ldr	r3, [pc, #384]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11d      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005372:	e01a      	b.n	80053aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005374:	4b5b      	ldr	r3, [pc, #364]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005384:	e013      	b.n	80053ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005386:	4b57      	ldr	r3, [pc, #348]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053a2:	e006      	b.n	80053b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	e004      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6819      	ldr	r1, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	430b      	orrs	r3, r1
 80053d0:	4944      	ldr	r1, [pc, #272]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d17d      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053dc:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a40      	ldr	r2, [pc, #256]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7fb fbc2 	bl	8000b70 <HAL_GetTick>
 80053ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ee:	e009      	b.n	8005404 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f0:	f7fb fbbe 	bl	8000b70 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d902      	bls.n	8005404 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	73fb      	strb	r3, [r7, #15]
        break;
 8005402:	e005      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005404:	4b37      	ldr	r3, [pc, #220]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1ef      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d160      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	0211      	lsls	r1, r2, #8
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	0912      	lsrs	r2, r2, #4
 8005434:	0452      	lsls	r2, r2, #17
 8005436:	430a      	orrs	r2, r1
 8005438:	492a      	ldr	r1, [pc, #168]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
 800543e:	e027      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d112      	bne.n	800546c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005446:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800544e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	0211      	lsls	r1, r2, #8
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6912      	ldr	r2, [r2, #16]
 800545c:	0852      	lsrs	r2, r2, #1
 800545e:	3a01      	subs	r2, #1
 8005460:	0552      	lsls	r2, r2, #21
 8005462:	430a      	orrs	r2, r1
 8005464:	491f      	ldr	r1, [pc, #124]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005466:	4313      	orrs	r3, r2
 8005468:	610b      	str	r3, [r1, #16]
 800546a:	e011      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800546c:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	0211      	lsls	r1, r2, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6952      	ldr	r2, [r2, #20]
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	3a01      	subs	r2, #1
 8005486:	0652      	lsls	r2, r2, #25
 8005488:	430a      	orrs	r2, r1
 800548a:	4916      	ldr	r1, [pc, #88]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800549a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549c:	f7fb fb68 	bl	8000b70 <HAL_GetTick>
 80054a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a2:	e009      	b.n	80054b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054a4:	f7fb fb64 	bl	8000b70 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d902      	bls.n	80054b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	73fb      	strb	r3, [r7, #15]
          break;
 80054b6:	e005      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ef      	beq.n	80054a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	4904      	ldr	r1, [pc, #16]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000

080054e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f6:	4b6a      	ldr	r3, [pc, #424]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d018      	beq.n	8005534 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005502:	4b67      	ldr	r3, [pc, #412]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d10d      	bne.n	800552e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
       ||
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800551a:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
       ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d047      	beq.n	80055be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	e044      	b.n	80055be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d018      	beq.n	800556e <RCCEx_PLLSAI2_Config+0x86>
 800553c:	2b03      	cmp	r3, #3
 800553e:	d825      	bhi.n	800558c <RCCEx_PLLSAI2_Config+0xa4>
 8005540:	2b01      	cmp	r3, #1
 8005542:	d002      	beq.n	800554a <RCCEx_PLLSAI2_Config+0x62>
 8005544:	2b02      	cmp	r3, #2
 8005546:	d009      	beq.n	800555c <RCCEx_PLLSAI2_Config+0x74>
 8005548:	e020      	b.n	800558c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800554a:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11d      	bne.n	8005592 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555a:	e01a      	b.n	8005592 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800555c:	4b50      	ldr	r3, [pc, #320]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005564:	2b00      	cmp	r3, #0
 8005566:	d116      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556c:	e013      	b.n	8005596 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800556e:	4b4c      	ldr	r3, [pc, #304]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800557a:	4b49      	ldr	r3, [pc, #292]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800558a:	e006      	b.n	800559a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	e004      	b.n	800559c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800559a:	bf00      	nop
    }

    if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055a2:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	430b      	orrs	r3, r1
 80055b8:	4939      	ldr	r1, [pc, #228]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d167      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055c4:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d0:	f7fb face 	bl	8000b70 <HAL_GetTick>
 80055d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055d6:	e009      	b.n	80055ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055d8:	f7fb faca 	bl	8000b70 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d902      	bls.n	80055ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	73fb      	strb	r3, [r7, #15]
        break;
 80055ea:	e005      	b.n	80055f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ef      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d14a      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d111      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005604:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800560c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6892      	ldr	r2, [r2, #8]
 8005614:	0211      	lsls	r1, r2, #8
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68d2      	ldr	r2, [r2, #12]
 800561a:	0912      	lsrs	r2, r2, #4
 800561c:	0452      	lsls	r2, r2, #17
 800561e:	430a      	orrs	r2, r1
 8005620:	491f      	ldr	r1, [pc, #124]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005622:	4313      	orrs	r3, r2
 8005624:	614b      	str	r3, [r1, #20]
 8005626:	e011      	b.n	800564c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005630:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6892      	ldr	r2, [r2, #8]
 8005638:	0211      	lsls	r1, r2, #8
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6912      	ldr	r2, [r2, #16]
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	3a01      	subs	r2, #1
 8005642:	0652      	lsls	r2, r2, #25
 8005644:	430a      	orrs	r2, r1
 8005646:	4916      	ldr	r1, [pc, #88]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005648:	4313      	orrs	r3, r2
 800564a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fb fa8a 	bl	8000b70 <HAL_GetTick>
 800565c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565e:	e009      	b.n	8005674 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005660:	f7fb fa86 	bl	8000b70 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d902      	bls.n	8005674 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	73fb      	strb	r3, [r7, #15]
          break;
 8005672:	e005      	b.n	8005680 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ef      	beq.n	8005660 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4904      	ldr	r1, [pc, #16]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40021000 	.word	0x40021000

080056a4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	; 0x24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c0:	d10c      	bne.n	80056dc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056c2:	4b6e      	ldr	r3, [pc, #440]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80056cc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056d4:	d112      	bne.n	80056fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80056d6:	4b6a      	ldr	r3, [pc, #424]	; (8005880 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e00f      	b.n	80056fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d10b      	bne.n	80056fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80056e4:	4b65      	ldr	r3, [pc, #404]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80056ee:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056f6:	d101      	bne.n	80056fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80056f8:	4b61      	ldr	r3, [pc, #388]	; (8005880 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80056fa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 80b4 	bne.w	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800570e:	d003      	beq.n	8005718 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005716:	d135      	bne.n	8005784 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005718:	4b58      	ldr	r3, [pc, #352]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005724:	f040 80a1 	bne.w	800586a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005728:	4b54      	ldr	r3, [pc, #336]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 809a 	beq.w	800586a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005736:	4b51      	ldr	r3, [pc, #324]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	3301      	adds	r3, #1
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800574a:	4b4c      	ldr	r3, [pc, #304]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005754:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800575c:	4b47      	ldr	r3, [pc, #284]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005768:	2311      	movs	r3, #17
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e001      	b.n	8005772 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800576e:	2307      	movs	r3, #7
 8005770:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	fb03 f202 	mul.w	r2, r3, r2
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005782:	e072      	b.n	800586a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d133      	bne.n	80057f2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800578a:	4b3c      	ldr	r3, [pc, #240]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005796:	d169      	bne.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005798:	4b38      	ldr	r3, [pc, #224]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d063      	beq.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80057a4:	4b35      	ldr	r3, [pc, #212]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	3301      	adds	r3, #1
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80057b8:	4b30      	ldr	r3, [pc, #192]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80057d6:	2311      	movs	r3, #17
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e001      	b.n	80057e0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80057dc:	2307      	movs	r3, #7
 80057de:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	fb03 f202 	mul.w	r2, r3, r2
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	e03c      	b.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f8:	d003      	beq.n	8005802 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005800:	d134      	bne.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580e:	d12d      	bne.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005810:	4b1a      	ldr	r3, [pc, #104]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d027      	beq.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	3301      	adds	r3, #1
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005830:	4b12      	ldr	r3, [pc, #72]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800584e:	2311      	movs	r3, #17
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e001      	b.n	8005858 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005854:	2307      	movs	r3, #7
 8005856:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	fb03 f202 	mul.w	r2, r3, r2
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	e000      	b.n	800586c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800586a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800586c:	69fb      	ldr	r3, [r7, #28]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3724      	adds	r7, #36	; 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	001fff68 	.word	0x001fff68

08005884 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e022      	b.n	80058dc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d105      	bne.n	80058ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fa ff87 	bl	80007bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2203      	movs	r2, #3
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f814 	bl	80058e4 <HAL_SD_InitCard>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e00a      	b.n	80058dc <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005900:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005904:	f7fe ff8e 	bl	8004824 <HAL_RCCEx_GetPeriphCLKFreq>
 8005908:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e07b      	b.n	8005a1c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	09db      	lsrs	r3, r3, #7
 8005928:	4a3e      	ldr	r2, [pc, #248]	; (8005a24 <HAL_SD_InitCard+0x140>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	3b02      	subs	r3, #2
 8005932:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681d      	ldr	r5, [r3, #0]
 8005938:	466c      	mov	r4, sp
 800593a:	f107 0314 	add.w	r3, r7, #20
 800593e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800594c:	4628      	mov	r0, r5
 800594e:	f001 fac1 	bl	8006ed4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005960:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 faff 	bl	8006f6a <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3302      	adds	r3, #2
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005988:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <HAL_SD_InitCard+0x144>)
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	3301      	adds	r3, #1
 8005992:	4618      	mov	r0, r3
 8005994:	f7fb f8f8 	bl	8000b88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 ffdf 	bl	800695c <SD_PowerON>
 800599e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e02e      	b.n	8005a1c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fefe 	bl	80067c0 <SD_InitCard>
 80059c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e01b      	b.n	8005a1c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fb4f 	bl	8007090 <SDMMC_CmdBlockLength>
 80059f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <HAL_SD_InitCard+0x148>)
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3728      	adds	r7, #40	; 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bdb0      	pop	{r4, r5, r7, pc}
 8005a24:	014f8b59 	.word	0x014f8b59
 8005a28:	00012110 	.word	0x00012110
 8005a2c:	004005ff 	.word	0x004005ff

08005a30 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0a9      	b.n	8005bac <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 80a2 	bne.w	8005baa <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d907      	bls.n	8005a8a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e090      	b.n	8005bac <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	4a45      	ldr	r2, [pc, #276]	; (8005bb4 <HAL_SD_ReadBlocks_DMA+0x184>)
 8005aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	4a44      	ldr	r2, [pc, #272]	; (8005bb8 <HAL_SD_ReadBlocks_DMA+0x188>)
 8005aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2200      	movs	r2, #0
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3380      	adds	r3, #128	; 0x80
 8005abc:	4619      	mov	r1, r3
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	025b      	lsls	r3, r3, #9
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	f7fb fa4d 	bl	8000f64 <HAL_DMA_Start_IT>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00f      	beq.n	8005af0 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a39      	ldr	r2, [pc, #228]	; (8005bbc <HAL_SD_ReadBlocks_DMA+0x18c>)
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e05d      	b.n	8005bac <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d002      	beq.n	8005b0e <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	025b      	lsls	r3, r3, #9
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	025b      	lsls	r3, r3, #9
 8005b18:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b1a:	2390      	movs	r3, #144	; 0x90
 8005b1c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f107 0210 	add.w	r2, r7, #16
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fa7f 	bl	8007038 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d90a      	bls.n	8005b56 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2282      	movs	r2, #130	; 0x82
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fae3 	bl	8007118 <SDMMC_CmdReadMultiBlock>
 8005b52:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b54:	e009      	b.n	8005b6a <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2281      	movs	r2, #129	; 0x81
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fab6 	bl	80070d4 <SDMMC_CmdReadSingleBlock>
 8005b68:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d012      	beq.n	8005b96 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <HAL_SD_ReadBlocks_DMA+0x18c>)
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e00a      	b.n	8005bac <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3730      	adds	r7, #48	; 0x30
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	080065db 	.word	0x080065db
 8005bb8:	0800664d 	.word	0x0800664d
 8005bbc:	004005ff 	.word	0x004005ff

08005bc0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0ac      	b.n	8005d42 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 80a5 	bne.w	8005d40 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	441a      	add	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d907      	bls.n	8005c1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e093      	b.n	8005d42 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2200      	movs	r2, #0
 8005c28:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	4a47      	ldr	r2, [pc, #284]	; (8005d4c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8005c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	4a46      	ldr	r2, [pc, #280]	; (8005d50 <HAL_SD_WriteBlocks_DMA+0x190>)
 8005c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	2200      	movs	r2, #0
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d002      	beq.n	8005c50 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	025b      	lsls	r3, r3, #9
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d90a      	bls.n	8005c6c <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	22a0      	movs	r2, #160	; 0xa0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 fa9c 	bl	80071a0 <SDMMC_CmdWriteMultiBlock>
 8005c68:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005c6a:	e009      	b.n	8005c80 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2290      	movs	r2, #144	; 0x90
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 fa6f 	bl	800715c <SDMMC_CmdWriteSingleBlock>
 8005c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d012      	beq.n	8005cac <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a32      	ldr	r2, [pc, #200]	; (8005d54 <HAL_SD_WriteBlocks_DMA+0x194>)
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e04a      	b.n	8005d42 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0208 	orr.w	r2, r2, #8
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3380      	adds	r3, #128	; 0x80
 8005cc8:	461a      	mov	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	025b      	lsls	r3, r3, #9
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	f7fb f948 	bl	8000f64 <HAL_DMA_Start_IT>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d012      	beq.n	8005d00 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <HAL_SD_WriteBlocks_DMA+0x194>)
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e020      	b.n	8005d42 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	025b      	lsls	r3, r3, #9
 8005d0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d0c:	2390      	movs	r3, #144	; 0x90
 8005d0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f107 0210 	add.w	r2, r7, #16
 8005d24:	4611      	mov	r1, r2
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f986 	bl	8007038 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 021a 	orr.w	r2, r2, #26
 8005d3a:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3730      	adds	r7, #48	; 0x30
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080065b1 	.word	0x080065b1
 8005d50:	0800664d 	.word	0x0800664d
 8005d54:	004005ff 	.word	0x004005ff

08005d58 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_SD_IRQHandler+0x2e>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 f802 	bl	8006d88 <SD_Read_IT>
 8005d84:	e155      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 808f 	beq.w	8005eb4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005dae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005db2:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d039      	beq.n	8005e42 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <HAL_SD_IRQHandler+0x8a>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 f9fc 	bl	80071e4 <SDMMC_CmdStopTransfer>
 8005dec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f91f 	bl	8006044 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_SD_IRQHandler+0xda>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f003 f8c4 	bl	8008fc0 <HAL_SD_RxCpltCallback>
 8005e38:	e0fb      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f003 f8b6 	bl	8008fac <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005e40:	e0f7      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80f2 	beq.w	8006032 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d011      	beq.n	8005e7c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f9c1 	bl	80071e4 <SDMMC_CmdStopTransfer>
 8005e62:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f8e4 	bl	8006044 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 80d5 	bne.w	8006032 <HAL_SD_IRQHandler+0x2da>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 80cf 	bne.w	8006032 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0208 	bic.w	r2, r2, #8
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f003 f87d 	bl	8008fac <HAL_SD_TxCpltCallback>
}
 8005eb2:	e0be      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_SD_IRQHandler+0x17c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 ffac 	bl	8006e2a <SD_Write_IT>
 8005ed2:	e0ae      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a7 	beq.w	8006032 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	f043 0208 	orr.w	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	f043 0210 	orr.w	r2, r3, #16
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005f64:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 f93a 	bl	80071e4 <SDMMC_CmdStopTransfer>
 8005f70:	4602      	mov	r2, r0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f855 	bl	8006044 <HAL_SD_ErrorCallback>
}
 8005f9a:	e04a      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d045      	beq.n	8006032 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_SD_IRQHandler+0x262>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_SD_IRQHandler+0x2e4>)
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fb f82c 	bl	8001024 <HAL_DMA_Abort_IT>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d02f      	beq.n	8006032 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fb84 	bl	80066e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005fdc:	e029      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <HAL_SD_IRQHandler+0x29a>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d011      	beq.n	8006016 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4a12      	ldr	r2, [pc, #72]	; (8006040 <HAL_SD_IRQHandler+0x2e8>)
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fb f810 	bl	8001024 <HAL_DMA_Abort_IT>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fb9f 	bl	8006752 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006014:	e00d      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 ffb4 	bl	8008f98 <HAL_SD_AbortCallback>
}
 8006030:	e7ff      	b.n	8006032 <HAL_SD_IRQHandler+0x2da>
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	080066e5 	.word	0x080066e5
 8006040:	08006753 	.word	0x08006753

08006044 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006066:	0f9b      	lsrs	r3, r3, #30
 8006068:	b2da      	uxtb	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006072:	0e9b      	lsrs	r3, r3, #26
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	b2da      	uxtb	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006084:	0e1b      	lsrs	r3, r3, #24
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	b2da      	uxtb	r2, r3
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	b2da      	uxtb	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b8:	0d1b      	lsrs	r3, r3, #20
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d6:	0bdb      	lsrs	r3, r3, #15
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e8:	0b9b      	lsrs	r3, r3, #14
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fa:	0b5b      	lsrs	r3, r3, #13
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800610c:	0b1b      	lsrs	r3, r3, #12
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	b2da      	uxtb	r2, r3
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	2b00      	cmp	r3, #0
 8006126:	d163      	bne.n	80061f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800612c:	009a      	lsls	r2, r3, #2
 800612e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006132:	4013      	ands	r3, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006138:	0f92      	lsrs	r2, r2, #30
 800613a:	431a      	orrs	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006144:	0edb      	lsrs	r3, r3, #27
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	b2da      	uxtb	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006156:	0e1b      	lsrs	r3, r3, #24
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	b2da      	uxtb	r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006168:	0d5b      	lsrs	r3, r3, #21
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	b2da      	uxtb	r2, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617a:	0c9b      	lsrs	r3, r3, #18
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	b2da      	uxtb	r2, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618c:	0bdb      	lsrs	r3, r3, #15
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	b2da      	uxtb	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	7e1b      	ldrb	r3, [r3, #24]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	3302      	adds	r3, #2
 80061b0:	2201      	movs	r2, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061ba:	fb03 f202 	mul.w	r2, r3, r2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	7a1b      	ldrb	r3, [r3, #8]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	2201      	movs	r2, #1
 80061ce:	409a      	lsls	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80061dc:	0a52      	lsrs	r2, r2, #9
 80061de:	fb03 f202 	mul.w	r2, r3, r2
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ec:	661a      	str	r2, [r3, #96]	; 0x60
 80061ee:	e031      	b.n	8006254 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d11d      	bne.n	8006234 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	431a      	orrs	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	3301      	adds	r3, #1
 8006214:	029a      	lsls	r2, r3, #10
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006228:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	661a      	str	r2, [r3, #96]	; 0x60
 8006232:	e00f      	b.n	8006254 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a58      	ldr	r2, [pc, #352]	; (800639c <HAL_SD_GetCardCSD+0x344>)
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e09d      	b.n	8006390 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	0b9b      	lsrs	r3, r3, #14
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	b2da      	uxtb	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626a:	09db      	lsrs	r3, r3, #7
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006272:	b2da      	uxtb	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006282:	b2da      	uxtb	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	0fdb      	lsrs	r3, r3, #31
 800628e:	b2da      	uxtb	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006298:	0f5b      	lsrs	r3, r3, #29
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	0e9b      	lsrs	r3, r3, #26
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	0d9b      	lsrs	r3, r3, #22
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	0d5b      	lsrs	r3, r3, #21
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fe:	0bdb      	lsrs	r3, r3, #15
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	0b9b      	lsrs	r3, r3, #14
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	0b5b      	lsrs	r3, r3, #13
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	b2da      	uxtb	r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	0b1b      	lsrs	r3, r3, #12
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	0a9b      	lsrs	r3, r3, #10
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	b2da      	uxtb	r2, r3
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	b2da      	uxtb	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637e:	b2da      	uxtb	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	004005ff 	.word	0x004005ff

080063a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80063f8:	b5b0      	push	{r4, r5, r7, lr}
 80063fa:	b090      	sub	sp, #64	; 0x40
 80063fc:	af04      	add	r7, sp, #16
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2203      	movs	r2, #3
 800640c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	2b03      	cmp	r3, #3
 8006416:	d02e      	beq.n	8006476 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641e:	d106      	bne.n	800642e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
 800642c:	e029      	b.n	8006482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006434:	d10a      	bne.n	800644c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fb46 	bl	8006ac8 <SD_WideBus_Enable>
 800643c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
 800644a:	e01a      	b.n	8006482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb83 	bl	8006b5e <SD_WideBus_Disable>
 8006458:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
 8006466:	e00c      	b.n	8006482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
 8006474:	e005      	b.n	8006482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a35      	ldr	r2, [pc, #212]	; (8006564 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006498:	e042      	b.n	8006520 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800649a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800649e:	f7fe f9c1 	bl	8004824 <HAL_RCCEx_GetPeriphCLKFreq>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d031      	beq.n	800650e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	3302      	adds	r3, #2
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	4a25      	ldr	r2, [pc, #148]	; (8006568 <HAL_SD_ConfigWideBusOperation+0x170>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d907      	bls.n	80064e8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	4a24      	ldr	r2, [pc, #144]	; (800656c <HAL_SD_ConfigWideBusOperation+0x174>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	0ddb      	lsrs	r3, r3, #23
 80064e2:	3b02      	subs	r3, #2
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	e002      	b.n	80064ee <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681d      	ldr	r5, [r3, #0]
 80064f2:	466c      	mov	r4, sp
 80064f4:	f107 0318 	add.w	r3, r7, #24
 80064f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006506:	4628      	mov	r0, r5
 8006508:	f000 fce4 	bl	8006ed4 <SDMMC_Init>
 800650c:	e008      	b.n	8006520 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fdb1 	bl	8007090 <SDMMC_CmdBlockLength>
 800652e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00c      	beq.n	8006550 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	; 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bdb0      	pop	{r4, r5, r7, pc}
 8006564:	004005ff 	.word	0x004005ff
 8006568:	017d7840 	.word	0x017d7840
 800656c:	55e63b89 	.word	0x55e63b89

08006570 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800657c:	f107 030c 	add.w	r3, r7, #12
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa78 	bl	8006a78 <SD_SendStatus>
 8006588:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0a5b      	lsrs	r3, r3, #9
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80065a6:	693b      	ldr	r3, [r7, #16]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	2b82      	cmp	r3, #130	; 0x82
 80065ee:	d111      	bne.n	8006614 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fdf5 	bl	80071e4 <SDMMC_CmdStopTransfer>
 80065fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff fd18 	bl	8006044 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0208 	bic.w	r2, r2, #8
 8006622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f240 523a 	movw	r2, #1338	; 0x53a
 800662c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f002 fcbf 	bl	8008fc0 <HAL_SD_RxCpltCallback>
#endif
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d002      	beq.n	8006676 <SD_DMAError+0x2a>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d12d      	bne.n	80066d2 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <SD_DMAError+0x94>)
 800667c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800668c:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	f7ff ff68 	bl	8006570 <HAL_SD_GetCardState>
 80066a0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b06      	cmp	r3, #6
 80066a6:	d002      	beq.n	80066ae <SD_DMAError+0x62>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d10a      	bne.n	80066c4 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fd96 	bl	80071e4 <SDMMC_CmdStopTransfer>
 80066b8:	4602      	mov	r2, r0
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	431a      	orrs	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2200      	movs	r2, #0
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80066d2:	6978      	ldr	r0, [r7, #20]
 80066d4:	f7ff fcb6 	bl	8006044 <HAL_SD_ErrorCallback>
#endif
}
 80066d8:	bf00      	nop
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	004005ff 	.word	0x004005ff

080066e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff ff37 	bl	8006570 <HAL_SD_GetCardState>
 8006702:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b06      	cmp	r3, #6
 8006716:	d002      	beq.n	800671e <SD_DMATxAbort+0x3a>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b05      	cmp	r3, #5
 800671c:	d10a      	bne.n	8006734 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fd5e 	bl	80071e4 <SDMMC_CmdStopTransfer>
 8006728:	4602      	mov	r2, r0
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	431a      	orrs	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f002 fc2b 	bl	8008f98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006742:	e002      	b.n	800674a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff fc7d 	bl	8006044 <HAL_SD_ErrorCallback>
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f240 523a 	movw	r2, #1338	; 0x53a
 8006768:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff ff00 	bl	8006570 <HAL_SD_GetCardState>
 8006770:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b06      	cmp	r3, #6
 8006784:	d002      	beq.n	800678c <SD_DMARxAbort+0x3a>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b05      	cmp	r3, #5
 800678a:	d10a      	bne.n	80067a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fd27 	bl	80071e4 <SDMMC_CmdStopTransfer>
 8006796:	4602      	mov	r2, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	431a      	orrs	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f002 fbf4 	bl	8008f98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80067b0:	e002      	b.n	80067b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fc46 	bl	8006044 <HAL_SD_ErrorCallback>
}
 80067b8:	bf00      	nop
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067c0:	b5b0      	push	{r4, r5, r7, lr}
 80067c2:	b094      	sub	sp, #80	; 0x50
 80067c4:	af04      	add	r7, sp, #16
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80067c8:	2301      	movs	r3, #1
 80067ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fbd9 	bl	8006f88 <SDMMC_GetPowerState>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067e0:	e0b8      	b.n	8006954 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d02f      	beq.n	800684a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fe02 	bl	80073f8 <SDMMC_CmdSendCID>
 80067f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <SD_InitCard+0x40>
    {
      return errorstate;
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	e0a9      	b.n	8006954 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fc03 	bl	8007012 <SDMMC_GetResponse>
 800680c:	4602      	mov	r2, r0
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2104      	movs	r1, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fbfa 	bl	8007012 <SDMMC_GetResponse>
 800681e:	4602      	mov	r2, r0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2108      	movs	r1, #8
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fbf1 	bl	8007012 <SDMMC_GetResponse>
 8006830:	4602      	mov	r2, r0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	210c      	movs	r1, #12
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fbe8 	bl	8007012 <SDMMC_GetResponse>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	2b03      	cmp	r3, #3
 8006850:	d00d      	beq.n	800686e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f107 020e 	add.w	r2, r7, #14
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fe08 	bl	8007472 <SDMMC_CmdSetRelAdd>
 8006862:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <SD_InitCard+0xae>
    {
      return errorstate;
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	e072      	b.n	8006954 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	2b03      	cmp	r3, #3
 8006874:	d036      	beq.n	80068e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006876:	89fb      	ldrh	r3, [r7, #14]
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f000 fdd2 	bl	8007434 <SDMMC_CmdSendCSD>
 8006890:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	e05b      	b.n	8006954 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fbb5 	bl	8007012 <SDMMC_GetResponse>
 80068a8:	4602      	mov	r2, r0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2104      	movs	r1, #4
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fbac 	bl	8007012 <SDMMC_GetResponse>
 80068ba:	4602      	mov	r2, r0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2108      	movs	r1, #8
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fba3 	bl	8007012 <SDMMC_GetResponse>
 80068cc:	4602      	mov	r2, r0
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	210c      	movs	r1, #12
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fb9a 	bl	8007012 <SDMMC_GetResponse>
 80068de:	4602      	mov	r2, r0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2104      	movs	r1, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fb91 	bl	8007012 <SDMMC_GetResponse>
 80068f0:	4603      	mov	r3, r0
 80068f2:	0d1a      	lsrs	r2, r3, #20
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fbaa 	bl	8006058 <HAL_SD_GetCardCSD>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800690a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800690e:	e021      	b.n	8006954 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006918:	041b      	lsls	r3, r3, #16
 800691a:	2200      	movs	r2, #0
 800691c:	461c      	mov	r4, r3
 800691e:	4615      	mov	r5, r2
 8006920:	4622      	mov	r2, r4
 8006922:	462b      	mov	r3, r5
 8006924:	4608      	mov	r0, r1
 8006926:	f000 fc7f 	bl	8007228 <SDMMC_CmdSelDesel>
 800692a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <SD_InitCard+0x176>
  {
    return errorstate;
 8006932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006934:	e00e      	b.n	8006954 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681d      	ldr	r5, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	466c      	mov	r4, sp
 800693e:	f103 0210 	add.w	r2, r3, #16
 8006942:	ca07      	ldmia	r2, {r0, r1, r2}
 8006944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006948:	3304      	adds	r3, #4
 800694a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800694c:	4628      	mov	r0, r5
 800694e:	f000 fac1 	bl	8006ed4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3740      	adds	r7, #64	; 0x40
 8006958:	46bd      	mov	sp, r7
 800695a:	bdb0      	pop	{r4, r5, r7, pc}

0800695c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fc7a 	bl	800726e <SDMMC_CmdGoIdleState>
 800697a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	e072      	b.n	8006a6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fc8d 	bl	80072aa <SDMMC_CmdOperCond>
 8006990:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00d      	beq.n	80069b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fc63 	bl	800726e <SDMMC_CmdGoIdleState>
 80069a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	e05b      	b.n	8006a6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d137      	bne.n	8006a32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fc8d 	bl	80072e8 <SDMMC_CmdAppCommand>
 80069ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02d      	beq.n	8006a32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069da:	e047      	b.n	8006a6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2100      	movs	r1, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fc80 	bl	80072e8 <SDMMC_CmdAppCommand>
 80069e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	e03b      	b.n	8006a6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	491e      	ldr	r1, [pc, #120]	; (8006a74 <SD_PowerON+0x118>)
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fc96 	bl	800732c <SDMMC_CmdAppOperCommand>
 8006a00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a0c:	e02e      	b.n	8006a6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fafc 	bl	8007012 <SDMMC_GetResponse>
 8006a1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	0fdb      	lsrs	r3, r3, #31
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <SD_PowerON+0xcc>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <SD_PowerON+0xce>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]

    count++;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d802      	bhi.n	8006a42 <SD_PowerON+0xe6>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0cc      	beq.n	80069dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d902      	bls.n	8006a52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a50:	e00c      	b.n	8006a6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	645a      	str	r2, [r3, #68]	; 0x44
 8006a62:	e002      	b.n	8006a6a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	c1100000 	.word	0xc1100000

08006a78 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006a88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a8c:	e018      	b.n	8006ac0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f000 fd0a 	bl	80074b4 <SDMMC_CmdSendStatus>
 8006aa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <SD_SendStatus+0x34>
  {
    return errorstate;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	e009      	b.n	8006ac0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 faad 	bl	8007012 <SDMMC_GetResponse>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fa97 	bl	8007012 <SDMMC_GetResponse>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aee:	d102      	bne.n	8006af6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006af4:	e02f      	b.n	8006b56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006af6:	f107 030c 	add.w	r3, r7, #12
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f879 	bl	8006bf4 <SD_FindSCR>
 8006b02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	e023      	b.n	8006b56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01c      	beq.n	8006b52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f000 fbdf 	bl	80072e8 <SDMMC_CmdAppCommand>
 8006b2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	e00f      	b.n	8006b56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fc18 	bl	8007372 <SDMMC_CmdBusWidth>
 8006b42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	e003      	b.n	8006b56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e001      	b.n	8006b56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fa4c 	bl	8007012 <SDMMC_GetResponse>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b84:	d102      	bne.n	8006b8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b8a:	e02f      	b.n	8006bec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f82e 	bl	8006bf4 <SD_FindSCR>
 8006b98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	e023      	b.n	8006bec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01c      	beq.n	8006be8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f000 fb94 	bl	80072e8 <SDMMC_CmdAppCommand>
 8006bc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	e00f      	b.n	8006bec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fbcd 	bl	8007372 <SDMMC_CmdBusWidth>
 8006bd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e003      	b.n	8006bec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	e001      	b.n	8006bec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006be8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b08f      	sub	sp, #60	; 0x3c
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006bfe:	f7f9 ffb7 	bl	8000b70 <HAL_GetTick>
 8006c02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2108      	movs	r1, #8
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fa38 	bl	8007090 <SDMMC_CmdBlockLength>
 8006c20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	e0a9      	b.n	8006d80 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f000 fb55 	bl	80072e8 <SDMMC_CmdAppCommand>
 8006c3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	e09a      	b.n	8006d80 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006c50:	2308      	movs	r3, #8
 8006c52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006c54:	2330      	movs	r3, #48	; 0x30
 8006c56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f107 0210 	add.w	r2, r7, #16
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f9e2 	bl	8007038 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fb9c 	bl	80073b6 <SDMMC_CmdSendSCR>
 8006c7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d022      	beq.n	8006ccc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	e07a      	b.n	8006d80 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00e      	beq.n	8006cb6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6819      	ldr	r1, [r3, #0]
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	f107 0208 	add.w	r2, r7, #8
 8006ca4:	18d4      	adds	r4, r2, r3
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	f000 f941 	bl	8006f2e <SDMMC_ReadFIFO>
 8006cac:	4603      	mov	r3, r0
 8006cae:	6023      	str	r3, [r4, #0]
      index++;
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cb6:	f7f9 ff5b 	bl	8000b70 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006cc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cca:	e059      	b.n	8006d80 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd2:	f240 432a 	movw	r3, #1066	; 0x42a
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0d6      	beq.n	8006c8a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2208      	movs	r2, #8
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	e044      	b.n	8006d80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e037      	b.n	8006d80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2220      	movs	r2, #32
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006d26:	2320      	movs	r3, #32
 8006d28:	e02a      	b.n	8006d80 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	061a      	lsls	r2, r3, #24
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	601a      	str	r2, [r3, #0]
    scr++;
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	3304      	adds	r3, #4
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	061a      	lsls	r2, r3, #24
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	373c      	adds	r7, #60	; 0x3c
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd90      	pop	{r4, r7, pc}

08006d88 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d03f      	beq.n	8006e22 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e033      	b.n	8006e10 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 f8be 	bl	8006f2e <SDMMC_ReadFIFO>
 8006db2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	0e1b      	lsrs	r3, r3, #24
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b07      	cmp	r3, #7
 8006e14:	d9c8      	bls.n	8006da8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006e22:	bf00      	nop
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b086      	sub	sp, #24
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d043      	beq.n	8006ecc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e037      	b.n	8006eba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	021a      	lsls	r2, r3, #8
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	041a      	lsls	r2, r3, #16
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	061a      	lsls	r2, r3, #24
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f107 0208 	add.w	r2, r7, #8
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f84a 	bl	8006f48 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	d9c4      	bls.n	8006e4a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006ecc:	bf00      	nop
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	f107 001c 	add.w	r0, r7, #28
 8006ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8006ef2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8006ef6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006efa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006efe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006f02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	b004      	add	sp, #16
 8006f2c:	4770      	bx	lr

08006f2e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2203      	movs	r2, #3
 8006f76:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006f78:	2002      	movs	r0, #2
 8006f7a:	f7f9 fe05 	bl	8000b88 <HAL_Delay>

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0303 	and.w	r3, r3, #3
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006fc2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006fc8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006fce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006fde:	f023 030f 	bic.w	r3, r3, #15
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	b2db      	uxtb	r3, r3
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3314      	adds	r3, #20
 8007020:	461a      	mov	r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	4413      	add	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800705e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007064:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800706a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007082:	2300      	movs	r3, #0

}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800709e:	2310      	movs	r3, #16
 80070a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff ff74 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80070bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c0:	2110      	movs	r1, #16
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa18 	bl	80074f8 <SDMMC_GetCmdResp1>
 80070c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070ca:	69fb      	ldr	r3, [r7, #28]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3720      	adds	r7, #32
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80070e2:	2311      	movs	r3, #17
 80070e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070e6:	2340      	movs	r3, #64	; 0x40
 80070e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff52 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	2111      	movs	r1, #17
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9f6 	bl	80074f8 <SDMMC_GetCmdResp1>
 800710c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800710e:	69fb      	ldr	r3, [r7, #28]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007126:	2312      	movs	r3, #18
 8007128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff ff30 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007144:	f241 3288 	movw	r2, #5000	; 0x1388
 8007148:	2112      	movs	r1, #18
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9d4 	bl	80074f8 <SDMMC_GetCmdResp1>
 8007150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007152:	69fb      	ldr	r3, [r7, #28]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3720      	adds	r7, #32
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800716a:	2318      	movs	r3, #24
 800716c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800717c:	f107 0308 	add.w	r3, r7, #8
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ff0e 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007188:	f241 3288 	movw	r2, #5000	; 0x1388
 800718c:	2118      	movs	r1, #24
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9b2 	bl	80074f8 <SDMMC_GetCmdResp1>
 8007194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007196:	69fb      	ldr	r3, [r7, #28]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80071ae:	2319      	movs	r3, #25
 80071b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071c0:	f107 0308 	add.w	r3, r7, #8
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff feec 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80071cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d0:	2119      	movs	r1, #25
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f990 	bl	80074f8 <SDMMC_GetCmdResp1>
 80071d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071da:	69fb      	ldr	r3, [r7, #28]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80071f0:	230c      	movs	r3, #12
 80071f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071f4:	2340      	movs	r3, #64	; 0x40
 80071f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007200:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007202:	f107 0308 	add.w	r3, r7, #8
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff fecb 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800720e:	4a05      	ldr	r2, [pc, #20]	; (8007224 <SDMMC_CmdStopTransfer+0x40>)
 8007210:	210c      	movs	r1, #12
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f970 	bl	80074f8 <SDMMC_GetCmdResp1>
 8007218:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800721a:	69fb      	ldr	r3, [r7, #28]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	05f5e100 	.word	0x05f5e100

08007228 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007238:	2307      	movs	r3, #7
 800723a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007248:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800724a:	f107 0310 	add.w	r3, r7, #16
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff fea7 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007256:	f241 3288 	movw	r2, #5000	; 0x1388
 800725a:	2107      	movs	r1, #7
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f94b 	bl	80074f8 <SDMMC_GetCmdResp1>
 8007262:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007266:	4618      	mov	r0, r3
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b088      	sub	sp, #32
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800727e:	2300      	movs	r3, #0
 8007280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800728a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800728c:	f107 0308 	add.w	r3, r7, #8
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fe86 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb65 	bl	8007968 <SDMMC_GetCmdError>
 800729e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072a0:	69fb      	ldr	r3, [r7, #28]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b088      	sub	sp, #32
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80072b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80072b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80072b8:	2308      	movs	r3, #8
 80072ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fe67 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 faf8 	bl	80078cc <SDMMC_GetCmdResp7>
 80072dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072de:	69fb      	ldr	r3, [r7, #28]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3720      	adds	r7, #32
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80072f6:	2337      	movs	r3, #55	; 0x37
 80072f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fe48 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007314:	f241 3288 	movw	r2, #5000	; 0x1388
 8007318:	2137      	movs	r1, #55	; 0x37
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8ec 	bl	80074f8 <SDMMC_GetCmdResp1>
 8007320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800733c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007340:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007342:	2329      	movs	r3, #41	; 0x29
 8007344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800734e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007354:	f107 0308 	add.w	r3, r7, #8
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fe22 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9ff 	bl	8007764 <SDMMC_GetCmdResp3>
 8007366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007368:	69fb      	ldr	r3, [r7, #28]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b088      	sub	sp, #32
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007380:	2306      	movs	r3, #6
 8007382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800738c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007392:	f107 0308 	add.w	r3, r7, #8
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fe03 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800739e:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a2:	2106      	movs	r1, #6
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8a7 	bl	80074f8 <SDMMC_GetCmdResp1>
 80073aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ac:	69fb      	ldr	r3, [r7, #28]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80073c2:	2333      	movs	r3, #51	; 0x33
 80073c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073d4:	f107 0308 	add.w	r3, r7, #8
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fde2 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80073e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e4:	2133      	movs	r1, #51	; 0x33
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f886 	bl	80074f8 <SDMMC_GetCmdResp1>
 80073ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ee:	69fb      	ldr	r3, [r7, #28]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3720      	adds	r7, #32
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007404:	2302      	movs	r3, #2
 8007406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007408:	23c0      	movs	r3, #192	; 0xc0
 800740a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007416:	f107 0308 	add.w	r3, r7, #8
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fdc1 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f956 	bl	80076d4 <SDMMC_GetCmdResp2>
 8007428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800742a:	69fb      	ldr	r3, [r7, #28]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007442:	2309      	movs	r3, #9
 8007444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007446:	23c0      	movs	r3, #192	; 0xc0
 8007448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800744e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fda2 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f937 	bl	80076d4 <SDMMC_GetCmdResp2>
 8007466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007468:	69fb      	ldr	r3, [r7, #28]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b088      	sub	sp, #32
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007480:	2303      	movs	r3, #3
 8007482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800748c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007492:	f107 0308 	add.w	r3, r7, #8
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fd83 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	2103      	movs	r1, #3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f99c 	bl	80077e0 <SDMMC_GetCmdResp6>
 80074a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074aa:	69fb      	ldr	r3, [r7, #28]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3720      	adds	r7, #32
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80074c2:	230d      	movs	r3, #13
 80074c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074c6:	2340      	movs	r3, #64	; 0x40
 80074c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d4:	f107 0308 	add.w	r3, r7, #8
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff fd62 	bl	8006fa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80074e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e4:	210d      	movs	r1, #13
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f806 	bl	80074f8 <SDMMC_GetCmdResp1>
 80074ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074ee:	69fb      	ldr	r3, [r7, #28]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3720      	adds	r7, #32
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	460b      	mov	r3, r1
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007506:	4b70      	ldr	r3, [pc, #448]	; (80076c8 <SDMMC_GetCmdResp1+0x1d0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a70      	ldr	r2, [pc, #448]	; (80076cc <SDMMC_GetCmdResp1+0x1d4>)
 800750c:	fba2 2303 	umull	r2, r3, r2, r3
 8007510:	0a5a      	lsrs	r2, r3, #9
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	1e5a      	subs	r2, r3, #1
 800751e:	61fa      	str	r2, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007528:	e0c9      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ef      	beq.n	800751a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ea      	bne.n	800751a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2204      	movs	r2, #4
 8007554:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007556:	2304      	movs	r3, #4
 8007558:	e0b1      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800756c:	2301      	movs	r3, #1
 800756e:	e0a6      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	22c5      	movs	r2, #197	; 0xc5
 8007574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fd3e 	bl	8006ff8 <SDMMC_GetCommandResponse>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	4293      	cmp	r3, r2
 8007584:	d001      	beq.n	800758a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007586:	2301      	movs	r3, #1
 8007588:	e099      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800758a:	2100      	movs	r1, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fd40 	bl	8007012 <SDMMC_GetResponse>
 8007592:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4b4e      	ldr	r3, [pc, #312]	; (80076d0 <SDMMC_GetCmdResp1+0x1d8>)
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800759e:	2300      	movs	r3, #0
 80075a0:	e08d      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da02      	bge.n	80075ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80075a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ac:	e087      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	e080      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	e079      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80075d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075d8:	e071      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80075e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e8:	e069      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80075f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f8:	e061      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007608:	e059      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007618:	e051      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007628:	e049      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007638:	e041      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007648:	e039      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007658:	e031      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007668:	e029      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007678:	e021      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007688:	e019      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007698:	e011      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80076a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076a8:	e009      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80076b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80076b8:	e001      	b.n	80076be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000000 	.word	0x20000000
 80076cc:	10624dd3 	.word	0x10624dd3
 80076d0:	fdffe008 	.word	0xfdffe008

080076d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076dc:	4b1f      	ldr	r3, [pc, #124]	; (800775c <SDMMC_GetCmdResp2+0x88>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <SDMMC_GetCmdResp2+0x8c>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	0a5b      	lsrs	r3, r3, #9
 80076e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ec:	fb02 f303 	mul.w	r3, r2, r3
 80076f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	60fa      	str	r2, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007700:	e026      	b.n	8007750 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0ef      	beq.n	80076f2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ea      	bne.n	80076f2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800772e:	2304      	movs	r3, #4
 8007730:	e00e      	b.n	8007750 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007744:	2301      	movs	r3, #1
 8007746:	e003      	b.n	8007750 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	22c5      	movs	r2, #197	; 0xc5
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	20000000 	.word	0x20000000
 8007760:	10624dd3 	.word	0x10624dd3

08007764 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800776c:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <SDMMC_GetCmdResp3+0x74>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <SDMMC_GetCmdResp3+0x78>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	0a5b      	lsrs	r3, r3, #9
 8007778:	f241 3288 	movw	r2, #5000	; 0x1388
 800777c:	fb02 f303 	mul.w	r3, r2, r3
 8007780:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1e5a      	subs	r2, r3, #1
 8007786:	60fa      	str	r2, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800778c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007790:	e01b      	b.n	80077ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0ef      	beq.n	8007782 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ea      	bne.n	8007782 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2204      	movs	r2, #4
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077be:	2304      	movs	r3, #4
 80077c0:	e003      	b.n	80077ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	22c5      	movs	r2, #197	; 0xc5
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000000 	.word	0x20000000
 80077dc:	10624dd3 	.word	0x10624dd3

080077e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	460b      	mov	r3, r1
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077ee:	4b35      	ldr	r3, [pc, #212]	; (80078c4 <SDMMC_GetCmdResp6+0xe4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a35      	ldr	r2, [pc, #212]	; (80078c8 <SDMMC_GetCmdResp6+0xe8>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
 8007802:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	1e5a      	subs	r2, r3, #1
 8007808:	61fa      	str	r2, [r7, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800780e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007812:	e052      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0ef      	beq.n	8007804 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1ea      	bne.n	8007804 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2204      	movs	r2, #4
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007840:	2304      	movs	r3, #4
 8007842:	e03a      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007856:	2301      	movs	r3, #1
 8007858:	e02f      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff fbcc 	bl	8006ff8 <SDMMC_GetCommandResponse>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	4293      	cmp	r3, r2
 8007868:	d001      	beq.n	800786e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800786a:	2301      	movs	r3, #1
 800786c:	e025      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	22c5      	movs	r2, #197	; 0xc5
 8007872:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007874:	2100      	movs	r1, #0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff fbcb 	bl	8007012 <SDMMC_GetResponse>
 800787c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d106      	bne.n	8007896 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007892:	2300      	movs	r3, #0
 8007894:	e011      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078a4:	e009      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b4:	e001      	b.n	80078ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000000 	.word	0x20000000
 80078c8:	10624dd3 	.word	0x10624dd3

080078cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078d4:	4b22      	ldr	r3, [pc, #136]	; (8007960 <SDMMC_GetCmdResp7+0x94>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a22      	ldr	r2, [pc, #136]	; (8007964 <SDMMC_GetCmdResp7+0x98>)
 80078da:	fba2 2303 	umull	r2, r3, r2, r3
 80078de:	0a5b      	lsrs	r3, r3, #9
 80078e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e4:	fb02 f303 	mul.w	r3, r2, r3
 80078e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1e5a      	subs	r2, r3, #1
 80078ee:	60fa      	str	r2, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078f8:	e02c      	b.n	8007954 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0ef      	beq.n	80078ea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1ea      	bne.n	80078ea <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007926:	2304      	movs	r3, #4
 8007928:	e014      	b.n	8007954 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800793c:	2301      	movs	r3, #1
 800793e:	e009      	b.n	8007954 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2240      	movs	r2, #64	; 0x40
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007952:	2300      	movs	r3, #0

}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20000000 	.word	0x20000000
 8007964:	10624dd3 	.word	0x10624dd3

08007968 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <SDMMC_GetCmdError+0x50>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a11      	ldr	r2, [pc, #68]	; (80079bc <SDMMC_GetCmdError+0x54>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0a5b      	lsrs	r3, r3, #9
 800797c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007980:	fb02 f303 	mul.w	r3, r2, r3
 8007984:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	60fa      	str	r2, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007994:	e009      	b.n	80079aa <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f1      	beq.n	8007986 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	22c5      	movs	r2, #197	; 0xc5
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20000000 	.word	0x20000000
 80079bc:	10624dd3 	.word	0x10624dd3

080079c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079c0:	b084      	sub	sp, #16
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	f107 001c 	add.w	r0, r7, #28
 80079ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fa1c 	bl	8008e1c <USB_CoreReset>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80079e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38
 80079fa:	e005      	b.n	8007a08 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a14:	b004      	add	sp, #16
 8007a16:	4770      	bx	lr

08007a18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d165      	bne.n	8007af8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4a3e      	ldr	r2, [pc, #248]	; (8007b28 <USB_SetTurnaroundTime+0x110>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d906      	bls.n	8007a42 <USB_SetTurnaroundTime+0x2a>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4a3d      	ldr	r2, [pc, #244]	; (8007b2c <USB_SetTurnaroundTime+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d202      	bcs.n	8007a42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a3c:	230f      	movs	r3, #15
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e05c      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	4a39      	ldr	r2, [pc, #228]	; (8007b2c <USB_SetTurnaroundTime+0x114>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d306      	bcc.n	8007a58 <USB_SetTurnaroundTime+0x40>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <USB_SetTurnaroundTime+0x118>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d202      	bcs.n	8007a58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a52:	230e      	movs	r3, #14
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e051      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4a35      	ldr	r2, [pc, #212]	; (8007b30 <USB_SetTurnaroundTime+0x118>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d306      	bcc.n	8007a6e <USB_SetTurnaroundTime+0x56>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4a34      	ldr	r2, [pc, #208]	; (8007b34 <USB_SetTurnaroundTime+0x11c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d202      	bcs.n	8007a6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a68:	230d      	movs	r3, #13
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e046      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	4a30      	ldr	r2, [pc, #192]	; (8007b34 <USB_SetTurnaroundTime+0x11c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d306      	bcc.n	8007a84 <USB_SetTurnaroundTime+0x6c>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <USB_SetTurnaroundTime+0x120>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d802      	bhi.n	8007a84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a7e:	230c      	movs	r3, #12
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	e03b      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	4a2c      	ldr	r2, [pc, #176]	; (8007b38 <USB_SetTurnaroundTime+0x120>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d906      	bls.n	8007a9a <USB_SetTurnaroundTime+0x82>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4a2b      	ldr	r2, [pc, #172]	; (8007b3c <USB_SetTurnaroundTime+0x124>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d802      	bhi.n	8007a9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a94:	230b      	movs	r3, #11
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e030      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4a27      	ldr	r2, [pc, #156]	; (8007b3c <USB_SetTurnaroundTime+0x124>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d906      	bls.n	8007ab0 <USB_SetTurnaroundTime+0x98>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <USB_SetTurnaroundTime+0x128>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d802      	bhi.n	8007ab0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007aaa:	230a      	movs	r3, #10
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	e025      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4a23      	ldr	r2, [pc, #140]	; (8007b40 <USB_SetTurnaroundTime+0x128>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d906      	bls.n	8007ac6 <USB_SetTurnaroundTime+0xae>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <USB_SetTurnaroundTime+0x12c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d202      	bcs.n	8007ac6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ac0:	2309      	movs	r3, #9
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	e01a      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <USB_SetTurnaroundTime+0x12c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d306      	bcc.n	8007adc <USB_SetTurnaroundTime+0xc4>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <USB_SetTurnaroundTime+0x130>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d802      	bhi.n	8007adc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	e00f      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4a1a      	ldr	r2, [pc, #104]	; (8007b48 <USB_SetTurnaroundTime+0x130>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d906      	bls.n	8007af2 <USB_SetTurnaroundTime+0xda>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <USB_SetTurnaroundTime+0x134>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d202      	bcs.n	8007af2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007aec:	2307      	movs	r3, #7
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e004      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007af2:	2306      	movs	r3, #6
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e001      	b.n	8007afc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007af8:	2309      	movs	r3, #9
 8007afa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	029b      	lsls	r3, r3, #10
 8007b10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007b14:	431a      	orrs	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	00d8acbf 	.word	0x00d8acbf
 8007b2c:	00e4e1c0 	.word	0x00e4e1c0
 8007b30:	00f42400 	.word	0x00f42400
 8007b34:	01067380 	.word	0x01067380
 8007b38:	011a499f 	.word	0x011a499f
 8007b3c:	01312cff 	.word	0x01312cff
 8007b40:	014ca43f 	.word	0x014ca43f
 8007b44:	016e3600 	.word	0x016e3600
 8007b48:	01a6ab1f 	.word	0x01a6ab1f
 8007b4c:	01e84800 	.word	0x01e84800

08007b50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f043 0201 	orr.w	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f023 0201 	bic.w	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d115      	bne.n	8007be2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f7f8 ffe0 	bl	8000b88 <HAL_Delay>
      ms++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f8ab 	bl	8008d2a <USB_GetMode>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d01e      	beq.n	8007c18 <USB_SetCurrentMode+0x84>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b31      	cmp	r3, #49	; 0x31
 8007bde:	d9f0      	bls.n	8007bc2 <USB_SetCurrentMode+0x2e>
 8007be0:	e01a      	b.n	8007c18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d115      	bne.n	8007c14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	f7f8 ffc7 	bl	8000b88 <HAL_Delay>
      ms++;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 f892 	bl	8008d2a <USB_GetMode>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <USB_SetCurrentMode+0x84>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b31      	cmp	r3, #49	; 0x31
 8007c10:	d9f0      	bls.n	8007bf4 <USB_SetCurrentMode+0x60>
 8007c12:	e001      	b.n	8007c18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e005      	b.n	8007c24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b32      	cmp	r3, #50	; 0x32
 8007c1c:	d101      	bne.n	8007c22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b086      	sub	sp, #24
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c46:	2300      	movs	r3, #0
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	e009      	b.n	8007c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3340      	adds	r3, #64	; 0x40
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b0e      	cmp	r3, #14
 8007c64:	d9f2      	bls.n	8007c4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11c      	bne.n	8007ca6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c7a:	f043 0302 	orr.w	r3, r3, #2
 8007c7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e005      	b.n	8007cb2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007cbe:	2103      	movs	r1, #3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f959 	bl	8007f78 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cc6:	2110      	movs	r1, #16
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f8f1 	bl	8007eb0 <USB_FlushTxFifo>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f91d 	bl	8007f18 <USB_FlushRxFifo>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	461a      	mov	r2, r3
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	613b      	str	r3, [r7, #16]
 8007d10:	e043      	b.n	8007d9a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d28:	d118      	bne.n	8007d5c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	e013      	b.n	8007d6e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d52:	461a      	mov	r2, r3
 8007d54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	e008      	b.n	8007d6e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3301      	adds	r3, #1
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d3b7      	bcc.n	8007d12 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	e043      	b.n	8007e30 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dbe:	d118      	bne.n	8007df2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	e013      	b.n	8007e04 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	461a      	mov	r2, r3
 8007dea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	e008      	b.n	8007e04 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	461a      	mov	r2, r3
 8007e00:	2300      	movs	r3, #0
 8007e02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e10:	461a      	mov	r2, r3
 8007e12:	2300      	movs	r3, #0
 8007e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	461a      	mov	r2, r3
 8007e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	613b      	str	r3, [r7, #16]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d3b7      	bcc.n	8007da8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f043 0210 	orr.w	r2, r3, #16
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	4b10      	ldr	r3, [pc, #64]	; (8007eac <USB_DevInit+0x280>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	f043 0208 	orr.w	r2, r3, #8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d107      	bne.n	8007e9a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e92:	f043 0304 	orr.w	r3, r3, #4
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ea6:	b004      	add	sp, #16
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	803c3800 	.word	0x803c3800

08007eb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <USB_FlushTxFifo+0x64>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d901      	bls.n	8007ed0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e01b      	b.n	8007f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	daf2      	bge.n	8007ebe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	019b      	lsls	r3, r3, #6
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <USB_FlushTxFifo+0x64>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e006      	b.n	8007f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d0f0      	beq.n	8007ee8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	00030d40 	.word	0x00030d40

08007f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <USB_FlushRxFifo+0x5c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d901      	bls.n	8007f36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e018      	b.n	8007f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	daf2      	bge.n	8007f24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2210      	movs	r2, #16
 8007f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a08      	ldr	r2, [pc, #32]	; (8007f74 <USB_FlushRxFifo+0x5c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d901      	bls.n	8007f5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e006      	b.n	8007f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d0f0      	beq.n	8007f48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	00030d40 	.word	0x00030d40

08007f78 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b087      	sub	sp, #28
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 0306 	and.w	r3, r3, #6
 8007fc2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d002      	beq.n	8007fd0 <USB_GetDevSpeed+0x26>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	d102      	bne.n	8007fd6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	75fb      	strb	r3, [r7, #23]
 8007fd4:	e001      	b.n	8007fda <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007fd6:	230f      	movs	r3, #15
 8007fd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	371c      	adds	r7, #28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d13a      	bne.n	800807a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	69da      	ldr	r2, [r3, #28]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	2101      	movs	r1, #1
 8008016:	fa01 f303 	lsl.w	r3, r1, r3
 800801a:	b29b      	uxth	r3, r3
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008022:	4313      	orrs	r3, r2
 8008024:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d155      	bne.n	80080e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	791b      	ldrb	r3, [r3, #4]
 8008056:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008058:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	059b      	lsls	r3, r3, #22
 800805e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008060:	4313      	orrs	r3, r2
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	e036      	b.n	80080e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	69da      	ldr	r2, [r3, #28]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	2101      	movs	r1, #1
 800808c:	fa01 f303 	lsl.w	r3, r1, r3
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	68f9      	ldr	r1, [r7, #12]
 8008094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008098:	4313      	orrs	r3, r2
 800809a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d11a      	bne.n	80080e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080ce:	430b      	orrs	r3, r1
 80080d0:	4313      	orrs	r3, r2
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d161      	bne.n	80081d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800812a:	d11f      	bne.n	800816c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800814a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800816a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	2101      	movs	r1, #1
 800817e:	fa01 f303 	lsl.w	r3, r1, r3
 8008182:	b29b      	uxth	r3, r3
 8008184:	43db      	mvns	r3, r3
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800818c:	4013      	ands	r3, r2
 800818e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	2101      	movs	r1, #1
 80081a2:	fa01 f303 	lsl.w	r3, r1, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	43db      	mvns	r3, r3
 80081aa:	68f9      	ldr	r1, [r7, #12]
 80081ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b0:	4013      	ands	r3, r2
 80081b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	0159      	lsls	r1, r3, #5
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	440b      	add	r3, r1
 80081ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ce:	4619      	mov	r1, r3
 80081d0:	4b35      	ldr	r3, [pc, #212]	; (80082a8 <USB_DeactivateEndpoint+0x1b0>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]
 80081d6:	e060      	b.n	800829a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081ee:	d11f      	bne.n	8008230 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	440a      	add	r2, r1
 8008206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800820a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800820e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	440a      	add	r2, r1
 8008226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800822a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800822e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	2101      	movs	r1, #1
 8008242:	fa01 f303 	lsl.w	r3, r1, r3
 8008246:	041b      	lsls	r3, r3, #16
 8008248:	43db      	mvns	r3, r3
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008250:	4013      	ands	r3, r2
 8008252:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	2101      	movs	r1, #1
 8008266:	fa01 f303 	lsl.w	r3, r1, r3
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	43db      	mvns	r3, r3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008274:	4013      	ands	r3, r2
 8008276:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	0159      	lsls	r1, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	440b      	add	r3, r1
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	4619      	mov	r1, r3
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <USB_DeactivateEndpoint+0x1b4>)
 8008296:	4013      	ands	r3, r2
 8008298:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	ec337800 	.word	0xec337800
 80082ac:	eff37800 	.word	0xeff37800

080082b0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	f040 8128 	bne.w	800851e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d132      	bne.n	800833c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	440a      	add	r2, r1
 8008330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008334:	0cdb      	lsrs	r3, r3, #19
 8008336:	04db      	lsls	r3, r3, #19
 8008338:	6113      	str	r3, [r2, #16]
 800833a:	e092      	b.n	8008462 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008356:	0cdb      	lsrs	r3, r3, #19
 8008358:	04db      	lsls	r3, r3, #19
 800835a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800837a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800837e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d11a      	bne.n	80083bc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	d903      	bls.n	800839a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083b8:	6113      	str	r3, [r2, #16]
 80083ba:	e01b      	b.n	80083f4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6919      	ldr	r1, [r3, #16]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	440b      	add	r3, r1
 80083d4:	1e59      	subs	r1, r3, #1
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	fbb1 f3f3 	udiv	r3, r1, r3
 80083de:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083e0:	4b8d      	ldr	r3, [pc, #564]	; (8008618 <USB_EPStartXfer+0x368>)
 80083e2:	400b      	ands	r3, r1
 80083e4:	6939      	ldr	r1, [r7, #16]
 80083e6:	0148      	lsls	r0, r1, #5
 80083e8:	6979      	ldr	r1, [r7, #20]
 80083ea:	4401      	add	r1, r0
 80083ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083f0:	4313      	orrs	r3, r2
 80083f2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800840a:	6939      	ldr	r1, [r7, #16]
 800840c:	0148      	lsls	r0, r1, #5
 800840e:	6979      	ldr	r1, [r7, #20]
 8008410:	4401      	add	r1, r0
 8008412:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008416:	4313      	orrs	r3, r2
 8008418:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d11f      	bne.n	8008462 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	440a      	add	r2, r1
 8008438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008440:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800845c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008460:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008480:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	791b      	ldrb	r3, [r3, #4]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d015      	beq.n	80084b6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8139 	beq.w	8008706 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	2101      	movs	r1, #1
 80084a6:	fa01 f303 	lsl.w	r3, r1, r3
 80084aa:	6979      	ldr	r1, [r7, #20]
 80084ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084b0:	4313      	orrs	r3, r2
 80084b2:	634b      	str	r3, [r1, #52]	; 0x34
 80084b4:	e127      	b.n	8008706 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d110      	bne.n	80084e8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	e00f      	b.n	8008508 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008506:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68d9      	ldr	r1, [r3, #12]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	b29b      	uxth	r3, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9a6 	bl	8008868 <USB_WritePacket>
 800851c:	e0f3      	b.n	8008706 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	0151      	lsls	r1, r2, #5
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	440a      	add	r2, r1
 8008534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008538:	0cdb      	lsrs	r3, r3, #19
 800853a:	04db      	lsls	r3, r3, #19
 800853c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	440a      	add	r2, r1
 8008554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800855c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008560:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d12f      	bne.n	80085c8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008596:	6939      	ldr	r1, [r7, #16]
 8008598:	0148      	lsls	r0, r1, #5
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	4401      	add	r1, r0
 800859e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085a2:	4313      	orrs	r3, r2
 80085a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c4:	6113      	str	r3, [r2, #16]
 80085c6:	e061      	b.n	800868c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d125      	bne.n	800861c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e6:	6939      	ldr	r1, [r7, #16]
 80085e8:	0148      	lsls	r0, r1, #5
 80085ea:	6979      	ldr	r1, [r7, #20]
 80085ec:	4401      	add	r1, r0
 80085ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085f2:	4313      	orrs	r3, r2
 80085f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008614:	6113      	str	r3, [r2, #16]
 8008616:	e039      	b.n	800868c <USB_EPStartXfer+0x3dc>
 8008618:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	4413      	add	r3, r2
 8008626:	1e5a      	subs	r2, r3, #1
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008630:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	89fa      	ldrh	r2, [r7, #14]
 8008638:	fb03 f202 	mul.w	r2, r3, r2
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864c:	691a      	ldr	r2, [r3, #16]
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	04d9      	lsls	r1, r3, #19
 8008652:	4b2f      	ldr	r3, [pc, #188]	; (8008710 <USB_EPStartXfer+0x460>)
 8008654:	400b      	ands	r3, r1
 8008656:	6939      	ldr	r1, [r7, #16]
 8008658:	0148      	lsls	r0, r1, #5
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	4401      	add	r1, r0
 800865e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008662:	4313      	orrs	r3, r2
 8008664:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800867c:	6939      	ldr	r1, [r7, #16]
 800867e:	0148      	lsls	r0, r1, #5
 8008680:	6979      	ldr	r1, [r7, #20]
 8008682:	4401      	add	r1, r0
 8008684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008688:	4313      	orrs	r3, r2
 800868a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d128      	bne.n	80086e6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d110      	bne.n	80086c6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	e00f      	b.n	80086e6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008704:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	1ff80000 	.word	0x1ff80000

08008714 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d14a      	bne.n	80087c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800874a:	f040 8086 	bne.w	800885a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	440a      	add	r2, r1
 8008768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008770:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f242 7210 	movw	r2, #10000	; 0x2710
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d902      	bls.n	80087ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
          break;
 80087aa:	e056      	b.n	800885a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c4:	d0e7      	beq.n	8008796 <USB_EPStopXfer+0x82>
 80087c6:	e048      	b.n	800885a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e0:	d13b      	bne.n	800885a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008800:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008804:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	7812      	ldrb	r2, [r2, #0]
 800881a:	0151      	lsls	r1, r2, #5
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	440a      	add	r2, r1
 8008820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008828:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f242 7210 	movw	r2, #10000	; 0x2710
 8008836:	4293      	cmp	r3, r2
 8008838:	d902      	bls.n	8008840 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
          break;
 800883e:	e00c      	b.n	800885a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008858:	d0e7      	beq.n	800882a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	; 0x24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4611      	mov	r1, r2
 8008874:	461a      	mov	r2, r3
 8008876:	460b      	mov	r3, r1
 8008878:	71fb      	strb	r3, [r7, #7]
 800887a:	4613      	mov	r3, r2
 800887c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008886:	88bb      	ldrh	r3, [r7, #4]
 8008888:	3303      	adds	r3, #3
 800888a:	089b      	lsrs	r3, r3, #2
 800888c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	e018      	b.n	80088c6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	031a      	lsls	r2, r3, #12
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	4413      	add	r3, r2
 800889c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a0:	461a      	mov	r2, r3
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	3301      	adds	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	3301      	adds	r3, #1
 80088b2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	3301      	adds	r3, #1
 80088b8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	3301      	adds	r3, #1
 80088be:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	3301      	adds	r3, #1
 80088c4:	61bb      	str	r3, [r7, #24]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d3e2      	bcc.n	8008894 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3724      	adds	r7, #36	; 0x24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088dc:	b480      	push	{r7}
 80088de:	b08b      	sub	sp, #44	; 0x2c
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	089b      	lsrs	r3, r3, #2
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008902:	2300      	movs	r3, #0
 8008904:	623b      	str	r3, [r7, #32]
 8008906:	e014      	b.n	8008932 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	601a      	str	r2, [r3, #0]
    pDest++;
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	3301      	adds	r3, #1
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	3301      	adds	r3, #1
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	3301      	adds	r3, #1
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	3301      	adds	r3, #1
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	3301      	adds	r3, #1
 8008930:	623b      	str	r3, [r7, #32]
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	429a      	cmp	r2, r3
 8008938:	d3e6      	bcc.n	8008908 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800893a:	8bfb      	ldrh	r3, [r7, #30]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01e      	beq.n	800897e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894a:	461a      	mov	r2, r3
 800894c:	f107 0310 	add.w	r3, r7, #16
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	fa22 f303 	lsr.w	r3, r2, r3
 8008960:	b2da      	uxtb	r2, r3
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	701a      	strb	r2, [r3, #0]
      i++;
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	3301      	adds	r3, #1
 800896a:	623b      	str	r3, [r7, #32]
      pDest++;
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	3301      	adds	r3, #1
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008972:	8bfb      	ldrh	r3, [r7, #30]
 8008974:	3b01      	subs	r3, #1
 8008976:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008978:	8bfb      	ldrh	r3, [r7, #30]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1ea      	bne.n	8008954 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008980:	4618      	mov	r0, r3
 8008982:	372c      	adds	r7, #44	; 0x2c
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d12c      	bne.n	8008a02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	db12      	blt.n	80089e0 <USB_EPSetStall+0x54>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00f      	beq.n	80089e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	0151      	lsls	r1, r2, #5
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	440a      	add	r2, r1
 80089f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e02b      	b.n	8008a5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	db12      	blt.n	8008a3a <USB_EPSetStall+0xae>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00f      	beq.n	8008a3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d128      	bne.n	8008ad6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008aa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	791b      	ldrb	r3, [r3, #4]
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d003      	beq.n	8008ab4 <USB_EPClearStall+0x4c>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d138      	bne.n	8008b26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	e027      	b.n	8008b26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008af4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d003      	beq.n	8008b06 <USB_EPClearStall+0x9e>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	791b      	ldrb	r3, [r3, #4]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d10f      	bne.n	8008b26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bae:	f023 0302 	bic.w	r3, r3, #2
 8008bb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bdc:	f023 0303 	bic.w	r3, r3, #3
 8008be0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bf0:	f043 0302 	orr.w	r3, r3, #2
 8008bf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	0c1b      	lsrs	r3, r3, #16
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	b29b      	uxth	r3, r3
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b087      	sub	sp, #28
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	01db      	lsls	r3, r3, #7
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4013      	ands	r3, r2
 8008d1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f003 0301 	and.w	r3, r3, #1
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d64:	f023 0307 	bic.w	r3, r3, #7
 8008d68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	333c      	adds	r3, #60	; 0x3c
 8008d9e:	3304      	adds	r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <USB_EP0_OutStart+0x8c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d90a      	bls.n	8008dc2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dbc:	d101      	bne.n	8008dc2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e024      	b.n	8008e0c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df0:	f043 0318 	orr.w	r3, r3, #24
 8008df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e08:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	4f54300a 	.word	0x4f54300a

08008e1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <USB_CoreReset+0x64>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d901      	bls.n	8008e3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e01b      	b.n	8008e72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	daf2      	bge.n	8008e28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <USB_CoreReset+0x64>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d901      	bls.n	8008e64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e006      	b.n	8008e72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d0f0      	beq.n	8008e52 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	00030d40 	.word	0x00030d40

08008e84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008e88:	4904      	ldr	r1, [pc, #16]	; (8008e9c <MX_FATFS_Init+0x18>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <MX_FATFS_Init+0x1c>)
 8008e8c:	f002 fa52 	bl	800b334 <FATFS_LinkDriver>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <MX_FATFS_Init+0x20>)
 8008e96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20000298 	.word	0x20000298
 8008ea0:	0800c068 	.word	0x0800c068
 8008ea4:	20000294 	.word	0x20000294

08008ea8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008eb2:	f000 f896 	bl	8008fe2 <BSP_SD_IsDetected>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d001      	beq.n	8008ec0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e012      	b.n	8008ee6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008ec0:	480b      	ldr	r0, [pc, #44]	; (8008ef0 <BSP_SD_Init+0x48>)
 8008ec2:	f7fc fcdf 	bl	8005884 <HAL_SD_Init>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ed4:	4806      	ldr	r0, [pc, #24]	; (8008ef0 <BSP_SD_Init+0x48>)
 8008ed6:	f7fd fa8f 	bl	80063f8 <HAL_SD_ConfigWideBusOperation>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000017c 	.word	0x2000017c

08008ef4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	68f9      	ldr	r1, [r7, #12]
 8008f0a:	4806      	ldr	r0, [pc, #24]	; (8008f24 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008f0c:	f7fc fd90 	bl	8005a30 <HAL_SD_ReadBlocks_DMA>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	2000017c 	.word	0x2000017c

08008f28 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	68f9      	ldr	r1, [r7, #12]
 8008f3e:	4806      	ldr	r0, [pc, #24]	; (8008f58 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008f40:	f7fc fe3e 	bl	8005bc0 <HAL_SD_WriteBlocks_DMA>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	2000017c 	.word	0x2000017c

08008f5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008f60:	4805      	ldr	r0, [pc, #20]	; (8008f78 <BSP_SD_GetCardState+0x1c>)
 8008f62:	f7fd fb05 	bl	8006570 <HAL_SD_GetCardState>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	bf14      	ite	ne
 8008f6c:	2301      	movne	r3, #1
 8008f6e:	2300      	moveq	r3, #0
 8008f70:	b2db      	uxtb	r3, r3
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	2000017c 	.word	0x2000017c

08008f7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4803      	ldr	r0, [pc, #12]	; (8008f94 <BSP_SD_GetCardInfo+0x18>)
 8008f88:	f7fd fa0a 	bl	80063a0 <HAL_SD_GetCardInfo>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	2000017c 	.word	0x2000017c

08008f98 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008fa0:	f000 f818 	bl	8008fd4 <BSP_SD_AbortCallback>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008fb4:	f000 f9a8 	bl	8009308 <BSP_SD_WriteCpltCallback>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008fc8:	f000 f9aa 	bl	8009320 <BSP_SD_ReadCpltCallback>
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0

}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008fec:	f000 f80c 	bl	8009008 <BSP_PlatformIsDetected>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	b2db      	uxtb	r3, r3
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800900e:	2301      	movs	r3, #1
 8009010:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009012:	2180      	movs	r1, #128	; 0x80
 8009014:	4806      	ldr	r0, [pc, #24]	; (8009030 <BSP_PlatformIsDetected+0x28>)
 8009016:	f7f8 facf 	bl	80015b8 <HAL_GPIO_ReadPin>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009020:	2300      	movs	r3, #0
 8009022:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009024:	79fb      	ldrb	r3, [r7, #7]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	48000800 	.word	0x48000800

08009034 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800903c:	f7f7 fd98 	bl	8000b70 <HAL_GetTick>
 8009040:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009042:	e006      	b.n	8009052 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009044:	f7ff ff8a 	bl	8008f5c <BSP_SD_GetCardState>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800904e:	2300      	movs	r3, #0
 8009050:	e009      	b.n	8009066 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009052:	f7f7 fd8d 	bl	8000b70 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	429a      	cmp	r2, r3
 8009060:	d8f0      	bhi.n	8009044 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <SD_CheckStatus+0x38>)
 800907c:	2201      	movs	r2, #1
 800907e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009080:	f7ff ff6c 	bl	8008f5c <BSP_SD_GetCardState>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <SD_CheckStatus+0x38>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	f023 0301 	bic.w	r3, r3, #1
 8009094:	b2da      	uxtb	r2, r3
 8009096:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <SD_CheckStatus+0x38>)
 8009098:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800909a:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <SD_CheckStatus+0x38>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b2db      	uxtb	r3, r3
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20000009 	.word	0x20000009

080090ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80090b6:	f7ff fef7 	bl	8008ea8 <BSP_SD_Init>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d107      	bne.n	80090d0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff ffd4 	bl	8009070 <SD_CheckStatus>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <SD_initialize+0x34>)
 80090ce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80090d0:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <SD_initialize+0x34>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	b2db      	uxtb	r3, r3
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000009 	.word	0x20000009

080090e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff ffbd 	bl	8009070 <SD_CheckStatus>
 80090f6:	4603      	mov	r3, r0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009114:	f247 5030 	movw	r0, #30000	; 0x7530
 8009118:	f7ff ff8c 	bl	8009034 <SD_CheckStatusWithTimeout>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	da01      	bge.n	8009126 <SD_read+0x26>
  {
    return res;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	e03b      	b.n	800919e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	68b8      	ldr	r0, [r7, #8]
 800912c:	f7ff fee2 	bl	8008ef4 <BSP_SD_ReadBlocks_DMA>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d132      	bne.n	800919c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009136:	4b1c      	ldr	r3, [pc, #112]	; (80091a8 <SD_read+0xa8>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800913c:	f7f7 fd18 	bl	8000b70 <HAL_GetTick>
 8009140:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009142:	bf00      	nop
 8009144:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <SD_read+0xa8>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d108      	bne.n	800915e <SD_read+0x5e>
 800914c:	f7f7 fd10 	bl	8000b70 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	f247 522f 	movw	r2, #29999	; 0x752f
 800915a:	4293      	cmp	r3, r2
 800915c:	d9f2      	bls.n	8009144 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800915e:	4b12      	ldr	r3, [pc, #72]	; (80091a8 <SD_read+0xa8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
 800916a:	e017      	b.n	800919c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <SD_read+0xa8>)
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009172:	f7f7 fcfd 	bl	8000b70 <HAL_GetTick>
 8009176:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009178:	e007      	b.n	800918a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800917a:	f7ff feef 	bl	8008f5c <BSP_SD_GetCardState>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <SD_read+0x8a>
          {
            res = RES_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009188:	e008      	b.n	800919c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800918a:	f7f7 fcf1 	bl	8000b70 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	f247 522f 	movw	r2, #29999	; 0x752f
 8009198:	4293      	cmp	r3, r2
 800919a:	d9ee      	bls.n	800917a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200002a0 	.word	0x200002a0

080091ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80091c0:	4b24      	ldr	r3, [pc, #144]	; (8009254 <SD_write+0xa8>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80091c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80091ca:	f7ff ff33 	bl	8009034 <SD_CheckStatusWithTimeout>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	da01      	bge.n	80091d8 <SD_write+0x2c>
  {
    return res;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	e038      	b.n	800924a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68b8      	ldr	r0, [r7, #8]
 80091de:	f7ff fea3 	bl	8008f28 <BSP_SD_WriteBlocks_DMA>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d12f      	bne.n	8009248 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80091e8:	f7f7 fcc2 	bl	8000b70 <HAL_GetTick>
 80091ec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80091ee:	bf00      	nop
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <SD_write+0xa8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <SD_write+0x5e>
 80091f8:	f7f7 fcba 	bl	8000b70 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f247 522f 	movw	r2, #29999	; 0x752f
 8009206:	4293      	cmp	r3, r2
 8009208:	d9f2      	bls.n	80091f0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <SD_write+0xa8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
 8009216:	e017      	b.n	8009248 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009218:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <SD_write+0xa8>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800921e:	f7f7 fca7 	bl	8000b70 <HAL_GetTick>
 8009222:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009224:	e007      	b.n	8009236 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009226:	f7ff fe99 	bl	8008f5c <BSP_SD_GetCardState>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <SD_write+0x8a>
          {
            res = RES_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	75fb      	strb	r3, [r7, #23]
            break;
 8009234:	e008      	b.n	8009248 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009236:	f7f7 fc9b 	bl	8000b70 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	f247 522f 	movw	r2, #29999	; 0x752f
 8009244:	4293      	cmp	r3, r2
 8009246:	d9ee      	bls.n	8009226 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	2000029c 	.word	0x2000029c

08009258 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08c      	sub	sp, #48	; 0x30
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	603a      	str	r2, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
 8009264:	460b      	mov	r3, r1
 8009266:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800926e:	4b25      	ldr	r3, [pc, #148]	; (8009304 <SD_ioctl+0xac>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <SD_ioctl+0x28>
 800927c:	2303      	movs	r3, #3
 800927e:	e03c      	b.n	80092fa <SD_ioctl+0xa2>

  switch (cmd)
 8009280:	79bb      	ldrb	r3, [r7, #6]
 8009282:	2b03      	cmp	r3, #3
 8009284:	d834      	bhi.n	80092f0 <SD_ioctl+0x98>
 8009286:	a201      	add	r2, pc, #4	; (adr r2, 800928c <SD_ioctl+0x34>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	0800929d 	.word	0x0800929d
 8009290:	080092a5 	.word	0x080092a5
 8009294:	080092bd 	.word	0x080092bd
 8009298:	080092d7 	.word	0x080092d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092a2:	e028      	b.n	80092f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80092a4:	f107 030c 	add.w	r3, r7, #12
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff fe67 	bl	8008f7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80092ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092ba:	e01c      	b.n	80092f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fe5b 	bl	8008f7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092d4:	e00f      	b.n	80092f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fe4e 	bl	8008f7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	0a5a      	lsrs	r2, r3, #9
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092ee:	e002      	b.n	80092f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80092f0:	2304      	movs	r3, #4
 80092f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80092f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3730      	adds	r7, #48	; 0x30
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000009 	.word	0x20000009

08009308 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009308:	b480      	push	{r7}
 800930a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800930c:	4b03      	ldr	r3, [pc, #12]	; (800931c <BSP_SD_WriteCpltCallback+0x14>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]
}
 8009312:	bf00      	nop
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	2000029c 	.word	0x2000029c

08009320 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009324:	4b03      	ldr	r3, [pc, #12]	; (8009334 <BSP_SD_ReadCpltCallback+0x14>)
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]
}
 800932a:	bf00      	nop
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	200002a0 	.word	0x200002a0

08009338 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009344:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009348:	f002 fdf0 	bl	800bf2c <USBD_static_malloc>
 800934c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d109      	bne.n	8009368 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32b0      	adds	r2, #176	; 0xb0
 800935e:	2100      	movs	r1, #0
 8009360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009364:	2302      	movs	r3, #2
 8009366:	e0d4      	b.n	8009512 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009368:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800936c:	2100      	movs	r1, #0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f002 fdfa 	bl	800bf68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32b0      	adds	r2, #176	; 0xb0
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	32b0      	adds	r2, #176	; 0xb0
 800938e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7c1b      	ldrb	r3, [r3, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d138      	bne.n	8009412 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093a0:	4b5e      	ldr	r3, [pc, #376]	; (800951c <USBD_CDC_Init+0x1e4>)
 80093a2:	7819      	ldrb	r1, [r3, #0]
 80093a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a8:	2202      	movs	r2, #2
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f002 fbaa 	bl	800bb04 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093b0:	4b5a      	ldr	r3, [pc, #360]	; (800951c <USBD_CDC_Init+0x1e4>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	f003 020f 	and.w	r2, r3, #15
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	3324      	adds	r3, #36	; 0x24
 80093c6:	2201      	movs	r2, #1
 80093c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093ca:	4b55      	ldr	r3, [pc, #340]	; (8009520 <USBD_CDC_Init+0x1e8>)
 80093cc:	7819      	ldrb	r1, [r3, #0]
 80093ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093d2:	2202      	movs	r2, #2
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f002 fb95 	bl	800bb04 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093da:	4b51      	ldr	r3, [pc, #324]	; (8009520 <USBD_CDC_Init+0x1e8>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f003 020f 	and.w	r2, r3, #15
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	440b      	add	r3, r1
 80093ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093f2:	2201      	movs	r2, #1
 80093f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80093f6:	4b4b      	ldr	r3, [pc, #300]	; (8009524 <USBD_CDC_Init+0x1ec>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	f003 020f 	and.w	r2, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	3326      	adds	r3, #38	; 0x26
 800940c:	2210      	movs	r2, #16
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e035      	b.n	800947e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009412:	4b42      	ldr	r3, [pc, #264]	; (800951c <USBD_CDC_Init+0x1e4>)
 8009414:	7819      	ldrb	r1, [r3, #0]
 8009416:	2340      	movs	r3, #64	; 0x40
 8009418:	2202      	movs	r2, #2
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f002 fb72 	bl	800bb04 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009420:	4b3e      	ldr	r3, [pc, #248]	; (800951c <USBD_CDC_Init+0x1e4>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 020f 	and.w	r2, r3, #15
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2201      	movs	r2, #1
 8009438:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800943a:	4b39      	ldr	r3, [pc, #228]	; (8009520 <USBD_CDC_Init+0x1e8>)
 800943c:	7819      	ldrb	r1, [r3, #0]
 800943e:	2340      	movs	r3, #64	; 0x40
 8009440:	2202      	movs	r2, #2
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f002 fb5e 	bl	800bb04 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009448:	4b35      	ldr	r3, [pc, #212]	; (8009520 <USBD_CDC_Init+0x1e8>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009460:	2201      	movs	r2, #1
 8009462:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009464:	4b2f      	ldr	r3, [pc, #188]	; (8009524 <USBD_CDC_Init+0x1ec>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 020f 	and.w	r2, r3, #15
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	3326      	adds	r3, #38	; 0x26
 800947a:	2210      	movs	r2, #16
 800947c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800947e:	4b29      	ldr	r3, [pc, #164]	; (8009524 <USBD_CDC_Init+0x1ec>)
 8009480:	7819      	ldrb	r1, [r3, #0]
 8009482:	2308      	movs	r3, #8
 8009484:	2203      	movs	r2, #3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f002 fb3c 	bl	800bb04 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800948c:	4b25      	ldr	r3, [pc, #148]	; (8009524 <USBD_CDC_Init+0x1ec>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	3324      	adds	r3, #36	; 0x24
 80094a2:	2201      	movs	r2, #1
 80094a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	33b0      	adds	r3, #176	; 0xb0
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80094dc:	2302      	movs	r3, #2
 80094de:	e018      	b.n	8009512 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	7c1b      	ldrb	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094e8:	4b0d      	ldr	r3, [pc, #52]	; (8009520 <USBD_CDC_Init+0x1e8>)
 80094ea:	7819      	ldrb	r1, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 fc7e 	bl	800bdf8 <USBD_LL_PrepareReceive>
 80094fc:	e008      	b.n	8009510 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094fe:	4b08      	ldr	r3, [pc, #32]	; (8009520 <USBD_CDC_Init+0x1e8>)
 8009500:	7819      	ldrb	r1, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f002 fc74 	bl	800bdf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000093 	.word	0x20000093
 8009520:	20000094 	.word	0x20000094
 8009524:	20000095 	.word	0x20000095

08009528 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009534:	4b3a      	ldr	r3, [pc, #232]	; (8009620 <USBD_CDC_DeInit+0xf8>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f002 fb20 	bl	800bb80 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009540:	4b37      	ldr	r3, [pc, #220]	; (8009620 <USBD_CDC_DeInit+0xf8>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 020f 	and.w	r2, r3, #15
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	3324      	adds	r3, #36	; 0x24
 8009556:	2200      	movs	r2, #0
 8009558:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800955a:	4b32      	ldr	r3, [pc, #200]	; (8009624 <USBD_CDC_DeInit+0xfc>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f002 fb0d 	bl	800bb80 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009566:	4b2f      	ldr	r3, [pc, #188]	; (8009624 <USBD_CDC_DeInit+0xfc>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	f003 020f 	and.w	r2, r3, #15
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800957e:	2200      	movs	r2, #0
 8009580:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009582:	4b29      	ldr	r3, [pc, #164]	; (8009628 <USBD_CDC_DeInit+0x100>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f002 faf9 	bl	800bb80 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800958e:	4b26      	ldr	r3, [pc, #152]	; (8009628 <USBD_CDC_DeInit+0x100>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	f003 020f 	and.w	r2, r3, #15
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	3324      	adds	r3, #36	; 0x24
 80095a4:	2200      	movs	r2, #0
 80095a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80095a8:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <USBD_CDC_DeInit+0x100>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	f003 020f 	and.w	r2, r3, #15
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	3326      	adds	r3, #38	; 0x26
 80095be:	2200      	movs	r2, #0
 80095c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	32b0      	adds	r2, #176	; 0xb0
 80095cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01f      	beq.n	8009614 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	33b0      	adds	r3, #176	; 0xb0
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	32b0      	adds	r2, #176	; 0xb0
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f002 fca6 	bl	800bf48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32b0      	adds	r2, #176	; 0xb0
 8009606:	2100      	movs	r1, #0
 8009608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000093 	.word	0x20000093
 8009624:	20000094 	.word	0x20000094
 8009628:	20000095 	.word	0x20000095

0800962c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	32b0      	adds	r2, #176	; 0xb0
 8009640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	e0bf      	b.n	80097dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009664:	2b00      	cmp	r3, #0
 8009666:	d050      	beq.n	800970a <USBD_CDC_Setup+0xde>
 8009668:	2b20      	cmp	r3, #32
 800966a:	f040 80af 	bne.w	80097cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	88db      	ldrh	r3, [r3, #6]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d03a      	beq.n	80096ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	b25b      	sxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	da1b      	bge.n	80096b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	33b0      	adds	r3, #176	; 0xb0
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009696:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	88d2      	ldrh	r2, [r2, #6]
 800969c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	88db      	ldrh	r3, [r3, #6]
 80096a2:	2b07      	cmp	r3, #7
 80096a4:	bf28      	it	cs
 80096a6:	2307      	movcs	r3, #7
 80096a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	89fa      	ldrh	r2, [r7, #14]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 fd73 	bl	800b19c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80096b6:	e090      	b.n	80097da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	785a      	ldrb	r2, [r3, #1]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	88db      	ldrh	r3, [r3, #6]
 80096c6:	2b3f      	cmp	r3, #63	; 0x3f
 80096c8:	d803      	bhi.n	80096d2 <USBD_CDC_Setup+0xa6>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	88db      	ldrh	r3, [r3, #6]
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	e000      	b.n	80096d4 <USBD_CDC_Setup+0xa8>
 80096d2:	2240      	movs	r2, #64	; 0x40
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80096da:	6939      	ldr	r1, [r7, #16]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80096e2:	461a      	mov	r2, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f001 fd85 	bl	800b1f4 <USBD_CtlPrepareRx>
      break;
 80096ea:	e076      	b.n	80097da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	33b0      	adds	r3, #176	; 0xb0
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	7850      	ldrb	r0, [r2, #1]
 8009702:	2200      	movs	r2, #0
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	4798      	blx	r3
      break;
 8009708:	e067      	b.n	80097da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	785b      	ldrb	r3, [r3, #1]
 800970e:	2b0b      	cmp	r3, #11
 8009710:	d851      	bhi.n	80097b6 <USBD_CDC_Setup+0x18a>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <USBD_CDC_Setup+0xec>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009749 	.word	0x08009749
 800971c:	080097c5 	.word	0x080097c5
 8009720:	080097b7 	.word	0x080097b7
 8009724:	080097b7 	.word	0x080097b7
 8009728:	080097b7 	.word	0x080097b7
 800972c:	080097b7 	.word	0x080097b7
 8009730:	080097b7 	.word	0x080097b7
 8009734:	080097b7 	.word	0x080097b7
 8009738:	080097b7 	.word	0x080097b7
 800973c:	080097b7 	.word	0x080097b7
 8009740:	08009773 	.word	0x08009773
 8009744:	0800979d 	.word	0x0800979d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b03      	cmp	r3, #3
 8009752:	d107      	bne.n	8009764 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009754:	f107 030a 	add.w	r3, r7, #10
 8009758:	2202      	movs	r2, #2
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 fd1d 	bl	800b19c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009762:	e032      	b.n	80097ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fca7 	bl	800b0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800976c:	2303      	movs	r3, #3
 800976e:	75fb      	strb	r3, [r7, #23]
          break;
 8009770:	e02b      	b.n	80097ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b03      	cmp	r3, #3
 800977c:	d107      	bne.n	800978e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800977e:	f107 030d 	add.w	r3, r7, #13
 8009782:	2201      	movs	r2, #1
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 fd08 	bl	800b19c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800978c:	e01d      	b.n	80097ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f001 fc92 	bl	800b0ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	75fb      	strb	r3, [r7, #23]
          break;
 800979a:	e016      	b.n	80097ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d00f      	beq.n	80097c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 fc85 	bl	800b0ba <USBD_CtlError>
            ret = USBD_FAIL;
 80097b0:	2303      	movs	r3, #3
 80097b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80097b4:	e008      	b.n	80097c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 fc7e 	bl	800b0ba <USBD_CtlError>
          ret = USBD_FAIL;
 80097be:	2303      	movs	r3, #3
 80097c0:	75fb      	strb	r3, [r7, #23]
          break;
 80097c2:	e002      	b.n	80097ca <USBD_CDC_Setup+0x19e>
          break;
 80097c4:	bf00      	nop
 80097c6:	e008      	b.n	80097da <USBD_CDC_Setup+0x1ae>
          break;
 80097c8:	bf00      	nop
      }
      break;
 80097ca:	e006      	b.n	80097da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 fc73 	bl	800b0ba <USBD_CtlError>
      ret = USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	75fb      	strb	r3, [r7, #23]
      break;
 80097d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80097da:	7dfb      	ldrb	r3, [r7, #23]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	32b0      	adds	r2, #176	; 0xb0
 8009802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800980a:	2303      	movs	r3, #3
 800980c:	e065      	b.n	80098da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	32b0      	adds	r2, #176	; 0xb0
 8009818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	f003 020f 	and.w	r2, r3, #15
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	3318      	adds	r3, #24
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d02f      	beq.n	8009898 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	f003 020f 	and.w	r2, r3, #15
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	3318      	adds	r3, #24
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	78fb      	ldrb	r3, [r7, #3]
 8009850:	f003 010f 	and.w	r1, r3, #15
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	460b      	mov	r3, r1
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	440b      	add	r3, r1
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4403      	add	r3, r0
 8009860:	3344      	adds	r3, #68	; 0x44
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	fbb2 f1f3 	udiv	r1, r2, r3
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800986e:	2b00      	cmp	r3, #0
 8009870:	d112      	bne.n	8009898 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	f003 020f 	and.w	r2, r3, #15
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	3318      	adds	r3, #24
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800988a:	78f9      	ldrb	r1, [r7, #3]
 800988c:	2300      	movs	r3, #0
 800988e:	2200      	movs	r2, #0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f002 fa79 	bl	800bd88 <USBD_LL_Transmit>
 8009896:	e01f      	b.n	80098d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	33b0      	adds	r3, #176	; 0xb0
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d010      	beq.n	80098d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	33b0      	adds	r3, #176	; 0xb0
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	32b0      	adds	r2, #176	; 0xb0
 80098f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	32b0      	adds	r2, #176	; 0xb0
 8009908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	e01a      	b.n	800994a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f002 faa5 	bl	800be68 <USBD_LL_GetRxDataSize>
 800991e:	4602      	mov	r2, r0
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	33b0      	adds	r3, #176	; 0xb0
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009944:	4611      	mov	r1, r2
 8009946:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	32b0      	adds	r2, #176	; 0xb0
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	e025      	b.n	80099c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	33b0      	adds	r3, #176	; 0xb0
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01a      	beq.n	80099be <USBD_CDC_EP0_RxReady+0x6c>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800998e:	2bff      	cmp	r3, #255	; 0xff
 8009990:	d015      	beq.n	80099be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	33b0      	adds	r3, #176	; 0xb0
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80099aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80099b2:	b292      	uxth	r2, r2
 80099b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	22ff      	movs	r2, #255	; 0xff
 80099ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099d0:	2182      	movs	r1, #130	; 0x82
 80099d2:	4818      	ldr	r0, [pc, #96]	; (8009a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099d4:	f000 fd0f 	bl	800a3f6 <USBD_GetEpDesc>
 80099d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099da:	2101      	movs	r1, #1
 80099dc:	4815      	ldr	r0, [pc, #84]	; (8009a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099de:	f000 fd0a 	bl	800a3f6 <USBD_GetEpDesc>
 80099e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099e4:	2181      	movs	r1, #129	; 0x81
 80099e6:	4813      	ldr	r0, [pc, #76]	; (8009a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099e8:	f000 fd05 	bl	800a3f6 <USBD_GetEpDesc>
 80099ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2210      	movs	r2, #16
 80099f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a08:	711a      	strb	r2, [r3, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a1c:	711a      	strb	r2, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2243      	movs	r2, #67	; 0x43
 8009a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000050 	.word	0x20000050

08009a38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a40:	2182      	movs	r1, #130	; 0x82
 8009a42:	4818      	ldr	r0, [pc, #96]	; (8009aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a44:	f000 fcd7 	bl	800a3f6 <USBD_GetEpDesc>
 8009a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	4815      	ldr	r0, [pc, #84]	; (8009aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a4e:	f000 fcd2 	bl	800a3f6 <USBD_GetEpDesc>
 8009a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a54:	2181      	movs	r1, #129	; 0x81
 8009a56:	4813      	ldr	r0, [pc, #76]	; (8009aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a58:	f000 fccd 	bl	800a3f6 <USBD_GetEpDesc>
 8009a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2210      	movs	r2, #16
 8009a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2200      	movs	r2, #0
 8009a74:	711a      	strb	r2, [r3, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f042 0202 	orr.w	r2, r2, #2
 8009a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d006      	beq.n	8009a92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	711a      	strb	r2, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f042 0202 	orr.w	r2, r2, #2
 8009a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2243      	movs	r2, #67	; 0x43
 8009a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000050 	.word	0x20000050

08009aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ab0:	2182      	movs	r1, #130	; 0x82
 8009ab2:	4818      	ldr	r0, [pc, #96]	; (8009b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ab4:	f000 fc9f 	bl	800a3f6 <USBD_GetEpDesc>
 8009ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aba:	2101      	movs	r1, #1
 8009abc:	4815      	ldr	r0, [pc, #84]	; (8009b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009abe:	f000 fc9a 	bl	800a3f6 <USBD_GetEpDesc>
 8009ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ac4:	2181      	movs	r1, #129	; 0x81
 8009ac6:	4813      	ldr	r0, [pc, #76]	; (8009b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ac8:	f000 fc95 	bl	800a3f6 <USBD_GetEpDesc>
 8009acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2210      	movs	r2, #16
 8009ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d006      	beq.n	8009aee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae8:	711a      	strb	r2, [r3, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d006      	beq.n	8009b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009afc:	711a      	strb	r2, [r3, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2243      	movs	r2, #67	; 0x43
 8009b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000050 	.word	0x20000050

08009b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	220a      	movs	r2, #10
 8009b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b26:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	2000000c 	.word	0x2000000c

08009b38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e009      	b.n	8009b60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	33b0      	adds	r3, #176	; 0xb0
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	32b0      	adds	r2, #176	; 0xb0
 8009b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e008      	b.n	8009ba4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	371c      	adds	r7, #28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	32b0      	adds	r2, #176	; 0xb0
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e004      	b.n	8009bde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	32b0      	adds	r2, #176	; 0xb0
 8009bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32b0      	adds	r2, #176	; 0xb0
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e018      	b.n	8009c4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7c1b      	ldrb	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c22:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <USBD_CDC_ReceivePacket+0x68>)
 8009c24:	7819      	ldrb	r1, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f002 f8e1 	bl	800bdf8 <USBD_LL_PrepareReceive>
 8009c36:	e008      	b.n	8009c4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <USBD_CDC_ReceivePacket+0x68>)
 8009c3a:	7819      	ldrb	r1, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f002 f8d7 	bl	800bdf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000094 	.word	0x20000094

08009c58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e01f      	b.n	8009cb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	79fa      	ldrb	r2, [r7, #7]
 8009ca2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f001 feaf 	bl	800ba08 <USBD_LL_Init>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e025      	b.n	8009d1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	32ae      	adds	r2, #174	; 0xae
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00f      	beq.n	8009d0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32ae      	adds	r2, #174	; 0xae
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	f107 020e 	add.w	r2, r7, #14
 8009d00:	4610      	mov	r0, r2
 8009d02:	4798      	blx	r3
 8009d04:	4602      	mov	r2, r0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 feb7 	bl	800baa0 <USBD_LL_Start>
 8009d32:	4603      	mov	r3, r0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d009      	beq.n	8009d80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	78fa      	ldrb	r2, [r7, #3]
 8009d76:	4611      	mov	r1, r2
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	4798      	blx	r3
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	4611      	mov	r1, r2
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 f938 	bl	800b046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009de4:	461a      	mov	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d01a      	beq.n	8009e30 <USBD_LL_SetupStage+0x72>
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d822      	bhi.n	8009e44 <USBD_LL_SetupStage+0x86>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <USBD_LL_SetupStage+0x4a>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d00a      	beq.n	8009e1c <USBD_LL_SetupStage+0x5e>
 8009e06:	e01d      	b.n	8009e44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fb65 	bl	800a4e0 <USBD_StdDevReq>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1a:	e020      	b.n	8009e5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fbcd 	bl	800a5c4 <USBD_StdItfReq>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2e:	e016      	b.n	8009e5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fc2f 	bl	800a69c <USBD_StdEPReq>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]
      break;
 8009e42:	e00c      	b.n	8009e5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 feca 	bl	800bbec <USBD_LL_StallEP>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5c:	bf00      	nop
  }

  return ret;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	460b      	mov	r3, r1
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e7a:	7afb      	ldrb	r3, [r7, #11]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d16e      	bne.n	8009f5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	f040 8098 	bne.w	8009fc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d913      	bls.n	8009ec8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	1ad2      	subs	r2, r2, r3
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	bf28      	it	cs
 8009eba:	4613      	movcs	r3, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f001 f9b4 	bl	800b22e <USBD_CtlContinueRx>
 8009ec6:	e07d      	b.n	8009fc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d014      	beq.n	8009f00 <USBD_LL_DataOutStage+0x98>
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d81d      	bhi.n	8009f16 <USBD_LL_DataOutStage+0xae>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <USBD_LL_DataOutStage+0x7c>
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d003      	beq.n	8009eea <USBD_LL_DataOutStage+0x82>
 8009ee2:	e018      	b.n	8009f16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	75bb      	strb	r3, [r7, #22]
            break;
 8009ee8:	e018      	b.n	8009f1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 fa64 	bl	800a3c2 <USBD_CoreFindIF>
 8009efa:	4603      	mov	r3, r0
 8009efc:	75bb      	strb	r3, [r7, #22]
            break;
 8009efe:	e00d      	b.n	8009f1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fa66 	bl	800a3dc <USBD_CoreFindEP>
 8009f10:	4603      	mov	r3, r0
 8009f12:	75bb      	strb	r3, [r7, #22]
            break;
 8009f14:	e002      	b.n	8009f1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75bb      	strb	r3, [r7, #22]
            break;
 8009f1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f1c:	7dbb      	ldrb	r3, [r7, #22]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d119      	bne.n	8009f56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d113      	bne.n	8009f56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f2e:	7dba      	ldrb	r2, [r7, #22]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	32ae      	adds	r2, #174	; 0xae
 8009f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00b      	beq.n	8009f56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f3e:	7dba      	ldrb	r2, [r7, #22]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f46:	7dba      	ldrb	r2, [r7, #22]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	32ae      	adds	r2, #174	; 0xae
 8009f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f001 f97a 	bl	800b250 <USBD_CtlSendStatus>
 8009f5c:	e032      	b.n	8009fc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	4619      	mov	r1, r3
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fa37 	bl	800a3dc <USBD_CoreFindEP>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f72:	7dbb      	ldrb	r3, [r7, #22]
 8009f74:	2bff      	cmp	r3, #255	; 0xff
 8009f76:	d025      	beq.n	8009fc4 <USBD_LL_DataOutStage+0x15c>
 8009f78:	7dbb      	ldrb	r3, [r7, #22]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d122      	bne.n	8009fc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d117      	bne.n	8009fba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f8a:	7dba      	ldrb	r2, [r7, #22]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	32ae      	adds	r2, #174	; 0xae
 8009f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00f      	beq.n	8009fba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f9a:	7dba      	ldrb	r2, [r7, #22]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009fa2:	7dba      	ldrb	r2, [r7, #22]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	32ae      	adds	r2, #174	; 0xae
 8009fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	7afa      	ldrb	r2, [r7, #11]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	4798      	blx	r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	e000      	b.n	8009fc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d16f      	bne.n	800a0c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3314      	adds	r3, #20
 8009fe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d15a      	bne.n	800a0a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d914      	bls.n	800a028 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	1ad2      	subs	r2, r2, r3
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	461a      	mov	r2, r3
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f001 f8dc 	bl	800b1d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a01a:	2300      	movs	r3, #0
 800a01c:	2200      	movs	r2, #0
 800a01e:	2100      	movs	r1, #0
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f001 fee9 	bl	800bdf8 <USBD_LL_PrepareReceive>
 800a026:	e03f      	b.n	800a0a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	429a      	cmp	r2, r3
 800a032:	d11c      	bne.n	800a06e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d316      	bcc.n	800a06e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d20f      	bcs.n	800a06e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f001 f8bd 	bl	800b1d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a060:	2300      	movs	r3, #0
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f001 fec6 	bl	800bdf8 <USBD_LL_PrepareReceive>
 800a06c:	e01c      	b.n	800a0a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b03      	cmp	r3, #3
 800a078:	d10f      	bne.n	800a09a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a09a:	2180      	movs	r1, #128	; 0x80
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f001 fda5 	bl	800bbec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f001 f8e7 	bl	800b276 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d03a      	beq.n	800a128 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f7ff fe42 	bl	8009d3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0c0:	e032      	b.n	800a128 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a0c2:	7afb      	ldrb	r3, [r7, #11]
 800a0c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 f985 	bl	800a3dc <USBD_CoreFindEP>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	2bff      	cmp	r3, #255	; 0xff
 800a0da:	d025      	beq.n	800a128 <USBD_LL_DataInStage+0x15a>
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d122      	bne.n	800a128 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d11c      	bne.n	800a128 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a0ee:	7dfa      	ldrb	r2, [r7, #23]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	32ae      	adds	r2, #174	; 0xae
 800a0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d014      	beq.n	800a128 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a0fe:	7dfa      	ldrb	r2, [r7, #23]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a106:	7dfa      	ldrb	r2, [r7, #23]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	32ae      	adds	r2, #174	; 0xae
 800a10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	7afa      	ldrb	r2, [r7, #11]
 800a114:	4611      	mov	r1, r2
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a11e:	7dbb      	ldrb	r3, [r7, #22]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a124:	7dbb      	ldrb	r3, [r7, #22]
 800a126:	e000      	b.n	800a12a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d014      	beq.n	800a198 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00e      	beq.n	800a198 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6852      	ldr	r2, [r2, #4]
 800a186:	b2d2      	uxtb	r2, r2
 800a188:	4611      	mov	r1, r2
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	4798      	blx	r3
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a194:	2303      	movs	r3, #3
 800a196:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f001 fcb0 	bl	800bb04 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2240      	movs	r2, #64	; 0x40
 800a1b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1b4:	2340      	movs	r3, #64	; 0x40
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2180      	movs	r1, #128	; 0x80
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fca2 	bl	800bb04 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2240      	movs	r2, #64	; 0x40
 800a1ca:	621a      	str	r2, [r3, #32]

  return ret;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	78fa      	ldrb	r2, [r7, #3]
 800a1e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b04      	cmp	r3, #4
 800a208:	d006      	beq.n	800a218 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2204      	movs	r2, #4
 800a21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d106      	bne.n	800a250 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d110      	bne.n	800a294 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	32ae      	adds	r2, #174	; 0xae
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e01c      	b.n	800a2fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d115      	bne.n	800a2f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	32ae      	adds	r2, #174	; 0xae
 800a2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	32ae      	adds	r2, #174	; 0xae
 800a2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	78fa      	ldrb	r2, [r7, #3]
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	32ae      	adds	r2, #174	; 0xae
 800a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e01c      	b.n	800a35e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d115      	bne.n	800a35c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32ae      	adds	r2, #174	; 0xae
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	32ae      	adds	r2, #174	; 0xae
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	4611      	mov	r1, r2
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a366:	b480      	push	{r7}
 800a368:	b083      	sub	sp, #12
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00e      	beq.n	800a3b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6852      	ldr	r2, [r2, #4]
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	4798      	blx	r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b083      	sub	sp, #12
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b086      	sub	sp, #24
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	885b      	ldrh	r3, [r3, #2]
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d920      	bls.n	800a460 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	b29b      	uxth	r3, r3
 800a424:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a426:	e013      	b.n	800a450 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a428:	f107 030a 	add.w	r3, r7, #10
 800a42c:	4619      	mov	r1, r3
 800a42e:	6978      	ldr	r0, [r7, #20]
 800a430:	f000 f81b 	bl	800a46a <USBD_GetNextDesc>
 800a434:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	785b      	ldrb	r3, [r3, #1]
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	d108      	bne.n	800a450 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	789b      	ldrb	r3, [r3, #2]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d008      	beq.n	800a45e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	b29a      	uxth	r2, r3
 800a456:	897b      	ldrh	r3, [r7, #10]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d8e5      	bhi.n	800a428 <USBD_GetEpDesc+0x32>
 800a45c:	e000      	b.n	800a460 <USBD_GetEpDesc+0x6a>
          break;
 800a45e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a460:	693b      	ldr	r3, [r7, #16]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b085      	sub	sp, #20
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	881a      	ldrh	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	b29b      	uxth	r3, r3
 800a482:	4413      	add	r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4413      	add	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a496:	68fb      	ldr	r3, [r7, #12]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4c2:	8a3b      	ldrh	r3, [r7, #16]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	d005      	beq.n	800a506 <USBD_StdDevReq+0x26>
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d857      	bhi.n	800a5ae <USBD_StdDevReq+0xce>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00f      	beq.n	800a522 <USBD_StdDevReq+0x42>
 800a502:	2b20      	cmp	r3, #32
 800a504:	d153      	bne.n	800a5ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	32ae      	adds	r2, #174	; 0xae
 800a510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	4798      	blx	r3
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]
      break;
 800a520:	e04a      	b.n	800a5b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b09      	cmp	r3, #9
 800a528:	d83b      	bhi.n	800a5a2 <USBD_StdDevReq+0xc2>
 800a52a:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <USBD_StdDevReq+0x50>)
 800a52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a530:	0800a585 	.word	0x0800a585
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a5a3 	.word	0x0800a5a3
 800a53c:	0800a58f 	.word	0x0800a58f
 800a540:	0800a5a3 	.word	0x0800a5a3
 800a544:	0800a563 	.word	0x0800a563
 800a548:	0800a559 	.word	0x0800a559
 800a54c:	0800a5a3 	.word	0x0800a5a3
 800a550:	0800a57b 	.word	0x0800a57b
 800a554:	0800a56d 	.word	0x0800a56d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa3c 	bl	800a9d8 <USBD_GetDescriptor>
          break;
 800a560:	e024      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fbcb 	bl	800ad00 <USBD_SetAddress>
          break;
 800a56a:	e01f      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fc0a 	bl	800ad88 <USBD_SetConfig>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]
          break;
 800a578:	e018      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fcad 	bl	800aedc <USBD_GetConfig>
          break;
 800a582:	e013      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fcde 	bl	800af48 <USBD_GetStatus>
          break;
 800a58c:	e00e      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fd0d 	bl	800afb0 <USBD_SetFeature>
          break;
 800a596:	e009      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fd31 	bl	800b002 <USBD_ClrFeature>
          break;
 800a5a0:	e004      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fd88 	bl	800b0ba <USBD_CtlError>
          break;
 800a5aa:	bf00      	nop
      }
      break;
 800a5ac:	e004      	b.n	800a5b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fd82 	bl	800b0ba <USBD_CtlError>
      break;
 800a5b6:	bf00      	nop
  }

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop

0800a5c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5da:	2b40      	cmp	r3, #64	; 0x40
 800a5dc:	d005      	beq.n	800a5ea <USBD_StdItfReq+0x26>
 800a5de:	2b40      	cmp	r3, #64	; 0x40
 800a5e0:	d852      	bhi.n	800a688 <USBD_StdItfReq+0xc4>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <USBD_StdItfReq+0x26>
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d14e      	bne.n	800a688 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d840      	bhi.n	800a67a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	889b      	ldrh	r3, [r3, #4]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d836      	bhi.n	800a670 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	889b      	ldrh	r3, [r3, #4]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fed9 	bl	800a3c2 <USBD_CoreFindIF>
 800a610:	4603      	mov	r3, r0
 800a612:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2bff      	cmp	r3, #255	; 0xff
 800a618:	d01d      	beq.n	800a656 <USBD_StdItfReq+0x92>
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11a      	bne.n	800a656 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a620:	7bba      	ldrb	r2, [r7, #14]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	32ae      	adds	r2, #174	; 0xae
 800a626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00f      	beq.n	800a650 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a630:	7bba      	ldrb	r2, [r7, #14]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a638:	7bba      	ldrb	r2, [r7, #14]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32ae      	adds	r2, #174	; 0xae
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a64e:	e004      	b.n	800a65a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a654:	e001      	b.n	800a65a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a656:	2303      	movs	r3, #3
 800a658:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	88db      	ldrh	r3, [r3, #6]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d110      	bne.n	800a684 <USBD_StdItfReq+0xc0>
 800a662:	7bfb      	ldrb	r3, [r7, #15]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10d      	bne.n	800a684 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fdf1 	bl	800b250 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a66e:	e009      	b.n	800a684 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fd21 	bl	800b0ba <USBD_CtlError>
          break;
 800a678:	e004      	b.n	800a684 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fd1c 	bl	800b0ba <USBD_CtlError>
          break;
 800a682:	e000      	b.n	800a686 <USBD_StdItfReq+0xc2>
          break;
 800a684:	bf00      	nop
      }
      break;
 800a686:	e004      	b.n	800a692 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fd15 	bl	800b0ba <USBD_CtlError>
      break;
 800a690:	bf00      	nop
  }

  return ret;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	889b      	ldrh	r3, [r3, #4]
 800a6ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d007      	beq.n	800a6cc <USBD_StdEPReq+0x30>
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	f200 817f 	bhi.w	800a9c0 <USBD_StdEPReq+0x324>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02a      	beq.n	800a71c <USBD_StdEPReq+0x80>
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	f040 817a 	bne.w	800a9c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fe83 	bl	800a3dc <USBD_CoreFindEP>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6da:	7b7b      	ldrb	r3, [r7, #13]
 800a6dc:	2bff      	cmp	r3, #255	; 0xff
 800a6de:	f000 8174 	beq.w	800a9ca <USBD_StdEPReq+0x32e>
 800a6e2:	7b7b      	ldrb	r3, [r7, #13]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 8170 	bne.w	800a9ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a6ea:	7b7a      	ldrb	r2, [r7, #13]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a6f2:	7b7a      	ldrb	r2, [r7, #13]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	32ae      	adds	r2, #174	; 0xae
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 8163 	beq.w	800a9ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a704:	7b7a      	ldrb	r2, [r7, #13]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	; 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a71a:	e156      	b.n	800a9ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	2b03      	cmp	r3, #3
 800a722:	d008      	beq.n	800a736 <USBD_StdEPReq+0x9a>
 800a724:	2b03      	cmp	r3, #3
 800a726:	f300 8145 	bgt.w	800a9b4 <USBD_StdEPReq+0x318>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 809b 	beq.w	800a866 <USBD_StdEPReq+0x1ca>
 800a730:	2b01      	cmp	r3, #1
 800a732:	d03c      	beq.n	800a7ae <USBD_StdEPReq+0x112>
 800a734:	e13e      	b.n	800a9b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d002      	beq.n	800a748 <USBD_StdEPReq+0xac>
 800a742:	2b03      	cmp	r3, #3
 800a744:	d016      	beq.n	800a774 <USBD_StdEPReq+0xd8>
 800a746:	e02c      	b.n	800a7a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00d      	beq.n	800a76a <USBD_StdEPReq+0xce>
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b80      	cmp	r3, #128	; 0x80
 800a752:	d00a      	beq.n	800a76a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 fa47 	bl	800bbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a75e:	2180      	movs	r1, #128	; 0x80
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 fa43 	bl	800bbec <USBD_LL_StallEP>
 800a766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a768:	e020      	b.n	800a7ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fca4 	bl	800b0ba <USBD_CtlError>
              break;
 800a772:	e01b      	b.n	800a7ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	885b      	ldrh	r3, [r3, #2]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10e      	bne.n	800a79a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00b      	beq.n	800a79a <USBD_StdEPReq+0xfe>
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b80      	cmp	r3, #128	; 0x80
 800a786:	d008      	beq.n	800a79a <USBD_StdEPReq+0xfe>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	88db      	ldrh	r3, [r3, #6]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 fa29 	bl	800bbec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fd58 	bl	800b250 <USBD_CtlSendStatus>

              break;
 800a7a0:	e004      	b.n	800a7ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fc88 	bl	800b0ba <USBD_CtlError>
              break;
 800a7aa:	bf00      	nop
          }
          break;
 800a7ac:	e107      	b.n	800a9be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d002      	beq.n	800a7c0 <USBD_StdEPReq+0x124>
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d016      	beq.n	800a7ec <USBD_StdEPReq+0x150>
 800a7be:	e04b      	b.n	800a858 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00d      	beq.n	800a7e2 <USBD_StdEPReq+0x146>
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	2b80      	cmp	r3, #128	; 0x80
 800a7ca:	d00a      	beq.n	800a7e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 fa0b 	bl	800bbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7d6:	2180      	movs	r1, #128	; 0x80
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fa07 	bl	800bbec <USBD_LL_StallEP>
 800a7de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7e0:	e040      	b.n	800a864 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fc68 	bl	800b0ba <USBD_CtlError>
              break;
 800a7ea:	e03b      	b.n	800a864 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	885b      	ldrh	r3, [r3, #2]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d136      	bne.n	800a862 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 fa28 	bl	800bc58 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fd21 	bl	800b250 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff fde2 	bl	800a3dc <USBD_CoreFindEP>
 800a818:	4603      	mov	r3, r0
 800a81a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81c:	7b7b      	ldrb	r3, [r7, #13]
 800a81e:	2bff      	cmp	r3, #255	; 0xff
 800a820:	d01f      	beq.n	800a862 <USBD_StdEPReq+0x1c6>
 800a822:	7b7b      	ldrb	r3, [r7, #13]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d11c      	bne.n	800a862 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a828:	7b7a      	ldrb	r2, [r7, #13]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a830:	7b7a      	ldrb	r2, [r7, #13]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	32ae      	adds	r2, #174	; 0xae
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a840:	7b7a      	ldrb	r2, [r7, #13]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	32ae      	adds	r2, #174	; 0xae
 800a846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
 800a852:	4603      	mov	r3, r0
 800a854:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a856:	e004      	b.n	800a862 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc2d 	bl	800b0ba <USBD_CtlError>
              break;
 800a860:	e000      	b.n	800a864 <USBD_StdEPReq+0x1c8>
              break;
 800a862:	bf00      	nop
          }
          break;
 800a864:	e0ab      	b.n	800a9be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d002      	beq.n	800a878 <USBD_StdEPReq+0x1dc>
 800a872:	2b03      	cmp	r3, #3
 800a874:	d032      	beq.n	800a8dc <USBD_StdEPReq+0x240>
 800a876:	e097      	b.n	800a9a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <USBD_StdEPReq+0x1f2>
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	2b80      	cmp	r3, #128	; 0x80
 800a882:	d004      	beq.n	800a88e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fc17 	bl	800b0ba <USBD_CtlError>
                break;
 800a88c:	e091      	b.n	800a9b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a88e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a892:	2b00      	cmp	r3, #0
 800a894:	da0b      	bge.n	800a8ae <USBD_StdEPReq+0x212>
 800a896:	7bbb      	ldrb	r3, [r7, #14]
 800a898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	3310      	adds	r3, #16
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	e00b      	b.n	800a8c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fc61 	bl	800b19c <USBD_CtlSendData>
              break;
 800a8da:	e06a      	b.n	800a9b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	da11      	bge.n	800a908 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	f003 020f 	and.w	r2, r3, #15
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	440b      	add	r3, r1
 800a8f6:	3324      	adds	r3, #36	; 0x24
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d117      	bne.n	800a92e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fbda 	bl	800b0ba <USBD_CtlError>
                  break;
 800a906:	e054      	b.n	800a9b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	f003 020f 	and.w	r2, r3, #15
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fbc7 	bl	800b0ba <USBD_CtlError>
                  break;
 800a92c:	e041      	b.n	800a9b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a92e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	da0b      	bge.n	800a94e <USBD_StdEPReq+0x2b2>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	3310      	adds	r3, #16
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	4413      	add	r3, r2
 800a94a:	3304      	adds	r3, #4
 800a94c:	e00b      	b.n	800a966 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a954:	4613      	mov	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	4413      	add	r3, r2
 800a964:	3304      	adds	r3, #4
 800a966:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <USBD_StdEPReq+0x2d8>
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b80      	cmp	r3, #128	; 0x80
 800a972:	d103      	bne.n	800a97c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	e00e      	b.n	800a99a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 f99f 	bl	800bcc4 <USBD_LL_IsStallEP>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	e002      	b.n	800a99a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2202      	movs	r2, #2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fbfb 	bl	800b19c <USBD_CtlSendData>
              break;
 800a9a6:	e004      	b.n	800a9b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fb85 	bl	800b0ba <USBD_CtlError>
              break;
 800a9b0:	bf00      	nop
          }
          break;
 800a9b2:	e004      	b.n	800a9be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fb7f 	bl	800b0ba <USBD_CtlError>
          break;
 800a9bc:	bf00      	nop
      }
      break;
 800a9be:	e005      	b.n	800a9cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fb79 	bl	800b0ba <USBD_CtlError>
      break;
 800a9c8:	e000      	b.n	800a9cc <USBD_StdEPReq+0x330>
      break;
 800a9ca:	bf00      	nop
  }

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	885b      	ldrh	r3, [r3, #2]
 800a9f2:	0a1b      	lsrs	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	2b0e      	cmp	r3, #14
 800a9fa:	f200 8152 	bhi.w	800aca2 <USBD_GetDescriptor+0x2ca>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <USBD_GetDescriptor+0x2c>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa75 	.word	0x0800aa75
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aacd 	.word	0x0800aacd
 800aa10:	0800aca3 	.word	0x0800aca3
 800aa14:	0800aca3 	.word	0x0800aca3
 800aa18:	0800ac43 	.word	0x0800ac43
 800aa1c:	0800ac6f 	.word	0x0800ac6f
 800aa20:	0800aca3 	.word	0x0800aca3
 800aa24:	0800aca3 	.word	0x0800aca3
 800aa28:	0800aca3 	.word	0x0800aca3
 800aa2c:	0800aca3 	.word	0x0800aca3
 800aa30:	0800aca3 	.word	0x0800aca3
 800aa34:	0800aca3 	.word	0x0800aca3
 800aa38:	0800aca3 	.word	0x0800aca3
 800aa3c:	0800aa41 	.word	0x0800aa41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa62:	e126      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fb27 	bl	800b0ba <USBD_CtlError>
        err++;
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	72fb      	strb	r3, [r7, #11]
      break;
 800aa72:	e11e      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7c12      	ldrb	r2, [r2, #16]
 800aa80:	f107 0108 	add.w	r1, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
      break;
 800aa8a:	e112      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7c1b      	ldrb	r3, [r3, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10d      	bne.n	800aab0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9c:	f107 0208 	add.w	r2, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	2202      	movs	r2, #2
 800aaac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaae:	e100      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	f107 0208 	add.w	r2, r7, #8
 800aabc:	4610      	mov	r0, r2
 800aabe:	4798      	blx	r3
 800aac0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3301      	adds	r3, #1
 800aac6:	2202      	movs	r2, #2
 800aac8:	701a      	strb	r2, [r3, #0]
      break;
 800aaca:	e0f2      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	885b      	ldrh	r3, [r3, #2]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	f200 80ac 	bhi.w	800ac30 <USBD_GetDescriptor+0x258>
 800aad8:	a201      	add	r2, pc, #4	; (adr r2, 800aae0 <USBD_GetDescriptor+0x108>)
 800aada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aade:	bf00      	nop
 800aae0:	0800aaf9 	.word	0x0800aaf9
 800aae4:	0800ab2d 	.word	0x0800ab2d
 800aae8:	0800ab61 	.word	0x0800ab61
 800aaec:	0800ab95 	.word	0x0800ab95
 800aaf0:	0800abc9 	.word	0x0800abc9
 800aaf4:	0800abfd 	.word	0x0800abfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7c12      	ldrb	r2, [r2, #16]
 800ab10:	f107 0108 	add.w	r1, r7, #8
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab1a:	e091      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 facb 	bl	800b0ba <USBD_CtlError>
            err++;
 800ab24:	7afb      	ldrb	r3, [r7, #11]
 800ab26:	3301      	adds	r3, #1
 800ab28:	72fb      	strb	r3, [r7, #11]
          break;
 800ab2a:	e089      	b.n	800ac40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	7c12      	ldrb	r2, [r2, #16]
 800ab44:	f107 0108 	add.w	r1, r7, #8
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4798      	blx	r3
 800ab4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab4e:	e077      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fab1 	bl	800b0ba <USBD_CtlError>
            err++;
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab5e:	e06f      	b.n	800ac40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	7c12      	ldrb	r2, [r2, #16]
 800ab78:	f107 0108 	add.w	r1, r7, #8
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4798      	blx	r3
 800ab80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab82:	e05d      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fa97 	bl	800b0ba <USBD_CtlError>
            err++;
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	72fb      	strb	r3, [r7, #11]
          break;
 800ab92:	e055      	b.n	800ac40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	7c12      	ldrb	r2, [r2, #16]
 800abac:	f107 0108 	add.w	r1, r7, #8
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abb6:	e043      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa7d 	bl	800b0ba <USBD_CtlError>
            err++;
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
          break;
 800abc6:	e03b      	b.n	800ac40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	7c12      	ldrb	r2, [r2, #16]
 800abe0:	f107 0108 	add.w	r1, r7, #8
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
 800abe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abea:	e029      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa63 	bl	800b0ba <USBD_CtlError>
            err++;
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	3301      	adds	r3, #1
 800abf8:	72fb      	strb	r3, [r7, #11]
          break;
 800abfa:	e021      	b.n	800ac40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	7c12      	ldrb	r2, [r2, #16]
 800ac14:	f107 0108 	add.w	r1, r7, #8
 800ac18:	4610      	mov	r0, r2
 800ac1a:	4798      	blx	r3
 800ac1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac1e:	e00f      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fa49 	bl	800b0ba <USBD_CtlError>
            err++;
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac2e:	e007      	b.n	800ac40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa41 	bl	800b0ba <USBD_CtlError>
          err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac3e:	bf00      	nop
      }
      break;
 800ac40:	e037      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7c1b      	ldrb	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac52:	f107 0208 	add.w	r2, r7, #8
 800ac56:	4610      	mov	r0, r2
 800ac58:	4798      	blx	r3
 800ac5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac5c:	e029      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa2a 	bl	800b0ba <USBD_CtlError>
        err++;
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac6c:	e021      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	7c1b      	ldrb	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10d      	bne.n	800ac92 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	f107 0208 	add.w	r2, r7, #8
 800ac82:	4610      	mov	r0, r2
 800ac84:	4798      	blx	r3
 800ac86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	2207      	movs	r2, #7
 800ac8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac90:	e00f      	b.n	800acb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa10 	bl	800b0ba <USBD_CtlError>
        err++;
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	72fb      	strb	r3, [r7, #11]
      break;
 800aca0:	e007      	b.n	800acb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fa08 	bl	800b0ba <USBD_CtlError>
      err++;
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	3301      	adds	r3, #1
 800acae:	72fb      	strb	r3, [r7, #11]
      break;
 800acb0:	bf00      	nop
  }

  if (err != 0U)
 800acb2:	7afb      	ldrb	r3, [r7, #11]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d11e      	bne.n	800acf6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	88db      	ldrh	r3, [r3, #6]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d016      	beq.n	800acee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800acc0:	893b      	ldrh	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00e      	beq.n	800ace4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	88da      	ldrh	r2, [r3, #6]
 800acca:	893b      	ldrh	r3, [r7, #8]
 800accc:	4293      	cmp	r3, r2
 800acce:	bf28      	it	cs
 800acd0:	4613      	movcs	r3, r2
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acd6:	893b      	ldrh	r3, [r7, #8]
 800acd8:	461a      	mov	r2, r3
 800acda:	68f9      	ldr	r1, [r7, #12]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa5d 	bl	800b19c <USBD_CtlSendData>
 800ace2:	e009      	b.n	800acf8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f9e7 	bl	800b0ba <USBD_CtlError>
 800acec:	e004      	b.n	800acf8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 faae 	bl	800b250 <USBD_CtlSendStatus>
 800acf4:	e000      	b.n	800acf8 <USBD_GetDescriptor+0x320>
    return;
 800acf6:	bf00      	nop
  }
}
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	889b      	ldrh	r3, [r3, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d131      	bne.n	800ad76 <USBD_SetAddress+0x76>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d12d      	bne.n	800ad76 <USBD_SetAddress+0x76>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ad20:	d829      	bhi.n	800ad76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	885b      	ldrh	r3, [r3, #2]
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d104      	bne.n	800ad44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f9bc 	bl	800b0ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad42:	e01d      	b.n	800ad80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7bfa      	ldrb	r2, [r7, #15]
 800ad48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 ffe3 	bl	800bd1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa7a 	bl	800b250 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d004      	beq.n	800ad6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2202      	movs	r2, #2
 800ad66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6a:	e009      	b.n	800ad80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad74:	e004      	b.n	800ad80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f99e 	bl	800b0ba <USBD_CtlError>
  }
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	885b      	ldrh	r3, [r3, #2]
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	4b4e      	ldr	r3, [pc, #312]	; (800aed8 <USBD_SetConfig+0x150>)
 800ad9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ada0:	4b4d      	ldr	r3, [pc, #308]	; (800aed8 <USBD_SetConfig+0x150>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d905      	bls.n	800adb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f985 	bl	800b0ba <USBD_CtlError>
    return USBD_FAIL;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e08c      	b.n	800aece <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d002      	beq.n	800adc6 <USBD_SetConfig+0x3e>
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d029      	beq.n	800ae18 <USBD_SetConfig+0x90>
 800adc4:	e075      	b.n	800aeb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adc6:	4b44      	ldr	r3, [pc, #272]	; (800aed8 <USBD_SetConfig+0x150>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d020      	beq.n	800ae10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800adce:	4b42      	ldr	r3, [pc, #264]	; (800aed8 <USBD_SetConfig+0x150>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800add8:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <USBD_SetConfig+0x150>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7fe ffb7 	bl	8009d52 <USBD_SetClassConfig>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f962 	bl	800b0ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2202      	movs	r2, #2
 800adfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adfe:	e065      	b.n	800aecc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fa25 	bl	800b250 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2203      	movs	r2, #3
 800ae0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae0e:	e05d      	b.n	800aecc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa1d 	bl	800b250 <USBD_CtlSendStatus>
      break;
 800ae16:	e059      	b.n	800aecc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae18:	4b2f      	ldr	r3, [pc, #188]	; (800aed8 <USBD_SetConfig+0x150>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d112      	bne.n	800ae46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae28:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <USBD_SetConfig+0x150>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae32:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <USBD_SetConfig+0x150>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7fe ffa6 	bl	8009d8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fa06 	bl	800b250 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae44:	e042      	b.n	800aecc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae46:	4b24      	ldr	r3, [pc, #144]	; (800aed8 <USBD_SetConfig+0x150>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d02a      	beq.n	800aeaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7fe ff94 	bl	8009d8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <USBD_SetConfig+0x150>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae6c:	4b1a      	ldr	r3, [pc, #104]	; (800aed8 <USBD_SetConfig+0x150>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7fe ff6d 	bl	8009d52 <USBD_SetClassConfig>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00f      	beq.n	800aea2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f918 	bl	800b0ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7fe ff79 	bl	8009d8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aea0:	e014      	b.n	800aecc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f9d4 	bl	800b250 <USBD_CtlSendStatus>
      break;
 800aea8:	e010      	b.n	800aecc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f9d0 	bl	800b250 <USBD_CtlSendStatus>
      break;
 800aeb0:	e00c      	b.n	800aecc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f900 	bl	800b0ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <USBD_SetConfig+0x150>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe ff62 	bl	8009d8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aec6:	2303      	movs	r3, #3
 800aec8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeca:	bf00      	nop
  }

  return ret;
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200002a4 	.word	0x200002a4

0800aedc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	88db      	ldrh	r3, [r3, #6]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d004      	beq.n	800aef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f8e2 	bl	800b0ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aef6:	e023      	b.n	800af40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b02      	cmp	r3, #2
 800af02:	dc02      	bgt.n	800af0a <USBD_GetConfig+0x2e>
 800af04:	2b00      	cmp	r3, #0
 800af06:	dc03      	bgt.n	800af10 <USBD_GetConfig+0x34>
 800af08:	e015      	b.n	800af36 <USBD_GetConfig+0x5a>
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d00b      	beq.n	800af26 <USBD_GetConfig+0x4a>
 800af0e:	e012      	b.n	800af36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3308      	adds	r3, #8
 800af1a:	2201      	movs	r2, #1
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f93c 	bl	800b19c <USBD_CtlSendData>
        break;
 800af24:	e00c      	b.n	800af40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3304      	adds	r3, #4
 800af2a:	2201      	movs	r2, #1
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f934 	bl	800b19c <USBD_CtlSendData>
        break;
 800af34:	e004      	b.n	800af40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f8be 	bl	800b0ba <USBD_CtlError>
        break;
 800af3e:	bf00      	nop
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d81e      	bhi.n	800af9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	88db      	ldrh	r3, [r3, #6]
 800af64:	2b02      	cmp	r3, #2
 800af66:	d004      	beq.n	800af72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f8a5 	bl	800b0ba <USBD_CtlError>
        break;
 800af70:	e01a      	b.n	800afa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d005      	beq.n	800af8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	f043 0202 	orr.w	r2, r3, #2
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	330c      	adds	r3, #12
 800af92:	2202      	movs	r2, #2
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f900 	bl	800b19c <USBD_CtlSendData>
      break;
 800af9c:	e004      	b.n	800afa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f88a 	bl	800b0ba <USBD_CtlError>
      break;
 800afa6:	bf00      	nop
  }
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	885b      	ldrh	r3, [r3, #2]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d107      	bne.n	800afd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f940 	bl	800b250 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800afd0:	e013      	b.n	800affa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	885b      	ldrh	r3, [r3, #2]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d10b      	bne.n	800aff2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	889b      	ldrh	r3, [r3, #4]
 800afde:	0a1b      	lsrs	r3, r3, #8
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f930 	bl	800b250 <USBD_CtlSendStatus>
}
 800aff0:	e003      	b.n	800affa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f860 	bl	800b0ba <USBD_CtlError>
}
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b012:	b2db      	uxtb	r3, r3
 800b014:	3b01      	subs	r3, #1
 800b016:	2b02      	cmp	r3, #2
 800b018:	d80b      	bhi.n	800b032 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	885b      	ldrh	r3, [r3, #2]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d10c      	bne.n	800b03c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f910 	bl	800b250 <USBD_CtlSendStatus>
      }
      break;
 800b030:	e004      	b.n	800b03c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f840 	bl	800b0ba <USBD_CtlError>
      break;
 800b03a:	e000      	b.n	800b03e <USBD_ClrFeature+0x3c>
      break;
 800b03c:	bf00      	nop
  }
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	781a      	ldrb	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff fa17 	bl	800a4a4 <SWAPBYTE>
 800b076:	4603      	mov	r3, r0
 800b078:	461a      	mov	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3301      	adds	r3, #1
 800b082:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3301      	adds	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff fa0a 	bl	800a4a4 <SWAPBYTE>
 800b090:	4603      	mov	r3, r0
 800b092:	461a      	mov	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7ff f9fd 	bl	800a4a4 <SWAPBYTE>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	80da      	strh	r2, [r3, #6]
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b082      	sub	sp, #8
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c4:	2180      	movs	r1, #128	; 0x80
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fd90 	bl	800bbec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fd8c 	bl	800bbec <USBD_LL_StallEP>
}
 800b0d4:	bf00      	nop
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d036      	beq.n	800b160 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0f6:	6938      	ldr	r0, [r7, #16]
 800b0f8:	f000 f836 	bl	800b168 <USBD_GetLen>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	3301      	adds	r3, #1
 800b100:	b29b      	uxth	r3, r3
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	b29a      	uxth	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	4413      	add	r3, r2
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	7812      	ldrb	r2, [r2, #0]
 800b114:	701a      	strb	r2, [r3, #0]
  idx++;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	3301      	adds	r3, #1
 800b11a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	2203      	movs	r2, #3
 800b124:	701a      	strb	r2, [r3, #0]
  idx++;
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	3301      	adds	r3, #1
 800b12a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b12c:	e013      	b.n	800b156 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	4413      	add	r3, r2
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	7812      	ldrb	r2, [r2, #0]
 800b138:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	3301      	adds	r3, #1
 800b13e:	613b      	str	r3, [r7, #16]
    idx++;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
 800b142:	3301      	adds	r3, #1
 800b144:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	4413      	add	r3, r2
 800b14c:	2200      	movs	r2, #0
 800b14e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	3301      	adds	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e7      	bne.n	800b12e <USBD_GetString+0x52>
 800b15e:	e000      	b.n	800b162 <USBD_GetString+0x86>
    return;
 800b160:	bf00      	nop
  }
}
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b178:	e005      	b.n	800b186 <USBD_GetLen+0x1e>
  {
    len++;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	3301      	adds	r3, #1
 800b17e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	3301      	adds	r3, #1
 800b184:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1f5      	bne.n	800b17a <USBD_GetLen+0x12>
  }

  return len;
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 fde0 	bl	800bd88 <USBD_LL_Transmit>

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 fdcf 	bl	800bd88 <USBD_LL_Transmit>

  return USBD_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2203      	movs	r2, #3
 800b204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	2100      	movs	r1, #0
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fdea 	bl	800bdf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	2100      	movs	r1, #0
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 fdd9 	bl	800bdf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2204      	movs	r2, #4
 800b25c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b260:	2300      	movs	r3, #0
 800b262:	2200      	movs	r2, #0
 800b264:	2100      	movs	r1, #0
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fd8e 	bl	800bd88 <USBD_LL_Transmit>

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b082      	sub	sp, #8
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2205      	movs	r2, #5
 800b282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b286:	2300      	movs	r3, #0
 800b288:	2200      	movs	r2, #0
 800b28a:	2100      	movs	r1, #0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fdb3 	bl	800bdf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b2b2:	4b1f      	ldr	r3, [pc, #124]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2b4:	7a5b      	ldrb	r3, [r3, #9]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d131      	bne.n	800b320 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b2bc:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2be:	7a5b      	ldrb	r3, [r3, #9]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2ca:	4b19      	ldr	r3, [pc, #100]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2cc:	7a5b      	ldrb	r3, [r3, #9]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	4a17      	ldr	r2, [pc, #92]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2da:	4b15      	ldr	r3, [pc, #84]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2dc:	7a5b      	ldrb	r3, [r3, #9]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	4b13      	ldr	r3, [pc, #76]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2e4:	4413      	add	r3, r2
 800b2e6:	79fa      	ldrb	r2, [r7, #7]
 800b2e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2ea:	4b11      	ldr	r3, [pc, #68]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2ec:	7a5b      	ldrb	r3, [r3, #9]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	b2d1      	uxtb	r1, r2
 800b2f4:	4a0e      	ldr	r2, [pc, #56]	; (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2f6:	7251      	strb	r1, [r2, #9]
 800b2f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2fa:	7dbb      	ldrb	r3, [r7, #22]
 800b2fc:	3330      	adds	r3, #48	; 0x30
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	3301      	adds	r3, #1
 800b308:	223a      	movs	r2, #58	; 0x3a
 800b30a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3302      	adds	r3, #2
 800b310:	222f      	movs	r2, #47	; 0x2f
 800b312:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3303      	adds	r3, #3
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
}
 800b322:	4618      	mov	r0, r3
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	200002a8 	.word	0x200002a8

0800b334 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b33e:	2200      	movs	r2, #0
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff ffaa 	bl	800b29c <FATFS_LinkDriverEx>
 800b348:	4603      	mov	r3, r0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b358:	2200      	movs	r2, #0
 800b35a:	4912      	ldr	r1, [pc, #72]	; (800b3a4 <MX_USB_DEVICE_Init+0x50>)
 800b35c:	4812      	ldr	r0, [pc, #72]	; (800b3a8 <MX_USB_DEVICE_Init+0x54>)
 800b35e:	f7fe fc7b 	bl	8009c58 <USBD_Init>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b368:	f7f5 f906 	bl	8000578 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b36c:	490f      	ldr	r1, [pc, #60]	; (800b3ac <MX_USB_DEVICE_Init+0x58>)
 800b36e:	480e      	ldr	r0, [pc, #56]	; (800b3a8 <MX_USB_DEVICE_Init+0x54>)
 800b370:	f7fe fca2 	bl	8009cb8 <USBD_RegisterClass>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b37a:	f7f5 f8fd 	bl	8000578 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b37e:	490c      	ldr	r1, [pc, #48]	; (800b3b0 <MX_USB_DEVICE_Init+0x5c>)
 800b380:	4809      	ldr	r0, [pc, #36]	; (800b3a8 <MX_USB_DEVICE_Init+0x54>)
 800b382:	f7fe fbd9 	bl	8009b38 <USBD_CDC_RegisterInterface>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b38c:	f7f5 f8f4 	bl	8000578 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b390:	4805      	ldr	r0, [pc, #20]	; (800b3a8 <MX_USB_DEVICE_Init+0x54>)
 800b392:	f7fe fcc7 	bl	8009d24 <USBD_Start>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b39c:	f7f5 f8ec 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3a0:	bf00      	nop
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	200000ac 	.word	0x200000ac
 800b3a8:	200002b4 	.word	0x200002b4
 800b3ac:	20000018 	.word	0x20000018
 800b3b0:	20000098 	.word	0x20000098

0800b3b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4905      	ldr	r1, [pc, #20]	; (800b3d0 <CDC_Init_FS+0x1c>)
 800b3bc:	4805      	ldr	r0, [pc, #20]	; (800b3d4 <CDC_Init_FS+0x20>)
 800b3be:	f7fe fbd5 	bl	8009b6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3c2:	4905      	ldr	r1, [pc, #20]	; (800b3d8 <CDC_Init_FS+0x24>)
 800b3c4:	4803      	ldr	r0, [pc, #12]	; (800b3d4 <CDC_Init_FS+0x20>)
 800b3c6:	f7fe fbf3 	bl	8009bb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	20000d90 	.word	0x20000d90
 800b3d4:	200002b4 	.word	0x200002b4
 800b3d8:	20000590 	.word	0x20000590

0800b3dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	2b23      	cmp	r3, #35	; 0x23
 800b400:	d84a      	bhi.n	800b498 <CDC_Control_FS+0xac>
 800b402:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <CDC_Control_FS+0x1c>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b499 	.word	0x0800b499
 800b40c:	0800b499 	.word	0x0800b499
 800b410:	0800b499 	.word	0x0800b499
 800b414:	0800b499 	.word	0x0800b499
 800b418:	0800b499 	.word	0x0800b499
 800b41c:	0800b499 	.word	0x0800b499
 800b420:	0800b499 	.word	0x0800b499
 800b424:	0800b499 	.word	0x0800b499
 800b428:	0800b499 	.word	0x0800b499
 800b42c:	0800b499 	.word	0x0800b499
 800b430:	0800b499 	.word	0x0800b499
 800b434:	0800b499 	.word	0x0800b499
 800b438:	0800b499 	.word	0x0800b499
 800b43c:	0800b499 	.word	0x0800b499
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b499 	.word	0x0800b499
 800b448:	0800b499 	.word	0x0800b499
 800b44c:	0800b499 	.word	0x0800b499
 800b450:	0800b499 	.word	0x0800b499
 800b454:	0800b499 	.word	0x0800b499
 800b458:	0800b499 	.word	0x0800b499
 800b45c:	0800b499 	.word	0x0800b499
 800b460:	0800b499 	.word	0x0800b499
 800b464:	0800b499 	.word	0x0800b499
 800b468:	0800b499 	.word	0x0800b499
 800b46c:	0800b499 	.word	0x0800b499
 800b470:	0800b499 	.word	0x0800b499
 800b474:	0800b499 	.word	0x0800b499
 800b478:	0800b499 	.word	0x0800b499
 800b47c:	0800b499 	.word	0x0800b499
 800b480:	0800b499 	.word	0x0800b499
 800b484:	0800b499 	.word	0x0800b499
 800b488:	0800b499 	.word	0x0800b499
 800b48c:	0800b499 	.word	0x0800b499
 800b490:	0800b499 	.word	0x0800b499
 800b494:	0800b499 	.word	0x0800b499
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b498:	bf00      	nop
  }

  return (USBD_OK);
 800b49a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	4805      	ldr	r0, [pc, #20]	; (800b4cc <CDC_Receive_FS+0x24>)
 800b4b6:	f7fe fb7b 	bl	8009bb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4ba:	4804      	ldr	r0, [pc, #16]	; (800b4cc <CDC_Receive_FS+0x24>)
 800b4bc:	f7fe fb96 	bl	8009bec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	200002b4 	.word	0x200002b4

0800b4d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	371c      	adds	r7, #28
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	6039      	str	r1, [r7, #0]
 800b4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2212      	movs	r2, #18
 800b504:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b506:	4b03      	ldr	r3, [pc, #12]	; (800b514 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	200000cc 	.word	0x200000cc

0800b518 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	6039      	str	r1, [r7, #0]
 800b522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2204      	movs	r2, #4
 800b528:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	200000ec 	.word	0x200000ec

0800b53c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	6039      	str	r1, [r7, #0]
 800b546:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b548:	79fb      	ldrb	r3, [r7, #7]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d105      	bne.n	800b55a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	4907      	ldr	r1, [pc, #28]	; (800b570 <USBD_FS_ProductStrDescriptor+0x34>)
 800b552:	4808      	ldr	r0, [pc, #32]	; (800b574 <USBD_FS_ProductStrDescriptor+0x38>)
 800b554:	f7ff fdc2 	bl	800b0dc <USBD_GetString>
 800b558:	e004      	b.n	800b564 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	4904      	ldr	r1, [pc, #16]	; (800b570 <USBD_FS_ProductStrDescriptor+0x34>)
 800b55e:	4805      	ldr	r0, [pc, #20]	; (800b574 <USBD_FS_ProductStrDescriptor+0x38>)
 800b560:	f7ff fdbc 	bl	800b0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b564:	4b02      	ldr	r3, [pc, #8]	; (800b570 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20001590 	.word	0x20001590
 800b574:	0800bfd8 	.word	0x0800bfd8

0800b578 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	4904      	ldr	r1, [pc, #16]	; (800b598 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b588:	4804      	ldr	r0, [pc, #16]	; (800b59c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b58a:	f7ff fda7 	bl	800b0dc <USBD_GetString>
  return USBD_StrDesc;
 800b58e:	4b02      	ldr	r3, [pc, #8]	; (800b598 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20001590 	.word	0x20001590
 800b59c:	0800bff0 	.word	0x0800bff0

0800b5a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	6039      	str	r1, [r7, #0]
 800b5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	221a      	movs	r2, #26
 800b5b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5b2:	f000 f855 	bl	800b660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b5b6:	4b02      	ldr	r3, [pc, #8]	; (800b5c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	200000f0 	.word	0x200000f0

0800b5c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	6039      	str	r1, [r7, #0]
 800b5ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	4907      	ldr	r1, [pc, #28]	; (800b5f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5da:	4808      	ldr	r0, [pc, #32]	; (800b5fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5dc:	f7ff fd7e 	bl	800b0dc <USBD_GetString>
 800b5e0:	e004      	b.n	800b5ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	4904      	ldr	r1, [pc, #16]	; (800b5f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5e6:	4805      	ldr	r0, [pc, #20]	; (800b5fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5e8:	f7ff fd78 	bl	800b0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5ec:	4b02      	ldr	r3, [pc, #8]	; (800b5f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20001590 	.word	0x20001590
 800b5fc:	0800c004 	.word	0x0800c004

0800b600 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	6039      	str	r1, [r7, #0]
 800b60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	4907      	ldr	r1, [pc, #28]	; (800b634 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b616:	4808      	ldr	r0, [pc, #32]	; (800b638 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b618:	f7ff fd60 	bl	800b0dc <USBD_GetString>
 800b61c:	e004      	b.n	800b628 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4904      	ldr	r1, [pc, #16]	; (800b634 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b622:	4805      	ldr	r0, [pc, #20]	; (800b638 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b624:	f7ff fd5a 	bl	800b0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20001590 	.word	0x20001590
 800b638:	0800c010 	.word	0x0800c010

0800b63c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	220c      	movs	r2, #12
 800b64c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b64e:	4b03      	ldr	r3, [pc, #12]	; (800b65c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b650:	4618      	mov	r0, r3
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	200000e0 	.word	0x200000e0

0800b660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <Get_SerialNum+0x44>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b66c:	4b0e      	ldr	r3, [pc, #56]	; (800b6a8 <Get_SerialNum+0x48>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b672:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <Get_SerialNum+0x4c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d009      	beq.n	800b69a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b686:	2208      	movs	r2, #8
 800b688:	4909      	ldr	r1, [pc, #36]	; (800b6b0 <Get_SerialNum+0x50>)
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 f814 	bl	800b6b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b690:	2204      	movs	r2, #4
 800b692:	4908      	ldr	r1, [pc, #32]	; (800b6b4 <Get_SerialNum+0x54>)
 800b694:	68b8      	ldr	r0, [r7, #8]
 800b696:	f000 f80f 	bl	800b6b8 <IntToUnicode>
  }
}
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	1fff7590 	.word	0x1fff7590
 800b6a8:	1fff7594 	.word	0x1fff7594
 800b6ac:	1fff7598 	.word	0x1fff7598
 800b6b0:	200000f2 	.word	0x200000f2
 800b6b4:	20000102 	.word	0x20000102

0800b6b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
 800b6ce:	e027      	b.n	800b720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	0f1b      	lsrs	r3, r3, #28
 800b6d4:	2b09      	cmp	r3, #9
 800b6d6:	d80b      	bhi.n	800b6f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	0f1b      	lsrs	r3, r3, #28
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	440b      	add	r3, r1
 800b6e8:	3230      	adds	r2, #48	; 0x30
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	e00a      	b.n	800b706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	0f1b      	lsrs	r3, r3, #28
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	440b      	add	r3, r1
 800b700:	3237      	adds	r2, #55	; 0x37
 800b702:	b2d2      	uxtb	r2, r2
 800b704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	3301      	adds	r3, #1
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	4413      	add	r3, r2
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	3301      	adds	r3, #1
 800b71e:	75fb      	strb	r3, [r7, #23]
 800b720:	7dfa      	ldrb	r2, [r7, #23]
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	429a      	cmp	r2, r3
 800b726:	d3d3      	bcc.n	800b6d0 <IntToUnicode+0x18>
  }
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
	...

0800b738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b740:	f107 0314 	add.w	r3, r7, #20
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	605a      	str	r2, [r3, #4]
 800b74a:	609a      	str	r2, [r3, #8]
 800b74c:	60da      	str	r2, [r3, #12]
 800b74e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b758:	d14e      	bne.n	800b7f8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b75a:	4b29      	ldr	r3, [pc, #164]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b75e:	4a28      	ldr	r2, [pc, #160]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b760:	f043 0301 	orr.w	r3, r3, #1
 800b764:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b766:	4b26      	ldr	r3, [pc, #152]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b76a:	f003 0301 	and.w	r3, r3, #1
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b778:	2302      	movs	r3, #2
 800b77a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b780:	2303      	movs	r3, #3
 800b782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b784:	230a      	movs	r3, #10
 800b786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b788:	f107 0314 	add.w	r3, r7, #20
 800b78c:	4619      	mov	r1, r3
 800b78e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b792:	f7f5 fd67 	bl	8001264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b796:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b79a:	4a19      	ldr	r2, [pc, #100]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b79c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7ae:	4b14      	ldr	r3, [pc, #80]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d114      	bne.n	800b7e4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7ba:	4b11      	ldr	r3, [pc, #68]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7be:	4a10      	ldr	r2, [pc, #64]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7c4:	6593      	str	r3, [r2, #88]	; 0x58
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ce:	60bb      	str	r3, [r7, #8]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800b7d2:	f7f7 ff2d 	bl	8003630 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7d6:	4b0a      	ldr	r3, [pc, #40]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7da:	4a09      	ldr	r2, [pc, #36]	; (800b800 <HAL_PCD_MspInit+0xc8>)
 800b7dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e2:	e001      	b.n	800b7e8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b7e4:	f7f7 ff24 	bl	8003630 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	2043      	movs	r0, #67	; 0x43
 800b7ee:	f7f5 faca 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7f2:	2043      	movs	r0, #67	; 0x43
 800b7f4:	f7f5 fae3 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	3728      	adds	r7, #40	; 0x28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	40021000 	.word	0x40021000

0800b804 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fe facf 	bl	8009dbe <USBD_LL_SetupStage>
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	4613      	mov	r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	440b      	add	r3, r1
 800b848:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	4619      	mov	r1, r3
 800b852:	f7fe fb09 	bl	8009e68 <USBD_LL_DataOutStage>
}
 800b856:	bf00      	nop
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	460b      	mov	r3, r1
 800b868:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	4613      	mov	r3, r2
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	440b      	add	r3, r1
 800b87e:	3348      	adds	r3, #72	; 0x48
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	78fb      	ldrb	r3, [r7, #3]
 800b884:	4619      	mov	r1, r3
 800b886:	f7fe fba2 	bl	8009fce <USBD_LL_DataInStage>
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe fcdc 	bl	800a25e <USBD_LL_SOF>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d001      	beq.n	800b8c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8c2:	f7f4 fe59 	bl	8000578 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8cc:	7bfa      	ldrb	r2, [r7, #15]
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fc80 	bl	800a1d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fc28 	bl	800a132 <USBD_LL_Reset>
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	6812      	ldr	r2, [r2, #0]
 800b902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe fc6f 	bl	800a1f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <HAL_PCD_SuspendCallback+0x48>)
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	4a03      	ldr	r2, [pc, #12]	; (800b934 <HAL_PCD_SuspendCallback+0x48>)
 800b926:	f043 0306 	orr.w	r3, r3, #6
 800b92a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	e000ed00 	.word	0xe000ed00

0800b938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6812      	ldr	r2, [r2, #0]
 800b94e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b952:	f023 0301 	bic.w	r3, r3, #1
 800b956:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d007      	beq.n	800b970 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b960:	4b08      	ldr	r3, [pc, #32]	; (800b984 <HAL_PCD_ResumeCallback+0x4c>)
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	4a07      	ldr	r2, [pc, #28]	; (800b984 <HAL_PCD_ResumeCallback+0x4c>)
 800b966:	f023 0306 	bic.w	r3, r3, #6
 800b96a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b96c:	f000 faf6 	bl	800bf5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fc59 	bl	800a22e <USBD_LL_Resume>
}
 800b97c:	bf00      	nop
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	e000ed00 	.word	0xe000ed00

0800b988 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fcaf 	bl	800a302 <USBD_LL_IsoOUTIncomplete>
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9be:	78fa      	ldrb	r2, [r7, #3]
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fc6b 	bl	800a29e <USBD_LL_IsoINIncomplete>
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fe fcc1 	bl	800a366 <USBD_LL_DevConnected>
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fcbe 	bl	800a37c <USBD_LL_DevDisconnected>
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d13c      	bne.n	800ba92 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba18:	4a20      	ldr	r2, [pc, #128]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a1e      	ldr	r2, [pc, #120]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba28:	4b1c      	ldr	r3, [pc, #112]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ba30:	4b1a      	ldr	r3, [pc, #104]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba32:	2206      	movs	r2, #6
 800ba34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba36:	4b19      	ldr	r3, [pc, #100]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba38:	2202      	movs	r2, #2
 800ba3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba3c:	4b17      	ldr	r3, [pc, #92]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba3e:	2202      	movs	r2, #2
 800ba40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba42:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba48:	4b14      	ldr	r3, [pc, #80]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ba54:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba5a:	4b10      	ldr	r3, [pc, #64]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba60:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba66:	480d      	ldr	r0, [pc, #52]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba68:	f7f6 fbd7 	bl	800221a <HAL_PCD_Init>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ba72:	f7f4 fd81 	bl	8000578 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba76:	2180      	movs	r1, #128	; 0x80
 800ba78:	4808      	ldr	r0, [pc, #32]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba7a:	f7f7 fd40 	bl	80034fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba7e:	2240      	movs	r2, #64	; 0x40
 800ba80:	2100      	movs	r1, #0
 800ba82:	4806      	ldr	r0, [pc, #24]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba84:	f7f7 fcf4 	bl	8003470 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba88:	2280      	movs	r2, #128	; 0x80
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	4803      	ldr	r0, [pc, #12]	; (800ba9c <USBD_LL_Init+0x94>)
 800ba8e:	f7f7 fcef 	bl	8003470 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	20001790 	.word	0x20001790

0800baa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7f6 fcd3 	bl	8002462 <HAL_PCD_Start>
 800babc:	4603      	mov	r3, r0
 800babe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d816      	bhi.n	800baf4 <USBD_LL_Start+0x54>
 800bac6:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <USBD_LL_Start+0x2c>)
 800bac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bacc:	0800badd 	.word	0x0800badd
 800bad0:	0800bae3 	.word	0x0800bae3
 800bad4:	0800bae9 	.word	0x0800bae9
 800bad8:	0800baef 	.word	0x0800baef
    case HAL_OK :
      usb_status = USBD_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
    break;
 800bae0:	e00b      	b.n	800bafa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bae2:	2303      	movs	r3, #3
 800bae4:	73fb      	strb	r3, [r7, #15]
    break;
 800bae6:	e008      	b.n	800bafa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bae8:	2301      	movs	r3, #1
 800baea:	73fb      	strb	r3, [r7, #15]
    break;
 800baec:	e005      	b.n	800bafa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800baee:	2303      	movs	r3, #3
 800baf0:	73fb      	strb	r3, [r7, #15]
    break;
 800baf2:	e002      	b.n	800bafa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	73fb      	strb	r3, [r7, #15]
    break;
 800baf8:	bf00      	nop
  }
  return usb_status;
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	461a      	mov	r2, r3
 800bb12:	4603      	mov	r3, r0
 800bb14:	70fb      	strb	r3, [r7, #3]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70bb      	strb	r3, [r7, #2]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb2c:	78bb      	ldrb	r3, [r7, #2]
 800bb2e:	883a      	ldrh	r2, [r7, #0]
 800bb30:	78f9      	ldrb	r1, [r7, #3]
 800bb32:	f7f7 f97d 	bl	8002e30 <HAL_PCD_EP_Open>
 800bb36:	4603      	mov	r3, r0
 800bb38:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d817      	bhi.n	800bb70 <USBD_LL_OpenEP+0x6c>
 800bb40:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <USBD_LL_OpenEP+0x44>)
 800bb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb46:	bf00      	nop
 800bb48:	0800bb59 	.word	0x0800bb59
 800bb4c:	0800bb5f 	.word	0x0800bb5f
 800bb50:	0800bb65 	.word	0x0800bb65
 800bb54:	0800bb6b 	.word	0x0800bb6b
    case HAL_OK :
      usb_status = USBD_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5c:	e00b      	b.n	800bb76 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	73fb      	strb	r3, [r7, #15]
    break;
 800bb62:	e008      	b.n	800bb76 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb64:	2301      	movs	r3, #1
 800bb66:	73fb      	strb	r3, [r7, #15]
    break;
 800bb68:	e005      	b.n	800bb76 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb6e:	e002      	b.n	800bb76 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bb70:	2303      	movs	r3, #3
 800bb72:	73fb      	strb	r3, [r7, #15]
    break;
 800bb74:	bf00      	nop
  }
  return usb_status;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb9a:	78fa      	ldrb	r2, [r7, #3]
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f7 f9ae 	bl	8002f00 <HAL_PCD_EP_Close>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d816      	bhi.n	800bbdc <USBD_LL_CloseEP+0x5c>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <USBD_LL_CloseEP+0x34>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bbc5 	.word	0x0800bbc5
 800bbb8:	0800bbcb 	.word	0x0800bbcb
 800bbbc:	0800bbd1 	.word	0x0800bbd1
 800bbc0:	0800bbd7 	.word	0x0800bbd7
    case HAL_OK :
      usb_status = USBD_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc8:	e00b      	b.n	800bbe2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbce:	e008      	b.n	800bbe2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd4:	e005      	b.n	800bbe2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbda:	e002      	b.n	800bbe2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe0:	bf00      	nop
  }
  return usb_status;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc06:	78fa      	ldrb	r2, [r7, #3]
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f7 fa3d 	bl	800308a <HAL_PCD_EP_SetStall>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d816      	bhi.n	800bc48 <USBD_LL_StallEP+0x5c>
 800bc1a:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <USBD_LL_StallEP+0x34>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc31 	.word	0x0800bc31
 800bc24:	0800bc37 	.word	0x0800bc37
 800bc28:	0800bc3d 	.word	0x0800bc3d
 800bc2c:	0800bc43 	.word	0x0800bc43
    case HAL_OK :
      usb_status = USBD_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
    break;
 800bc34:	e00b      	b.n	800bc4e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc36:	2303      	movs	r3, #3
 800bc38:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3a:	e008      	b.n	800bc4e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc40:	e005      	b.n	800bc4e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc42:	2303      	movs	r3, #3
 800bc44:	73fb      	strb	r3, [r7, #15]
    break;
 800bc46:	e002      	b.n	800bc4e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4c:	bf00      	nop
  }
  return usb_status;
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7f7 fa69 	bl	800314e <HAL_PCD_EP_ClrStall>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d816      	bhi.n	800bcb4 <USBD_LL_ClearStallEP+0x5c>
 800bc86:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <USBD_LL_ClearStallEP+0x34>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bc9d 	.word	0x0800bc9d
 800bc90:	0800bca3 	.word	0x0800bca3
 800bc94:	0800bca9 	.word	0x0800bca9
 800bc98:	0800bcaf 	.word	0x0800bcaf
    case HAL_OK :
      usb_status = USBD_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bca0:	e00b      	b.n	800bcba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bca2:	2303      	movs	r3, #3
 800bca4:	73fb      	strb	r3, [r7, #15]
    break;
 800bca6:	e008      	b.n	800bcba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcac:	e005      	b.n	800bcba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb2:	e002      	b.n	800bcba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb8:	bf00      	nop
  }
  return usb_status;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	da0b      	bge.n	800bcf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	4613      	mov	r3, r2
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	333e      	adds	r3, #62	; 0x3e
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	e00b      	b.n	800bd10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	4613      	mov	r3, r2
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	4413      	add	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bd0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd36:	78fa      	ldrb	r2, [r7, #3]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f7 f853 	bl	8002de6 <HAL_PCD_SetAddress>
 800bd40:	4603      	mov	r3, r0
 800bd42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d816      	bhi.n	800bd78 <USBD_LL_SetUSBAddress+0x5c>
 800bd4a:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <USBD_LL_SetUSBAddress+0x34>)
 800bd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd50:	0800bd61 	.word	0x0800bd61
 800bd54:	0800bd67 	.word	0x0800bd67
 800bd58:	0800bd6d 	.word	0x0800bd6d
 800bd5c:	0800bd73 	.word	0x0800bd73
    case HAL_OK :
      usb_status = USBD_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]
    break;
 800bd64:	e00b      	b.n	800bd7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6a:	e008      	b.n	800bd7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd70:	e005      	b.n	800bd7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd72:	2303      	movs	r3, #3
 800bd74:	73fb      	strb	r3, [r7, #15]
    break;
 800bd76:	e002      	b.n	800bd7e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd7c:	bf00      	nop
  }
  return usb_status;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	607a      	str	r2, [r7, #4]
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	460b      	mov	r3, r1
 800bd96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bda6:	7af9      	ldrb	r1, [r7, #11]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	f7f7 f93c 	bl	8003028 <HAL_PCD_EP_Transmit>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bdb4:	7dbb      	ldrb	r3, [r7, #22]
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d816      	bhi.n	800bde8 <USBD_LL_Transmit+0x60>
 800bdba:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <USBD_LL_Transmit+0x38>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd1 	.word	0x0800bdd1
 800bdc4:	0800bdd7 	.word	0x0800bdd7
 800bdc8:	0800bddd 	.word	0x0800bddd
 800bdcc:	0800bde3 	.word	0x0800bde3
    case HAL_OK :
      usb_status = USBD_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75fb      	strb	r3, [r7, #23]
    break;
 800bdd4:	e00b      	b.n	800bdee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	75fb      	strb	r3, [r7, #23]
    break;
 800bdda:	e008      	b.n	800bdee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bddc:	2301      	movs	r3, #1
 800bdde:	75fb      	strb	r3, [r7, #23]
    break;
 800bde0:	e005      	b.n	800bdee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bde2:	2303      	movs	r3, #3
 800bde4:	75fb      	strb	r3, [r7, #23]
    break;
 800bde6:	e002      	b.n	800bdee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bde8:	2303      	movs	r3, #3
 800bdea:	75fb      	strb	r3, [r7, #23]
    break;
 800bdec:	bf00      	nop
  }
  return usb_status;
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	607a      	str	r2, [r7, #4]
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	460b      	mov	r3, r1
 800be06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be16:	7af9      	ldrb	r1, [r7, #11]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	f7f7 f8ba 	bl	8002f94 <HAL_PCD_EP_Receive>
 800be20:	4603      	mov	r3, r0
 800be22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800be24:	7dbb      	ldrb	r3, [r7, #22]
 800be26:	2b03      	cmp	r3, #3
 800be28:	d816      	bhi.n	800be58 <USBD_LL_PrepareReceive+0x60>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <USBD_LL_PrepareReceive+0x38>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be41 	.word	0x0800be41
 800be34:	0800be47 	.word	0x0800be47
 800be38:	0800be4d 	.word	0x0800be4d
 800be3c:	0800be53 	.word	0x0800be53
    case HAL_OK :
      usb_status = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	75fb      	strb	r3, [r7, #23]
    break;
 800be44:	e00b      	b.n	800be5e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be46:	2303      	movs	r3, #3
 800be48:	75fb      	strb	r3, [r7, #23]
    break;
 800be4a:	e008      	b.n	800be5e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be4c:	2301      	movs	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]
    break;
 800be50:	e005      	b.n	800be5e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	75fb      	strb	r3, [r7, #23]
    break;
 800be56:	e002      	b.n	800be5e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	75fb      	strb	r3, [r7, #23]
    break;
 800be5c:	bf00      	nop
  }
  return usb_status;
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be7a:	78fa      	ldrb	r2, [r7, #3]
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f7 f8ba 	bl	8002ff8 <HAL_PCD_EP_GetRxCount>
 800be84:	4603      	mov	r3, r0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <HAL_PCDEx_LPM_Callback+0x18>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d01f      	beq.n	800bee6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bea6:	e03b      	b.n	800bf20 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d007      	beq.n	800bec0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800beb0:	f000 f854 	bl	800bf5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beb4:	4b1c      	ldr	r3, [pc, #112]	; (800bf28 <HAL_PCDEx_LPM_Callback+0x98>)
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	4a1b      	ldr	r2, [pc, #108]	; (800bf28 <HAL_PCDEx_LPM_Callback+0x98>)
 800beba:	f023 0306 	bic.w	r3, r3, #6
 800bebe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	6812      	ldr	r2, [r2, #0]
 800bece:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bed2:	f023 0301 	bic.w	r3, r3, #1
 800bed6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe f9a5 	bl	800a22e <USBD_LL_Resume>
    break;
 800bee4:	e01c      	b.n	800bf20 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	6812      	ldr	r2, [r2, #0]
 800bef4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bef8:	f043 0301 	orr.w	r3, r3, #1
 800befc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe f976 	bl	800a1f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a1b      	ldr	r3, [r3, #32]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d005      	beq.n	800bf1e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	4a04      	ldr	r2, [pc, #16]	; (800bf28 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf18:	f043 0306 	orr.w	r3, r3, #6
 800bf1c:	6113      	str	r3, [r2, #16]
    break;
 800bf1e:	bf00      	nop
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	e000ed00 	.word	0xe000ed00

0800bf2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf34:	4b03      	ldr	r3, [pc, #12]	; (800bf44 <USBD_static_malloc+0x18>)
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	20001c9c 	.word	0x20001c9c

0800bf48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]

}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bf60:	f7f4 f99a 	bl	8000298 <SystemClock_Config>
}
 800bf64:	bf00      	nop
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <memset>:
 800bf68:	4402      	add	r2, r0
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d100      	bne.n	800bf72 <memset+0xa>
 800bf70:	4770      	bx	lr
 800bf72:	f803 1b01 	strb.w	r1, [r3], #1
 800bf76:	e7f9      	b.n	800bf6c <memset+0x4>

0800bf78 <__libc_init_array>:
 800bf78:	b570      	push	{r4, r5, r6, lr}
 800bf7a:	4d0d      	ldr	r5, [pc, #52]	; (800bfb0 <__libc_init_array+0x38>)
 800bf7c:	4c0d      	ldr	r4, [pc, #52]	; (800bfb4 <__libc_init_array+0x3c>)
 800bf7e:	1b64      	subs	r4, r4, r5
 800bf80:	10a4      	asrs	r4, r4, #2
 800bf82:	2600      	movs	r6, #0
 800bf84:	42a6      	cmp	r6, r4
 800bf86:	d109      	bne.n	800bf9c <__libc_init_array+0x24>
 800bf88:	4d0b      	ldr	r5, [pc, #44]	; (800bfb8 <__libc_init_array+0x40>)
 800bf8a:	4c0c      	ldr	r4, [pc, #48]	; (800bfbc <__libc_init_array+0x44>)
 800bf8c:	f000 f818 	bl	800bfc0 <_init>
 800bf90:	1b64      	subs	r4, r4, r5
 800bf92:	10a4      	asrs	r4, r4, #2
 800bf94:	2600      	movs	r6, #0
 800bf96:	42a6      	cmp	r6, r4
 800bf98:	d105      	bne.n	800bfa6 <__libc_init_array+0x2e>
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa0:	4798      	blx	r3
 800bfa2:	3601      	adds	r6, #1
 800bfa4:	e7ee      	b.n	800bf84 <__libc_init_array+0xc>
 800bfa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfaa:	4798      	blx	r3
 800bfac:	3601      	adds	r6, #1
 800bfae:	e7f2      	b.n	800bf96 <__libc_init_array+0x1e>
 800bfb0:	0800c07c 	.word	0x0800c07c
 800bfb4:	0800c07c 	.word	0x0800c07c
 800bfb8:	0800c07c 	.word	0x0800c07c
 800bfbc:	0800c080 	.word	0x0800c080

0800bfc0 <_init>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr

0800bfcc <_fini>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	bf00      	nop
 800bfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd2:	bc08      	pop	{r3}
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	4770      	bx	lr
