
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08016cf0  08016cf0  00026cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174c0  080174c0  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  080174c0  080174c0  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080174c0  080174c0  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174c0  080174c0  000274c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174c4  080174c4  000274c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080174c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000087ec  200002d4  0801779c  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20008ac0  0801779c  00038ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021305  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000578a  00000000  00000000  0005164c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00056dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  00058950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f065  00000000  00000000  00059e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026f04  00000000  00000000  00088e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbfce  00000000  00000000  000afd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000852c  00000000  00000000  001abd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b4274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016cd8 	.word	0x08016cd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	08016cd8 	.word	0x08016cd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f003 fff5 	bl	8004d08 <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f003 fec3 	bl	8004ad8 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f003 ffc1 	bl	8004d08 <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f003 ffa3 	bl	8004d08 <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f003 fe71 	bl	8004ad8 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]

	// Over Temp gets priority
	if (GPIO_Pin == TEMP_INT_Pin){
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d103      	bne.n	8000e18 <HAL_GPIO_EXTI_Callback+0x18>

		OVERTEMP = 1;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
	else if (GPIO_Pin == IMU_INT_Pin){

		LSM6DSO_FIFO_RDY = 1;

	}
}
 8000e16:	e005      	b.n	8000e24 <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == IMU_INT_Pin){
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d102      	bne.n	8000e24 <HAL_GPIO_EXTI_Callback+0x24>
		LSM6DSO_FIFO_RDY = 1;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000435 	.word	0x20000435
 8000e34:	20000434 	.word	0x20000434

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f002 fff2 	bl	8003e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f87b 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f9a9 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e4a:	f000 f989 	bl	8001160 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e4e:	f000 f8c7 	bl	8000fe0 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e52:	f000 f961 	bl	8001118 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e56:	f010 fd0d 	bl	8011874 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e5a:	f000 f901 	bl	8001060 <MX_RTC_Init>
  MX_FATFS_Init();
 8000e5e:	f00b fc6d 	bl	800c73c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  int attempts = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	4927      	ldr	r1, [pc, #156]	; (8000f08 <main+0xd0>)
 8000e6a:	4828      	ldr	r0, [pc, #160]	; (8000f0c <main+0xd4>)
 8000e6c:	f00f fbe6 	bl	801063c <f_mount>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <main+0xd8>)
 8000e76:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e78:	e008      	b.n	8000e8c <main+0x54>
	  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4922      	ldr	r1, [pc, #136]	; (8000f08 <main+0xd0>)
 8000e7e:	4823      	ldr	r0, [pc, #140]	; (8000f0c <main+0xd4>)
 8000e80:	f00f fbdc 	bl	801063c <f_mount>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <main+0xd8>)
 8000e8a:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <main+0xd8>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <main+0x62>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	ddef      	ble.n	8000e7a <main+0x42>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
  if ( volMakeStatus != FR_OK){
	  Error_Handler();
  }*/
  HAL_Delay(500);
 8000e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9e:	f003 f837 	bl	8003f10 <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000ea2:	220a      	movs	r2, #10
 8000ea4:	491b      	ldr	r1, [pc, #108]	; (8000f14 <main+0xdc>)
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <main+0xe0>)
 8000ea8:	f00f fc0e 	bl	80106c8 <f_open>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <main+0xe4>)
 8000eb2:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <main+0xe4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <main+0x88>
	  Error_Handler();
 8000ebc:	f000 f9e8 	bl	8001290 <Error_Handler>
  }

  f_printf(&SDFile,"TimeStamp,Tag,X,Y,Z");
 8000ec0:	4917      	ldr	r1, [pc, #92]	; (8000f20 <main+0xe8>)
 8000ec2:	4815      	ldr	r0, [pc, #84]	; (8000f18 <main+0xe0>)
 8000ec4:	f010 fa5c 	bl	8011380 <f_printf>

  f_close( &SDFile );
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <main+0xe0>)
 8000eca:	f00f ffae 	bl	8010e2a <f_close>
  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */
  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000ece:	4815      	ldr	r0, [pc, #84]	; (8000f24 <main+0xec>)
 8000ed0:	f000 f9e3 	bl	800129a <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <main+0xf0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <main+0xf4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <main+0xae>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000ee2:	f005 fd95 	bl	8006a10 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

//	  if (LSM6DSO_FIFO_RDY == 1 ){
//		  LSM6DSO_FIFO_RDY = 0;
		  pawprint_readFIFO(&hi2c3, outBUF, &bufferLength, &writeIndex);
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <main+0xf8>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <main+0xfc>)
 8000eea:	4913      	ldr	r1, [pc, #76]	; (8000f38 <main+0x100>)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <main+0xec>)
 8000eee:	f000 fbed 	bl	80016cc <pawprint_readFIFO>
//	  }

		  if ( bufferLength >= (5120) ){
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <main+0xfc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000efa:	dbee      	blt.n	8000eda <main+0xa2>
			  pawprint_WriteSD(&SDFile , outBUF, &bufferLength);
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <main+0xfc>)
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <main+0x100>)
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <main+0xe0>)
 8000f02:	f001 f889 	bl	8002018 <pawprint_WriteSD>
	  if ( OVERTEMP == 1){
 8000f06:	e7e8      	b.n	8000eda <main+0xa2>
 8000f08:	200068c8 	.word	0x200068c8
 8000f0c:	200068cc 	.word	0x200068cc
 8000f10:	20006840 	.word	0x20006840
 8000f14:	08016cf0 	.word	0x08016cf0
 8000f18:	20006afc 	.word	0x20006afc
 8000f1c:	20006841 	.word	0x20006841
 8000f20:	08016cf8 	.word	0x08016cf8
 8000f24:	200002f0 	.word	0x200002f0
 8000f28:	20000434 	.word	0x20000434
 8000f2c:	20000435 	.word	0x20000435
 8000f30:	2000043c 	.word	0x2000043c
 8000f34:	20000438 	.word	0x20000438
 8000f38:	20000440 	.word	0x20000440

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b096      	sub	sp, #88	; 0x58
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2244      	movs	r2, #68	; 0x44
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f012 fa8d 	bl	801346a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f62:	f005 fcef 	bl	8006944 <HAL_PWREx_ControlVoltageScaling>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f6c:	f000 f990 	bl	8001290 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f70:	2309      	movs	r3, #9
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	2303      	movs	r3, #3
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f8e:	2307      	movs	r3, #7
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 fd50 	bl	8006a44 <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000faa:	f000 f971 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 f918 	bl	80071fc <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fd2:	f000 f95d 	bl	8001290 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3758      	adds	r7, #88	; 0x58
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_I2C3_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_I2C3_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_I2C3_Init+0x74>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <MX_I2C3_Init+0x7c>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_I2C3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_I2C3_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_I2C3_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_I2C3_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C3_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_I2C3_Init+0x74>)
 800101c:	f003 fcc0 	bl	80049a0 <HAL_I2C_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001026:	f000 f933 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_I2C3_Init+0x74>)
 800102e:	f004 fa3d 	bl	80054ac <HAL_I2CEx_ConfigAnalogFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 f92a 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_I2C3_Init+0x74>)
 8001040:	f004 fa7f 	bl	8005542 <HAL_I2CEx_ConfigDigitalFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 f921 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002f0 	.word	0x200002f0
 8001058:	40005c00 	.word	0x40005c00
 800105c:	20303e5d 	.word	0x20303e5d

08001060 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_RTC_Init+0xb0>)
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <MX_RTC_Init+0xb4>)
 800107c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_RTC_Init+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_RTC_Init+0xb0>)
 8001086:	227f      	movs	r2, #127	; 0x7f
 8001088:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_RTC_Init+0xb0>)
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_RTC_Init+0xb0>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_RTC_Init+0xb0>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_RTC_Init+0xb0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_RTC_Init+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <MX_RTC_Init+0xb0>)
 80010aa:	f007 fde5 	bl	8008c78 <HAL_RTC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80010b4:	f000 f8ec 	bl	8001290 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <MX_RTC_Init+0xb0>)
 80010d4:	f007 fe58 	bl	8008d88 <HAL_RTC_SetTime>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80010de:	f000 f8d7 	bl	8001290 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010e2:	2301      	movs	r3, #1
 80010e4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010e6:	2301      	movs	r3, #1
 80010e8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_RTC_Init+0xb0>)
 80010fa:	f007 fee2 	bl	8008ec2 <HAL_RTC_SetDate>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001104:	f000 f8c4 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000344 	.word	0x20000344
 8001114:	40002800 	.word	0x40002800

08001118 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <MX_SDMMC1_SD_Init+0x44>)
 8001120:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 1;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001142:	2201      	movs	r2, #1
 8001144:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <MX_SDMMC1_SD_Init+0x40>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDMMC1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000368 	.word	0x20000368
 800115c:	40012800 	.word	0x40012800

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_DMA_Init+0x38>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <MX_DMA_Init+0x38>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6493      	str	r3, [r2, #72]	; 0x48
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_DMA_Init+0x38>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	203b      	movs	r0, #59	; 0x3b
 8001184:	f002 ffc3 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001188:	203b      	movs	r0, #59	; 0x3b
 800118a:	f002 ffdc 	bl	8004146 <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <MX_GPIO_Init+0xec>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <MX_GPIO_Init+0xec>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <MX_GPIO_Init+0xec>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_GPIO_Init+0xec>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <MX_GPIO_Init+0xec>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_GPIO_Init+0xec>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_GPIO_Init+0xec>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <MX_GPIO_Init+0xec>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_GPIO_Init+0xec>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_GPIO_Init+0xec>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <MX_GPIO_Init+0xec>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_GPIO_Init+0xec>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001212:	2304      	movs	r3, #4
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4819      	ldr	r0, [pc, #100]	; (800128c <MX_GPIO_Init+0xf0>)
 8001228:	f003 f9e0 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 800122c:	2308      	movs	r3, #8
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001230:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <MX_GPIO_Init+0xf0>)
 8001242:	f003 f9d3 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_GPIO_Init+0xf0>)
 800125a:	f003 f9c7 	bl	80045ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2008      	movs	r0, #8
 8001264:	f002 ff53 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001268:	2008      	movs	r0, #8
 800126a:	f002 ff6c 	bl	8004146 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2009      	movs	r0, #9
 8001274:	f002 ff4b 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001278:	2009      	movs	r0, #9
 800127a:	f002 ff64 	bl	8004146 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000800 	.word	0x48000800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>

0800129a <pawprint_init>:
//static st_fifo_out_slot acc_slot[126];
//static st_fifo_out_slot gyr_slot[126];

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 80012a2:	2014      	movs	r0, #20
 80012a4:	f002 fe34 	bl	8003f10 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 80012ac:	f107 030d 	add.w	r3, r7, #13
 80012b0:	461a      	mov	r2, r3
 80012b2:	2101      	movs	r1, #1
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fd89 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 80012ba:	2305      	movs	r3, #5
 80012bc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 80012be:	f107 030d 	add.w	r3, r7, #13
 80012c2:	461a      	mov	r2, r3
 80012c4:	2112      	movs	r1, #18
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fd80 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f002 fe1f 	bl	8003f10 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 80012d2:	f107 030f 	add.w	r3, r7, #15
 80012d6:	461a      	mov	r2, r3
 80012d8:	210f      	movs	r1, #15
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd3e 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 80012e4:	f107 030d 	add.w	r3, r7, #13
 80012e8:	461a      	mov	r2, r3
 80012ea:	2101      	movs	r1, #1
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fd6d 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 80012f2:	f107 030e 	add.w	r3, r7, #14
 80012f6:	461a      	mov	r2, r3
 80012f8:	2114      	movs	r1, #20
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fd2e 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	b2db      	uxtb	r3, r3
 8001308:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 800130a:	f107 030e 	add.w	r3, r7, #14
 800130e:	461a      	mov	r2, r3
 8001310:	2114      	movs	r1, #20
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fd5a 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 8001318:	2005      	movs	r0, #5
 800131a:	f002 fdf9 	bl	8003f10 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 800132e:	f107 030e 	add.w	r3, r7, #14
 8001332:	461a      	mov	r2, r3
 8001334:	2114      	movs	r1, #20
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd48 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 8001346:	f107 030e 	add.w	r3, r7, #14
 800134a:	461a      	mov	r2, r3
 800134c:	2114      	movs	r1, #20
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd3c 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 800135e:	f107 030e 	add.w	r3, r7, #14
 8001362:	461a      	mov	r2, r3
 8001364:	2114      	movs	r1, #20
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fd30 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 800136c:	2310      	movs	r3, #16
 800136e:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8001370:	f107 030e 	add.w	r3, r7, #14
 8001374:	461a      	mov	r2, r3
 8001376:	2114      	movs	r1, #20
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fd27 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 8001382:	f107 030d 	add.w	r3, r7, #13
 8001386:	461a      	mov	r2, r3
 8001388:	2101      	movs	r1, #1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fd1e 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	461a      	mov	r2, r3
 8001396:	214f      	movs	r1, #79	; 0x4f
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fcab 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 800139e:	e001      	b.n	80013a4 <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 80013a0:	2323      	movs	r3, #35	; 0x23
 80013a2:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d1fa      	bne.n	80013a0 <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 80013aa:	f107 030d 	add.w	r3, r7, #13
 80013ae:	461a      	mov	r2, r3
 80013b0:	2160      	movs	r1, #96	; 0x60
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fcb8 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 80013b8:	2005      	movs	r0, #5
 80013ba:	f002 fda9 	bl	8003f10 <HAL_Delay>
	RegDat = 0x43;
 80013be:	2343      	movs	r3, #67	; 0x43
 80013c0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 80013c2:	f107 030d 	add.w	r3, r7, #13
 80013c6:	461a      	mov	r2, r3
 80013c8:	2160      	movs	r1, #96	; 0x60
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fcac 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 80013d0:	2014      	movs	r0, #20
 80013d2:	f002 fd9d 	bl	8003f10 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 80013d6:	2310      	movs	r3, #16
 80013d8:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 80013da:	f107 030d 	add.w	r3, r7, #13
 80013de:	461a      	mov	r2, r3
 80013e0:	2162      	movs	r1, #98	; 0x62
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fca0 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 80013e8:	238c      	movs	r3, #140	; 0x8c
 80013ea:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 80013ec:	f107 030d 	add.w	r3, r7, #13
 80013f0:	461a      	mov	r2, r3
 80013f2:	2160      	movs	r1, #96	; 0x60
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fc97 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 80013fa:	f107 030b 	add.w	r3, r7, #11
 80013fe:	461a      	mov	r2, r3
 8001400:	21fd      	movs	r1, #253	; 0xfd
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f002 fbf4 	bl	8003bf0 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 8001408:	f107 030a 	add.w	r3, r7, #10
 800140c:	461a      	mov	r2, r3
 800140e:	21fe      	movs	r1, #254	; 0xfe
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f002 fbed 	bl	8003bf0 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 8001416:	e001      	b.n	800141c <pawprint_init+0x182>

	RegDat = 0x04;
 8001418:	2304      	movs	r3, #4
 800141a:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <pawprint_init+0x18e>
 8001422:	7abb      	ldrb	r3, [r7, #10]
 8001424:	2b53      	cmp	r3, #83	; 0x53
 8001426:	d1f7      	bne.n	8001418 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 8001428:	f107 030d 	add.w	r3, r7, #13
 800142c:	461a      	mov	r2, r3
 800142e:	2104      	movs	r1, #4
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc79 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 8001436:	234b      	movs	r3, #75	; 0x4b
 8001438:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 800143a:	f107 030d 	add.w	r3, r7, #13
 800143e:	461a      	mov	r2, r3
 8001440:	2105      	movs	r1, #5
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc70 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 8001448:	f107 030d 	add.w	r3, r7, #13
 800144c:	461a      	mov	r2, r3
 800144e:	2120      	movs	r1, #32
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fc69 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	461a      	mov	r2, r3
 8001460:	2106      	movs	r1, #6
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc60 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001468:	f107 030d 	add.w	r3, r7, #13
 800146c:	461a      	mov	r2, r3
 800146e:	2107      	movs	r1, #7
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fc59 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 8001476:	f107 030d 	add.w	r3, r7, #13
 800147a:	461a      	mov	r2, r3
 800147c:	2108      	movs	r1, #8
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fc52 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 8001484:	f107 030d 	add.w	r3, r7, #13
 8001488:	461a      	mov	r2, r3
 800148a:	2103      	movs	r1, #3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fc4b 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001496:	f107 030d 	add.w	r3, r7, #13
 800149a:	461a      	mov	r2, r3
 800149c:	2101      	movs	r1, #1
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fc94 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 80014a4:	2064      	movs	r0, #100	; 0x64
 80014a6:	f002 fd33 	bl	8003f10 <HAL_Delay>
	RegDat = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 80014ae:	f107 030d 	add.w	r3, r7, #13
 80014b2:	461a      	mov	r2, r3
 80014b4:	2114      	movs	r1, #20
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fc88 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 80014bc:	f107 030d 	add.w	r3, r7, #13
 80014c0:	461a      	mov	r2, r3
 80014c2:	2101      	movs	r1, #1
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fc81 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 80014ca:	23e2      	movs	r3, #226	; 0xe2
 80014cc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 80014ce:	f107 030d 	add.w	r3, r7, #13
 80014d2:	461a      	mov	r2, r3
 80014d4:	2118      	movs	r1, #24
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fc78 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 80014e0:	f107 030d 	add.w	r3, r7, #13
 80014e4:	461a      	mov	r2, r3
 80014e6:	2110      	movs	r1, #16
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fc6f 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 80014ee:	f107 030d 	add.w	r3, r7, #13
 80014f2:	461a      	mov	r2, r3
 80014f4:	2111      	movs	r1, #17
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fc68 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x32;
 80014fc:	2332      	movs	r3, #50	; 0x32
 80014fe:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 50
 8001500:	f107 030d 	add.w	r3, r7, #13
 8001504:	461a      	mov	r2, r3
 8001506:	2107      	movs	r1, #7
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fc5f 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 8001512:	f107 030d 	add.w	r3, r7, #13
 8001516:	461a      	mov	r2, r3
 8001518:	2108      	movs	r1, #8
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fc56 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x11;
 8001520:	2311      	movs	r3, #17
 8001522:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (12.5Hz both)
 8001524:	f107 030d 	add.w	r3, r7, #13
 8001528:	461a      	mov	r2, r3
 800152a:	2109      	movs	r1, #9
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fc4d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x56;
 8001532:	2356      	movs	r3, #86	; 0x56
 8001534:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);// Set to continuous mode & batch Temp and Timestamp
 8001536:	f107 030d 	add.w	r3, r7, #13
 800153a:	461a      	mov	r2, r3
 800153c:	210a      	movs	r1, #10
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fc44 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00; //RegDat = 0x41;
 8001544:	2300      	movs	r3, #0
 8001546:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 8001548:	f107 030d 	add.w	r3, r7, #13
 800154c:	461a      	mov	r2, r3
 800154e:	2156      	movs	r1, #86	; 0x56
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fc3b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 8001556:	2338      	movs	r3, #56	; 0x38
 8001558:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 800155a:	f107 030d 	add.w	r3, r7, #13
 800155e:	461a      	mov	r2, r3
 8001560:	210d      	movs	r1, #13
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fc32 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 800156c:	f107 030d 	add.w	r3, r7, #13
 8001570:	461a      	mov	r2, r3
 8001572:	2101      	movs	r1, #1
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fc29 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 800157a:	233d      	movs	r3, #61	; 0x3d
 800157c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 800157e:	f107 030d 	add.w	r3, r7, #13
 8001582:	461a      	mov	r2, r3
 8001584:	2115      	movs	r1, #21
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fc20 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 800158c:	2368      	movs	r3, #104	; 0x68
 800158e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 8001590:	f107 030d 	add.w	r3, r7, #13
 8001594:	461a      	mov	r2, r3
 8001596:	2116      	movs	r1, #22
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fc17 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0E;
 800159e:	230e      	movs	r3, #14
 80015a0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read
 80015a2:	f107 030d 	add.w	r3, r7, #13
 80015a6:	461a      	mov	r2, r3
 80015a8:	2117      	movs	r1, #23
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fc0e 	bl	8000dcc <LSM6DSO_WriteReg>

	// STTS751 Peripheral enable
	RegDat = STTS751_I2C_ADDR;
 80015b0:	2372      	movs	r3, #114	; 0x72
 80015b2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
 80015b4:	f107 030d 	add.w	r3, r7, #13
 80015b8:	461a      	mov	r2, r3
 80015ba:	2118      	movs	r1, #24
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fc05 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = STTS751_REG_TEMP_H;
 80015c2:	2300      	movs	r3, #0
 80015c4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
 80015c6:	f107 030d 	add.w	r3, r7, #13
 80015ca:	461a      	mov	r2, r3
 80015cc:	2119      	movs	r1, #25
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fbfc 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0B;
 80015d4:	230b      	movs	r3, #11
 80015d6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
 80015d8:	f107 030d 	add.w	r3, r7, #13
 80015dc:	461a      	mov	r2, r3
 80015de:	211a      	movs	r1, #26
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fbf3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 80015ea:	f107 030d 	add.w	r3, r7, #13
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fbea 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 80015f8:	2344      	movs	r3, #68	; 0x44
 80015fa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 80015fc:	f107 030d 	add.w	r3, r7, #13
 8001600:	461a      	mov	r2, r3
 8001602:	2112      	movs	r1, #18
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fbe1 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 800160a:	2328      	movs	r3, #40	; 0x28
 800160c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 800160e:	f107 030d 	add.w	r3, r7, #13
 8001612:	461a      	mov	r2, r3
 8001614:	2113      	movs	r1, #19
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fbd8 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 800161c:	2310      	movs	r3, #16
 800161e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 8001620:	f107 030d 	add.w	r3, r7, #13
 8001624:	461a      	mov	r2, r3
 8001626:	2115      	movs	r1, #21
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fbcf 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 8001632:	f107 030d 	add.w	r3, r7, #13
 8001636:	461a      	mov	r2, r3
 8001638:	2116      	movs	r1, #22
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fbc6 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 8001640:	2320      	movs	r3, #32
 8001642:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 8001644:	f107 030d 	add.w	r3, r7, #13
 8001648:	461a      	mov	r2, r3
 800164a:	2119      	movs	r1, #25
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fbbd 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 8001656:	f107 030d 	add.w	r3, r7, #13
 800165a:	461a      	mov	r2, r3
 800165c:	2110      	movs	r1, #16
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fbb4 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 8001668:	f107 030d 	add.w	r3, r7, #13
 800166c:	461a      	mov	r2, r3
 800166e:	2111      	movs	r1, #17
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fbab 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 800167a:	f107 030d 	add.w	r3, r7, #13
 800167e:	461a      	mov	r2, r3
 8001680:	2101      	movs	r1, #1
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fba2 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x09;
 8001688:	2309      	movs	r3, #9
 800168a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 800168c:	f107 030d 	add.w	r3, r7, #13
 8001690:	461a      	mov	r2, r3
 8001692:	2114      	movs	r1, #20
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fb99 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = (RegDat ^ 0x04);
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	f083 0304 	eor.w	r3, r3, #4
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable I2C Master
 80016a4:	f107 030d 	add.w	r3, r7, #13
 80016a8:	461a      	mov	r2, r3
 80016aa:	2114      	movs	r1, #20
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fb8d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 80016b6:	f107 030d 	add.w	r3, r7, #13
 80016ba:	461a      	mov	r2, r3
 80016bc:	2101      	movs	r1, #1
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fb84 	bl	8000dcc <LSM6DSO_WriteReg>

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <pawprint_readFIFO>:

/* FIFO read and decode - uses st_fifo repo from STMicro git */

void pawprint_readFIFO( I2C_HandleTypeDef *i2cHandle , char *outBUFFER, int *bufferLength, int *writeIndex){
 80016cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d0:	b0db      	sub	sp, #364	; 0x16c
 80016d2:	af08      	add	r7, sp, #32
 80016d4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80016d8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80016dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	st_fifo_conf FIFOconf;
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
	HAL_StatusTypeDef statusOUT = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
//	FIFO_out_file FIFO_out;

	FIFOconf.device = ST_FIFO_LSM6DSO;
 80016f0:	2305      	movs	r3, #5
 80016f2:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
	FIFOconf.bdr_xl = 104; // 104 - as batching timestamp can set to 0
 80016f6:	4b82      	ldr	r3, [pc, #520]	; (8001900 <pawprint_readFIFO+0x234>)
 80016f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	FIFOconf.bdr_gy = 104;
 80016fc:	4b80      	ldr	r3, [pc, #512]	; (8001900 <pawprint_readFIFO+0x234>)
 80016fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	FIFOconf.bdr_vsens = 104;
 8001702:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <pawprint_readFIFO+0x234>)
 8001704:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	st_fifo_init(&FIFOconf);
 8001708:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fd29 	bl	8002164 <st_fifo_init>
	uint16_t out_slot_size = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

	/* Confirm watermark has been met LSM6DSO_REG_FIFO_STATUS2 */
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[0]); // Getting strange results reading multiple registers here
 8001718:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800171c:	461a      	mov	r2, r3
 800171e:	213a      	movs	r1, #58	; 0x3a
 8001720:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001724:	f7ff fb1a 	bl	8000d5c <LSM6DSO_ReadReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS2, &FIFOstatus[1]);
 8001728:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800172c:	3301      	adds	r3, #1
 800172e:	461a      	mov	r2, r3
 8001730:	213b      	movs	r1, #59	; 0x3b
 8001732:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001736:	f7ff fb11 	bl	8000d5c <LSM6DSO_ReadReg>

	if (((FIFOstatus[1] >> 7)  & 0x01)||((FIFOstatus[1] >> 6)  & 0x01)||((FIFOstatus[1] >> 5)  & 0x01)){ // Check WTM threshold bit, overrun bit and full bit
 800173a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800173e:	09db      	lsrs	r3, r3, #7
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d110      	bne.n	800176c <pawprint_readFIFO+0xa0>
 800174a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <pawprint_readFIFO+0xa0>
 800175a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 844d 	beq.w	8002006 <pawprint_readFIFO+0x93a>
 800176c:	466b      	mov	r3, sp
 800176e:	607b      	str	r3, [r7, #4]
		/* Get number of samples in FIFO*/
		FIFOdepth = ((((uint16_t)FIFOstatus[1] & 0x03) << 8) + (uint16_t)FIFOstatus[0]);
 8001770:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800177c:	b29a      	uxth	r2, r3
 800177e:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
//
//		raw_slot = malloc(FIFOdepth * sizeof(st_fifo_raw_slot));
//		out_slot = malloc(FIFOdepth * 3 * sizeof(st_fifo_out_slot));


		st_fifo_raw_slot raw_slot[FIFOdepth];
 800178a:	f8b7 6146 	ldrh.w	r6, [r7, #326]	; 0x146
 800178e:	4633      	mov	r3, r6
 8001790:	3b01      	subs	r3, #1
 8001792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001796:	b2b3      	uxth	r3, r6
 8001798:	2200      	movs	r2, #0
 800179a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800179e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80017a2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	00d9      	lsls	r1, r3, #3
 80017b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b4:	00d0      	lsls	r0, r2, #3
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80017be:	1a54      	subs	r4, r2, r1
 80017c0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80017c4:	eb63 0501 	sbc.w	r5, r3, r1
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	00eb      	lsls	r3, r5, #3
 80017d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d6:	00e2      	lsls	r2, r4, #3
 80017d8:	b2b3      	uxth	r3, r6
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80017e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80017e4:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80017e8:	4622      	mov	r2, r4
 80017ea:	462b      	mov	r3, r5
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	00d9      	lsls	r1, r3, #3
 80017f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017fa:	00d0      	lsls	r0, r2, #3
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4621      	mov	r1, r4
 8001802:	ebb2 0801 	subs.w	r8, r2, r1
 8001806:	4629      	mov	r1, r5
 8001808:	eb63 0901 	sbc.w	r9, r3, r1
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001818:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800181c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001820:	4632      	mov	r2, r6
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	3307      	adds	r3, #7
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	ebad 0d03 	sub.w	sp, sp, r3
 8001832:	ab08      	add	r3, sp, #32
 8001834:	3300      	adds	r3, #0
 8001836:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		st_fifo_out_slot out_slot[FIFOdepth];
 800183a:	f8b7 1146 	ldrh.w	r1, [r7, #326]	; 0x146
 800183e:	460b      	mov	r3, r1
 8001840:	3b01      	subs	r3, #1
 8001842:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001846:	b28b      	uxth	r3, r1
 8001848:	2200      	movs	r2, #0
 800184a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800184e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001852:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001856:	4622      	mov	r2, r4
 8001858:	462b      	mov	r3, r5
 800185a:	1890      	adds	r0, r2, r2
 800185c:	67b8      	str	r0, [r7, #120]	; 0x78
 800185e:	415b      	adcs	r3, r3
 8001860:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001862:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001866:	4620      	mov	r0, r4
 8001868:	eb12 0a00 	adds.w	sl, r2, r0
 800186c:	4628      	mov	r0, r5
 800186e:	eb43 0b00 	adc.w	fp, r3, r0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800187e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001882:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001886:	b28b      	uxth	r3, r1
 8001888:	2200      	movs	r2, #0
 800188a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800188e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001892:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001896:	4622      	mov	r2, r4
 8001898:	462b      	mov	r3, r5
 800189a:	1890      	adds	r0, r2, r2
 800189c:	6738      	str	r0, [r7, #112]	; 0x70
 800189e:	415b      	adcs	r3, r3
 80018a0:	677b      	str	r3, [r7, #116]	; 0x74
 80018a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018a6:	4620      	mov	r0, r4
 80018a8:	1810      	adds	r0, r2, r0
 80018aa:	66b8      	str	r0, [r7, #104]	; 0x68
 80018ac:	4628      	mov	r0, r5
 80018ae:	eb43 0000 	adc.w	r0, r3, r0
 80018b2:	66f8      	str	r0, [r7, #108]	; 0x6c
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018c0:	4628      	mov	r0, r5
 80018c2:	0143      	lsls	r3, r0, #5
 80018c4:	4620      	mov	r0, r4
 80018c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ca:	4620      	mov	r0, r4
 80018cc:	0142      	lsls	r2, r0, #5
 80018ce:	460a      	mov	r2, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	3307      	adds	r3, #7
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	ebad 0d03 	sub.w	sp, sp, r3
 80018e2:	ab08      	add	r3, sp, #32
 80018e4:	3303      	adds	r3, #3
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		int slots = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

		int streamSize = FIFOdepth;
 80018f4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80018f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

		while(FIFOdepth--) {
 80018fc:	e021      	b.n	8001942 <pawprint_readFIFO+0x276>
 80018fe:	bf00      	nop
 8001900:	42d00000 	.word	0x42d00000

			statusOUT = LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &raw_slot[slots].fifo_data_out[0],7 );
 8001904:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001908:	461a      	mov	r2, r3
 800190a:	00d2      	lsls	r2, r2, #3
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001912:	441a      	add	r2, r3
 8001914:	2307      	movs	r3, #7
 8001916:	2178      	movs	r1, #120	; 0x78
 8001918:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800191c:	f7ff fa38 	bl	8000d90 <LSM6DSO_ReadRegs>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			if(statusOUT != 0x00){
 8001926:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <pawprint_readFIFO+0x26c>
				slots--;
 800192e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001932:	3b01      	subs	r3, #1
 8001934:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			}
			slots++;
 8001938:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800193c:	3301      	adds	r3, #1
 800193e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		while(FIFOdepth--) {
 8001942:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8001946:	1e53      	subs	r3, r2, #1
 8001948:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800194c:	2a00      	cmp	r2, #0
 800194e:	d1d9      	bne.n	8001904 <pawprint_readFIFO+0x238>
		}

		st_fifo_decode(out_slot, raw_slot, &out_slot_size, streamSize);
 8001950:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001954:	b29b      	uxth	r3, r3
 8001956:	f107 02e2 	add.w	r2, r7, #226	; 0xe2
 800195a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800195e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001962:	f000 fcf3 	bl	800234c <st_fifo_decode>
		st_fifo_sort(out_slot, out_slot_size);
 8001966:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 800196a:	4619      	mov	r1, r3
 800196c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001970:	f001 fc9a 	bl	80032a8 <st_fifo_sort>

		uint16_t acc_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 8001974:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001978:	2201      	movs	r2, #1
 800197a:	4619      	mov	r1, r3
 800197c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001980:	f001 fcee 	bl	8003360 <st_fifo_get_sensor_occurrence>
 8001984:	4603      	mov	r3, r0
 8001986:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
		uint16_t gyr_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 800198a:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001996:	f001 fce3 	bl	8003360 <st_fifo_get_sensor_occurrence>
 800199a:	4603      	mov	r3, r0
 800199c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
		//uint16_t temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
		uint16_t mag_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 80019a0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80019a4:	2203      	movs	r2, #3
 80019a6:	4619      	mov	r1, r3
 80019a8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80019ac:	f001 fcd8 	bl	8003360 <st_fifo_get_sensor_occurrence>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
		//uint16_t ext_temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR1);


		st_fifo_out_slot acc_slot[acc_samples * sizeof(st_fifo_out_slot)];
 80019b6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4619      	mov	r1, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80019d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019d6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	1890      	adds	r0, r2, r2
 80019e0:	6638      	str	r0, [r7, #96]	; 0x60
 80019e2:	415b      	adcs	r3, r3
 80019e4:	667b      	str	r3, [r7, #100]	; 0x64
 80019e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019ea:	4620      	mov	r0, r4
 80019ec:	1810      	adds	r0, r2, r0
 80019ee:	65b8      	str	r0, [r7, #88]	; 0x58
 80019f0:	4628      	mov	r0, r5
 80019f2:	eb43 0000 	adc.w	r0, r3, r0
 80019f6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a04:	4628      	mov	r0, r5
 8001a06:	0143      	lsls	r3, r0, #5
 8001a08:	4620      	mov	r0, r4
 8001a0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a0e:	4620      	mov	r0, r4
 8001a10:	0142      	lsls	r2, r0, #5
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a1c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001a20:	4622      	mov	r2, r4
 8001a22:	462b      	mov	r3, r5
 8001a24:	1890      	adds	r0, r2, r2
 8001a26:	6538      	str	r0, [r7, #80]	; 0x50
 8001a28:	415b      	adcs	r3, r3
 8001a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a30:	4620      	mov	r0, r4
 8001a32:	1810      	adds	r0, r2, r0
 8001a34:	64b8      	str	r0, [r7, #72]	; 0x48
 8001a36:	4628      	mov	r0, r5
 8001a38:	eb43 0000 	adc.w	r0, r3, r0
 8001a3c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	0143      	lsls	r3, r0, #5
 8001a4e:	4620      	mov	r0, r4
 8001a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a54:	4620      	mov	r0, r4
 8001a56:	0142      	lsls	r2, r0, #5
 8001a58:	460b      	mov	r3, r1
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	440b      	add	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	3307      	adds	r3, #7
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	ebad 0d03 	sub.w	sp, sp, r3
 8001a6a:	ab08      	add	r3, sp, #32
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		st_fifo_out_slot gyr_slot[gyr_samples * sizeof(st_fifo_out_slot)];
 8001a76:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4619      	mov	r1, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a96:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	1890      	adds	r0, r2, r2
 8001aa0:	6438      	str	r0, [r7, #64]	; 0x40
 8001aa2:	415b      	adcs	r3, r3
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001aaa:	4620      	mov	r0, r4
 8001aac:	1810      	adds	r0, r2, r0
 8001aae:	63b8      	str	r0, [r7, #56]	; 0x38
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	eb43 0000 	adc.w	r0, r3, r0
 8001ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	0143      	lsls	r3, r0, #5
 8001ac8:	4620      	mov	r0, r4
 8001aca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ace:	4620      	mov	r0, r4
 8001ad0:	0142      	lsls	r2, r0, #5
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001ad8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001adc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	462b      	mov	r3, r5
 8001ae4:	1890      	adds	r0, r2, r2
 8001ae6:	6338      	str	r0, [r7, #48]	; 0x30
 8001ae8:	415b      	adcs	r3, r3
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
 8001aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001af0:	4620      	mov	r0, r4
 8001af2:	1810      	adds	r0, r2, r0
 8001af4:	62b8      	str	r0, [r7, #40]	; 0x28
 8001af6:	4628      	mov	r0, r5
 8001af8:	eb43 0000 	adc.w	r0, r3, r0
 8001afc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	0143      	lsls	r3, r0, #5
 8001b0e:	4620      	mov	r0, r4
 8001b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b14:	4620      	mov	r0, r4
 8001b16:	0142      	lsls	r2, r0, #5
 8001b18:	460b      	mov	r3, r1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3307      	adds	r3, #7
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	ebad 0d03 	sub.w	sp, sp, r3
 8001b2a:	ab08      	add	r3, sp, #32
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		st_fifo_out_slot mag_slot[mag_samples * sizeof(st_fifo_out_slot)];
 8001b36:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4619      	mov	r1, r3
 8001b44:	460b      	mov	r3, r1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b56:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	1890      	adds	r0, r2, r2
 8001b60:	6238      	str	r0, [r7, #32]
 8001b62:	415b      	adcs	r3, r3
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	1810      	adds	r0, r2, r0
 8001b6e:	61b8      	str	r0, [r7, #24]
 8001b70:	4628      	mov	r0, r5
 8001b72:	eb43 0000 	adc.w	r0, r3, r0
 8001b76:	61f8      	str	r0, [r7, #28]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001b84:	4628      	mov	r0, r5
 8001b86:	0143      	lsls	r3, r0, #5
 8001b88:	4620      	mov	r0, r4
 8001b8a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b8e:	4620      	mov	r0, r4
 8001b90:	0142      	lsls	r2, r0, #5
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b9c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	1890      	adds	r0, r2, r2
 8001ba6:	6138      	str	r0, [r7, #16]
 8001ba8:	415b      	adcs	r3, r3
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	1810      	adds	r0, r2, r0
 8001bb4:	60b8      	str	r0, [r7, #8]
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	eb43 0000 	adc.w	r0, r3, r0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bca:	4628      	mov	r0, r5
 8001bcc:	0143      	lsls	r3, r0, #5
 8001bce:	4620      	mov	r0, r4
 8001bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	0142      	lsls	r2, r0, #5
 8001bd8:	460b      	mov	r3, r1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	440b      	add	r3, r1
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3307      	adds	r3, #7
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	ebad 0d03 	sub.w	sp, sp, r3
 8001bea:	ab08      	add	r3, sp, #32
 8001bec:	3303      	adds	r3, #3
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
//		st_fifo_out_slot *gyr_slot = malloc(gyr_samples * sizeof(st_fifo_out_slot));
//		//st_fifo_out_slot *temp_slot = malloc(temp_samples * sizeof(st_fifo_out_slot));
//		st_fifo_out_slot *mag_slot = malloc(mag_samples * sizeof(st_fifo_out_slot));
		//st_fifo_out_slot *ext_temp_slot = malloc(ext_temp_samples * sizeof(st_fifo_out_slot));

		st_fifo_extract_sensor(acc_slot, out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 8001bf6:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001c00:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001c04:	f001 fbd6 	bl	80033b4 <st_fifo_extract_sensor>
		st_fifo_extract_sensor(gyr_slot, out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 8001c08:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001c12:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001c16:	f001 fbcd 	bl	80033b4 <st_fifo_extract_sensor>
		//st_fifo_extract_sensor(temp_slot, out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
		st_fifo_extract_sensor(mag_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 8001c1a:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001c24:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001c28:	f001 fbc4 	bl	80033b4 <st_fifo_extract_sensor>
//	    	FIFO_out[row_count].sensor_data.z = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z);
//	    	FIFO_out[row_count].sensor_data.temp = 0;
//	    }


		if (*bufferLength != 0 ){
 8001c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <pawprint_readFIFO+0x576>
			*writeIndex = *bufferLength;
 8001c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c40:	601a      	str	r2, [r3, #0]
		}

		// Convert to real units & add to formatted strings
	    for (int i = 0; i < acc_samples; i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001c48:	e094      	b.n	8001d74 <pawprint_readFIFO+0x6a8>
	    	uint8_t outLength = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001c50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c5c:	189e      	adds	r6, r3, r2
 8001c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f5c3 43c8 	rsb	r3, r3, #25600	; 0x6400
 8001c68:	469a      	mov	sl, r3
 8001c6a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001c6e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    		    			acc_slot[i].timestamp,
	    						acc_slot[i].sensor_tag,
 8001c82:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001c86:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	3304      	adds	r3, #4
 8001c96:	781b      	ldrb	r3, [r3, #0]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x),
 8001c9c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001ca0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3306      	adds	r3, #6
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fa0f 	bl	80020d8 <lsm6dso_from_fs2_to_mg>
 8001cba:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fc42 	bl	8000548 <__aeabi_f2d>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460d      	mov	r5, r1
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y),
 8001cc8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001ccc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	3308      	adds	r3, #8
 8001cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f9f9 	bl	80020d8 <lsm6dso_from_fs2_to_mg>
 8001ce6:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc2c 	bl	8000548 <__aeabi_f2d>
 8001cf0:	4680      	mov	r8, r0
 8001cf2:	4689      	mov	r9, r1
								lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z));
 8001cf4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001cf8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	330a      	adds	r3, #10
 8001d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f9e3 	bl	80020d8 <lsm6dso_from_fs2_to_mg>
 8001d12:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-(*writeIndex)) ,"\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc16 	bl	8000548 <__aeabi_f2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d24:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001d28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001d2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d30:	9200      	str	r2, [sp, #0]
 8001d32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d36:	4ab7      	ldr	r2, [pc, #732]	; (8002014 <pawprint_readFIFO+0x948>)
 8001d38:	4651      	mov	r1, sl
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f011 fafe 	bl	801333c <sniprintf>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9

	    	*bufferLength += outLength;
 8001d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8001d50:	441a      	add	r2, r3
 8001d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d56:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001d58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8001d62:	441a      	add	r2, r3
 8001d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d68:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < acc_samples; i++) {
 8001d6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001d74:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8001d78:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f6ff af64 	blt.w	8001c4a <pawprint_readFIFO+0x57e>
	    }

	    for (int i = 0; i < gyr_samples; i++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d88:	e094      	b.n	8001eb4 <pawprint_readFIFO+0x7e8>
	    	uint8_t outLength = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001d90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d9c:	189e      	adds	r6, r3, r2
 8001d9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f5c3 43c8 	rsb	r3, r3, #25600	; 0x6400
 8001da8:	469a      	mov	sl, r3
 8001daa:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001dae:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    		    		    			gyr_slot[i].timestamp,
	    		    						gyr_slot[i].sensor_tag,
 8001dc2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001dc6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	781b      	ldrb	r3, [r3, #0]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.x),
 8001ddc:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001de0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3306      	adds	r3, #6
 8001df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f987 	bl	8002108 <lsm6dso_from_fs125_to_mdps>
 8001dfa:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fba2 	bl	8000548 <__aeabi_f2d>
 8001e04:	4604      	mov	r4, r0
 8001e06:	460d      	mov	r5, r1
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.y),
 8001e08:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001e0c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f971 	bl	8002108 <lsm6dso_from_fs125_to_mdps>
 8001e26:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb8c 	bl	8000548 <__aeabi_f2d>
 8001e30:	4680      	mov	r8, r0
 8001e32:	4689      	mov	r9, r1
											lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.z));
 8001e34:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001e38:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	330a      	adds	r3, #10
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 f95b 	bl	8002108 <lsm6dso_from_fs125_to_mdps>
 8001e52:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e64:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001e68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e70:	9200      	str	r2, [sp, #0]
 8001e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e76:	4a67      	ldr	r2, [pc, #412]	; (8002014 <pawprint_readFIFO+0x948>)
 8001e78:	4651      	mov	r1, sl
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	f011 fa5e 	bl	801333c <sniprintf>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
	    	*bufferLength += outLength;
 8001e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001e90:	441a      	add	r2, r3
 8001e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e96:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001e98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001ea2:	441a      	add	r2, r3
 8001ea4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ea8:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < gyr_samples; i++) {
 8001eaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001eb4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001eb8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f6ff af64 	blt.w	8001d8a <pawprint_readFIFO+0x6be>
	    }

	    for (int i = 0; i < mag_samples; i++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001ec8:	e094      	b.n	8001ff4 <pawprint_readFIFO+0x928>
	    	uint8_t outLength = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001ed0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001edc:	189e      	adds	r6, r3, r2
 8001ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f5c3 43c8 	rsb	r3, r3, #25600	; 0x6400
 8001ee8:	469a      	mov	sl, r3
 8001eea:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001eee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    		    		    			mag_slot[i].timestamp,
	    		    						mag_slot[i].sensor_tag,
 8001f02:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001f06:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3304      	adds	r3, #4
 8001f16:	781b      	ldrb	r3, [r3, #0]
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.x),
 8001f1c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001f20:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3306      	adds	r3, #6
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f8ff 	bl	8002138 <lis2mdl_from_lsb_to_mgauss>
 8001f3a:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fb02 	bl	8000548 <__aeabi_f2d>
 8001f44:	4604      	mov	r4, r0
 8001f46:	460d      	mov	r5, r1
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.y),
 8001f48:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001f4c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f8e9 	bl	8002138 <lis2mdl_from_lsb_to_mgauss>
 8001f66:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	4680      	mov	r8, r0
 8001f72:	4689      	mov	r9, r1
											lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z)
 8001f74:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001f78:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	330a      	adds	r3, #10
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f8d3 	bl	8002138 <lis2mdl_from_lsb_to_mgauss>
 8001f92:	ee10 3a10 	vmov	r3, s0
	    	outLength = snprintf(&outBUFFER[*writeIndex],(BUFFER_SIZE-*writeIndex) , "\n%lu,%u,%.3f,%.3f,%.3f\n",
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fad6 	bl	8000548 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001fa4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001fa8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001fac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001fb0:	9200      	str	r2, [sp, #0]
 8001fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fb6:	4a17      	ldr	r2, [pc, #92]	; (8002014 <pawprint_readFIFO+0x948>)
 8001fb8:	4651      	mov	r1, sl
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f011 f9be 	bl	801333c <sniprintf>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
											);

	    	*bufferLength += outLength;
 8001fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001fd0:	441a      	add	r2, r3
 8001fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fd6:	601a      	str	r2, [r3, #0]
	    	*writeIndex += outLength;
 8001fd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001fe2:	441a      	add	r2, r3
 8001fe4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fe8:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < mag_samples; i++) {
 8001fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001ff4:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001ff8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f6ff af64 	blt.w	8001eca <pawprint_readFIFO+0x7fe>
 8002002:	f8d7 d004 	ldr.w	sp, [r7, #4]

	    }
	}

}
 8002006:	bf00      	nop
 8002008:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	08016d0c 	.word	0x08016d0c

08002018 <pawprint_WriteSD>:

void pawprint_WriteSD( FIL *SDFile , char *outBUFFER, int *bufferLength){
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]

	int failcount = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int byteCount = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
	int blockSize = 2048;
 800202c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002030:	61fb      	str	r3, [r7, #28]
	int readChunk = ((*bufferLength / blockSize) * blockSize);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fb92 f2f3 	sdiv	r2, r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	61bb      	str	r3, [r7, #24]

	f_open(SDFile, "Out.csv", FA_OPEN_APPEND | FA_WRITE); // Open file for appending
 8002044:	2232      	movs	r2, #50	; 0x32
 8002046:	4923      	ldr	r1, [pc, #140]	; (80020d4 <pawprint_WriteSD+0xbc>)
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f00e fb3d 	bl	80106c8 <f_open>

	for (int i = 0; i <= (readChunk/blockSize); i++){
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	e022      	b.n	800209a <pawprint_WriteSD+0x82>
		f_lseek(SDFile, f_size(SDFile));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4619      	mov	r1, r3
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f00e ff0f 	bl	8010e7e <f_lseek>
		f_write(SDFile, &outBUFFER[i*blockSize], blockSize, &byteCount); // Write largest 512 multiple sector
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1899      	adds	r1, r3, r2
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f00e fce5 	bl	8010a44 <f_write>
		if (byteCount != blockSize){
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	429a      	cmp	r2, r3
 8002080:	d002      	beq.n	8002088 <pawprint_WriteSD+0x70>

			failcount++;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	3301      	adds	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24

		}

		f_sync(SDFile);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f00e fe50 	bl	8010d2e <f_sync>
		HAL_Delay(10);
 800208e:	200a      	movs	r0, #10
 8002090:	f001 ff3e 	bl	8003f10 <HAL_Delay>
	for (int i = 0; i <= (readChunk/blockSize); i++){
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	3301      	adds	r3, #1
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	fb92 f3f3 	sdiv	r3, r2, r3
 80020a2:	6a3a      	ldr	r2, [r7, #32]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	ddd5      	ble.n	8002054 <pawprint_WriteSD+0x3c>
	}

	*bufferLength -= readChunk; // Get remainder length and set buffer length to accommodate it
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	601a      	str	r2, [r3, #0]

	memcpy(outBUFFER, &outBUFFER[readChunk], *bufferLength);  // Move remaining data to index 0
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	18d1      	adds	r1, r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68b8      	ldr	r0, [r7, #8]
 80020c2:	f011 fa51 	bl	8013568 <memcpy>

	f_close(SDFile);
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f00e feaf 	bl	8010e2a <f_close>

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	08016d24 	.word	0x08016d24

080020d8 <lsm6dso_from_fs2_to_mg>:
//	f_close( SDFile );
//
//}

float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 80020e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002104 <lsm6dso_from_fs2_to_mg+0x2c>
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	3d79db23 	.word	0x3d79db23

08002108 <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8002112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002134 <lsm6dso_from_fs125_to_mdps+0x2c>
 8002122:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002126:	eeb0 0a67 	vmov.f32	s0, s15
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	408c0000 	.word	0x408c0000

08002138 <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8002142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002152:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <st_fifo_init>:
  *
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_init(st_fifo_conf *conf)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  float bdr_xl, bdr_gy, bdr_vsens, bdr_max;

  if (conf->bdr_xl < 0.0f || conf->bdr_gy < 0.0f || conf->bdr_vsens < 0.0f)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	d40f      	bmi.n	800219c <st_fifo_init+0x38>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	d407      	bmi.n	800219c <st_fifo_init+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d501      	bpl.n	80021a0 <st_fifo_init+0x3c>
  {
    return ST_FIFO_ERR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b3      	b.n	8002308 <st_fifo_init+0x1a4>
  }

  if (conf->device < ST_FIFO_LSM6DSV)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d803      	bhi.n	80021b0 <st_fifo_init+0x4c>
  {
    fifo_ver = 0;
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <st_fifo_init+0x1ac>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e002      	b.n	80021b6 <st_fifo_init+0x52>
  }
  else
  {
    fifo_ver = 1;
 80021b0:	4b57      	ldr	r3, [pc, #348]	; (8002310 <st_fifo_init+0x1ac>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
  }

  tag_counter_old = 0;
 80021b6:	4b57      	ldr	r3, [pc, #348]	; (8002314 <st_fifo_init+0x1b0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  bdr_xl = conf->bdr_xl;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	61bb      	str	r3, [r7, #24]
  bdr_gy = conf->bdr_gy;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	617b      	str	r3, [r7, #20]
  bdr_vsens = conf->bdr_vsens;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	613b      	str	r3, [r7, #16]
  bdr_max = MAX(bdr_xl, bdr_gy);
 80021ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80021d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	dd01      	ble.n	80021e4 <st_fifo_init+0x80>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	e000      	b.n	80021e6 <st_fifo_init+0x82>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	60fb      	str	r3, [r7, #12]
  bdr_max = MAX(bdr_max, bdr_vsens);
 80021e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	dd01      	ble.n	80021fe <st_fifo_init+0x9a>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	e000      	b.n	8002200 <st_fifo_init+0x9c>
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	60fb      	str	r3, [r7, #12]
  dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <st_fifo_init+0x1ac>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461c      	mov	r4, r3
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <st_fifo_init+0x1ac>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <st_fifo_init+0x1b4>)
 8002218:	4413      	add	r3, r2
 800221a:	ed97 0a03 	vldr	s0, [r7, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fa10 	bl	8003644 <bdr_get_index>
 8002224:	4603      	mov	r3, r0
 8002226:	4619      	mov	r1, r3
 8002228:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <st_fifo_init+0x1b4>)
 800222a:	4623      	mov	r3, r4
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	4423      	add	r3, r4
 8002230:	440b      	add	r3, r1
 8002232:	3330      	adds	r3, #48	; 0x30
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <st_fifo_init+0x1b8>)
 800223a:	6013      	str	r3, [r2, #0]
  dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <st_fifo_init+0x1ac>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461c      	mov	r4, r3
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <st_fifo_init+0x1ac>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4613      	mov	r3, r2
 800224a:	019b      	lsls	r3, r3, #6
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <st_fifo_init+0x1b4>)
 8002252:	4413      	add	r3, r2
 8002254:	ed97 0a06 	vldr	s0, [r7, #24]
 8002258:	4618      	mov	r0, r3
 800225a:	f001 f9f3 	bl	8003644 <bdr_get_index>
 800225e:	4603      	mov	r3, r0
 8002260:	4619      	mov	r1, r3
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <st_fifo_init+0x1b4>)
 8002264:	4623      	mov	r3, r4
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	4423      	add	r3, r4
 800226a:	440b      	add	r3, r1
 800226c:	3330      	adds	r3, #48	; 0x30
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <st_fifo_init+0x1bc>)
 8002274:	6013      	str	r3, [r2, #0]
  dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <st_fifo_init+0x1ac>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461c      	mov	r4, r3
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <st_fifo_init+0x1ac>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3340      	adds	r3, #64	; 0x40
 800228c:	4a22      	ldr	r2, [pc, #136]	; (8002318 <st_fifo_init+0x1b4>)
 800228e:	4413      	add	r3, r2
 8002290:	ed97 0a05 	vldr	s0, [r7, #20]
 8002294:	4618      	mov	r0, r3
 8002296:	f001 f9d5 	bl	8003644 <bdr_get_index>
 800229a:	4603      	mov	r3, r0
 800229c:	4619      	mov	r1, r3
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <st_fifo_init+0x1b4>)
 80022a0:	4623      	mov	r3, r4
 80022a2:	019b      	lsls	r3, r3, #6
 80022a4:	4423      	add	r3, r4
 80022a6:	440b      	add	r3, r1
 80022a8:	3330      	adds	r3, #48	; 0x30
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <st_fifo_init+0x1c0>)
 80022b0:	6013      	str	r3, [r2, #0]
  dtime_xl_old = dtime_xl;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <st_fifo_init+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <st_fifo_init+0x1c4>)
 80022b8:	6013      	str	r3, [r2, #0]
  dtime_gy_old = dtime_gy;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <st_fifo_init+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <st_fifo_init+0x1c8>)
 80022c0:	6013      	str	r3, [r2, #0]
  timestamp = 0;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <st_fifo_init+0x1cc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
  bdr_chg_xl_flag = 0;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <st_fifo_init+0x1d0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
  bdr_chg_gy_flag = 0;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <st_fifo_init+0x1d4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
  last_timestamp_xl = 0;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <st_fifo_init+0x1d8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
  last_timestamp_gy = 0;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <st_fifo_init+0x1dc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

  for (uint8_t i = 0; i < 3u; i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	77fb      	strb	r3, [r7, #31]
 80022e4:	e00c      	b.n	8002300 <st_fifo_init+0x19c>
  {
    last_data_xl[i] = 0;
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <st_fifo_init+0x1e0>)
 80022ea:	2100      	movs	r1, #0
 80022ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    last_data_gy[i] = 0;
 80022f0:	7ffb      	ldrb	r3, [r7, #31]
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <st_fifo_init+0x1e4>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < 3u; i++)
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
 80022fc:	3301      	adds	r3, #1
 80022fe:	77fb      	strb	r3, [r7, #31]
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d9ef      	bls.n	80022e6 <st_fifo_init+0x182>
  }

  return ST_FIFO_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3724      	adds	r7, #36	; 0x24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	20006884 	.word	0x20006884
 8002314:	20006885 	.word	0x20006885
 8002318:	08016db0 	.word	0x08016db0
 800231c:	20006890 	.word	0x20006890
 8002320:	20006888 	.word	0x20006888
 8002324:	2000688c 	.word	0x2000688c
 8002328:	20006894 	.word	0x20006894
 800232c:	20006898 	.word	0x20006898
 8002330:	2000689c 	.word	0x2000689c
 8002334:	200068a8 	.word	0x200068a8
 8002338:	200068a9 	.word	0x200068a9
 800233c:	200068a0 	.word	0x200068a0
 8002340:	200068a4 	.word	0x200068a4
 8002344:	200068ac 	.word	0x200068ac
 8002348:	200068b4 	.word	0x200068b4

0800234c <st_fifo_decode>:
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_decode(st_fifo_out_slot *fifo_out_slot,
                              st_fifo_raw_slot *fifo_raw_slot, uint16_t *out_slot_size, uint16_t stream_size)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b09b      	sub	sp, #108	; 0x6c
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	807b      	strh	r3, [r7, #2]
  uint16_t j = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

  for (uint16_t i = 0; i < stream_size; i++)
 8002360:	2300      	movs	r3, #0
 8002362:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002366:	f000 bf87 	b.w	8003278 <st_fifo_decode+0xf2c>
  {

    uint8_t tag = (fifo_raw_slot[i].fifo_data_out[0] & TAG_SENSOR_MASK) >> TAG_SENSOR_SHIFT;
 800236a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t tag_counter = (fifo_raw_slot[i].fifo_data_out[0] & TAG_COUNTER_MASK) >> TAG_COUNTER_SHIFT;
 8002380:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    if (fifo_ver == 0u && has_even_parity(fifo_raw_slot[i].fifo_data_out[0]) == 0u)
 800239c:	4b99      	ldr	r3, [pc, #612]	; (8002604 <st_fifo_decode+0x2b8>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d110      	bne.n	80023c6 <st_fifo_decode+0x7a>
 80023a4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 f9a5 	bl	8003704 <has_even_parity>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <st_fifo_decode+0x7a>
    {
      return ST_FIFO_ERR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f000 bf60 	b.w	8003286 <st_fifo_decode+0xf3a>
    }

    if (is_tag_valid(tag) == 0u)
 80023c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 f832 	bl	8003434 <is_tag_valid>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <st_fifo_decode+0x90>
    {
      return ST_FIFO_ERR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f000 bf55 	b.w	8003286 <st_fifo_decode+0xf3a>
    }

    if ((tag_counter != (tag_counter_old)) && dtime_min != 0u)
 80023dc:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <st_fifo_decode+0x2bc>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d025      	beq.n	8002434 <st_fifo_decode+0xe8>
 80023e8:	4b88      	ldr	r3, [pc, #544]	; (800260c <st_fifo_decode+0x2c0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d021      	beq.n	8002434 <st_fifo_decode+0xe8>
    {
      uint8_t diff_tag_counter;

      if (tag_counter < tag_counter_old)
 80023f0:	4b85      	ldr	r3, [pc, #532]	; (8002608 <st_fifo_decode+0x2bc>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d209      	bcs.n	8002410 <st_fifo_decode+0xc4>
      {
        diff_tag_counter = tag_counter + 4u - tag_counter_old;
 80023fc:	4b82      	ldr	r3, [pc, #520]	; (8002608 <st_fifo_decode+0x2bc>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3304      	adds	r3, #4
 800240a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800240e:	e006      	b.n	800241e <st_fifo_decode+0xd2>
      }
      else
      {
        diff_tag_counter = tag_counter - tag_counter_old;
 8002410:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <st_fifo_decode+0x2bc>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      }

      timestamp += dtime_min * diff_tag_counter;
 800241e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002422:	4a7a      	ldr	r2, [pc, #488]	; (800260c <st_fifo_decode+0x2c0>)
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	fb03 f202 	mul.w	r2, r3, r2
 800242a:	4b79      	ldr	r3, [pc, #484]	; (8002610 <st_fifo_decode+0x2c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a77      	ldr	r2, [pc, #476]	; (8002610 <st_fifo_decode+0x2c4>)
 8002432:	6013      	str	r3, [r2, #0]
    }

    if (tag == TAG_ODRCHG)
 8002434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002438:	2b05      	cmp	r3, #5
 800243a:	f040 80d1 	bne.w	80025e0 <st_fifo_decode+0x294>
    {

      uint8_t bdr_acc_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_XL_MASK) >> BDR_XL_SHIFT;
 800243e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4413      	add	r3, r2
 800244c:	799b      	ldrb	r3, [r3, #6]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      uint8_t bdr_gyr_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_GY_MASK) >> BDR_GY_SHIFT;
 8002456:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4413      	add	r3, r2
 8002464:	799b      	ldrb	r3, [r3, #6]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      uint8_t bdr_vsens_cfg = (fifo_raw_slot[i].fifo_data_out[4] & BDR_VSENS_MASK) >> BDR_VSENS_SHIFT;
 800246c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

      float bdr_xl = device[fifo_ver].bdr_acc[bdr_acc_cfg];
 8002484:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <st_fifo_decode+0x2b8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800248e:	4961      	ldr	r1, [pc, #388]	; (8002614 <st_fifo_decode+0x2c8>)
 8002490:	4603      	mov	r3, r0
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	4403      	add	r3, r0
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
      float bdr_gy = device[fifo_ver].bdr_gyr[bdr_gyr_cfg];
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <st_fifo_decode+0x2b8>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80024aa:	495a      	ldr	r1, [pc, #360]	; (8002614 <st_fifo_decode+0x2c8>)
 80024ac:	4603      	mov	r3, r0
 80024ae:	019b      	lsls	r3, r3, #6
 80024b0:	4403      	add	r3, r0
 80024b2:	4413      	add	r3, r2
 80024b4:	3310      	adds	r3, #16
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
      float bdr_vsens = device[fifo_ver].bdr_vsens[bdr_vsens_cfg];
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <st_fifo_decode+0x2b8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80024c8:	4952      	ldr	r1, [pc, #328]	; (8002614 <st_fifo_decode+0x2c8>)
 80024ca:	4603      	mov	r3, r0
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	4403      	add	r3, r0
 80024d0:	4413      	add	r3, r2
 80024d2:	3320      	adds	r3, #32
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
      float bdr_max = MAX(bdr_xl, bdr_gy);
 80024dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80024e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd01      	ble.n	80024f2 <st_fifo_decode+0x1a6>
 80024ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f0:	e000      	b.n	80024f4 <st_fifo_decode+0x1a8>
 80024f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
      bdr_max = MAX(bdr_max, bdr_vsens);
 80024f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	dd01      	ble.n	800250c <st_fifo_decode+0x1c0>
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	e000      	b.n	800250e <st_fifo_decode+0x1c2>
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	633b      	str	r3, [r7, #48]	; 0x30

      dtime_xl_old = dtime_xl;
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <st_fifo_decode+0x2cc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a41      	ldr	r2, [pc, #260]	; (800261c <st_fifo_decode+0x2d0>)
 8002516:	6013      	str	r3, [r2, #0]
      dtime_gy_old = dtime_gy;
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <st_fifo_decode+0x2d4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a41      	ldr	r2, [pc, #260]	; (8002624 <st_fifo_decode+0x2d8>)
 800251e:	6013      	str	r3, [r2, #0]
      dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 8002520:	4b38      	ldr	r3, [pc, #224]	; (8002604 <st_fifo_decode+0x2b8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461c      	mov	r4, r3
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <st_fifo_decode+0x2b8>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4613      	mov	r3, r2
 800252e:	019b      	lsls	r3, r3, #6
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4a37      	ldr	r2, [pc, #220]	; (8002614 <st_fifo_decode+0x2c8>)
 8002536:	4413      	add	r3, r2
 8002538:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f881 	bl	8003644 <bdr_get_index>
 8002542:	4603      	mov	r3, r0
 8002544:	4619      	mov	r1, r3
 8002546:	4a33      	ldr	r2, [pc, #204]	; (8002614 <st_fifo_decode+0x2c8>)
 8002548:	4623      	mov	r3, r4
 800254a:	019b      	lsls	r3, r3, #6
 800254c:	4423      	add	r3, r4
 800254e:	440b      	add	r3, r1
 8002550:	3330      	adds	r3, #48	; 0x30
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	4a2d      	ldr	r2, [pc, #180]	; (800260c <st_fifo_decode+0x2c0>)
 8002558:	6013      	str	r3, [r2, #0]
      dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <st_fifo_decode+0x2b8>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461c      	mov	r4, r3
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <st_fifo_decode+0x2b8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <st_fifo_decode+0x2c8>)
 8002570:	4413      	add	r3, r2
 8002572:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002576:	4618      	mov	r0, r3
 8002578:	f001 f864 	bl	8003644 <bdr_get_index>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <st_fifo_decode+0x2c8>)
 8002582:	4623      	mov	r3, r4
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	4423      	add	r3, r4
 8002588:	440b      	add	r3, r1
 800258a:	3330      	adds	r3, #48	; 0x30
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <st_fifo_decode+0x2cc>)
 8002592:	6013      	str	r3, [r2, #0]
      dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <st_fifo_decode+0x2b8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461c      	mov	r4, r3
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <st_fifo_decode+0x2b8>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4613      	mov	r3, r2
 80025a2:	019b      	lsls	r3, r3, #6
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <st_fifo_decode+0x2c8>)
 80025ac:	4413      	add	r3, r2
 80025ae:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 f846 	bl	8003644 <bdr_get_index>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4619      	mov	r1, r3
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <st_fifo_decode+0x2c8>)
 80025be:	4623      	mov	r3, r4
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	4423      	add	r3, r4
 80025c4:	440b      	add	r3, r1
 80025c6:	3330      	adds	r3, #48	; 0x30
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <st_fifo_decode+0x2d4>)
 80025ce:	6013      	str	r3, [r2, #0]

      bdr_chg_xl_flag = 1;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <st_fifo_decode+0x2dc>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
      bdr_chg_gy_flag = 1;
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <st_fifo_decode+0x2e0>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	f000 be41 	b.w	8003262 <st_fifo_decode+0xf16>

    }
    else if (tag == TAG_TS)
 80025e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d123      	bne.n	8002630 <st_fifo_decode+0x2e4>
    {

      (void)memcpy(&timestamp, &fifo_raw_slot[i].fifo_data_out[1], 4);
 80025e8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4413      	add	r3, r2
 80025f6:	3301      	adds	r3, #1
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <st_fifo_decode+0x2c4>)
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f000 be2f 	b.w	8003262 <st_fifo_decode+0xf16>
 8002604:	20006884 	.word	0x20006884
 8002608:	20006885 	.word	0x20006885
 800260c:	20006890 	.word	0x20006890
 8002610:	2000689c 	.word	0x2000689c
 8002614:	08016db0 	.word	0x08016db0
 8002618:	20006888 	.word	0x20006888
 800261c:	20006894 	.word	0x20006894
 8002620:	2000688c 	.word	0x2000688c
 8002624:	20006898 	.word	0x20006898
 8002628:	200068a8 	.word	0x200068a8
 800262c:	200068a9 	.word	0x200068a9

    }
    else
    {

      st_fifo_compression_type compression_type = get_compression_type(tag);
 8002630:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002634:	4618      	mov	r0, r3
 8002636:	f000 ffc7 	bl	80035c8 <get_compression_type>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      st_fifo_sensor_type sensor_type = get_sensor_type(tag);
 8002640:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002644:	4618      	mov	r0, r3
 8002646:	f000 ff17 	bl	8003478 <get_sensor_type>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

      if (compression_type == ST_FIFO_COMPRESSION_NC)
 8002650:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002654:	2b00      	cmp	r3, #0
 8002656:	d16d      	bne.n	8002734 <st_fifo_decode+0x3e8>
      {

        if (tag == TAG_EMPTY)
 8002658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8605 	beq.w	800326c <st_fifo_decode+0xf20>
        {
          continue;
        }

        fifo_out_slot[j].timestamp = timestamp;
 8002662:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	4ab1      	ldr	r2, [pc, #708]	; (800293c <st_fifo_decode+0x5f0>)
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	601a      	str	r2, [r3, #0]

        fifo_out_slot[j].sensor_tag = sensor_type;
 800267a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002690:	711a      	strb	r2, [r3, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002692:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 80026a6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	4413      	add	r3, r2
 80026b4:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80026b6:	2206      	movs	r2, #6
 80026b8:	4619      	mov	r1, r3
 80026ba:	f010 ff55 	bl	8013568 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80026be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d115      	bne.n	80026f2 <st_fifo_decode+0x3a6>
        {
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80026c6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	3306      	adds	r3, #6
 80026da:	2206      	movs	r2, #6
 80026dc:	4619      	mov	r1, r3
 80026de:	4898      	ldr	r0, [pc, #608]	; (8002940 <st_fifo_decode+0x5f4>)
 80026e0:	f010 ff42 	bl	8013568 <memcpy>
          last_timestamp_xl = timestamp;
 80026e4:	4b95      	ldr	r3, [pc, #596]	; (800293c <st_fifo_decode+0x5f0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a96      	ldr	r2, [pc, #600]	; (8002944 <st_fifo_decode+0x5f8>)
 80026ea:	6013      	str	r3, [r2, #0]
          bdr_chg_xl_flag = 0;
 80026ec:	4b96      	ldr	r3, [pc, #600]	; (8002948 <st_fifo_decode+0x5fc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80026f2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <st_fifo_decode+0x3da>
        {
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80026fa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	3306      	adds	r3, #6
 800270e:	2206      	movs	r2, #6
 8002710:	4619      	mov	r1, r3
 8002712:	488e      	ldr	r0, [pc, #568]	; (800294c <st_fifo_decode+0x600>)
 8002714:	f010 ff28 	bl	8013568 <memcpy>
          last_timestamp_gy = timestamp;
 8002718:	4b88      	ldr	r3, [pc, #544]	; (800293c <st_fifo_decode+0x5f0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a8c      	ldr	r2, [pc, #560]	; (8002950 <st_fifo_decode+0x604>)
 800271e:	6013      	str	r3, [r2, #0]
          bdr_chg_gy_flag = 0;
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <st_fifo_decode+0x608>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
        }

        j++;
 8002726:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800272a:	3301      	adds	r3, #1
 800272c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002730:	f000 bd93 	b.w	800325a <st_fifo_decode+0xf0e>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_1)
 8002734:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 8091 	bne.w	8002860 <st_fifo_decode+0x514>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 800273e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	189c      	adds	r4, r3, r2
 8002750:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fe8f 	bl	8003478 <get_sensor_type>
 800275a:	4603      	mov	r3, r0
 800275c:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800275e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8002772:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	4413      	add	r3, r2
 8002780:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002782:	2206      	movs	r2, #6
 8002784:	4619      	mov	r1, r3
 8002786:	f010 feef 	bl	8013568 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 800278a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d12d      	bne.n	80027ee <st_fifo_decode+0x4a2>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <st_fifo_decode+0x5fc>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d106      	bne.n	80027a8 <st_fifo_decode+0x45c>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <st_fifo_decode+0x5f8>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b6e      	ldr	r3, [pc, #440]	; (8002958 <st_fifo_decode+0x60c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a6:	e005      	b.n	80027b4 <st_fifo_decode+0x468>
          }
          else
          {
            last_timestamp = timestamp - dtime_xl;
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <st_fifo_decode+0x5f0>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b6b      	ldr	r3, [pc, #428]	; (800295c <st_fifo_decode+0x610>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	65fb      	str	r3, [r7, #92]	; 0x5c
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 80027b4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027c8:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80027ca:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	3306      	adds	r3, #6
 80027de:	2206      	movs	r2, #6
 80027e0:	4619      	mov	r1, r3
 80027e2:	4857      	ldr	r0, [pc, #348]	; (8002940 <st_fifo_decode+0x5f4>)
 80027e4:	f010 fec0 	bl	8013568 <memcpy>
          last_timestamp_xl = last_timestamp;
 80027e8:	4a56      	ldr	r2, [pc, #344]	; (8002944 <st_fifo_decode+0x5f8>)
 80027ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ec:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80027ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12d      	bne.n	8002852 <st_fifo_decode+0x506>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <st_fifo_decode+0x608>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d106      	bne.n	800280c <st_fifo_decode+0x4c0>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 80027fe:	4b54      	ldr	r3, [pc, #336]	; (8002950 <st_fifo_decode+0x604>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <st_fifo_decode+0x614>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	65bb      	str	r3, [r7, #88]	; 0x58
 800280a:	e005      	b.n	8002818 <st_fifo_decode+0x4cc>
          }
          else
          {
            last_timestamp = timestamp - dtime_gy;
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <st_fifo_decode+0x5f0>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b54      	ldr	r3, [pc, #336]	; (8002964 <st_fifo_decode+0x618>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	65bb      	str	r3, [r7, #88]	; 0x58
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002818:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800282c:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 800282e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	3306      	adds	r3, #6
 8002842:	2206      	movs	r2, #6
 8002844:	4619      	mov	r1, r3
 8002846:	4841      	ldr	r0, [pc, #260]	; (800294c <st_fifo_decode+0x600>)
 8002848:	f010 fe8e 	bl	8013568 <memcpy>
          last_timestamp_gy = last_timestamp;
 800284c:	4a40      	ldr	r2, [pc, #256]	; (8002950 <st_fifo_decode+0x604>)
 800284e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002850:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002852:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002856:	3301      	adds	r3, #1
 8002858:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800285c:	f000 bcfd 	b.w	800325a <st_fifo_decode+0xf0e>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_2)
 8002860:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 80b3 	bne.w	80029d0 <st_fifo_decode+0x684>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 800286a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	189c      	adds	r4, r3, r2
 800287c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fdf9 	bl	8003478 <get_sensor_type>
 8002886:	4603      	mov	r3, r0
 8002888:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 800288a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 800289e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	4413      	add	r3, r2
 80028ac:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80028ae:	2206      	movs	r2, #6
 80028b0:	4619      	mov	r1, r3
 80028b2:	f010 fe59 	bl	8013568 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80028b6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d12e      	bne.n	800291c <st_fifo_decode+0x5d0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <st_fifo_decode+0x5fc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d106      	bne.n	80028d4 <st_fifo_decode+0x588>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <st_fifo_decode+0x5f8>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <st_fifo_decode+0x60c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	657b      	str	r3, [r7, #84]	; 0x54
 80028d2:	e006      	b.n	80028e2 <st_fifo_decode+0x596>
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_xl;
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <st_fifo_decode+0x5f0>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <st_fifo_decode+0x610>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 80028e2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028f6:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80028f8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	3306      	adds	r3, #6
 800290c:	2206      	movs	r2, #6
 800290e:	4619      	mov	r1, r3
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <st_fifo_decode+0x5f4>)
 8002912:	f010 fe29 	bl	8013568 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <st_fifo_decode+0x5f8>)
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	6013      	str	r3, [r2, #0]
        }
        if (sensor_type == ST_FIFO_GYROSCOPE)
 800291c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d145      	bne.n	80029b0 <st_fifo_decode+0x664>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <st_fifo_decode+0x608>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d11d      	bne.n	8002968 <st_fifo_decode+0x61c>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <st_fifo_decode+0x604>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <st_fifo_decode+0x614>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4413      	add	r3, r2
 8002936:	653b      	str	r3, [r7, #80]	; 0x50
 8002938:	e01d      	b.n	8002976 <st_fifo_decode+0x62a>
 800293a:	bf00      	nop
 800293c:	2000689c 	.word	0x2000689c
 8002940:	200068ac 	.word	0x200068ac
 8002944:	200068a0 	.word	0x200068a0
 8002948:	200068a8 	.word	0x200068a8
 800294c:	200068b4 	.word	0x200068b4
 8002950:	200068a4 	.word	0x200068a4
 8002954:	200068a9 	.word	0x200068a9
 8002958:	20006894 	.word	0x20006894
 800295c:	20006888 	.word	0x20006888
 8002960:	20006898 	.word	0x20006898
 8002964:	2000688c 	.word	0x2000688c
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_gy;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <st_fifo_decode+0x674>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <st_fifo_decode+0x678>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	653b      	str	r3, [r7, #80]	; 0x50
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002976:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800298a:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 800298c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	3306      	adds	r3, #6
 80029a0:	2206      	movs	r2, #6
 80029a2:	4619      	mov	r1, r3
 80029a4:	4808      	ldr	r0, [pc, #32]	; (80029c8 <st_fifo_decode+0x67c>)
 80029a6:	f010 fddf 	bl	8013568 <memcpy>
          last_timestamp_gy = last_timestamp;
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <st_fifo_decode+0x680>)
 80029ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ae:	6013      	str	r3, [r2, #0]
        }

        j++;
 80029b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80029ba:	f000 bc4e 	b.w	800325a <st_fifo_decode+0xf0e>
 80029be:	bf00      	nop
 80029c0:	2000689c 	.word	0x2000689c
 80029c4:	2000688c 	.word	0x2000688c
 80029c8:	200068b4 	.word	0x200068b4
 80029cc:	200068a4 	.word	0x200068a4

      }
      else if (compression_type == ST_FIFO_COMPRESSION_2X)
 80029d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	f040 81c7 	bne.w	8002d68 <st_fifo_decode+0xa1c>
      {

        int16_t diff[6];
        get_diff_2x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 80029da:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	4413      	add	r3, r2
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 feb2 	bl	800375a <get_diff_2x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 80029f6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002a0c:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002a0e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d15a      	bne.n	8002acc <st_fifo_decode+0x780>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002a16:	4bbf      	ldr	r3, [pc, #764]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	b299      	uxth	r1, r3
 8002a28:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b20a      	sxth	r2, r1
 8002a3c:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8002a3e:	4bb5      	ldr	r3, [pc, #724]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002a40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b299      	uxth	r1, r3
 8002a50:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	b20a      	sxth	r2, r1
 8002a64:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002a66:	4bab      	ldr	r3, [pc, #684]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002a68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	b299      	uxth	r1, r3
 8002a78:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	461a      	mov	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4413      	add	r3, r2
 8002a8a:	b20a      	sxth	r2, r1
 8002a8c:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 8002a8e:	4ba2      	ldr	r3, [pc, #648]	; (8002d18 <st_fifo_decode+0x9cc>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	4ba2      	ldr	r3, [pc, #648]	; (8002d1c <st_fifo_decode+0x9d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0059      	lsls	r1, r3, #1
 8002a98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	1a42      	subs	r2, r0, r1
 8002aac:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002aae:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4893      	ldr	r0, [pc, #588]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002ac8:	f010 fd4e 	bl	8013568 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002acc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d15a      	bne.n	8002b8a <st_fifo_decode+0x83e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002ad4:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	b20a      	sxth	r2, r1
 8002afa:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002afc:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b299      	uxth	r1, r3
 8002b0e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	b20a      	sxth	r2, r1
 8002b22:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002b24:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002b26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	b299      	uxth	r1, r3
 8002b36:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	b20a      	sxth	r2, r1
 8002b4a:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002b4c:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <st_fifo_decode+0x9cc>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <st_fifo_decode+0x9d8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0059      	lsls	r1, r3, #1
 8002b56:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	1a42      	subs	r2, r0, r1
 8002b6a:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002b6c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3306      	adds	r3, #6
 8002b80:	2206      	movs	r2, #6
 8002b82:	4619      	mov	r1, r3
 8002b84:	4866      	ldr	r0, [pc, #408]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002b86:	f010 fcef 	bl	8013568 <memcpy>
        }

        j++;
 8002b8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002b94:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002baa:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002bac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d15e      	bne.n	8002c72 <st_fifo_decode+0x926>
        {
          uint32_t last_timestamp = timestamp - dtime_xl;
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <st_fifo_decode+0x9cc>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <st_fifo_decode+0x9d0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 8002bc0:	4b54      	ldr	r3, [pc, #336]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	b299      	uxth	r1, r3
 8002bd2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	b20a      	sxth	r2, r1
 8002be6:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002bea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b20a      	sxth	r2, r1
 8002c0e:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 8002c10:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b299      	uxth	r1, r3
 8002c22:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	b20a      	sxth	r2, r1
 8002c36:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 8002c38:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	461a      	mov	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c4c:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002c4e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3306      	adds	r3, #6
 8002c62:	2206      	movs	r2, #6
 8002c64:	4619      	mov	r1, r3
 8002c66:	482b      	ldr	r0, [pc, #172]	; (8002d14 <st_fifo_decode+0x9c8>)
 8002c68:	f010 fc7e 	bl	8013568 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <st_fifo_decode+0x9dc>)
 8002c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c70:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002c72:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d16c      	bne.n	8002d54 <st_fifo_decode+0xa08>
        {
          uint32_t last_timestamp = timestamp - dtime_gy;
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <st_fifo_decode+0x9cc>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <st_fifo_decode+0x9d8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	b299      	uxth	r1, r3
 8002c98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b20a      	sxth	r2, r1
 8002cac:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8002cae:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b299      	uxth	r1, r3
 8002cc0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b20a      	sxth	r2, r1
 8002cd4:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <st_fifo_decode+0x9d4>)
 8002cd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b299      	uxth	r1, r3
 8002ce8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b20a      	sxth	r2, r1
 8002cfc:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 8002cfe:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	e00c      	b.n	8002d2c <st_fifo_decode+0x9e0>
 8002d12:	bf00      	nop
 8002d14:	200068ac 	.word	0x200068ac
 8002d18:	2000689c 	.word	0x2000689c
 8002d1c:	20006888 	.word	0x20006888
 8002d20:	200068b4 	.word	0x200068b4
 8002d24:	2000688c 	.word	0x2000688c
 8002d28:	200068a0 	.word	0x200068a0
 8002d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d2e:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002d30:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4413      	add	r3, r2
 8002d42:	3306      	adds	r3, #6
 8002d44:	2206      	movs	r2, #6
 8002d46:	4619      	mov	r1, r3
 8002d48:	4805      	ldr	r0, [pc, #20]	; (8002d60 <st_fifo_decode+0xa14>)
 8002d4a:	f010 fc0d 	bl	8013568 <memcpy>
          last_timestamp_gy = last_timestamp;
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <st_fifo_decode+0xa18>)
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002d54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002d5e:	e27c      	b.n	800325a <st_fifo_decode+0xf0e>
 8002d60:	200068b4 	.word	0x200068b4
 8002d64:	200068a4 	.word	0x200068a4

      }
      else /* compression_type == ST_FIFO_COMPRESSION_3X */
      {
        int16_t diff[9];
        get_diff_3x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8002d68:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4413      	add	r3, r2
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fd1b 	bl	80037ba <get_diff_3x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002d84:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	461a      	mov	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002d9a:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002d9c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d15a      	bne.n	8002e5a <st_fifo_decode+0xb0e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002da4:	4bc1      	ldr	r3, [pc, #772]	; (80030ac <st_fifo_decode+0xd60>)
 8002da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	b299      	uxth	r1, r3
 8002db6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b20a      	sxth	r2, r1
 8002dca:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8002dcc:	4bb7      	ldr	r3, [pc, #732]	; (80030ac <st_fifo_decode+0xd60>)
 8002dce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	b299      	uxth	r1, r3
 8002dde:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	b20a      	sxth	r2, r1
 8002df2:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002df4:	4bad      	ldr	r3, [pc, #692]	; (80030ac <st_fifo_decode+0xd60>)
 8002df6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	b299      	uxth	r1, r3
 8002e06:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	b20a      	sxth	r2, r1
 8002e1a:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 8002e1c:	4ba4      	ldr	r3, [pc, #656]	; (80030b0 <st_fifo_decode+0xd64>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	4ba4      	ldr	r3, [pc, #656]	; (80030b4 <st_fifo_decode+0xd68>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0059      	lsls	r1, r3, #1
 8002e26:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	1a42      	subs	r2, r0, r1
 8002e3a:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002e3c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3306      	adds	r3, #6
 8002e50:	2206      	movs	r2, #6
 8002e52:	4619      	mov	r1, r3
 8002e54:	4895      	ldr	r0, [pc, #596]	; (80030ac <st_fifo_decode+0xd60>)
 8002e56:	f010 fb87 	bl	8013568 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002e5a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d15a      	bne.n	8002f18 <st_fifo_decode+0xbcc>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002e62:	4b95      	ldr	r3, [pc, #596]	; (80030b8 <st_fifo_decode+0xd6c>)
 8002e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	b299      	uxth	r1, r3
 8002e74:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	b20a      	sxth	r2, r1
 8002e88:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <st_fifo_decode+0xd6c>)
 8002e8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	b299      	uxth	r1, r3
 8002e9c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	b20a      	sxth	r2, r1
 8002eb0:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <st_fifo_decode+0xd6c>)
 8002eb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b20a      	sxth	r2, r1
 8002ed8:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002eda:	4b75      	ldr	r3, [pc, #468]	; (80030b0 <st_fifo_decode+0xd64>)
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	4b77      	ldr	r3, [pc, #476]	; (80030bc <st_fifo_decode+0xd70>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0059      	lsls	r1, r3, #1
 8002ee4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	1a42      	subs	r2, r0, r1
 8002ef8:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002efa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3306      	adds	r3, #6
 8002f0e:	2206      	movs	r2, #6
 8002f10:	4619      	mov	r1, r3
 8002f12:	4869      	ldr	r0, [pc, #420]	; (80030b8 <st_fifo_decode+0xd6c>)
 8002f14:	f010 fb28 	bl	8013568 <memcpy>
        }

        j++;
 8002f18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002f22:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002f38:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002f3a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d159      	bne.n	8002ff6 <st_fifo_decode+0xcaa>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 8002f42:	4b5a      	ldr	r3, [pc, #360]	; (80030ac <st_fifo_decode+0xd60>)
 8002f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	b299      	uxth	r1, r3
 8002f54:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	b20a      	sxth	r2, r1
 8002f68:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002f6a:	4b50      	ldr	r3, [pc, #320]	; (80030ac <st_fifo_decode+0xd60>)
 8002f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b20a      	sxth	r2, r1
 8002f90:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 8002f92:	4b46      	ldr	r3, [pc, #280]	; (80030ac <st_fifo_decode+0xd60>)
 8002f94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b299      	uxth	r1, r3
 8002fa4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b20a      	sxth	r2, r1
 8002fb8:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_xl;
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <st_fifo_decode+0xd64>)
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <st_fifo_decode+0xd68>)
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	1a42      	subs	r2, r0, r1
 8002fd6:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002fd8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3306      	adds	r3, #6
 8002fec:	2206      	movs	r2, #6
 8002fee:	4619      	mov	r1, r3
 8002ff0:	482e      	ldr	r0, [pc, #184]	; (80030ac <st_fifo_decode+0xd60>)
 8002ff2:	f010 fab9 	bl	8013568 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002ff6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d165      	bne.n	80030ca <st_fifo_decode+0xd7e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <st_fifo_decode+0xd6c>)
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	b29a      	uxth	r2, r3
 8003006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800300a:	b29b      	uxth	r3, r3
 800300c:	4413      	add	r3, r2
 800300e:	b299      	uxth	r1, r3
 8003010:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	461a      	mov	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	b20a      	sxth	r2, r1
 8003024:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <st_fifo_decode+0xd6c>)
 8003028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800302c:	b29a      	uxth	r2, r3
 800302e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4413      	add	r3, r2
 8003036:	b299      	uxth	r1, r3
 8003038:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	461a      	mov	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	b20a      	sxth	r2, r1
 800304c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <st_fifo_decode+0xd6c>)
 8003050:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003054:	b29a      	uxth	r2, r3
 8003056:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800305a:	b29b      	uxth	r3, r3
 800305c:	4413      	add	r3, r2
 800305e:	b299      	uxth	r1, r3
 8003060:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	461a      	mov	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	b20a      	sxth	r2, r1
 8003074:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_gy;
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <st_fifo_decode+0xd64>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <st_fifo_decode+0xd70>)
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	1a42      	subs	r2, r0, r1
 8003092:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8003094:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	461a      	mov	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	3306      	adds	r3, #6
 80030a8:	e00a      	b.n	80030c0 <st_fifo_decode+0xd74>
 80030aa:	bf00      	nop
 80030ac:	200068ac 	.word	0x200068ac
 80030b0:	2000689c 	.word	0x2000689c
 80030b4:	20006888 	.word	0x20006888
 80030b8:	200068b4 	.word	0x200068b4
 80030bc:	2000688c 	.word	0x2000688c
 80030c0:	2206      	movs	r2, #6
 80030c2:	4619      	mov	r1, r3
 80030c4:	4872      	ldr	r0, [pc, #456]	; (8003290 <st_fifo_decode+0xf44>)
 80030c6:	f010 fa4f 	bl	8013568 <memcpy>
        }

        j++;
 80030ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80030ce:	3301      	adds	r3, #1
 80030d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].timestamp = timestamp;
 80030d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	461a      	mov	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	4a6b      	ldr	r2, [pc, #428]	; (8003294 <st_fifo_decode+0xf48>)
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	601a      	str	r2, [r3, #0]
        fifo_out_slot[j].sensor_tag = sensor_type;
 80030ec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	461a      	mov	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003102:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8003104:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d14e      	bne.n	80031aa <st_fifo_decode+0xe5e>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[6];
 800310c:	4b62      	ldr	r3, [pc, #392]	; (8003298 <st_fifo_decode+0xf4c>)
 800310e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003112:	b29a      	uxth	r2, r3
 8003114:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003118:	b29b      	uxth	r3, r3
 800311a:	4413      	add	r3, r2
 800311c:	b299      	uxth	r1, r3
 800311e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	b20a      	sxth	r2, r1
 8003132:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[7];
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <st_fifo_decode+0xf4c>)
 8003136:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800313a:	b29a      	uxth	r2, r3
 800313c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4413      	add	r3, r2
 8003144:	b299      	uxth	r1, r3
 8003146:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	b20a      	sxth	r2, r1
 800315a:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[8];
 800315c:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <st_fifo_decode+0xf4c>)
 800315e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003162:	b29a      	uxth	r2, r3
 8003164:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4413      	add	r3, r2
 800316c:	b299      	uxth	r1, r3
 800316e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	b20a      	sxth	r2, r1
 8003182:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8003184:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	461a      	mov	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	3306      	adds	r3, #6
 8003198:	2206      	movs	r2, #6
 800319a:	4619      	mov	r1, r3
 800319c:	483e      	ldr	r0, [pc, #248]	; (8003298 <st_fifo_decode+0xf4c>)
 800319e:	f010 f9e3 	bl	8013568 <memcpy>
          last_timestamp_xl = timestamp;
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <st_fifo_decode+0xf48>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3d      	ldr	r2, [pc, #244]	; (800329c <st_fifo_decode+0xf50>)
 80031a8:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80031aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d14e      	bne.n	8003250 <st_fifo_decode+0xf04>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[6];
 80031b2:	4b37      	ldr	r3, [pc, #220]	; (8003290 <st_fifo_decode+0xf44>)
 80031b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	b299      	uxth	r1, r3
 80031c4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	461a      	mov	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	b20a      	sxth	r2, r1
 80031d8:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[7];
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <st_fifo_decode+0xf44>)
 80031dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	b299      	uxth	r1, r3
 80031ec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	b20a      	sxth	r2, r1
 8003200:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[8];
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <st_fifo_decode+0xf44>)
 8003204:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003208:	b29a      	uxth	r2, r3
 800320a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800320e:	b29b      	uxth	r3, r3
 8003210:	4413      	add	r3, r2
 8003212:	b299      	uxth	r1, r3
 8003214:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	461a      	mov	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	b20a      	sxth	r2, r1
 8003228:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 800322a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	3306      	adds	r3, #6
 800323e:	2206      	movs	r2, #6
 8003240:	4619      	mov	r1, r3
 8003242:	4813      	ldr	r0, [pc, #76]	; (8003290 <st_fifo_decode+0xf44>)
 8003244:	f010 f990 	bl	8013568 <memcpy>
          last_timestamp_gy = timestamp;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <st_fifo_decode+0xf48>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <st_fifo_decode+0xf54>)
 800324e:	6013      	str	r3, [r2, #0]
        }

        j++;
 8003250:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003254:	3301      	adds	r3, #1
 8003256:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      *out_slot_size = j;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003260:	801a      	strh	r2, [r3, #0]
    }

    tag_counter_old = tag_counter;
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <st_fifo_decode+0xf58>)
 8003264:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003268:	7013      	strb	r3, [r2, #0]
 800326a:	e000      	b.n	800326e <st_fifo_decode+0xf22>
          continue;
 800326c:	bf00      	nop
  for (uint16_t i = 0; i < stream_size; i++)
 800326e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003272:	3301      	adds	r3, #1
 8003274:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003278:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	429a      	cmp	r2, r3
 8003280:	f4ff a873 	bcc.w	800236a <st_fifo_decode+0x1e>
  }

  return ST_FIFO_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	376c      	adds	r7, #108	; 0x6c
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}
 800328e:	bf00      	nop
 8003290:	200068b4 	.word	0x200068b4
 8003294:	2000689c 	.word	0x2000689c
 8003298:	200068ac 	.word	0x200068ac
 800329c:	200068a0 	.word	0x200068a0
 80032a0:	200068a4 	.word	0x200068a4
 80032a4:	20006885 	.word	0x20006885

080032a8 <st_fifo_sort>:
  * @param  fifo_out_slot     decoded output stream to sort.(ptr)
  * @param  out_slot_size     decoded stream size.
  *
  */
void st_fifo_sort(st_fifo_out_slot *fifo_out_slot, uint16_t out_slot_size)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
  int32_t i;
  int32_t j;
  st_fifo_out_slot temp;

  for (i = 1; i < (int32_t)out_slot_size; i++)
 80032b4:	2301      	movs	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e04a      	b.n	8003350 <st_fifo_sort+0xa8>
  {
    (void)memcpy(&temp, &fifo_out_slot[i], sizeof(st_fifo_out_slot));
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1899      	adds	r1, r3, r2
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	220c      	movs	r2, #12
 80032d0:	4618      	mov	r0, r3
 80032d2:	f010 f949 	bl	8013568 <memcpy>

    j = i - 1;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b01      	subs	r3, #1
 80032da:	61bb      	str	r3, [r7, #24]

    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 80032dc:	e017      	b.n	800330e <st_fifo_sort+0x66>
    {
      (void)memcpy(&fifo_out_slot[j + 1], &fifo_out_slot[j],
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1898      	adds	r0, r3, r2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	220c      	movs	r2, #12
 8003302:	4619      	mov	r1, r3
 8003304:	f010 f930 	bl	8013568 <memcpy>
                   sizeof(st_fifo_out_slot));
      j--;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	3b01      	subs	r3, #1
 800330c:	61bb      	str	r3, [r7, #24]
    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0b      	blt.n	800332c <st_fifo_sort+0x84>
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	429a      	cmp	r2, r3
 800332a:	d8d8      	bhi.n	80032de <st_fifo_sort+0x36>
    }

    (void)memcpy(&fifo_out_slot[j + 1], &temp, sizeof(st_fifo_out_slot));
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	461a      	mov	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	f107 010c 	add.w	r1, r7, #12
 8003342:	220c      	movs	r2, #12
 8003344:	4618      	mov	r0, r3
 8003346:	f010 f90f 	bl	8013568 <memcpy>
  for (i = 1; i < (int32_t)out_slot_size; i++)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	dbb0      	blt.n	80032ba <st_fifo_sort+0x12>
  }

  return;
 8003358:	bf00      	nop
}
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <st_fifo_get_sensor_occurrence>:
  *                           decoded FIFO stream.
  *
  */
uint16_t st_fifo_get_sensor_occurrence(st_fifo_out_slot *fifo_out_slot,
                                       uint16_t out_slot_size, st_fifo_sensor_type sensor_type)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  uint16_t occurrence = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	81fb      	strh	r3, [r7, #14]

  for (uint16_t i = 0; i < out_slot_size; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	81bb      	strh	r3, [r7, #12]
 8003378:	e011      	b.n	800339e <st_fifo_get_sensor_occurrence+0x3e>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 800337a:	89ba      	ldrh	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	461a      	mov	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	791b      	ldrb	r3, [r3, #4]
 800338c:	787a      	ldrb	r2, [r7, #1]
 800338e:	429a      	cmp	r2, r3
 8003390:	d102      	bne.n	8003398 <st_fifo_get_sensor_occurrence+0x38>
    {
      occurrence++;
 8003392:	89fb      	ldrh	r3, [r7, #14]
 8003394:	3301      	adds	r3, #1
 8003396:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8003398:	89bb      	ldrh	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	81bb      	strh	r3, [r7, #12]
 800339e:	89ba      	ldrh	r2, [r7, #12]
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d3e9      	bcc.n	800337a <st_fifo_get_sensor_occurrence+0x1a>
    }
  }

  return occurrence;
 80033a6:	89fb      	ldrh	r3, [r7, #14]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <st_fifo_extract_sensor>:
  *
  */
void st_fifo_extract_sensor(st_fifo_out_slot *sensor_out_slot,
                            st_fifo_out_slot *fifo_out_slot, uint16_t  out_slot_size,
                            st_fifo_sensor_type sensor_type)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	4611      	mov	r1, r2
 80033c0:	461a      	mov	r2, r3
 80033c2:	460b      	mov	r3, r1
 80033c4:	80fb      	strh	r3, [r7, #6]
 80033c6:	4613      	mov	r3, r2
 80033c8:	717b      	strb	r3, [r7, #5]
  uint16_t temp_i = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	82fb      	strh	r3, [r7, #22]

  for (uint16_t i = 0; i < out_slot_size; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	82bb      	strh	r3, [r7, #20]
 80033d2:	e025      	b.n	8003420 <st_fifo_extract_sensor+0x6c>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 80033d4:	8aba      	ldrh	r2, [r7, #20]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	461a      	mov	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4413      	add	r3, r2
 80033e4:	791b      	ldrb	r3, [r3, #4]
 80033e6:	797a      	ldrb	r2, [r7, #5]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d116      	bne.n	800341a <st_fifo_extract_sensor+0x66>
    {
      (void)memcpy(&sensor_out_slot[temp_i], &fifo_out_slot[i],
 80033ec:	8afa      	ldrh	r2, [r7, #22]
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1898      	adds	r0, r3, r2
 80033fc:	8aba      	ldrh	r2, [r7, #20]
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4413      	add	r3, r2
 800340c:	220c      	movs	r2, #12
 800340e:	4619      	mov	r1, r3
 8003410:	f010 f8aa 	bl	8013568 <memcpy>
                   sizeof(st_fifo_out_slot));
      temp_i++;
 8003414:	8afb      	ldrh	r3, [r7, #22]
 8003416:	3301      	adds	r3, #1
 8003418:	82fb      	strh	r3, [r7, #22]
  for (uint16_t i = 0; i < out_slot_size; i++)
 800341a:	8abb      	ldrh	r3, [r7, #20]
 800341c:	3301      	adds	r3, #1
 800341e:	82bb      	strh	r3, [r7, #20]
 8003420:	8aba      	ldrh	r2, [r7, #20]
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	429a      	cmp	r2, r3
 8003426:	d3d5      	bcc.n	80033d4 <st_fifo_extract_sensor+0x20>
    }
  }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <is_tag_valid>:
  *
  * @retval uint8_t           valid (1) or invalid (0) tag.
  *
  */
static uint8_t is_tag_valid(uint8_t tag)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if (tag > device[fifo_ver].tag_valid_limit)
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <is_tag_valid+0x3c>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <is_tag_valid+0x40>)
 8003446:	460b      	mov	r3, r1
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	440b      	add	r3, r1
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	79fa      	ldrb	r2, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d901      	bls.n	8003460 <is_tag_valid+0x2c>
  {
    return 0;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <is_tag_valid+0x2e>
  }
  else
  {
    return 1;
 8003460:	2301      	movs	r3, #1
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20006884 	.word	0x20006884
 8003474:	08016db0 	.word	0x08016db0

08003478 <get_sensor_type>:
  *
  * @retval st_fifo_sensor_type    sensor type.
  *
  */
static st_fifo_sensor_type get_sensor_type(uint8_t tag)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  st_fifo_sensor_type type;

  switch (tag)
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	3b01      	subs	r3, #1
 8003486:	2b1d      	cmp	r3, #29
 8003488:	f200 8094 	bhi.w	80035b4 <get_sensor_type+0x13c>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <get_sensor_type+0x1c>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	0800350d 	.word	0x0800350d
 8003498:	08003513 	.word	0x08003513
 800349c:	08003519 	.word	0x08003519
 80034a0:	080035b5 	.word	0x080035b5
 80034a4:	080035b5 	.word	0x080035b5
 80034a8:	0800353d 	.word	0x0800353d
 80034ac:	08003543 	.word	0x08003543
 80034b0:	08003549 	.word	0x08003549
 80034b4:	0800354f 	.word	0x0800354f
 80034b8:	08003555 	.word	0x08003555
 80034bc:	0800355b 	.word	0x0800355b
 80034c0:	08003561 	.word	0x08003561
 80034c4:	08003567 	.word	0x08003567
 80034c8:	0800351f 	.word	0x0800351f
 80034cc:	08003525 	.word	0x08003525
 80034d0:	0800352b 	.word	0x0800352b
 80034d4:	08003531 	.word	0x08003531
 80034d8:	08003537 	.word	0x08003537
 80034dc:	0800356d 	.word	0x0800356d
 80034e0:	08003573 	.word	0x08003573
 80034e4:	08003579 	.word	0x08003579
 80034e8:	0800357f 	.word	0x0800357f
 80034ec:	08003585 	.word	0x08003585
 80034f0:	0800358b 	.word	0x0800358b
 80034f4:	08003591 	.word	0x08003591
 80034f8:	08003597 	.word	0x08003597
 80034fc:	0800359d 	.word	0x0800359d
 8003500:	080035a3 	.word	0x080035a3
 8003504:	080035a9 	.word	0x080035a9
 8003508:	080035af 	.word	0x080035af
  {
    case TAG_GY:
      type = ST_FIFO_GYROSCOPE;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e053      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_XL:
      type = ST_FIFO_ACCELEROMETER;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
      break;
 8003516:	e050      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_TEMP:
      type = ST_FIFO_TEMPERATURE;
 8003518:	2302      	movs	r3, #2
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e04d      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_EXT_SENS_0:
      type = ST_FIFO_EXT_SENSOR0;
 800351e:	2303      	movs	r3, #3
 8003520:	73fb      	strb	r3, [r7, #15]
      break;
 8003522:	e04a      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_EXT_SENS_1:
      type = ST_FIFO_EXT_SENSOR1;
 8003524:	2304      	movs	r3, #4
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e047      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_EXT_SENS_2:
      type = ST_FIFO_EXT_SENSOR2;
 800352a:	2305      	movs	r3, #5
 800352c:	73fb      	strb	r3, [r7, #15]
      break;
 800352e:	e044      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_EXT_SENS_3:
      type = ST_FIFO_EXT_SENSOR3;
 8003530:	2306      	movs	r3, #6
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e041      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_STEP_COUNTER:
      type = ST_FIFO_STEP_COUNTER;
 8003536:	2307      	movs	r3, #7
 8003538:	73fb      	strb	r3, [r7, #15]
      break;
 800353a:	e03e      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_ACCELEROMETER;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e03b      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_ACCELEROMETER;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      break;
 8003546:	e038      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_ACCELEROMETER;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e035      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_ACCELEROMETER;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      break;
 8003552:	e032      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_GYROSCOPE;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
      break;
 8003558:	e02f      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_GYROSCOPE;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
      break;
 800355e:	e02c      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_GYROSCOPE;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e029      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_GYROSCOPE;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
      break;
 800356a:	e026      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GAME_RV:
      type = ST_FIFO_6X_GAME_RV;
 800356c:	2308      	movs	r3, #8
 800356e:	73fb      	strb	r3, [r7, #15]
      break;
 8003570:	e023      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GEOM_RV:
      type = ST_FIFO_6X_GEOM_RV;
 8003572:	2309      	movs	r3, #9
 8003574:	73fb      	strb	r3, [r7, #15]
      break;
 8003576:	e020      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_NORM_RV:
      type = ST_FIFO_9X_RV;
 8003578:	230a      	movs	r3, #10
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e01d      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GYRO_BIAS:
      type = ST_FIFO_GYRO_BIAS;
 800357e:	230b      	movs	r3, #11
 8003580:	73fb      	strb	r3, [r7, #15]
      break;
 8003582:	e01a      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_GRAVITIY:
      type = ST_FIFO_GRAVITY;
 8003584:	230c      	movs	r3, #12
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e017      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_MAG_CAL:
      type = ST_FIFO_MAGNETOMETER_CALIB;
 800358a:	230d      	movs	r3, #13
 800358c:	73fb      	strb	r3, [r7, #15]
      break;
 800358e:	e014      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_EXT_SENS_NACK:
      type = ST_FIFO_EXT_SENSOR_NACK;
 8003590:	230e      	movs	r3, #14
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e011      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_MLC_RESULT:
      type = ST_FIFO_MLC_RESULT;
 8003596:	230f      	movs	r3, #15
 8003598:	73fb      	strb	r3, [r7, #15]
      break;
 800359a:	e00e      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_MLC_FILTER:
      type = ST_FIFO_MLC_FILTER;
 800359c:	2310      	movs	r3, #16
 800359e:	73fb      	strb	r3, [r7, #15]
      break;
 80035a0:	e00b      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_MLC_FEATURE:
      type = ST_FIFO_MLC_FEATURE;
 80035a2:	2311      	movs	r3, #17
 80035a4:	73fb      	strb	r3, [r7, #15]
      break;
 80035a6:	e008      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_DUALC_XL:
      type = ST_FIFO_DUALC_ACCELEROMETER;
 80035a8:	2312      	movs	r3, #18
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e005      	b.n	80035ba <get_sensor_type+0x142>
    case TAG_EIS_GY:
      type = ST_FIFO_EIS_GYROSCOPE;
 80035ae:	2313      	movs	r3, #19
 80035b0:	73fb      	strb	r3, [r7, #15]
      break;
 80035b2:	e002      	b.n	80035ba <get_sensor_type+0x142>
    default:
      type = ST_FIFO_NONE;
 80035b4:	2314      	movs	r3, #20
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	bf00      	nop
  }

  return type;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <get_compression_type>:
  *
  * @retval st_fifo_compression_type    compression type.
  *
  */
static st_fifo_compression_type get_compression_type(uint8_t tag)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  st_fifo_compression_type type;

  switch (tag)
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	3b06      	subs	r3, #6
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d82a      	bhi.n	8003630 <get_compression_type+0x68>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <get_compression_type+0x18>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003601 	.word	0x08003601
 80035e4:	08003607 	.word	0x08003607
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	08003613 	.word	0x08003613
 80035f0:	08003619 	.word	0x08003619
 80035f4:	0800361f 	.word	0x0800361f
 80035f8:	08003625 	.word	0x08003625
 80035fc:	0800362b 	.word	0x0800362b
  {
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8003600:	2302      	movs	r3, #2
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e017      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      break;
 800360a:	e014      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 800360c:	2303      	movs	r3, #3
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e011      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 8003612:	2304      	movs	r3, #4
 8003614:	73fb      	strb	r3, [r7, #15]
      break;
 8003616:	e00e      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8003618:	2302      	movs	r3, #2
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e00b      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      break;
 8003622:	e008      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 8003624:	2303      	movs	r3, #3
 8003626:	73fb      	strb	r3, [r7, #15]
      break;
 8003628:	e005      	b.n	8003636 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 800362a:	2304      	movs	r3, #4
 800362c:	73fb      	strb	r3, [r7, #15]
      break;
 800362e:	e002      	b.n	8003636 <get_compression_type+0x6e>
    default:
      type = ST_FIFO_COMPRESSION_NC;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	bf00      	nop
  }

  return type;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <bdr_get_index>:
  *
  * @retval uint8_t           index of the nearest BDR.
  *
  */
static uint8_t bdr_get_index(const float *bdr, float n)
{
 8003644:	b480      	push	{r7}
 8003646:	b095      	sub	sp, #84	; 0x54
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	ed87 0a00 	vstr	s0, [r7]
  float diff[16], min = FLT_MAX;
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <bdr_get_index+0xbc>)
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t idx = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  for (uint8_t i = 0; i < 16u; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003660:	e019      	b.n	8003696 <bdr_get_index+0x52>
  {
    diff[i] = fabsf(bdr[i] - n);
 8003662:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	ed93 7a00 	vldr	s14, [r3]
 8003670:	edd7 7a00 	vldr	s15, [r7]
 8003674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003678:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800367c:	eef0 7ae7 	vabs.f32	s15, s15
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	3350      	adds	r3, #80	; 0x50
 8003684:	443b      	add	r3, r7
 8003686:	3b48      	subs	r3, #72	; 0x48
 8003688:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 16u; i++)
 800368c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003690:	3301      	adds	r3, #1
 8003692:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8003696:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d9e1      	bls.n	8003662 <bdr_get_index+0x1e>
  }

  for (uint8_t i = 0; i < 16u; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80036a4:	e01f      	b.n	80036e6 <bdr_get_index+0xa2>
  {
    if (diff[i] < min)
 80036a6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3350      	adds	r3, #80	; 0x50
 80036ae:	443b      	add	r3, r7
 80036b0:	3b48      	subs	r3, #72	; 0x48
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80036ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	dd0b      	ble.n	80036dc <bdr_get_index+0x98>
    {
      min = diff[i];
 80036c4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3350      	adds	r3, #80	; 0x50
 80036cc:	443b      	add	r3, r7
 80036ce:	3b48      	subs	r3, #72	; 0x48
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      idx = i;
 80036d4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80036d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  for (uint8_t i = 0; i < 16u; i++)
 80036dc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80036e0:	3301      	adds	r3, #1
 80036e2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80036e6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d9db      	bls.n	80036a6 <bdr_get_index+0x62>
    }
  }

  return idx;
 80036ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3754      	adds	r7, #84	; 0x54
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	7f7fffff 	.word	0x7f7fffff

08003704 <has_even_parity>:
  *
  * @retval uint8_t           the byte has even parity (1) or not (0).
  *
  */
static uint8_t has_even_parity(uint8_t x)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0x00, b = 0x01;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	2301      	movs	r3, #1
 8003714:	737b      	strb	r3, [r7, #13]

  for (uint8_t i = 0; i < 8u; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	73bb      	strb	r3, [r7, #14]
 800371a:	e00d      	b.n	8003738 <has_even_parity+0x34>
  {
    if ((x & (b << i)) != 0x00u)
 800371c:	79fa      	ldrb	r2, [r7, #7]
 800371e:	7b79      	ldrb	r1, [r7, #13]
 8003720:	7bbb      	ldrb	r3, [r7, #14]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <has_even_parity+0x2e>
    {
      count++;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	3301      	adds	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 8u; i++)
 8003732:	7bbb      	ldrb	r3, [r7, #14]
 8003734:	3301      	adds	r3, #1
 8003736:	73bb      	strb	r3, [r7, #14]
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	2b07      	cmp	r3, #7
 800373c:	d9ee      	bls.n	800371c <has_even_parity+0x18>
    }
  }

  if ((count & 0x01u) == 0x01u)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <has_even_parity+0x48>
  {
    return 0;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <has_even_parity+0x4a>
  }

  return 1;
 800374c:	2301      	movs	r3, #1
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <get_diff_2x>:
  * @param  diff[6]           compressed data (2x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_2x(int16_t diff[6], uint8_t input[6])
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 6u; i++)
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e01d      	b.n	80037a6 <get_diff_2x+0x4c>
  {
    diff[i] = input[i] < 128u ? (int16_t)input[i] : (int16_t)input[i] - 256;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b25b      	sxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	db05      	blt.n	8003784 <get_diff_2x+0x2a>
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4413      	add	r3, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b21b      	sxth	r3, r3
 8003782:	e008      	b.n	8003796 <get_diff_2x+0x3c>
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003792:	b29b      	uxth	r3, r3
 8003794:	b21b      	sxth	r3, r3
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	440a      	add	r2, r1
 800379e:	8013      	strh	r3, [r2, #0]
  for (uint8_t i = 0; i < 6u; i++)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	3301      	adds	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d9de      	bls.n	800376a <get_diff_2x+0x10>
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <get_diff_3x>:
  * @param  diff[6]           compressed data (3x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_3x(int16_t diff[9], uint8_t input[6])
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  uint16_t decode_tmp;

  for (uint8_t i = 0; i < 3u; i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e03a      	b.n	8003840 <get_diff_3x+0x86>
  {

    (void)memcpy(&decode_tmp, &input[2u * i], 2);
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	813b      	strh	r3, [r7, #8]

    for (uint8_t j = 0; j < 3u; j++)
 80037d8:	2300      	movs	r3, #0
 80037da:	73bb      	strb	r3, [r7, #14]
 80037dc:	e02a      	b.n	8003834 <get_diff_3x+0x7a>
    {
      uint16_t utmp = (decode_tmp & ((uint16_t)0x1Fu << (5u * j))) >> (5u * j);
 80037de:	893b      	ldrh	r3, [r7, #8]
 80037e0:	4619      	mov	r1, r3
 80037e2:	7bba      	ldrb	r2, [r7, #14]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	221f      	movs	r2, #31
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	4019      	ands	r1, r3
 80037f2:	7bba      	ldrb	r2, [r7, #14]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	fa41 f303 	asr.w	r3, r1, r3
 80037fe:	81bb      	strh	r3, [r7, #12]
      int16_t tmp = (int16_t)utmp;
 8003800:	89bb      	ldrh	r3, [r7, #12]
 8003802:	817b      	strh	r3, [r7, #10]
      diff[j + 3u * i] = tmp < 16 ? tmp : (tmp - 32);
 8003804:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	dd04      	ble.n	8003816 <get_diff_3x+0x5c>
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	3b20      	subs	r3, #32
 8003810:	b29b      	uxth	r3, r3
 8003812:	b21a      	sxth	r2, r3
 8003814:	e001      	b.n	800381a <get_diff_3x+0x60>
 8003816:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800381a:	7bb8      	ldrb	r0, [r7, #14]
 800381c:	7bf9      	ldrb	r1, [r7, #15]
 800381e:	460b      	mov	r3, r1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	440b      	add	r3, r1
 8003824:	4403      	add	r3, r0
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	440b      	add	r3, r1
 800382c:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 3u; j++)
 800382e:	7bbb      	ldrb	r3, [r7, #14]
 8003830:	3301      	adds	r3, #1
 8003832:	73bb      	strb	r3, [r7, #14]
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d9d1      	bls.n	80037de <get_diff_3x+0x24>
  for (uint8_t i = 0; i < 3u; i++)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3301      	adds	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d9c1      	bls.n	80037ca <get_diff_3x+0x10>
    }
  }
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_MspInit+0x44>)
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_MspInit+0x44>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6613      	str	r3, [r2, #96]	; 0x60
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_MspInit+0x44>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_MspInit+0x44>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_MspInit+0x44>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_MspInit+0x44>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b0ac      	sub	sp, #176	; 0xb0
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	2288      	movs	r2, #136	; 0x88
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f00f fdd4 	bl	801346a <memset>
  if(hi2c->Instance==I2C3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_I2C_MspInit+0xb0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d13b      	bne.n	8003944 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80038cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80038d2:	2300      	movs	r3, #0
 80038d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	4618      	mov	r0, r3
 80038dc:	f003 feb2 	bl	8007644 <HAL_RCCEx_PeriphCLKConfig>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80038e6:	f7fd fcd3 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_I2C_MspInit+0xb4>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_I2C_MspInit+0xb4>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f6:	4b16      	ldr	r3, [pc, #88]	; (8003950 <HAL_I2C_MspInit+0xb4>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8003902:	2303      	movs	r3, #3
 8003904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003908:	2312      	movs	r3, #18
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003914:	2303      	movs	r3, #3
 8003916:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800391a:	2304      	movs	r3, #4
 800391c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003924:	4619      	mov	r1, r3
 8003926:	480b      	ldr	r0, [pc, #44]	; (8003954 <HAL_I2C_MspInit+0xb8>)
 8003928:	f000 fe60 	bl	80045ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_I2C_MspInit+0xb4>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_I2C_MspInit+0xb4>)
 8003932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003936:	6593      	str	r3, [r2, #88]	; 0x58
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_I2C_MspInit+0xb4>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003944:	bf00      	nop
 8003946:	37b0      	adds	r7, #176	; 0xb0
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40005c00 	.word	0x40005c00
 8003950:	40021000 	.word	0x40021000
 8003954:	48000800 	.word	0x48000800

08003958 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b0a4      	sub	sp, #144	; 0x90
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	2288      	movs	r2, #136	; 0x88
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f00f fd7e 	bl	801346a <memset>
  if(hrtc->Instance==RTC)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_RTC_MspInit+0x5c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d118      	bne.n	80039aa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800397c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800397e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fe5a 	bl	8007644 <HAL_RCCEx_PeriphCLKConfig>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003996:	f7fd fc7b 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_RTC_MspInit+0x60>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <HAL_RTC_MspInit+0x60>)
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039aa:	bf00      	nop
 80039ac:	3790      	adds	r7, #144	; 0x90
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40002800 	.word	0x40002800
 80039b8:	40021000 	.word	0x40021000

080039bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b0ac      	sub	sp, #176	; 0xb0
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	2288      	movs	r2, #136	; 0x88
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f00f fd44 	bl	801346a <memset>
  if(hsd->Instance==SDMMC1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a51      	ldr	r2, [pc, #324]	; (8003b2c <HAL_SD_MspInit+0x170>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	f040 809a 	bne.w	8003b22 <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80039ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 80039f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 fe1f 	bl	8007644 <HAL_RCCEx_PeriphCLKConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003a0c:	f7fd fc40 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a10:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	4a46      	ldr	r2, [pc, #280]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a1a:	6613      	str	r3, [r2, #96]	; 0x60
 8003a1c:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a4c:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_SD_MspInit+0x174>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a58:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a72:	230c      	movs	r3, #12
 8003a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	482d      	ldr	r0, [pc, #180]	; (8003b34 <HAL_SD_MspInit+0x178>)
 8003a80:	f000 fdb4 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a84:	2304      	movs	r3, #4
 8003a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a9c:	230c      	movs	r3, #12
 8003a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4823      	ldr	r0, [pc, #140]	; (8003b38 <HAL_SD_MspInit+0x17c>)
 8003aaa:	f000 fd9f 	bl	80045ec <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8003aae:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_SD_MspInit+0x184>)
 8003ab2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8003ab4:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ada:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8003aea:	4814      	ldr	r0, [pc, #80]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003aec:	f000 fb46 	bl	800417c <HAL_DMA_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 8003af6:	f7fd fbcb 	bl	8001290 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
 8003b00:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <HAL_SD_MspInit+0x180>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2031      	movs	r0, #49	; 0x31
 8003b18:	f000 faf9 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003b1c:	2031      	movs	r0, #49	; 0x31
 8003b1e:	f000 fb12 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003b22:	bf00      	nop
 8003b24:	37b0      	adds	r7, #176	; 0xb0
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40012800 	.word	0x40012800
 8003b30:	40021000 	.word	0x40021000
 8003b34:	48000800 	.word	0x48000800
 8003b38:	48000c00 	.word	0x48000c00
 8003b3c:	200003ec 	.word	0x200003ec
 8003b40:	40020444 	.word	0x40020444

08003b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <NMI_Handler+0x4>

08003b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4e:	e7fe      	b.n	8003b4e <HardFault_Handler+0x4>

08003b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b54:	e7fe      	b.n	8003b54 <MemManage_Handler+0x4>

08003b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <BusFault_Handler+0x4>

08003b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b60:	e7fe      	b.n	8003b60 <UsageFault_Handler+0x4>

08003b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b90:	f000 f99e 	bl	8003ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003b9c:	2004      	movs	r0, #4
 8003b9e:	f000 fee7 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8003baa:	2008      	movs	r0, #8
 8003bac:	f000 fee0 	bl	8004970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <SDMMC1_IRQHandler+0x10>)
 8003bba:	f005 fd29 	bl	8009610 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000368 	.word	0x20000368

08003bc8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <DMA2_Channel4_IRQHandler+0x10>)
 8003bce:	f000 fc2e 	bl	800442e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200003ec 	.word	0x200003ec

08003bdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <OTG_FS_IRQHandler+0x10>)
 8003be2:	f001 fe4d 	bl	8005880 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20008248 	.word	0x20008248

08003bf0 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	9302      	str	r3, [sp, #8]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2301      	movs	r3, #1
 8003c12:	2172      	movs	r1, #114	; 0x72
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f001 f877 	bl	8004d08 <HAL_I2C_Mem_Read>
 8003c1a:	4603      	mov	r3, r0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return 1;
 8003c28:	2301      	movs	r3, #1
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_kill>:

int _kill(int pid, int sig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c3e:	f00f fc67 	bl	8013510 <__errno>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2216      	movs	r2, #22
 8003c46:	601a      	str	r2, [r3, #0]
  return -1;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_exit>:

void _exit (int status)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ffe7 	bl	8003c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c66:	e7fe      	b.n	8003c66 <_exit+0x12>

08003c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e00a      	b.n	8003c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c7a:	f3af 8000 	nop.w
 8003c7e:	4601      	mov	r1, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	60ba      	str	r2, [r7, #8]
 8003c86:	b2ca      	uxtb	r2, r1
 8003c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	dbf0      	blt.n	8003c7a <_read+0x12>
  }

  return len;
 8003c98:	687b      	ldr	r3, [r7, #4]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e009      	b.n	8003cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	60ba      	str	r2, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	dbf1      	blt.n	8003cb4 <_write+0x12>
  }
  return len;
 8003cd0:	687b      	ldr	r3, [r7, #4]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_close>:

int _close(int file)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d02:	605a      	str	r2, [r3, #4]
  return 0;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_isatty>:

int _isatty(int file)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d1a:	2301      	movs	r3, #1
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <_sbrk+0x5c>)
 8003d4e:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <_sbrk+0x60>)
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <_sbrk+0x64>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <_sbrk+0x64>)
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <_sbrk+0x68>)
 8003d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <_sbrk+0x64>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d207      	bcs.n	8003d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d74:	f00f fbcc 	bl	8013510 <__errno>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	220c      	movs	r2, #12
 8003d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d82:	e009      	b.n	8003d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <_sbrk+0x64>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <_sbrk+0x64>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <_sbrk+0x64>)
 8003d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20018000 	.word	0x20018000
 8003da4:	00000800 	.word	0x00000800
 8003da8:	200068bc 	.word	0x200068bc
 8003dac:	20008ac0 	.word	0x20008ac0

08003db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <SystemInit+0x20>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <SystemInit+0x20>)
 8003dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003dd8:	f7ff ffea 	bl	8003db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ddc:	480c      	ldr	r0, [pc, #48]	; (8003e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dde:	490d      	ldr	r1, [pc, #52]	; (8003e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <LoopForever+0xe>)
  movs r3, #0
 8003de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de4:	e002      	b.n	8003dec <LoopCopyDataInit>

08003de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dea:	3304      	adds	r3, #4

08003dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df0:	d3f9      	bcc.n	8003de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003df4:	4c0a      	ldr	r4, [pc, #40]	; (8003e20 <LoopForever+0x16>)
  movs r3, #0
 8003df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df8:	e001      	b.n	8003dfe <LoopFillZerobss>

08003dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dfc:	3204      	adds	r2, #4

08003dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e00:	d3fb      	bcc.n	8003dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e02:	f00f fb8b 	bl	801351c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e06:	f7fd f817 	bl	8000e38 <main>

08003e0a <LoopForever>:

LoopForever:
    b LoopForever
 8003e0a:	e7fe      	b.n	8003e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e14:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003e18:	080174c8 	.word	0x080174c8
  ldr r2, =_sbss
 8003e1c:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003e20:	20008ac0 	.word	0x20008ac0

08003e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e24:	e7fe      	b.n	8003e24 <ADC1_2_IRQHandler>

08003e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e30:	2003      	movs	r0, #3
 8003e32:	f000 f961 	bl	80040f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e36:	200f      	movs	r0, #15
 8003e38:	f000 f80e 	bl	8003e58 <HAL_InitTick>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	71fb      	strb	r3, [r7, #7]
 8003e46:	e001      	b.n	8003e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e48:	f7ff fd04 	bl	8003854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_InitTick+0x6c>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_InitTick+0x70>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_InitTick+0x6c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f96d 	bl	8004162 <HAL_SYSTICK_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d809      	bhi.n	8003ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e94:	2200      	movs	r2, #0
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	f000 f937 	bl	800410e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_InitTick+0x74>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e007      	b.n	8003eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e004      	b.n	8003eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e001      	b.n	8003eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000008 	.word	0x20000008
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	20000004 	.word	0x20000004

08003ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_IncTick+0x20>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_IncTick+0x24>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_IncTick+0x24>)
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000008 	.word	0x20000008
 8003ef4:	200068c0 	.word	0x200068c0

08003ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return uwTick;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_GetTick+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	200068c0 	.word	0x200068c0

08003f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7ff ffee 	bl	8003ef8 <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d005      	beq.n	8003f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_Delay+0x44>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f36:	bf00      	nop
 8003f38:	f7ff ffde 	bl	8003ef8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d8f7      	bhi.n	8003f38 <HAL_Delay+0x28>
  {
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000008 	.word	0x20000008

08003f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f74:	4013      	ands	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	60d3      	str	r3, [r2, #12]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	0a1b      	lsrs	r3, r3, #8
 8003faa:	f003 0307 	and.w	r3, r3, #7
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	db0b      	blt.n	8003fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4907      	ldr	r1, [pc, #28]	; (8003ff4 <__NVIC_EnableIRQ+0x38>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2001      	movs	r0, #1
 8003fde:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000e100 	.word	0xe000e100

08003ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db0a      	blt.n	8004022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	490c      	ldr	r1, [pc, #48]	; (8004044 <__NVIC_SetPriority+0x4c>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	440b      	add	r3, r1
 800401c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004020:	e00a      	b.n	8004038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4908      	ldr	r1, [pc, #32]	; (8004048 <__NVIC_SetPriority+0x50>)
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	3b04      	subs	r3, #4
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	440b      	add	r3, r1
 8004036:	761a      	strb	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000e100 	.word	0xe000e100
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	; 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	bf28      	it	cs
 800406a:	2304      	movcs	r3, #4
 800406c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3304      	adds	r3, #4
 8004072:	2b06      	cmp	r3, #6
 8004074:	d902      	bls.n	800407c <NVIC_EncodePriority+0x30>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3b03      	subs	r3, #3
 800407a:	e000      	b.n	800407e <NVIC_EncodePriority+0x32>
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	f04f 32ff 	mov.w	r2, #4294967295
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	401a      	ands	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004094:	f04f 31ff 	mov.w	r1, #4294967295
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	43d9      	mvns	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a4:	4313      	orrs	r3, r2
         );
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3724      	adds	r7, #36	; 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3b01      	subs	r3, #1
 80040c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c4:	d301      	bcc.n	80040ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040c6:	2301      	movs	r3, #1
 80040c8:	e00f      	b.n	80040ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ca:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <SysTick_Config+0x40>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040d2:	210f      	movs	r1, #15
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	f7ff ff8e 	bl	8003ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <SysTick_Config+0x40>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040e2:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <SysTick_Config+0x40>)
 80040e4:	2207      	movs	r2, #7
 80040e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000e010 	.word	0xe000e010

080040f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff29 	bl	8003f58 <__NVIC_SetPriorityGrouping>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004120:	f7ff ff3e 	bl	8003fa0 <__NVIC_GetPriorityGrouping>
 8004124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f7ff ff8e 	bl	800404c <NVIC_EncodePriority>
 8004130:	4602      	mov	r2, r0
 8004132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff5d 	bl	8003ff8 <__NVIC_SetPriority>
}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff31 	bl	8003fbc <__NVIC_EnableIRQ>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ffa2 	bl	80040b4 <SysTick_Config>
 8004170:	4603      	mov	r3, r0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e098      	b.n	80042c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <HAL_DMA_Init+0x150>)
 8004196:	429a      	cmp	r2, r3
 8004198:	d80f      	bhi.n	80041ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <HAL_DMA_Init+0x154>)
 80041a2:	4413      	add	r3, r2
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <HAL_DMA_Init+0x158>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a48      	ldr	r2, [pc, #288]	; (80042d8 <HAL_DMA_Init+0x15c>)
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
 80041b8:	e00e      	b.n	80041d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_DMA_Init+0x160>)
 80041c2:	4413      	add	r3, r2
 80041c4:	4a43      	ldr	r2, [pc, #268]	; (80042d4 <HAL_DMA_Init+0x158>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	009a      	lsls	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a42      	ldr	r2, [pc, #264]	; (80042e0 <HAL_DMA_Init+0x164>)
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004232:	d039      	beq.n	80042a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <HAL_DMA_Init+0x15c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d11a      	bne.n	8004274 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_DMA_Init+0x168>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f003 031c 	and.w	r3, r3, #28
 800424a:	210f      	movs	r1, #15
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	4924      	ldr	r1, [pc, #144]	; (80042e4 <HAL_DMA_Init+0x168>)
 8004254:	4013      	ands	r3, r2
 8004256:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <HAL_DMA_Init+0x168>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f003 031c 	and.w	r3, r3, #28
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	491d      	ldr	r1, [pc, #116]	; (80042e4 <HAL_DMA_Init+0x168>)
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
 8004272:	e019      	b.n	80042a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_DMA_Init+0x16c>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	f003 031c 	and.w	r3, r3, #28
 8004280:	210f      	movs	r1, #15
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	4917      	ldr	r1, [pc, #92]	; (80042e8 <HAL_DMA_Init+0x16c>)
 800428a:	4013      	ands	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <HAL_DMA_Init+0x16c>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 031c 	and.w	r3, r3, #28
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	4911      	ldr	r1, [pc, #68]	; (80042e8 <HAL_DMA_Init+0x16c>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40020407 	.word	0x40020407
 80042d0:	bffdfff8 	.word	0xbffdfff8
 80042d4:	cccccccd 	.word	0xcccccccd
 80042d8:	40020000 	.word	0x40020000
 80042dc:	bffdfbf8 	.word	0xbffdfbf8
 80042e0:	40020400 	.word	0x40020400
 80042e4:	400200a8 	.word	0x400200a8
 80042e8:	400204a8 	.word	0x400204a8

080042ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_DMA_Start_IT+0x20>
 8004308:	2302      	movs	r3, #2
 800430a:	e04b      	b.n	80043a4 <HAL_DMA_Start_IT+0xb8>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d13a      	bne.n	8004396 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f921 	bl	800458c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 020e 	orr.w	r2, r2, #14
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e00f      	b.n	8004384 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0204 	bic.w	r2, r2, #4
 8004372:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 020a 	orr.w	r2, r2, #10
 8004382:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e005      	b.n	80043a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800439e:	2302      	movs	r3, #2
 80043a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d005      	beq.n	80043d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2204      	movs	r2, #4
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e029      	b.n	8004424 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 020e 	bic.w	r2, r2, #14
 80043de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	f003 021c 	and.w	r2, r3, #28
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004402:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4798      	blx	r3
    }
  }
  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f003 031c 	and.w	r3, r3, #28
 800444e:	2204      	movs	r2, #4
 8004450:	409a      	lsls	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d026      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x7a>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d021      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0204 	bic.w	r2, r2, #4
 8004480:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f003 021c 	and.w	r2, r3, #28
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2104      	movs	r1, #4
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	2b00      	cmp	r3, #0
 800449c:	d071      	beq.n	8004582 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80044a6:	e06c      	b.n	8004582 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f003 031c 	and.w	r3, r3, #28
 80044b0:	2202      	movs	r2, #2
 80044b2:	409a      	lsls	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02e      	beq.n	800451a <HAL_DMA_IRQHandler+0xec>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d029      	beq.n	800451a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 020a 	bic.w	r2, r2, #10
 80044e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f003 021c 	and.w	r2, r3, #28
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2102      	movs	r1, #2
 80044fa:	fa01 f202 	lsl.w	r2, r1, r2
 80044fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d038      	beq.n	8004582 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004518:	e033      	b.n	8004582 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	f003 031c 	and.w	r3, r3, #28
 8004522:	2208      	movs	r2, #8
 8004524:	409a      	lsls	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d02a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x156>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d025      	beq.n	8004584 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 020e 	bic.w	r2, r2, #14
 8004546:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	f003 021c 	and.w	r2, r3, #28
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f202 	lsl.w	r2, r1, r2
 800455a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004582:	bf00      	nop
 8004584:	bf00      	nop
}
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f003 021c 	and.w	r2, r3, #28
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d108      	bne.n	80045d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ce:	e007      	b.n	80045e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045fa:	e17f      	b.n	80048fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8171 	beq.w	80048f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d005      	beq.n	800462c <HAL_GPIO_Init+0x40>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d130      	bne.n	800468e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004662:	2201      	movs	r2, #1
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0201 	and.w	r2, r3, #1
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d118      	bne.n	80046cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80046a0:	2201      	movs	r2, #1
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	f003 0201 	and.w	r2, r3, #1
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d017      	beq.n	8004708 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2203      	movs	r2, #3
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d123      	bne.n	800475c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	08da      	lsrs	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3208      	adds	r2, #8
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	220f      	movs	r2, #15
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3208      	adds	r2, #8
 8004756:	6939      	ldr	r1, [r7, #16]
 8004758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80ac 	beq.w	80048f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	4b5f      	ldr	r3, [pc, #380]	; (800491c <HAL_GPIO_Init+0x330>)
 80047a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a2:	4a5e      	ldr	r2, [pc, #376]	; (800491c <HAL_GPIO_Init+0x330>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6613      	str	r3, [r2, #96]	; 0x60
 80047aa:	4b5c      	ldr	r3, [pc, #368]	; (800491c <HAL_GPIO_Init+0x330>)
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047b6:	4a5a      	ldr	r2, [pc, #360]	; (8004920 <HAL_GPIO_Init+0x334>)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	3302      	adds	r3, #2
 80047be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	220f      	movs	r2, #15
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047e0:	d025      	beq.n	800482e <HAL_GPIO_Init+0x242>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4f      	ldr	r2, [pc, #316]	; (8004924 <HAL_GPIO_Init+0x338>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01f      	beq.n	800482a <HAL_GPIO_Init+0x23e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a4e      	ldr	r2, [pc, #312]	; (8004928 <HAL_GPIO_Init+0x33c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d019      	beq.n	8004826 <HAL_GPIO_Init+0x23a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a4d      	ldr	r2, [pc, #308]	; (800492c <HAL_GPIO_Init+0x340>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_GPIO_Init+0x236>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a4c      	ldr	r2, [pc, #304]	; (8004930 <HAL_GPIO_Init+0x344>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00d      	beq.n	800481e <HAL_GPIO_Init+0x232>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a4b      	ldr	r2, [pc, #300]	; (8004934 <HAL_GPIO_Init+0x348>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <HAL_GPIO_Init+0x22e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <HAL_GPIO_Init+0x34c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_GPIO_Init+0x22a>
 8004812:	2306      	movs	r3, #6
 8004814:	e00c      	b.n	8004830 <HAL_GPIO_Init+0x244>
 8004816:	2307      	movs	r3, #7
 8004818:	e00a      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800481a:	2305      	movs	r3, #5
 800481c:	e008      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800481e:	2304      	movs	r3, #4
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x244>
 8004822:	2303      	movs	r3, #3
 8004824:	e004      	b.n	8004830 <HAL_GPIO_Init+0x244>
 8004826:	2302      	movs	r3, #2
 8004828:	e002      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_GPIO_Init+0x244>
 800482e:	2300      	movs	r3, #0
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	f002 0203 	and.w	r2, r2, #3
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	4093      	lsls	r3, r2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004840:	4937      	ldr	r1, [pc, #220]	; (8004920 <HAL_GPIO_Init+0x334>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800484e:	4b3b      	ldr	r3, [pc, #236]	; (800493c <HAL_GPIO_Init+0x350>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004872:	4a32      	ldr	r2, [pc, #200]	; (800493c <HAL_GPIO_Init+0x350>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004878:	4b30      	ldr	r3, [pc, #192]	; (800493c <HAL_GPIO_Init+0x350>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	43db      	mvns	r3, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800489c:	4a27      	ldr	r2, [pc, #156]	; (800493c <HAL_GPIO_Init+0x350>)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_GPIO_Init+0x350>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048c6:	4a1d      	ldr	r2, [pc, #116]	; (800493c <HAL_GPIO_Init+0x350>)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_GPIO_Init+0x350>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048f0:	4a12      	ldr	r2, [pc, #72]	; (800493c <HAL_GPIO_Init+0x350>)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3301      	adds	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	f47f ae78 	bne.w	80045fc <HAL_GPIO_Init+0x10>
  }
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	40010000 	.word	0x40010000
 8004924:	48000400 	.word	0x48000400
 8004928:	48000800 	.word	0x48000800
 800492c:	48000c00 	.word	0x48000c00
 8004930:	48001000 	.word	0x48001000
 8004934:	48001400 	.word	0x48001400
 8004938:	48001800 	.word	0x48001800
 800493c:	40010400 	.word	0x40010400

08004940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e001      	b.n	8004962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d006      	beq.n	8004994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fc fa36 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40010400 	.word	0x40010400

080049a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e08d      	b.n	8004ace <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fe ff68 	bl	800389c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	e006      	b.n	8004a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d108      	bne.n	8004a42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3e:	605a      	str	r2, [r3, #4]
 8004a40:	e007      	b.n	8004a52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69d9      	ldr	r1, [r3, #28]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1a      	ldr	r2, [r3, #32]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	460b      	mov	r3, r1
 8004aec:	813b      	strh	r3, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	f040 80fd 	bne.w	8004cfa <HAL_I2C_Mem_Write+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_I2C_Mem_Write+0x34>
 8004b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d105      	bne.n	8004b18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0f1      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_I2C_Mem_Write+0x4e>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0ea      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b2e:	f7ff f9e3 	bl	8003ef8 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2319      	movs	r3, #25
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fac7 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0d5      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2221      	movs	r2, #33	; 0x21
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2240      	movs	r2, #64	; 0x40
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b78:	88f8      	ldrh	r0, [r7, #6]
 8004b7a:	893a      	ldrh	r2, [r7, #8]
 8004b7c:	8979      	ldrh	r1, [r7, #10]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	4603      	mov	r3, r0
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f9d7 	bl	8004f3c <I2C_RequestMemoryWrite>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0ad      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2bff      	cmp	r3, #255	; 0xff
 8004ba8:	d90e      	bls.n	8004bc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	22ff      	movs	r2, #255	; 0xff
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	8979      	ldrh	r1, [r7, #10]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fc41 	bl	8005448 <I2C_TransferConfig>
 8004bc6:	e00f      	b.n	8004be8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	8979      	ldrh	r1, [r7, #10]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fc30 	bl	8005448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fac0 	bl	8005172 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e07f      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	781a      	ldrb	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d034      	beq.n	8004ca0 <HAL_I2C_Mem_Write+0x1c8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d130      	bne.n	8004ca0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fa43 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e051      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2bff      	cmp	r3, #255	; 0xff
 8004c60:	d90e      	bls.n	8004c80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	22ff      	movs	r2, #255	; 0xff
 8004c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	8979      	ldrh	r1, [r7, #10]
 8004c70:	2300      	movs	r3, #0
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fbe5 	bl	8005448 <I2C_TransferConfig>
 8004c7e:	e00f      	b.n	8004ca0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	8979      	ldrh	r1, [r7, #10]
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fbd4 	bl	8005448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d19e      	bne.n	8004be8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 faa6 	bl	8005200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e01e      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	61da      	str	r2, [r3, #28]

    /* Clear NAK flag */

    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2210      	movs	r2, #16
 8004ccc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <HAL_I2C_Mem_Write+0x22c>)
 8004cda:	400b      	ands	r3, r1
 8004cdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_I2C_Mem_Write+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	fe00e800 	.word	0xfe00e800

08004d08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	813b      	strh	r3, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	f040 80fd 	bne.w	8004f2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_I2C_Mem_Read+0x34>
 8004d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0f1      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_I2C_Mem_Read+0x4e>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e0ea      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d5e:	f7ff f8cb 	bl	8003ef8 <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2319      	movs	r3, #25
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f9af 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0d5      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2222      	movs	r2, #34	; 0x22
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004da8:	88f8      	ldrh	r0, [r7, #6]
 8004daa:	893a      	ldrh	r2, [r7, #8]
 8004dac:	8979      	ldrh	r1, [r7, #10]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4603      	mov	r3, r0
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f913 	bl	8004fe4 <I2C_RequestMemoryRead>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0ad      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2bff      	cmp	r3, #255	; 0xff
 8004dd8:	d90e      	bls.n	8004df8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	4b52      	ldr	r3, [pc, #328]	; (8004f34 <HAL_I2C_Mem_Read+0x22c>)
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fb29 	bl	8005448 <I2C_TransferConfig>
 8004df6:	e00f      	b.n	8004e18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	8979      	ldrh	r1, [r7, #10]
 8004e0a:	4b4a      	ldr	r3, [pc, #296]	; (8004f34 <HAL_I2C_Mem_Read+0x22c>)
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fb18 	bl	8005448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2104      	movs	r1, #4
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f956 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07c      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d034      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x1d0>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d130      	bne.n	8004ed8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f927 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e04d      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2bff      	cmp	r3, #255	; 0xff
 8004e98:	d90e      	bls.n	8004eb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	8979      	ldrh	r1, [r7, #10]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fac9 	bl	8005448 <I2C_TransferConfig>
 8004eb6:	e00f      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	8979      	ldrh	r1, [r7, #10]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fab8 	bl	8005448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d19a      	bne.n	8004e18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f98a 	bl	8005200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e01a      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2220      	movs	r2, #32
 8004efc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6859      	ldr	r1, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_I2C_Mem_Read+0x230>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
  }
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	80002400 	.word	0x80002400
 8004f38:	fe00e800 	.word	0xfe00e800

08004f3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	4608      	mov	r0, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	817b      	strh	r3, [r7, #10]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	813b      	strh	r3, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	8979      	ldrh	r1, [r7, #10]
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <I2C_RequestMemoryWrite+0xa4>)
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fa6f 	bl	8005448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f8ff 	bl	8005172 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e02c      	b.n	8004fd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f84:	893b      	ldrh	r3, [r7, #8]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f8e:	e015      	b.n	8004fbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8e5 	bl	8005172 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e012      	b.n	8004fd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2180      	movs	r1, #128	; 0x80
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f884 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	80002000 	.word	0x80002000

08004fe4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	817b      	strh	r3, [r7, #10]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	813b      	strh	r3, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	8979      	ldrh	r1, [r7, #10]
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <I2C_RequestMemoryRead+0xa4>)
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fa1c 	bl	8005448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	69b9      	ldr	r1, [r7, #24]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f8ac 	bl	8005172 <I2C_WaitOnTXISFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e02c      	b.n	800507e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800502a:	893b      	ldrh	r3, [r7, #8]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
 8005034:	e015      	b.n	8005062 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005036:	893b      	ldrh	r3, [r7, #8]
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	b29b      	uxth	r3, r3
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f892 	bl	8005172 <I2C_WaitOnTXISFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e012      	b.n	800507e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2200      	movs	r2, #0
 800506a:	2140      	movs	r1, #64	; 0x40
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f831 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	80002000 	.word	0x80002000

0800508c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d103      	bne.n	80050aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	619a      	str	r2, [r3, #24]
  }
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e4:	e031      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d02d      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ee:	f7fe ff03 	bl	8003ef8 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d302      	bcc.n	8005104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d122      	bne.n	800514a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	429a      	cmp	r2, r3
 8005120:	d113      	bne.n	800514a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00f      	b.n	800516a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	429a      	cmp	r2, r3
 8005166:	d0be      	beq.n	80050e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800517e:	e033      	b.n	80051e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f87f 	bl	8005288 <I2C_IsErrorOccurred>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e031      	b.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d025      	beq.n	80051e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519c:	f7fe feac 	bl	8003ef8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11a      	bne.n	80051e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d013      	beq.n	80051e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e007      	b.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d1c4      	bne.n	8005180 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800520c:	e02f      	b.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f838 	bl	8005288 <I2C_IsErrorOccurred>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e02d      	b.n	800527e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fe fe69 	bl	8003ef8 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d013      	beq.n	800526e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e007      	b.n	800527e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d1c8      	bne.n	800520e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d068      	beq.n	8005386 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2210      	movs	r2, #16
 80052ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052bc:	e049      	b.n	8005352 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d045      	beq.n	8005352 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052c6:	f7fe fe17 	bl	8003ef8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d302      	bcc.n	80052dc <I2C_IsErrorOccurred+0x54>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d13a      	bne.n	8005352 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fe:	d121      	bne.n	8005344 <I2C_IsErrorOccurred+0xbc>
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005306:	d01d      	beq.n	8005344 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	2b20      	cmp	r3, #32
 800530c:	d01a      	beq.n	8005344 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800531e:	f7fe fdeb 	bl	8003ef8 <HAL_GetTick>
 8005322:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005324:	e00e      	b.n	8005344 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005326:	f7fe fde7 	bl	8003ef8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b19      	cmp	r3, #25
 8005332:	d907      	bls.n	8005344 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f043 0320 	orr.w	r3, r3, #32
 800533a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005342:	e006      	b.n	8005352 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d1e9      	bne.n	8005326 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b20      	cmp	r3, #32
 800535e:	d003      	beq.n	8005368 <I2C_IsErrorOccurred+0xe0>
 8005360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0aa      	beq.n	80052be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2220      	movs	r2, #32
 8005376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f043 0308 	orr.w	r3, r3, #8
 80053c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00b      	beq.n	80053f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f043 0302 	orr.w	r3, r3, #2
 80053e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80053f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01c      	beq.n	8005436 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fe45 	bl	800508c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <I2C_IsErrorOccurred+0x1bc>)
 800540e:	400b      	ands	r3, r1
 8005410:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	431a      	orrs	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800543a:	4618      	mov	r0, r3
 800543c:	3728      	adds	r7, #40	; 0x28
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	fe00e800 	.word	0xfe00e800

08005448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	817b      	strh	r3, [r7, #10]
 8005456:	4613      	mov	r3, r2
 8005458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005460:	7a7b      	ldrb	r3, [r7, #9]
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005468:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	4313      	orrs	r3, r2
 8005472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005476:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	0d5b      	lsrs	r3, r3, #21
 8005482:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <I2C_TransferConfig+0x60>)
 8005488:	430b      	orrs	r3, r1
 800548a:	43db      	mvns	r3, r3
 800548c:	ea02 0103 	and.w	r1, r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	03ff63ff 	.word	0x03ff63ff

080054ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d138      	bne.n	8005534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e032      	b.n	8005536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	; 0x24
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6819      	ldr	r1, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e000      	b.n	8005536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b20      	cmp	r3, #32
 8005556:	d139      	bne.n	80055cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005562:	2302      	movs	r3, #2
 8005564:	e033      	b.n	80055ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2224      	movs	r2, #36	; 0x24
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055dc:	b08f      	sub	sp, #60	; 0x3c
 80055de:	af0a      	add	r7, sp, #40	; 0x28
 80055e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e116      	b.n	800581a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f00c fb3c 	bl	8011c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2203      	movs	r2, #3
 8005610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f005 fefd 	bl	800b42a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	687e      	ldr	r6, [r7, #4]
 8005638:	466d      	mov	r5, sp
 800563a:	f106 0410 	add.w	r4, r6, #16
 800563e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005646:	e894 0003 	ldmia.w	r4, {r0, r1}
 800564a:	e885 0003 	stmia.w	r5, {r0, r1}
 800564e:	1d33      	adds	r3, r6, #4
 8005650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005652:	6838      	ldr	r0, [r7, #0]
 8005654:	f005 fe10 	bl	800b278 <USB_CoreInit>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0d7      	b.n	800581a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f005 feeb 	bl	800b44c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e04a      	b.n	8005712 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	333d      	adds	r3, #61	; 0x3d
 800568c:	2201      	movs	r2, #1
 800568e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005690:	7bfa      	ldrb	r2, [r7, #15]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	333c      	adds	r3, #60	; 0x3c
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	b298      	uxth	r0, r3
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	3356      	adds	r3, #86	; 0x56
 80056b8:	4602      	mov	r2, r0
 80056ba:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	3340      	adds	r3, #64	; 0x40
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3344      	adds	r3, #68	; 0x44
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3348      	adds	r3, #72	; 0x48
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	334c      	adds	r3, #76	; 0x4c
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	3301      	adds	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
 8005712:	7bfa      	ldrb	r2, [r7, #15]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d3af      	bcc.n	800567c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
 8005720:	e044      	b.n	80057ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005764:	7bfa      	ldrb	r2, [r7, #15]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	3301      	adds	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3b5      	bcc.n	8005722 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	687e      	ldr	r6, [r7, #4]
 80057be:	466d      	mov	r5, sp
 80057c0:	f106 0410 	add.w	r4, r6, #16
 80057c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80057d4:	1d33      	adds	r3, r6, #4
 80057d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057d8:	6838      	ldr	r0, [r7, #0]
 80057da:	f005 fe83 	bl	800b4e4 <USB_DevInit>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e014      	b.n	800581a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 f869 	bl	80068e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f006 fe31 	bl	800c47a <USB_DevDisconnect>

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005822 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_PCD_Start+0x1c>
 800583a:	2302      	movs	r3, #2
 800583c:	e01c      	b.n	8005878 <HAL_PCD_Start+0x56>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f005 fdd2 	bl	800b408 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f006 fde5 	bl	800c438 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b08d      	sub	sp, #52	; 0x34
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f006 fea3 	bl	800c5e2 <USB_GetMode>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 847e 	bne.w	80061a0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f006 fe07 	bl	800c4bc <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8474 	beq.w	800619e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f006 fdf4 	bl	800c4bc <USB_ReadInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d107      	bne.n	80058ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f002 0202 	and.w	r2, r2, #2
 80058ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f006 fde2 	bl	800c4bc <USB_ReadInterrupts>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d161      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0210 	bic.w	r2, r2, #16
 8005910:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	0c5b      	lsrs	r3, r3, #17
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	2b02      	cmp	r3, #2
 800593c:	d124      	bne.n	8005988 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d035      	beq.n	80059b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6a38      	ldr	r0, [r7, #32]
 800595e:	f006 fc19 	bl	800c194 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596e:	441a      	add	r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	091b      	lsrs	r3, r3, #4
 800597c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005980:	441a      	add	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	615a      	str	r2, [r3, #20]
 8005986:	e016      	b.n	80059b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	0c5b      	lsrs	r3, r3, #17
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2b06      	cmp	r3, #6
 8005992:	d110      	bne.n	80059b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800599a:	2208      	movs	r2, #8
 800599c:	4619      	mov	r1, r3
 800599e:	6a38      	ldr	r0, [r7, #32]
 80059a0:	f006 fbf8 	bl	800c194 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b0:	441a      	add	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0210 	orr.w	r2, r2, #16
 80059c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f006 fd76 	bl	800c4bc <USB_ReadInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059da:	f040 80a7 	bne.w	8005b2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f006 fd7b 	bl	800c4e2 <USB_ReadDevAllOutEpInterrupt>
 80059ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059ee:	e099      	b.n	8005b24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 808e 	beq.w	8005b18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f006 fd9f 	bl	800c54a <USB_ReadDevOutEPInterrupt>
 8005a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	2301      	movs	r3, #1
 8005a28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fe7d 	bl	800672c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 feb9 	bl	80067c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2310      	movs	r3, #16
 8005a70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d030      	beq.n	8005ade <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d109      	bne.n	8005a9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	3304      	adds	r3, #4
 8005ab0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	78db      	ldrb	r3, [r3, #3]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d108      	bne.n	8005acc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f00c fa22 	bl	8011f10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2302      	movs	r3, #2
 8005adc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	461a      	mov	r2, r3
 8005af6:	2320      	movs	r3, #32
 8005af8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	461a      	mov	r2, r3
 8005b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f47f af62 	bne.w	80059f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f006 fcc3 	bl	800c4bc <USB_ReadInterrupts>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b40:	f040 80a4 	bne.w	8005c8c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f006 fce4 	bl	800c516 <USB_ReadDevAllInEpInterrupt>
 8005b4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b54:	e096      	b.n	8005c84 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 808b 	beq.w	8005c78 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f006 fd0a 	bl	800c586 <USB_ReadDevInEPInterrupt>
 8005b72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d020      	beq.n	8005bc0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2201      	movs	r2, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	43db      	mvns	r3, r3
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f00c f913 	bl	8011de6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2308      	movs	r3, #8
 8005bda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2340      	movs	r3, #64	; 0x40
 8005c12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d023      	beq.n	8005c66 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c20:	6a38      	ldr	r0, [r7, #32]
 8005c22:	f005 fda1 	bl	800b768 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	3338      	adds	r3, #56	; 0x38
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	3304      	adds	r3, #4
 8005c38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	78db      	ldrb	r3, [r3, #3]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d108      	bne.n	8005c54 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f00c f970 	bl	8011f34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	2302      	movs	r3, #2
 8005c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fcd2 	bl	800661c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f47f af65 	bne.w	8005b56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f006 fc13 	bl	800c4bc <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca0:	d122      	bne.n	8005ce8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d108      	bne.n	8005cd2 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f00c fba4 	bl	8012418 <HAL_PCDEx_LPM_Callback>
 8005cd0:	e002      	b.n	8005cd8 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f00c f8f4 	bl	8011ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f006 fbe5 	bl	800c4bc <USB_ReadInterrupts>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfc:	d112      	bne.n	8005d24 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d102      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f00c f8b0 	bl	8011e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f006 fbc7 	bl	800c4bc <USB_ReadInterrupts>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d38:	d121      	bne.n	8005d7e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005d48:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d111      	bne.n	8005d78 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	f003 020f 	and.w	r2, r3, #15
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d6e:	2101      	movs	r1, #1
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f00c fb51 	bl	8012418 <HAL_PCDEx_LPM_Callback>
 8005d76:	e002      	b.n	8005d7e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f00c f87b 	bl	8011e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f006 fb9a 	bl	800c4bc <USB_ReadInterrupts>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	f040 80b5 	bne.w	8005f00 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2110      	movs	r1, #16
 8005db0:	4618      	mov	r0, r3
 8005db2:	f005 fcd9 	bl	800b768 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dba:	e046      	b.n	8005e4a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	3301      	adds	r3, #1
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3b3      	bcc.n	8005dbc <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e62:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e66:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d016      	beq.n	8005e9e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e80:	f043 030b 	orr.w	r3, r3, #11
 8005e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e96:	f043 030b 	orr.w	r3, r3, #11
 8005e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8005e9c:	e015      	b.n	8005eca <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005eb0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005eb4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec4:	f043 030b 	orr.w	r3, r3, #11
 8005ec8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005edc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f006 fbaa 	bl	800c644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f006 fad9 	bl	800c4bc <USB_ReadInterrupts>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f14:	d124      	bne.n	8005f60 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f006 fb6f 	bl	800c5fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f005 fc9c 	bl	800b862 <USB_GetDevSpeed>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681c      	ldr	r4, [r3, #0]
 8005f36:	f001 faed 	bl	8007514 <HAL_RCC_GetHCLKFreq>
 8005f3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	4620      	mov	r0, r4
 8005f46:	f005 f9c3 	bl	800b2d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f00b ff73 	bl	8011e36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f006 faa9 	bl	800c4bc <USB_ReadInterrupts>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d10a      	bne.n	8005f8a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f00b ff50 	bl	8011e1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f002 0208 	and.w	r2, r2, #8
 8005f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f006 fa94 	bl	800c4bc <USB_ReadInterrupts>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d122      	bne.n	8005fe4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005faa:	2301      	movs	r3, #1
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	e014      	b.n	8005fda <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d105      	bne.n	8005fd4 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 faf3 	bl	80065ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d3e5      	bcc.n	8005fb0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f006 fa67 	bl	800c4bc <USB_ReadInterrupts>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff8:	d13b      	bne.n	8006072 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	e02b      	b.n	8006058 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	3340      	adds	r3, #64	; 0x40
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d115      	bne.n	8006052 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006026:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006028:	2b00      	cmp	r3, #0
 800602a:	da12      	bge.n	8006052 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	333f      	adds	r3, #63	; 0x3f
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006048:	b2db      	uxtb	r3, r3
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fab4 	bl	80065ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	3301      	adds	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605e:	429a      	cmp	r2, r3
 8006060:	d3ce      	bcc.n	8006000 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f006 fa20 	bl	800c4bc <USB_ReadInterrupts>
 800607c:	4603      	mov	r3, r0
 800607e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006086:	d155      	bne.n	8006134 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006088:	2301      	movs	r3, #1
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	e045      	b.n	800611a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d12e      	bne.n	8006114 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da2b      	bge.n	8006114 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80060c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d121      	bne.n	8006114 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006110:	6053      	str	r3, [r2, #4]
            break;
 8006112:	e007      	b.n	8006124 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	3301      	adds	r3, #1
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	429a      	cmp	r2, r3
 8006122:	d3b4      	bcc.n	800608e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f006 f9bf 	bl	800c4bc <USB_ReadInterrupts>
 800613e:	4603      	mov	r3, r0
 8006140:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d10a      	bne.n	8006160 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f00b ff04 	bl	8011f58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800615e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f006 f9a9 	bl	800c4bc <USB_ReadInterrupts>
 800616a:	4603      	mov	r3, r0
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d115      	bne.n	80061a0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f00b fef4 	bl	8011f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
 800619c:	e000      	b.n	80061a0 <HAL_PCD_IRQHandler+0x920>
      return;
 800619e:	bf00      	nop
    }
  }
}
 80061a0:	3734      	adds	r7, #52	; 0x34
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}

080061a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_PCD_SetAddress+0x1a>
 80061bc:	2302      	movs	r3, #2
 80061be:	e013      	b.n	80061e8 <HAL_PCD_SetAddress+0x42>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	78fa      	ldrb	r2, [r7, #3]
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f006 f907 	bl	800c3ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	4608      	mov	r0, r1
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	70fb      	strb	r3, [r7, #3]
 8006202:	460b      	mov	r3, r1
 8006204:	803b      	strh	r3, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800620e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006212:	2b00      	cmp	r3, #0
 8006214:	da0f      	bge.n	8006236 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	f003 020f 	and.w	r2, r3, #15
 800621c:	4613      	mov	r3, r2
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	3338      	adds	r3, #56	; 0x38
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4413      	add	r3, r2
 800622a:	3304      	adds	r3, #4
 800622c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	705a      	strb	r2, [r3, #1]
 8006234:	e00f      	b.n	8006256 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	f003 020f 	and.w	r2, r3, #15
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	3304      	adds	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006262:	883a      	ldrh	r2, [r7, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	78ba      	ldrb	r2, [r7, #2]
 800626c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006280:	78bb      	ldrb	r3, [r7, #2]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d102      	bne.n	800628c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_PCD_EP_Open+0xaa>
 8006296:	2302      	movs	r3, #2
 8006298:	e00e      	b.n	80062b8 <HAL_PCD_EP_Open+0xc8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f005 faf9 	bl	800b8a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80062b6:	7afb      	ldrb	r3, [r7, #11]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da0f      	bge.n	80062f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	f003 020f 	and.w	r2, r3, #15
 80062da:	4613      	mov	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	3338      	adds	r3, #56	; 0x38
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	3304      	adds	r3, #4
 80062ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	705a      	strb	r2, [r3, #1]
 80062f2:	e00f      	b.n	8006314 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_PCD_EP_Close+0x6e>
 800632a:	2302      	movs	r3, #2
 800632c:	e00e      	b.n	800634c <HAL_PCD_EP_Close+0x8c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	4618      	mov	r0, r3
 800633e:	f005 fb37 	bl	800b9b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	460b      	mov	r3, r1
 8006362:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	f003 020f 	and.w	r2, r3, #15
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	3304      	adds	r3, #4
 800637c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2200      	movs	r2, #0
 800638e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2200      	movs	r2, #0
 8006394:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	b2da      	uxtb	r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f005 fbdd 	bl	800bb68 <USB_EPStartXfer>

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 020f 	and.w	r2, r3, #15
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80063da:	681b      	ldr	r3, [r3, #0]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	460b      	mov	r3, r1
 80063f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3338      	adds	r3, #56	; 0x38
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2200      	movs	r2, #0
 8006420:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2201      	movs	r2, #1
 8006426:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006428:	7afb      	ldrb	r3, [r7, #11]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	b2da      	uxtb	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	4618      	mov	r0, r3
 800643c:	f005 fb94 	bl	800bb68 <USB_EPStartXfer>

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	f003 020f 	and.w	r2, r3, #15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d901      	bls.n	8006468 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e04e      	b.n	8006506 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800646c:	2b00      	cmp	r3, #0
 800646e:	da0f      	bge.n	8006490 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	4613      	mov	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	3338      	adds	r3, #56	; 0x38
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	705a      	strb	r2, [r3, #1]
 800648e:	e00d      	b.n	80064ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	4613      	mov	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_PCD_EP_SetStall+0x82>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e01c      	b.n	8006506 <HAL_PCD_EP_SetStall+0xbc>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68f9      	ldr	r1, [r7, #12]
 80064da:	4618      	mov	r0, r3
 80064dc:	f005 feb2 	bl	800c244 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d108      	bne.n	80064fc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f006 f8a4 	bl	800c644 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d901      	bls.n	800652c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e042      	b.n	80065b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800652c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da0f      	bge.n	8006554 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 020f 	and.w	r2, r3, #15
 800653a:	4613      	mov	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	3338      	adds	r3, #56	; 0x38
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4413      	add	r3, r2
 8006548:	3304      	adds	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	705a      	strb	r2, [r3, #1]
 8006552:	e00f      	b.n	8006574 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 020f 	and.w	r2, r3, #15
 800655a:	4613      	mov	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_PCD_EP_ClrStall+0x86>
 8006590:	2302      	movs	r3, #2
 8006592:	e00e      	b.n	80065b2 <HAL_PCD_EP_ClrStall+0xa4>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f005 febc 	bl	800c320 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80065c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da0c      	bge.n	80065e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	4613      	mov	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	3338      	adds	r3, #56	; 0x38
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	3304      	adds	r3, #4
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e00c      	b.n	8006602 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	4613      	mov	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	3304      	adds	r3, #4
 8006600:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	4618      	mov	r0, r3
 800660a:	f005 fcdf 	bl	800bfcc <USB_EPStopXfer>
 800660e:	4603      	mov	r3, r0
 8006610:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006612:	7afb      	ldrb	r3, [r7, #11]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	4613      	mov	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	3338      	adds	r3, #56	; 0x38
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	429a      	cmp	r2, r3
 800664e:	d901      	bls.n	8006654 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e067      	b.n	8006724 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	429a      	cmp	r2, r3
 8006668:	d902      	bls.n	8006670 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	3303      	adds	r3, #3
 8006674:	089b      	lsrs	r3, r3, #2
 8006676:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006678:	e026      	b.n	80066c8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	429a      	cmp	r2, r3
 800668e:	d902      	bls.n	8006696 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3303      	adds	r3, #3
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	68d9      	ldr	r1, [r3, #12]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f005 fd38 	bl	800c120 <USB_WritePacket>

    ep->xfer_buff  += len;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	441a      	add	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	441a      	add	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d809      	bhi.n	80066f2 <PCD_WriteEmptyTxFifo+0xd6>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d203      	bcs.n	80066f2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1c3      	bne.n	800667a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d811      	bhi.n	8006722 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	2201      	movs	r2, #1
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	43db      	mvns	r3, r3
 8006718:	6939      	ldr	r1, [r7, #16]
 800671a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800671e:	4013      	ands	r3, r2
 8006720:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	333c      	adds	r3, #60	; 0x3c
 8006744:	3304      	adds	r3, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <PCD_EP_OutXfrComplete_int+0x98>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d124      	bne.n	80067ac <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	461a      	mov	r2, r3
 800677a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677e:	6093      	str	r3, [r2, #8]
 8006780:	e01a      	b.n	80067b8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	461a      	mov	r2, r3
 800679a:	2320      	movs	r3, #32
 800679c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f00b fb03 	bl	8011db0 <HAL_PCD_DataOutStageCallback>
 80067aa:	e005      	b.n	80067b8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f00b fafc 	bl	8011db0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	4f54310a 	.word	0x4f54310a

080067c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	333c      	adds	r3, #60	; 0x3c
 80067e0:	3304      	adds	r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4a0c      	ldr	r2, [pc, #48]	; (800682c <PCD_EP_OutSetupPacket_int+0x64>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d90e      	bls.n	800681c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f00b fab5 	bl	8011d8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	4f54300a 	.word	0x4f54300a

08006830 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
 800683c:	4613      	mov	r3, r2
 800683e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d107      	bne.n	800685e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800684e:	883b      	ldrh	r3, [r7, #0]
 8006850:	0419      	lsls	r1, r3, #16
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	430a      	orrs	r2, r1
 800685a:	629a      	str	r2, [r3, #40]	; 0x28
 800685c:	e028      	b.n	80068b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
 8006870:	e00d      	b.n	800688e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	3340      	adds	r3, #64	; 0x40
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	0c1b      	lsrs	r3, r3, #16
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4413      	add	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	3301      	adds	r3, #1
 800688c:	73fb      	strb	r3, [r7, #15]
 800688e:	7bfa      	ldrb	r2, [r7, #15]
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	3b01      	subs	r3, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d3ec      	bcc.n	8006872 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006898:	883b      	ldrh	r3, [r7, #0]
 800689a:	0418      	lsls	r0, r3, #16
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6819      	ldr	r1, [r3, #0]
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	4302      	orrs	r2, r0
 80068a8:	3340      	adds	r3, #64	; 0x40
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006912:	f043 0303 	orr.w	r3, r3, #3
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <HAL_PWREx_GetVoltageRange+0x18>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006934:	4618      	mov	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40007000 	.word	0x40007000

08006944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006952:	d130      	bne.n	80069b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006954:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	d038      	beq.n	80069d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006962:	4b20      	ldr	r3, [pc, #128]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800696c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006970:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2232      	movs	r2, #50	; 0x32
 8006978:	fb02 f303 	mul.w	r3, r2, r3
 800697c:	4a1b      	ldr	r2, [pc, #108]	; (80069ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800697e:	fba2 2303 	umull	r2, r3, r2, r3
 8006982:	0c9b      	lsrs	r3, r3, #18
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006988:	e002      	b.n	8006990 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b01      	subs	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699c:	d102      	bne.n	80069a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f2      	bne.n	800698a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b0:	d110      	bne.n	80069d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e00f      	b.n	80069d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d007      	beq.n	80069d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069cc:	4a05      	ldr	r2, [pc, #20]	; (80069e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40007000 	.word	0x40007000
 80069e8:	20000000 	.word	0x20000000
 80069ec:	431bde83 	.word	0x431bde83

080069f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_PWREx_EnableVddUSB+0x1c>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <HAL_PWREx_EnableVddUSB+0x1c>)
 80069fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069fe:	6053      	str	r3, [r2, #4]
}
 8006a00:	bf00      	nop
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40007000 	.word	0x40007000

08006a10 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f023 0307 	bic.w	r3, r3, #7
 8006a1c:	4a07      	ldr	r2, [pc, #28]	; (8006a3c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8006a1e:	f043 0304 	orr.w	r3, r3, #4
 8006a22:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8006a2a:	f043 0304 	orr.w	r3, r3, #4
 8006a2e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006a30:	bf30      	wfi
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	40007000 	.word	0x40007000
 8006a40:	e000ed00 	.word	0xe000ed00

08006a44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e3ca      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a56:	4b97      	ldr	r3, [pc, #604]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a60:	4b94      	ldr	r3, [pc, #592]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80e4 	beq.w	8006c40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_RCC_OscConfig+0x4a>
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b0c      	cmp	r3, #12
 8006a82:	f040 808b 	bne.w	8006b9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f040 8087 	bne.w	8006b9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a8e:	4b89      	ldr	r3, [pc, #548]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e3a2      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1a      	ldr	r2, [r3, #32]
 8006aaa:	4b82      	ldr	r3, [pc, #520]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x7c>
 8006ab6:	4b7f      	ldr	r3, [pc, #508]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abe:	e005      	b.n	8006acc <HAL_RCC_OscConfig+0x88>
 8006ac0:	4b7c      	ldr	r3, [pc, #496]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac6:	091b      	lsrs	r3, r3, #4
 8006ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d223      	bcs.n	8006b18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fd55 	bl	8007584 <RCC_SetFlashLatencyFromMSIRange>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e383      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ae4:	4b73      	ldr	r3, [pc, #460]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a72      	ldr	r2, [pc, #456]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006aea:	f043 0308 	orr.w	r3, r3, #8
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	4b70      	ldr	r3, [pc, #448]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	496d      	ldr	r1, [pc, #436]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b02:	4b6c      	ldr	r3, [pc, #432]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	4968      	ldr	r1, [pc, #416]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	604b      	str	r3, [r1, #4]
 8006b16:	e025      	b.n	8006b64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b18:	4b66      	ldr	r3, [pc, #408]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a65      	ldr	r2, [pc, #404]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b1e:	f043 0308 	orr.w	r3, r3, #8
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	4b63      	ldr	r3, [pc, #396]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	4960      	ldr	r1, [pc, #384]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b36:	4b5f      	ldr	r3, [pc, #380]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	495b      	ldr	r1, [pc, #364]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fd15 	bl	8007584 <RCC_SetFlashLatencyFromMSIRange>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e343      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b64:	f000 fc4a 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4b52      	ldr	r3, [pc, #328]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	4950      	ldr	r1, [pc, #320]	; (8006cb8 <HAL_RCC_OscConfig+0x274>)
 8006b76:	5ccb      	ldrb	r3, [r1, r3]
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	4a4e      	ldr	r2, [pc, #312]	; (8006cbc <HAL_RCC_OscConfig+0x278>)
 8006b82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b84:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fd f965 	bl	8003e58 <HAL_InitTick>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d052      	beq.n	8006c3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	e327      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d032      	beq.n	8006c0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ba4:	4b43      	ldr	r3, [pc, #268]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a42      	ldr	r2, [pc, #264]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bb0:	f7fd f9a2 	bl	8003ef8 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bb8:	f7fd f99e 	bl	8003ef8 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e310      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bca:	4b3a      	ldr	r3, [pc, #232]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bd6:	4b37      	ldr	r3, [pc, #220]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a36      	ldr	r2, [pc, #216]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006bdc:	f043 0308 	orr.w	r3, r3, #8
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	4b34      	ldr	r3, [pc, #208]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	4931      	ldr	r1, [pc, #196]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bf4:	4b2f      	ldr	r3, [pc, #188]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	492c      	ldr	r1, [pc, #176]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
 8006c08:	e01a      	b.n	8006c40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c0a:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c10:	f023 0301 	bic.w	r3, r3, #1
 8006c14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c16:	f7fd f96f 	bl	8003ef8 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c1e:	f7fd f96b 	bl	8003ef8 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e2dd      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f0      	bne.n	8006c1e <HAL_RCC_OscConfig+0x1da>
 8006c3c:	e000      	b.n	8006c40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d074      	beq.n	8006d36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d005      	beq.n	8006c5e <HAL_RCC_OscConfig+0x21a>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d10e      	bne.n	8006c76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d064      	beq.n	8006d34 <HAL_RCC_OscConfig+0x2f0>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d160      	bne.n	8006d34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e2ba      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x24a>
 8006c80:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0b      	ldr	r2, [pc, #44]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e026      	b.n	8006cdc <HAL_RCC_OscConfig+0x298>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c96:	d115      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x280>
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a05      	ldr	r2, [pc, #20]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a02      	ldr	r2, [pc, #8]	; (8006cb4 <HAL_RCC_OscConfig+0x270>)
 8006caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	e014      	b.n	8006cdc <HAL_RCC_OscConfig+0x298>
 8006cb2:	bf00      	nop
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	08016fb8 	.word	0x08016fb8
 8006cbc:	20000000 	.word	0x20000000
 8006cc0:	20000004 	.word	0x20000004
 8006cc4:	4ba0      	ldr	r3, [pc, #640]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a9f      	ldr	r2, [pc, #636]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	4b9d      	ldr	r3, [pc, #628]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a9c      	ldr	r2, [pc, #624]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d013      	beq.n	8006d0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7fd f908 	bl	8003ef8 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cec:	f7fd f904 	bl	8003ef8 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	; 0x64
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e276      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cfe:	4b92      	ldr	r3, [pc, #584]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCC_OscConfig+0x2a8>
 8006d0a:	e014      	b.n	8006d36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0c:	f7fd f8f4 	bl	8003ef8 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d14:	f7fd f8f0 	bl	8003ef8 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b64      	cmp	r3, #100	; 0x64
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e262      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d26:	4b88      	ldr	r3, [pc, #544]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0x2d0>
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d060      	beq.n	8006e04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_OscConfig+0x310>
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d119      	bne.n	8006d82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d116      	bne.n	8006d82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d54:	4b7c      	ldr	r3, [pc, #496]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_OscConfig+0x328>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e23f      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6c:	4b76      	ldr	r3, [pc, #472]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	061b      	lsls	r3, r3, #24
 8006d7a:	4973      	ldr	r1, [pc, #460]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d80:	e040      	b.n	8006e04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d023      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d8a:	4b6f      	ldr	r3, [pc, #444]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6e      	ldr	r2, [pc, #440]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d96:	f7fd f8af 	bl	8003ef8 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d9e:	f7fd f8ab 	bl	8003ef8 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e21d      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006db0:	4b65      	ldr	r3, [pc, #404]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f0      	beq.n	8006d9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dbc:	4b62      	ldr	r3, [pc, #392]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	061b      	lsls	r3, r3, #24
 8006dca:	495f      	ldr	r1, [pc, #380]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	604b      	str	r3, [r1, #4]
 8006dd0:	e018      	b.n	8006e04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dd2:	4b5d      	ldr	r3, [pc, #372]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a5c      	ldr	r2, [pc, #368]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dde:	f7fd f88b 	bl	8003ef8 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de6:	f7fd f887 	bl	8003ef8 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e1f9      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006df8:	4b53      	ldr	r3, [pc, #332]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f0      	bne.n	8006de6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d03c      	beq.n	8006e8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01c      	beq.n	8006e52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e18:	4b4b      	ldr	r3, [pc, #300]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e1e:	4a4a      	ldr	r2, [pc, #296]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e28:	f7fd f866 	bl	8003ef8 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e30:	f7fd f862 	bl	8003ef8 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e1d4      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e42:	4b41      	ldr	r3, [pc, #260]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0ef      	beq.n	8006e30 <HAL_RCC_OscConfig+0x3ec>
 8006e50:	e01b      	b.n	8006e8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e52:	4b3d      	ldr	r3, [pc, #244]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e58:	4a3b      	ldr	r2, [pc, #236]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e62:	f7fd f849 	bl	8003ef8 <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e6a:	f7fd f845 	bl	8003ef8 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e1b7      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e7c:	4b32      	ldr	r3, [pc, #200]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1ef      	bne.n	8006e6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80a6 	beq.w	8006fe4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006e9c:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea8:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	4a26      	ldr	r2, [pc, #152]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006eb4:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ec4:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <HAL_RCC_OscConfig+0x508>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d118      	bne.n	8006f02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed0:	4b1e      	ldr	r3, [pc, #120]	; (8006f4c <HAL_RCC_OscConfig+0x508>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <HAL_RCC_OscConfig+0x508>)
 8006ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006edc:	f7fd f80c 	bl	8003ef8 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee4:	f7fd f808 	bl	8003ef8 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e17a      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_RCC_OscConfig+0x508>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f0      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d108      	bne.n	8006f1c <HAL_RCC_OscConfig+0x4d8>
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	4a0d      	ldr	r2, [pc, #52]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006f12:	f043 0301 	orr.w	r3, r3, #1
 8006f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f1a:	e029      	b.n	8006f70 <HAL_RCC_OscConfig+0x52c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b05      	cmp	r3, #5
 8006f22:	d115      	bne.n	8006f50 <HAL_RCC_OscConfig+0x50c>
 8006f24:	4b08      	ldr	r3, [pc, #32]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	4a07      	ldr	r2, [pc, #28]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006f2c:	f043 0304 	orr.w	r3, r3, #4
 8006f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f34:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3a:	4a03      	ldr	r2, [pc, #12]	; (8006f48 <HAL_RCC_OscConfig+0x504>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f44:	e014      	b.n	8006f70 <HAL_RCC_OscConfig+0x52c>
 8006f46:	bf00      	nop
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	40007000 	.word	0x40007000
 8006f50:	4b9c      	ldr	r3, [pc, #624]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f56:	4a9b      	ldr	r2, [pc, #620]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006f58:	f023 0301 	bic.w	r3, r3, #1
 8006f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f60:	4b98      	ldr	r3, [pc, #608]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	4a97      	ldr	r2, [pc, #604]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006f68:	f023 0304 	bic.w	r3, r3, #4
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d016      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f78:	f7fc ffbe 	bl	8003ef8 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f7e:	e00a      	b.n	8006f96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f80:	f7fc ffba 	bl	8003ef8 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e12a      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f96:	4b8b      	ldr	r3, [pc, #556]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ed      	beq.n	8006f80 <HAL_RCC_OscConfig+0x53c>
 8006fa4:	e015      	b.n	8006fd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa6:	f7fc ffa7 	bl	8003ef8 <HAL_GetTick>
 8006faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fac:	e00a      	b.n	8006fc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fae:	f7fc ffa3 	bl	8003ef8 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e113      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fc4:	4b7f      	ldr	r3, [pc, #508]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1ed      	bne.n	8006fae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fd2:	7ffb      	ldrb	r3, [r7, #31]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d105      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd8:	4b7a      	ldr	r3, [pc, #488]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fdc:	4a79      	ldr	r2, [pc, #484]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80fe 	beq.w	80071ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	f040 80d0 	bne.w	8007198 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ff8:	4b72      	ldr	r3, [pc, #456]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 0203 	and.w	r2, r3, #3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	429a      	cmp	r2, r3
 800700a:	d130      	bne.n	800706e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	3b01      	subs	r3, #1
 8007018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	429a      	cmp	r2, r3
 800701c:	d127      	bne.n	800706e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d11f      	bne.n	800706e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007038:	2a07      	cmp	r2, #7
 800703a:	bf14      	ite	ne
 800703c:	2201      	movne	r2, #1
 800703e:	2200      	moveq	r2, #0
 8007040:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007042:	4293      	cmp	r3, r2
 8007044:	d113      	bne.n	800706e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	3b01      	subs	r3, #1
 8007054:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007056:	429a      	cmp	r2, r3
 8007058:	d109      	bne.n	800706e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	085b      	lsrs	r3, r3, #1
 8007066:	3b01      	subs	r3, #1
 8007068:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800706a:	429a      	cmp	r2, r3
 800706c:	d06e      	beq.n	800714c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b0c      	cmp	r3, #12
 8007072:	d069      	beq.n	8007148 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007074:	4b53      	ldr	r3, [pc, #332]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d105      	bne.n	800708c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007080:	4b50      	ldr	r3, [pc, #320]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0ad      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007090:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a4b      	ldr	r2, [pc, #300]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800709a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800709c:	f7fc ff2c 	bl	8003ef8 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a4:	f7fc ff28 	bl	8003ef8 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e09a      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070b6:	4b43      	ldr	r3, [pc, #268]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070c2:	4b40      	ldr	r3, [pc, #256]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	4b40      	ldr	r3, [pc, #256]	; (80071c8 <HAL_RCC_OscConfig+0x784>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070d2:	3a01      	subs	r2, #1
 80070d4:	0112      	lsls	r2, r2, #4
 80070d6:	4311      	orrs	r1, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070dc:	0212      	lsls	r2, r2, #8
 80070de:	4311      	orrs	r1, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070e4:	0852      	lsrs	r2, r2, #1
 80070e6:	3a01      	subs	r2, #1
 80070e8:	0552      	lsls	r2, r2, #21
 80070ea:	4311      	orrs	r1, r2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070f0:	0852      	lsrs	r2, r2, #1
 80070f2:	3a01      	subs	r2, #1
 80070f4:	0652      	lsls	r2, r2, #25
 80070f6:	4311      	orrs	r1, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070fc:	0912      	lsrs	r2, r2, #4
 80070fe:	0452      	lsls	r2, r2, #17
 8007100:	430a      	orrs	r2, r1
 8007102:	4930      	ldr	r1, [pc, #192]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007104:	4313      	orrs	r3, r2
 8007106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007108:	4b2e      	ldr	r3, [pc, #184]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800710e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007114:	4b2b      	ldr	r3, [pc, #172]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	4a2a      	ldr	r2, [pc, #168]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800711a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800711e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007120:	f7fc feea 	bl	8003ef8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007128:	f7fc fee6 	bl	8003ef8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e058      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800713a:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007146:	e050      	b.n	80071ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e04f      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800714c:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d148      	bne.n	80071ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800715e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007162:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007164:	4b17      	ldr	r3, [pc, #92]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800716a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800716e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007170:	f7fc fec2 	bl	8003ef8 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fc febe 	bl	8003ef8 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e030      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800718a:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x734>
 8007196:	e028      	b.n	80071ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d023      	beq.n	80071e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <HAL_RCC_OscConfig+0x780>)
 80071a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071aa:	f7fc fea5 	bl	8003ef8 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b0:	e00c      	b.n	80071cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b2:	f7fc fea1 	bl	8003ef8 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d905      	bls.n	80071cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e013      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
 80071c4:	40021000 	.word	0x40021000
 80071c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071cc:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_RCC_OscConfig+0x7b0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1ec      	bne.n	80071b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_RCC_OscConfig+0x7b0>)
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	4905      	ldr	r1, [pc, #20]	; (80071f4 <HAL_RCC_OscConfig+0x7b0>)
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <HAL_RCC_OscConfig+0x7b4>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	60cb      	str	r3, [r1, #12]
 80071e4:	e001      	b.n	80071ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40021000 	.word	0x40021000
 80071f8:	feeefffc 	.word	0xfeeefffc

080071fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0e7      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007210:	4b75      	ldr	r3, [pc, #468]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d910      	bls.n	8007240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800721e:	4b72      	ldr	r3, [pc, #456]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f023 0207 	bic.w	r2, r3, #7
 8007226:	4970      	ldr	r1, [pc, #448]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	4313      	orrs	r3, r2
 800722c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800722e:	4b6e      	ldr	r3, [pc, #440]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	429a      	cmp	r2, r3
 800723a:	d001      	beq.n	8007240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0cf      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d010      	beq.n	800726e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	4b66      	ldr	r3, [pc, #408]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007258:	429a      	cmp	r2, r3
 800725a:	d908      	bls.n	800726e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800725c:	4b63      	ldr	r3, [pc, #396]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4960      	ldr	r1, [pc, #384]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 800726a:	4313      	orrs	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04c      	beq.n	8007314 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d107      	bne.n	8007292 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007282:	4b5a      	ldr	r3, [pc, #360]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d121      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0a6      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d107      	bne.n	80072aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800729a:	4b54      	ldr	r3, [pc, #336]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d115      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e09a      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072b2:	4b4e      	ldr	r3, [pc, #312]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e08e      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e086      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072d2:	4b46      	ldr	r3, [pc, #280]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f023 0203 	bic.w	r2, r3, #3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4943      	ldr	r1, [pc, #268]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e4:	f7fc fe08 	bl	8003ef8 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ea:	e00a      	b.n	8007302 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ec:	f7fc fe04 	bl	8003ef8 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e06e      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007302:	4b3a      	ldr	r3, [pc, #232]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 020c 	and.w	r2, r3, #12
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	429a      	cmp	r2, r3
 8007312:	d1eb      	bne.n	80072ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d010      	beq.n	8007342 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800732c:	429a      	cmp	r2, r3
 800732e:	d208      	bcs.n	8007342 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007330:	4b2e      	ldr	r3, [pc, #184]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	492b      	ldr	r1, [pc, #172]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 800733e:	4313      	orrs	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d210      	bcs.n	8007372 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007350:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f023 0207 	bic.w	r2, r3, #7
 8007358:	4923      	ldr	r1, [pc, #140]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007360:	4b21      	ldr	r3, [pc, #132]	; (80073e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d001      	beq.n	8007372 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e036      	b.n	80073e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800737e:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4918      	ldr	r1, [pc, #96]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 800738c:	4313      	orrs	r3, r2
 800738e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800739c:	4b13      	ldr	r3, [pc, #76]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	4910      	ldr	r1, [pc, #64]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073b0:	f000 f824 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 80073b4:	4602      	mov	r2, r0
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <HAL_RCC_ClockConfig+0x1f0>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	091b      	lsrs	r3, r3, #4
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	490b      	ldr	r1, [pc, #44]	; (80073f0 <HAL_RCC_ClockConfig+0x1f4>)
 80073c2:	5ccb      	ldrb	r3, [r1, r3]
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
 80073cc:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <HAL_RCC_ClockConfig+0x1f8>)
 80073ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <HAL_RCC_ClockConfig+0x1fc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fc fd3f 	bl	8003e58 <HAL_InitTick>
 80073da:	4603      	mov	r3, r0
 80073dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80073de:	7afb      	ldrb	r3, [r7, #11]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40022000 	.word	0x40022000
 80073ec:	40021000 	.word	0x40021000
 80073f0:	08016fb8 	.word	0x08016fb8
 80073f4:	20000000 	.word	0x20000000
 80073f8:	20000004 	.word	0x20000004

080073fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b089      	sub	sp, #36	; 0x24
 8007400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800740a:	4b3e      	ldr	r3, [pc, #248]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 030c 	and.w	r3, r3, #12
 8007412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007414:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_RCC_GetSysClockFreq+0x34>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b0c      	cmp	r3, #12
 8007428:	d121      	bne.n	800746e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d11e      	bne.n	800746e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007430:	4b34      	ldr	r3, [pc, #208]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	2b00      	cmp	r3, #0
 800743a:	d107      	bne.n	800744c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800743c:	4b31      	ldr	r3, [pc, #196]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 800743e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	61fb      	str	r3, [r7, #28]
 800744a:	e005      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800744c:	4b2d      	ldr	r3, [pc, #180]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	091b      	lsrs	r3, r3, #4
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007458:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10d      	bne.n	8007484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800746c:	e00a      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b04      	cmp	r3, #4
 8007472:	d102      	bne.n	800747a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007474:	4b25      	ldr	r3, [pc, #148]	; (800750c <HAL_RCC_GetSysClockFreq+0x110>)
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	e004      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d101      	bne.n	8007484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007480:	4b23      	ldr	r3, [pc, #140]	; (8007510 <HAL_RCC_GetSysClockFreq+0x114>)
 8007482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b0c      	cmp	r3, #12
 8007488:	d134      	bne.n	80074f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800748a:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d003      	beq.n	80074a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b03      	cmp	r3, #3
 800749e:	d003      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0xac>
 80074a0:	e005      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80074a2:	4b1a      	ldr	r3, [pc, #104]	; (800750c <HAL_RCC_GetSysClockFreq+0x110>)
 80074a4:	617b      	str	r3, [r7, #20]
      break;
 80074a6:	e005      	b.n	80074b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80074a8:	4b19      	ldr	r3, [pc, #100]	; (8007510 <HAL_RCC_GetSysClockFreq+0x114>)
 80074aa:	617b      	str	r3, [r7, #20]
      break;
 80074ac:	e002      	b.n	80074b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	617b      	str	r3, [r7, #20]
      break;
 80074b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074b4:	4b13      	ldr	r3, [pc, #76]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	3301      	adds	r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80074c2:	4b10      	ldr	r3, [pc, #64]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	fb03 f202 	mul.w	r2, r3, r2
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <HAL_RCC_GetSysClockFreq+0x108>)
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	0e5b      	lsrs	r3, r3, #25
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	3301      	adds	r3, #1
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80074f4:	69bb      	ldr	r3, [r7, #24]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3724      	adds	r7, #36	; 0x24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40021000 	.word	0x40021000
 8007508:	08016fd0 	.word	0x08016fd0
 800750c:	00f42400 	.word	0x00f42400
 8007510:	00b71b00 	.word	0x00b71b00

08007514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <HAL_RCC_GetHCLKFreq+0x14>)
 800751a:	681b      	ldr	r3, [r3, #0]
}
 800751c:	4618      	mov	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000000 	.word	0x20000000

0800752c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007530:	f7ff fff0 	bl	8007514 <HAL_RCC_GetHCLKFreq>
 8007534:	4602      	mov	r2, r0
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	4904      	ldr	r1, [pc, #16]	; (8007554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007542:	5ccb      	ldrb	r3, [r1, r3]
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800754c:	4618      	mov	r0, r3
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40021000 	.word	0x40021000
 8007554:	08016fc8 	.word	0x08016fc8

08007558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800755c:	f7ff ffda 	bl	8007514 <HAL_RCC_GetHCLKFreq>
 8007560:	4602      	mov	r2, r0
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	0adb      	lsrs	r3, r3, #11
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	4904      	ldr	r1, [pc, #16]	; (8007580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800756e:	5ccb      	ldrb	r3, [r1, r3]
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007578:	4618      	mov	r0, r3
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40021000 	.word	0x40021000
 8007580:	08016fc8 	.word	0x08016fc8

08007584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007590:	4b2a      	ldr	r3, [pc, #168]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800759c:	f7ff f9c4 	bl	8006928 <HAL_PWREx_GetVoltageRange>
 80075a0:	6178      	str	r0, [r7, #20]
 80075a2:	e014      	b.n	80075ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80075a4:	4b25      	ldr	r3, [pc, #148]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a8:	4a24      	ldr	r2, [pc, #144]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ae:	6593      	str	r3, [r2, #88]	; 0x58
 80075b0:	4b22      	ldr	r3, [pc, #136]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075bc:	f7ff f9b4 	bl	8006928 <HAL_PWREx_GetVoltageRange>
 80075c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075c2:	4b1e      	ldr	r3, [pc, #120]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c6:	4a1d      	ldr	r2, [pc, #116]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d4:	d10b      	bne.n	80075ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b80      	cmp	r3, #128	; 0x80
 80075da:	d919      	bls.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2ba0      	cmp	r3, #160	; 0xa0
 80075e0:	d902      	bls.n	80075e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075e2:	2302      	movs	r3, #2
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	e013      	b.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075e8:	2301      	movs	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	e010      	b.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b80      	cmp	r3, #128	; 0x80
 80075f2:	d902      	bls.n	80075fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80075f4:	2303      	movs	r3, #3
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	e00a      	b.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b80      	cmp	r3, #128	; 0x80
 80075fe:	d102      	bne.n	8007606 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007600:	2302      	movs	r3, #2
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	e004      	b.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b70      	cmp	r3, #112	; 0x70
 800760a:	d101      	bne.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800760c:	2301      	movs	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f023 0207 	bic.w	r2, r3, #7
 8007618:	4909      	ldr	r1, [pc, #36]	; (8007640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	429a      	cmp	r2, r3
 800762c:	d001      	beq.n	8007632 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	40022000 	.word	0x40022000

08007644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800764c:	2300      	movs	r3, #0
 800764e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007650:	2300      	movs	r3, #0
 8007652:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765c:	2b00      	cmp	r3, #0
 800765e:	d041      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007664:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007668:	d02a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800766a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800766e:	d824      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007674:	d008      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800767a:	d81e      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007684:	d010      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007686:	e018      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007688:	4b86      	ldr	r3, [pc, #536]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	4a85      	ldr	r2, [pc, #532]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800768e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007692:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007694:	e015      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3304      	adds	r3, #4
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f829 	bl	80086f4 <RCCEx_PLLSAI1_Config>
 80076a2:	4603      	mov	r3, r0
 80076a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076a6:	e00c      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3320      	adds	r3, #32
 80076ac:	2100      	movs	r1, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 f914 	bl	80088dc <RCCEx_PLLSAI2_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	74fb      	strb	r3, [r7, #19]
      break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80076c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c2:	7cfb      	ldrb	r3, [r7, #19]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076c8:	4b76      	ldr	r3, [pc, #472]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d6:	4973      	ldr	r1, [pc, #460]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076de:	e001      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	7cfb      	ldrb	r3, [r7, #19]
 80076e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d041      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076f8:	d02a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80076fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076fe:	d824      	bhi.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007704:	d008      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800770a:	d81e      	bhi.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007714:	d010      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007716:	e018      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007718:	4b62      	ldr	r3, [pc, #392]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	4a61      	ldr	r2, [pc, #388]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800771e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007722:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007724:	e015      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ffe1 	bl	80086f4 <RCCEx_PLLSAI1_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007736:	e00c      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3320      	adds	r3, #32
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f001 f8cc 	bl	80088dc <RCCEx_PLLSAI2_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007748:	e003      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	74fb      	strb	r3, [r7, #19]
      break;
 800774e:	e000      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007752:	7cfb      	ldrb	r3, [r7, #19]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007758:	4b52      	ldr	r3, [pc, #328]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007766:	494f      	ldr	r1, [pc, #316]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800776e:	e001      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	7cfb      	ldrb	r3, [r7, #19]
 8007772:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80a0 	beq.w	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007782:	2300      	movs	r3, #0
 8007784:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007786:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00d      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800779c:	4b41      	ldr	r3, [pc, #260]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800779e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a0:	4a40      	ldr	r2, [pc, #256]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a6:	6593      	str	r3, [r2, #88]	; 0x58
 80077a8:	4b3e      	ldr	r3, [pc, #248]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077b4:	2301      	movs	r3, #1
 80077b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077b8:	4b3b      	ldr	r3, [pc, #236]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a3a      	ldr	r2, [pc, #232]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077c4:	f7fc fb98 	bl	8003ef8 <HAL_GetTick>
 80077c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077ca:	e009      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077cc:	f7fc fb94 	bl	8003ef8 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d902      	bls.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	74fb      	strb	r3, [r7, #19]
        break;
 80077de:	e005      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077e0:	4b31      	ldr	r3, [pc, #196]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0ef      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80077ec:	7cfb      	ldrb	r3, [r7, #19]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d15c      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077f2:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01f      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	429a      	cmp	r2, r3
 800780e:	d019      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007810:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800781c:	4b21      	ldr	r3, [pc, #132]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	4a20      	ldr	r2, [pc, #128]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800782c:	4b1d      	ldr	r3, [pc, #116]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007832:	4a1c      	ldr	r2, [pc, #112]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800783c:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d016      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784e:	f7fc fb53 	bl	8003ef8 <HAL_GetTick>
 8007852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007854:	e00b      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007856:	f7fc fb4f 	bl	8003ef8 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	4293      	cmp	r3, r2
 8007866:	d902      	bls.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	74fb      	strb	r3, [r7, #19]
            break;
 800786c:	e006      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786e:	4b0d      	ldr	r3, [pc, #52]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0ec      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800787c:	7cfb      	ldrb	r3, [r7, #19]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007892:	4904      	ldr	r1, [pc, #16]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007894:	4313      	orrs	r3, r2
 8007896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800789a:	e009      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800789c:	7cfb      	ldrb	r3, [r7, #19]
 800789e:	74bb      	strb	r3, [r7, #18]
 80078a0:	e006      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80078a2:	bf00      	nop
 80078a4:	40021000 	.word	0x40021000
 80078a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	7cfb      	ldrb	r3, [r7, #19]
 80078ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078b0:	7c7b      	ldrb	r3, [r7, #17]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d105      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b6:	4b9e      	ldr	r3, [pc, #632]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ba:	4a9d      	ldr	r2, [pc, #628]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078ce:	4b98      	ldr	r3, [pc, #608]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	f023 0203 	bic.w	r2, r3, #3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	4994      	ldr	r1, [pc, #592]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078f0:	4b8f      	ldr	r3, [pc, #572]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f6:	f023 020c 	bic.w	r2, r3, #12
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	498c      	ldr	r1, [pc, #560]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007912:	4b87      	ldr	r3, [pc, #540]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	4983      	ldr	r1, [pc, #524]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007934:	4b7e      	ldr	r3, [pc, #504]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	497b      	ldr	r1, [pc, #492]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007956:	4b76      	ldr	r3, [pc, #472]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007964:	4972      	ldr	r1, [pc, #456]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007978:	4b6d      	ldr	r3, [pc, #436]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007986:	496a      	ldr	r1, [pc, #424]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007988:	4313      	orrs	r3, r2
 800798a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800799a:	4b65      	ldr	r3, [pc, #404]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800799c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a8:	4961      	ldr	r1, [pc, #388]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079bc:	4b5c      	ldr	r3, [pc, #368]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ca:	4959      	ldr	r1, [pc, #356]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079de:	4b54      	ldr	r3, [pc, #336]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	4950      	ldr	r1, [pc, #320]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a00:	4b4b      	ldr	r3, [pc, #300]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0e:	4948      	ldr	r1, [pc, #288]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a22:	4b43      	ldr	r3, [pc, #268]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a30:	493f      	ldr	r1, [pc, #252]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d028      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a44:	4b3a      	ldr	r3, [pc, #232]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a52:	4937      	ldr	r1, [pc, #220]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a62:	d106      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a64:	4b32      	ldr	r3, [pc, #200]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4a31      	ldr	r2, [pc, #196]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a6e:	60d3      	str	r3, [r2, #12]
 8007a70:	e011      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a7a:	d10c      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	2101      	movs	r1, #1
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fe36 	bl	80086f4 <RCCEx_PLLSAI1_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007a8c:	7cfb      	ldrb	r3, [r7, #19]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d028      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007aa2:	4b23      	ldr	r3, [pc, #140]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	491f      	ldr	r1, [pc, #124]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac0:	d106      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007acc:	60d3      	str	r3, [r2, #12]
 8007ace:	e011      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fe07 	bl	80086f4 <RCCEx_PLLSAI1_Config>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007aea:	7cfb      	ldrb	r3, [r7, #19]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007af0:	7cfb      	ldrb	r3, [r7, #19]
 8007af2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d02b      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0e:	4908      	ldr	r1, [pc, #32]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b1e:	d109      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b20:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	4a02      	ldr	r2, [pc, #8]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b2a:	60d3      	str	r3, [r2, #12]
 8007b2c:	e014      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007b2e:	bf00      	nop
 8007b30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fdd5 	bl	80086f4 <RCCEx_PLLSAI1_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b4e:	7cfb      	ldrb	r3, [r7, #19]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007b54:	7cfb      	ldrb	r3, [r7, #19]
 8007b56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d02f      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b64:	4b2b      	ldr	r3, [pc, #172]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b72:	4928      	ldr	r1, [pc, #160]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b82:	d10d      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	2102      	movs	r1, #2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fdb2 	bl	80086f4 <RCCEx_PLLSAI1_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b94:	7cfb      	ldrb	r3, [r7, #19]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007b9a:	7cfb      	ldrb	r3, [r7, #19]
 8007b9c:	74bb      	strb	r3, [r7, #18]
 8007b9e:	e011      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba8:	d10c      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3320      	adds	r3, #32
 8007bae:	2102      	movs	r1, #2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fe93 	bl	80088dc <RCCEx_PLLSAI2_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bba:	7cfb      	ldrb	r3, [r7, #19]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007bc0:	7cfb      	ldrb	r3, [r7, #19]
 8007bc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bd0:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bde:	490d      	ldr	r1, [pc, #52]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00b      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c02:	4904      	ldr	r1, [pc, #16]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007c0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40021000 	.word	0x40021000

08007c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c2a:	d13e      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007c2c:	4bb2      	ldr	r3, [pc, #712]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c36:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c3e:	d028      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c46:	f200 8542 	bhi.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c50:	d005      	beq.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c58:	d00e      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007c5a:	f000 bd38 	b.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c5e:	4ba6      	ldr	r3, [pc, #664]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	f040 8532 	bne.w	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8007c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c72:	61fb      	str	r3, [r7, #28]
      break;
 8007c74:	f000 bd2d 	b.w	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007c78:	4b9f      	ldr	r3, [pc, #636]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	f040 8527 	bne.w	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8007c88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c8c:	61fb      	str	r3, [r7, #28]
      break;
 8007c8e:	f000 bd22 	b.w	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c92:	4b99      	ldr	r3, [pc, #612]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c9e:	f040 851c 	bne.w	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8007ca2:	4b96      	ldr	r3, [pc, #600]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007ca4:	61fb      	str	r3, [r7, #28]
      break;
 8007ca6:	f000 bd18 	b.w	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007caa:	4b93      	ldr	r3, [pc, #588]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d036      	beq.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d840      	bhi.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d003      	beq.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d020      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007ccc:	e039      	b.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007cce:	4b8a      	ldr	r3, [pc, #552]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d116      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007cda:	4b87      	ldr	r3, [pc, #540]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007ce6:	4b84      	ldr	r3, [pc, #528]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	091b      	lsrs	r3, r3, #4
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	e005      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007cf2:	4b81      	ldr	r3, [pc, #516]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cf8:	0a1b      	lsrs	r3, r3, #8
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	4a80      	ldr	r2, [pc, #512]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8007d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d06:	e01f      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
      break;
 8007d0c:	e01c      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d0e:	4b7a      	ldr	r3, [pc, #488]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d1a:	d102      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007d1c:	4b79      	ldr	r3, [pc, #484]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007d1e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d20:	e012      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61bb      	str	r3, [r7, #24]
      break;
 8007d26:	e00f      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d28:	4b73      	ldr	r3, [pc, #460]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d34:	d102      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007d36:	4b74      	ldr	r3, [pc, #464]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007d38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d3a:	e005      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61bb      	str	r3, [r7, #24]
      break;
 8007d40:	e002      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
      break;
 8007d46:	bf00      	nop
    }

    switch(PeriphClk)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d4e:	f000 80dd 	beq.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d58:	f200 84c1 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d62:	f000 80d3 	beq.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d6c:	f200 84b7 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d76:	f000 835f 	beq.w	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d80:	f200 84ad 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d8a:	f000 847e 	beq.w	800868a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d94:	f200 84a3 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d9e:	f000 82cd 	beq.w	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da8:	f200 8499 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db2:	f000 80ab 	beq.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbc:	f200 848f 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc6:	f000 8090 	beq.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd0:	f200 8485 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dda:	d07f      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	f200 847c 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dec:	f000 8403 	beq.w	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df6:	f200 8472 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e00:	f000 83af 	beq.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0a:	f200 8468 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e14:	f000 8379 	beq.w	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1e:	f200 845e 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	f000 8344 	beq.w	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b80      	cmp	r3, #128	; 0x80
 8007e2e:	f200 8456 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d84b      	bhi.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 844f 	beq.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b1f      	cmp	r3, #31
 8007e46:	f200 844a 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08008039 	.word	0x08008039
 8007e54:	080080a7 	.word	0x080080a7
 8007e58:	080086df 	.word	0x080086df
 8007e5c:	0800813b 	.word	0x0800813b
 8007e60:	080086df 	.word	0x080086df
 8007e64:	080086df 	.word	0x080086df
 8007e68:	080086df 	.word	0x080086df
 8007e6c:	080081c1 	.word	0x080081c1
 8007e70:	080086df 	.word	0x080086df
 8007e74:	080086df 	.word	0x080086df
 8007e78:	080086df 	.word	0x080086df
 8007e7c:	080086df 	.word	0x080086df
 8007e80:	080086df 	.word	0x080086df
 8007e84:	080086df 	.word	0x080086df
 8007e88:	080086df 	.word	0x080086df
 8007e8c:	08008239 	.word	0x08008239
 8007e90:	080086df 	.word	0x080086df
 8007e94:	080086df 	.word	0x080086df
 8007e98:	080086df 	.word	0x080086df
 8007e9c:	080086df 	.word	0x080086df
 8007ea0:	080086df 	.word	0x080086df
 8007ea4:	080086df 	.word	0x080086df
 8007ea8:	080086df 	.word	0x080086df
 8007eac:	080086df 	.word	0x080086df
 8007eb0:	080086df 	.word	0x080086df
 8007eb4:	080086df 	.word	0x080086df
 8007eb8:	080086df 	.word	0x080086df
 8007ebc:	080086df 	.word	0x080086df
 8007ec0:	080086df 	.word	0x080086df
 8007ec4:	080086df 	.word	0x080086df
 8007ec8:	080086df 	.word	0x080086df
 8007ecc:	080082bb 	.word	0x080082bb
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	f000 82c1 	beq.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007ed8:	f000 bc01 	b.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ee2:	f000 fdd9 	bl	8008a98 <RCCEx_GetSAIxPeriphCLKFreq>
 8007ee6:	61f8      	str	r0, [r7, #28]
      break;
 8007ee8:	e3fa      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007eea:	69b9      	ldr	r1, [r7, #24]
 8007eec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007ef0:	f000 fdd2 	bl	8008a98 <RCCEx_GetSAIxPeriphCLKFreq>
 8007ef4:	61f8      	str	r0, [r7, #28]
      break;
 8007ef6:	e3f3      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	0005b8d8 	.word	0x0005b8d8
 8007f00:	08016fd0 	.word	0x08016fd0
 8007f04:	00f42400 	.word	0x00f42400
 8007f08:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007f0c:	4ba9      	ldr	r3, [pc, #676]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f12:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f1e:	d00c      	beq.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f26:	d87f      	bhi.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f2e:	d04e      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f36:	d01d      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8007f38:	e076      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007f3a:	4b9e      	ldr	r3, [pc, #632]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d172      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007f46:	4b9b      	ldr	r3, [pc, #620]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8007f52:	4b98      	ldr	r3, [pc, #608]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	091b      	lsrs	r3, r3, #4
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	e005      	b.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8007f5e:	4b95      	ldr	r3, [pc, #596]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	4a93      	ldr	r2, [pc, #588]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f70:	61fb      	str	r3, [r7, #28]
          break;
 8007f72:	e05b      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007f74:	4b8f      	ldr	r3, [pc, #572]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f80:	d156      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007f82:	4b8c      	ldr	r3, [pc, #560]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f8e:	d14f      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f90:	4b88      	ldr	r3, [pc, #544]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	0a1b      	lsrs	r3, r3, #8
 8007f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	fb03 f202 	mul.w	r2, r3, r2
 8007fa4:	4b83      	ldr	r3, [pc, #524]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	091b      	lsrs	r3, r3, #4
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	3301      	adds	r3, #1
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007fb6:	4b7f      	ldr	r3, [pc, #508]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	0d5b      	lsrs	r3, r3, #21
 8007fbc:	f003 0303 	and.w	r3, r3, #3
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fca:	61fb      	str	r3, [r7, #28]
          break;
 8007fcc:	e030      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007fce:	4b79      	ldr	r3, [pc, #484]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fda:	d12b      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007fdc:	4b75      	ldr	r3, [pc, #468]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe8:	d124      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007fea:	4b72      	ldr	r3, [pc, #456]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	fb03 f202 	mul.w	r2, r3, r2
 8007ffe:	4b6d      	ldr	r3, [pc, #436]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	3301      	adds	r3, #1
 800800a:	fbb2 f3f3 	udiv	r3, r2, r3
 800800e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008010:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	0d5b      	lsrs	r3, r3, #21
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	3301      	adds	r3, #1
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	fbb2 f3f3 	udiv	r3, r2, r3
 8008024:	61fb      	str	r3, [r7, #28]
          break;
 8008026:	e005      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8008028:	bf00      	nop
 800802a:	e359      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800802c:	bf00      	nop
 800802e:	e357      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008030:	bf00      	nop
 8008032:	e355      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008034:	bf00      	nop
        break;
 8008036:	e353      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008038:	4b5e      	ldr	r3, [pc, #376]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800803a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b03      	cmp	r3, #3
 8008048:	d827      	bhi.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008061 	.word	0x08008061
 8008054:	08008069 	.word	0x08008069
 8008058:	08008071 	.word	0x08008071
 800805c:	08008085 	.word	0x08008085
          frequency = HAL_RCC_GetPCLK2Freq();
 8008060:	f7ff fa7a 	bl	8007558 <HAL_RCC_GetPCLK2Freq>
 8008064:	61f8      	str	r0, [r7, #28]
          break;
 8008066:	e01d      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008068:	f7ff f9c8 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 800806c:	61f8      	str	r0, [r7, #28]
          break;
 800806e:	e019      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008070:	4b50      	ldr	r3, [pc, #320]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807c:	d10f      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800807e:	4b4f      	ldr	r3, [pc, #316]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008080:	61fb      	str	r3, [r7, #28]
          break;
 8008082:	e00c      	b.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008084:	4b4b      	ldr	r3, [pc, #300]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b02      	cmp	r3, #2
 8008090:	d107      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8008092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008096:	61fb      	str	r3, [r7, #28]
          break;
 8008098:	e003      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800809a:	bf00      	nop
 800809c:	e320      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800809e:	bf00      	nop
 80080a0:	e31e      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80080a2:	bf00      	nop
        break;
 80080a4:	e31c      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80080a6:	4b43      	ldr	r3, [pc, #268]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ac:	f003 030c 	and.w	r3, r3, #12
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b0c      	cmp	r3, #12
 80080b6:	d83a      	bhi.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80080b8:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080f5 	.word	0x080080f5
 80080c4:	0800812f 	.word	0x0800812f
 80080c8:	0800812f 	.word	0x0800812f
 80080cc:	0800812f 	.word	0x0800812f
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	0800812f 	.word	0x0800812f
 80080d8:	0800812f 	.word	0x0800812f
 80080dc:	0800812f 	.word	0x0800812f
 80080e0:	08008105 	.word	0x08008105
 80080e4:	0800812f 	.word	0x0800812f
 80080e8:	0800812f 	.word	0x0800812f
 80080ec:	0800812f 	.word	0x0800812f
 80080f0:	08008119 	.word	0x08008119
          frequency = HAL_RCC_GetPCLK1Freq();
 80080f4:	f7ff fa1a 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80080f8:	61f8      	str	r0, [r7, #28]
          break;
 80080fa:	e01d      	b.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80080fc:	f7ff f97e 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008100:	61f8      	str	r0, [r7, #28]
          break;
 8008102:	e019      	b.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008104:	4b2b      	ldr	r3, [pc, #172]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008110:	d10f      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8008112:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008114:	61fb      	str	r3, [r7, #28]
          break;
 8008116:	e00c      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008118:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b02      	cmp	r3, #2
 8008124:	d107      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	61fb      	str	r3, [r7, #28]
          break;
 800812c:	e003      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800812e:	bf00      	nop
 8008130:	e2d6      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008132:	bf00      	nop
 8008134:	e2d4      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008136:	bf00      	nop
        break;
 8008138:	e2d2      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800813a:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008140:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b30      	cmp	r3, #48	; 0x30
 800814a:	d021      	beq.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b30      	cmp	r3, #48	; 0x30
 8008150:	d829      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b20      	cmp	r3, #32
 8008156:	d011      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b20      	cmp	r3, #32
 800815c:	d823      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b10      	cmp	r3, #16
 8008168:	d004      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800816a:	e01c      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800816c:	f7ff f9de 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 8008170:	61f8      	str	r0, [r7, #28]
          break;
 8008172:	e01d      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8008174:	f7ff f942 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008178:	61f8      	str	r0, [r7, #28]
          break;
 800817a:	e019      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008188:	d10f      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800818c:	61fb      	str	r3, [r7, #28]
          break;
 800818e:	e00c      	b.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008190:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b02      	cmp	r3, #2
 800819c:	d107      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800819e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a2:	61fb      	str	r3, [r7, #28]
          break;
 80081a4:	e003      	b.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80081a6:	bf00      	nop
 80081a8:	e29a      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80081aa:	bf00      	nop
 80081ac:	e298      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80081ae:	bf00      	nop
        break;
 80081b0:	e296      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80081b2:	bf00      	nop
 80081b4:	40021000 	.word	0x40021000
 80081b8:	08016fd0 	.word	0x08016fd0
 80081bc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80081c0:	4b9b      	ldr	r3, [pc, #620]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80081c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081ca:	613b      	str	r3, [r7, #16]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2bc0      	cmp	r3, #192	; 0xc0
 80081d0:	d021      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2bc0      	cmp	r3, #192	; 0xc0
 80081d6:	d829      	bhi.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b80      	cmp	r3, #128	; 0x80
 80081dc:	d011      	beq.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d823      	bhi.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b40      	cmp	r3, #64	; 0x40
 80081ee:	d004      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80081f0:	e01c      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081f2:	f7ff f99b 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80081f6:	61f8      	str	r0, [r7, #28]
          break;
 80081f8:	e01d      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80081fa:	f7ff f8ff 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 80081fe:	61f8      	str	r0, [r7, #28]
          break;
 8008200:	e019      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008202:	4b8b      	ldr	r3, [pc, #556]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820e:	d10f      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008212:	61fb      	str	r3, [r7, #28]
          break;
 8008214:	e00c      	b.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008216:	4b86      	ldr	r3, [pc, #536]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b02      	cmp	r3, #2
 8008222:	d107      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8008224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008228:	61fb      	str	r3, [r7, #28]
          break;
 800822a:	e003      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800822c:	bf00      	nop
 800822e:	e257      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008230:	bf00      	nop
 8008232:	e255      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008234:	bf00      	nop
        break;
 8008236:	e253      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008238:	4b7d      	ldr	r3, [pc, #500]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800824a:	d025      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008252:	d82c      	bhi.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825a:	d013      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008262:	d824      	bhi.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008270:	d004      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8008272:	e01c      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008274:	f7ff f95a 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 8008278:	61f8      	str	r0, [r7, #28]
          break;
 800827a:	e01d      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800827c:	f7ff f8be 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008280:	61f8      	str	r0, [r7, #28]
          break;
 8008282:	e019      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008284:	4b6a      	ldr	r3, [pc, #424]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800828c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008290:	d10f      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8008292:	4b68      	ldr	r3, [pc, #416]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008294:	61fb      	str	r3, [r7, #28]
          break;
 8008296:	e00c      	b.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008298:	4b65      	ldr	r3, [pc, #404]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800829a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d107      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80082a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082aa:	61fb      	str	r3, [r7, #28]
          break;
 80082ac:	e003      	b.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80082ae:	bf00      	nop
 80082b0:	e216      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80082b2:	bf00      	nop
 80082b4:	e214      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80082b6:	bf00      	nop
        break;
 80082b8:	e212      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80082ba:	4b5d      	ldr	r3, [pc, #372]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80082bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082cc:	d025      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082d4:	d82c      	bhi.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082dc:	d013      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d824      	bhi.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f2:	d004      	beq.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80082f4:	e01c      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80082f6:	f7ff f919 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80082fa:	61f8      	str	r0, [r7, #28]
          break;
 80082fc:	e01d      	b.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80082fe:	f7ff f87d 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008302:	61f8      	str	r0, [r7, #28]
          break;
 8008304:	e019      	b.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008306:	4b4a      	ldr	r3, [pc, #296]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800830e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008312:	d10f      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008314:	4b47      	ldr	r3, [pc, #284]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008316:	61fb      	str	r3, [r7, #28]
          break;
 8008318:	e00c      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800831a:	4b45      	ldr	r3, [pc, #276]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b02      	cmp	r3, #2
 8008326:	d107      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8008328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800832c:	61fb      	str	r3, [r7, #28]
          break;
 800832e:	e003      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8008330:	bf00      	nop
 8008332:	e1d5      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008334:	bf00      	nop
 8008336:	e1d3      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008338:	bf00      	nop
        break;
 800833a:	e1d1      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800833c:	4b3c      	ldr	r3, [pc, #240]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800833e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800834e:	d00c      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008356:	d864      	bhi.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800835e:	d008      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008366:	d030      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8008368:	e05b      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800836a:	f7ff f847 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 800836e:	61f8      	str	r0, [r7, #28]
          break;
 8008370:	e05c      	b.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008372:	4b2f      	ldr	r3, [pc, #188]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837e:	d152      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8008380:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d04c      	beq.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800838c:	4b28      	ldr	r3, [pc, #160]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	0a1b      	lsrs	r3, r3, #8
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	fb03 f202 	mul.w	r2, r3, r2
 80083a0:	4b23      	ldr	r3, [pc, #140]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	3301      	adds	r3, #1
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80083b2:	4b1f      	ldr	r3, [pc, #124]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	0e5b      	lsrs	r3, r3, #25
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	3301      	adds	r3, #1
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c6:	61fb      	str	r3, [r7, #28]
          break;
 80083c8:	e02d      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80083ca:	4b19      	ldr	r3, [pc, #100]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d6:	d128      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d022      	beq.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80083e4:	4b12      	ldr	r3, [pc, #72]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	0a1b      	lsrs	r3, r3, #8
 80083ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ee:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	fb03 f202 	mul.w	r2, r3, r2
 80083f8:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	091b      	lsrs	r3, r3, #4
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	3301      	adds	r3, #1
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800840a:	4b09      	ldr	r3, [pc, #36]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	0e5b      	lsrs	r3, r3, #25
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	3301      	adds	r3, #1
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	fbb2 f3f3 	udiv	r3, r2, r3
 800841e:	61fb      	str	r3, [r7, #28]
          break;
 8008420:	e003      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008422:	bf00      	nop
 8008424:	e15c      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008426:	bf00      	nop
 8008428:	e15a      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800842a:	bf00      	nop
        break;
 800842c:	e158      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800842e:	bf00      	nop
 8008430:	40021000 	.word	0x40021000
 8008434:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008438:	4b9d      	ldr	r3, [pc, #628]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800843a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008442:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d103      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800844a:	f7ff f885 	bl	8007558 <HAL_RCC_GetPCLK2Freq>
 800844e:	61f8      	str	r0, [r7, #28]
        break;
 8008450:	e146      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008452:	f7fe ffd3 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008456:	61f8      	str	r0, [r7, #28]
        break;
 8008458:	e142      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800845a:	4b95      	ldr	r3, [pc, #596]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008460:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846c:	d013      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008474:	d819      	bhi.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008482:	d004      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8008484:	e011      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008486:	f7ff f851 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 800848a:	61f8      	str	r0, [r7, #28]
          break;
 800848c:	e010      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800848e:	f7fe ffb5 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008492:	61f8      	str	r0, [r7, #28]
          break;
 8008494:	e00c      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008496:	4b86      	ldr	r3, [pc, #536]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800849e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a2:	d104      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80084a4:	4b83      	ldr	r3, [pc, #524]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80084a6:	61fb      	str	r3, [r7, #28]
          break;
 80084a8:	e001      	b.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80084aa:	bf00      	nop
 80084ac:	e118      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80084ae:	bf00      	nop
        break;
 80084b0:	e116      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80084b2:	4b7f      	ldr	r3, [pc, #508]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c4:	d013      	beq.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084cc:	d819      	bhi.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084da:	d004      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80084dc:	e011      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80084de:	f7ff f825 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80084e2:	61f8      	str	r0, [r7, #28]
          break;
 80084e4:	e010      	b.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80084e6:	f7fe ff89 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 80084ea:	61f8      	str	r0, [r7, #28]
          break;
 80084ec:	e00c      	b.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084ee:	4b70      	ldr	r3, [pc, #448]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084fa:	d104      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80084fc:	4b6d      	ldr	r3, [pc, #436]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80084fe:	61fb      	str	r3, [r7, #28]
          break;
 8008500:	e001      	b.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8008502:	bf00      	nop
 8008504:	e0ec      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008506:	bf00      	nop
        break;
 8008508:	e0ea      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800850a:	4b69      	ldr	r3, [pc, #420]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800851c:	d013      	beq.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008524:	d819      	bhi.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d004      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008532:	d004      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8008534:	e011      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008536:	f7fe fff9 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 800853a:	61f8      	str	r0, [r7, #28]
          break;
 800853c:	e010      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800853e:	f7fe ff5d 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 8008542:	61f8      	str	r0, [r7, #28]
          break;
 8008544:	e00c      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008546:	4b5a      	ldr	r3, [pc, #360]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800854e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008552:	d104      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8008554:	4b57      	ldr	r3, [pc, #348]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008556:	61fb      	str	r3, [r7, #28]
          break;
 8008558:	e001      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800855a:	bf00      	nop
 800855c:	e0c0      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800855e:	bf00      	nop
        break;
 8008560:	e0be      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008562:	4b53      	ldr	r3, [pc, #332]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008568:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008574:	d02c      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800857c:	d833      	bhi.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008584:	d01a      	beq.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800858c:	d82b      	bhi.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800859a:	d004      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800859c:	e023      	b.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800859e:	f7fe ffc5 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80085a2:	61f8      	str	r0, [r7, #28]
          break;
 80085a4:	e026      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085a6:	4b42      	ldr	r3, [pc, #264]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80085a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d11a      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80085b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085b8:	61fb      	str	r3, [r7, #28]
          break;
 80085ba:	e016      	b.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085bc:	4b3c      	ldr	r3, [pc, #240]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c8:	d111      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80085ca:	4b3a      	ldr	r3, [pc, #232]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80085cc:	61fb      	str	r3, [r7, #28]
          break;
 80085ce:	e00e      	b.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085d0:	4b37      	ldr	r3, [pc, #220]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d109      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80085de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085e2:	61fb      	str	r3, [r7, #28]
          break;
 80085e4:	e005      	b.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80085e6:	bf00      	nop
 80085e8:	e07a      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80085ea:	bf00      	nop
 80085ec:	e078      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80085ee:	bf00      	nop
 80085f0:	e076      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80085f2:	bf00      	nop
        break;
 80085f4:	e074      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80085f6:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80085f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008608:	d02c      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008610:	d833      	bhi.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008618:	d01a      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008620:	d82b      	bhi.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800862e:	d004      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8008630:	e023      	b.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008632:	f7fe ff7b 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 8008636:	61f8      	str	r0, [r7, #28]
          break;
 8008638:	e026      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800863c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d11a      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8008648:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800864c:	61fb      	str	r3, [r7, #28]
          break;
 800864e:	e016      	b.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008650:	4b17      	ldr	r3, [pc, #92]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865c:	d111      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008660:	61fb      	str	r3, [r7, #28]
          break;
 8008662:	e00e      	b.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008664:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d109      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8008672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008676:	61fb      	str	r3, [r7, #28]
          break;
 8008678:	e005      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800867a:	bf00      	nop
 800867c:	e030      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800867e:	bf00      	nop
 8008680:	e02e      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008682:	bf00      	nop
 8008684:	e02c      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008686:	bf00      	nop
        break;
 8008688:	e02a      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008690:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a2:	d009      	beq.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80086a4:	e012      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80086a6:	f7fe ff41 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80086aa:	61f8      	str	r0, [r7, #28]
          break;
 80086ac:	e00e      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80086ae:	bf00      	nop
 80086b0:	40021000 	.word	0x40021000
 80086b4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c4:	d101      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80086c8:	61fb      	str	r3, [r7, #28]
          break;
 80086ca:	bf00      	nop
        break;
 80086cc:	e008      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80086ce:	bf00      	nop
 80086d0:	e006      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80086d2:	bf00      	nop
 80086d4:	e004      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80086de:	bf00      	nop
    }
  }

  return(frequency);
 80086e0:	69fb      	ldr	r3, [r7, #28]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40021000 	.word	0x40021000
 80086f0:	00f42400 	.word	0x00f42400

080086f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008702:	4b75      	ldr	r3, [pc, #468]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d018      	beq.n	8008740 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800870e:	4b72      	ldr	r3, [pc, #456]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f003 0203 	and.w	r2, r3, #3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d10d      	bne.n	800873a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
       ||
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008726:	4b6c      	ldr	r3, [pc, #432]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
       ||
 8008736:	429a      	cmp	r2, r3
 8008738:	d047      	beq.n	80087ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]
 800873e:	e044      	b.n	80087ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b03      	cmp	r3, #3
 8008746:	d018      	beq.n	800877a <RCCEx_PLLSAI1_Config+0x86>
 8008748:	2b03      	cmp	r3, #3
 800874a:	d825      	bhi.n	8008798 <RCCEx_PLLSAI1_Config+0xa4>
 800874c:	2b01      	cmp	r3, #1
 800874e:	d002      	beq.n	8008756 <RCCEx_PLLSAI1_Config+0x62>
 8008750:	2b02      	cmp	r3, #2
 8008752:	d009      	beq.n	8008768 <RCCEx_PLLSAI1_Config+0x74>
 8008754:	e020      	b.n	8008798 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008756:	4b60      	ldr	r3, [pc, #384]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d11d      	bne.n	800879e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008766:	e01a      	b.n	800879e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008768:	4b5b      	ldr	r3, [pc, #364]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008770:	2b00      	cmp	r3, #0
 8008772:	d116      	bne.n	80087a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008778:	e013      	b.n	80087a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800877a:	4b57      	ldr	r3, [pc, #348]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008786:	4b54      	ldr	r3, [pc, #336]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d109      	bne.n	80087a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008796:	e006      	b.n	80087a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
      break;
 800879c:	e004      	b.n	80087a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10d      	bne.n	80087ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087ae:	4b4a      	ldr	r3, [pc, #296]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6819      	ldr	r1, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	3b01      	subs	r3, #1
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	430b      	orrs	r3, r1
 80087c4:	4944      	ldr	r1, [pc, #272]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d17d      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80087d0:	4b41      	ldr	r3, [pc, #260]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a40      	ldr	r2, [pc, #256]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087dc:	f7fb fb8c 	bl	8003ef8 <HAL_GetTick>
 80087e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087e2:	e009      	b.n	80087f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087e4:	f7fb fb88 	bl	8003ef8 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d902      	bls.n	80087f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	73fb      	strb	r3, [r7, #15]
        break;
 80087f6:	e005      	b.n	8008804 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087f8:	4b37      	ldr	r3, [pc, #220]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1ef      	bne.n	80087e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d160      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d111      	bne.n	8008834 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008810:	4b31      	ldr	r3, [pc, #196]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6892      	ldr	r2, [r2, #8]
 8008820:	0211      	lsls	r1, r2, #8
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	68d2      	ldr	r2, [r2, #12]
 8008826:	0912      	lsrs	r2, r2, #4
 8008828:	0452      	lsls	r2, r2, #17
 800882a:	430a      	orrs	r2, r1
 800882c:	492a      	ldr	r1, [pc, #168]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	610b      	str	r3, [r1, #16]
 8008832:	e027      	b.n	8008884 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d112      	bne.n	8008860 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800883a:	4b27      	ldr	r3, [pc, #156]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008842:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6892      	ldr	r2, [r2, #8]
 800884a:	0211      	lsls	r1, r2, #8
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6912      	ldr	r2, [r2, #16]
 8008850:	0852      	lsrs	r2, r2, #1
 8008852:	3a01      	subs	r2, #1
 8008854:	0552      	lsls	r2, r2, #21
 8008856:	430a      	orrs	r2, r1
 8008858:	491f      	ldr	r1, [pc, #124]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800885a:	4313      	orrs	r3, r2
 800885c:	610b      	str	r3, [r1, #16]
 800885e:	e011      	b.n	8008884 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6892      	ldr	r2, [r2, #8]
 8008870:	0211      	lsls	r1, r2, #8
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6952      	ldr	r2, [r2, #20]
 8008876:	0852      	lsrs	r2, r2, #1
 8008878:	3a01      	subs	r2, #1
 800887a:	0652      	lsls	r2, r2, #25
 800887c:	430a      	orrs	r2, r1
 800887e:	4916      	ldr	r1, [pc, #88]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008880:	4313      	orrs	r3, r2
 8008882:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008884:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a13      	ldr	r2, [pc, #76]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800888a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800888e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008890:	f7fb fb32 	bl	8003ef8 <HAL_GetTick>
 8008894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008896:	e009      	b.n	80088ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008898:	f7fb fb2e 	bl	8003ef8 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d902      	bls.n	80088ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	73fb      	strb	r3, [r7, #15]
          break;
 80088aa:	e005      	b.n	80088b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0ef      	beq.n	8008898 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80088be:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088c0:	691a      	ldr	r2, [r3, #16]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	4904      	ldr	r1, [pc, #16]	; (80088d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	40021000 	.word	0x40021000

080088dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088ea:	4b6a      	ldr	r3, [pc, #424]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0303 	and.w	r3, r3, #3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d018      	beq.n	8008928 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80088f6:	4b67      	ldr	r3, [pc, #412]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f003 0203 	and.w	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d10d      	bne.n	8008922 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
       ||
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800890e:	4b61      	ldr	r3, [pc, #388]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	091b      	lsrs	r3, r3, #4
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
       ||
 800891e:	429a      	cmp	r2, r3
 8008920:	d047      	beq.n	80089b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	73fb      	strb	r3, [r7, #15]
 8008926:	e044      	b.n	80089b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d018      	beq.n	8008962 <RCCEx_PLLSAI2_Config+0x86>
 8008930:	2b03      	cmp	r3, #3
 8008932:	d825      	bhi.n	8008980 <RCCEx_PLLSAI2_Config+0xa4>
 8008934:	2b01      	cmp	r3, #1
 8008936:	d002      	beq.n	800893e <RCCEx_PLLSAI2_Config+0x62>
 8008938:	2b02      	cmp	r3, #2
 800893a:	d009      	beq.n	8008950 <RCCEx_PLLSAI2_Config+0x74>
 800893c:	e020      	b.n	8008980 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800893e:	4b55      	ldr	r3, [pc, #340]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d11d      	bne.n	8008986 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800894e:	e01a      	b.n	8008986 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008950:	4b50      	ldr	r3, [pc, #320]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008958:	2b00      	cmp	r3, #0
 800895a:	d116      	bne.n	800898a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008960:	e013      	b.n	800898a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008962:	4b4c      	ldr	r3, [pc, #304]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10f      	bne.n	800898e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800896e:	4b49      	ldr	r3, [pc, #292]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800897e:	e006      	b.n	800898e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
      break;
 8008984:	e004      	b.n	8008990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008986:	bf00      	nop
 8008988:	e002      	b.n	8008990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800898a:	bf00      	nop
 800898c:	e000      	b.n	8008990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800898e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10d      	bne.n	80089b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008996:	4b3f      	ldr	r3, [pc, #252]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	430b      	orrs	r3, r1
 80089ac:	4939      	ldr	r1, [pc, #228]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d167      	bne.n	8008a88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089b8:	4b36      	ldr	r3, [pc, #216]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a35      	ldr	r2, [pc, #212]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089c4:	f7fb fa98 	bl	8003ef8 <HAL_GetTick>
 80089c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089ca:	e009      	b.n	80089e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089cc:	f7fb fa94 	bl	8003ef8 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d902      	bls.n	80089e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	73fb      	strb	r3, [r7, #15]
        break;
 80089de:	e005      	b.n	80089ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089e0:	4b2c      	ldr	r3, [pc, #176]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1ef      	bne.n	80089cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d14a      	bne.n	8008a88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d111      	bne.n	8008a1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089f8:	4b26      	ldr	r3, [pc, #152]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6892      	ldr	r2, [r2, #8]
 8008a08:	0211      	lsls	r1, r2, #8
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	68d2      	ldr	r2, [r2, #12]
 8008a0e:	0912      	lsrs	r2, r2, #4
 8008a10:	0452      	lsls	r2, r2, #17
 8008a12:	430a      	orrs	r2, r1
 8008a14:	491f      	ldr	r1, [pc, #124]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	614b      	str	r3, [r1, #20]
 8008a1a:	e011      	b.n	8008a40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a1c:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6892      	ldr	r2, [r2, #8]
 8008a2c:	0211      	lsls	r1, r2, #8
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6912      	ldr	r2, [r2, #16]
 8008a32:	0852      	lsrs	r2, r2, #1
 8008a34:	3a01      	subs	r2, #1
 8008a36:	0652      	lsls	r2, r2, #25
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	4916      	ldr	r1, [pc, #88]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a40:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a13      	ldr	r2, [pc, #76]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a4c:	f7fb fa54 	bl	8003ef8 <HAL_GetTick>
 8008a50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a52:	e009      	b.n	8008a68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a54:	f7fb fa50 	bl	8003ef8 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d902      	bls.n	8008a68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	73fb      	strb	r3, [r7, #15]
          break;
 8008a66:	e005      	b.n	8008a74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0ef      	beq.n	8008a54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a7a:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	4904      	ldr	r1, [pc, #16]	; (8008a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40021000 	.word	0x40021000

08008a98 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b089      	sub	sp, #36	; 0x24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab4:	d10c      	bne.n	8008ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008ab6:	4b6e      	ldr	r3, [pc, #440]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008abc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008ac0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ac8:	d112      	bne.n	8008af0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008aca:	4b6a      	ldr	r3, [pc, #424]	; (8008c74 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	e00f      	b.n	8008af0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d10b      	bne.n	8008af0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008ad8:	4b65      	ldr	r3, [pc, #404]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ade:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008ae2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008aea:	d101      	bne.n	8008af0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008aec:	4b61      	ldr	r3, [pc, #388]	; (8008c74 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008aee:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 80b4 	bne.w	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b02:	d003      	beq.n	8008b0c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b0a:	d135      	bne.n	8008b78 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b0c:	4b58      	ldr	r3, [pc, #352]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b18:	f040 80a1 	bne.w	8008c5e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008b1c:	4b54      	ldr	r3, [pc, #336]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 809a 	beq.w	8008c5e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b2a:	4b51      	ldr	r3, [pc, #324]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	3301      	adds	r3, #1
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b3e:	4b4c      	ldr	r3, [pc, #304]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	0a1b      	lsrs	r3, r3, #8
 8008b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b48:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008b50:	4b47      	ldr	r3, [pc, #284]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8008b5c:	2311      	movs	r3, #17
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	e001      	b.n	8008b66 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8008b62:	2307      	movs	r3, #7
 8008b64:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	fb03 f202 	mul.w	r2, r3, r2
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b74:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b76:	e072      	b.n	8008c5e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d133      	bne.n	8008be6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008b7e:	4b3c      	ldr	r3, [pc, #240]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b8a:	d169      	bne.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008b8c:	4b38      	ldr	r3, [pc, #224]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d063      	beq.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b98:	4b35      	ldr	r3, [pc, #212]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	091b      	lsrs	r3, r3, #4
 8008b9e:	f003 0307 	and.w	r3, r3, #7
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008baa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008bac:	4b30      	ldr	r3, [pc, #192]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	0a1b      	lsrs	r3, r3, #8
 8008bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008bbe:	4b2c      	ldr	r3, [pc, #176]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8008bca:	2311      	movs	r3, #17
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e001      	b.n	8008bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008bd0:	2307      	movs	r3, #7
 8008bd2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	fb03 f202 	mul.w	r2, r3, r2
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	e03c      	b.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bec:	d003      	beq.n	8008bf6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bf4:	d134      	bne.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008bf6:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c02:	d12d      	bne.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008c04:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d027      	beq.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c10:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	091b      	lsrs	r3, r3, #4
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008c24:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c2e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10a      	bne.n	8008c4c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008c36:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8008c42:	2311      	movs	r3, #17
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	e001      	b.n	8008c4c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8008c48:	2307      	movs	r3, #7
 8008c4a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	fb03 f202 	mul.w	r2, r3, r2
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	e000      	b.n	8008c60 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008c5e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008c60:	69fb      	ldr	r3, [r7, #28]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3724      	adds	r7, #36	; 0x24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	40021000 	.word	0x40021000
 8008c74:	001fff68 	.word	0x001fff68

08008c78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d079      	beq.n	8008d7e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fa fe5a 	bl	8003958 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d058      	beq.n	8008d6c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	22ca      	movs	r2, #202	; 0xca
 8008cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2253      	movs	r2, #83	; 0x53
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9a4 	bl	8009018 <RTC_EnterInitMode>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d127      	bne.n	8008d2a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cec:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6899      	ldr	r1, [r3, #8]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	68d2      	ldr	r2, [r2, #12]
 8008d14:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6919      	ldr	r1, [r3, #16]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	041a      	lsls	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9a8 	bl	8009080 <RTC_ExitInitMode>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d113      	bne.n	8008d62 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0203 	bic.w	r2, r2, #3
 8008d48:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	22ff      	movs	r2, #255	; 0xff
 8008d68:	625a      	str	r2, [r3, #36]	; 0x24
 8008d6a:	e001      	b.n	8008d70 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d103      	bne.n	8008d7e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_RTC_SetTime+0x1a>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e08b      	b.n	8008eba <HAL_RTC_SetTime+0x132>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2202      	movs	r2, #2
 8008dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	22ca      	movs	r2, #202	; 0xca
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2253      	movs	r2, #83	; 0x53
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f928 	bl	8009018 <RTC_EnterInitMode>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008dcc:	7cfb      	ldrb	r3, [r7, #19]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d163      	bne.n	8008e9a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d126      	bne.n	8008e26 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2200      	movs	r2, #0
 8008dea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 f983 	bl	80090fc <RTC_ByteToBcd2>
 8008df6:	4603      	mov	r3, r0
 8008df8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f97c 	bl	80090fc <RTC_ByteToBcd2>
 8008e04:	4603      	mov	r3, r0
 8008e06:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e08:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	789b      	ldrb	r3, [r3, #2]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f974 	bl	80090fc <RTC_ByteToBcd2>
 8008e14:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e16:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	78db      	ldrb	r3, [r3, #3]
 8008e1e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	e018      	b.n	8008e58 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e46:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e4c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	78db      	ldrb	r3, [r3, #3]
 8008e52:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008e62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008e66:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6899      	ldr	r1, [r3, #8]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 f8f5 	bl	8009080 <RTC_ExitInitMode>
 8008e96:	4603      	mov	r3, r0
 8008e98:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	22ff      	movs	r2, #255	; 0xff
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008ea2:	7cfb      	ldrb	r3, [r7, #19]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008eb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd90      	pop	{r4, r7, pc}

08008ec2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ec2:	b590      	push	{r4, r7, lr}
 8008ec4:	b087      	sub	sp, #28
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_RTC_SetDate+0x1a>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e075      	b.n	8008fc8 <HAL_RTC_SetDate+0x106>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10e      	bne.n	8008f10 <HAL_RTC_SetDate+0x4e>
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	f023 0310 	bic.w	r3, r3, #16
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	330a      	adds	r3, #10
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d11c      	bne.n	8008f50 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	78db      	ldrb	r3, [r3, #3]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f8ee 	bl	80090fc <RTC_ByteToBcd2>
 8008f20:	4603      	mov	r3, r0
 8008f22:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 f8e7 	bl	80090fc <RTC_ByteToBcd2>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008f32:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	789b      	ldrb	r3, [r3, #2]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 f8df 	bl	80090fc <RTC_ByteToBcd2>
 8008f3e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f40:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e00e      	b.n	8008f6e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	78db      	ldrb	r3, [r3, #3]
 8008f54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f5c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008f62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	22ca      	movs	r2, #202	; 0xca
 8008f74:	625a      	str	r2, [r3, #36]	; 0x24
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2253      	movs	r2, #83	; 0x53
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f84a 	bl	8009018 <RTC_EnterInitMode>
 8008f84:	4603      	mov	r3, r0
 8008f86:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008f88:	7cfb      	ldrb	r3, [r7, #19]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10c      	bne.n	8008fa8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f9c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f86e 	bl	8009080 <RTC_ExitInitMode>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	22ff      	movs	r2, #255	; 0xff
 8008fae:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008fb0:	7cfb      	ldrb	r3, [r7, #19]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d103      	bne.n	8008fbe <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008fc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd90      	pop	{r4, r7, pc}

08008fd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a0d      	ldr	r2, [pc, #52]	; (8009014 <HAL_RTC_WaitForSynchro+0x44>)
 8008fde:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008fe0:	f7fa ff8a 	bl	8003ef8 <HAL_GetTick>
 8008fe4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fe6:	e009      	b.n	8008ffc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fe8:	f7fa ff86 	bl	8003ef8 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ff6:	d901      	bls.n	8008ffc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e007      	b.n	800900c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0ee      	beq.n	8008fe8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	0003ff5f 	.word	0x0003ff5f

08009018 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d120      	bne.n	8009074 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800903c:	f7fa ff5c 	bl	8003ef8 <HAL_GetTick>
 8009040:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009042:	e00d      	b.n	8009060 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009044:	f7fa ff58 	bl	8003ef8 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009052:	d905      	bls.n	8009060 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2203      	movs	r2, #3
 800905c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <RTC_EnterInitMode+0x5c>
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d1e7      	bne.n	8009044 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800908c:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <RTC_ExitInitMode+0x78>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	4a19      	ldr	r2, [pc, #100]	; (80090f8 <RTC_ExitInitMode+0x78>)
 8009092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009096:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <RTC_ExitInitMode+0x78>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0320 	and.w	r3, r3, #32
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10c      	bne.n	80090be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff ff93 	bl	8008fd0 <HAL_RTC_WaitForSynchro>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01e      	beq.n	80090ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2203      	movs	r2, #3
 80090b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	73fb      	strb	r3, [r7, #15]
 80090bc:	e017      	b.n	80090ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <RTC_ExitInitMode+0x78>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4a0d      	ldr	r2, [pc, #52]	; (80090f8 <RTC_ExitInitMode+0x78>)
 80090c4:	f023 0320 	bic.w	r3, r3, #32
 80090c8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff ff80 	bl	8008fd0 <HAL_RTC_WaitForSynchro>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2203      	movs	r2, #3
 80090da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <RTC_ExitInitMode+0x78>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	4a04      	ldr	r2, [pc, #16]	; (80090f8 <RTC_ExitInitMode+0x78>)
 80090e8:	f043 0320 	orr.w	r3, r3, #32
 80090ec:	6093      	str	r3, [r2, #8]
  }

  return status;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	40002800 	.word	0x40002800

080090fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800910e:	e005      	b.n	800911c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3301      	adds	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	3b0a      	subs	r3, #10
 800911a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	2b09      	cmp	r3, #9
 8009120:	d8f6      	bhi.n	8009110 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	b2da      	uxtb	r2, r3
 800912a:	7afb      	ldrb	r3, [r7, #11]
 800912c:	4313      	orrs	r3, r2
 800912e:	b2db      	uxtb	r3, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e022      	b.n	8009194 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d105      	bne.n	8009166 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7fa fc2b 	bl	80039bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2203      	movs	r2, #3
 800916a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f814 	bl	800919c <HAL_SD_InitCard>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e00a      	b.n	8009194 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800919c:	b5b0      	push	{r4, r5, r7, lr}
 800919e:	b08e      	sub	sp, #56	; 0x38
 80091a0:	af04      	add	r7, sp, #16
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80091b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80091bc:	f7fe fd2c 	bl	8007c18 <HAL_RCCEx_GetPeriphCLKFreq>
 80091c0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d109      	bne.n	80091dc <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e07b      	b.n	80092d4 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	09db      	lsrs	r3, r3, #7
 80091e0:	4a3e      	ldr	r2, [pc, #248]	; (80092dc <HAL_SD_InitCard+0x140>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	091b      	lsrs	r3, r3, #4
 80091e8:	3b02      	subs	r3, #2
 80091ea:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681d      	ldr	r5, [r3, #0]
 80091f0:	466c      	mov	r4, sp
 80091f2:	f107 0314 	add.w	r3, r7, #20
 80091f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009204:	4628      	mov	r0, r5
 8009206:	f001 fac1 	bl	800a78c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009218:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f001 faff 	bl	800a822 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009232:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	3302      	adds	r3, #2
 8009238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923a:	fbb2 f3f3 	udiv	r3, r2, r3
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009240:	4a27      	ldr	r2, [pc, #156]	; (80092e0 <HAL_SD_InitCard+0x144>)
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	fbb2 f3f3 	udiv	r3, r2, r3
 8009248:	3301      	adds	r3, #1
 800924a:	4618      	mov	r0, r3
 800924c:	f7fa fe60 	bl	8003f10 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 ffdf 	bl	800a214 <SD_PowerON>
 8009256:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e02e      	b.n	80092d4 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fefe 	bl	800a078 <SD_InitCard>
 800927c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	431a      	orrs	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e01b      	b.n	80092d4 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 fb4f 	bl	800a948 <SDMMC_CmdBlockLength>
 80092aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00f      	beq.n	80092d2 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0b      	ldr	r2, [pc, #44]	; (80092e4 <HAL_SD_InitCard+0x148>)
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3728      	adds	r7, #40	; 0x28
 80092d8:	46bd      	mov	sp, r7
 80092da:	bdb0      	pop	{r4, r5, r7, pc}
 80092dc:	014f8b59 	.word	0x014f8b59
 80092e0:	00012110 	.word	0x00012110
 80092e4:	004005ff 	.word	0x004005ff

080092e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08c      	sub	sp, #48	; 0x30
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d107      	bne.n	8009310 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e0a9      	b.n	8009464 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b01      	cmp	r3, #1
 800931a:	f040 80a2 	bne.w	8009462 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	441a      	add	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800932e:	429a      	cmp	r2, r3
 8009330:	d907      	bls.n	8009342 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e090      	b.n	8009464 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2203      	movs	r2, #3
 8009346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2200      	movs	r2, #0
 8009350:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	4a45      	ldr	r2, [pc, #276]	; (800946c <HAL_SD_ReadBlocks_DMA+0x184>)
 8009358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	4a44      	ldr	r2, [pc, #272]	; (8009470 <HAL_SD_ReadBlocks_DMA+0x188>)
 8009360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	2200      	movs	r2, #0
 8009368:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3380      	adds	r3, #128	; 0x80
 8009374:	4619      	mov	r1, r3
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	025b      	lsls	r3, r3, #9
 800937c:	089b      	lsrs	r3, r3, #2
 800937e:	f7fa ffb5 	bl	80042ec <HAL_DMA_Start_IT>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00f      	beq.n	80093a8 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a39      	ldr	r2, [pc, #228]	; (8009474 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e05d      	b.n	8009464 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0208 	orr.w	r2, r2, #8
 80093b6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d002      	beq.n	80093c6 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	025b      	lsls	r3, r3, #9
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093c6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	025b      	lsls	r3, r3, #9
 80093d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80093d2:	2390      	movs	r3, #144	; 0x90
 80093d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093d6:	2302      	movs	r3, #2
 80093d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093da:	2300      	movs	r3, #0
 80093dc:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80093de:	2301      	movs	r3, #1
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f107 0210 	add.w	r2, r7, #16
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fa7f 	bl	800a8f0 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d90a      	bls.n	800940e <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2282      	movs	r2, #130	; 0x82
 80093fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009404:	4618      	mov	r0, r3
 8009406:	f001 fae3 	bl	800a9d0 <SDMMC_CmdReadMultiBlock>
 800940a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800940c:	e009      	b.n	8009422 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2281      	movs	r2, #129	; 0x81
 8009412:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800941a:	4618      	mov	r0, r3
 800941c:	f001 fab6 	bl	800a98c <SDMMC_CmdReadSingleBlock>
 8009420:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d012      	beq.n	800944e <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a11      	ldr	r2, [pc, #68]	; (8009474 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	431a      	orrs	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e00a      	b.n	8009464 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800945c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	e000      	b.n	8009464 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009462:	2302      	movs	r3, #2
  }
}
 8009464:	4618      	mov	r0, r3
 8009466:	3730      	adds	r7, #48	; 0x30
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	08009e93 	.word	0x08009e93
 8009470:	08009f05 	.word	0x08009f05
 8009474:	004005ff 	.word	0x004005ff

08009478 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08c      	sub	sp, #48	; 0x30
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d107      	bne.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e0ac      	b.n	80095fa <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	f040 80a5 	bne.w	80095f8 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	441a      	add	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094be:	429a      	cmp	r2, r3
 80094c0:	d907      	bls.n	80094d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e093      	b.n	80095fa <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2203      	movs	r2, #3
 80094d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	4a47      	ldr	r2, [pc, #284]	; (8009604 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80094e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	4a46      	ldr	r2, [pc, #280]	; (8009608 <HAL_SD_WriteBlocks_DMA+0x190>)
 80094f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f6:	2200      	movs	r2, #0
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d002      	beq.n	8009508 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	025b      	lsls	r3, r3, #9
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d90a      	bls.n	8009524 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	22a0      	movs	r2, #160	; 0xa0
 8009512:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800951a:	4618      	mov	r0, r3
 800951c:	f001 fa9c 	bl	800aa58 <SDMMC_CmdWriteMultiBlock>
 8009520:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009522:	e009      	b.n	8009538 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2290      	movs	r2, #144	; 0x90
 8009528:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fa6f 	bl	800aa14 <SDMMC_CmdWriteSingleBlock>
 8009536:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	2b00      	cmp	r3, #0
 800953c:	d012      	beq.n	8009564 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a32      	ldr	r2, [pc, #200]	; (800960c <HAL_SD_WriteBlocks_DMA+0x194>)
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	431a      	orrs	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e04a      	b.n	80095fa <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0208 	orr.w	r2, r2, #8
 8009572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3380      	adds	r3, #128	; 0x80
 8009580:	461a      	mov	r2, r3
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	025b      	lsls	r3, r3, #9
 8009586:	089b      	lsrs	r3, r3, #2
 8009588:	f7fa feb0 	bl	80042ec <HAL_DMA_Start_IT>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d012      	beq.n	80095b8 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a1d      	ldr	r2, [pc, #116]	; (800960c <HAL_SD_WriteBlocks_DMA+0x194>)
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e020      	b.n	80095fa <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095b8:	f04f 33ff 	mov.w	r3, #4294967295
 80095bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	025b      	lsls	r3, r3, #9
 80095c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095c4:	2390      	movs	r3, #144	; 0x90
 80095c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f107 0210 	add.w	r2, r7, #16
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 f986 	bl	800a8f0 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f042 021a 	orr.w	r2, r2, #26
 80095f2:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e000      	b.n	80095fa <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3730      	adds	r7, #48	; 0x30
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	08009e69 	.word	0x08009e69
 8009608:	08009f05 	.word	0x08009f05
 800960c:	004005ff 	.word	0x004005ff

08009610 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d008      	beq.n	800963e <HAL_SD_IRQHandler+0x2e>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 f802 	bl	800a640 <SD_Read_IT>
 800963c:	e155      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 808f 	beq.w	800976c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009656:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009666:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800966a:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0201 	bic.w	r2, r2, #1
 800967a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f003 0308 	and.w	r3, r3, #8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d039      	beq.n	80096fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <HAL_SD_IRQHandler+0x8a>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b00      	cmp	r3, #0
 8009698:	d011      	beq.n	80096be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 f9fc 	bl	800aa9c <SDMMC_CmdStopTransfer>
 80096a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d008      	beq.n	80096be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f91f 	bl	80098fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <HAL_SD_IRQHandler+0xda>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f003 f8fc 	bl	800c8e8 <HAL_SD_RxCpltCallback>
 80096f0:	e0fb      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f003 f8ee 	bl	800c8d4 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80096f8:	e0f7      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80f2 	beq.w	80098ea <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d011      	beq.n	8009734 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4618      	mov	r0, r3
 8009716:	f001 f9c1 	bl	800aa9c <SDMMC_CmdStopTransfer>
 800971a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f8e4 	bl	80098fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 80d5 	bne.w	80098ea <HAL_SD_IRQHandler+0x2da>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 80cf 	bne.w	80098ea <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0208 	bic.w	r2, r2, #8
 800975a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f003 f8b5 	bl	800c8d4 <HAL_SD_TxCpltCallback>
}
 800976a:	e0be      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d008      	beq.n	800978c <HAL_SD_IRQHandler+0x17c>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d003      	beq.n	800978c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 ffac 	bl	800a6e2 <SD_Write_IT>
 800978a:	e0ae      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 80a7 	beq.w	80098ea <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	f043 0202 	orr.w	r2, r3, #2
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097bc:	f003 0308 	and.w	r3, r3, #8
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	f043 0208 	orr.w	r2, r3, #8
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	f043 0220 	orr.w	r2, r3, #32
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	f003 0310 	and.w	r3, r3, #16
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fc:	f043 0210 	orr.w	r2, r3, #16
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f240 523a 	movw	r2, #1338	; 0x53a
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800981c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f001 f93a 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8009828:	4602      	mov	r2, r0
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0308 	and.w	r3, r3, #8
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f855 	bl	80098fc <HAL_SD_ErrorCallback>
}
 8009852:	e04a      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	2b00      	cmp	r3, #0
 800985c:	d045      	beq.n	80098ea <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f003 0310 	and.w	r3, r3, #16
 8009864:	2b00      	cmp	r3, #0
 8009866:	d104      	bne.n	8009872 <HAL_SD_IRQHandler+0x262>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d011      	beq.n	8009896 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009876:	4a1f      	ldr	r2, [pc, #124]	; (80098f4 <HAL_SD_IRQHandler+0x2e4>)
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	4618      	mov	r0, r3
 8009880:	f7fa fd94 	bl	80043ac <HAL_DMA_Abort_IT>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02f      	beq.n	80098ea <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988e:	4618      	mov	r0, r3
 8009890:	f000 fb84 	bl	8009f9c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009894:	e029      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <HAL_SD_IRQHandler+0x29a>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d011      	beq.n	80098ce <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ae:	4a12      	ldr	r2, [pc, #72]	; (80098f8 <HAL_SD_IRQHandler+0x2e8>)
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fa fd78 	bl	80043ac <HAL_DMA_Abort_IT>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d013      	beq.n	80098ea <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fb9f 	bl	800a00a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80098cc:	e00d      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f002 ffec 	bl	800c8c0 <HAL_SD_AbortCallback>
}
 80098e8:	e7ff      	b.n	80098ea <HAL_SD_IRQHandler+0x2da>
 80098ea:	bf00      	nop
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	08009f9d 	.word	0x08009f9d
 80098f8:	0800a00b 	.word	0x0800a00b

080098fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991e:	0f9b      	lsrs	r3, r3, #30
 8009920:	b2da      	uxtb	r2, r3
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800992a:	0e9b      	lsrs	r3, r3, #26
 800992c:	b2db      	uxtb	r3, r3
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	b2da      	uxtb	r2, r3
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800993c:	0e1b      	lsrs	r3, r3, #24
 800993e:	b2db      	uxtb	r3, r3
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	b2da      	uxtb	r2, r3
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800994e:	0c1b      	lsrs	r3, r3, #16
 8009950:	b2da      	uxtb	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800995a:	0a1b      	lsrs	r3, r3, #8
 800995c:	b2da      	uxtb	r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009966:	b2da      	uxtb	r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009970:	0d1b      	lsrs	r3, r3, #20
 8009972:	b29a      	uxth	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800997c:	0c1b      	lsrs	r3, r3, #16
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	b2da      	uxtb	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800998e:	0bdb      	lsrs	r3, r3, #15
 8009990:	b2db      	uxtb	r3, r3
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	b2da      	uxtb	r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099a0:	0b9b      	lsrs	r3, r3, #14
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099b2:	0b5b      	lsrs	r3, r3, #13
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099c4:	0b1b      	lsrs	r3, r3, #12
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2200      	movs	r2, #0
 80099d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d163      	bne.n	8009aa8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e4:	009a      	lsls	r2, r3, #2
 80099e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80099ea:	4013      	ands	r3, r2
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80099f0:	0f92      	lsrs	r2, r2, #30
 80099f2:	431a      	orrs	r2, r3
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099fc:	0edb      	lsrs	r3, r3, #27
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a0e:	0e1b      	lsrs	r3, r3, #24
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a20:	0d5b      	lsrs	r3, r3, #21
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a32:	0c9b      	lsrs	r3, r3, #18
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a44:	0bdb      	lsrs	r3, r3, #15
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	7e1b      	ldrb	r3, [r3, #24]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	3302      	adds	r3, #2
 8009a68:	2201      	movs	r2, #1
 8009a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009a72:	fb03 f202 	mul.w	r2, r3, r2
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	7a1b      	ldrb	r3, [r3, #8]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	2201      	movs	r2, #1
 8009a86:	409a      	lsls	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009a94:	0a52      	lsrs	r2, r2, #9
 8009a96:	fb03 f202 	mul.w	r2, r3, r2
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aa4:	661a      	str	r2, [r3, #96]	; 0x60
 8009aa6:	e031      	b.n	8009b0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d11d      	bne.n	8009aec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ab4:	041b      	lsls	r3, r3, #16
 8009ab6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009abe:	0c1b      	lsrs	r3, r3, #16
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	3301      	adds	r3, #1
 8009acc:	029a      	lsls	r2, r3, #10
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ae0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	661a      	str	r2, [r3, #96]	; 0x60
 8009aea:	e00f      	b.n	8009b0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a58      	ldr	r2, [pc, #352]	; (8009c54 <HAL_SD_GetCardCSD+0x344>)
 8009af2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e09d      	b.n	8009c48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b10:	0b9b      	lsrs	r3, r3, #14
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b22:	09db      	lsrs	r3, r3, #7
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b44:	0fdb      	lsrs	r3, r3, #31
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b50:	0f5b      	lsrs	r3, r3, #29
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	0e9b      	lsrs	r3, r3, #26
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b74:	0d9b      	lsrs	r3, r3, #22
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b86:	0d5b      	lsrs	r3, r3, #21
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb6:	0bdb      	lsrs	r3, r3, #15
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bca:	0b9b      	lsrs	r3, r3, #14
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bde:	0b5b      	lsrs	r3, r3, #13
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf2:	0b1b      	lsrs	r3, r3, #12
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	b2da      	uxtb	r2, r3
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c06:	0a9b      	lsrs	r3, r3, #10
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1a:	0a1b      	lsrs	r3, r3, #8
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	004005ff 	.word	0x004005ff

08009c58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009cb0:	b5b0      	push	{r4, r5, r7, lr}
 8009cb2:	b090      	sub	sp, #64	; 0x40
 8009cb4:	af04      	add	r7, sp, #16
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d02e      	beq.n	8009d2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd6:	d106      	bne.n	8009ce6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8009ce4:	e029      	b.n	8009d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cec:	d10a      	bne.n	8009d04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fb46 	bl	800a380 <SD_WideBus_Enable>
 8009cf4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	639a      	str	r2, [r3, #56]	; 0x38
 8009d02:	e01a      	b.n	8009d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb83 	bl	800a416 <SD_WideBus_Disable>
 8009d10:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8009d1e:	e00c      	b.n	8009d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8009d2c:	e005      	b.n	8009d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a35      	ldr	r2, [pc, #212]	; (8009e1c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d50:	e042      	b.n	8009dd8 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009d52:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009d56:	f7fd ff5f 	bl	8007c18 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d031      	beq.n	8009dc6 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	3302      	adds	r3, #2
 8009d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8a:	4a25      	ldr	r2, [pc, #148]	; (8009e20 <HAL_SD_ConfigWideBusOperation+0x170>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d907      	bls.n	8009da0 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	4a24      	ldr	r2, [pc, #144]	; (8009e24 <HAL_SD_ConfigWideBusOperation+0x174>)
 8009d94:	fba2 2303 	umull	r2, r3, r2, r3
 8009d98:	0ddb      	lsrs	r3, r3, #23
 8009d9a:	3b02      	subs	r3, #2
 8009d9c:	623b      	str	r3, [r7, #32]
 8009d9e:	e002      	b.n	8009da6 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681d      	ldr	r5, [r3, #0]
 8009daa:	466c      	mov	r4, sp
 8009dac:	f107 0318 	add.w	r3, r7, #24
 8009db0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 fce4 	bl	800a78c <SDMMC_Init>
 8009dc4:	e008      	b.n	8009dd8 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fdb1 	bl	800a948 <SDMMC_CmdBlockLength>
 8009de6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a0a      	ldr	r2, [pc, #40]	; (8009e1c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009df4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3730      	adds	r7, #48	; 0x30
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e1c:	004005ff 	.word	0x004005ff
 8009e20:	017d7840 	.word	0x017d7840
 8009e24:	55e63b89 	.word	0x55e63b89

08009e28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e34:	f107 030c 	add.w	r3, r7, #12
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa78 	bl	800a330 <SD_SendStatus>
 8009e40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	0a5b      	lsrs	r3, r3, #9
 8009e58:	f003 030f 	and.w	r3, r3, #15
 8009e5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e5e:	693b      	ldr	r3, [r7, #16]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009e86:	bf00      	nop
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	2b82      	cmp	r3, #130	; 0x82
 8009ea6:	d111      	bne.n	8009ecc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fdf5 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8009eb2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d008      	beq.n	8009ecc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff fd18 	bl	80098fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0208 	bic.w	r2, r2, #8
 8009eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ee4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f002 fcf7 	bl	800c8e8 <HAL_SD_RxCpltCallback>
#endif
}
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f18:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f20:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d002      	beq.n	8009f2e <SD_DMAError+0x2a>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d12d      	bne.n	8009f8a <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a19      	ldr	r2, [pc, #100]	; (8009f98 <SD_DMAError+0x94>)
 8009f34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009f44:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff ff68 	bl	8009e28 <HAL_SD_GetCardState>
 8009f58:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	d002      	beq.n	8009f66 <SD_DMAError+0x62>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d10a      	bne.n	8009f7c <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fd96 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8009f70:	4602      	mov	r2, r0
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	431a      	orrs	r2, r3
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2200      	movs	r2, #0
 8009f88:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8009f8a:	6978      	ldr	r0, [r7, #20]
 8009f8c:	f7ff fcb6 	bl	80098fc <HAL_SD_ErrorCallback>
#endif
}
 8009f90:	bf00      	nop
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	004005ff 	.word	0x004005ff

08009f9c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f240 523a 	movw	r2, #1338	; 0x53a
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f7ff ff37 	bl	8009e28 <HAL_SD_GetCardState>
 8009fba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b06      	cmp	r3, #6
 8009fce:	d002      	beq.n	8009fd6 <SD_DMATxAbort+0x3a>
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d10a      	bne.n	8009fec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fd5e 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f002 fc63 	bl	800c8c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ffa:	e002      	b.n	800a002 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f7ff fc7d 	bl	80098fc <HAL_SD_ErrorCallback>
}
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a016:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a020:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff ff00 	bl	8009e28 <HAL_SD_GetCardState>
 800a028:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b06      	cmp	r3, #6
 800a03c:	d002      	beq.n	800a044 <SD_DMARxAbort+0x3a>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b05      	cmp	r3, #5
 800a042:	d10a      	bne.n	800a05a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fd27 	bl	800aa9c <SDMMC_CmdStopTransfer>
 800a04e:	4602      	mov	r2, r0
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a054:	431a      	orrs	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d103      	bne.n	800a06a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f002 fc2c 	bl	800c8c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a068:	e002      	b.n	800a070 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fc46 	bl	80098fc <HAL_SD_ErrorCallback>
}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a078:	b5b0      	push	{r4, r5, r7, lr}
 800a07a:	b094      	sub	sp, #80	; 0x50
 800a07c:	af04      	add	r7, sp, #16
 800a07e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a080:	2301      	movs	r3, #1
 800a082:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 fbd9 	bl	800a840 <SDMMC_GetPowerState>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a094:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a098:	e0b8      	b.n	800a20c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d02f      	beq.n	800a102 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fe02 	bl	800acb0 <SDMMC_CmdSendCID>
 800a0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <SD_InitCard+0x40>
    {
      return errorstate;
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	e0a9      	b.n	800a20c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fc03 	bl	800a8ca <SDMMC_GetResponse>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2104      	movs	r1, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fbfa 	bl	800a8ca <SDMMC_GetResponse>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2108      	movs	r1, #8
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fbf1 	bl	800a8ca <SDMMC_GetResponse>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	210c      	movs	r1, #12
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fbe8 	bl	800a8ca <SDMMC_GetResponse>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	2b03      	cmp	r3, #3
 800a108:	d00d      	beq.n	800a126 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f107 020e 	add.w	r2, r7, #14
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fe08 	bl	800ad2a <SDMMC_CmdSetRelAdd>
 800a11a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <SD_InitCard+0xae>
    {
      return errorstate;
 800a122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a124:	e072      	b.n	800a20c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d036      	beq.n	800a19c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a12e:	89fb      	ldrh	r3, [r7, #14]
 800a130:	461a      	mov	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13e:	041b      	lsls	r3, r3, #16
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f000 fdd2 	bl	800acec <SDMMC_CmdSendCSD>
 800a148:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a152:	e05b      	b.n	800a20c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fbb5 	bl	800a8ca <SDMMC_GetResponse>
 800a160:	4602      	mov	r2, r0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2104      	movs	r1, #4
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fbac 	bl	800a8ca <SDMMC_GetResponse>
 800a172:	4602      	mov	r2, r0
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2108      	movs	r1, #8
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fba3 	bl	800a8ca <SDMMC_GetResponse>
 800a184:	4602      	mov	r2, r0
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	210c      	movs	r1, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fb9a 	bl	800a8ca <SDMMC_GetResponse>
 800a196:	4602      	mov	r2, r0
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2104      	movs	r1, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fb91 	bl	800a8ca <SDMMC_GetResponse>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	0d1a      	lsrs	r2, r3, #20
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a1b0:	f107 0310 	add.w	r3, r7, #16
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff fbaa 	bl	8009910 <HAL_SD_GetCardCSD>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1c6:	e021      	b.n	800a20c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6819      	ldr	r1, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d0:	041b      	lsls	r3, r3, #16
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	461c      	mov	r4, r3
 800a1d6:	4615      	mov	r5, r2
 800a1d8:	4622      	mov	r2, r4
 800a1da:	462b      	mov	r3, r5
 800a1dc:	4608      	mov	r0, r1
 800a1de:	f000 fc7f 	bl	800aae0 <SDMMC_CmdSelDesel>
 800a1e2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <SD_InitCard+0x176>
  {
    return errorstate;
 800a1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ec:	e00e      	b.n	800a20c <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681d      	ldr	r5, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	466c      	mov	r4, sp
 800a1f6:	f103 0210 	add.w	r2, r3, #16
 800a1fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a200:	3304      	adds	r3, #4
 800a202:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a204:	4628      	mov	r0, r5
 800a206:	f000 fac1 	bl	800a78c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3740      	adds	r7, #64	; 0x40
 800a210:	46bd      	mov	sp, r7
 800a212:	bdb0      	pop	{r4, r5, r7, pc}

0800a214 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	2300      	movs	r3, #0
 800a226:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 fc7a 	bl	800ab26 <SDMMC_CmdGoIdleState>
 800a232:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	e072      	b.n	800a324 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fc8d 	bl	800ab62 <SDMMC_CmdOperCond>
 800a248:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00d      	beq.n	800a26c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fc63 	bl	800ab26 <SDMMC_CmdGoIdleState>
 800a260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	e05b      	b.n	800a324 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a276:	2b01      	cmp	r3, #1
 800a278:	d137      	bne.n	800a2ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2100      	movs	r1, #0
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fc8d 	bl	800aba0 <SDMMC_CmdAppCommand>
 800a286:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d02d      	beq.n	800a2ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a28e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a292:	e047      	b.n	800a324 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2100      	movs	r1, #0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 fc80 	bl	800aba0 <SDMMC_CmdAppCommand>
 800a2a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <SD_PowerON+0x98>
    {
      return errorstate;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	e03b      	b.n	800a324 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	491e      	ldr	r1, [pc, #120]	; (800a32c <SD_PowerON+0x118>)
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fc96 	bl	800abe4 <SDMMC_CmdAppOperCommand>
 800a2b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2c4:	e02e      	b.n	800a324 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fafc 	bl	800a8ca <SDMMC_GetResponse>
 800a2d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	0fdb      	lsrs	r3, r3, #31
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d101      	bne.n	800a2e0 <SD_PowerON+0xcc>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e000      	b.n	800a2e2 <SD_PowerON+0xce>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	613b      	str	r3, [r7, #16]

    count++;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d802      	bhi.n	800a2fa <SD_PowerON+0xe6>
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0cc      	beq.n	800a294 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a300:	4293      	cmp	r3, r2
 800a302:	d902      	bls.n	800a30a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a308:	e00c      	b.n	800a324 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	645a      	str	r2, [r3, #68]	; 0x44
 800a31a:	e002      	b.n	800a322 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	c1100000 	.word	0xc1100000

0800a330 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a344:	e018      	b.n	800a378 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34e:	041b      	lsls	r3, r3, #16
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f000 fd0a 	bl	800ad6c <SDMMC_CmdSendStatus>
 800a358:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	e009      	b.n	800a378 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2100      	movs	r1, #0
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 faad 	bl	800a8ca <SDMMC_GetResponse>
 800a370:	4602      	mov	r2, r0
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	2300      	movs	r3, #0
 800a38e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2100      	movs	r1, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f000 fa97 	bl	800a8ca <SDMMC_GetResponse>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3a6:	d102      	bne.n	800a3ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a3a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3ac:	e02f      	b.n	800a40e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a3ae:	f107 030c 	add.w	r3, r7, #12
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f879 	bl	800a4ac <SD_FindSCR>
 800a3ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	e023      	b.n	800a40e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01c      	beq.n	800a40a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d8:	041b      	lsls	r3, r3, #16
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f000 fbdf 	bl	800aba0 <SDMMC_CmdAppCommand>
 800a3e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	e00f      	b.n	800a40e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2102      	movs	r1, #2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fc18 	bl	800ac2a <SDMMC_CmdBusWidth>
 800a3fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	e003      	b.n	800a40e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a406:	2300      	movs	r3, #0
 800a408:	e001      	b.n	800a40e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a40a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b086      	sub	sp, #24
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	2300      	movs	r3, #0
 800a424:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2100      	movs	r1, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fa4c 	bl	800a8ca <SDMMC_GetResponse>
 800a432:	4603      	mov	r3, r0
 800a434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a43c:	d102      	bne.n	800a444 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a43e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a442:	e02f      	b.n	800a4a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a444:	f107 030c 	add.w	r3, r7, #12
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f82e 	bl	800a4ac <SD_FindSCR>
 800a450:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	e023      	b.n	800a4a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01c      	beq.n	800a4a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46e:	041b      	lsls	r3, r3, #16
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f000 fb94 	bl	800aba0 <SDMMC_CmdAppCommand>
 800a478:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	e00f      	b.n	800a4a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fbcd 	bl	800ac2a <SDMMC_CmdBusWidth>
 800a490:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	e003      	b.n	800a4a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	e001      	b.n	800a4a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a4a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a4ac:	b590      	push	{r4, r7, lr}
 800a4ae:	b08f      	sub	sp, #60	; 0x3c
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a4b6:	f7f9 fd1f 	bl	8003ef8 <HAL_GetTick>
 800a4ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60bb      	str	r3, [r7, #8]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2108      	movs	r1, #8
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fa38 	bl	800a948 <SDMMC_CmdBlockLength>
 800a4d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	e0a9      	b.n	800a638 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ec:	041b      	lsls	r3, r3, #16
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f000 fb55 	bl	800aba0 <SDMMC_CmdAppCommand>
 800a4f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	e09a      	b.n	800a638 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a502:	f04f 33ff 	mov.w	r3, #4294967295
 800a506:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a508:	2308      	movs	r3, #8
 800a50a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a50c:	2330      	movs	r3, #48	; 0x30
 800a50e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a510:	2302      	movs	r3, #2
 800a512:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a514:	2300      	movs	r3, #0
 800a516:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a518:	2301      	movs	r3, #1
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f107 0210 	add.w	r2, r7, #16
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f9e2 	bl	800a8f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fb9c 	bl	800ac6e <SDMMC_CmdSendSCR>
 800a536:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d022      	beq.n	800a584 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	e07a      	b.n	800a638 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6819      	ldr	r1, [r3, #0]
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	f107 0208 	add.w	r2, r7, #8
 800a55c:	18d4      	adds	r4, r2, r3
 800a55e:	4608      	mov	r0, r1
 800a560:	f000 f941 	bl	800a7e6 <SDMMC_ReadFIFO>
 800a564:	4603      	mov	r3, r0
 800a566:	6023      	str	r3, [r4, #0]
      index++;
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	3301      	adds	r3, #1
 800a56c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a56e:	f7f9 fcc3 	bl	8003ef8 <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d102      	bne.n	800a584 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a57e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a582:	e059      	b.n	800a638 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58a:	f240 432a 	movw	r3, #1066	; 0x42a
 800a58e:	4013      	ands	r3, r2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0d6      	beq.n	800a542 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	f003 0308 	and.w	r3, r3, #8
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2208      	movs	r2, #8
 800a5a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a5aa:	2308      	movs	r3, #8
 800a5ac:	e044      	b.n	800a638 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e037      	b.n	800a638 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a5de:	2320      	movs	r3, #32
 800a5e0:	e02a      	b.n	800a638 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f240 523a 	movw	r2, #1338	; 0x53a
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	061a      	lsls	r2, r3, #24
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a602:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	0e1b      	lsrs	r3, r3, #24
 800a608:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	601a      	str	r2, [r3, #0]
    scr++;
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	3304      	adds	r3, #4
 800a612:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	061a      	lsls	r2, r3, #24
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a620:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	0a1b      	lsrs	r3, r3, #8
 800a626:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a62a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	0e1b      	lsrs	r3, r3, #24
 800a630:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	373c      	adds	r7, #60	; 0x3c
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}

0800a640 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a652:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d03f      	beq.n	800a6da <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a65a:	2300      	movs	r3, #0
 800a65c:	617b      	str	r3, [r7, #20]
 800a65e:	e033      	b.n	800a6c8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f000 f8be 	bl	800a7e6 <SDMMC_ReadFIFO>
 800a66a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	0a1b      	lsrs	r3, r3, #8
 800a684:	b2da      	uxtb	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3b01      	subs	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	0c1b      	lsrs	r3, r3, #16
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	0e1b      	lsrs	r3, r3, #24
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2b07      	cmp	r3, #7
 800a6cc:	d9c8      	bls.n	800a660 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a6da:	bf00      	nop
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b086      	sub	sp, #24
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d043      	beq.n	800a784 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	e037      	b.n	800a772 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3301      	adds	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3b01      	subs	r3, #1
 800a712:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	021a      	lsls	r2, r3, #8
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	3b01      	subs	r3, #1
 800a72a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	041a      	lsls	r2, r3, #16
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	4313      	orrs	r3, r2
 800a736:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	3301      	adds	r3, #1
 800a73c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	3b01      	subs	r3, #1
 800a742:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	061a      	lsls	r2, r3, #24
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	3301      	adds	r3, #1
 800a754:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f107 0208 	add.w	r2, r7, #8
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f84a 	bl	800a800 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	3301      	adds	r3, #1
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2b07      	cmp	r3, #7
 800a776:	d9c4      	bls.n	800a702 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a784:	bf00      	nop
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a78c:	b084      	sub	sp, #16
 800a78e:	b480      	push	{r7}
 800a790:	b085      	sub	sp, #20
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	f107 001c 	add.w	r0, r7, #28
 800a79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a7aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a7ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a7b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a7b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a7ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a7ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	b004      	add	sp, #16
 800a7e4:	4770      	bx	lr

0800a7e6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2203      	movs	r2, #3
 800a82e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a830:	2002      	movs	r0, #2
 800a832:	f7f9 fb6d 	bl	8003f10 <HAL_Delay>

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0303 	and.w	r3, r3, #3
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a87a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a880:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a886:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a896:	f023 030f 	bic.w	r3, r3, #15
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	b2db      	uxtb	r3, r3
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3314      	adds	r3, #20
 800a8d8:	461a      	mov	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a916:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a91c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0

}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a956:	2310      	movs	r3, #16
 800a958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a95a:	2340      	movs	r3, #64	; 0x40
 800a95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a95e:	2300      	movs	r3, #0
 800a960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff74 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a974:	f241 3288 	movw	r2, #5000	; 0x1388
 800a978:	2110      	movs	r1, #16
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa18 	bl	800adb0 <SDMMC_GetCmdResp1>
 800a980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a982:	69fb      	ldr	r3, [r7, #28]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a99a:	2311      	movs	r3, #17
 800a99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff ff52 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9bc:	2111      	movs	r1, #17
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9f6 	bl	800adb0 <SDMMC_GetCmdResp1>
 800a9c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a9de:	2312      	movs	r3, #18
 800a9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9e2:	2340      	movs	r3, #64	; 0x40
 800a9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9f0:	f107 0308 	add.w	r3, r7, #8
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff30 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa00:	2112      	movs	r1, #18
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f9d4 	bl	800adb0 <SDMMC_GetCmdResp1>
 800aa08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa22:	2318      	movs	r3, #24
 800aa24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa34:	f107 0308 	add.w	r3, r7, #8
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ff0e 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aa40:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa44:	2118      	movs	r1, #24
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f9b2 	bl	800adb0 <SDMMC_GetCmdResp1>
 800aa4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3720      	adds	r7, #32
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aa66:	2319      	movs	r3, #25
 800aa68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa78:	f107 0308 	add.w	r3, r7, #8
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff feec 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa88:	2119      	movs	r1, #25
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f990 	bl	800adb0 <SDMMC_GetCmdResp1>
 800aa90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa92:	69fb      	ldr	r3, [r7, #28]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fecb 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800aac6:	4a05      	ldr	r2, [pc, #20]	; (800aadc <SDMMC_CmdStopTransfer+0x40>)
 800aac8:	210c      	movs	r1, #12
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f970 	bl	800adb0 <SDMMC_GetCmdResp1>
 800aad0:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800aad2:	69fb      	ldr	r3, [r7, #28]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	05f5e100 	.word	0x05f5e100

0800aae0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aaf0:	2307      	movs	r3, #7
 800aaf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaf4:	2340      	movs	r3, #64	; 0x40
 800aaf6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab00:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff fea7 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ab0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab12:	2107      	movs	r1, #7
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f94b 	bl	800adb0 <SDMMC_GetCmdResp1>
 800ab1a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3728      	adds	r7, #40	; 0x28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b088      	sub	sp, #32
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ab36:	2300      	movs	r3, #0
 800ab38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe86 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb65 	bl	800b220 <SDMMC_GetCmdError>
 800ab56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab58:	69fb      	ldr	r3, [r7, #28]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b088      	sub	sp, #32
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ab6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ab6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ab70:	2308      	movs	r3, #8
 800ab72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fe67 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 faf8 	bl	800b184 <SDMMC_GetCmdResp7>
 800ab94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab96:	69fb      	ldr	r3, [r7, #28]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800abae:	2337      	movs	r3, #55	; 0x37
 800abb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abb2:	2340      	movs	r3, #64	; 0x40
 800abb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abc0:	f107 0308 	add.w	r3, r7, #8
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff fe48 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800abcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd0:	2137      	movs	r1, #55	; 0x37
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8ec 	bl	800adb0 <SDMMC_GetCmdResp1>
 800abd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abda:	69fb      	ldr	r3, [r7, #28]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abf8:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800abfa:	2329      	movs	r3, #41	; 0x29
 800abfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abfe:	2340      	movs	r3, #64	; 0x40
 800ac00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac0c:	f107 0308 	add.w	r3, r7, #8
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff fe22 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9ff 	bl	800b01c <SDMMC_GetCmdResp3>
 800ac1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac20:	69fb      	ldr	r3, [r7, #28]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b088      	sub	sp, #32
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ac38:	2306      	movs	r3, #6
 800ac3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fe03 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ac56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5a:	2106      	movs	r1, #6
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f8a7 	bl	800adb0 <SDMMC_GetCmdResp1>
 800ac62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac64:	69fb      	ldr	r3, [r7, #28]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3720      	adds	r7, #32
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b088      	sub	sp, #32
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ac7a:	2333      	movs	r3, #51	; 0x33
 800ac7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7e:	2340      	movs	r3, #64	; 0x40
 800ac80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac8c:	f107 0308 	add.w	r3, r7, #8
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff fde2 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ac98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9c:	2133      	movs	r1, #51	; 0x33
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f886 	bl	800adb0 <SDMMC_GetCmdResp1>
 800aca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca6:	69fb      	ldr	r3, [r7, #28]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800acb8:	2300      	movs	r3, #0
 800acba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800acbc:	2302      	movs	r3, #2
 800acbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800acc0:	23c0      	movs	r3, #192	; 0xc0
 800acc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800accc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acce:	f107 0308 	add.w	r3, r7, #8
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff fdc1 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f956 	bl	800af8c <SDMMC_GetCmdResp2>
 800ace0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace2:	69fb      	ldr	r3, [r7, #28]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800acfa:	2309      	movs	r3, #9
 800acfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800acfe:	23c0      	movs	r3, #192	; 0xc0
 800ad00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff fda2 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f937 	bl	800af8c <SDMMC_GetCmdResp2>
 800ad1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad20:	69fb      	ldr	r3, [r7, #28]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b088      	sub	sp, #32
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff fd83 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	2103      	movs	r1, #3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f99c 	bl	800b098 <SDMMC_GetCmdResp6>
 800ad60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ad7a:	230d      	movs	r3, #13
 800ad7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad7e:	2340      	movs	r3, #64	; 0x40
 800ad80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad8c:	f107 0308 	add.w	r3, r7, #8
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fd62 	bl	800a85c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ad98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad9c:	210d      	movs	r1, #13
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f806 	bl	800adb0 <SDMMC_GetCmdResp1>
 800ada4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada6:	69fb      	ldr	r3, [r7, #28]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	460b      	mov	r3, r1
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800adbe:	4b70      	ldr	r3, [pc, #448]	; (800af80 <SDMMC_GetCmdResp1+0x1d0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a70      	ldr	r2, [pc, #448]	; (800af84 <SDMMC_GetCmdResp1+0x1d4>)
 800adc4:	fba2 2303 	umull	r2, r3, r2, r3
 800adc8:	0a5a      	lsrs	r2, r3, #9
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	fb02 f303 	mul.w	r3, r2, r3
 800add0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	61fa      	str	r2, [r7, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800addc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ade0:	e0c9      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0ef      	beq.n	800add2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1ea      	bne.n	800add2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae0e:	2304      	movs	r3, #4
 800ae10:	e0b1      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e0a6      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	22c5      	movs	r2, #197	; 0xc5
 800ae2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff fd3e 	bl	800a8b0 <SDMMC_GetCommandResponse>
 800ae34:	4603      	mov	r3, r0
 800ae36:	461a      	mov	r2, r3
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d001      	beq.n	800ae42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e099      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ae42:	2100      	movs	r1, #0
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7ff fd40 	bl	800a8ca <SDMMC_GetResponse>
 800ae4a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4b4e      	ldr	r3, [pc, #312]	; (800af88 <SDMMC_GetCmdResp1+0x1d8>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ae56:	2300      	movs	r3, #0
 800ae58:	e08d      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	da02      	bge.n	800ae66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae64:	e087      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	e080      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae7e:	2380      	movs	r3, #128	; 0x80
 800ae80:	e079      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae90:	e071      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ae9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aea0:	e069      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aeac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb0:	e061      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aec0:	e059      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aed0:	e051      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aedc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aee0:	e049      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aeec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aef0:	e041      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aefc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af00:	e039      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800af0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af10:	e031      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800af1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af20:	e029      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af30:	e021      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af40:	e019      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af50:	e011      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af60:	e009      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f003 0308 	and.w	r3, r3, #8
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800af6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af70:	e001      	b.n	800af76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af76:	4618      	mov	r0, r3
 800af78:	3720      	adds	r7, #32
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000000 	.word	0x20000000
 800af84:	10624dd3 	.word	0x10624dd3
 800af88:	fdffe008 	.word	0xfdffe008

0800af8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af94:	4b1f      	ldr	r3, [pc, #124]	; (800b014 <SDMMC_GetCmdResp2+0x88>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a1f      	ldr	r2, [pc, #124]	; (800b018 <SDMMC_GetCmdResp2+0x8c>)
 800af9a:	fba2 2303 	umull	r2, r3, r2, r3
 800af9e:	0a5b      	lsrs	r3, r3, #9
 800afa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa4:	fb02 f303 	mul.w	r3, r2, r3
 800afa8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1e5a      	subs	r2, r3, #1
 800afae:	60fa      	str	r2, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d102      	bne.n	800afba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afb8:	e026      	b.n	800b008 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0ef      	beq.n	800afaa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1ea      	bne.n	800afaa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2204      	movs	r2, #4
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afe6:	2304      	movs	r3, #4
 800afe8:	e00e      	b.n	800b008 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800affc:	2301      	movs	r3, #1
 800affe:	e003      	b.n	800b008 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	22c5      	movs	r2, #197	; 0xc5
 800b004:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	20000000 	.word	0x20000000
 800b018:	10624dd3 	.word	0x10624dd3

0800b01c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b024:	4b1a      	ldr	r3, [pc, #104]	; (800b090 <SDMMC_GetCmdResp3+0x74>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a1a      	ldr	r2, [pc, #104]	; (800b094 <SDMMC_GetCmdResp3+0x78>)
 800b02a:	fba2 2303 	umull	r2, r3, r2, r3
 800b02e:	0a5b      	lsrs	r3, r3, #9
 800b030:	f241 3288 	movw	r2, #5000	; 0x1388
 800b034:	fb02 f303 	mul.w	r3, r2, r3
 800b038:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	1e5a      	subs	r2, r3, #1
 800b03e:	60fa      	str	r2, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b044:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b048:	e01b      	b.n	800b082 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0ef      	beq.n	800b03a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1ea      	bne.n	800b03a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b068:	f003 0304 	and.w	r3, r3, #4
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d004      	beq.n	800b07a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2204      	movs	r2, #4
 800b074:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b076:	2304      	movs	r3, #4
 800b078:	e003      	b.n	800b082 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	22c5      	movs	r2, #197	; 0xc5
 800b07e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	20000000 	.word	0x20000000
 800b094:	10624dd3 	.word	0x10624dd3

0800b098 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0a6:	4b35      	ldr	r3, [pc, #212]	; (800b17c <SDMMC_GetCmdResp6+0xe4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a35      	ldr	r2, [pc, #212]	; (800b180 <SDMMC_GetCmdResp6+0xe8>)
 800b0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b0:	0a5b      	lsrs	r3, r3, #9
 800b0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	1e5a      	subs	r2, r3, #1
 800b0c0:	61fa      	str	r2, [r7, #28]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d102      	bne.n	800b0cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0ca:	e052      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0ef      	beq.n	800b0bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1ea      	bne.n	800b0bc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	f003 0304 	and.w	r3, r3, #4
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d004      	beq.n	800b0fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2204      	movs	r2, #4
 800b0f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	e03a      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2201      	movs	r2, #1
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b10e:	2301      	movs	r3, #1
 800b110:	e02f      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fbcc 	bl	800a8b0 <SDMMC_GetCommandResponse>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	4293      	cmp	r3, r2
 800b120:	d001      	beq.n	800b126 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b122:	2301      	movs	r3, #1
 800b124:	e025      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	22c5      	movs	r2, #197	; 0xc5
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b12c:	2100      	movs	r1, #0
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff fbcb 	bl	800a8ca <SDMMC_GetResponse>
 800b134:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d106      	bne.n	800b14e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	0c1b      	lsrs	r3, r3, #16
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	e011      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b15c:	e009      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b16c:	e001      	b.n	800b172 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b16e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b172:	4618      	mov	r0, r3
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20000000 	.word	0x20000000
 800b180:	10624dd3 	.word	0x10624dd3

0800b184 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b18c:	4b22      	ldr	r3, [pc, #136]	; (800b218 <SDMMC_GetCmdResp7+0x94>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a22      	ldr	r2, [pc, #136]	; (800b21c <SDMMC_GetCmdResp7+0x98>)
 800b192:	fba2 2303 	umull	r2, r3, r2, r3
 800b196:	0a5b      	lsrs	r3, r3, #9
 800b198:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19c:	fb02 f303 	mul.w	r3, r2, r3
 800b1a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	1e5a      	subs	r2, r3, #1
 800b1a6:	60fa      	str	r2, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b0:	e02c      	b.n	800b20c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0ef      	beq.n	800b1a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1ea      	bne.n	800b1a2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2204      	movs	r2, #4
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1de:	2304      	movs	r3, #4
 800b1e0:	e014      	b.n	800b20c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e009      	b.n	800b20c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2240      	movs	r2, #64	; 0x40
 800b208:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b20a:	2300      	movs	r3, #0

}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	20000000 	.word	0x20000000
 800b21c:	10624dd3 	.word	0x10624dd3

0800b220 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b228:	4b11      	ldr	r3, [pc, #68]	; (800b270 <SDMMC_GetCmdError+0x50>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a11      	ldr	r2, [pc, #68]	; (800b274 <SDMMC_GetCmdError+0x54>)
 800b22e:	fba2 2303 	umull	r2, r3, r2, r3
 800b232:	0a5b      	lsrs	r3, r3, #9
 800b234:	f241 3288 	movw	r2, #5000	; 0x1388
 800b238:	fb02 f303 	mul.w	r3, r2, r3
 800b23c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	60fa      	str	r2, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d102      	bne.n	800b24e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b24c:	e009      	b.n	800b262 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0f1      	beq.n	800b23e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	22c5      	movs	r2, #197	; 0xc5
 800b25e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000000 	.word	0x20000000
 800b274:	10624dd3 	.word	0x10624dd3

0800b278 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b278:	b084      	sub	sp, #16
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	f107 001c 	add.w	r0, r7, #28
 800b286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 fa1c 	bl	800c6d4 <USB_CoreReset>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d106      	bne.n	800b2b4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38
 800b2b2:	e005      	b.n	800b2c0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2cc:	b004      	add	sp, #16
 800b2ce:	4770      	bx	lr

0800b2d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b2de:	79fb      	ldrb	r3, [r7, #7]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d165      	bne.n	800b3b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4a3e      	ldr	r2, [pc, #248]	; (800b3e0 <USB_SetTurnaroundTime+0x110>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d906      	bls.n	800b2fa <USB_SetTurnaroundTime+0x2a>
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	4a3d      	ldr	r2, [pc, #244]	; (800b3e4 <USB_SetTurnaroundTime+0x114>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d202      	bcs.n	800b2fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b2f4:	230f      	movs	r3, #15
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e05c      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	4a39      	ldr	r2, [pc, #228]	; (800b3e4 <USB_SetTurnaroundTime+0x114>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d306      	bcc.n	800b310 <USB_SetTurnaroundTime+0x40>
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	4a38      	ldr	r2, [pc, #224]	; (800b3e8 <USB_SetTurnaroundTime+0x118>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d202      	bcs.n	800b310 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b30a:	230e      	movs	r3, #14
 800b30c:	617b      	str	r3, [r7, #20]
 800b30e:	e051      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	4a35      	ldr	r2, [pc, #212]	; (800b3e8 <USB_SetTurnaroundTime+0x118>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d306      	bcc.n	800b326 <USB_SetTurnaroundTime+0x56>
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	4a34      	ldr	r2, [pc, #208]	; (800b3ec <USB_SetTurnaroundTime+0x11c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d202      	bcs.n	800b326 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b320:	230d      	movs	r3, #13
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e046      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	4a30      	ldr	r2, [pc, #192]	; (800b3ec <USB_SetTurnaroundTime+0x11c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d306      	bcc.n	800b33c <USB_SetTurnaroundTime+0x6c>
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	4a2f      	ldr	r2, [pc, #188]	; (800b3f0 <USB_SetTurnaroundTime+0x120>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d802      	bhi.n	800b33c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b336:	230c      	movs	r3, #12
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	e03b      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	4a2c      	ldr	r2, [pc, #176]	; (800b3f0 <USB_SetTurnaroundTime+0x120>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d906      	bls.n	800b352 <USB_SetTurnaroundTime+0x82>
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	4a2b      	ldr	r2, [pc, #172]	; (800b3f4 <USB_SetTurnaroundTime+0x124>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d802      	bhi.n	800b352 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b34c:	230b      	movs	r3, #11
 800b34e:	617b      	str	r3, [r7, #20]
 800b350:	e030      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	4a27      	ldr	r2, [pc, #156]	; (800b3f4 <USB_SetTurnaroundTime+0x124>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d906      	bls.n	800b368 <USB_SetTurnaroundTime+0x98>
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	4a26      	ldr	r2, [pc, #152]	; (800b3f8 <USB_SetTurnaroundTime+0x128>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d802      	bhi.n	800b368 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b362:	230a      	movs	r3, #10
 800b364:	617b      	str	r3, [r7, #20]
 800b366:	e025      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	4a23      	ldr	r2, [pc, #140]	; (800b3f8 <USB_SetTurnaroundTime+0x128>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d906      	bls.n	800b37e <USB_SetTurnaroundTime+0xae>
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4a22      	ldr	r2, [pc, #136]	; (800b3fc <USB_SetTurnaroundTime+0x12c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d202      	bcs.n	800b37e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b378:	2309      	movs	r3, #9
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	e01a      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <USB_SetTurnaroundTime+0x12c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d306      	bcc.n	800b394 <USB_SetTurnaroundTime+0xc4>
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	4a1d      	ldr	r2, [pc, #116]	; (800b400 <USB_SetTurnaroundTime+0x130>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d802      	bhi.n	800b394 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b38e:	2308      	movs	r3, #8
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	e00f      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	4a1a      	ldr	r2, [pc, #104]	; (800b400 <USB_SetTurnaroundTime+0x130>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d906      	bls.n	800b3aa <USB_SetTurnaroundTime+0xda>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	4a19      	ldr	r2, [pc, #100]	; (800b404 <USB_SetTurnaroundTime+0x134>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d202      	bcs.n	800b3aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b3a4:	2307      	movs	r3, #7
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	e004      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b3aa:	2306      	movs	r3, #6
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e001      	b.n	800b3b4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b3b0:	2309      	movs	r3, #9
 800b3b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	68da      	ldr	r2, [r3, #12]
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	029b      	lsls	r3, r3, #10
 800b3c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	371c      	adds	r7, #28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	00d8acbf 	.word	0x00d8acbf
 800b3e4:	00e4e1c0 	.word	0x00e4e1c0
 800b3e8:	00f42400 	.word	0x00f42400
 800b3ec:	01067380 	.word	0x01067380
 800b3f0:	011a499f 	.word	0x011a499f
 800b3f4:	01312cff 	.word	0x01312cff
 800b3f8:	014ca43f 	.word	0x014ca43f
 800b3fc:	016e3600 	.word	0x016e3600
 800b400:	01a6ab1f 	.word	0x01a6ab1f
 800b404:	01e84800 	.word	0x01e84800

0800b408 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f043 0201 	orr.w	r2, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f023 0201 	bic.w	r2, r3, #1
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d115      	bne.n	800b49a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b47a:	2001      	movs	r0, #1
 800b47c:	f7f8 fd48 	bl	8003f10 <HAL_Delay>
      ms++;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f001 f8ab 	bl	800c5e2 <USB_GetMode>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d01e      	beq.n	800b4d0 <USB_SetCurrentMode+0x84>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b31      	cmp	r3, #49	; 0x31
 800b496:	d9f0      	bls.n	800b47a <USB_SetCurrentMode+0x2e>
 800b498:	e01a      	b.n	800b4d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d115      	bne.n	800b4cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	f7f8 fd2f 	bl	8003f10 <HAL_Delay>
      ms++;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f001 f892 	bl	800c5e2 <USB_GetMode>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d005      	beq.n	800b4d0 <USB_SetCurrentMode+0x84>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b31      	cmp	r3, #49	; 0x31
 800b4c8:	d9f0      	bls.n	800b4ac <USB_SetCurrentMode+0x60>
 800b4ca:	e001      	b.n	800b4d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e005      	b.n	800b4dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b32      	cmp	r3, #50	; 0x32
 800b4d4:	d101      	bne.n	800b4da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e000      	b.n	800b4dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b086      	sub	sp, #24
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b4f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	e009      	b.n	800b518 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	3340      	adds	r3, #64	; 0x40
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	2200      	movs	r2, #0
 800b510:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	3301      	adds	r3, #1
 800b516:	613b      	str	r3, [r7, #16]
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b0e      	cmp	r3, #14
 800b51c:	d9f2      	bls.n	800b504 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11c      	bne.n	800b55e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b532:	f043 0302 	orr.w	r3, r3, #2
 800b536:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	e005      	b.n	800b56a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b562:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b570:	461a      	mov	r2, r3
 800b572:	2300      	movs	r3, #0
 800b574:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b576:	2103      	movs	r1, #3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f959 	bl	800b830 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b57e:	2110      	movs	r1, #16
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f8f1 	bl	800b768 <USB_FlushTxFifo>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f91d 	bl	800b7d0 <USB_FlushRxFifo>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5be:	461a      	mov	r2, r3
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	613b      	str	r3, [r7, #16]
 800b5c8:	e043      	b.n	800b652 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	015a      	lsls	r2, r3, #5
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5e0:	d118      	bne.n	800b614 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	e013      	b.n	800b626 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60a:	461a      	mov	r2, r3
 800b60c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	e008      	b.n	800b626 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b620:	461a      	mov	r2, r3
 800b622:	2300      	movs	r3, #0
 800b624:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b632:	461a      	mov	r2, r3
 800b634:	2300      	movs	r3, #0
 800b636:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b644:	461a      	mov	r2, r3
 800b646:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b64a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3301      	adds	r3, #1
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	429a      	cmp	r2, r3
 800b658:	d3b7      	bcc.n	800b5ca <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b65a:	2300      	movs	r3, #0
 800b65c:	613b      	str	r3, [r7, #16]
 800b65e:	e043      	b.n	800b6e8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b676:	d118      	bne.n	800b6aa <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	015a      	lsls	r2, r3, #5
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	4413      	add	r3, r2
 800b686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68a:	461a      	mov	r2, r3
 800b68c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	e013      	b.n	800b6bc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	e008      	b.n	800b6bc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	613b      	str	r3, [r7, #16]
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d3b7      	bcc.n	800b660 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b702:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b710:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	f043 0210 	orr.w	r2, r3, #16
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	699a      	ldr	r2, [r3, #24]
 800b722:	4b10      	ldr	r3, [pc, #64]	; (800b764 <USB_DevInit+0x280>)
 800b724:	4313      	orrs	r3, r2
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	f043 0208 	orr.w	r2, r3, #8
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d107      	bne.n	800b752 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b74a:	f043 0304 	orr.w	r3, r3, #4
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b752:	7dfb      	ldrb	r3, [r7, #23]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b75e:	b004      	add	sp, #16
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	803c3800 	.word	0x803c3800

0800b768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3301      	adds	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4a13      	ldr	r2, [pc, #76]	; (800b7cc <USB_FlushTxFifo+0x64>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d901      	bls.n	800b788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e01b      	b.n	800b7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	daf2      	bge.n	800b776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	019b      	lsls	r3, r3, #6
 800b798:	f043 0220 	orr.w	r2, r3, #32
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <USB_FlushTxFifo+0x64>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d901      	bls.n	800b7b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e006      	b.n	800b7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	d0f0      	beq.n	800b7a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	00030d40 	.word	0x00030d40

0800b7d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	4a11      	ldr	r2, [pc, #68]	; (800b82c <USB_FlushRxFifo+0x5c>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d901      	bls.n	800b7ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e018      	b.n	800b820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	daf2      	bge.n	800b7dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2210      	movs	r2, #16
 800b7fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4a08      	ldr	r2, [pc, #32]	; (800b82c <USB_FlushRxFifo+0x5c>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d901      	bls.n	800b812 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e006      	b.n	800b820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	f003 0310 	and.w	r3, r3, #16
 800b81a:	2b10      	cmp	r3, #16
 800b81c:	d0f0      	beq.n	800b800 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	00030d40 	.word	0x00030d40

0800b830 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b850:	4313      	orrs	r3, r2
 800b852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b862:	b480      	push	{r7}
 800b864:	b087      	sub	sp, #28
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0306 	and.w	r3, r3, #6
 800b87a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d002      	beq.n	800b888 <USB_GetDevSpeed+0x26>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b06      	cmp	r3, #6
 800b886:	d102      	bne.n	800b88e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b888:	2302      	movs	r3, #2
 800b88a:	75fb      	strb	r3, [r7, #23]
 800b88c:	e001      	b.n	800b892 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b88e:	230f      	movs	r3, #15
 800b890:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
}
 800b894:	4618      	mov	r0, r3
 800b896:	371c      	adds	r7, #28
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d13a      	bne.n	800b932 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c2:	69da      	ldr	r2, [r3, #28]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f003 030f 	and.w	r3, r3, #15
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	68f9      	ldr	r1, [r7, #12]
 800b8d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d155      	bne.n	800b9a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	791b      	ldrb	r3, [r3, #4]
 800b90e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b910:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	059b      	lsls	r3, r3, #22
 800b916:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b918:	4313      	orrs	r3, r2
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	0151      	lsls	r1, r2, #5
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	440a      	add	r2, r1
 800b922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	e036      	b.n	800b9a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b938:	69da      	ldr	r2, [r3, #28]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	f003 030f 	and.w	r3, r3, #15
 800b942:	2101      	movs	r1, #1
 800b944:	fa01 f303 	lsl.w	r3, r1, r3
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b950:	4313      	orrs	r3, r2
 800b952:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d11a      	bne.n	800b9a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	791b      	ldrb	r3, [r3, #4]
 800b984:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b986:	430b      	orrs	r3, r1
 800b988:	4313      	orrs	r3, r2
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	0151      	lsls	r1, r2, #5
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	440a      	add	r2, r1
 800b992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b99e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
	...

0800b9b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	785b      	ldrb	r3, [r3, #1]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d161      	bne.n	800ba90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9e2:	d11f      	bne.n	800ba24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	0151      	lsls	r1, r2, #5
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	440a      	add	r2, r1
 800b9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	0151      	lsls	r1, r2, #5
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	440a      	add	r2, r1
 800ba1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 030f 	and.w	r3, r3, #15
 800ba34:	2101      	movs	r1, #1
 800ba36:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	43db      	mvns	r3, r3
 800ba3e:	68f9      	ldr	r1, [r7, #12]
 800ba40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba44:	4013      	ands	r3, r2
 800ba46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4e:	69da      	ldr	r2, [r3, #28]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	2101      	movs	r1, #1
 800ba5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	43db      	mvns	r3, r3
 800ba62:	68f9      	ldr	r1, [r7, #12]
 800ba64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba68:	4013      	ands	r3, r2
 800ba6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	015a      	lsls	r2, r3, #5
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4413      	add	r3, r2
 800ba74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	0159      	lsls	r1, r3, #5
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	440b      	add	r3, r1
 800ba82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba86:	4619      	mov	r1, r3
 800ba88:	4b35      	ldr	r3, [pc, #212]	; (800bb60 <USB_DeactivateEndpoint+0x1b0>)
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	600b      	str	r3, [r1, #0]
 800ba8e:	e060      	b.n	800bb52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baa6:	d11f      	bne.n	800bae8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bac6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	0151      	lsls	r1, r2, #5
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	440a      	add	r2, r1
 800bade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	f003 030f 	and.w	r3, r3, #15
 800baf8:	2101      	movs	r1, #1
 800bafa:	fa01 f303 	lsl.w	r3, r1, r3
 800bafe:	041b      	lsls	r3, r3, #16
 800bb00:	43db      	mvns	r3, r3
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb08:	4013      	ands	r3, r2
 800bb0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb12:	69da      	ldr	r2, [r3, #28]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	f003 030f 	and.w	r3, r3, #15
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb22:	041b      	lsls	r3, r3, #16
 800bb24:	43db      	mvns	r3, r3
 800bb26:	68f9      	ldr	r1, [r7, #12]
 800bb28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	015a      	lsls	r2, r3, #5
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	4413      	add	r3, r2
 800bb38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	0159      	lsls	r1, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	440b      	add	r3, r1
 800bb46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4b05      	ldr	r3, [pc, #20]	; (800bb64 <USB_DeactivateEndpoint+0x1b4>)
 800bb4e:	4013      	ands	r3, r2
 800bb50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	ec337800 	.word	0xec337800
 800bb64:	eff37800 	.word	0xeff37800

0800bb68 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	785b      	ldrb	r3, [r3, #1]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	f040 8128 	bne.w	800bdd6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d132      	bne.n	800bbf4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	0151      	lsls	r1, r2, #5
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	440a      	add	r2, r1
 800bba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbec:	0cdb      	lsrs	r3, r3, #19
 800bbee:	04db      	lsls	r3, r3, #19
 800bbf0:	6113      	str	r3, [r2, #16]
 800bbf2:	e092      	b.n	800bd1a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	0151      	lsls	r1, r2, #5
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	440a      	add	r2, r1
 800bc0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0e:	0cdb      	lsrs	r3, r3, #19
 800bc10:	04db      	lsls	r3, r3, #19
 800bc12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	0151      	lsls	r1, r2, #5
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	440a      	add	r2, r1
 800bc2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d11a      	bne.n	800bc74 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	691a      	ldr	r2, [r3, #16]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d903      	bls.n	800bc52 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	0151      	lsls	r1, r2, #5
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	440a      	add	r2, r1
 800bc68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc70:	6113      	str	r3, [r2, #16]
 800bc72:	e01b      	b.n	800bcac <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	015a      	lsls	r2, r3, #5
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc80:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	6919      	ldr	r1, [r3, #16]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	440b      	add	r3, r1
 800bc8c:	1e59      	subs	r1, r3, #1
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc96:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc98:	4b8d      	ldr	r3, [pc, #564]	; (800bed0 <USB_EPStartXfer+0x368>)
 800bc9a:	400b      	ands	r3, r1
 800bc9c:	6939      	ldr	r1, [r7, #16]
 800bc9e:	0148      	lsls	r0, r1, #5
 800bca0:	6979      	ldr	r1, [r7, #20]
 800bca2:	4401      	add	r1, r0
 800bca4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb8:	691a      	ldr	r2, [r3, #16]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcc2:	6939      	ldr	r1, [r7, #16]
 800bcc4:	0148      	lsls	r0, r1, #5
 800bcc6:	6979      	ldr	r1, [r7, #20]
 800bcc8:	4401      	add	r1, r0
 800bcca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	791b      	ldrb	r3, [r3, #4]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d11f      	bne.n	800bd1a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	0151      	lsls	r1, r2, #5
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	440a      	add	r2, r1
 800bcf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bcf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	015a      	lsls	r2, r3, #5
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	4413      	add	r3, r2
 800bd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	0151      	lsls	r1, r2, #5
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	440a      	add	r2, r1
 800bd10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd18:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	015a      	lsls	r2, r3, #5
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	4413      	add	r3, r2
 800bd22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	0151      	lsls	r1, r2, #5
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	440a      	add	r2, r1
 800bd30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd38:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	791b      	ldrb	r3, [r3, #4]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d015      	beq.n	800bd6e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f000 8139 	beq.w	800bfbe <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	f003 030f 	and.w	r3, r3, #15
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd62:	6979      	ldr	r1, [r7, #20]
 800bd64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	634b      	str	r3, [r1, #52]	; 0x34
 800bd6c:	e127      	b.n	800bfbe <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d110      	bne.n	800bda0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	0151      	lsls	r1, r2, #5
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	440a      	add	r2, r1
 800bd94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	e00f      	b.n	800bdc0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	015a      	lsls	r2, r3, #5
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	4413      	add	r3, r2
 800bda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	0151      	lsls	r1, r2, #5
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	440a      	add	r2, r1
 800bdb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdbe:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	68d9      	ldr	r1, [r3, #12]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	781a      	ldrb	r2, [r3, #0]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f9a6 	bl	800c120 <USB_WritePacket>
 800bdd4:	e0f3      	b.n	800bfbe <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	0151      	lsls	r1, r2, #5
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	440a      	add	r2, r1
 800bdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdf0:	0cdb      	lsrs	r3, r3, #19
 800bdf2:	04db      	lsls	r3, r3, #19
 800bdf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	015a      	lsls	r2, r3, #5
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	0151      	lsls	r1, r2, #5
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	440a      	add	r2, r1
 800be0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be18:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d12f      	bne.n	800be80 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	689a      	ldr	r2, [r3, #8]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	015a      	lsls	r2, r3, #5
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	4413      	add	r3, r2
 800be40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be44:	691a      	ldr	r2, [r3, #16]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be4e:	6939      	ldr	r1, [r7, #16]
 800be50:	0148      	lsls	r0, r1, #5
 800be52:	6979      	ldr	r1, [r7, #20]
 800be54:	4401      	add	r1, r0
 800be56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be5a:	4313      	orrs	r3, r2
 800be5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	0151      	lsls	r1, r2, #5
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	440a      	add	r2, r1
 800be74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be7c:	6113      	str	r3, [r2, #16]
 800be7e:	e061      	b.n	800bf44 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d125      	bne.n	800bed4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be94:	691a      	ldr	r2, [r3, #16]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be9e:	6939      	ldr	r1, [r7, #16]
 800bea0:	0148      	lsls	r0, r1, #5
 800bea2:	6979      	ldr	r1, [r7, #20]
 800bea4:	4401      	add	r1, r0
 800bea6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800beaa:	4313      	orrs	r3, r2
 800beac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	0151      	lsls	r1, r2, #5
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	440a      	add	r2, r1
 800bec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800becc:	6113      	str	r3, [r2, #16]
 800bece:	e039      	b.n	800bf44 <USB_EPStartXfer+0x3dc>
 800bed0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	691a      	ldr	r2, [r3, #16]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	4413      	add	r3, r2
 800bede:	1e5a      	subs	r2, r3, #1
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	89fa      	ldrh	r2, [r7, #14]
 800bef0:	fb03 f202 	mul.w	r2, r3, r2
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	015a      	lsls	r2, r3, #5
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	4413      	add	r3, r2
 800bf00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf04:	691a      	ldr	r2, [r3, #16]
 800bf06:	89fb      	ldrh	r3, [r7, #14]
 800bf08:	04d9      	lsls	r1, r3, #19
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	; (800bfc8 <USB_EPStartXfer+0x460>)
 800bf0c:	400b      	ands	r3, r1
 800bf0e:	6939      	ldr	r1, [r7, #16]
 800bf10:	0148      	lsls	r0, r1, #5
 800bf12:	6979      	ldr	r1, [r7, #20]
 800bf14:	4401      	add	r1, r0
 800bf16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2a:	691a      	ldr	r2, [r3, #16]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf34:	6939      	ldr	r1, [r7, #16]
 800bf36:	0148      	lsls	r0, r1, #5
 800bf38:	6979      	ldr	r1, [r7, #20]
 800bf3a:	4401      	add	r1, r0
 800bf3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf40:	4313      	orrs	r3, r2
 800bf42:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	791b      	ldrb	r3, [r3, #4]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d128      	bne.n	800bf9e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d110      	bne.n	800bf7e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	e00f      	b.n	800bf9e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	0151      	lsls	r1, r2, #5
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	440a      	add	r2, r1
 800bf94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf9c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	0151      	lsls	r1, r2, #5
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	440a      	add	r2, r1
 800bfb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	1ff80000 	.word	0x1ff80000

0800bfcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d14a      	bne.n	800c080 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c002:	f040 8086 	bne.w	800c112 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	7812      	ldrb	r2, [r2, #0]
 800c01a:	0151      	lsls	r1, r2, #5
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	440a      	add	r2, r1
 800c020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c024:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c028:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	015a      	lsls	r2, r3, #5
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	4413      	add	r3, r2
 800c034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	7812      	ldrb	r2, [r2, #0]
 800c03e:	0151      	lsls	r1, r2, #5
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	440a      	add	r2, r1
 800c044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c04c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f242 7210 	movw	r2, #10000	; 0x2710
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d902      	bls.n	800c064 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	75fb      	strb	r3, [r7, #23]
          break;
 800c062:	e056      	b.n	800c112 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	015a      	lsls	r2, r3, #5
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	4413      	add	r3, r2
 800c06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c07c:	d0e7      	beq.n	800c04e <USB_EPStopXfer+0x82>
 800c07e:	e048      	b.n	800c112 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	015a      	lsls	r2, r3, #5
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	4413      	add	r3, r2
 800c08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c098:	d13b      	bne.n	800c112 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	7812      	ldrb	r2, [r2, #0]
 800c0ae:	0151      	lsls	r1, r2, #5
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	440a      	add	r2, r1
 800c0b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	7812      	ldrb	r2, [r2, #0]
 800c0d2:	0151      	lsls	r1, r2, #5
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	440a      	add	r2, r1
 800c0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d902      	bls.n	800c0f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	75fb      	strb	r3, [r7, #23]
          break;
 800c0f6:	e00c      	b.n	800c112 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c10c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c110:	d0e7      	beq.n	800c0e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c112:	7dfb      	ldrb	r3, [r7, #23]
}
 800c114:	4618      	mov	r0, r3
 800c116:	371c      	adds	r7, #28
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c120:	b480      	push	{r7}
 800c122:	b089      	sub	sp, #36	; 0x24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	4611      	mov	r1, r2
 800c12c:	461a      	mov	r2, r3
 800c12e:	460b      	mov	r3, r1
 800c130:	71fb      	strb	r3, [r7, #7]
 800c132:	4613      	mov	r3, r2
 800c134:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c13e:	88bb      	ldrh	r3, [r7, #4]
 800c140:	3303      	adds	r3, #3
 800c142:	089b      	lsrs	r3, r3, #2
 800c144:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c146:	2300      	movs	r3, #0
 800c148:	61bb      	str	r3, [r7, #24]
 800c14a:	e018      	b.n	800c17e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	031a      	lsls	r2, r3, #12
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	4413      	add	r3, r2
 800c154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c158:	461a      	mov	r2, r3
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	3301      	adds	r3, #1
 800c164:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	3301      	adds	r3, #1
 800c16a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	3301      	adds	r3, #1
 800c170:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	3301      	adds	r3, #1
 800c176:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	3301      	adds	r3, #1
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	429a      	cmp	r2, r3
 800c184:	d3e2      	bcc.n	800c14c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3724      	adds	r7, #36	; 0x24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c194:	b480      	push	{r7}
 800c196:	b08b      	sub	sp, #44	; 0x2c
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	089b      	lsrs	r3, r3, #2
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c1b2:	88fb      	ldrh	r3, [r7, #6]
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	623b      	str	r3, [r7, #32]
 800c1be:	e014      	b.n	800c1ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	601a      	str	r2, [r3, #0]
    pDest++;
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	3301      	adds	r3, #1
 800c1dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	623b      	str	r3, [r7, #32]
 800c1ea:	6a3a      	ldr	r2, [r7, #32]
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d3e6      	bcc.n	800c1c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c1f2:	8bfb      	ldrh	r3, [r7, #30]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d01e      	beq.n	800c236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c202:	461a      	mov	r2, r3
 800c204:	f107 0310 	add.w	r3, r7, #16
 800c208:	6812      	ldr	r2, [r2, #0]
 800c20a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c20c:	693a      	ldr	r2, [r7, #16]
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	fa22 f303 	lsr.w	r3, r2, r3
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	701a      	strb	r2, [r3, #0]
      i++;
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	3301      	adds	r3, #1
 800c222:	623b      	str	r3, [r7, #32]
      pDest++;
 800c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c226:	3301      	adds	r3, #1
 800c228:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c22a:	8bfb      	ldrh	r3, [r7, #30]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c230:	8bfb      	ldrh	r3, [r7, #30]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1ea      	bne.n	800c20c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c238:	4618      	mov	r0, r3
 800c23a:	372c      	adds	r7, #44	; 0x2c
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d12c      	bne.n	800c2ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	db12      	blt.n	800c298 <USB_EPSetStall+0x54>
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00f      	beq.n	800c298 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	0151      	lsls	r1, r2, #5
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	440a      	add	r2, r1
 800c28e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c296:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	0151      	lsls	r1, r2, #5
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	440a      	add	r2, r1
 800c2ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	e02b      	b.n	800c312 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	db12      	blt.n	800c2f2 <USB_EPSetStall+0xae>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00f      	beq.n	800c2f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	0151      	lsls	r1, r2, #5
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	440a      	add	r2, r1
 800c2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c2f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	0151      	lsls	r1, r2, #5
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	440a      	add	r2, r1
 800c308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c30c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	785b      	ldrb	r3, [r3, #1]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d128      	bne.n	800c38e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	0151      	lsls	r1, r2, #5
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	440a      	add	r2, r1
 800c352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c35a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	791b      	ldrb	r3, [r3, #4]
 800c360:	2b03      	cmp	r3, #3
 800c362:	d003      	beq.n	800c36c <USB_EPClearStall+0x4c>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	791b      	ldrb	r3, [r3, #4]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d138      	bne.n	800c3de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	0151      	lsls	r1, r2, #5
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	440a      	add	r2, r1
 800c382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	e027      	b.n	800c3de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	0151      	lsls	r1, r2, #5
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	440a      	add	r2, r1
 800c3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	791b      	ldrb	r3, [r3, #4]
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d003      	beq.n	800c3be <USB_EPClearStall+0x9e>
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	791b      	ldrb	r3, [r3, #4]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d10f      	bne.n	800c3de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	015a      	lsls	r2, r3, #5
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	0151      	lsls	r1, r2, #5
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	440a      	add	r2, r1
 800c3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c40a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c40e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	78fb      	ldrb	r3, [r7, #3]
 800c41a:	011b      	lsls	r3, r3, #4
 800c41c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c420:	68f9      	ldr	r1, [r7, #12]
 800c422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c426:	4313      	orrs	r3, r2
 800c428:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c452:	f023 0303 	bic.w	r3, r3, #3
 800c456:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c466:	f023 0302 	bic.w	r3, r3, #2
 800c46a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b085      	sub	sp, #20
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c494:	f023 0303 	bic.w	r3, r3, #3
 800c498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4a8:	f043 0302 	orr.w	r3, r3, #2
 800c4ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b085      	sub	sp, #20
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4013      	ands	r3, r2
 800c504:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	0c1b      	lsrs	r3, r3, #16
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c516:	b480      	push	{r7}
 800c518:	b085      	sub	sp, #20
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	4013      	ands	r3, r2
 800c538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	b29b      	uxth	r3, r3
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b085      	sub	sp, #20
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	460b      	mov	r3, r1
 800c554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c55a:	78fb      	ldrb	r3, [r7, #3]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	4013      	ands	r3, r2
 800c576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c578:	68bb      	ldr	r3, [r7, #8]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c586:	b480      	push	{r7}
 800c588:	b087      	sub	sp, #28
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c5aa:	78fb      	ldrb	r3, [r7, #3]
 800c5ac:	f003 030f 	and.w	r3, r3, #15
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b6:	01db      	lsls	r3, r3, #7
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c5c0:	78fb      	ldrb	r3, [r7, #3]
 800c5c2:	015a      	lsls	r2, r3, #5
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	693a      	ldr	r2, [r7, #16]
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c5d4:	68bb      	ldr	r3, [r7, #8]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	f003 0301 	and.w	r3, r3, #1
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b085      	sub	sp, #20
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c618:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c61c:	f023 0307 	bic.w	r3, r3, #7
 800c620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	333c      	adds	r3, #60	; 0x3c
 800c656:	3304      	adds	r3, #4
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	4a1c      	ldr	r2, [pc, #112]	; (800c6d0 <USB_EP0_OutStart+0x8c>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d90a      	bls.n	800c67a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c674:	d101      	bne.n	800c67a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	e024      	b.n	800c6c4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c680:	461a      	mov	r2, r3
 800c682:	2300      	movs	r3, #0
 800c684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a8:	f043 0318 	orr.w	r3, r3, #24
 800c6ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c6c0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	4f54300a 	.word	0x4f54300a

0800c6d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	4a13      	ldr	r2, [pc, #76]	; (800c738 <USB_CoreReset+0x64>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d901      	bls.n	800c6f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e01b      	b.n	800c72a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	daf2      	bge.n	800c6e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	f043 0201 	orr.w	r2, r3, #1
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	4a09      	ldr	r2, [pc, #36]	; (800c738 <USB_CoreReset+0x64>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d901      	bls.n	800c71c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e006      	b.n	800c72a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b01      	cmp	r3, #1
 800c726:	d0f0      	beq.n	800c70a <USB_CoreReset+0x36>

  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	00030d40 	.word	0x00030d40

0800c73c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c740:	4904      	ldr	r1, [pc, #16]	; (800c754 <MX_FATFS_Init+0x18>)
 800c742:	4805      	ldr	r0, [pc, #20]	; (800c758 <MX_FATFS_Init+0x1c>)
 800c744:	f005 f886 	bl	8011854 <FATFS_LinkDriver>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	4b03      	ldr	r3, [pc, #12]	; (800c75c <MX_FATFS_Init+0x20>)
 800c74e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c750:	bf00      	nop
 800c752:	bd80      	pop	{r7, pc}
 800c754:	200068c8 	.word	0x200068c8
 800c758:	08017000 	.word	0x08017000
 800c75c:	200068c4 	.word	0x200068c4

0800c760 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c764:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c766:	4618      	mov	r0, r3
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c77a:	f000 f8c6 	bl	800c90a <BSP_SD_IsDetected>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b01      	cmp	r3, #1
 800c782:	d001      	beq.n	800c788 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c784:	2302      	movs	r3, #2
 800c786:	e012      	b.n	800c7ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c788:	480b      	ldr	r0, [pc, #44]	; (800c7b8 <BSP_SD_Init+0x48>)
 800c78a:	f7fc fcd7 	bl	800913c <HAL_SD_Init>
 800c78e:	4603      	mov	r3, r0
 800c790:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c792:	79fb      	ldrb	r3, [r7, #7]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d109      	bne.n	800c7ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c798:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c79c:	4806      	ldr	r0, [pc, #24]	; (800c7b8 <BSP_SD_Init+0x48>)
 800c79e:	f7fd fa87 	bl	8009cb0 <HAL_SD_ConfigWideBusOperation>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c7ac:	79fb      	ldrb	r3, [r7, #7]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20000368 	.word	0x20000368

0800c7bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800c7cc:	4b13      	ldr	r3, [pc, #76]	; (800c81c <BSP_SD_ReadBlocks_DMA+0x60>)
 800c7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	4b11      	ldr	r3, [pc, #68]	; (800c81c <BSP_SD_ReadBlocks_DMA+0x60>)
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f022 0201 	bic.w	r2, r2, #1
 800c7de:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c7e0:	4b0e      	ldr	r3, [pc, #56]	; (800c81c <BSP_SD_ReadBlocks_DMA+0x60>)
 800c7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800c7e8:	4b0c      	ldr	r3, [pc, #48]	; (800c81c <BSP_SD_ReadBlocks_DMA+0x60>)
 800c7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	; (800c81c <BSP_SD_ReadBlocks_DMA+0x60>)
 800c7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0210 	bic.w	r2, r2, #16
 800c7fa:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	68f9      	ldr	r1, [r7, #12]
 800c802:	4806      	ldr	r0, [pc, #24]	; (800c81c <BSP_SD_ReadBlocks_DMA+0x60>)
 800c804:	f7fc fd70 	bl	80092e8 <HAL_SD_ReadBlocks_DMA>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c812:	7dfb      	ldrb	r3, [r7, #23]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	20000368 	.word	0x20000368

0800c820 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800c830:	4b13      	ldr	r3, [pc, #76]	; (800c880 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	4b11      	ldr	r3, [pc, #68]	; (800c880 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f022 0201 	bic.w	r2, r2, #1
 800c842:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c848:	2210      	movs	r2, #16
 800c84a:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800c84c:	4b0c      	ldr	r3, [pc, #48]	; (800c880 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f042 0210 	orr.w	r2, r2, #16
 800c85e:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	68f9      	ldr	r1, [r7, #12]
 800c866:	4806      	ldr	r0, [pc, #24]	; (800c880 <BSP_SD_WriteBlocks_DMA+0x60>)
 800c868:	f7fc fe06 	bl	8009478 <HAL_SD_WriteBlocks_DMA>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c876:	7dfb      	ldrb	r3, [r7, #23]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	20000368 	.word	0x20000368

0800c884 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c888:	4805      	ldr	r0, [pc, #20]	; (800c8a0 <BSP_SD_GetCardState+0x1c>)
 800c88a:	f7fd facd 	bl	8009e28 <HAL_SD_GetCardState>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b04      	cmp	r3, #4
 800c892:	bf14      	ite	ne
 800c894:	2301      	movne	r3, #1
 800c896:	2300      	moveq	r3, #0
 800c898:	b2db      	uxtb	r3, r3
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000368 	.word	0x20000368

0800c8a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	4803      	ldr	r0, [pc, #12]	; (800c8bc <BSP_SD_GetCardInfo+0x18>)
 800c8b0:	f7fd f9d2 	bl	8009c58 <HAL_SD_GetCardInfo>
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20000368 	.word	0x20000368

0800c8c0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c8c8:	f000 f818 	bl	800c8fc <BSP_SD_AbortCallback>
}
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c8dc:	f000 f9a8 	bl	800cc30 <BSP_SD_WriteCpltCallback>
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c8f0:	f000 f9aa 	bl	800cc48 <BSP_SD_ReadCpltCallback>
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	af00      	add	r7, sp, #0

}
 800c900:	bf00      	nop
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c910:	2301      	movs	r3, #1
 800c912:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c914:	f000 f80c 	bl	800c930 <BSP_PlatformIsDetected>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c91e:	2300      	movs	r3, #0
 800c920:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c922:	79fb      	ldrb	r3, [r7, #7]
 800c924:	b2db      	uxtb	r3, r3
}
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
	...

0800c930 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c936:	2301      	movs	r3, #1
 800c938:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c93a:	2180      	movs	r1, #128	; 0x80
 800c93c:	4806      	ldr	r0, [pc, #24]	; (800c958 <BSP_PlatformIsDetected+0x28>)
 800c93e:	f7f7 ffff 	bl	8004940 <HAL_GPIO_ReadPin>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d001      	beq.n	800c94c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c948:	2300      	movs	r3, #0
 800c94a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c94c:	79fb      	ldrb	r3, [r7, #7]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	48000800 	.word	0x48000800

0800c95c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c964:	f7f7 fac8 	bl	8003ef8 <HAL_GetTick>
 800c968:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c96a:	e006      	b.n	800c97a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c96c:	f7ff ff8a 	bl	800c884 <BSP_SD_GetCardState>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d101      	bne.n	800c97a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c976:	2300      	movs	r3, #0
 800c978:	e009      	b.n	800c98e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c97a:	f7f7 fabd 	bl	8003ef8 <HAL_GetTick>
 800c97e:	4602      	mov	r2, r0
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	429a      	cmp	r2, r3
 800c988:	d8f0      	bhi.n	800c96c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c98a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c9a2:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <SD_CheckStatus+0x38>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c9a8:	f7ff ff6c 	bl	800c884 <BSP_SD_GetCardState>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d107      	bne.n	800c9c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c9b2:	4b07      	ldr	r3, [pc, #28]	; (800c9d0 <SD_CheckStatus+0x38>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f023 0301 	bic.w	r3, r3, #1
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	4b04      	ldr	r3, [pc, #16]	; (800c9d0 <SD_CheckStatus+0x38>)
 800c9c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9c2:	4b03      	ldr	r3, [pc, #12]	; (800c9d0 <SD_CheckStatus+0x38>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b2db      	uxtb	r3, r3
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	20000009 	.word	0x20000009

0800c9d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c9de:	f7ff fec7 	bl	800c770 <BSP_SD_Init>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d107      	bne.n	800c9f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff ffd4 	bl	800c998 <SD_CheckStatus>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4b04      	ldr	r3, [pc, #16]	; (800ca08 <SD_initialize+0x34>)
 800c9f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c9f8:	4b03      	ldr	r3, [pc, #12]	; (800ca08 <SD_initialize+0x34>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	20000009 	.word	0x20000009

0800ca0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7ff ffbd 	bl	800c998 <SD_CheckStatus>
 800ca1e:	4603      	mov	r3, r0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	4603      	mov	r3, r0
 800ca36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca3c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca40:	f7ff ff8c 	bl	800c95c <SD_CheckStatusWithTimeout>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da01      	bge.n	800ca4e <SD_read+0x26>
  {
    return res;
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	e03b      	b.n	800cac6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	68b8      	ldr	r0, [r7, #8]
 800ca54:	f7ff feb2 	bl	800c7bc <BSP_SD_ReadBlocks_DMA>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d132      	bne.n	800cac4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <SD_read+0xa8>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ca64:	f7f7 fa48 	bl	8003ef8 <HAL_GetTick>
 800ca68:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ca6a:	bf00      	nop
 800ca6c:	4b18      	ldr	r3, [pc, #96]	; (800cad0 <SD_read+0xa8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d108      	bne.n	800ca86 <SD_read+0x5e>
 800ca74:	f7f7 fa40 	bl	8003ef8 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d9f2      	bls.n	800ca6c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ca86:	4b12      	ldr	r3, [pc, #72]	; (800cad0 <SD_read+0xa8>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	75fb      	strb	r3, [r7, #23]
 800ca92:	e017      	b.n	800cac4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ca94:	4b0e      	ldr	r3, [pc, #56]	; (800cad0 <SD_read+0xa8>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ca9a:	f7f7 fa2d 	bl	8003ef8 <HAL_GetTick>
 800ca9e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800caa0:	e007      	b.n	800cab2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800caa2:	f7ff feef 	bl	800c884 <BSP_SD_GetCardState>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <SD_read+0x8a>
          {
            res = RES_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cab0:	e008      	b.n	800cac4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cab2:	f7f7 fa21 	bl	8003ef8 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	f247 522f 	movw	r2, #29999	; 0x752f
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d9ee      	bls.n	800caa2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20006d30 	.word	0x20006d30

0800cad4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	607a      	str	r2, [r7, #4]
 800cade:	603b      	str	r3, [r7, #0]
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800cae8:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <SD_write+0xa8>)
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800caee:	f247 5030 	movw	r0, #30000	; 0x7530
 800caf2:	f7ff ff33 	bl	800c95c <SD_CheckStatusWithTimeout>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	da01      	bge.n	800cb00 <SD_write+0x2c>
  {
    return res;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	e038      	b.n	800cb72 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	6879      	ldr	r1, [r7, #4]
 800cb04:	68b8      	ldr	r0, [r7, #8]
 800cb06:	f7ff fe8b 	bl	800c820 <BSP_SD_WriteBlocks_DMA>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d12f      	bne.n	800cb70 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cb10:	f7f7 f9f2 	bl	8003ef8 <HAL_GetTick>
 800cb14:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cb16:	bf00      	nop
 800cb18:	4b18      	ldr	r3, [pc, #96]	; (800cb7c <SD_write+0xa8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d108      	bne.n	800cb32 <SD_write+0x5e>
 800cb20:	f7f7 f9ea 	bl	8003ef8 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	f247 522f 	movw	r2, #29999	; 0x752f
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d9f2      	bls.n	800cb18 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800cb32:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <SD_write+0xa8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	75fb      	strb	r3, [r7, #23]
 800cb3e:	e017      	b.n	800cb70 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800cb40:	4b0e      	ldr	r3, [pc, #56]	; (800cb7c <SD_write+0xa8>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cb46:	f7f7 f9d7 	bl	8003ef8 <HAL_GetTick>
 800cb4a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb4c:	e007      	b.n	800cb5e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb4e:	f7ff fe99 	bl	800c884 <BSP_SD_GetCardState>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <SD_write+0x8a>
          {
            res = RES_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	75fb      	strb	r3, [r7, #23]
            break;
 800cb5c:	e008      	b.n	800cb70 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cb5e:	f7f7 f9cb 	bl	8003ef8 <HAL_GetTick>
 800cb62:	4602      	mov	r2, r0
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	f247 522f 	movw	r2, #29999	; 0x752f
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d9ee      	bls.n	800cb4e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20006d2c 	.word	0x20006d2c

0800cb80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08c      	sub	sp, #48	; 0x30
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	603a      	str	r2, [r7, #0]
 800cb8a:	71fb      	strb	r3, [r7, #7]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb96:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <SD_ioctl+0xac>)
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	f003 0301 	and.w	r3, r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <SD_ioctl+0x28>
 800cba4:	2303      	movs	r3, #3
 800cba6:	e03c      	b.n	800cc22 <SD_ioctl+0xa2>

  switch (cmd)
 800cba8:	79bb      	ldrb	r3, [r7, #6]
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	d834      	bhi.n	800cc18 <SD_ioctl+0x98>
 800cbae:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <SD_ioctl+0x34>)
 800cbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb4:	0800cbc5 	.word	0x0800cbc5
 800cbb8:	0800cbcd 	.word	0x0800cbcd
 800cbbc:	0800cbe5 	.word	0x0800cbe5
 800cbc0:	0800cbff 	.word	0x0800cbff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbca:	e028      	b.n	800cc1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fe67 	bl	800c8a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbe2:	e01c      	b.n	800cc1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbe4:	f107 030c 	add.w	r3, r7, #12
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff fe5b 	bl	800c8a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbfc:	e00f      	b.n	800cc1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbfe:	f107 030c 	add.w	r3, r7, #12
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fe4e 	bl	800c8a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	0a5a      	lsrs	r2, r3, #9
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc16:	e002      	b.n	800cc1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc18:	2304      	movs	r3, #4
 800cc1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3730      	adds	r7, #48	; 0x30
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	20000009 	.word	0x20000009

0800cc30 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cc34:	4b03      	ldr	r3, [pc, #12]	; (800cc44 <BSP_SD_WriteCpltCallback+0x14>)
 800cc36:	2201      	movs	r2, #1
 800cc38:	601a      	str	r2, [r3, #0]
}
 800cc3a:	bf00      	nop
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	20006d2c 	.word	0x20006d2c

0800cc48 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cc4c:	4b03      	ldr	r3, [pc, #12]	; (800cc5c <BSP_SD_ReadCpltCallback+0x14>)
 800cc4e:	2201      	movs	r2, #1
 800cc50:	601a      	str	r2, [r3, #0]
}
 800cc52:	bf00      	nop
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	20006d30 	.word	0x20006d30

0800cc60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cc6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cc70:	f005 fc20 	bl	80124b4 <USBD_static_malloc>
 800cc74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d109      	bne.n	800cc90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	32b0      	adds	r2, #176	; 0xb0
 800cc86:	2100      	movs	r1, #0
 800cc88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e0d4      	b.n	800ce3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cc90:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cc94:	2100      	movs	r1, #0
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f006 fbe7 	bl	801346a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	32b0      	adds	r2, #176	; 0xb0
 800cca6:	68f9      	ldr	r1, [r7, #12]
 800cca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	32b0      	adds	r2, #176	; 0xb0
 800ccb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7c1b      	ldrb	r3, [r3, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d138      	bne.n	800cd3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ccc8:	4b5e      	ldr	r3, [pc, #376]	; (800ce44 <USBD_CDC_Init+0x1e4>)
 800ccca:	7819      	ldrb	r1, [r3, #0]
 800cccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f005 f9da 	bl	801208c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ccd8:	4b5a      	ldr	r3, [pc, #360]	; (800ce44 <USBD_CDC_Init+0x1e4>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 020f 	and.w	r2, r3, #15
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	440b      	add	r3, r1
 800ccec:	3324      	adds	r3, #36	; 0x24
 800ccee:	2201      	movs	r2, #1
 800ccf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ccf2:	4b55      	ldr	r3, [pc, #340]	; (800ce48 <USBD_CDC_Init+0x1e8>)
 800ccf4:	7819      	ldrb	r1, [r3, #0]
 800ccf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f005 f9c5 	bl	801208c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd02:	4b51      	ldr	r3, [pc, #324]	; (800ce48 <USBD_CDC_Init+0x1e8>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	f003 020f 	and.w	r2, r3, #15
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	4413      	add	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	440b      	add	r3, r1
 800cd16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd1e:	4b4b      	ldr	r3, [pc, #300]	; (800ce4c <USBD_CDC_Init+0x1ec>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	f003 020f 	and.w	r2, r3, #15
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	440b      	add	r3, r1
 800cd32:	3326      	adds	r3, #38	; 0x26
 800cd34:	2210      	movs	r2, #16
 800cd36:	801a      	strh	r2, [r3, #0]
 800cd38:	e035      	b.n	800cda6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd3a:	4b42      	ldr	r3, [pc, #264]	; (800ce44 <USBD_CDC_Init+0x1e4>)
 800cd3c:	7819      	ldrb	r1, [r3, #0]
 800cd3e:	2340      	movs	r3, #64	; 0x40
 800cd40:	2202      	movs	r2, #2
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f005 f9a2 	bl	801208c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd48:	4b3e      	ldr	r3, [pc, #248]	; (800ce44 <USBD_CDC_Init+0x1e4>)
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	f003 020f 	and.w	r2, r3, #15
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3324      	adds	r3, #36	; 0x24
 800cd5e:	2201      	movs	r2, #1
 800cd60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd62:	4b39      	ldr	r3, [pc, #228]	; (800ce48 <USBD_CDC_Init+0x1e8>)
 800cd64:	7819      	ldrb	r1, [r3, #0]
 800cd66:	2340      	movs	r3, #64	; 0x40
 800cd68:	2202      	movs	r2, #2
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f005 f98e 	bl	801208c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd70:	4b35      	ldr	r3, [pc, #212]	; (800ce48 <USBD_CDC_Init+0x1e8>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 020f 	and.w	r2, r3, #15
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd88:	2201      	movs	r2, #1
 800cd8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cd8c:	4b2f      	ldr	r3, [pc, #188]	; (800ce4c <USBD_CDC_Init+0x1ec>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	f003 020f 	and.w	r2, r3, #15
 800cd94:	6879      	ldr	r1, [r7, #4]
 800cd96:	4613      	mov	r3, r2
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4413      	add	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	440b      	add	r3, r1
 800cda0:	3326      	adds	r3, #38	; 0x26
 800cda2:	2210      	movs	r2, #16
 800cda4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cda6:	4b29      	ldr	r3, [pc, #164]	; (800ce4c <USBD_CDC_Init+0x1ec>)
 800cda8:	7819      	ldrb	r1, [r3, #0]
 800cdaa:	2308      	movs	r3, #8
 800cdac:	2203      	movs	r2, #3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f005 f96c 	bl	801208c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cdb4:	4b25      	ldr	r3, [pc, #148]	; (800ce4c <USBD_CDC_Init+0x1ec>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	f003 020f 	and.w	r2, r3, #15
 800cdbc:	6879      	ldr	r1, [r7, #4]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3324      	adds	r3, #36	; 0x24
 800cdca:	2201      	movs	r2, #1
 800cdcc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	33b0      	adds	r3, #176	; 0xb0
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ce04:	2302      	movs	r3, #2
 800ce06:	e018      	b.n	800ce3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7c1b      	ldrb	r3, [r3, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10a      	bne.n	800ce26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce10:	4b0d      	ldr	r3, [pc, #52]	; (800ce48 <USBD_CDC_Init+0x1e8>)
 800ce12:	7819      	ldrb	r1, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f005 faae 	bl	8012380 <USBD_LL_PrepareReceive>
 800ce24:	e008      	b.n	800ce38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce26:	4b08      	ldr	r3, [pc, #32]	; (800ce48 <USBD_CDC_Init+0x1e8>)
 800ce28:	7819      	ldrb	r1, [r3, #0]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce30:	2340      	movs	r3, #64	; 0x40
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f005 faa4 	bl	8012380 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20000093 	.word	0x20000093
 800ce48:	20000094 	.word	0x20000094
 800ce4c:	20000095 	.word	0x20000095

0800ce50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ce5c:	4b3a      	ldr	r3, [pc, #232]	; (800cf48 <USBD_CDC_DeInit+0xf8>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f005 f950 	bl	8012108 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ce68:	4b37      	ldr	r3, [pc, #220]	; (800cf48 <USBD_CDC_DeInit+0xf8>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	f003 020f 	and.w	r2, r3, #15
 800ce70:	6879      	ldr	r1, [r7, #4]
 800ce72:	4613      	mov	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	4413      	add	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	440b      	add	r3, r1
 800ce7c:	3324      	adds	r3, #36	; 0x24
 800ce7e:	2200      	movs	r2, #0
 800ce80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ce82:	4b32      	ldr	r3, [pc, #200]	; (800cf4c <USBD_CDC_DeInit+0xfc>)
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f005 f93d 	bl	8012108 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ce8e:	4b2f      	ldr	r3, [pc, #188]	; (800cf4c <USBD_CDC_DeInit+0xfc>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 020f 	and.w	r2, r3, #15
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cea6:	2200      	movs	r2, #0
 800cea8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ceaa:	4b29      	ldr	r3, [pc, #164]	; (800cf50 <USBD_CDC_DeInit+0x100>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f005 f929 	bl	8012108 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ceb6:	4b26      	ldr	r3, [pc, #152]	; (800cf50 <USBD_CDC_DeInit+0x100>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	f003 020f 	and.w	r2, r3, #15
 800cebe:	6879      	ldr	r1, [r7, #4]
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	440b      	add	r3, r1
 800ceca:	3324      	adds	r3, #36	; 0x24
 800cecc:	2200      	movs	r2, #0
 800cece:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ced0:	4b1f      	ldr	r3, [pc, #124]	; (800cf50 <USBD_CDC_DeInit+0x100>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	f003 020f 	and.w	r2, r3, #15
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	4613      	mov	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	440b      	add	r3, r1
 800cee4:	3326      	adds	r3, #38	; 0x26
 800cee6:	2200      	movs	r2, #0
 800cee8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	32b0      	adds	r2, #176	; 0xb0
 800cef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01f      	beq.n	800cf3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	33b0      	adds	r3, #176	; 0xb0
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	32b0      	adds	r2, #176	; 0xb0
 800cf1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f005 fad6 	bl	80124d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	32b0      	adds	r2, #176	; 0xb0
 800cf2e:	2100      	movs	r1, #0
 800cf30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20000093 	.word	0x20000093
 800cf4c:	20000094 	.word	0x20000094
 800cf50:	20000095 	.word	0x20000095

0800cf54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	32b0      	adds	r2, #176	; 0xb0
 800cf68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cf72:	2300      	movs	r3, #0
 800cf74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e0bf      	b.n	800d104 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d050      	beq.n	800d032 <USBD_CDC_Setup+0xde>
 800cf90:	2b20      	cmp	r3, #32
 800cf92:	f040 80af 	bne.w	800d0f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	88db      	ldrh	r3, [r3, #6]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d03a      	beq.n	800d014 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	b25b      	sxtb	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	da1b      	bge.n	800cfe0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	33b0      	adds	r3, #176	; 0xb0
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cfbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	88d2      	ldrh	r2, [r2, #6]
 800cfc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	88db      	ldrh	r3, [r3, #6]
 800cfca:	2b07      	cmp	r3, #7
 800cfcc:	bf28      	it	cs
 800cfce:	2307      	movcs	r3, #7
 800cfd0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	89fa      	ldrh	r2, [r7, #14]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f001 fd73 	bl	800eac4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cfde:	e090      	b.n	800d102 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	785a      	ldrb	r2, [r3, #1]
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88db      	ldrh	r3, [r3, #6]
 800cfee:	2b3f      	cmp	r3, #63	; 0x3f
 800cff0:	d803      	bhi.n	800cffa <USBD_CDC_Setup+0xa6>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	88db      	ldrh	r3, [r3, #6]
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	e000      	b.n	800cffc <USBD_CDC_Setup+0xa8>
 800cffa:	2240      	movs	r2, #64	; 0x40
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d002:	6939      	ldr	r1, [r7, #16]
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d00a:	461a      	mov	r2, r3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f001 fd85 	bl	800eb1c <USBD_CtlPrepareRx>
      break;
 800d012:	e076      	b.n	800d102 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	33b0      	adds	r3, #176	; 0xb0
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	7850      	ldrb	r0, [r2, #1]
 800d02a:	2200      	movs	r2, #0
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	4798      	blx	r3
      break;
 800d030:	e067      	b.n	800d102 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	785b      	ldrb	r3, [r3, #1]
 800d036:	2b0b      	cmp	r3, #11
 800d038:	d851      	bhi.n	800d0de <USBD_CDC_Setup+0x18a>
 800d03a:	a201      	add	r2, pc, #4	; (adr r2, 800d040 <USBD_CDC_Setup+0xec>)
 800d03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d040:	0800d071 	.word	0x0800d071
 800d044:	0800d0ed 	.word	0x0800d0ed
 800d048:	0800d0df 	.word	0x0800d0df
 800d04c:	0800d0df 	.word	0x0800d0df
 800d050:	0800d0df 	.word	0x0800d0df
 800d054:	0800d0df 	.word	0x0800d0df
 800d058:	0800d0df 	.word	0x0800d0df
 800d05c:	0800d0df 	.word	0x0800d0df
 800d060:	0800d0df 	.word	0x0800d0df
 800d064:	0800d0df 	.word	0x0800d0df
 800d068:	0800d09b 	.word	0x0800d09b
 800d06c:	0800d0c5 	.word	0x0800d0c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d076:	b2db      	uxtb	r3, r3
 800d078:	2b03      	cmp	r3, #3
 800d07a:	d107      	bne.n	800d08c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d07c:	f107 030a 	add.w	r3, r7, #10
 800d080:	2202      	movs	r2, #2
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f001 fd1d 	bl	800eac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d08a:	e032      	b.n	800d0f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f001 fca7 	bl	800e9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d094:	2303      	movs	r3, #3
 800d096:	75fb      	strb	r3, [r7, #23]
          break;
 800d098:	e02b      	b.n	800d0f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d107      	bne.n	800d0b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d0a6:	f107 030d 	add.w	r3, r7, #13
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 fd08 	bl	800eac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0b4:	e01d      	b.n	800d0f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f001 fc92 	bl	800e9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0be:	2303      	movs	r3, #3
 800d0c0:	75fb      	strb	r3, [r7, #23]
          break;
 800d0c2:	e016      	b.n	800d0f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d00f      	beq.n	800d0f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f001 fc85 	bl	800e9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d0dc:	e008      	b.n	800d0f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f001 fc7e 	bl	800e9e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	75fb      	strb	r3, [r7, #23]
          break;
 800d0ea:	e002      	b.n	800d0f2 <USBD_CDC_Setup+0x19e>
          break;
 800d0ec:	bf00      	nop
 800d0ee:	e008      	b.n	800d102 <USBD_CDC_Setup+0x1ae>
          break;
 800d0f0:	bf00      	nop
      }
      break;
 800d0f2:	e006      	b.n	800d102 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f001 fc73 	bl	800e9e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800d100:	bf00      	nop
  }

  return (uint8_t)ret;
 800d102:	7dfb      	ldrb	r3, [r7, #23]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d11e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	32b0      	adds	r2, #176	; 0xb0
 800d12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d132:	2303      	movs	r3, #3
 800d134:	e065      	b.n	800d202 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	32b0      	adds	r2, #176	; 0xb0
 800d140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d144:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	f003 020f 	and.w	r2, r3, #15
 800d14c:	6879      	ldr	r1, [r7, #4]
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	440b      	add	r3, r1
 800d158:	3318      	adds	r3, #24
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d02f      	beq.n	800d1c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d160:	78fb      	ldrb	r3, [r7, #3]
 800d162:	f003 020f 	and.w	r2, r3, #15
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	4613      	mov	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4413      	add	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	440b      	add	r3, r1
 800d172:	3318      	adds	r3, #24
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	78fb      	ldrb	r3, [r7, #3]
 800d178:	f003 010f 	and.w	r1, r3, #15
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	460b      	mov	r3, r1
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	440b      	add	r3, r1
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	4403      	add	r3, r0
 800d188:	3344      	adds	r3, #68	; 0x44
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d190:	fb01 f303 	mul.w	r3, r1, r3
 800d194:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d196:	2b00      	cmp	r3, #0
 800d198:	d112      	bne.n	800d1c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d19a:	78fb      	ldrb	r3, [r7, #3]
 800d19c:	f003 020f 	and.w	r2, r3, #15
 800d1a0:	6879      	ldr	r1, [r7, #4]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4413      	add	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	440b      	add	r3, r1
 800d1ac:	3318      	adds	r3, #24
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1b2:	78f9      	ldrb	r1, [r7, #3]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f005 f8a9 	bl	8012310 <USBD_LL_Transmit>
 800d1be:	e01f      	b.n	800d200 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	33b0      	adds	r3, #176	; 0xb0
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d010      	beq.n	800d200 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	33b0      	adds	r3, #176	; 0xb0
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d1fc:	78fa      	ldrb	r2, [r7, #3]
 800d1fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	460b      	mov	r3, r1
 800d214:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	32b0      	adds	r2, #176	; 0xb0
 800d220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d224:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	32b0      	adds	r2, #176	; 0xb0
 800d230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d238:	2303      	movs	r3, #3
 800d23a:	e01a      	b.n	800d272 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f005 f8d5 	bl	80123f0 <USBD_LL_GetRxDataSize>
 800d246:	4602      	mov	r2, r0
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	33b0      	adds	r3, #176	; 0xb0
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4413      	add	r3, r2
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d26c:	4611      	mov	r1, r2
 800d26e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	32b0      	adds	r2, #176	; 0xb0
 800d28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d290:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d298:	2303      	movs	r3, #3
 800d29a:	e025      	b.n	800d2e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	33b0      	adds	r3, #176	; 0xb0
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d01a      	beq.n	800d2e6 <USBD_CDC_EP0_RxReady+0x6c>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d2b6:	2bff      	cmp	r3, #255	; 0xff
 800d2b8:	d015      	beq.n	800d2e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	33b0      	adds	r3, #176	; 0xb0
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d2d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2da:	b292      	uxth	r2, r2
 800d2dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	22ff      	movs	r2, #255	; 0xff
 800d2e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d2f8:	2182      	movs	r1, #130	; 0x82
 800d2fa:	4818      	ldr	r0, [pc, #96]	; (800d35c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d2fc:	f000 fd0f 	bl	800dd1e <USBD_GetEpDesc>
 800d300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d302:	2101      	movs	r1, #1
 800d304:	4815      	ldr	r0, [pc, #84]	; (800d35c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d306:	f000 fd0a 	bl	800dd1e <USBD_GetEpDesc>
 800d30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d30c:	2181      	movs	r1, #129	; 0x81
 800d30e:	4813      	ldr	r0, [pc, #76]	; (800d35c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d310:	f000 fd05 	bl	800dd1e <USBD_GetEpDesc>
 800d314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2210      	movs	r2, #16
 800d320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d330:	711a      	strb	r2, [r3, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d344:	711a      	strb	r2, [r3, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2243      	movs	r2, #67	; 0x43
 800d34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d350:	4b02      	ldr	r3, [pc, #8]	; (800d35c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	20000050 	.word	0x20000050

0800d360 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d368:	2182      	movs	r1, #130	; 0x82
 800d36a:	4818      	ldr	r0, [pc, #96]	; (800d3cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d36c:	f000 fcd7 	bl	800dd1e <USBD_GetEpDesc>
 800d370:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d372:	2101      	movs	r1, #1
 800d374:	4815      	ldr	r0, [pc, #84]	; (800d3cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d376:	f000 fcd2 	bl	800dd1e <USBD_GetEpDesc>
 800d37a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d37c:	2181      	movs	r1, #129	; 0x81
 800d37e:	4813      	ldr	r0, [pc, #76]	; (800d3cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d380:	f000 fccd 	bl	800dd1e <USBD_GetEpDesc>
 800d384:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	2210      	movs	r2, #16
 800d390:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d006      	beq.n	800d3a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	2200      	movs	r2, #0
 800d39c:	711a      	strb	r2, [r3, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f042 0202 	orr.w	r2, r2, #2
 800d3a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d006      	beq.n	800d3ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	711a      	strb	r2, [r3, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f042 0202 	orr.w	r2, r2, #2
 800d3b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2243      	movs	r2, #67	; 0x43
 800d3be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3c0:	4b02      	ldr	r3, [pc, #8]	; (800d3cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20000050 	.word	0x20000050

0800d3d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3d8:	2182      	movs	r1, #130	; 0x82
 800d3da:	4818      	ldr	r0, [pc, #96]	; (800d43c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3dc:	f000 fc9f 	bl	800dd1e <USBD_GetEpDesc>
 800d3e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	4815      	ldr	r0, [pc, #84]	; (800d43c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3e6:	f000 fc9a 	bl	800dd1e <USBD_GetEpDesc>
 800d3ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3ec:	2181      	movs	r1, #129	; 0x81
 800d3ee:	4813      	ldr	r0, [pc, #76]	; (800d43c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3f0:	f000 fc95 	bl	800dd1e <USBD_GetEpDesc>
 800d3f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2210      	movs	r2, #16
 800d400:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d006      	beq.n	800d416 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d410:	711a      	strb	r2, [r3, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d006      	beq.n	800d42a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d424:	711a      	strb	r2, [r3, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2243      	movs	r2, #67	; 0x43
 800d42e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d430:	4b02      	ldr	r3, [pc, #8]	; (800d43c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	20000050 	.word	0x20000050

0800d440 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	220a      	movs	r2, #10
 800d44c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d44e:	4b03      	ldr	r3, [pc, #12]	; (800d45c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	2000000c 	.word	0x2000000c

0800d460 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d470:	2303      	movs	r3, #3
 800d472:	e009      	b.n	800d488 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	33b0      	adds	r3, #176	; 0xb0
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d494:	b480      	push	{r7}
 800d496:	b087      	sub	sp, #28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	32b0      	adds	r2, #176	; 0xb0
 800d4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	e008      	b.n	800d4cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	371c      	adds	r7, #28
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	32b0      	adds	r2, #176	; 0xb0
 800d4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e004      	b.n	800d506 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
	...

0800d514 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	32b0      	adds	r2, #176	; 0xb0
 800d526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	32b0      	adds	r2, #176	; 0xb0
 800d536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d53e:	2303      	movs	r3, #3
 800d540:	e018      	b.n	800d574 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	7c1b      	ldrb	r3, [r3, #16]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10a      	bne.n	800d560 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d54a:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <USBD_CDC_ReceivePacket+0x68>)
 800d54c:	7819      	ldrb	r1, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d554:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f004 ff11 	bl	8012380 <USBD_LL_PrepareReceive>
 800d55e:	e008      	b.n	800d572 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d560:	4b06      	ldr	r3, [pc, #24]	; (800d57c <USBD_CDC_ReceivePacket+0x68>)
 800d562:	7819      	ldrb	r1, [r3, #0]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d56a:	2340      	movs	r3, #64	; 0x40
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f004 ff07 	bl	8012380 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	20000094 	.word	0x20000094

0800d580 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	4613      	mov	r3, r2
 800d58c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d594:	2303      	movs	r3, #3
 800d596:	e01f      	b.n	800d5d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	79fa      	ldrb	r2, [r7, #7]
 800d5ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f004 fcdf 	bl	8011f90 <USBD_LL_Init>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d101      	bne.n	800d5f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e025      	b.n	800d644 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	32ae      	adds	r2, #174	; 0xae
 800d60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00f      	beq.n	800d634 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	32ae      	adds	r2, #174	; 0xae
 800d61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	f107 020e 	add.w	r2, r7, #14
 800d628:	4610      	mov	r0, r2
 800d62a:	4798      	blx	r3
 800d62c:	4602      	mov	r2, r0
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f004 fce7 	bl	8012028 <USBD_LL_Start>
 800d65a:	4603      	mov	r3, r0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d66c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d690:	2b00      	cmp	r3, #0
 800d692:	d009      	beq.n	800d6a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	78fa      	ldrb	r2, [r7, #3]
 800d69e:	4611      	mov	r1, r2
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	4798      	blx	r3
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b084      	sub	sp, #16
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	78fa      	ldrb	r2, [r7, #3]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	4798      	blx	r3
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f001 f938 	bl	800e96e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2201      	movs	r2, #1
 800d702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d70c:	461a      	mov	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d71a:	f003 031f 	and.w	r3, r3, #31
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d01a      	beq.n	800d758 <USBD_LL_SetupStage+0x72>
 800d722:	2b02      	cmp	r3, #2
 800d724:	d822      	bhi.n	800d76c <USBD_LL_SetupStage+0x86>
 800d726:	2b00      	cmp	r3, #0
 800d728:	d002      	beq.n	800d730 <USBD_LL_SetupStage+0x4a>
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d00a      	beq.n	800d744 <USBD_LL_SetupStage+0x5e>
 800d72e:	e01d      	b.n	800d76c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fb65 	bl	800de08 <USBD_StdDevReq>
 800d73e:	4603      	mov	r3, r0
 800d740:	73fb      	strb	r3, [r7, #15]
      break;
 800d742:	e020      	b.n	800d786 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fbcd 	bl	800deec <USBD_StdItfReq>
 800d752:	4603      	mov	r3, r0
 800d754:	73fb      	strb	r3, [r7, #15]
      break;
 800d756:	e016      	b.n	800d786 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fc2f 	bl	800dfc4 <USBD_StdEPReq>
 800d766:	4603      	mov	r3, r0
 800d768:	73fb      	strb	r3, [r7, #15]
      break;
 800d76a:	e00c      	b.n	800d786 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d772:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d776:	b2db      	uxtb	r3, r3
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f004 fcfa 	bl	8012174 <USBD_LL_StallEP>
 800d780:	4603      	mov	r3, r0
 800d782:	73fb      	strb	r3, [r7, #15]
      break;
 800d784:	bf00      	nop
  }

  return ret;
 800d786:	7bfb      	ldrb	r3, [r7, #15]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	460b      	mov	r3, r1
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d7a2:	7afb      	ldrb	r3, [r7, #11]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d16e      	bne.n	800d886 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d7ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	f040 8098 	bne.w	800d8ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	689a      	ldr	r2, [r3, #8]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d913      	bls.n	800d7f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	1ad2      	subs	r2, r2, r3
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	68da      	ldr	r2, [r3, #12]
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	bf28      	it	cs
 800d7e2:	4613      	movcs	r3, r2
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f001 f9b4 	bl	800eb56 <USBD_CtlContinueRx>
 800d7ee:	e07d      	b.n	800d8ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d7f6:	f003 031f 	and.w	r3, r3, #31
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d014      	beq.n	800d828 <USBD_LL_DataOutStage+0x98>
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d81d      	bhi.n	800d83e <USBD_LL_DataOutStage+0xae>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <USBD_LL_DataOutStage+0x7c>
 800d806:	2b01      	cmp	r3, #1
 800d808:	d003      	beq.n	800d812 <USBD_LL_DataOutStage+0x82>
 800d80a:	e018      	b.n	800d83e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	75bb      	strb	r3, [r7, #22]
            break;
 800d810:	e018      	b.n	800d844 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	4619      	mov	r1, r3
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f000 fa64 	bl	800dcea <USBD_CoreFindIF>
 800d822:	4603      	mov	r3, r0
 800d824:	75bb      	strb	r3, [r7, #22]
            break;
 800d826:	e00d      	b.n	800d844 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	4619      	mov	r1, r3
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f000 fa66 	bl	800dd04 <USBD_CoreFindEP>
 800d838:	4603      	mov	r3, r0
 800d83a:	75bb      	strb	r3, [r7, #22]
            break;
 800d83c:	e002      	b.n	800d844 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d83e:	2300      	movs	r3, #0
 800d840:	75bb      	strb	r3, [r7, #22]
            break;
 800d842:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d844:	7dbb      	ldrb	r3, [r7, #22]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d119      	bne.n	800d87e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b03      	cmp	r3, #3
 800d854:	d113      	bne.n	800d87e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d856:	7dba      	ldrb	r2, [r7, #22]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	32ae      	adds	r2, #174	; 0xae
 800d85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00b      	beq.n	800d87e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d866:	7dba      	ldrb	r2, [r7, #22]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d86e:	7dba      	ldrb	r2, [r7, #22]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	32ae      	adds	r2, #174	; 0xae
 800d874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d878:	691b      	ldr	r3, [r3, #16]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f001 f97a 	bl	800eb78 <USBD_CtlSendStatus>
 800d884:	e032      	b.n	800d8ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d886:	7afb      	ldrb	r3, [r7, #11]
 800d888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	4619      	mov	r1, r3
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 fa37 	bl	800dd04 <USBD_CoreFindEP>
 800d896:	4603      	mov	r3, r0
 800d898:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d89a:	7dbb      	ldrb	r3, [r7, #22]
 800d89c:	2bff      	cmp	r3, #255	; 0xff
 800d89e:	d025      	beq.n	800d8ec <USBD_LL_DataOutStage+0x15c>
 800d8a0:	7dbb      	ldrb	r3, [r7, #22]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d122      	bne.n	800d8ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d117      	bne.n	800d8e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d8b2:	7dba      	ldrb	r2, [r7, #22]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	32ae      	adds	r2, #174	; 0xae
 800d8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00f      	beq.n	800d8e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d8c2:	7dba      	ldrb	r2, [r7, #22]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d8ca:	7dba      	ldrb	r2, [r7, #22]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	32ae      	adds	r2, #174	; 0xae
 800d8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	7afa      	ldrb	r2, [r7, #11]
 800d8d8:	4611      	mov	r1, r2
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	4798      	blx	r3
 800d8de:	4603      	mov	r3, r0
 800d8e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d8e2:	7dfb      	ldrb	r3, [r7, #23]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ea:	e000      	b.n	800d8ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b086      	sub	sp, #24
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	460b      	mov	r3, r1
 800d900:	607a      	str	r2, [r7, #4]
 800d902:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d904:	7afb      	ldrb	r3, [r7, #11]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d16f      	bne.n	800d9ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	3314      	adds	r3, #20
 800d90e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d916:	2b02      	cmp	r3, #2
 800d918:	d15a      	bne.n	800d9d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	689a      	ldr	r2, [r3, #8]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	429a      	cmp	r2, r3
 800d924:	d914      	bls.n	800d950 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	689a      	ldr	r2, [r3, #8]
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	1ad2      	subs	r2, r2, r3
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	461a      	mov	r2, r3
 800d93a:	6879      	ldr	r1, [r7, #4]
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f001 f8dc 	bl	800eafa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d942:	2300      	movs	r3, #0
 800d944:	2200      	movs	r2, #0
 800d946:	2100      	movs	r1, #0
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f004 fd19 	bl	8012380 <USBD_LL_PrepareReceive>
 800d94e:	e03f      	b.n	800d9d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d11c      	bne.n	800d996 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d964:	429a      	cmp	r2, r3
 800d966:	d316      	bcc.n	800d996 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d972:	429a      	cmp	r2, r3
 800d974:	d20f      	bcs.n	800d996 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d976:	2200      	movs	r2, #0
 800d978:	2100      	movs	r1, #0
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f001 f8bd 	bl	800eafa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d988:	2300      	movs	r3, #0
 800d98a:	2200      	movs	r2, #0
 800d98c:	2100      	movs	r1, #0
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f004 fcf6 	bl	8012380 <USBD_LL_PrepareReceive>
 800d994:	e01c      	b.n	800d9d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d10f      	bne.n	800d9c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d009      	beq.n	800d9c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9c2:	2180      	movs	r1, #128	; 0x80
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f004 fbd5 	bl	8012174 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f001 f8e7 	bl	800eb9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d03a      	beq.n	800da50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7ff fe42 	bl	800d664 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d9e8:	e032      	b.n	800da50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f000 f985 	bl	800dd04 <USBD_CoreFindEP>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
 800da00:	2bff      	cmp	r3, #255	; 0xff
 800da02:	d025      	beq.n	800da50 <USBD_LL_DataInStage+0x15a>
 800da04:	7dfb      	ldrb	r3, [r7, #23]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d122      	bne.n	800da50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b03      	cmp	r3, #3
 800da14:	d11c      	bne.n	800da50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800da16:	7dfa      	ldrb	r2, [r7, #23]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	32ae      	adds	r2, #174	; 0xae
 800da1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d014      	beq.n	800da50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800da26:	7dfa      	ldrb	r2, [r7, #23]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800da2e:	7dfa      	ldrb	r2, [r7, #23]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	32ae      	adds	r2, #174	; 0xae
 800da34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da38:	695b      	ldr	r3, [r3, #20]
 800da3a:	7afa      	ldrb	r2, [r7, #11]
 800da3c:	4611      	mov	r1, r2
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	4798      	blx	r3
 800da42:	4603      	mov	r3, r0
 800da44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800da46:	7dbb      	ldrb	r3, [r7, #22]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d001      	beq.n	800da50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800da4c:	7dbb      	ldrb	r3, [r7, #22]
 800da4e:	e000      	b.n	800da52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b084      	sub	sp, #16
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da92:	2b00      	cmp	r3, #0
 800da94:	d014      	beq.n	800dac0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00e      	beq.n	800dac0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	6852      	ldr	r2, [r2, #4]
 800daae:	b2d2      	uxtb	r2, r2
 800dab0:	4611      	mov	r1, r2
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	4798      	blx	r3
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dabc:	2303      	movs	r3, #3
 800dabe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dac0:	2340      	movs	r3, #64	; 0x40
 800dac2:	2200      	movs	r2, #0
 800dac4:	2100      	movs	r1, #0
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f004 fae0 	bl	801208c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2240      	movs	r2, #64	; 0x40
 800dad8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dadc:	2340      	movs	r3, #64	; 0x40
 800dade:	2200      	movs	r2, #0
 800dae0:	2180      	movs	r1, #128	; 0x80
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f004 fad2 	bl	801208c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2240      	movs	r2, #64	; 0x40
 800daf2:	621a      	str	r2, [r3, #32]

  return ret;
 800daf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dafe:	b480      	push	{r7}
 800db00:	b083      	sub	sp, #12
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	460b      	mov	r3, r1
 800db08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	78fa      	ldrb	r2, [r7, #3]
 800db0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800db1e:	b480      	push	{r7}
 800db20:	b083      	sub	sp, #12
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	2b04      	cmp	r3, #4
 800db30:	d006      	beq.n	800db40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2204      	movs	r2, #4
 800db44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b04      	cmp	r3, #4
 800db68:	d106      	bne.n	800db78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800db70:	b2da      	uxtb	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b03      	cmp	r3, #3
 800db98:	d110      	bne.n	800dbbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00b      	beq.n	800dbbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbaa:	69db      	ldr	r3, [r3, #28]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d005      	beq.n	800dbbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbb6:	69db      	ldr	r3, [r3, #28]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b082      	sub	sp, #8
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	460b      	mov	r3, r1
 800dbd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	32ae      	adds	r2, #174	; 0xae
 800dbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d101      	bne.n	800dbe8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	e01c      	b.n	800dc22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d115      	bne.n	800dc20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	32ae      	adds	r2, #174	; 0xae
 800dbfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00b      	beq.n	800dc20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	32ae      	adds	r2, #174	; 0xae
 800dc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc16:	6a1b      	ldr	r3, [r3, #32]
 800dc18:	78fa      	ldrb	r2, [r7, #3]
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b082      	sub	sp, #8
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	460b      	mov	r3, r1
 800dc34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	32ae      	adds	r2, #174	; 0xae
 800dc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d101      	bne.n	800dc4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	e01c      	b.n	800dc86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d115      	bne.n	800dc84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	32ae      	adds	r2, #174	; 0xae
 800dc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00b      	beq.n	800dc84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	32ae      	adds	r2, #174	; 0xae
 800dc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7c:	78fa      	ldrb	r2, [r7, #3]
 800dc7e:	4611      	mov	r1, r2
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00e      	beq.n	800dce0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	6852      	ldr	r2, [r2, #4]
 800dcce:	b2d2      	uxtb	r2, r2
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	4798      	blx	r3
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dcdc:	2303      	movs	r3, #3
 800dcde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dcf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b086      	sub	sp, #24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
 800dd26:	460b      	mov	r3, r1
 800dd28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	885b      	ldrh	r3, [r3, #2]
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d920      	bls.n	800dd88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dd4e:	e013      	b.n	800dd78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dd50:	f107 030a 	add.w	r3, r7, #10
 800dd54:	4619      	mov	r1, r3
 800dd56:	6978      	ldr	r0, [r7, #20]
 800dd58:	f000 f81b 	bl	800dd92 <USBD_GetNextDesc>
 800dd5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	785b      	ldrb	r3, [r3, #1]
 800dd62:	2b05      	cmp	r3, #5
 800dd64:	d108      	bne.n	800dd78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	789b      	ldrb	r3, [r3, #2]
 800dd6e:	78fa      	ldrb	r2, [r7, #3]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d008      	beq.n	800dd86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dd74:	2300      	movs	r3, #0
 800dd76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	885b      	ldrh	r3, [r3, #2]
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	897b      	ldrh	r3, [r7, #10]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d8e5      	bhi.n	800dd50 <USBD_GetEpDesc+0x32>
 800dd84:	e000      	b.n	800dd88 <USBD_GetEpDesc+0x6a>
          break;
 800dd86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dd88:	693b      	ldr	r3, [r7, #16]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3718      	adds	r7, #24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b085      	sub	sp, #20
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	881a      	ldrh	r2, [r3, #0]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	4413      	add	r3, r2
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4413      	add	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b087      	sub	sp, #28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	3301      	adds	r3, #1
 800dde2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ddea:	8a3b      	ldrh	r3, [r7, #16]
 800ddec:	021b      	lsls	r3, r3, #8
 800ddee:	b21a      	sxth	r2, r3
 800ddf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	b21b      	sxth	r3, r3
 800ddf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ddfa:	89fb      	ldrh	r3, [r7, #14]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	371c      	adds	r7, #28
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de1e:	2b40      	cmp	r3, #64	; 0x40
 800de20:	d005      	beq.n	800de2e <USBD_StdDevReq+0x26>
 800de22:	2b40      	cmp	r3, #64	; 0x40
 800de24:	d857      	bhi.n	800ded6 <USBD_StdDevReq+0xce>
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00f      	beq.n	800de4a <USBD_StdDevReq+0x42>
 800de2a:	2b20      	cmp	r3, #32
 800de2c:	d153      	bne.n	800ded6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	32ae      	adds	r2, #174	; 0xae
 800de38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	4798      	blx	r3
 800de44:	4603      	mov	r3, r0
 800de46:	73fb      	strb	r3, [r7, #15]
      break;
 800de48:	e04a      	b.n	800dee0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	785b      	ldrb	r3, [r3, #1]
 800de4e:	2b09      	cmp	r3, #9
 800de50:	d83b      	bhi.n	800deca <USBD_StdDevReq+0xc2>
 800de52:	a201      	add	r2, pc, #4	; (adr r2, 800de58 <USBD_StdDevReq+0x50>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800dead 	.word	0x0800dead
 800de5c:	0800dec1 	.word	0x0800dec1
 800de60:	0800decb 	.word	0x0800decb
 800de64:	0800deb7 	.word	0x0800deb7
 800de68:	0800decb 	.word	0x0800decb
 800de6c:	0800de8b 	.word	0x0800de8b
 800de70:	0800de81 	.word	0x0800de81
 800de74:	0800decb 	.word	0x0800decb
 800de78:	0800dea3 	.word	0x0800dea3
 800de7c:	0800de95 	.word	0x0800de95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fa3c 	bl	800e300 <USBD_GetDescriptor>
          break;
 800de88:	e024      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 fbcb 	bl	800e628 <USBD_SetAddress>
          break;
 800de92:	e01f      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fc0a 	bl	800e6b0 <USBD_SetConfig>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73fb      	strb	r3, [r7, #15]
          break;
 800dea0:	e018      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fcad 	bl	800e804 <USBD_GetConfig>
          break;
 800deaa:	e013      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800deac:	6839      	ldr	r1, [r7, #0]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 fcde 	bl	800e870 <USBD_GetStatus>
          break;
 800deb4:	e00e      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fd0d 	bl	800e8d8 <USBD_SetFeature>
          break;
 800debe:	e009      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fd31 	bl	800e92a <USBD_ClrFeature>
          break;
 800dec8:	e004      	b.n	800ded4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fd88 	bl	800e9e2 <USBD_CtlError>
          break;
 800ded2:	bf00      	nop
      }
      break;
 800ded4:	e004      	b.n	800dee0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fd82 	bl	800e9e2 <USBD_CtlError>
      break;
 800dede:	bf00      	nop
  }

  return ret;
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop

0800deec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800def6:	2300      	movs	r3, #0
 800def8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df02:	2b40      	cmp	r3, #64	; 0x40
 800df04:	d005      	beq.n	800df12 <USBD_StdItfReq+0x26>
 800df06:	2b40      	cmp	r3, #64	; 0x40
 800df08:	d852      	bhi.n	800dfb0 <USBD_StdItfReq+0xc4>
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <USBD_StdItfReq+0x26>
 800df0e:	2b20      	cmp	r3, #32
 800df10:	d14e      	bne.n	800dfb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	3b01      	subs	r3, #1
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d840      	bhi.n	800dfa2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	889b      	ldrh	r3, [r3, #4]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b01      	cmp	r3, #1
 800df28:	d836      	bhi.n	800df98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	889b      	ldrh	r3, [r3, #4]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7ff fed9 	bl	800dcea <USBD_CoreFindIF>
 800df38:	4603      	mov	r3, r0
 800df3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	2bff      	cmp	r3, #255	; 0xff
 800df40:	d01d      	beq.n	800df7e <USBD_StdItfReq+0x92>
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d11a      	bne.n	800df7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800df48:	7bba      	ldrb	r2, [r7, #14]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	32ae      	adds	r2, #174	; 0xae
 800df4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00f      	beq.n	800df78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800df58:	7bba      	ldrb	r2, [r7, #14]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df60:	7bba      	ldrb	r2, [r7, #14]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	32ae      	adds	r2, #174	; 0xae
 800df66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	4798      	blx	r3
 800df72:	4603      	mov	r3, r0
 800df74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df76:	e004      	b.n	800df82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800df78:	2303      	movs	r3, #3
 800df7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df7c:	e001      	b.n	800df82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800df7e:	2303      	movs	r3, #3
 800df80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	88db      	ldrh	r3, [r3, #6]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d110      	bne.n	800dfac <USBD_StdItfReq+0xc0>
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10d      	bne.n	800dfac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 fdf1 	bl	800eb78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800df96:	e009      	b.n	800dfac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fd21 	bl	800e9e2 <USBD_CtlError>
          break;
 800dfa0:	e004      	b.n	800dfac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fd1c 	bl	800e9e2 <USBD_CtlError>
          break;
 800dfaa:	e000      	b.n	800dfae <USBD_StdItfReq+0xc2>
          break;
 800dfac:	bf00      	nop
      }
      break;
 800dfae:	e004      	b.n	800dfba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 fd15 	bl	800e9e2 <USBD_CtlError>
      break;
 800dfb8:	bf00      	nop
  }

  return ret;
 800dfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	889b      	ldrh	r3, [r3, #4]
 800dfd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfe0:	2b40      	cmp	r3, #64	; 0x40
 800dfe2:	d007      	beq.n	800dff4 <USBD_StdEPReq+0x30>
 800dfe4:	2b40      	cmp	r3, #64	; 0x40
 800dfe6:	f200 817f 	bhi.w	800e2e8 <USBD_StdEPReq+0x324>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d02a      	beq.n	800e044 <USBD_StdEPReq+0x80>
 800dfee:	2b20      	cmp	r3, #32
 800dff0:	f040 817a 	bne.w	800e2e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff fe83 	bl	800dd04 <USBD_CoreFindEP>
 800dffe:	4603      	mov	r3, r0
 800e000:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e002:	7b7b      	ldrb	r3, [r7, #13]
 800e004:	2bff      	cmp	r3, #255	; 0xff
 800e006:	f000 8174 	beq.w	800e2f2 <USBD_StdEPReq+0x32e>
 800e00a:	7b7b      	ldrb	r3, [r7, #13]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f040 8170 	bne.w	800e2f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e012:	7b7a      	ldrb	r2, [r7, #13]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e01a:	7b7a      	ldrb	r2, [r7, #13]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	32ae      	adds	r2, #174	; 0xae
 800e020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 8163 	beq.w	800e2f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e02c:	7b7a      	ldrb	r2, [r7, #13]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	32ae      	adds	r2, #174	; 0xae
 800e032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	6839      	ldr	r1, [r7, #0]
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	4798      	blx	r3
 800e03e:	4603      	mov	r3, r0
 800e040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e042:	e156      	b.n	800e2f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d008      	beq.n	800e05e <USBD_StdEPReq+0x9a>
 800e04c:	2b03      	cmp	r3, #3
 800e04e:	f300 8145 	bgt.w	800e2dc <USBD_StdEPReq+0x318>
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 809b 	beq.w	800e18e <USBD_StdEPReq+0x1ca>
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d03c      	beq.n	800e0d6 <USBD_StdEPReq+0x112>
 800e05c:	e13e      	b.n	800e2dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b02      	cmp	r3, #2
 800e068:	d002      	beq.n	800e070 <USBD_StdEPReq+0xac>
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d016      	beq.n	800e09c <USBD_StdEPReq+0xd8>
 800e06e:	e02c      	b.n	800e0ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e070:	7bbb      	ldrb	r3, [r7, #14]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00d      	beq.n	800e092 <USBD_StdEPReq+0xce>
 800e076:	7bbb      	ldrb	r3, [r7, #14]
 800e078:	2b80      	cmp	r3, #128	; 0x80
 800e07a:	d00a      	beq.n	800e092 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e07c:	7bbb      	ldrb	r3, [r7, #14]
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f004 f877 	bl	8012174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e086:	2180      	movs	r1, #128	; 0x80
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f004 f873 	bl	8012174 <USBD_LL_StallEP>
 800e08e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e090:	e020      	b.n	800e0d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 fca4 	bl	800e9e2 <USBD_CtlError>
              break;
 800e09a:	e01b      	b.n	800e0d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	885b      	ldrh	r3, [r3, #2]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10e      	bne.n	800e0c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00b      	beq.n	800e0c2 <USBD_StdEPReq+0xfe>
 800e0aa:	7bbb      	ldrb	r3, [r7, #14]
 800e0ac:	2b80      	cmp	r3, #128	; 0x80
 800e0ae:	d008      	beq.n	800e0c2 <USBD_StdEPReq+0xfe>
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	88db      	ldrh	r3, [r3, #6]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d104      	bne.n	800e0c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f004 f859 	bl	8012174 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fd58 	bl	800eb78 <USBD_CtlSendStatus>

              break;
 800e0c8:	e004      	b.n	800e0d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fc88 	bl	800e9e2 <USBD_CtlError>
              break;
 800e0d2:	bf00      	nop
          }
          break;
 800e0d4:	e107      	b.n	800e2e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d002      	beq.n	800e0e8 <USBD_StdEPReq+0x124>
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d016      	beq.n	800e114 <USBD_StdEPReq+0x150>
 800e0e6:	e04b      	b.n	800e180 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00d      	beq.n	800e10a <USBD_StdEPReq+0x146>
 800e0ee:	7bbb      	ldrb	r3, [r7, #14]
 800e0f0:	2b80      	cmp	r3, #128	; 0x80
 800e0f2:	d00a      	beq.n	800e10a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0f4:	7bbb      	ldrb	r3, [r7, #14]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f004 f83b 	bl	8012174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0fe:	2180      	movs	r1, #128	; 0x80
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f004 f837 	bl	8012174 <USBD_LL_StallEP>
 800e106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e108:	e040      	b.n	800e18c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 fc68 	bl	800e9e2 <USBD_CtlError>
              break;
 800e112:	e03b      	b.n	800e18c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	885b      	ldrh	r3, [r3, #2]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d136      	bne.n	800e18a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e11c:	7bbb      	ldrb	r3, [r7, #14]
 800e11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e122:	2b00      	cmp	r3, #0
 800e124:	d004      	beq.n	800e130 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e126:	7bbb      	ldrb	r3, [r7, #14]
 800e128:	4619      	mov	r1, r3
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f004 f858 	bl	80121e0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fd21 	bl	800eb78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e136:	7bbb      	ldrb	r3, [r7, #14]
 800e138:	4619      	mov	r1, r3
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7ff fde2 	bl	800dd04 <USBD_CoreFindEP>
 800e140:	4603      	mov	r3, r0
 800e142:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e144:	7b7b      	ldrb	r3, [r7, #13]
 800e146:	2bff      	cmp	r3, #255	; 0xff
 800e148:	d01f      	beq.n	800e18a <USBD_StdEPReq+0x1c6>
 800e14a:	7b7b      	ldrb	r3, [r7, #13]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d11c      	bne.n	800e18a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e150:	7b7a      	ldrb	r2, [r7, #13]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e158:	7b7a      	ldrb	r2, [r7, #13]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	32ae      	adds	r2, #174	; 0xae
 800e15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d010      	beq.n	800e18a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e168:	7b7a      	ldrb	r2, [r7, #13]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	32ae      	adds	r2, #174	; 0xae
 800e16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	4798      	blx	r3
 800e17a:	4603      	mov	r3, r0
 800e17c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e17e:	e004      	b.n	800e18a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fc2d 	bl	800e9e2 <USBD_CtlError>
              break;
 800e188:	e000      	b.n	800e18c <USBD_StdEPReq+0x1c8>
              break;
 800e18a:	bf00      	nop
          }
          break;
 800e18c:	e0ab      	b.n	800e2e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e194:	b2db      	uxtb	r3, r3
 800e196:	2b02      	cmp	r3, #2
 800e198:	d002      	beq.n	800e1a0 <USBD_StdEPReq+0x1dc>
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d032      	beq.n	800e204 <USBD_StdEPReq+0x240>
 800e19e:	e097      	b.n	800e2d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1a0:	7bbb      	ldrb	r3, [r7, #14]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d007      	beq.n	800e1b6 <USBD_StdEPReq+0x1f2>
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
 800e1a8:	2b80      	cmp	r3, #128	; 0x80
 800e1aa:	d004      	beq.n	800e1b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 fc17 	bl	800e9e2 <USBD_CtlError>
                break;
 800e1b4:	e091      	b.n	800e2da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	da0b      	bge.n	800e1d6 <USBD_StdEPReq+0x212>
 800e1be:	7bbb      	ldrb	r3, [r7, #14]
 800e1c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	3310      	adds	r3, #16
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	e00b      	b.n	800e1ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1d6:	7bbb      	ldrb	r3, [r7, #14]
 800e1d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1dc:	4613      	mov	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4413      	add	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2202      	movs	r2, #2
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fc61 	bl	800eac4 <USBD_CtlSendData>
              break;
 800e202:	e06a      	b.n	800e2da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	da11      	bge.n	800e230 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e20c:	7bbb      	ldrb	r3, [r7, #14]
 800e20e:	f003 020f 	and.w	r2, r3, #15
 800e212:	6879      	ldr	r1, [r7, #4]
 800e214:	4613      	mov	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	440b      	add	r3, r1
 800e21e:	3324      	adds	r3, #36	; 0x24
 800e220:	881b      	ldrh	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d117      	bne.n	800e256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fbda 	bl	800e9e2 <USBD_CtlError>
                  break;
 800e22e:	e054      	b.n	800e2da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e230:	7bbb      	ldrb	r3, [r7, #14]
 800e232:	f003 020f 	and.w	r2, r3, #15
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	4613      	mov	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4413      	add	r3, r2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	440b      	add	r3, r1
 800e242:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d104      	bne.n	800e256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fbc7 	bl	800e9e2 <USBD_CtlError>
                  break;
 800e254:	e041      	b.n	800e2da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	da0b      	bge.n	800e276 <USBD_StdEPReq+0x2b2>
 800e25e:	7bbb      	ldrb	r3, [r7, #14]
 800e260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e264:	4613      	mov	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	3310      	adds	r3, #16
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	4413      	add	r3, r2
 800e272:	3304      	adds	r3, #4
 800e274:	e00b      	b.n	800e28e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e276:	7bbb      	ldrb	r3, [r7, #14]
 800e278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e27c:	4613      	mov	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	4413      	add	r3, r2
 800e28c:	3304      	adds	r3, #4
 800e28e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e290:	7bbb      	ldrb	r3, [r7, #14]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <USBD_StdEPReq+0x2d8>
 800e296:	7bbb      	ldrb	r3, [r7, #14]
 800e298:	2b80      	cmp	r3, #128	; 0x80
 800e29a:	d103      	bne.n	800e2a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	e00e      	b.n	800e2c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e2a4:	7bbb      	ldrb	r3, [r7, #14]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f003 ffcf 	bl	801224c <USBD_LL_IsStallEP>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d003      	beq.n	800e2bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	e002      	b.n	800e2c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fbfb 	bl	800eac4 <USBD_CtlSendData>
              break;
 800e2ce:	e004      	b.n	800e2da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fb85 	bl	800e9e2 <USBD_CtlError>
              break;
 800e2d8:	bf00      	nop
          }
          break;
 800e2da:	e004      	b.n	800e2e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e2dc:	6839      	ldr	r1, [r7, #0]
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 fb7f 	bl	800e9e2 <USBD_CtlError>
          break;
 800e2e4:	bf00      	nop
      }
      break;
 800e2e6:	e005      	b.n	800e2f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fb79 	bl	800e9e2 <USBD_CtlError>
      break;
 800e2f0:	e000      	b.n	800e2f4 <USBD_StdEPReq+0x330>
      break;
 800e2f2:	bf00      	nop
  }

  return ret;
 800e2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
	...

0800e300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e30a:	2300      	movs	r3, #0
 800e30c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e30e:	2300      	movs	r3, #0
 800e310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e312:	2300      	movs	r3, #0
 800e314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	885b      	ldrh	r3, [r3, #2]
 800e31a:	0a1b      	lsrs	r3, r3, #8
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	2b0e      	cmp	r3, #14
 800e322:	f200 8152 	bhi.w	800e5ca <USBD_GetDescriptor+0x2ca>
 800e326:	a201      	add	r2, pc, #4	; (adr r2, 800e32c <USBD_GetDescriptor+0x2c>)
 800e328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32c:	0800e39d 	.word	0x0800e39d
 800e330:	0800e3b5 	.word	0x0800e3b5
 800e334:	0800e3f5 	.word	0x0800e3f5
 800e338:	0800e5cb 	.word	0x0800e5cb
 800e33c:	0800e5cb 	.word	0x0800e5cb
 800e340:	0800e56b 	.word	0x0800e56b
 800e344:	0800e597 	.word	0x0800e597
 800e348:	0800e5cb 	.word	0x0800e5cb
 800e34c:	0800e5cb 	.word	0x0800e5cb
 800e350:	0800e5cb 	.word	0x0800e5cb
 800e354:	0800e5cb 	.word	0x0800e5cb
 800e358:	0800e5cb 	.word	0x0800e5cb
 800e35c:	0800e5cb 	.word	0x0800e5cb
 800e360:	0800e5cb 	.word	0x0800e5cb
 800e364:	0800e369 	.word	0x0800e369
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e36e:	69db      	ldr	r3, [r3, #28]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00b      	beq.n	800e38c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e37a:	69db      	ldr	r3, [r3, #28]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	7c12      	ldrb	r2, [r2, #16]
 800e380:	f107 0108 	add.w	r1, r7, #8
 800e384:	4610      	mov	r0, r2
 800e386:	4798      	blx	r3
 800e388:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e38a:	e126      	b.n	800e5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e38c:	6839      	ldr	r1, [r7, #0]
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fb27 	bl	800e9e2 <USBD_CtlError>
        err++;
 800e394:	7afb      	ldrb	r3, [r7, #11]
 800e396:	3301      	adds	r3, #1
 800e398:	72fb      	strb	r3, [r7, #11]
      break;
 800e39a:	e11e      	b.n	800e5da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	7c12      	ldrb	r2, [r2, #16]
 800e3a8:	f107 0108 	add.w	r1, r7, #8
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	4798      	blx	r3
 800e3b0:	60f8      	str	r0, [r7, #12]
      break;
 800e3b2:	e112      	b.n	800e5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	7c1b      	ldrb	r3, [r3, #16]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10d      	bne.n	800e3d8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c4:	f107 0208 	add.w	r2, r7, #8
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	4798      	blx	r3
 800e3cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e3d6:	e100      	b.n	800e5da <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e0:	f107 0208 	add.w	r2, r7, #8
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	4798      	blx	r3
 800e3e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	701a      	strb	r2, [r3, #0]
      break;
 800e3f2:	e0f2      	b.n	800e5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	885b      	ldrh	r3, [r3, #2]
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b05      	cmp	r3, #5
 800e3fc:	f200 80ac 	bhi.w	800e558 <USBD_GetDescriptor+0x258>
 800e400:	a201      	add	r2, pc, #4	; (adr r2, 800e408 <USBD_GetDescriptor+0x108>)
 800e402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e406:	bf00      	nop
 800e408:	0800e421 	.word	0x0800e421
 800e40c:	0800e455 	.word	0x0800e455
 800e410:	0800e489 	.word	0x0800e489
 800e414:	0800e4bd 	.word	0x0800e4bd
 800e418:	0800e4f1 	.word	0x0800e4f1
 800e41c:	0800e525 	.word	0x0800e525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00b      	beq.n	800e444 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	7c12      	ldrb	r2, [r2, #16]
 800e438:	f107 0108 	add.w	r1, r7, #8
 800e43c:	4610      	mov	r0, r2
 800e43e:	4798      	blx	r3
 800e440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e442:	e091      	b.n	800e568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 facb 	bl	800e9e2 <USBD_CtlError>
            err++;
 800e44c:	7afb      	ldrb	r3, [r7, #11]
 800e44e:	3301      	adds	r3, #1
 800e450:	72fb      	strb	r3, [r7, #11]
          break;
 800e452:	e089      	b.n	800e568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00b      	beq.n	800e478 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	7c12      	ldrb	r2, [r2, #16]
 800e46c:	f107 0108 	add.w	r1, r7, #8
 800e470:	4610      	mov	r0, r2
 800e472:	4798      	blx	r3
 800e474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e476:	e077      	b.n	800e568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 fab1 	bl	800e9e2 <USBD_CtlError>
            err++;
 800e480:	7afb      	ldrb	r3, [r7, #11]
 800e482:	3301      	adds	r3, #1
 800e484:	72fb      	strb	r3, [r7, #11]
          break;
 800e486:	e06f      	b.n	800e568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00b      	beq.n	800e4ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	7c12      	ldrb	r2, [r2, #16]
 800e4a0:	f107 0108 	add.w	r1, r7, #8
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	4798      	blx	r3
 800e4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4aa:	e05d      	b.n	800e568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4ac:	6839      	ldr	r1, [r7, #0]
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fa97 	bl	800e9e2 <USBD_CtlError>
            err++;
 800e4b4:	7afb      	ldrb	r3, [r7, #11]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ba:	e055      	b.n	800e568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00b      	beq.n	800e4e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	7c12      	ldrb	r2, [r2, #16]
 800e4d4:	f107 0108 	add.w	r1, r7, #8
 800e4d8:	4610      	mov	r0, r2
 800e4da:	4798      	blx	r3
 800e4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4de:	e043      	b.n	800e568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 fa7d 	bl	800e9e2 <USBD_CtlError>
            err++;
 800e4e8:	7afb      	ldrb	r3, [r7, #11]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ee:	e03b      	b.n	800e568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00b      	beq.n	800e514 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	7c12      	ldrb	r2, [r2, #16]
 800e508:	f107 0108 	add.w	r1, r7, #8
 800e50c:	4610      	mov	r0, r2
 800e50e:	4798      	blx	r3
 800e510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e512:	e029      	b.n	800e568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 fa63 	bl	800e9e2 <USBD_CtlError>
            err++;
 800e51c:	7afb      	ldrb	r3, [r7, #11]
 800e51e:	3301      	adds	r3, #1
 800e520:	72fb      	strb	r3, [r7, #11]
          break;
 800e522:	e021      	b.n	800e568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e52a:	699b      	ldr	r3, [r3, #24]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00b      	beq.n	800e548 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	7c12      	ldrb	r2, [r2, #16]
 800e53c:	f107 0108 	add.w	r1, r7, #8
 800e540:	4610      	mov	r0, r2
 800e542:	4798      	blx	r3
 800e544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e546:	e00f      	b.n	800e568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fa49 	bl	800e9e2 <USBD_CtlError>
            err++;
 800e550:	7afb      	ldrb	r3, [r7, #11]
 800e552:	3301      	adds	r3, #1
 800e554:	72fb      	strb	r3, [r7, #11]
          break;
 800e556:	e007      	b.n	800e568 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e558:	6839      	ldr	r1, [r7, #0]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 fa41 	bl	800e9e2 <USBD_CtlError>
          err++;
 800e560:	7afb      	ldrb	r3, [r7, #11]
 800e562:	3301      	adds	r3, #1
 800e564:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e566:	bf00      	nop
      }
      break;
 800e568:	e037      	b.n	800e5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7c1b      	ldrb	r3, [r3, #16]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d109      	bne.n	800e586 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e57a:	f107 0208 	add.w	r2, r7, #8
 800e57e:	4610      	mov	r0, r2
 800e580:	4798      	blx	r3
 800e582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e584:	e029      	b.n	800e5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fa2a 	bl	800e9e2 <USBD_CtlError>
        err++;
 800e58e:	7afb      	ldrb	r3, [r7, #11]
 800e590:	3301      	adds	r3, #1
 800e592:	72fb      	strb	r3, [r7, #11]
      break;
 800e594:	e021      	b.n	800e5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	7c1b      	ldrb	r3, [r3, #16]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10d      	bne.n	800e5ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a6:	f107 0208 	add.w	r2, r7, #8
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	4798      	blx	r3
 800e5ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	2207      	movs	r2, #7
 800e5b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5b8:	e00f      	b.n	800e5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fa10 	bl	800e9e2 <USBD_CtlError>
        err++;
 800e5c2:	7afb      	ldrb	r3, [r7, #11]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e5c8:	e007      	b.n	800e5da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e5ca:	6839      	ldr	r1, [r7, #0]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 fa08 	bl	800e9e2 <USBD_CtlError>
      err++;
 800e5d2:	7afb      	ldrb	r3, [r7, #11]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e5d8:	bf00      	nop
  }

  if (err != 0U)
 800e5da:	7afb      	ldrb	r3, [r7, #11]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d11e      	bne.n	800e61e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	88db      	ldrh	r3, [r3, #6]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d016      	beq.n	800e616 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e5e8:	893b      	ldrh	r3, [r7, #8]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00e      	beq.n	800e60c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	88da      	ldrh	r2, [r3, #6]
 800e5f2:	893b      	ldrh	r3, [r7, #8]
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	bf28      	it	cs
 800e5f8:	4613      	movcs	r3, r2
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e5fe:	893b      	ldrh	r3, [r7, #8]
 800e600:	461a      	mov	r2, r3
 800e602:	68f9      	ldr	r1, [r7, #12]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fa5d 	bl	800eac4 <USBD_CtlSendData>
 800e60a:	e009      	b.n	800e620 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f9e7 	bl	800e9e2 <USBD_CtlError>
 800e614:	e004      	b.n	800e620 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 faae 	bl	800eb78 <USBD_CtlSendStatus>
 800e61c:	e000      	b.n	800e620 <USBD_GetDescriptor+0x320>
    return;
 800e61e:	bf00      	nop
  }
}
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop

0800e628 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	889b      	ldrh	r3, [r3, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d131      	bne.n	800e69e <USBD_SetAddress+0x76>
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	88db      	ldrh	r3, [r3, #6]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d12d      	bne.n	800e69e <USBD_SetAddress+0x76>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	885b      	ldrh	r3, [r3, #2]
 800e646:	2b7f      	cmp	r3, #127	; 0x7f
 800e648:	d829      	bhi.n	800e69e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	885b      	ldrh	r3, [r3, #2]
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d104      	bne.n	800e66c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e662:	6839      	ldr	r1, [r7, #0]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 f9bc 	bl	800e9e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e66a:	e01d      	b.n	800e6a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	7bfa      	ldrb	r2, [r7, #15]
 800e670:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e674:	7bfb      	ldrb	r3, [r7, #15]
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f003 fe13 	bl	80122a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fa7a 	bl	800eb78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e684:	7bfb      	ldrb	r3, [r7, #15]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d004      	beq.n	800e694 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2202      	movs	r2, #2
 800e68e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e692:	e009      	b.n	800e6a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e69c:	e004      	b.n	800e6a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 f99e 	bl	800e9e2 <USBD_CtlError>
  }
}
 800e6a6:	bf00      	nop
 800e6a8:	bf00      	nop
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	885b      	ldrh	r3, [r3, #2]
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	4b4e      	ldr	r3, [pc, #312]	; (800e800 <USBD_SetConfig+0x150>)
 800e6c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e6c8:	4b4d      	ldr	r3, [pc, #308]	; (800e800 <USBD_SetConfig+0x150>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d905      	bls.n	800e6dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f985 	bl	800e9e2 <USBD_CtlError>
    return USBD_FAIL;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e08c      	b.n	800e7f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d002      	beq.n	800e6ee <USBD_SetConfig+0x3e>
 800e6e8:	2b03      	cmp	r3, #3
 800e6ea:	d029      	beq.n	800e740 <USBD_SetConfig+0x90>
 800e6ec:	e075      	b.n	800e7da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e6ee:	4b44      	ldr	r3, [pc, #272]	; (800e800 <USBD_SetConfig+0x150>)
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d020      	beq.n	800e738 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e6f6:	4b42      	ldr	r3, [pc, #264]	; (800e800 <USBD_SetConfig+0x150>)
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e700:	4b3f      	ldr	r3, [pc, #252]	; (800e800 <USBD_SetConfig+0x150>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	4619      	mov	r1, r3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7fe ffb7 	bl	800d67a <USBD_SetClassConfig>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d008      	beq.n	800e728 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e716:	6839      	ldr	r1, [r7, #0]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 f962 	bl	800e9e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2202      	movs	r2, #2
 800e722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e726:	e065      	b.n	800e7f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 fa25 	bl	800eb78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2203      	movs	r2, #3
 800e732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e736:	e05d      	b.n	800e7f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fa1d 	bl	800eb78 <USBD_CtlSendStatus>
      break;
 800e73e:	e059      	b.n	800e7f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e740:	4b2f      	ldr	r3, [pc, #188]	; (800e800 <USBD_SetConfig+0x150>)
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d112      	bne.n	800e76e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2202      	movs	r2, #2
 800e74c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e750:	4b2b      	ldr	r3, [pc, #172]	; (800e800 <USBD_SetConfig+0x150>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	461a      	mov	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e75a:	4b29      	ldr	r3, [pc, #164]	; (800e800 <USBD_SetConfig+0x150>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	4619      	mov	r1, r3
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f7fe ffa6 	bl	800d6b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 fa06 	bl	800eb78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e76c:	e042      	b.n	800e7f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e76e:	4b24      	ldr	r3, [pc, #144]	; (800e800 <USBD_SetConfig+0x150>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d02a      	beq.n	800e7d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	b2db      	uxtb	r3, r3
 800e782:	4619      	mov	r1, r3
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7fe ff94 	bl	800d6b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e78a:	4b1d      	ldr	r3, [pc, #116]	; (800e800 <USBD_SetConfig+0x150>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	461a      	mov	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e794:	4b1a      	ldr	r3, [pc, #104]	; (800e800 <USBD_SetConfig+0x150>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7fe ff6d 	bl	800d67a <USBD_SetClassConfig>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00f      	beq.n	800e7ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f918 	bl	800e9e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f7fe ff79 	bl	800d6b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e7c8:	e014      	b.n	800e7f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 f9d4 	bl	800eb78 <USBD_CtlSendStatus>
      break;
 800e7d0:	e010      	b.n	800e7f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f9d0 	bl	800eb78 <USBD_CtlSendStatus>
      break;
 800e7d8:	e00c      	b.n	800e7f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f900 	bl	800e9e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7e2:	4b07      	ldr	r3, [pc, #28]	; (800e800 <USBD_SetConfig+0x150>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7fe ff62 	bl	800d6b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7f2:	bf00      	nop
  }

  return ret;
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20006d34 	.word	0x20006d34

0800e804 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	88db      	ldrh	r3, [r3, #6]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d004      	beq.n	800e820 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f8e2 	bl	800e9e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e81e:	e023      	b.n	800e868 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e826:	b2db      	uxtb	r3, r3
 800e828:	2b02      	cmp	r3, #2
 800e82a:	dc02      	bgt.n	800e832 <USBD_GetConfig+0x2e>
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc03      	bgt.n	800e838 <USBD_GetConfig+0x34>
 800e830:	e015      	b.n	800e85e <USBD_GetConfig+0x5a>
 800e832:	2b03      	cmp	r3, #3
 800e834:	d00b      	beq.n	800e84e <USBD_GetConfig+0x4a>
 800e836:	e012      	b.n	800e85e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	3308      	adds	r3, #8
 800e842:	2201      	movs	r2, #1
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f93c 	bl	800eac4 <USBD_CtlSendData>
        break;
 800e84c:	e00c      	b.n	800e868 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3304      	adds	r3, #4
 800e852:	2201      	movs	r2, #1
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f934 	bl	800eac4 <USBD_CtlSendData>
        break;
 800e85c:	e004      	b.n	800e868 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 f8be 	bl	800e9e2 <USBD_CtlError>
        break;
 800e866:	bf00      	nop
}
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e880:	b2db      	uxtb	r3, r3
 800e882:	3b01      	subs	r3, #1
 800e884:	2b02      	cmp	r3, #2
 800e886:	d81e      	bhi.n	800e8c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	88db      	ldrh	r3, [r3, #6]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d004      	beq.n	800e89a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e890:	6839      	ldr	r1, [r7, #0]
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f8a5 	bl	800e9e2 <USBD_CtlError>
        break;
 800e898:	e01a      	b.n	800e8d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d005      	beq.n	800e8b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	f043 0202 	orr.w	r2, r3, #2
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	330c      	adds	r3, #12
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	4619      	mov	r1, r3
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 f900 	bl	800eac4 <USBD_CtlSendData>
      break;
 800e8c4:	e004      	b.n	800e8d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f88a 	bl	800e9e2 <USBD_CtlError>
      break;
 800e8ce:	bf00      	nop
  }
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	885b      	ldrh	r3, [r3, #2]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d107      	bne.n	800e8fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f940 	bl	800eb78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e8f8:	e013      	b.n	800e922 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	885b      	ldrh	r3, [r3, #2]
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d10b      	bne.n	800e91a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	889b      	ldrh	r3, [r3, #4]
 800e906:	0a1b      	lsrs	r3, r3, #8
 800e908:	b29b      	uxth	r3, r3
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f930 	bl	800eb78 <USBD_CtlSendStatus>
}
 800e918:	e003      	b.n	800e922 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e91a:	6839      	ldr	r1, [r7, #0]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f860 	bl	800e9e2 <USBD_CtlError>
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	3b01      	subs	r3, #1
 800e93e:	2b02      	cmp	r3, #2
 800e940:	d80b      	bhi.n	800e95a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	885b      	ldrh	r3, [r3, #2]
 800e946:	2b01      	cmp	r3, #1
 800e948:	d10c      	bne.n	800e964 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 f910 	bl	800eb78 <USBD_CtlSendStatus>
      }
      break;
 800e958:	e004      	b.n	800e964 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f840 	bl	800e9e2 <USBD_CtlError>
      break;
 800e962:	e000      	b.n	800e966 <USBD_ClrFeature+0x3c>
      break;
 800e964:	bf00      	nop
  }
}
 800e966:	bf00      	nop
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	781a      	ldrb	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3301      	adds	r3, #1
 800e988:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	781a      	ldrb	r2, [r3, #0]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	3301      	adds	r3, #1
 800e996:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff fa17 	bl	800ddcc <SWAPBYTE>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f7ff fa0a 	bl	800ddcc <SWAPBYTE>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f7ff f9fd 	bl	800ddcc <SWAPBYTE>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	80da      	strh	r2, [r3, #6]
}
 800e9da:	bf00      	nop
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9ec:	2180      	movs	r1, #128	; 0x80
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f003 fbc0 	bl	8012174 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f003 fbbc 	bl	8012174 <USBD_LL_StallEP>
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d036      	beq.n	800ea88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea1e:	6938      	ldr	r0, [r7, #16]
 800ea20:	f000 f836 	bl	800ea90 <USBD_GetLen>
 800ea24:	4603      	mov	r3, r0
 800ea26:	3301      	adds	r3, #1
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	4413      	add	r3, r2
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	7812      	ldrb	r2, [r2, #0]
 800ea3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea3e:	7dfb      	ldrb	r3, [r7, #23]
 800ea40:	3301      	adds	r3, #1
 800ea42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	4413      	add	r3, r2
 800ea4a:	2203      	movs	r2, #3
 800ea4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea4e:	7dfb      	ldrb	r3, [r7, #23]
 800ea50:	3301      	adds	r3, #1
 800ea52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea54:	e013      	b.n	800ea7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea56:	7dfb      	ldrb	r3, [r7, #23]
 800ea58:	68ba      	ldr	r2, [r7, #8]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	693a      	ldr	r2, [r7, #16]
 800ea5e:	7812      	ldrb	r2, [r2, #0]
 800ea60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	3301      	adds	r3, #1
 800ea66:	613b      	str	r3, [r7, #16]
    idx++;
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea6e:	7dfb      	ldrb	r3, [r7, #23]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	4413      	add	r3, r2
 800ea74:	2200      	movs	r2, #0
 800ea76:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea78:	7dfb      	ldrb	r3, [r7, #23]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1e7      	bne.n	800ea56 <USBD_GetString+0x52>
 800ea86:	e000      	b.n	800ea8a <USBD_GetString+0x86>
    return;
 800ea88:	bf00      	nop
  }
}
 800ea8a:	3718      	adds	r7, #24
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eaa0:	e005      	b.n	800eaae <USBD_GetLen+0x1e>
  {
    len++;
 800eaa2:	7bfb      	ldrb	r3, [r7, #15]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1f5      	bne.n	800eaa2 <USBD_GetLen+0x12>
  }

  return len;
 800eab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	2100      	movs	r1, #0
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f003 fc10 	bl	8012310 <USBD_LL_Transmit>

  return USBD_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b084      	sub	sp, #16
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	60f8      	str	r0, [r7, #12]
 800eb02:	60b9      	str	r1, [r7, #8]
 800eb04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f003 fbff 	bl	8012310 <USBD_LL_Transmit>

  return USBD_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2203      	movs	r2, #3
 800eb2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	2100      	movs	r1, #0
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f003 fc1a 	bl	8012380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b084      	sub	sp, #16
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	60f8      	str	r0, [r7, #12]
 800eb5e:	60b9      	str	r1, [r7, #8]
 800eb60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	2100      	movs	r1, #0
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f003 fc09 	bl	8012380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2204      	movs	r2, #4
 800eb84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb88:	2300      	movs	r3, #0
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f003 fbbe 	bl	8012310 <USBD_LL_Transmit>

  return USBD_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b082      	sub	sp, #8
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2205      	movs	r2, #5
 800ebaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebae:	2300      	movs	r3, #0
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f003 fbe3 	bl	8012380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4603      	mov	r3, r0
 800ebcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	4a08      	ldr	r2, [pc, #32]	; (800ebf4 <disk_status+0x30>)
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	79fa      	ldrb	r2, [r7, #7]
 800ebdc:	4905      	ldr	r1, [pc, #20]	; (800ebf4 <disk_status+0x30>)
 800ebde:	440a      	add	r2, r1
 800ebe0:	7a12      	ldrb	r2, [r2, #8]
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	4798      	blx	r3
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ebea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20006d60 	.word	0x20006d60

0800ebf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	4603      	mov	r3, r0
 800ec00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ec06:	79fb      	ldrb	r3, [r7, #7]
 800ec08:	4a0d      	ldr	r2, [pc, #52]	; (800ec40 <disk_initialize+0x48>)
 800ec0a:	5cd3      	ldrb	r3, [r2, r3]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d111      	bne.n	800ec34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ec10:	79fb      	ldrb	r3, [r7, #7]
 800ec12:	4a0b      	ldr	r2, [pc, #44]	; (800ec40 <disk_initialize+0x48>)
 800ec14:	2101      	movs	r1, #1
 800ec16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ec18:	79fb      	ldrb	r3, [r7, #7]
 800ec1a:	4a09      	ldr	r2, [pc, #36]	; (800ec40 <disk_initialize+0x48>)
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	79fa      	ldrb	r2, [r7, #7]
 800ec26:	4906      	ldr	r1, [pc, #24]	; (800ec40 <disk_initialize+0x48>)
 800ec28:	440a      	add	r2, r1
 800ec2a:	7a12      	ldrb	r2, [r2, #8]
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4798      	blx	r3
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20006d60 	.word	0x20006d60

0800ec44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ec44:	b590      	push	{r4, r7, lr}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	607a      	str	r2, [r7, #4]
 800ec4e:	603b      	str	r3, [r7, #0]
 800ec50:	4603      	mov	r3, r0
 800ec52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	4a0a      	ldr	r2, [pc, #40]	; (800ec80 <disk_read+0x3c>)
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4413      	add	r3, r2
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	689c      	ldr	r4, [r3, #8]
 800ec60:	7bfb      	ldrb	r3, [r7, #15]
 800ec62:	4a07      	ldr	r2, [pc, #28]	; (800ec80 <disk_read+0x3c>)
 800ec64:	4413      	add	r3, r2
 800ec66:	7a18      	ldrb	r0, [r3, #8]
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	68b9      	ldr	r1, [r7, #8]
 800ec6e:	47a0      	blx	r4
 800ec70:	4603      	mov	r3, r0
 800ec72:	75fb      	strb	r3, [r7, #23]
  return res;
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	371c      	adds	r7, #28
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd90      	pop	{r4, r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20006d60 	.word	0x20006d60

0800ec84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ec84:	b590      	push	{r4, r7, lr}
 800ec86:	b087      	sub	sp, #28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	603b      	str	r3, [r7, #0]
 800ec90:	4603      	mov	r3, r0
 800ec92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
 800ec96:	4a0a      	ldr	r2, [pc, #40]	; (800ecc0 <disk_write+0x3c>)
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4413      	add	r3, r2
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	68dc      	ldr	r4, [r3, #12]
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
 800eca2:	4a07      	ldr	r2, [pc, #28]	; (800ecc0 <disk_write+0x3c>)
 800eca4:	4413      	add	r3, r2
 800eca6:	7a18      	ldrb	r0, [r3, #8]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	68b9      	ldr	r1, [r7, #8]
 800ecae:	47a0      	blx	r4
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	371c      	adds	r7, #28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd90      	pop	{r4, r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20006d60 	.word	0x20006d60

0800ecc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	603a      	str	r2, [r7, #0]
 800ecce:	71fb      	strb	r3, [r7, #7]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	4a09      	ldr	r2, [pc, #36]	; (800ecfc <disk_ioctl+0x38>)
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	79fa      	ldrb	r2, [r7, #7]
 800ece2:	4906      	ldr	r1, [pc, #24]	; (800ecfc <disk_ioctl+0x38>)
 800ece4:	440a      	add	r2, r1
 800ece6:	7a10      	ldrb	r0, [r2, #8]
 800ece8:	79b9      	ldrb	r1, [r7, #6]
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	4798      	blx	r3
 800ecee:	4603      	mov	r3, r0
 800ecf0:	73fb      	strb	r3, [r7, #15]
  return res;
 800ecf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	20006d60 	.word	0x20006d60

0800ed00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ed10:	89fb      	ldrh	r3, [r7, #14]
 800ed12:	021b      	lsls	r3, r3, #8
 800ed14:	b21a      	sxth	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	b21b      	sxth	r3, r3
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	b21b      	sxth	r3, r3
 800ed20:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ed22:	89fb      	ldrh	r3, [r7, #14]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	3303      	adds	r3, #3
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	021b      	lsls	r3, r3, #8
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	3202      	adds	r2, #2
 800ed48:	7812      	ldrb	r2, [r2, #0]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	021b      	lsls	r3, r3, #8
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	3201      	adds	r2, #1
 800ed56:	7812      	ldrb	r2, [r2, #0]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	021b      	lsls	r3, r3, #8
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	7812      	ldrb	r2, [r2, #0]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]
	return rv;
 800ed68:	68fb      	ldr	r3, [r7, #12]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3714      	adds	r7, #20
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ed76:	b480      	push	{r7}
 800ed78:	b083      	sub	sp, #12
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	460b      	mov	r3, r1
 800ed80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	887a      	ldrh	r2, [r7, #2]
 800ed8a:	b2d2      	uxtb	r2, r2
 800ed8c:	701a      	strb	r2, [r3, #0]
 800ed8e:	887b      	ldrh	r3, [r7, #2]
 800ed90:	0a1b      	lsrs	r3, r3, #8
 800ed92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	607a      	str	r2, [r7, #4]
 800ed9a:	887a      	ldrh	r2, [r7, #2]
 800ed9c:	b2d2      	uxtb	r2, r2
 800ed9e:	701a      	strb	r2, [r3, #0]
}
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	1c5a      	adds	r2, r3, #1
 800edba:	607a      	str	r2, [r7, #4]
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	b2d2      	uxtb	r2, r2
 800edc0:	701a      	strb	r2, [r3, #0]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	0a1b      	lsrs	r3, r3, #8
 800edc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	607a      	str	r2, [r7, #4]
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	b2d2      	uxtb	r2, r2
 800edd2:	701a      	strb	r2, [r3, #0]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	0a1b      	lsrs	r3, r3, #8
 800edd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	1c5a      	adds	r2, r3, #1
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	683a      	ldr	r2, [r7, #0]
 800ede2:	b2d2      	uxtb	r2, r2
 800ede4:	701a      	strb	r2, [r3, #0]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	0a1b      	lsrs	r3, r3, #8
 800edea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	b2d2      	uxtb	r2, r2
 800edf6:	701a      	strb	r2, [r3, #0]
}
 800edf8:	bf00      	nop
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ee04:	b480      	push	{r7}
 800ee06:	b087      	sub	sp, #28
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00d      	beq.n	800ee3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ee1e:	693a      	ldr	r2, [r7, #16]
 800ee20:	1c53      	adds	r3, r2, #1
 800ee22:	613b      	str	r3, [r7, #16]
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	1c59      	adds	r1, r3, #1
 800ee28:	6179      	str	r1, [r7, #20]
 800ee2a:	7812      	ldrb	r2, [r2, #0]
 800ee2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3b01      	subs	r3, #1
 800ee32:	607b      	str	r3, [r7, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1f1      	bne.n	800ee1e <mem_cpy+0x1a>
	}
}
 800ee3a:	bf00      	nop
 800ee3c:	371c      	adds	r7, #28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ee46:	b480      	push	{r7}
 800ee48:	b087      	sub	sp, #28
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	60b9      	str	r1, [r7, #8]
 800ee50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	617a      	str	r2, [r7, #20]
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	b2d2      	uxtb	r2, r2
 800ee60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	607b      	str	r3, [r7, #4]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1f3      	bne.n	800ee56 <mem_set+0x10>
}
 800ee6e:	bf00      	nop
 800ee70:	bf00      	nop
 800ee72:	371c      	adds	r7, #28
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ee7c:	b480      	push	{r7}
 800ee7e:	b089      	sub	sp, #36	; 0x24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	61fb      	str	r3, [r7, #28]
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	61fa      	str	r2, [r7, #28]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	1c5a      	adds	r2, r3, #1
 800eea2:	61ba      	str	r2, [r7, #24]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	1acb      	subs	r3, r1, r3
 800eea8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3b01      	subs	r3, #1
 800eeae:	607b      	str	r3, [r7, #4]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <mem_cmp+0x40>
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d0eb      	beq.n	800ee94 <mem_cmp+0x18>

	return r;
 800eebc:	697b      	ldr	r3, [r7, #20]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3724      	adds	r7, #36	; 0x24
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eeca:	b480      	push	{r7}
 800eecc:	b083      	sub	sp, #12
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eed4:	e002      	b.n	800eedc <chk_chr+0x12>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3301      	adds	r3, #1
 800eeda:	607b      	str	r3, [r7, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d005      	beq.n	800eef0 <chk_chr+0x26>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	461a      	mov	r2, r3
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d1f2      	bne.n	800eed6 <chk_chr+0xc>
	return *str;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	781b      	ldrb	r3, [r3, #0]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60bb      	str	r3, [r7, #8]
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	60fb      	str	r3, [r7, #12]
 800ef12:	e029      	b.n	800ef68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ef14:	4a27      	ldr	r2, [pc, #156]	; (800efb4 <chk_lock+0xb4>)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	011b      	lsls	r3, r3, #4
 800ef1a:	4413      	add	r3, r2
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d01d      	beq.n	800ef5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef22:	4a24      	ldr	r2, [pc, #144]	; (800efb4 <chk_lock+0xb4>)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	011b      	lsls	r3, r3, #4
 800ef28:	4413      	add	r3, r2
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d116      	bne.n	800ef62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ef34:	4a1f      	ldr	r2, [pc, #124]	; (800efb4 <chk_lock+0xb4>)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	011b      	lsls	r3, r3, #4
 800ef3a:	4413      	add	r3, r2
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d10c      	bne.n	800ef62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ef48:	4a1a      	ldr	r2, [pc, #104]	; (800efb4 <chk_lock+0xb4>)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	011b      	lsls	r3, r3, #4
 800ef4e:	4413      	add	r3, r2
 800ef50:	3308      	adds	r3, #8
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d102      	bne.n	800ef62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ef5c:	e007      	b.n	800ef6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	3301      	adds	r3, #1
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d9d2      	bls.n	800ef14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b02      	cmp	r3, #2
 800ef72:	d109      	bne.n	800ef88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d102      	bne.n	800ef80 <chk_lock+0x80>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d101      	bne.n	800ef84 <chk_lock+0x84>
 800ef80:	2300      	movs	r3, #0
 800ef82:	e010      	b.n	800efa6 <chk_lock+0xa6>
 800ef84:	2312      	movs	r3, #18
 800ef86:	e00e      	b.n	800efa6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d108      	bne.n	800efa0 <chk_lock+0xa0>
 800ef8e:	4a09      	ldr	r2, [pc, #36]	; (800efb4 <chk_lock+0xb4>)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	011b      	lsls	r3, r3, #4
 800ef94:	4413      	add	r3, r2
 800ef96:	330c      	adds	r3, #12
 800ef98:	881b      	ldrh	r3, [r3, #0]
 800ef9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef9e:	d101      	bne.n	800efa4 <chk_lock+0xa4>
 800efa0:	2310      	movs	r3, #16
 800efa2:	e000      	b.n	800efa6 <chk_lock+0xa6>
 800efa4:	2300      	movs	r3, #0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	20006d40 	.word	0x20006d40

0800efb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800efbe:	2300      	movs	r3, #0
 800efc0:	607b      	str	r3, [r7, #4]
 800efc2:	e002      	b.n	800efca <enq_lock+0x12>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	3301      	adds	r3, #1
 800efc8:	607b      	str	r3, [r7, #4]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d806      	bhi.n	800efde <enq_lock+0x26>
 800efd0:	4a09      	ldr	r2, [pc, #36]	; (800eff8 <enq_lock+0x40>)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	011b      	lsls	r3, r3, #4
 800efd6:	4413      	add	r3, r2
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1f2      	bne.n	800efc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	bf14      	ite	ne
 800efe4:	2301      	movne	r3, #1
 800efe6:	2300      	moveq	r3, #0
 800efe8:	b2db      	uxtb	r3, r3
}
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	20006d40 	.word	0x20006d40

0800effc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f006:	2300      	movs	r3, #0
 800f008:	60fb      	str	r3, [r7, #12]
 800f00a:	e01f      	b.n	800f04c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f00c:	4a41      	ldr	r2, [pc, #260]	; (800f114 <inc_lock+0x118>)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	011b      	lsls	r3, r3, #4
 800f012:	4413      	add	r3, r2
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d113      	bne.n	800f046 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f01e:	4a3d      	ldr	r2, [pc, #244]	; (800f114 <inc_lock+0x118>)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	011b      	lsls	r3, r3, #4
 800f024:	4413      	add	r3, r2
 800f026:	3304      	adds	r3, #4
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f02e:	429a      	cmp	r2, r3
 800f030:	d109      	bne.n	800f046 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f032:	4a38      	ldr	r2, [pc, #224]	; (800f114 <inc_lock+0x118>)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	011b      	lsls	r3, r3, #4
 800f038:	4413      	add	r3, r2
 800f03a:	3308      	adds	r3, #8
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f042:	429a      	cmp	r2, r3
 800f044:	d006      	beq.n	800f054 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	3301      	adds	r3, #1
 800f04a:	60fb      	str	r3, [r7, #12]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d9dc      	bls.n	800f00c <inc_lock+0x10>
 800f052:	e000      	b.n	800f056 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f054:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d132      	bne.n	800f0c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f05c:	2300      	movs	r3, #0
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	e002      	b.n	800f068 <inc_lock+0x6c>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	3301      	adds	r3, #1
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d806      	bhi.n	800f07c <inc_lock+0x80>
 800f06e:	4a29      	ldr	r2, [pc, #164]	; (800f114 <inc_lock+0x118>)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	4413      	add	r3, r2
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1f2      	bne.n	800f062 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d101      	bne.n	800f086 <inc_lock+0x8a>
 800f082:	2300      	movs	r3, #0
 800f084:	e040      	b.n	800f108 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	4922      	ldr	r1, [pc, #136]	; (800f114 <inc_lock+0x118>)
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	011b      	lsls	r3, r3, #4
 800f090:	440b      	add	r3, r1
 800f092:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	689a      	ldr	r2, [r3, #8]
 800f098:	491e      	ldr	r1, [pc, #120]	; (800f114 <inc_lock+0x118>)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	011b      	lsls	r3, r3, #4
 800f09e:	440b      	add	r3, r1
 800f0a0:	3304      	adds	r3, #4
 800f0a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	695a      	ldr	r2, [r3, #20]
 800f0a8:	491a      	ldr	r1, [pc, #104]	; (800f114 <inc_lock+0x118>)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	011b      	lsls	r3, r3, #4
 800f0ae:	440b      	add	r3, r1
 800f0b0:	3308      	adds	r3, #8
 800f0b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f0b4:	4a17      	ldr	r2, [pc, #92]	; (800f114 <inc_lock+0x118>)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	011b      	lsls	r3, r3, #4
 800f0ba:	4413      	add	r3, r2
 800f0bc:	330c      	adds	r3, #12
 800f0be:	2200      	movs	r2, #0
 800f0c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d009      	beq.n	800f0dc <inc_lock+0xe0>
 800f0c8:	4a12      	ldr	r2, [pc, #72]	; (800f114 <inc_lock+0x118>)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	011b      	lsls	r3, r3, #4
 800f0ce:	4413      	add	r3, r2
 800f0d0:	330c      	adds	r3, #12
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d001      	beq.n	800f0dc <inc_lock+0xe0>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	e015      	b.n	800f108 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d108      	bne.n	800f0f4 <inc_lock+0xf8>
 800f0e2:	4a0c      	ldr	r2, [pc, #48]	; (800f114 <inc_lock+0x118>)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	011b      	lsls	r3, r3, #4
 800f0e8:	4413      	add	r3, r2
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	e001      	b.n	800f0f8 <inc_lock+0xfc>
 800f0f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0f8:	4906      	ldr	r1, [pc, #24]	; (800f114 <inc_lock+0x118>)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	011b      	lsls	r3, r3, #4
 800f0fe:	440b      	add	r3, r1
 800f100:	330c      	adds	r3, #12
 800f102:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	3301      	adds	r3, #1
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	20006d40 	.word	0x20006d40

0800f118 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	3b01      	subs	r3, #1
 800f124:	607b      	str	r3, [r7, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d825      	bhi.n	800f178 <dec_lock+0x60>
		n = Files[i].ctr;
 800f12c:	4a17      	ldr	r2, [pc, #92]	; (800f18c <dec_lock+0x74>)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	011b      	lsls	r3, r3, #4
 800f132:	4413      	add	r3, r2
 800f134:	330c      	adds	r3, #12
 800f136:	881b      	ldrh	r3, [r3, #0]
 800f138:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f13a:	89fb      	ldrh	r3, [r7, #14]
 800f13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f140:	d101      	bne.n	800f146 <dec_lock+0x2e>
 800f142:	2300      	movs	r3, #0
 800f144:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f146:	89fb      	ldrh	r3, [r7, #14]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <dec_lock+0x3a>
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	3b01      	subs	r3, #1
 800f150:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f152:	4a0e      	ldr	r2, [pc, #56]	; (800f18c <dec_lock+0x74>)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	011b      	lsls	r3, r3, #4
 800f158:	4413      	add	r3, r2
 800f15a:	330c      	adds	r3, #12
 800f15c:	89fa      	ldrh	r2, [r7, #14]
 800f15e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f160:	89fb      	ldrh	r3, [r7, #14]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d105      	bne.n	800f172 <dec_lock+0x5a>
 800f166:	4a09      	ldr	r2, [pc, #36]	; (800f18c <dec_lock+0x74>)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	011b      	lsls	r3, r3, #4
 800f16c:	4413      	add	r3, r2
 800f16e:	2200      	movs	r2, #0
 800f170:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	737b      	strb	r3, [r7, #13]
 800f176:	e001      	b.n	800f17c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f178:	2302      	movs	r3, #2
 800f17a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f17c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3714      	adds	r7, #20
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	20006d40 	.word	0x20006d40

0800f190 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f198:	2300      	movs	r3, #0
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	e010      	b.n	800f1c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f19e:	4a0d      	ldr	r2, [pc, #52]	; (800f1d4 <clear_lock+0x44>)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	011b      	lsls	r3, r3, #4
 800f1a4:	4413      	add	r3, r2
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d105      	bne.n	800f1ba <clear_lock+0x2a>
 800f1ae:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <clear_lock+0x44>)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	011b      	lsls	r3, r3, #4
 800f1b4:	4413      	add	r3, r2
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d9eb      	bls.n	800f19e <clear_lock+0xe>
	}
}
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	3714      	adds	r7, #20
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr
 800f1d4:	20006d40 	.word	0x20006d40

0800f1d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	78db      	ldrb	r3, [r3, #3]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d034      	beq.n	800f256 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	7858      	ldrb	r0, [r3, #1]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	f7ff fd40 	bl	800ec84 <disk_write>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d002      	beq.n	800f210 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f20a:	2301      	movs	r3, #1
 800f20c:	73fb      	strb	r3, [r7, #15]
 800f20e:	e022      	b.n	800f256 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	1ad2      	subs	r2, r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	429a      	cmp	r2, r3
 800f224:	d217      	bcs.n	800f256 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	789b      	ldrb	r3, [r3, #2]
 800f22a:	613b      	str	r3, [r7, #16]
 800f22c:	e010      	b.n	800f250 <sync_window+0x78>
					wsect += fs->fsize;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	4413      	add	r3, r2
 800f236:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	7858      	ldrb	r0, [r3, #1]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f242:	2301      	movs	r3, #1
 800f244:	697a      	ldr	r2, [r7, #20]
 800f246:	f7ff fd1d 	bl	800ec84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	3b01      	subs	r3, #1
 800f24e:	613b      	str	r3, [r7, #16]
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d8eb      	bhi.n	800f22e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f256:	7bfb      	ldrb	r3, [r7, #15]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3718      	adds	r7, #24
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f26a:	2300      	movs	r3, #0
 800f26c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	429a      	cmp	r2, r3
 800f276:	d01b      	beq.n	800f2b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7ff ffad 	bl	800f1d8 <sync_window>
 800f27e:	4603      	mov	r3, r0
 800f280:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f282:	7bfb      	ldrb	r3, [r7, #15]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d113      	bne.n	800f2b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	7858      	ldrb	r0, [r3, #1]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f292:	2301      	movs	r3, #1
 800f294:	683a      	ldr	r2, [r7, #0]
 800f296:	f7ff fcd5 	bl	800ec44 <disk_read>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d004      	beq.n	800f2aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff ff87 	bl	800f1d8 <sync_window>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f2ce:	7bfb      	ldrb	r3, [r7, #15]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d158      	bne.n	800f386 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	2b03      	cmp	r3, #3
 800f2da:	d148      	bne.n	800f36e <sync_fs+0xb2>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	791b      	ldrb	r3, [r3, #4]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d144      	bne.n	800f36e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3330      	adds	r3, #48	; 0x30
 800f2e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7ff fda9 	bl	800ee46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	3330      	adds	r3, #48	; 0x30
 800f2f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f2fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f300:	4618      	mov	r0, r3
 800f302:	f7ff fd38 	bl	800ed76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	3330      	adds	r3, #48	; 0x30
 800f30a:	4921      	ldr	r1, [pc, #132]	; (800f390 <sync_fs+0xd4>)
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff fd4d 	bl	800edac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	3330      	adds	r3, #48	; 0x30
 800f316:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f31a:	491e      	ldr	r1, [pc, #120]	; (800f394 <sync_fs+0xd8>)
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff fd45 	bl	800edac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3330      	adds	r3, #48	; 0x30
 800f326:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	691b      	ldr	r3, [r3, #16]
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f7ff fd3b 	bl	800edac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3330      	adds	r3, #48	; 0x30
 800f33a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	4619      	mov	r1, r3
 800f344:	4610      	mov	r0, r2
 800f346:	f7ff fd31 	bl	800edac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	69db      	ldr	r3, [r3, #28]
 800f34e:	1c5a      	adds	r2, r3, #1
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	7858      	ldrb	r0, [r3, #1]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f362:	2301      	movs	r3, #1
 800f364:	f7ff fc8e 	bl	800ec84 <disk_write>
			fs->fsi_flag = 0;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	785b      	ldrb	r3, [r3, #1]
 800f372:	2200      	movs	r2, #0
 800f374:	2100      	movs	r1, #0
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fca4 	bl	800ecc4 <disk_ioctl>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d001      	beq.n	800f386 <sync_fs+0xca>
 800f382:	2301      	movs	r3, #1
 800f384:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f386:	7bfb      	ldrb	r3, [r7, #15]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	41615252 	.word	0x41615252
 800f394:	61417272 	.word	0x61417272

0800f398 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	3b02      	subs	r3, #2
 800f3a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	695b      	ldr	r3, [r3, #20]
 800f3ac:	3b02      	subs	r3, #2
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d301      	bcc.n	800f3b8 <clust2sect+0x20>
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	e008      	b.n	800f3ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	895b      	ldrh	r3, [r3, #10]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	fb03 f202 	mul.w	r2, r3, r2
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c8:	4413      	add	r3, r2
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b086      	sub	sp, #24
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d904      	bls.n	800f3f6 <get_fat+0x20>
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	695b      	ldr	r3, [r3, #20]
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d302      	bcc.n	800f3fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	617b      	str	r3, [r7, #20]
 800f3fa:	e08f      	b.n	800f51c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f400:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	2b03      	cmp	r3, #3
 800f408:	d062      	beq.n	800f4d0 <get_fat+0xfa>
 800f40a:	2b03      	cmp	r3, #3
 800f40c:	dc7c      	bgt.n	800f508 <get_fat+0x132>
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d002      	beq.n	800f418 <get_fat+0x42>
 800f412:	2b02      	cmp	r3, #2
 800f414:	d042      	beq.n	800f49c <get_fat+0xc6>
 800f416:	e077      	b.n	800f508 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	60fb      	str	r3, [r7, #12]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	085b      	lsrs	r3, r3, #1
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	4413      	add	r3, r2
 800f424:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	6a1a      	ldr	r2, [r3, #32]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	0a5b      	lsrs	r3, r3, #9
 800f42e:	4413      	add	r3, r2
 800f430:	4619      	mov	r1, r3
 800f432:	6938      	ldr	r0, [r7, #16]
 800f434:	f7ff ff14 	bl	800f260 <move_window>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d167      	bne.n	800f50e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	60fa      	str	r2, [r7, #12]
 800f444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	4413      	add	r3, r2
 800f44c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f450:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	6a1a      	ldr	r2, [r3, #32]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	0a5b      	lsrs	r3, r3, #9
 800f45a:	4413      	add	r3, r2
 800f45c:	4619      	mov	r1, r3
 800f45e:	6938      	ldr	r0, [r7, #16]
 800f460:	f7ff fefe 	bl	800f260 <move_window>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d153      	bne.n	800f512 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f470:	693a      	ldr	r2, [r7, #16]
 800f472:	4413      	add	r3, r2
 800f474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f478:	021b      	lsls	r3, r3, #8
 800f47a:	461a      	mov	r2, r3
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	4313      	orrs	r3, r2
 800f480:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d002      	beq.n	800f492 <get_fat+0xbc>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	091b      	lsrs	r3, r3, #4
 800f490:	e002      	b.n	800f498 <get_fat+0xc2>
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f498:	617b      	str	r3, [r7, #20]
			break;
 800f49a:	e03f      	b.n	800f51c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	6a1a      	ldr	r2, [r3, #32]
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	0a1b      	lsrs	r3, r3, #8
 800f4a4:	4413      	add	r3, r2
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6938      	ldr	r0, [r7, #16]
 800f4aa:	f7ff fed9 	bl	800f260 <move_window>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d130      	bne.n	800f516 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f4c2:	4413      	add	r3, r2
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff fc1b 	bl	800ed00 <ld_word>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	617b      	str	r3, [r7, #20]
			break;
 800f4ce:	e025      	b.n	800f51c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	6a1a      	ldr	r2, [r3, #32]
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	09db      	lsrs	r3, r3, #7
 800f4d8:	4413      	add	r3, r2
 800f4da:	4619      	mov	r1, r3
 800f4dc:	6938      	ldr	r0, [r7, #16]
 800f4de:	f7ff febf 	bl	800f260 <move_window>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d118      	bne.n	800f51a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f4f6:	4413      	add	r3, r2
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff fc19 	bl	800ed30 <ld_dword>
 800f4fe:	4603      	mov	r3, r0
 800f500:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f504:	617b      	str	r3, [r7, #20]
			break;
 800f506:	e009      	b.n	800f51c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f508:	2301      	movs	r3, #1
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	e006      	b.n	800f51c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f50e:	bf00      	nop
 800f510:	e004      	b.n	800f51c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f512:	bf00      	nop
 800f514:	e002      	b.n	800f51c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f516:	bf00      	nop
 800f518:	e000      	b.n	800f51c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f51a:	bf00      	nop
		}
	}

	return val;
 800f51c:	697b      	ldr	r3, [r7, #20]
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3718      	adds	r7, #24
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f526:	b590      	push	{r4, r7, lr}
 800f528:	b089      	sub	sp, #36	; 0x24
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f532:	2302      	movs	r3, #2
 800f534:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	f240 80d9 	bls.w	800f6f0 <put_fat+0x1ca>
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	68ba      	ldr	r2, [r7, #8]
 800f544:	429a      	cmp	r2, r3
 800f546:	f080 80d3 	bcs.w	800f6f0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	2b03      	cmp	r3, #3
 800f550:	f000 8096 	beq.w	800f680 <put_fat+0x15a>
 800f554:	2b03      	cmp	r3, #3
 800f556:	f300 80cb 	bgt.w	800f6f0 <put_fat+0x1ca>
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d002      	beq.n	800f564 <put_fat+0x3e>
 800f55e:	2b02      	cmp	r3, #2
 800f560:	d06e      	beq.n	800f640 <put_fat+0x11a>
 800f562:	e0c5      	b.n	800f6f0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	61bb      	str	r3, [r7, #24]
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	085b      	lsrs	r3, r3, #1
 800f56c:	69ba      	ldr	r2, [r7, #24]
 800f56e:	4413      	add	r3, r2
 800f570:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6a1a      	ldr	r2, [r3, #32]
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	0a5b      	lsrs	r3, r3, #9
 800f57a:	4413      	add	r3, r2
 800f57c:	4619      	mov	r1, r3
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	f7ff fe6e 	bl	800f260 <move_window>
 800f584:	4603      	mov	r3, r0
 800f586:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f588:	7ffb      	ldrb	r3, [r7, #31]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f040 80a9 	bne.w	800f6e2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	1c59      	adds	r1, r3, #1
 800f59a:	61b9      	str	r1, [r7, #24]
 800f59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5a0:	4413      	add	r3, r2
 800f5a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	f003 0301 	and.w	r3, r3, #1
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00d      	beq.n	800f5ca <put_fat+0xa4>
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	b25b      	sxtb	r3, r3
 800f5b4:	f003 030f 	and.w	r3, r3, #15
 800f5b8:	b25a      	sxtb	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	011b      	lsls	r3, r3, #4
 800f5c0:	b25b      	sxtb	r3, r3
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	b25b      	sxtb	r3, r3
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	e001      	b.n	800f5ce <put_fat+0xa8>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6a1a      	ldr	r2, [r3, #32]
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	0a5b      	lsrs	r3, r3, #9
 800f5e0:	4413      	add	r3, r2
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f7ff fe3b 	bl	800f260 <move_window>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5ee:	7ffb      	ldrb	r3, [r7, #31]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d178      	bne.n	800f6e6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f600:	4413      	add	r3, r2
 800f602:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	f003 0301 	and.w	r3, r3, #1
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <put_fat+0xf0>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	091b      	lsrs	r3, r3, #4
 800f612:	b2db      	uxtb	r3, r3
 800f614:	e00e      	b.n	800f634 <put_fat+0x10e>
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	b25b      	sxtb	r3, r3
 800f61c:	f023 030f 	bic.w	r3, r3, #15
 800f620:	b25a      	sxtb	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	0a1b      	lsrs	r3, r3, #8
 800f626:	b25b      	sxtb	r3, r3
 800f628:	f003 030f 	and.w	r3, r3, #15
 800f62c:	b25b      	sxtb	r3, r3
 800f62e:	4313      	orrs	r3, r2
 800f630:	b25b      	sxtb	r3, r3
 800f632:	b2db      	uxtb	r3, r3
 800f634:	697a      	ldr	r2, [r7, #20]
 800f636:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2201      	movs	r2, #1
 800f63c:	70da      	strb	r2, [r3, #3]
			break;
 800f63e:	e057      	b.n	800f6f0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6a1a      	ldr	r2, [r3, #32]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	0a1b      	lsrs	r3, r3, #8
 800f648:	4413      	add	r3, r2
 800f64a:	4619      	mov	r1, r3
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f7ff fe07 	bl	800f260 <move_window>
 800f652:	4603      	mov	r3, r0
 800f654:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f656:	7ffb      	ldrb	r3, [r7, #31]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d146      	bne.n	800f6ea <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f66a:	4413      	add	r3, r2
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	b292      	uxth	r2, r2
 800f670:	4611      	mov	r1, r2
 800f672:	4618      	mov	r0, r3
 800f674:	f7ff fb7f 	bl	800ed76 <st_word>
			fs->wflag = 1;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2201      	movs	r2, #1
 800f67c:	70da      	strb	r2, [r3, #3]
			break;
 800f67e:	e037      	b.n	800f6f0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6a1a      	ldr	r2, [r3, #32]
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	09db      	lsrs	r3, r3, #7
 800f688:	4413      	add	r3, r2
 800f68a:	4619      	mov	r1, r3
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f7ff fde7 	bl	800f260 <move_window>
 800f692:	4603      	mov	r3, r0
 800f694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f696:	7ffb      	ldrb	r3, [r7, #31]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d128      	bne.n	800f6ee <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f6b0:	4413      	add	r3, r2
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7ff fb3c 	bl	800ed30 <ld_dword>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f6be:	4323      	orrs	r3, r4
 800f6c0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f6d0:	4413      	add	r3, r2
 800f6d2:	6879      	ldr	r1, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7ff fb69 	bl	800edac <st_dword>
			fs->wflag = 1;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	70da      	strb	r2, [r3, #3]
			break;
 800f6e0:	e006      	b.n	800f6f0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f6e2:	bf00      	nop
 800f6e4:	e004      	b.n	800f6f0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f6e6:	bf00      	nop
 800f6e8:	e002      	b.n	800f6f0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f6ea:	bf00      	nop
 800f6ec:	e000      	b.n	800f6f0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f6ee:	bf00      	nop
		}
	}
	return res;
 800f6f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3724      	adds	r7, #36	; 0x24
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd90      	pop	{r4, r7, pc}

0800f6fa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b088      	sub	sp, #32
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	60f8      	str	r0, [r7, #12]
 800f702:	60b9      	str	r1, [r7, #8]
 800f704:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f706:	2300      	movs	r3, #0
 800f708:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d904      	bls.n	800f720 <remove_chain+0x26>
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	695b      	ldr	r3, [r3, #20]
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d301      	bcc.n	800f724 <remove_chain+0x2a>
 800f720:	2302      	movs	r3, #2
 800f722:	e04b      	b.n	800f7bc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00c      	beq.n	800f744 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f72a:	f04f 32ff 	mov.w	r2, #4294967295
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	69b8      	ldr	r0, [r7, #24]
 800f732:	f7ff fef8 	bl	800f526 <put_fat>
 800f736:	4603      	mov	r3, r0
 800f738:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f73a:	7ffb      	ldrb	r3, [r7, #31]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d001      	beq.n	800f744 <remove_chain+0x4a>
 800f740:	7ffb      	ldrb	r3, [r7, #31]
 800f742:	e03b      	b.n	800f7bc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f744:	68b9      	ldr	r1, [r7, #8]
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f7ff fe45 	bl	800f3d6 <get_fat>
 800f74c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d031      	beq.n	800f7b8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d101      	bne.n	800f75e <remove_chain+0x64>
 800f75a:	2302      	movs	r3, #2
 800f75c:	e02e      	b.n	800f7bc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f764:	d101      	bne.n	800f76a <remove_chain+0x70>
 800f766:	2301      	movs	r3, #1
 800f768:	e028      	b.n	800f7bc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f76a:	2200      	movs	r2, #0
 800f76c:	68b9      	ldr	r1, [r7, #8]
 800f76e:	69b8      	ldr	r0, [r7, #24]
 800f770:	f7ff fed9 	bl	800f526 <put_fat>
 800f774:	4603      	mov	r3, r0
 800f776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f778:	7ffb      	ldrb	r3, [r7, #31]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <remove_chain+0x88>
 800f77e:	7ffb      	ldrb	r3, [r7, #31]
 800f780:	e01c      	b.n	800f7bc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	691a      	ldr	r2, [r3, #16]
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	3b02      	subs	r3, #2
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d20b      	bcs.n	800f7a8 <remove_chain+0xae>
			fs->free_clst++;
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	691b      	ldr	r3, [r3, #16]
 800f794:	1c5a      	adds	r2, r3, #1
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	791b      	ldrb	r3, [r3, #4]
 800f79e:	f043 0301 	orr.w	r3, r3, #1
 800f7a2:	b2da      	uxtb	r2, r3
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	68ba      	ldr	r2, [r7, #8]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d3c6      	bcc.n	800f744 <remove_chain+0x4a>
 800f7b6:	e000      	b.n	800f7ba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f7b8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3720      	adds	r7, #32
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b088      	sub	sp, #32
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10d      	bne.n	800f7f6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d004      	beq.n	800f7f0 <create_chain+0x2c>
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	695b      	ldr	r3, [r3, #20]
 800f7ea:	69ba      	ldr	r2, [r7, #24]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d31b      	bcc.n	800f828 <create_chain+0x64>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	61bb      	str	r3, [r7, #24]
 800f7f4:	e018      	b.n	800f828 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff fdec 	bl	800f3d6 <get_fat>
 800f7fe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d801      	bhi.n	800f80a <create_chain+0x46>
 800f806:	2301      	movs	r3, #1
 800f808:	e070      	b.n	800f8ec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f810:	d101      	bne.n	800f816 <create_chain+0x52>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	e06a      	b.n	800f8ec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d201      	bcs.n	800f824 <create_chain+0x60>
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	e063      	b.n	800f8ec <create_chain+0x128>
		scl = clst;
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	3301      	adds	r3, #1
 800f830:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	695b      	ldr	r3, [r3, #20]
 800f836:	69fa      	ldr	r2, [r7, #28]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d307      	bcc.n	800f84c <create_chain+0x88>
				ncl = 2;
 800f83c:	2302      	movs	r3, #2
 800f83e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f840:	69fa      	ldr	r2, [r7, #28]
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	429a      	cmp	r2, r3
 800f846:	d901      	bls.n	800f84c <create_chain+0x88>
 800f848:	2300      	movs	r3, #0
 800f84a:	e04f      	b.n	800f8ec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f84c:	69f9      	ldr	r1, [r7, #28]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff fdc1 	bl	800f3d6 <get_fat>
 800f854:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00e      	beq.n	800f87a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d003      	beq.n	800f86a <create_chain+0xa6>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f868:	d101      	bne.n	800f86e <create_chain+0xaa>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	e03e      	b.n	800f8ec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f86e:	69fa      	ldr	r2, [r7, #28]
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	429a      	cmp	r2, r3
 800f874:	d1da      	bne.n	800f82c <create_chain+0x68>
 800f876:	2300      	movs	r3, #0
 800f878:	e038      	b.n	800f8ec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f87a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f87c:	f04f 32ff 	mov.w	r2, #4294967295
 800f880:	69f9      	ldr	r1, [r7, #28]
 800f882:	6938      	ldr	r0, [r7, #16]
 800f884:	f7ff fe4f 	bl	800f526 <put_fat>
 800f888:	4603      	mov	r3, r0
 800f88a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f88c:	7dfb      	ldrb	r3, [r7, #23]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d109      	bne.n	800f8a6 <create_chain+0xe2>
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d006      	beq.n	800f8a6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f898:	69fa      	ldr	r2, [r7, #28]
 800f89a:	6839      	ldr	r1, [r7, #0]
 800f89c:	6938      	ldr	r0, [r7, #16]
 800f89e:	f7ff fe42 	bl	800f526 <put_fat>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f8a6:	7dfb      	ldrb	r3, [r7, #23]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d116      	bne.n	800f8da <create_chain+0x116>
		fs->last_clst = ncl;
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	69fa      	ldr	r2, [r7, #28]
 800f8b0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	691a      	ldr	r2, [r3, #16]
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	3b02      	subs	r3, #2
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d804      	bhi.n	800f8ca <create_chain+0x106>
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	1e5a      	subs	r2, r3, #1
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	791b      	ldrb	r3, [r3, #4]
 800f8ce:	f043 0301 	orr.w	r3, r3, #1
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	711a      	strb	r2, [r3, #4]
 800f8d8:	e007      	b.n	800f8ea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d102      	bne.n	800f8e6 <create_chain+0x122>
 800f8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8e4:	e000      	b.n	800f8e8 <create_chain+0x124>
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f8ea:	69fb      	ldr	r3, [r7, #28]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3720      	adds	r7, #32
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f908:	3304      	adds	r3, #4
 800f90a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	0a5b      	lsrs	r3, r3, #9
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	8952      	ldrh	r2, [r2, #10]
 800f914:	fbb3 f3f2 	udiv	r3, r3, r2
 800f918:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	1d1a      	adds	r2, r3, #4
 800f91e:	613a      	str	r2, [r7, #16]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <clmt_clust+0x3a>
 800f92a:	2300      	movs	r3, #0
 800f92c:	e010      	b.n	800f950 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f92e:	697a      	ldr	r2, [r7, #20]
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	429a      	cmp	r2, r3
 800f934:	d307      	bcc.n	800f946 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	617b      	str	r3, [r7, #20]
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	3304      	adds	r3, #4
 800f942:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f944:	e7e9      	b.n	800f91a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f946:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	4413      	add	r3, r2
}
 800f950:	4618      	mov	r0, r3
 800f952:	371c      	adds	r7, #28
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f972:	d204      	bcs.n	800f97e <dir_sdi+0x22>
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	f003 031f 	and.w	r3, r3, #31
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d001      	beq.n	800f982 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f97e:	2302      	movs	r3, #2
 800f980:	e063      	b.n	800fa4a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	683a      	ldr	r2, [r7, #0]
 800f986:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <dir_sdi+0x46>
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b02      	cmp	r3, #2
 800f99a:	d902      	bls.n	800f9a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10c      	bne.n	800f9c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	095b      	lsrs	r3, r3, #5
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	8912      	ldrh	r2, [r2, #8]
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d301      	bcc.n	800f9b8 <dir_sdi+0x5c>
 800f9b4:	2302      	movs	r3, #2
 800f9b6:	e048      	b.n	800fa4a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	61da      	str	r2, [r3, #28]
 800f9c0:	e029      	b.n	800fa16 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	895b      	ldrh	r3, [r3, #10]
 800f9c6:	025b      	lsls	r3, r3, #9
 800f9c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f9ca:	e019      	b.n	800fa00 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6979      	ldr	r1, [r7, #20]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff fd00 	bl	800f3d6 <get_fat>
 800f9d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9de:	d101      	bne.n	800f9e4 <dir_sdi+0x88>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e032      	b.n	800fa4a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d904      	bls.n	800f9f4 <dir_sdi+0x98>
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	695b      	ldr	r3, [r3, #20]
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d301      	bcc.n	800f9f8 <dir_sdi+0x9c>
 800f9f4:	2302      	movs	r3, #2
 800f9f6:	e028      	b.n	800fa4a <dir_sdi+0xee>
			ofs -= csz;
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	1ad3      	subs	r3, r2, r3
 800f9fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fa00:	683a      	ldr	r2, [r7, #0]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d2e1      	bcs.n	800f9cc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800fa08:	6979      	ldr	r1, [r7, #20]
 800fa0a:	6938      	ldr	r0, [r7, #16]
 800fa0c:	f7ff fcc4 	bl	800f398 <clust2sect>
 800fa10:	4602      	mov	r2, r0
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	69db      	ldr	r3, [r3, #28]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <dir_sdi+0xcc>
 800fa24:	2302      	movs	r3, #2
 800fa26:	e010      	b.n	800fa4a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	69da      	ldr	r2, [r3, #28]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	0a5b      	lsrs	r3, r3, #9
 800fa30:	441a      	add	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa42:	441a      	add	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3718      	adds	r7, #24
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b086      	sub	sp, #24
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
 800fa5a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	695b      	ldr	r3, [r3, #20]
 800fa66:	3320      	adds	r3, #32
 800fa68:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	69db      	ldr	r3, [r3, #28]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d003      	beq.n	800fa7a <dir_next+0x28>
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa78:	d301      	bcc.n	800fa7e <dir_next+0x2c>
 800fa7a:	2304      	movs	r3, #4
 800fa7c:	e0aa      	b.n	800fbd4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f040 8098 	bne.w	800fbba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	1c5a      	adds	r2, r3, #1
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	095b      	lsrs	r3, r3, #5
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	8912      	ldrh	r2, [r2, #8]
 800faa4:	4293      	cmp	r3, r2
 800faa6:	f0c0 8088 	bcc.w	800fbba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	61da      	str	r2, [r3, #28]
 800fab0:	2304      	movs	r3, #4
 800fab2:	e08f      	b.n	800fbd4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	0a5b      	lsrs	r3, r3, #9
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	8952      	ldrh	r2, [r2, #10]
 800fabc:	3a01      	subs	r2, #1
 800fabe:	4013      	ands	r3, r2
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d17a      	bne.n	800fbba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	4619      	mov	r1, r3
 800facc:	4610      	mov	r0, r2
 800face:	f7ff fc82 	bl	800f3d6 <get_fat>
 800fad2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d801      	bhi.n	800fade <dir_next+0x8c>
 800fada:	2302      	movs	r3, #2
 800fadc:	e07a      	b.n	800fbd4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae4:	d101      	bne.n	800faea <dir_next+0x98>
 800fae6:	2301      	movs	r3, #1
 800fae8:	e074      	b.n	800fbd4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d358      	bcc.n	800fba6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d104      	bne.n	800fb04 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	61da      	str	r2, [r3, #28]
 800fb00:	2304      	movs	r3, #4
 800fb02:	e067      	b.n	800fbd4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	699b      	ldr	r3, [r3, #24]
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	f7ff fe59 	bl	800f7c4 <create_chain>
 800fb12:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <dir_next+0xcc>
 800fb1a:	2307      	movs	r3, #7
 800fb1c:	e05a      	b.n	800fbd4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d101      	bne.n	800fb28 <dir_next+0xd6>
 800fb24:	2302      	movs	r3, #2
 800fb26:	e055      	b.n	800fbd4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb2e:	d101      	bne.n	800fb34 <dir_next+0xe2>
 800fb30:	2301      	movs	r3, #1
 800fb32:	e04f      	b.n	800fbd4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f7ff fb4f 	bl	800f1d8 <sync_window>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d001      	beq.n	800fb44 <dir_next+0xf2>
 800fb40:	2301      	movs	r3, #1
 800fb42:	e047      	b.n	800fbd4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3330      	adds	r3, #48	; 0x30
 800fb48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff f979 	bl	800ee46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]
 800fb58:	6979      	ldr	r1, [r7, #20]
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f7ff fc1c 	bl	800f398 <clust2sect>
 800fb60:	4602      	mov	r2, r0
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb66:	e012      	b.n	800fb8e <dir_next+0x13c>
						fs->wflag = 1;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	f7ff fb32 	bl	800f1d8 <sync_window>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <dir_next+0x12c>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e02a      	b.n	800fbd4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	3301      	adds	r3, #1
 800fb82:	613b      	str	r3, [r7, #16]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb88:	1c5a      	adds	r2, r3, #1
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	895b      	ldrh	r3, [r3, #10]
 800fb92:	461a      	mov	r2, r3
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d3e6      	bcc.n	800fb68 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	1ad2      	subs	r2, r2, r3
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	697a      	ldr	r2, [r7, #20]
 800fbaa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fbac:	6979      	ldr	r1, [r7, #20]
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f7ff fbf2 	bl	800f398 <clust2sect>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68ba      	ldr	r2, [r7, #8]
 800fbbe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbcc:	441a      	add	r2, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3718      	adds	r7, #24
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b086      	sub	sp, #24
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fbec:	2100      	movs	r1, #0
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7ff feb4 	bl	800f95c <dir_sdi>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fbf8:	7dfb      	ldrb	r3, [r7, #23]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d12b      	bne.n	800fc56 <dir_alloc+0x7a>
		n = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	69db      	ldr	r3, [r3, #28]
 800fc06:	4619      	mov	r1, r3
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fb29 	bl	800f260 <move_window>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc12:	7dfb      	ldrb	r3, [r7, #23]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d11d      	bne.n	800fc54 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6a1b      	ldr	r3, [r3, #32]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	2be5      	cmp	r3, #229	; 0xe5
 800fc20:	d004      	beq.n	800fc2c <dir_alloc+0x50>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d107      	bne.n	800fc3c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	613b      	str	r3, [r7, #16]
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d102      	bne.n	800fc40 <dir_alloc+0x64>
 800fc3a:	e00c      	b.n	800fc56 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fc40:	2101      	movs	r1, #1
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7ff ff05 	bl	800fa52 <dir_next>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fc4c:	7dfb      	ldrb	r3, [r7, #23]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d0d7      	beq.n	800fc02 <dir_alloc+0x26>
 800fc52:	e000      	b.n	800fc56 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fc54:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fc56:	7dfb      	ldrb	r3, [r7, #23]
 800fc58:	2b04      	cmp	r3, #4
 800fc5a:	d101      	bne.n	800fc60 <dir_alloc+0x84>
 800fc5c:	2307      	movs	r3, #7
 800fc5e:	75fb      	strb	r3, [r7, #23]
	return res;
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3718      	adds	r7, #24
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	331a      	adds	r3, #26
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff f841 	bl	800ed00 <ld_word>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	2b03      	cmp	r3, #3
 800fc88:	d109      	bne.n	800fc9e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	3314      	adds	r3, #20
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7ff f836 	bl	800ed00 <ld_word>
 800fc94:	4603      	mov	r3, r0
 800fc96:	041b      	lsls	r3, r3, #16
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	331a      	adds	r3, #26
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	b292      	uxth	r2, r2
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff f859 	bl	800ed76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	2b03      	cmp	r3, #3
 800fcca:	d109      	bne.n	800fce0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	f103 0214 	add.w	r2, r3, #20
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	0c1b      	lsrs	r3, r3, #16
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7ff f84b 	bl	800ed76 <st_word>
	}
}
 800fce0:	bf00      	nop
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b086      	sub	sp, #24
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff fe2f 	bl	800f95c <dir_sdi>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fd02:	7dfb      	ldrb	r3, [r7, #23]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <dir_find+0x24>
 800fd08:	7dfb      	ldrb	r3, [r7, #23]
 800fd0a:	e03e      	b.n	800fd8a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	69db      	ldr	r3, [r3, #28]
 800fd10:	4619      	mov	r1, r3
 800fd12:	6938      	ldr	r0, [r7, #16]
 800fd14:	f7ff faa4 	bl	800f260 <move_window>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd1c:	7dfb      	ldrb	r3, [r7, #23]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d12f      	bne.n	800fd82 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a1b      	ldr	r3, [r3, #32]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d102      	bne.n	800fd36 <dir_find+0x4e>
 800fd30:	2304      	movs	r3, #4
 800fd32:	75fb      	strb	r3, [r7, #23]
 800fd34:	e028      	b.n	800fd88 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	330b      	adds	r3, #11
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a1b      	ldr	r3, [r3, #32]
 800fd4c:	330b      	adds	r3, #11
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 0308 	and.w	r3, r3, #8
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d10a      	bne.n	800fd6e <dir_find+0x86>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6a18      	ldr	r0, [r3, #32]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3324      	adds	r3, #36	; 0x24
 800fd60:	220b      	movs	r2, #11
 800fd62:	4619      	mov	r1, r3
 800fd64:	f7ff f88a 	bl	800ee7c <mem_cmp>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00b      	beq.n	800fd86 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fd6e:	2100      	movs	r1, #0
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7ff fe6e 	bl	800fa52 <dir_next>
 800fd76:	4603      	mov	r3, r0
 800fd78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d0c5      	beq.n	800fd0c <dir_find+0x24>
 800fd80:	e002      	b.n	800fd88 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fd82:	bf00      	nop
 800fd84:	e000      	b.n	800fd88 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd86:	bf00      	nop

	return res;
 800fd88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b084      	sub	sp, #16
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fda0:	2101      	movs	r1, #1
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff ff1a 	bl	800fbdc <dir_alloc>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d11c      	bne.n	800fdec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	69db      	ldr	r3, [r3, #28]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	68b8      	ldr	r0, [r7, #8]
 800fdba:	f7ff fa51 	bl	800f260 <move_window>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d111      	bne.n	800fdec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	2220      	movs	r2, #32
 800fdce:	2100      	movs	r1, #0
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7ff f838 	bl	800ee46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a18      	ldr	r0, [r3, #32]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3324      	adds	r3, #36	; 0x24
 800fdde:	220b      	movs	r2, #11
 800fde0:	4619      	mov	r1, r3
 800fde2:	f7ff f80f 	bl	800ee04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2201      	movs	r2, #1
 800fdea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
	...

0800fdf8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b088      	sub	sp, #32
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	60fb      	str	r3, [r7, #12]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	3324      	adds	r3, #36	; 0x24
 800fe0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fe0e:	220b      	movs	r2, #11
 800fe10:	2120      	movs	r1, #32
 800fe12:	68b8      	ldr	r0, [r7, #8]
 800fe14:	f7ff f817 	bl	800ee46 <mem_set>
	si = i = 0; ni = 8;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	613b      	str	r3, [r7, #16]
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	61fb      	str	r3, [r7, #28]
 800fe20:	2308      	movs	r3, #8
 800fe22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	1c5a      	adds	r2, r3, #1
 800fe28:	61fa      	str	r2, [r7, #28]
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fe32:	7efb      	ldrb	r3, [r7, #27]
 800fe34:	2b20      	cmp	r3, #32
 800fe36:	d94e      	bls.n	800fed6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fe38:	7efb      	ldrb	r3, [r7, #27]
 800fe3a:	2b2f      	cmp	r3, #47	; 0x2f
 800fe3c:	d006      	beq.n	800fe4c <create_name+0x54>
 800fe3e:	7efb      	ldrb	r3, [r7, #27]
 800fe40:	2b5c      	cmp	r3, #92	; 0x5c
 800fe42:	d110      	bne.n	800fe66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fe44:	e002      	b.n	800fe4c <create_name+0x54>
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	61fb      	str	r3, [r7, #28]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	4413      	add	r3, r2
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	2b2f      	cmp	r3, #47	; 0x2f
 800fe56:	d0f6      	beq.n	800fe46 <create_name+0x4e>
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b5c      	cmp	r3, #92	; 0x5c
 800fe62:	d0f0      	beq.n	800fe46 <create_name+0x4e>
			break;
 800fe64:	e038      	b.n	800fed8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fe66:	7efb      	ldrb	r3, [r7, #27]
 800fe68:	2b2e      	cmp	r3, #46	; 0x2e
 800fe6a:	d003      	beq.n	800fe74 <create_name+0x7c>
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d30c      	bcc.n	800fe8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	2b0b      	cmp	r3, #11
 800fe78:	d002      	beq.n	800fe80 <create_name+0x88>
 800fe7a:	7efb      	ldrb	r3, [r7, #27]
 800fe7c:	2b2e      	cmp	r3, #46	; 0x2e
 800fe7e:	d001      	beq.n	800fe84 <create_name+0x8c>
 800fe80:	2306      	movs	r3, #6
 800fe82:	e044      	b.n	800ff0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fe84:	2308      	movs	r3, #8
 800fe86:	613b      	str	r3, [r7, #16]
 800fe88:	230b      	movs	r3, #11
 800fe8a:	617b      	str	r3, [r7, #20]
			continue;
 800fe8c:	e022      	b.n	800fed4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fe8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	da04      	bge.n	800fea0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fe96:	7efb      	ldrb	r3, [r7, #27]
 800fe98:	3b80      	subs	r3, #128	; 0x80
 800fe9a:	4a1f      	ldr	r2, [pc, #124]	; (800ff18 <create_name+0x120>)
 800fe9c:	5cd3      	ldrb	r3, [r2, r3]
 800fe9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fea0:	7efb      	ldrb	r3, [r7, #27]
 800fea2:	4619      	mov	r1, r3
 800fea4:	481d      	ldr	r0, [pc, #116]	; (800ff1c <create_name+0x124>)
 800fea6:	f7ff f810 	bl	800eeca <chk_chr>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <create_name+0xbc>
 800feb0:	2306      	movs	r3, #6
 800feb2:	e02c      	b.n	800ff0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800feb4:	7efb      	ldrb	r3, [r7, #27]
 800feb6:	2b60      	cmp	r3, #96	; 0x60
 800feb8:	d905      	bls.n	800fec6 <create_name+0xce>
 800feba:	7efb      	ldrb	r3, [r7, #27]
 800febc:	2b7a      	cmp	r3, #122	; 0x7a
 800febe:	d802      	bhi.n	800fec6 <create_name+0xce>
 800fec0:	7efb      	ldrb	r3, [r7, #27]
 800fec2:	3b20      	subs	r3, #32
 800fec4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	1c5a      	adds	r2, r3, #1
 800feca:	613a      	str	r2, [r7, #16]
 800fecc:	68ba      	ldr	r2, [r7, #8]
 800fece:	4413      	add	r3, r2
 800fed0:	7efa      	ldrb	r2, [r7, #27]
 800fed2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fed4:	e7a6      	b.n	800fe24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fed6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	441a      	add	r2, r3
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <create_name+0xf4>
 800fee8:	2306      	movs	r3, #6
 800feea:	e010      	b.n	800ff0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2be5      	cmp	r3, #229	; 0xe5
 800fef2:	d102      	bne.n	800fefa <create_name+0x102>
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	2205      	movs	r2, #5
 800fef8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fefa:	7efb      	ldrb	r3, [r7, #27]
 800fefc:	2b20      	cmp	r3, #32
 800fefe:	d801      	bhi.n	800ff04 <create_name+0x10c>
 800ff00:	2204      	movs	r2, #4
 800ff02:	e000      	b.n	800ff06 <create_name+0x10e>
 800ff04:	2200      	movs	r2, #0
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	330b      	adds	r3, #11
 800ff0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ff0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3720      	adds	r7, #32
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08017014 	.word	0x08017014
 800ff1c:	08016d2c 	.word	0x08016d2c

0800ff20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ff34:	e002      	b.n	800ff3c <follow_path+0x1c>
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	603b      	str	r3, [r7, #0]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	2b2f      	cmp	r3, #47	; 0x2f
 800ff42:	d0f8      	beq.n	800ff36 <follow_path+0x16>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	2b5c      	cmp	r3, #92	; 0x5c
 800ff4a:	d0f4      	beq.n	800ff36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b1f      	cmp	r3, #31
 800ff58:	d80a      	bhi.n	800ff70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2280      	movs	r2, #128	; 0x80
 800ff5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ff62:	2100      	movs	r1, #0
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff fcf9 	bl	800f95c <dir_sdi>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	75fb      	strb	r3, [r7, #23]
 800ff6e:	e043      	b.n	800fff8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff70:	463b      	mov	r3, r7
 800ff72:	4619      	mov	r1, r3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7ff ff3f 	bl	800fdf8 <create_name>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d134      	bne.n	800ffee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f7ff feaf 	bl	800fce8 <dir_find>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ff94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00a      	beq.n	800ffb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ff9c:	7dfb      	ldrb	r3, [r7, #23]
 800ff9e:	2b04      	cmp	r3, #4
 800ffa0:	d127      	bne.n	800fff2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ffa2:	7afb      	ldrb	r3, [r7, #11]
 800ffa4:	f003 0304 	and.w	r3, r3, #4
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d122      	bne.n	800fff2 <follow_path+0xd2>
 800ffac:	2305      	movs	r3, #5
 800ffae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ffb0:	e01f      	b.n	800fff2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ffb2:	7afb      	ldrb	r3, [r7, #11]
 800ffb4:	f003 0304 	and.w	r3, r3, #4
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d11c      	bne.n	800fff6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	799b      	ldrb	r3, [r3, #6]
 800ffc0:	f003 0310 	and.w	r3, r3, #16
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d102      	bne.n	800ffce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ffc8:	2305      	movs	r3, #5
 800ffca:	75fb      	strb	r3, [r7, #23]
 800ffcc:	e014      	b.n	800fff8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	695b      	ldr	r3, [r3, #20]
 800ffd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffdc:	4413      	add	r3, r2
 800ffde:	4619      	mov	r1, r3
 800ffe0:	68f8      	ldr	r0, [r7, #12]
 800ffe2:	f7ff fe42 	bl	800fc6a <ld_clust>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ffec:	e7c0      	b.n	800ff70 <follow_path+0x50>
			if (res != FR_OK) break;
 800ffee:	bf00      	nop
 800fff0:	e002      	b.n	800fff8 <follow_path+0xd8>
				break;
 800fff2:	bf00      	nop
 800fff4:	e000      	b.n	800fff8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fff6:	bf00      	nop
			}
		}
	}

	return res;
 800fff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3718      	adds	r7, #24
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010002:	b480      	push	{r7}
 8010004:	b087      	sub	sp, #28
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801000a:	f04f 33ff 	mov.w	r3, #4294967295
 801000e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d031      	beq.n	801007c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	617b      	str	r3, [r7, #20]
 801001e:	e002      	b.n	8010026 <get_ldnumber+0x24>
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	3301      	adds	r3, #1
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b20      	cmp	r3, #32
 801002c:	d903      	bls.n	8010036 <get_ldnumber+0x34>
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2b3a      	cmp	r3, #58	; 0x3a
 8010034:	d1f4      	bne.n	8010020 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	2b3a      	cmp	r3, #58	; 0x3a
 801003c:	d11c      	bne.n	8010078 <get_ldnumber+0x76>
			tp = *path;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	1c5a      	adds	r2, r3, #1
 8010048:	60fa      	str	r2, [r7, #12]
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	3b30      	subs	r3, #48	; 0x30
 801004e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2b09      	cmp	r3, #9
 8010054:	d80e      	bhi.n	8010074 <get_ldnumber+0x72>
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	429a      	cmp	r2, r3
 801005c:	d10a      	bne.n	8010074 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d107      	bne.n	8010074 <get_ldnumber+0x72>
					vol = (int)i;
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	3301      	adds	r3, #1
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	e002      	b.n	801007e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010078:	2300      	movs	r3, #0
 801007a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801007c:	693b      	ldr	r3, [r7, #16]
}
 801007e:	4618      	mov	r0, r3
 8010080:	371c      	adds	r7, #28
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
	...

0801008c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	70da      	strb	r2, [r3, #3]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f04f 32ff 	mov.w	r2, #4294967295
 80100a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7ff f8da 	bl	800f260 <move_window>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <check_fs+0x2a>
 80100b2:	2304      	movs	r3, #4
 80100b4:	e038      	b.n	8010128 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	3330      	adds	r3, #48	; 0x30
 80100ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe fe1e 	bl	800ed00 <ld_word>
 80100c4:	4603      	mov	r3, r0
 80100c6:	461a      	mov	r2, r3
 80100c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d001      	beq.n	80100d4 <check_fs+0x48>
 80100d0:	2303      	movs	r3, #3
 80100d2:	e029      	b.n	8010128 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100da:	2be9      	cmp	r3, #233	; 0xe9
 80100dc:	d009      	beq.n	80100f2 <check_fs+0x66>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100e4:	2beb      	cmp	r3, #235	; 0xeb
 80100e6:	d11e      	bne.n	8010126 <check_fs+0x9a>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80100ee:	2b90      	cmp	r3, #144	; 0x90
 80100f0:	d119      	bne.n	8010126 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	3330      	adds	r3, #48	; 0x30
 80100f6:	3336      	adds	r3, #54	; 0x36
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fe fe19 	bl	800ed30 <ld_dword>
 80100fe:	4603      	mov	r3, r0
 8010100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010104:	4a0a      	ldr	r2, [pc, #40]	; (8010130 <check_fs+0xa4>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d101      	bne.n	801010e <check_fs+0x82>
 801010a:	2300      	movs	r3, #0
 801010c:	e00c      	b.n	8010128 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	3330      	adds	r3, #48	; 0x30
 8010112:	3352      	adds	r3, #82	; 0x52
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe fe0b 	bl	800ed30 <ld_dword>
 801011a:	4603      	mov	r3, r0
 801011c:	4a05      	ldr	r2, [pc, #20]	; (8010134 <check_fs+0xa8>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d101      	bne.n	8010126 <check_fs+0x9a>
 8010122:	2300      	movs	r3, #0
 8010124:	e000      	b.n	8010128 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010126:	2302      	movs	r3, #2
}
 8010128:	4618      	mov	r0, r3
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	00544146 	.word	0x00544146
 8010134:	33544146 	.word	0x33544146

08010138 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b096      	sub	sp, #88	; 0x58
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	4613      	mov	r3, r2
 8010144:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	2200      	movs	r2, #0
 801014a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f7ff ff58 	bl	8010002 <get_ldnumber>
 8010152:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010156:	2b00      	cmp	r3, #0
 8010158:	da01      	bge.n	801015e <find_volume+0x26>
 801015a:	230b      	movs	r3, #11
 801015c:	e22d      	b.n	80105ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801015e:	4aa1      	ldr	r2, [pc, #644]	; (80103e4 <find_volume+0x2ac>)
 8010160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010166:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <find_volume+0x3a>
 801016e:	230c      	movs	r3, #12
 8010170:	e223      	b.n	80105ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010176:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	f023 0301 	bic.w	r3, r3, #1
 801017e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d01a      	beq.n	80101be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018a:	785b      	ldrb	r3, [r3, #1]
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fd19 	bl	800ebc4 <disk_status>
 8010192:	4603      	mov	r3, r0
 8010194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801019c:	f003 0301 	and.w	r3, r3, #1
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d10c      	bne.n	80101be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80101a4:	79fb      	ldrb	r3, [r7, #7]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d007      	beq.n	80101ba <find_volume+0x82>
 80101aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101ae:	f003 0304 	and.w	r3, r3, #4
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d001      	beq.n	80101ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80101b6:	230a      	movs	r3, #10
 80101b8:	e1ff      	b.n	80105ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80101ba:	2300      	movs	r3, #0
 80101bc:	e1fd      	b.n	80105ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80101be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c0:	2200      	movs	r2, #0
 80101c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80101c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c6:	b2da      	uxtb	r2, r3
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80101cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ce:	785b      	ldrb	r3, [r3, #1]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe fd11 	bl	800ebf8 <disk_initialize>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80101dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80101e8:	2303      	movs	r3, #3
 80101ea:	e1e6      	b.n	80105ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d007      	beq.n	8010202 <find_volume+0xca>
 80101f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101f6:	f003 0304 	and.w	r3, r3, #4
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80101fe:	230a      	movs	r3, #10
 8010200:	e1db      	b.n	80105ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801020a:	f7ff ff3f 	bl	801008c <check_fs>
 801020e:	4603      	mov	r3, r0
 8010210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010218:	2b02      	cmp	r3, #2
 801021a:	d149      	bne.n	80102b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801021c:	2300      	movs	r3, #0
 801021e:	643b      	str	r3, [r7, #64]	; 0x40
 8010220:	e01e      	b.n	8010260 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010224:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801022a:	011b      	lsls	r3, r3, #4
 801022c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010230:	4413      	add	r3, r2
 8010232:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010236:	3304      	adds	r3, #4
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d006      	beq.n	801024c <find_volume+0x114>
 801023e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010240:	3308      	adds	r3, #8
 8010242:	4618      	mov	r0, r3
 8010244:	f7fe fd74 	bl	800ed30 <ld_dword>
 8010248:	4602      	mov	r2, r0
 801024a:	e000      	b.n	801024e <find_volume+0x116>
 801024c:	2200      	movs	r2, #0
 801024e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	3358      	adds	r3, #88	; 0x58
 8010254:	443b      	add	r3, r7
 8010256:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801025a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801025c:	3301      	adds	r3, #1
 801025e:	643b      	str	r3, [r7, #64]	; 0x40
 8010260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010262:	2b03      	cmp	r3, #3
 8010264:	d9dd      	bls.n	8010222 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010266:	2300      	movs	r3, #0
 8010268:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801026a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801026c:	2b00      	cmp	r3, #0
 801026e:	d002      	beq.n	8010276 <find_volume+0x13e>
 8010270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010272:	3b01      	subs	r3, #1
 8010274:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	3358      	adds	r3, #88	; 0x58
 801027c:	443b      	add	r3, r7
 801027e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010282:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010286:	2b00      	cmp	r3, #0
 8010288:	d005      	beq.n	8010296 <find_volume+0x15e>
 801028a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801028c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801028e:	f7ff fefd 	bl	801008c <check_fs>
 8010292:	4603      	mov	r3, r0
 8010294:	e000      	b.n	8010298 <find_volume+0x160>
 8010296:	2303      	movs	r3, #3
 8010298:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801029c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d905      	bls.n	80102b0 <find_volume+0x178>
 80102a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a6:	3301      	adds	r3, #1
 80102a8:	643b      	str	r3, [r7, #64]	; 0x40
 80102aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ac:	2b03      	cmp	r3, #3
 80102ae:	d9e2      	bls.n	8010276 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80102b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102b4:	2b04      	cmp	r3, #4
 80102b6:	d101      	bne.n	80102bc <find_volume+0x184>
 80102b8:	2301      	movs	r3, #1
 80102ba:	e17e      	b.n	80105ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80102bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d901      	bls.n	80102c8 <find_volume+0x190>
 80102c4:	230d      	movs	r3, #13
 80102c6:	e178      	b.n	80105ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	3330      	adds	r3, #48	; 0x30
 80102cc:	330b      	adds	r3, #11
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe fd16 	bl	800ed00 <ld_word>
 80102d4:	4603      	mov	r3, r0
 80102d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102da:	d001      	beq.n	80102e0 <find_volume+0x1a8>
 80102dc:	230d      	movs	r3, #13
 80102de:	e16c      	b.n	80105ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	3330      	adds	r3, #48	; 0x30
 80102e4:	3316      	adds	r3, #22
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fd0a 	bl	800ed00 <ld_word>
 80102ec:	4603      	mov	r3, r0
 80102ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80102f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d106      	bne.n	8010304 <find_volume+0x1cc>
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	3330      	adds	r3, #48	; 0x30
 80102fa:	3324      	adds	r3, #36	; 0x24
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fe fd17 	bl	800ed30 <ld_dword>
 8010302:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010308:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801030a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010312:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010316:	789b      	ldrb	r3, [r3, #2]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d005      	beq.n	8010328 <find_volume+0x1f0>
 801031c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031e:	789b      	ldrb	r3, [r3, #2]
 8010320:	2b02      	cmp	r3, #2
 8010322:	d001      	beq.n	8010328 <find_volume+0x1f0>
 8010324:	230d      	movs	r3, #13
 8010326:	e148      	b.n	80105ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	789b      	ldrb	r3, [r3, #2]
 801032c:	461a      	mov	r2, r3
 801032e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010330:	fb02 f303 	mul.w	r3, r2, r3
 8010334:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801033c:	b29a      	uxth	r2, r3
 801033e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010340:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010344:	895b      	ldrh	r3, [r3, #10]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d008      	beq.n	801035c <find_volume+0x224>
 801034a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034c:	895b      	ldrh	r3, [r3, #10]
 801034e:	461a      	mov	r2, r3
 8010350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010352:	895b      	ldrh	r3, [r3, #10]
 8010354:	3b01      	subs	r3, #1
 8010356:	4013      	ands	r3, r2
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <find_volume+0x228>
 801035c:	230d      	movs	r3, #13
 801035e:	e12c      	b.n	80105ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	3330      	adds	r3, #48	; 0x30
 8010364:	3311      	adds	r3, #17
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe fcca 	bl	800ed00 <ld_word>
 801036c:	4603      	mov	r3, r0
 801036e:	461a      	mov	r2, r3
 8010370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010372:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010376:	891b      	ldrh	r3, [r3, #8]
 8010378:	f003 030f 	and.w	r3, r3, #15
 801037c:	b29b      	uxth	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <find_volume+0x24e>
 8010382:	230d      	movs	r3, #13
 8010384:	e119      	b.n	80105ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010388:	3330      	adds	r3, #48	; 0x30
 801038a:	3313      	adds	r3, #19
 801038c:	4618      	mov	r0, r3
 801038e:	f7fe fcb7 	bl	800ed00 <ld_word>
 8010392:	4603      	mov	r3, r0
 8010394:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010398:	2b00      	cmp	r3, #0
 801039a:	d106      	bne.n	80103aa <find_volume+0x272>
 801039c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039e:	3330      	adds	r3, #48	; 0x30
 80103a0:	3320      	adds	r3, #32
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fe fcc4 	bl	800ed30 <ld_dword>
 80103a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80103aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ac:	3330      	adds	r3, #48	; 0x30
 80103ae:	330e      	adds	r3, #14
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fe fca5 	bl	800ed00 <ld_word>
 80103b6:	4603      	mov	r3, r0
 80103b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80103ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <find_volume+0x28c>
 80103c0:	230d      	movs	r3, #13
 80103c2:	e0fa      	b.n	80105ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80103c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103c8:	4413      	add	r3, r2
 80103ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103cc:	8912      	ldrh	r2, [r2, #8]
 80103ce:	0912      	lsrs	r2, r2, #4
 80103d0:	b292      	uxth	r2, r2
 80103d2:	4413      	add	r3, r2
 80103d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80103d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103da:	429a      	cmp	r2, r3
 80103dc:	d204      	bcs.n	80103e8 <find_volume+0x2b0>
 80103de:	230d      	movs	r3, #13
 80103e0:	e0eb      	b.n	80105ba <find_volume+0x482>
 80103e2:	bf00      	nop
 80103e4:	20006d38 	.word	0x20006d38
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80103e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f0:	8952      	ldrh	r2, [r2, #10]
 80103f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80103f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80103f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d101      	bne.n	8010402 <find_volume+0x2ca>
 80103fe:	230d      	movs	r3, #13
 8010400:	e0db      	b.n	80105ba <find_volume+0x482>
		fmt = FS_FAT32;
 8010402:	2303      	movs	r3, #3
 8010404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801040e:	4293      	cmp	r3, r2
 8010410:	d802      	bhi.n	8010418 <find_volume+0x2e0>
 8010412:	2302      	movs	r3, #2
 8010414:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801041e:	4293      	cmp	r3, r2
 8010420:	d802      	bhi.n	8010428 <find_volume+0x2f0>
 8010422:	2301      	movs	r3, #1
 8010424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	1c9a      	adds	r2, r3, #2
 801042c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010432:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010434:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010436:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801043a:	441a      	add	r2, r3
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010440:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	441a      	add	r2, r3
 8010446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010448:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801044a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801044e:	2b03      	cmp	r3, #3
 8010450:	d11e      	bne.n	8010490 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010454:	3330      	adds	r3, #48	; 0x30
 8010456:	332a      	adds	r3, #42	; 0x2a
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe fc51 	bl	800ed00 <ld_word>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <find_volume+0x330>
 8010464:	230d      	movs	r3, #13
 8010466:	e0a8      	b.n	80105ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	891b      	ldrh	r3, [r3, #8]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d001      	beq.n	8010474 <find_volume+0x33c>
 8010470:	230d      	movs	r3, #13
 8010472:	e0a2      	b.n	80105ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010476:	3330      	adds	r3, #48	; 0x30
 8010478:	332c      	adds	r3, #44	; 0x2c
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fc58 	bl	800ed30 <ld_dword>
 8010480:	4602      	mov	r2, r0
 8010482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010484:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010488:	695b      	ldr	r3, [r3, #20]
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	647b      	str	r3, [r7, #68]	; 0x44
 801048e:	e01f      	b.n	80104d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010492:	891b      	ldrh	r3, [r3, #8]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d101      	bne.n	801049c <find_volume+0x364>
 8010498:	230d      	movs	r3, #13
 801049a:	e08e      	b.n	80105ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049e:	6a1a      	ldr	r2, [r3, #32]
 80104a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104a2:	441a      	add	r2, r3
 80104a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80104a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104ac:	2b02      	cmp	r3, #2
 80104ae:	d103      	bne.n	80104b8 <find_volume+0x380>
 80104b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	e00a      	b.n	80104ce <find_volume+0x396>
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	695a      	ldr	r2, [r3, #20]
 80104bc:	4613      	mov	r3, r2
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	4413      	add	r3, r2
 80104c2:	085a      	lsrs	r2, r3, #1
 80104c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	f003 0301 	and.w	r3, r3, #1
 80104cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80104ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80104d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d2:	699a      	ldr	r2, [r3, #24]
 80104d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80104da:	0a5b      	lsrs	r3, r3, #9
 80104dc:	429a      	cmp	r2, r3
 80104de:	d201      	bcs.n	80104e4 <find_volume+0x3ac>
 80104e0:	230d      	movs	r3, #13
 80104e2:	e06a      	b.n	80105ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80104e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ea:	611a      	str	r2, [r3, #16]
 80104ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ee:	691a      	ldr	r2, [r3, #16]
 80104f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	2280      	movs	r2, #128	; 0x80
 80104f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80104fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104fe:	2b03      	cmp	r3, #3
 8010500:	d149      	bne.n	8010596 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010504:	3330      	adds	r3, #48	; 0x30
 8010506:	3330      	adds	r3, #48	; 0x30
 8010508:	4618      	mov	r0, r3
 801050a:	f7fe fbf9 	bl	800ed00 <ld_word>
 801050e:	4603      	mov	r3, r0
 8010510:	2b01      	cmp	r3, #1
 8010512:	d140      	bne.n	8010596 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010516:	3301      	adds	r3, #1
 8010518:	4619      	mov	r1, r3
 801051a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801051c:	f7fe fea0 	bl	800f260 <move_window>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d137      	bne.n	8010596 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010528:	2200      	movs	r2, #0
 801052a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	3330      	adds	r3, #48	; 0x30
 8010530:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe fbe3 	bl	800ed00 <ld_word>
 801053a:	4603      	mov	r3, r0
 801053c:	461a      	mov	r2, r3
 801053e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010542:	429a      	cmp	r2, r3
 8010544:	d127      	bne.n	8010596 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	3330      	adds	r3, #48	; 0x30
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe fbf0 	bl	800ed30 <ld_dword>
 8010550:	4603      	mov	r3, r0
 8010552:	4a1c      	ldr	r2, [pc, #112]	; (80105c4 <find_volume+0x48c>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d11e      	bne.n	8010596 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	3330      	adds	r3, #48	; 0x30
 801055c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010560:	4618      	mov	r0, r3
 8010562:	f7fe fbe5 	bl	800ed30 <ld_dword>
 8010566:	4603      	mov	r3, r0
 8010568:	4a17      	ldr	r2, [pc, #92]	; (80105c8 <find_volume+0x490>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d113      	bne.n	8010596 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010570:	3330      	adds	r3, #48	; 0x30
 8010572:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe fbda 	bl	800ed30 <ld_dword>
 801057c:	4602      	mov	r2, r0
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010584:	3330      	adds	r3, #48	; 0x30
 8010586:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801058a:	4618      	mov	r0, r3
 801058c:	f7fe fbd0 	bl	800ed30 <ld_dword>
 8010590:	4602      	mov	r2, r0
 8010592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010594:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801059c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801059e:	4b0b      	ldr	r3, [pc, #44]	; (80105cc <find_volume+0x494>)
 80105a0:	881b      	ldrh	r3, [r3, #0]
 80105a2:	3301      	adds	r3, #1
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	4b09      	ldr	r3, [pc, #36]	; (80105cc <find_volume+0x494>)
 80105a8:	801a      	strh	r2, [r3, #0]
 80105aa:	4b08      	ldr	r3, [pc, #32]	; (80105cc <find_volume+0x494>)
 80105ac:	881a      	ldrh	r2, [r3, #0]
 80105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80105b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105b4:	f7fe fdec 	bl	800f190 <clear_lock>
#endif
	return FR_OK;
 80105b8:	2300      	movs	r3, #0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3758      	adds	r7, #88	; 0x58
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	41615252 	.word	0x41615252
 80105c8:	61417272 	.word	0x61417272
 80105cc:	20006d3c 	.word	0x20006d3c

080105d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80105da:	2309      	movs	r3, #9
 80105dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d01c      	beq.n	801061e <validate+0x4e>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d018      	beq.n	801061e <validate+0x4e>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d013      	beq.n	801061e <validate+0x4e>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	889a      	ldrh	r2, [r3, #4]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	88db      	ldrh	r3, [r3, #6]
 8010600:	429a      	cmp	r2, r3
 8010602:	d10c      	bne.n	801061e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	785b      	ldrb	r3, [r3, #1]
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe fada 	bl	800ebc4 <disk_status>
 8010610:	4603      	mov	r3, r0
 8010612:	f003 0301 	and.w	r3, r3, #1
 8010616:	2b00      	cmp	r3, #0
 8010618:	d101      	bne.n	801061e <validate+0x4e>
			res = FR_OK;
 801061a:	2300      	movs	r3, #0
 801061c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801061e:	7bfb      	ldrb	r3, [r7, #15]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d102      	bne.n	801062a <validate+0x5a>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	e000      	b.n	801062c <validate+0x5c>
 801062a:	2300      	movs	r3, #0
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	6013      	str	r3, [r2, #0]
	return res;
 8010630:	7bfb      	ldrb	r3, [r7, #15]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
	...

0801063c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b088      	sub	sp, #32
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4613      	mov	r3, r2
 8010648:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801064e:	f107 0310 	add.w	r3, r7, #16
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff fcd5 	bl	8010002 <get_ldnumber>
 8010658:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	2b00      	cmp	r3, #0
 801065e:	da01      	bge.n	8010664 <f_mount+0x28>
 8010660:	230b      	movs	r3, #11
 8010662:	e02b      	b.n	80106bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010664:	4a17      	ldr	r2, [pc, #92]	; (80106c4 <f_mount+0x88>)
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801066c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d005      	beq.n	8010680 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010674:	69b8      	ldr	r0, [r7, #24]
 8010676:	f7fe fd8b 	bl	800f190 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	2200      	movs	r2, #0
 801067e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d002      	beq.n	801068c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2200      	movs	r2, #0
 801068a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	490d      	ldr	r1, [pc, #52]	; (80106c4 <f_mount+0x88>)
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <f_mount+0x66>
 801069c:	79fb      	ldrb	r3, [r7, #7]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d001      	beq.n	80106a6 <f_mount+0x6a>
 80106a2:	2300      	movs	r3, #0
 80106a4:	e00a      	b.n	80106bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80106a6:	f107 010c 	add.w	r1, r7, #12
 80106aa:	f107 0308 	add.w	r3, r7, #8
 80106ae:	2200      	movs	r2, #0
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fd41 	bl	8010138 <find_volume>
 80106b6:	4603      	mov	r3, r0
 80106b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80106ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3720      	adds	r7, #32
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	20006d38 	.word	0x20006d38

080106c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b098      	sub	sp, #96	; 0x60
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	4613      	mov	r3, r2
 80106d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d101      	bne.n	80106e0 <f_open+0x18>
 80106dc:	2309      	movs	r3, #9
 80106de:	e1ad      	b.n	8010a3c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80106e8:	79fa      	ldrb	r2, [r7, #7]
 80106ea:	f107 0110 	add.w	r1, r7, #16
 80106ee:	f107 0308 	add.w	r3, r7, #8
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff fd20 	bl	8010138 <find_volume>
 80106f8:	4603      	mov	r3, r0
 80106fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80106fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010702:	2b00      	cmp	r3, #0
 8010704:	f040 8191 	bne.w	8010a2a <f_open+0x362>
		dj.obj.fs = fs;
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801070c:	68ba      	ldr	r2, [r7, #8]
 801070e:	f107 0314 	add.w	r3, r7, #20
 8010712:	4611      	mov	r1, r2
 8010714:	4618      	mov	r0, r3
 8010716:	f7ff fc03 	bl	800ff20 <follow_path>
 801071a:	4603      	mov	r3, r0
 801071c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010724:	2b00      	cmp	r3, #0
 8010726:	d11a      	bne.n	801075e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010728:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801072c:	b25b      	sxtb	r3, r3
 801072e:	2b00      	cmp	r3, #0
 8010730:	da03      	bge.n	801073a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010732:	2306      	movs	r3, #6
 8010734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010738:	e011      	b.n	801075e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	f023 0301 	bic.w	r3, r3, #1
 8010740:	2b00      	cmp	r3, #0
 8010742:	bf14      	ite	ne
 8010744:	2301      	movne	r3, #1
 8010746:	2300      	moveq	r3, #0
 8010748:	b2db      	uxtb	r3, r3
 801074a:	461a      	mov	r2, r3
 801074c:	f107 0314 	add.w	r3, r7, #20
 8010750:	4611      	mov	r1, r2
 8010752:	4618      	mov	r0, r3
 8010754:	f7fe fbd4 	bl	800ef00 <chk_lock>
 8010758:	4603      	mov	r3, r0
 801075a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	f003 031c 	and.w	r3, r3, #28
 8010764:	2b00      	cmp	r3, #0
 8010766:	d07f      	beq.n	8010868 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801076c:	2b00      	cmp	r3, #0
 801076e:	d017      	beq.n	80107a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010770:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010774:	2b04      	cmp	r3, #4
 8010776:	d10e      	bne.n	8010796 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010778:	f7fe fc1e 	bl	800efb8 <enq_lock>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d006      	beq.n	8010790 <f_open+0xc8>
 8010782:	f107 0314 	add.w	r3, r7, #20
 8010786:	4618      	mov	r0, r3
 8010788:	f7ff fb03 	bl	800fd92 <dir_register>
 801078c:	4603      	mov	r3, r0
 801078e:	e000      	b.n	8010792 <f_open+0xca>
 8010790:	2312      	movs	r3, #18
 8010792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010796:	79fb      	ldrb	r3, [r7, #7]
 8010798:	f043 0308 	orr.w	r3, r3, #8
 801079c:	71fb      	strb	r3, [r7, #7]
 801079e:	e010      	b.n	80107c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80107a0:	7ebb      	ldrb	r3, [r7, #26]
 80107a2:	f003 0311 	and.w	r3, r3, #17
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d003      	beq.n	80107b2 <f_open+0xea>
					res = FR_DENIED;
 80107aa:	2307      	movs	r3, #7
 80107ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107b0:	e007      	b.n	80107c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	f003 0304 	and.w	r3, r3, #4
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <f_open+0xfa>
 80107bc:	2308      	movs	r3, #8
 80107be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80107c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d168      	bne.n	801089c <f_open+0x1d4>
 80107ca:	79fb      	ldrb	r3, [r7, #7]
 80107cc:	f003 0308 	and.w	r3, r3, #8
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d063      	beq.n	801089c <f_open+0x1d4>
				dw = GET_FATTIME();
 80107d4:	f7fb ffc4 	bl	800c760 <get_fattime>
 80107d8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107dc:	330e      	adds	r3, #14
 80107de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fe fae3 	bl	800edac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80107e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e8:	3316      	adds	r3, #22
 80107ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fe fadd 	bl	800edac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80107f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f4:	330b      	adds	r3, #11
 80107f6:	2220      	movs	r2, #32
 80107f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107fe:	4611      	mov	r1, r2
 8010800:	4618      	mov	r0, r3
 8010802:	f7ff fa32 	bl	800fc6a <ld_clust>
 8010806:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801080c:	2200      	movs	r2, #0
 801080e:	4618      	mov	r0, r3
 8010810:	f7ff fa4a 	bl	800fca8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010816:	331c      	adds	r3, #28
 8010818:	2100      	movs	r1, #0
 801081a:	4618      	mov	r0, r3
 801081c:	f7fe fac6 	bl	800edac <st_dword>
					fs->wflag = 1;
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	2201      	movs	r2, #1
 8010824:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010828:	2b00      	cmp	r3, #0
 801082a:	d037      	beq.n	801089c <f_open+0x1d4>
						dw = fs->winsect;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010830:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010832:	f107 0314 	add.w	r3, r7, #20
 8010836:	2200      	movs	r2, #0
 8010838:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801083a:	4618      	mov	r0, r3
 801083c:	f7fe ff5d 	bl	800f6fa <remove_chain>
 8010840:	4603      	mov	r3, r0
 8010842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801084a:	2b00      	cmp	r3, #0
 801084c:	d126      	bne.n	801089c <f_open+0x1d4>
							res = move_window(fs, dw);
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010852:	4618      	mov	r0, r3
 8010854:	f7fe fd04 	bl	800f260 <move_window>
 8010858:	4603      	mov	r3, r0
 801085a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010862:	3a01      	subs	r2, #1
 8010864:	60da      	str	r2, [r3, #12]
 8010866:	e019      	b.n	801089c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801086c:	2b00      	cmp	r3, #0
 801086e:	d115      	bne.n	801089c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010870:	7ebb      	ldrb	r3, [r7, #26]
 8010872:	f003 0310 	and.w	r3, r3, #16
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <f_open+0x1ba>
					res = FR_NO_FILE;
 801087a:	2304      	movs	r3, #4
 801087c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010880:	e00c      	b.n	801089c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010882:	79fb      	ldrb	r3, [r7, #7]
 8010884:	f003 0302 	and.w	r3, r3, #2
 8010888:	2b00      	cmp	r3, #0
 801088a:	d007      	beq.n	801089c <f_open+0x1d4>
 801088c:	7ebb      	ldrb	r3, [r7, #26]
 801088e:	f003 0301 	and.w	r3, r3, #1
 8010892:	2b00      	cmp	r3, #0
 8010894:	d002      	beq.n	801089c <f_open+0x1d4>
						res = FR_DENIED;
 8010896:	2307      	movs	r3, #7
 8010898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801089c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d128      	bne.n	80108f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80108a4:	79fb      	ldrb	r3, [r7, #7]
 80108a6:	f003 0308 	and.w	r3, r3, #8
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d003      	beq.n	80108b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80108ae:	79fb      	ldrb	r3, [r7, #7]
 80108b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80108be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80108c4:	79fb      	ldrb	r3, [r7, #7]
 80108c6:	f023 0301 	bic.w	r3, r3, #1
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bf14      	ite	ne
 80108ce:	2301      	movne	r3, #1
 80108d0:	2300      	moveq	r3, #0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	461a      	mov	r2, r3
 80108d6:	f107 0314 	add.w	r3, r7, #20
 80108da:	4611      	mov	r1, r2
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fe fb8d 	bl	800effc <inc_lock>
 80108e2:	4602      	mov	r2, r0
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d102      	bne.n	80108f6 <f_open+0x22e>
 80108f0:	2302      	movs	r3, #2
 80108f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80108f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	f040 8095 	bne.w	8010a2a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010904:	4611      	mov	r1, r2
 8010906:	4618      	mov	r0, r3
 8010908:	f7ff f9af 	bl	800fc6a <ld_clust>
 801090c:	4602      	mov	r2, r0
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010914:	331c      	adds	r3, #28
 8010916:	4618      	mov	r0, r3
 8010918:	f7fe fa0a 	bl	800ed30 <ld_dword>
 801091c:	4602      	mov	r2, r0
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2200      	movs	r2, #0
 8010926:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010928:	693a      	ldr	r2, [r7, #16]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	88da      	ldrh	r2, [r3, #6]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	79fa      	ldrb	r2, [r7, #7]
 801093a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2200      	movs	r2, #0
 8010940:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2200      	movs	r2, #0
 8010946:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2200      	movs	r2, #0
 801094c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	3330      	adds	r3, #48	; 0x30
 8010952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010956:	2100      	movs	r1, #0
 8010958:	4618      	mov	r0, r3
 801095a:	f7fe fa74 	bl	800ee46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801095e:	79fb      	ldrb	r3, [r7, #7]
 8010960:	f003 0320 	and.w	r3, r3, #32
 8010964:	2b00      	cmp	r3, #0
 8010966:	d060      	beq.n	8010a2a <f_open+0x362>
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d05c      	beq.n	8010a2a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68da      	ldr	r2, [r3, #12]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	895b      	ldrh	r3, [r3, #10]
 801097c:	025b      	lsls	r3, r3, #9
 801097e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	657b      	str	r3, [r7, #84]	; 0x54
 801098c:	e016      	b.n	80109bc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010992:	4618      	mov	r0, r3
 8010994:	f7fe fd1f 	bl	800f3d6 <get_fat>
 8010998:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801099a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801099c:	2b01      	cmp	r3, #1
 801099e:	d802      	bhi.n	80109a6 <f_open+0x2de>
 80109a0:	2302      	movs	r3, #2
 80109a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ac:	d102      	bne.n	80109b4 <f_open+0x2ec>
 80109ae:	2301      	movs	r3, #1
 80109b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	657b      	str	r3, [r7, #84]	; 0x54
 80109bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d103      	bne.n	80109cc <f_open+0x304>
 80109c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d8e0      	bhi.n	801098e <f_open+0x2c6>
				}
				fp->clust = clst;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80109d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d127      	bne.n	8010a2a <f_open+0x362>
 80109da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d022      	beq.n	8010a2a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fe fcd5 	bl	800f398 <clust2sect>
 80109ee:	6478      	str	r0, [r7, #68]	; 0x44
 80109f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d103      	bne.n	80109fe <f_open+0x336>
						res = FR_INT_ERR;
 80109f6:	2302      	movs	r3, #2
 80109f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80109fc:	e015      	b.n	8010a2a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80109fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a00:	0a5a      	lsrs	r2, r3, #9
 8010a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a04:	441a      	add	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	7858      	ldrb	r0, [r3, #1]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6a1a      	ldr	r2, [r3, #32]
 8010a18:	2301      	movs	r3, #1
 8010a1a:	f7fe f913 	bl	800ec44 <disk_read>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d002      	beq.n	8010a2a <f_open+0x362>
 8010a24:	2301      	movs	r3, #1
 8010a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d002      	beq.n	8010a38 <f_open+0x370>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2200      	movs	r2, #0
 8010a36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3760      	adds	r7, #96	; 0x60
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b08c      	sub	sp, #48	; 0x30
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	60b9      	str	r1, [r7, #8]
 8010a4e:	607a      	str	r2, [r7, #4]
 8010a50:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f107 0210 	add.w	r2, r7, #16
 8010a62:	4611      	mov	r1, r2
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7ff fdb3 	bl	80105d0 <validate>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d107      	bne.n	8010a88 <f_write+0x44>
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	7d5b      	ldrb	r3, [r3, #21]
 8010a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <f_write+0x4a>
 8010a88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a8c:	e14b      	b.n	8010d26 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	7d1b      	ldrb	r3, [r3, #20]
 8010a92:	f003 0302 	and.w	r3, r3, #2
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d101      	bne.n	8010a9e <f_write+0x5a>
 8010a9a:	2307      	movs	r3, #7
 8010a9c:	e143      	b.n	8010d26 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	699a      	ldr	r2, [r3, #24]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	441a      	add	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	f080 812d 	bcs.w	8010d0a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	699b      	ldr	r3, [r3, #24]
 8010ab4:	43db      	mvns	r3, r3
 8010ab6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ab8:	e127      	b.n	8010d0a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	699b      	ldr	r3, [r3, #24]
 8010abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f040 80e3 	bne.w	8010c8e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	699b      	ldr	r3, [r3, #24]
 8010acc:	0a5b      	lsrs	r3, r3, #9
 8010ace:	693a      	ldr	r2, [r7, #16]
 8010ad0:	8952      	ldrh	r2, [r2, #10]
 8010ad2:	3a01      	subs	r2, #1
 8010ad4:	4013      	ands	r3, r2
 8010ad6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010ad8:	69bb      	ldr	r3, [r7, #24]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d143      	bne.n	8010b66 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	699b      	ldr	r3, [r3, #24]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10c      	bne.n	8010b00 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d11a      	bne.n	8010b28 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2100      	movs	r1, #0
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe fe64 	bl	800f7c4 <create_chain>
 8010afc:	62b8      	str	r0, [r7, #40]	; 0x28
 8010afe:	e013      	b.n	8010b28 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d007      	beq.n	8010b18 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	68f8      	ldr	r0, [r7, #12]
 8010b10:	f7fe fef0 	bl	800f8f4 <clmt_clust>
 8010b14:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b16:	e007      	b.n	8010b28 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	69db      	ldr	r3, [r3, #28]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	4610      	mov	r0, r2
 8010b22:	f7fe fe4f 	bl	800f7c4 <create_chain>
 8010b26:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f000 80f2 	beq.w	8010d14 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d104      	bne.n	8010b40 <f_write+0xfc>
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2202      	movs	r2, #2
 8010b3a:	755a      	strb	r2, [r3, #21]
 8010b3c:	2302      	movs	r3, #2
 8010b3e:	e0f2      	b.n	8010d26 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b46:	d104      	bne.n	8010b52 <f_write+0x10e>
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	755a      	strb	r2, [r3, #21]
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e0e9      	b.n	8010d26 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b56:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d102      	bne.n	8010b66 <f_write+0x122>
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b64:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	7d1b      	ldrb	r3, [r3, #20]
 8010b6a:	b25b      	sxtb	r3, r3
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	da18      	bge.n	8010ba2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	7858      	ldrb	r0, [r3, #1]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6a1a      	ldr	r2, [r3, #32]
 8010b7e:	2301      	movs	r3, #1
 8010b80:	f7fe f880 	bl	800ec84 <disk_write>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d004      	beq.n	8010b94 <f_write+0x150>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	755a      	strb	r2, [r3, #21]
 8010b90:	2301      	movs	r3, #1
 8010b92:	e0c8      	b.n	8010d26 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	7d1b      	ldrb	r3, [r3, #20]
 8010b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b9c:	b2da      	uxtb	r2, r3
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	69db      	ldr	r3, [r3, #28]
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f7fe fbf4 	bl	800f398 <clust2sect>
 8010bb0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d104      	bne.n	8010bc2 <f_write+0x17e>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2202      	movs	r2, #2
 8010bbc:	755a      	strb	r2, [r3, #21]
 8010bbe:	2302      	movs	r3, #2
 8010bc0:	e0b1      	b.n	8010d26 <f_write+0x2e2>
			sect += csect;
 8010bc2:	697a      	ldr	r2, [r7, #20]
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	4413      	add	r3, r2
 8010bc8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	0a5b      	lsrs	r3, r3, #9
 8010bce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010bd0:	6a3b      	ldr	r3, [r7, #32]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d03c      	beq.n	8010c50 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010bd6:	69ba      	ldr	r2, [r7, #24]
 8010bd8:	6a3b      	ldr	r3, [r7, #32]
 8010bda:	4413      	add	r3, r2
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	8952      	ldrh	r2, [r2, #10]
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d905      	bls.n	8010bf0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	895b      	ldrh	r3, [r3, #10]
 8010be8:	461a      	mov	r2, r3
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	1ad3      	subs	r3, r2, r3
 8010bee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	7858      	ldrb	r0, [r3, #1]
 8010bf4:	6a3b      	ldr	r3, [r7, #32]
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	69f9      	ldr	r1, [r7, #28]
 8010bfa:	f7fe f843 	bl	800ec84 <disk_write>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d004      	beq.n	8010c0e <f_write+0x1ca>
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2201      	movs	r2, #1
 8010c08:	755a      	strb	r2, [r3, #21]
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e08b      	b.n	8010d26 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6a1a      	ldr	r2, [r3, #32]
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	6a3a      	ldr	r2, [r7, #32]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d915      	bls.n	8010c48 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6a1a      	ldr	r2, [r3, #32]
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	025b      	lsls	r3, r3, #9
 8010c2c:	69fa      	ldr	r2, [r7, #28]
 8010c2e:	4413      	add	r3, r2
 8010c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c34:	4619      	mov	r1, r3
 8010c36:	f7fe f8e5 	bl	800ee04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	7d1b      	ldrb	r3, [r3, #20]
 8010c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	025b      	lsls	r3, r3, #9
 8010c4c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010c4e:	e03f      	b.n	8010cd0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6a1b      	ldr	r3, [r3, #32]
 8010c54:	697a      	ldr	r2, [r7, #20]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d016      	beq.n	8010c88 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	699a      	ldr	r2, [r3, #24]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d210      	bcs.n	8010c88 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	7858      	ldrb	r0, [r3, #1]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c70:	2301      	movs	r3, #1
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	f7fd ffe6 	bl	800ec44 <disk_read>
 8010c78:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d004      	beq.n	8010c88 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2201      	movs	r2, #1
 8010c82:	755a      	strb	r2, [r3, #21]
 8010c84:	2301      	movs	r3, #1
 8010c86:	e04e      	b.n	8010d26 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	697a      	ldr	r2, [r7, #20]
 8010c8c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	699b      	ldr	r3, [r3, #24]
 8010c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c96:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010c9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d901      	bls.n	8010ca8 <f_write+0x264>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	699b      	ldr	r3, [r3, #24]
 8010cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb6:	4413      	add	r3, r2
 8010cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cba:	69f9      	ldr	r1, [r7, #28]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fe f8a1 	bl	800ee04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	7d1b      	ldrb	r3, [r3, #20]
 8010cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010cd0:	69fa      	ldr	r2, [r7, #28]
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd4:	4413      	add	r3, r2
 8010cd6:	61fb      	str	r3, [r7, #28]
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	699a      	ldr	r2, [r3, #24]
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	441a      	add	r2, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	619a      	str	r2, [r3, #24]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	68da      	ldr	r2, [r3, #12]
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	bf38      	it	cc
 8010cf0:	461a      	movcc	r2, r3
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	60da      	str	r2, [r3, #12]
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfc:	441a      	add	r2, r3
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	1ad3      	subs	r3, r2, r3
 8010d08:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f47f aed4 	bne.w	8010aba <f_write+0x76>
 8010d12:	e000      	b.n	8010d16 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d14:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	7d1b      	ldrb	r3, [r3, #20]
 8010d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3730      	adds	r7, #48	; 0x30
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b086      	sub	sp, #24
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f107 0208 	add.w	r2, r7, #8
 8010d3c:	4611      	mov	r1, r2
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff fc46 	bl	80105d0 <validate>
 8010d44:	4603      	mov	r3, r0
 8010d46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d48:	7dfb      	ldrb	r3, [r7, #23]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d168      	bne.n	8010e20 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7d1b      	ldrb	r3, [r3, #20]
 8010d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d062      	beq.n	8010e20 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	7d1b      	ldrb	r3, [r3, #20]
 8010d5e:	b25b      	sxtb	r3, r3
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	da15      	bge.n	8010d90 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	7858      	ldrb	r0, [r3, #1]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6a1a      	ldr	r2, [r3, #32]
 8010d72:	2301      	movs	r3, #1
 8010d74:	f7fd ff86 	bl	800ec84 <disk_write>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d001      	beq.n	8010d82 <f_sync+0x54>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e04f      	b.n	8010e22 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7d1b      	ldrb	r3, [r3, #20]
 8010d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010d90:	f7fb fce6 	bl	800c760 <get_fattime>
 8010d94:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f7fe fa5e 	bl	800f260 <move_window>
 8010da4:	4603      	mov	r3, r0
 8010da6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d138      	bne.n	8010e20 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010db2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	330b      	adds	r3, #11
 8010db8:	781a      	ldrb	r2, [r3, #0]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	330b      	adds	r3, #11
 8010dbe:	f042 0220 	orr.w	r2, r2, #32
 8010dc2:	b2d2      	uxtb	r2, r2
 8010dc4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6818      	ldr	r0, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	68f9      	ldr	r1, [r7, #12]
 8010dd2:	f7fe ff69 	bl	800fca8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f103 021c 	add.w	r2, r3, #28
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	4619      	mov	r1, r3
 8010de2:	4610      	mov	r0, r2
 8010de4:	f7fd ffe2 	bl	800edac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	3316      	adds	r3, #22
 8010dec:	6939      	ldr	r1, [r7, #16]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fd ffdc 	bl	800edac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	3312      	adds	r3, #18
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fd ffbb 	bl	800ed76 <st_word>
					fs->wflag = 1;
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	2201      	movs	r2, #1
 8010e04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fe fa57 	bl	800f2bc <sync_fs>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	7d1b      	ldrb	r3, [r3, #20]
 8010e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3718      	adds	r7, #24
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b084      	sub	sp, #16
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff ff7b 	bl	8010d2e <f_sync>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010e3c:	7bfb      	ldrb	r3, [r7, #15]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d118      	bne.n	8010e74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f107 0208 	add.w	r2, r7, #8
 8010e48:	4611      	mov	r1, r2
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff fbc0 	bl	80105d0 <validate>
 8010e50:	4603      	mov	r3, r0
 8010e52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d10c      	bne.n	8010e74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	691b      	ldr	r3, [r3, #16]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe f95a 	bl	800f118 <dec_lock>
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d102      	bne.n	8010e74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2200      	movs	r2, #0
 8010e72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b090      	sub	sp, #64	; 0x40
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f107 0208 	add.w	r2, r7, #8
 8010e8e:	4611      	mov	r1, r2
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7ff fb9d 	bl	80105d0 <validate>
 8010e96:	4603      	mov	r3, r0
 8010e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d103      	bne.n	8010eac <f_lseek+0x2e>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	7d5b      	ldrb	r3, [r3, #21]
 8010ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d002      	beq.n	8010eba <f_lseek+0x3c>
 8010eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010eb8:	e1e6      	b.n	8011288 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 80d1 	beq.w	8011066 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eca:	d15a      	bne.n	8010f82 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed4:	1d1a      	adds	r2, r3, #4
 8010ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	617b      	str	r3, [r7, #20]
 8010edc:	2302      	movs	r3, #2
 8010ede:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d03a      	beq.n	8010f62 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	613b      	str	r3, [r7, #16]
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	3302      	adds	r3, #2
 8010ef8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010efc:	60fb      	str	r3, [r7, #12]
 8010efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f00:	3301      	adds	r3, #1
 8010f02:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fe fa64 	bl	800f3d6 <get_fat>
 8010f0e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d804      	bhi.n	8010f20 <f_lseek+0xa2>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2202      	movs	r2, #2
 8010f1a:	755a      	strb	r2, [r3, #21]
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	e1b3      	b.n	8011288 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f26:	d104      	bne.n	8010f32 <f_lseek+0xb4>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	755a      	strb	r2, [r3, #21]
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e1aa      	b.n	8011288 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	3301      	adds	r3, #1
 8010f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d0de      	beq.n	8010efa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d809      	bhi.n	8010f58 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	1d1a      	adds	r2, r3, #4
 8010f48:	627a      	str	r2, [r7, #36]	; 0x24
 8010f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f4c:	601a      	str	r2, [r3, #0]
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	1d1a      	adds	r2, r3, #4
 8010f52:	627a      	str	r2, [r7, #36]	; 0x24
 8010f54:	693a      	ldr	r2, [r7, #16]
 8010f56:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	695b      	ldr	r3, [r3, #20]
 8010f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d3c4      	bcc.n	8010eec <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f68:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d803      	bhi.n	8010f7a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f74:	2200      	movs	r2, #0
 8010f76:	601a      	str	r2, [r3, #0]
 8010f78:	e184      	b.n	8011284 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010f7a:	2311      	movs	r3, #17
 8010f7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010f80:	e180      	b.n	8011284 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	683a      	ldr	r2, [r7, #0]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d902      	bls.n	8010f92 <f_lseek+0x114>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8172 	beq.w	8011284 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7fe fca4 	bl	800f8f4 <clmt_clust>
 8010fac:	4602      	mov	r2, r0
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	69db      	ldr	r3, [r3, #28]
 8010fb8:	4619      	mov	r1, r3
 8010fba:	4610      	mov	r0, r2
 8010fbc:	f7fe f9ec 	bl	800f398 <clust2sect>
 8010fc0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d104      	bne.n	8010fd2 <f_lseek+0x154>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2202      	movs	r2, #2
 8010fcc:	755a      	strb	r2, [r3, #21]
 8010fce:	2302      	movs	r3, #2
 8010fd0:	e15a      	b.n	8011288 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	0a5b      	lsrs	r3, r3, #9
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	8952      	ldrh	r2, [r2, #10]
 8010fdc:	3a01      	subs	r2, #1
 8010fde:	4013      	ands	r3, r2
 8010fe0:	69ba      	ldr	r2, [r7, #24]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f000 8148 	beq.w	8011284 <f_lseek+0x406>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a1b      	ldr	r3, [r3, #32]
 8010ff8:	69ba      	ldr	r2, [r7, #24]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	f000 8142 	beq.w	8011284 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	7d1b      	ldrb	r3, [r3, #20]
 8011004:	b25b      	sxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	da18      	bge.n	801103c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	7858      	ldrb	r0, [r3, #1]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a1a      	ldr	r2, [r3, #32]
 8011018:	2301      	movs	r3, #1
 801101a:	f7fd fe33 	bl	800ec84 <disk_write>
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d004      	beq.n	801102e <f_lseek+0x1b0>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	755a      	strb	r2, [r3, #21]
 801102a:	2301      	movs	r3, #1
 801102c:	e12c      	b.n	8011288 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	7d1b      	ldrb	r3, [r3, #20]
 8011032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011036:	b2da      	uxtb	r2, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	7858      	ldrb	r0, [r3, #1]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011046:	2301      	movs	r3, #1
 8011048:	69ba      	ldr	r2, [r7, #24]
 801104a:	f7fd fdfb 	bl	800ec44 <disk_read>
 801104e:	4603      	mov	r3, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <f_lseek+0x1e0>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2201      	movs	r2, #1
 8011058:	755a      	strb	r2, [r3, #21]
 801105a:	2301      	movs	r3, #1
 801105c:	e114      	b.n	8011288 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	69ba      	ldr	r2, [r7, #24]
 8011062:	621a      	str	r2, [r3, #32]
 8011064:	e10e      	b.n	8011284 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	429a      	cmp	r2, r3
 801106e:	d908      	bls.n	8011082 <f_lseek+0x204>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	7d1b      	ldrb	r3, [r3, #20]
 8011074:	f003 0302 	and.w	r3, r3, #2
 8011078:	2b00      	cmp	r3, #0
 801107a:	d102      	bne.n	8011082 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	699b      	ldr	r3, [r3, #24]
 8011086:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011088:	2300      	movs	r3, #0
 801108a:	637b      	str	r3, [r7, #52]	; 0x34
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011090:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 80a7 	beq.w	80111e8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	895b      	ldrh	r3, [r3, #10]
 801109e:	025b      	lsls	r3, r3, #9
 80110a0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80110a2:	6a3b      	ldr	r3, [r7, #32]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d01b      	beq.n	80110e0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	1e5a      	subs	r2, r3, #1
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	1e59      	subs	r1, r3, #1
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80110bc:	429a      	cmp	r2, r3
 80110be:	d30f      	bcc.n	80110e0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80110c0:	6a3b      	ldr	r3, [r7, #32]
 80110c2:	1e5a      	subs	r2, r3, #1
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	425b      	negs	r3, r3
 80110c8:	401a      	ands	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	699b      	ldr	r3, [r3, #24]
 80110d2:	683a      	ldr	r2, [r7, #0]
 80110d4:	1ad3      	subs	r3, r2, r3
 80110d6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	69db      	ldr	r3, [r3, #28]
 80110dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80110de:	e022      	b.n	8011126 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	689b      	ldr	r3, [r3, #8]
 80110e4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80110e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d119      	bne.n	8011120 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2100      	movs	r1, #0
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fe fb67 	bl	800f7c4 <create_chain>
 80110f6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80110f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d104      	bne.n	8011108 <f_lseek+0x28a>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2202      	movs	r2, #2
 8011102:	755a      	strb	r2, [r3, #21]
 8011104:	2302      	movs	r3, #2
 8011106:	e0bf      	b.n	8011288 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110e:	d104      	bne.n	801111a <f_lseek+0x29c>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2201      	movs	r2, #1
 8011114:	755a      	strb	r2, [r3, #21]
 8011116:	2301      	movs	r3, #1
 8011118:	e0b6      	b.n	8011288 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801111e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011124:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011128:	2b00      	cmp	r3, #0
 801112a:	d05d      	beq.n	80111e8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801112c:	e03a      	b.n	80111a4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801112e:	683a      	ldr	r2, [r7, #0]
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	603b      	str	r3, [r7, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	699a      	ldr	r2, [r3, #24]
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	441a      	add	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	7d1b      	ldrb	r3, [r3, #20]
 8011146:	f003 0302 	and.w	r3, r3, #2
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00b      	beq.n	8011166 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fb36 	bl	800f7c4 <create_chain>
 8011158:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801115a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115c:	2b00      	cmp	r3, #0
 801115e:	d108      	bne.n	8011172 <f_lseek+0x2f4>
							ofs = 0; break;
 8011160:	2300      	movs	r3, #0
 8011162:	603b      	str	r3, [r7, #0]
 8011164:	e022      	b.n	80111ac <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801116a:	4618      	mov	r0, r3
 801116c:	f7fe f933 	bl	800f3d6 <get_fat>
 8011170:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011178:	d104      	bne.n	8011184 <f_lseek+0x306>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2201      	movs	r2, #1
 801117e:	755a      	strb	r2, [r3, #21]
 8011180:	2301      	movs	r3, #1
 8011182:	e081      	b.n	8011288 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011186:	2b01      	cmp	r3, #1
 8011188:	d904      	bls.n	8011194 <f_lseek+0x316>
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011190:	429a      	cmp	r2, r3
 8011192:	d304      	bcc.n	801119e <f_lseek+0x320>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2202      	movs	r2, #2
 8011198:	755a      	strb	r2, [r3, #21]
 801119a:	2302      	movs	r3, #2
 801119c:	e074      	b.n	8011288 <f_lseek+0x40a>
					fp->clust = clst;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111a2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80111a4:	683a      	ldr	r2, [r7, #0]
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d8c0      	bhi.n	801112e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	699a      	ldr	r2, [r3, #24]
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	441a      	add	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d012      	beq.n	80111e8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fe f8e6 	bl	800f398 <clust2sect>
 80111cc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80111ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d104      	bne.n	80111de <f_lseek+0x360>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2202      	movs	r2, #2
 80111d8:	755a      	strb	r2, [r3, #21]
 80111da:	2302      	movs	r3, #2
 80111dc:	e054      	b.n	8011288 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	0a5b      	lsrs	r3, r3, #9
 80111e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111e4:	4413      	add	r3, r2
 80111e6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	699a      	ldr	r2, [r3, #24]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d90a      	bls.n	801120a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	699a      	ldr	r2, [r3, #24]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	7d1b      	ldrb	r3, [r3, #20]
 8011200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011204:	b2da      	uxtb	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	699b      	ldr	r3, [r3, #24]
 801120e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011212:	2b00      	cmp	r3, #0
 8011214:	d036      	beq.n	8011284 <f_lseek+0x406>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6a1b      	ldr	r3, [r3, #32]
 801121a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801121c:	429a      	cmp	r2, r3
 801121e:	d031      	beq.n	8011284 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7d1b      	ldrb	r3, [r3, #20]
 8011224:	b25b      	sxtb	r3, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	da18      	bge.n	801125c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	7858      	ldrb	r0, [r3, #1]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a1a      	ldr	r2, [r3, #32]
 8011238:	2301      	movs	r3, #1
 801123a:	f7fd fd23 	bl	800ec84 <disk_write>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d004      	beq.n	801124e <f_lseek+0x3d0>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2201      	movs	r2, #1
 8011248:	755a      	strb	r2, [r3, #21]
 801124a:	2301      	movs	r3, #1
 801124c:	e01c      	b.n	8011288 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	7d1b      	ldrb	r3, [r3, #20]
 8011252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011256:	b2da      	uxtb	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	7858      	ldrb	r0, [r3, #1]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011266:	2301      	movs	r3, #1
 8011268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801126a:	f7fd fceb 	bl	800ec44 <disk_read>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d004      	beq.n	801127e <f_lseek+0x400>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2201      	movs	r2, #1
 8011278:	755a      	strb	r2, [r3, #21]
 801127a:	2301      	movs	r3, #1
 801127c:	e004      	b.n	8011288 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011282:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011284:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011288:	4618      	mov	r0, r3
 801128a:	3740      	adds	r7, #64	; 0x40
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	460b      	mov	r3, r1
 801129a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801129c:	78fb      	ldrb	r3, [r7, #3]
 801129e:	2b0a      	cmp	r3, #10
 80112a0:	d103      	bne.n	80112aa <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80112a2:	210d      	movs	r1, #13
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7ff fff3 	bl	8011290 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	db25      	blt.n	8011302 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	60fa      	str	r2, [r7, #12]
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	4413      	add	r3, r2
 80112c0:	78fa      	ldrb	r2, [r7, #3]
 80112c2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b3c      	cmp	r3, #60	; 0x3c
 80112c8:	dd12      	ble.n	80112f0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6818      	ldr	r0, [r3, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f103 010c 	add.w	r1, r3, #12
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	f7ff fbb3 	bl	8010a44 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d101      	bne.n	80112ea <putc_bfd+0x5a>
 80112e6:	2300      	movs	r3, #0
 80112e8:	e001      	b.n	80112ee <putc_bfd+0x5e>
 80112ea:	f04f 33ff 	mov.w	r3, #4294967295
 80112ee:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	68fa      	ldr	r2, [r7, #12]
 80112f4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	689b      	ldr	r3, [r3, #8]
 80112fa:	1c5a      	adds	r2, r3, #1
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	609a      	str	r2, [r3, #8]
 8011300:	e000      	b.n	8011304 <putc_bfd+0x74>
	if (i < 0) return;
 8011302:	bf00      	nop
}
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b084      	sub	sp, #16
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	db16      	blt.n	8011348 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6818      	ldr	r0, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f103 010c 	add.w	r1, r3, #12
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	461a      	mov	r2, r3
 801132a:	f107 030c 	add.w	r3, r7, #12
 801132e:	f7ff fb89 	bl	8010a44 <f_write>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d107      	bne.n	8011348 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	4293      	cmp	r3, r2
 8011340:	d102      	bne.n	8011348 <putc_flush+0x3e>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	e001      	b.n	801134c <putc_flush+0x42>
	return EOF;
 8011348:	f04f 33ff 	mov.w	r3, #4294967295
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	683a      	ldr	r2, [r7, #0]
 8011362:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	605a      	str	r2, [r3, #4]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	685a      	ldr	r2, [r3, #4]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	609a      	str	r2, [r3, #8]
}
 8011372:	bf00      	nop
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
	...

08011380 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011380:	b40e      	push	{r1, r2, r3}
 8011382:	b580      	push	{r7, lr}
 8011384:	b0a7      	sub	sp, #156	; 0x9c
 8011386:	af00      	add	r7, sp, #0
 8011388:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801138a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff ffdf 	bl	8011354 <putc_init>

	va_start(arp, fmt);
 8011396:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801139a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 801139c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113a0:	1c5a      	adds	r2, r3, #1
 80113a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80113ac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	f000 81f2 	beq.w	801179a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80113b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80113ba:	2b25      	cmp	r3, #37	; 0x25
 80113bc:	d008      	beq.n	80113d0 <f_printf+0x50>
			putc_bfd(&pb, c);
 80113be:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80113c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113c6:	4611      	mov	r1, r2
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff ff61 	bl	8011290 <putc_bfd>
			continue;
 80113ce:	e1e3      	b.n	8011798 <f_printf+0x418>
		}
		w = f = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80113d6:	2300      	movs	r3, #0
 80113d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80113dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113e0:	1c5a      	adds	r2, r3, #1
 80113e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80113ec:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80113f0:	2b30      	cmp	r3, #48	; 0x30
 80113f2:	d10b      	bne.n	801140c <f_printf+0x8c>
			f = 1; c = *fmt++;
 80113f4:	2301      	movs	r3, #1
 80113f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80113fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113fe:	1c5a      	adds	r2, r3, #1
 8011400:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801140a:	e024      	b.n	8011456 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801140c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011410:	2b2d      	cmp	r3, #45	; 0x2d
 8011412:	d120      	bne.n	8011456 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011414:	2302      	movs	r3, #2
 8011416:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801141a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801142a:	e014      	b.n	8011456 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801142c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011430:	4613      	mov	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	461a      	mov	r2, r3
 801143a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801143e:	4413      	add	r3, r2
 8011440:	3b30      	subs	r3, #48	; 0x30
 8011442:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8011446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801144a:	1c5a      	adds	r2, r3, #1
 801144c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8011456:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801145a:	2b2f      	cmp	r3, #47	; 0x2f
 801145c:	d903      	bls.n	8011466 <f_printf+0xe6>
 801145e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011462:	2b39      	cmp	r3, #57	; 0x39
 8011464:	d9e2      	bls.n	801142c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011466:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801146a:	2b6c      	cmp	r3, #108	; 0x6c
 801146c:	d003      	beq.n	8011476 <f_printf+0xf6>
 801146e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011472:	2b4c      	cmp	r3, #76	; 0x4c
 8011474:	d10d      	bne.n	8011492 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011476:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801147a:	f043 0304 	orr.w	r3, r3, #4
 801147e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8011482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8011492:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011496:	2b00      	cmp	r3, #0
 8011498:	f000 8181 	beq.w	801179e <f_printf+0x41e>
		d = c;
 801149c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80114a0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80114a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80114a8:	2b60      	cmp	r3, #96	; 0x60
 80114aa:	d908      	bls.n	80114be <f_printf+0x13e>
 80114ac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80114b0:	2b7a      	cmp	r3, #122	; 0x7a
 80114b2:	d804      	bhi.n	80114be <f_printf+0x13e>
 80114b4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80114b8:	3b20      	subs	r3, #32
 80114ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80114be:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80114c2:	3b42      	subs	r3, #66	; 0x42
 80114c4:	2b16      	cmp	r3, #22
 80114c6:	f200 8098 	bhi.w	80115fa <f_printf+0x27a>
 80114ca:	a201      	add	r2, pc, #4	; (adr r2, 80114d0 <f_printf+0x150>)
 80114cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d0:	080115db 	.word	0x080115db
 80114d4:	080115c3 	.word	0x080115c3
 80114d8:	080115eb 	.word	0x080115eb
 80114dc:	080115fb 	.word	0x080115fb
 80114e0:	080115fb 	.word	0x080115fb
 80114e4:	080115fb 	.word	0x080115fb
 80114e8:	080115fb 	.word	0x080115fb
 80114ec:	080115fb 	.word	0x080115fb
 80114f0:	080115fb 	.word	0x080115fb
 80114f4:	080115fb 	.word	0x080115fb
 80114f8:	080115fb 	.word	0x080115fb
 80114fc:	080115fb 	.word	0x080115fb
 8011500:	080115fb 	.word	0x080115fb
 8011504:	080115e3 	.word	0x080115e3
 8011508:	080115fb 	.word	0x080115fb
 801150c:	080115fb 	.word	0x080115fb
 8011510:	080115fb 	.word	0x080115fb
 8011514:	0801152d 	.word	0x0801152d
 8011518:	080115fb 	.word	0x080115fb
 801151c:	080115eb 	.word	0x080115eb
 8011520:	080115fb 	.word	0x080115fb
 8011524:	080115fb 	.word	0x080115fb
 8011528:	080115f3 	.word	0x080115f3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801152c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801152e:	1d1a      	adds	r2, r3, #4
 8011530:	67ba      	str	r2, [r7, #120]	; 0x78
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8011536:	2300      	movs	r3, #0
 8011538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801153c:	e004      	b.n	8011548 <f_printf+0x1c8>
 801153e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011542:	3301      	adds	r3, #1
 8011544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011548:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801154a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801154e:	4413      	add	r3, r2
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d1f3      	bne.n	801153e <f_printf+0x1be>
			if (!(f & 2)) {
 8011556:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801155a:	f003 0302 	and.w	r3, r3, #2
 801155e:	2b00      	cmp	r3, #0
 8011560:	d11a      	bne.n	8011598 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011562:	e005      	b.n	8011570 <f_printf+0x1f0>
 8011564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011568:	2120      	movs	r1, #32
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff fe90 	bl	8011290 <putc_bfd>
 8011570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011574:	1c5a      	adds	r2, r3, #1
 8011576:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801157a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801157e:	429a      	cmp	r2, r3
 8011580:	d8f0      	bhi.n	8011564 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011582:	e009      	b.n	8011598 <f_printf+0x218>
 8011584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011586:	1c5a      	adds	r2, r3, #1
 8011588:	67fa      	str	r2, [r7, #124]	; 0x7c
 801158a:	781a      	ldrb	r2, [r3, #0]
 801158c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011590:	4611      	mov	r1, r2
 8011592:	4618      	mov	r0, r3
 8011594:	f7ff fe7c 	bl	8011290 <putc_bfd>
 8011598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d1f1      	bne.n	8011584 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80115a0:	e005      	b.n	80115ae <f_printf+0x22e>
 80115a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115a6:	2120      	movs	r1, #32
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff fe71 	bl	8011290 <putc_bfd>
 80115ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80115b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80115bc:	429a      	cmp	r2, r3
 80115be:	d8f0      	bhi.n	80115a2 <f_printf+0x222>
			continue;
 80115c0:	e0ea      	b.n	8011798 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80115c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115c4:	1d1a      	adds	r2, r3, #4
 80115c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115d0:	4611      	mov	r1, r2
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fe5c 	bl	8011290 <putc_bfd>
 80115d8:	e0de      	b.n	8011798 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80115da:	2302      	movs	r3, #2
 80115dc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80115e0:	e014      	b.n	801160c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80115e2:	2308      	movs	r3, #8
 80115e4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80115e8:	e010      	b.n	801160c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80115ea:	230a      	movs	r3, #10
 80115ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80115f0:	e00c      	b.n	801160c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80115f2:	2310      	movs	r3, #16
 80115f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80115f8:	e008      	b.n	801160c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80115fa:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80115fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011602:	4611      	mov	r1, r2
 8011604:	4618      	mov	r0, r3
 8011606:	f7ff fe43 	bl	8011290 <putc_bfd>
 801160a:	e0c5      	b.n	8011798 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801160c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011610:	f003 0304 	and.w	r3, r3, #4
 8011614:	2b00      	cmp	r3, #0
 8011616:	d004      	beq.n	8011622 <f_printf+0x2a2>
 8011618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801161a:	1d1a      	adds	r2, r3, #4
 801161c:	67ba      	str	r2, [r7, #120]	; 0x78
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	e00c      	b.n	801163c <f_printf+0x2bc>
 8011622:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8011626:	2b44      	cmp	r3, #68	; 0x44
 8011628:	d104      	bne.n	8011634 <f_printf+0x2b4>
 801162a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801162c:	1d1a      	adds	r2, r3, #4
 801162e:	67ba      	str	r2, [r7, #120]	; 0x78
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	e003      	b.n	801163c <f_printf+0x2bc>
 8011634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011636:	1d1a      	adds	r2, r3, #4
 8011638:	67ba      	str	r2, [r7, #120]	; 0x78
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011640:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8011644:	2b44      	cmp	r3, #68	; 0x44
 8011646:	d10e      	bne.n	8011666 <f_printf+0x2e6>
 8011648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801164c:	2b00      	cmp	r3, #0
 801164e:	da0a      	bge.n	8011666 <f_printf+0x2e6>
			v = 0 - v;
 8011650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011654:	425b      	negs	r3, r3
 8011656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801165a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801165e:	f043 0308 	orr.w	r3, r3, #8
 8011662:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801166c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8011670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011674:	fbb3 f1f2 	udiv	r1, r3, r2
 8011678:	fb01 f202 	mul.w	r2, r1, r2
 801167c:	1a9b      	subs	r3, r3, r2
 801167e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8011682:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8011686:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801168a:	fbb2 f3f3 	udiv	r3, r2, r3
 801168e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011692:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8011696:	2b09      	cmp	r3, #9
 8011698:	d90b      	bls.n	80116b2 <f_printf+0x332>
 801169a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801169e:	2b78      	cmp	r3, #120	; 0x78
 80116a0:	d101      	bne.n	80116a6 <f_printf+0x326>
 80116a2:	2227      	movs	r2, #39	; 0x27
 80116a4:	e000      	b.n	80116a8 <f_printf+0x328>
 80116a6:	2207      	movs	r2, #7
 80116a8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80116ac:	4413      	add	r3, r2
 80116ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80116b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80116b6:	1c5a      	adds	r2, r3, #1
 80116b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80116bc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80116c0:	3230      	adds	r2, #48	; 0x30
 80116c2:	b2d2      	uxtb	r2, r2
 80116c4:	3398      	adds	r3, #152	; 0x98
 80116c6:	443b      	add	r3, r7
 80116c8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80116cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d003      	beq.n	80116dc <f_printf+0x35c>
 80116d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80116d8:	2b1f      	cmp	r3, #31
 80116da:	d9c7      	bls.n	801166c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80116dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80116e0:	f003 0308 	and.w	r3, r3, #8
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d009      	beq.n	80116fc <f_printf+0x37c>
 80116e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80116f2:	3398      	adds	r3, #152	; 0x98
 80116f4:	443b      	add	r3, r7
 80116f6:	222d      	movs	r2, #45	; 0x2d
 80116f8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80116fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011704:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011708:	f003 0301 	and.w	r3, r3, #1
 801170c:	2b00      	cmp	r3, #0
 801170e:	d001      	beq.n	8011714 <f_printf+0x394>
 8011710:	2330      	movs	r3, #48	; 0x30
 8011712:	e000      	b.n	8011716 <f_printf+0x396>
 8011714:	2320      	movs	r3, #32
 8011716:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801171a:	e007      	b.n	801172c <f_printf+0x3ac>
 801171c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8011720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011724:	4611      	mov	r1, r2
 8011726:	4618      	mov	r0, r3
 8011728:	f7ff fdb2 	bl	8011290 <putc_bfd>
 801172c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011730:	f003 0302 	and.w	r3, r3, #2
 8011734:	2b00      	cmp	r3, #0
 8011736:	d108      	bne.n	801174a <f_printf+0x3ca>
 8011738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801173c:	1c5a      	adds	r2, r3, #1
 801173e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011742:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011746:	429a      	cmp	r2, r3
 8011748:	d8e8      	bhi.n	801171c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801174a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801174e:	3b01      	subs	r3, #1
 8011750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011754:	f107 020c 	add.w	r2, r7, #12
 8011758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801175c:	4413      	add	r3, r2
 801175e:	781a      	ldrb	r2, [r3, #0]
 8011760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011764:	4611      	mov	r1, r2
 8011766:	4618      	mov	r0, r3
 8011768:	f7ff fd92 	bl	8011290 <putc_bfd>
		} while (i);
 801176c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1ea      	bne.n	801174a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011774:	e007      	b.n	8011786 <f_printf+0x406>
 8011776:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801177a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801177e:	4611      	mov	r1, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff fd85 	bl	8011290 <putc_bfd>
 8011786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801178a:	1c5a      	adds	r2, r3, #1
 801178c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011790:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011794:	429a      	cmp	r2, r3
 8011796:	d8ee      	bhi.n	8011776 <f_printf+0x3f6>
		c = *fmt++;
 8011798:	e600      	b.n	801139c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801179a:	bf00      	nop
 801179c:	e000      	b.n	80117a0 <f_printf+0x420>
		if (!c) break;
 801179e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80117a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7ff fdb0 	bl	801130a <putc_flush>
 80117aa:	4603      	mov	r3, r0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	379c      	adds	r7, #156	; 0x9c
 80117b0:	46bd      	mov	sp, r7
 80117b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80117b6:	b003      	add	sp, #12
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop

080117bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117bc:	b480      	push	{r7}
 80117be:	b087      	sub	sp, #28
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	4613      	mov	r3, r2
 80117c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117ca:	2301      	movs	r3, #1
 80117cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80117d2:	4b1f      	ldr	r3, [pc, #124]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117d4:	7a5b      	ldrb	r3, [r3, #9]
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d131      	bne.n	8011840 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80117dc:	4b1c      	ldr	r3, [pc, #112]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117de:	7a5b      	ldrb	r3, [r3, #9]
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	461a      	mov	r2, r3
 80117e4:	4b1a      	ldr	r3, [pc, #104]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117e6:	2100      	movs	r1, #0
 80117e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80117ea:	4b19      	ldr	r3, [pc, #100]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117ec:	7a5b      	ldrb	r3, [r3, #9]
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	4a17      	ldr	r2, [pc, #92]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	4413      	add	r3, r2
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80117fa:	4b15      	ldr	r3, [pc, #84]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117fc:	7a5b      	ldrb	r3, [r3, #9]
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	461a      	mov	r2, r3
 8011802:	4b13      	ldr	r3, [pc, #76]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 8011804:	4413      	add	r3, r2
 8011806:	79fa      	ldrb	r2, [r7, #7]
 8011808:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801180a:	4b11      	ldr	r3, [pc, #68]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 801180c:	7a5b      	ldrb	r3, [r3, #9]
 801180e:	b2db      	uxtb	r3, r3
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	b2d1      	uxtb	r1, r2
 8011814:	4a0e      	ldr	r2, [pc, #56]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 8011816:	7251      	strb	r1, [r2, #9]
 8011818:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801181a:	7dbb      	ldrb	r3, [r7, #22]
 801181c:	3330      	adds	r3, #48	; 0x30
 801181e:	b2da      	uxtb	r2, r3
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	3301      	adds	r3, #1
 8011828:	223a      	movs	r2, #58	; 0x3a
 801182a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	3302      	adds	r3, #2
 8011830:	222f      	movs	r2, #47	; 0x2f
 8011832:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	3303      	adds	r3, #3
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801183c:	2300      	movs	r3, #0
 801183e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011840:	7dfb      	ldrb	r3, [r7, #23]
}
 8011842:	4618      	mov	r0, r3
 8011844:	371c      	adds	r7, #28
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	20006d60 	.word	0x20006d60

08011854 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801185e:	2200      	movs	r2, #0
 8011860:	6839      	ldr	r1, [r7, #0]
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff ffaa 	bl	80117bc <FATFS_LinkDriverEx>
 8011868:	4603      	mov	r3, r0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3708      	adds	r7, #8
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
	...

08011874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011878:	2200      	movs	r2, #0
 801187a:	4912      	ldr	r1, [pc, #72]	; (80118c4 <MX_USB_DEVICE_Init+0x50>)
 801187c:	4812      	ldr	r0, [pc, #72]	; (80118c8 <MX_USB_DEVICE_Init+0x54>)
 801187e:	f7fb fe7f 	bl	800d580 <USBD_Init>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d001      	beq.n	801188c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011888:	f7ef fd02 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801188c:	490f      	ldr	r1, [pc, #60]	; (80118cc <MX_USB_DEVICE_Init+0x58>)
 801188e:	480e      	ldr	r0, [pc, #56]	; (80118c8 <MX_USB_DEVICE_Init+0x54>)
 8011890:	f7fb fea6 	bl	800d5e0 <USBD_RegisterClass>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d001      	beq.n	801189e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801189a:	f7ef fcf9 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801189e:	490c      	ldr	r1, [pc, #48]	; (80118d0 <MX_USB_DEVICE_Init+0x5c>)
 80118a0:	4809      	ldr	r0, [pc, #36]	; (80118c8 <MX_USB_DEVICE_Init+0x54>)
 80118a2:	f7fb fddd 	bl	800d460 <USBD_CDC_RegisterInterface>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d001      	beq.n	80118b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80118ac:	f7ef fcf0 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80118b0:	4805      	ldr	r0, [pc, #20]	; (80118c8 <MX_USB_DEVICE_Init+0x54>)
 80118b2:	f7fb fecb 	bl	800d64c <USBD_Start>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80118bc:	f7ef fce8 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80118c0:	bf00      	nop
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	200000ac 	.word	0x200000ac
 80118c8:	20006d6c 	.word	0x20006d6c
 80118cc:	20000018 	.word	0x20000018
 80118d0:	20000098 	.word	0x20000098

080118d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80118d8:	2200      	movs	r2, #0
 80118da:	4905      	ldr	r1, [pc, #20]	; (80118f0 <CDC_Init_FS+0x1c>)
 80118dc:	4805      	ldr	r0, [pc, #20]	; (80118f4 <CDC_Init_FS+0x20>)
 80118de:	f7fb fdd9 	bl	800d494 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80118e2:	4905      	ldr	r1, [pc, #20]	; (80118f8 <CDC_Init_FS+0x24>)
 80118e4:	4803      	ldr	r0, [pc, #12]	; (80118f4 <CDC_Init_FS+0x20>)
 80118e6:	f7fb fdf7 	bl	800d4d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80118ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	20007848 	.word	0x20007848
 80118f4:	20006d6c 	.word	0x20006d6c
 80118f8:	20007048 	.word	0x20007048

080118fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80118fc:	b480      	push	{r7}
 80118fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011900:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011902:	4618      	mov	r0, r3
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	4603      	mov	r3, r0
 8011914:	6039      	str	r1, [r7, #0]
 8011916:	71fb      	strb	r3, [r7, #7]
 8011918:	4613      	mov	r3, r2
 801191a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801191c:	79fb      	ldrb	r3, [r7, #7]
 801191e:	2b23      	cmp	r3, #35	; 0x23
 8011920:	d84a      	bhi.n	80119b8 <CDC_Control_FS+0xac>
 8011922:	a201      	add	r2, pc, #4	; (adr r2, 8011928 <CDC_Control_FS+0x1c>)
 8011924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011928:	080119b9 	.word	0x080119b9
 801192c:	080119b9 	.word	0x080119b9
 8011930:	080119b9 	.word	0x080119b9
 8011934:	080119b9 	.word	0x080119b9
 8011938:	080119b9 	.word	0x080119b9
 801193c:	080119b9 	.word	0x080119b9
 8011940:	080119b9 	.word	0x080119b9
 8011944:	080119b9 	.word	0x080119b9
 8011948:	080119b9 	.word	0x080119b9
 801194c:	080119b9 	.word	0x080119b9
 8011950:	080119b9 	.word	0x080119b9
 8011954:	080119b9 	.word	0x080119b9
 8011958:	080119b9 	.word	0x080119b9
 801195c:	080119b9 	.word	0x080119b9
 8011960:	080119b9 	.word	0x080119b9
 8011964:	080119b9 	.word	0x080119b9
 8011968:	080119b9 	.word	0x080119b9
 801196c:	080119b9 	.word	0x080119b9
 8011970:	080119b9 	.word	0x080119b9
 8011974:	080119b9 	.word	0x080119b9
 8011978:	080119b9 	.word	0x080119b9
 801197c:	080119b9 	.word	0x080119b9
 8011980:	080119b9 	.word	0x080119b9
 8011984:	080119b9 	.word	0x080119b9
 8011988:	080119b9 	.word	0x080119b9
 801198c:	080119b9 	.word	0x080119b9
 8011990:	080119b9 	.word	0x080119b9
 8011994:	080119b9 	.word	0x080119b9
 8011998:	080119b9 	.word	0x080119b9
 801199c:	080119b9 	.word	0x080119b9
 80119a0:	080119b9 	.word	0x080119b9
 80119a4:	080119b9 	.word	0x080119b9
 80119a8:	080119b9 	.word	0x080119b9
 80119ac:	080119b9 	.word	0x080119b9
 80119b0:	080119b9 	.word	0x080119b9
 80119b4:	080119b9 	.word	0x080119b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80119b8:	bf00      	nop
  }

  return (USBD_OK);
 80119ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80119bc:	4618      	mov	r0, r3
 80119be:	370c      	adds	r7, #12
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80119d2:	6879      	ldr	r1, [r7, #4]
 80119d4:	480f      	ldr	r0, [pc, #60]	; (8011a14 <CDC_Receive_FS+0x4c>)
 80119d6:	f7fb fd7f 	bl	800d4d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80119da:	480e      	ldr	r0, [pc, #56]	; (8011a14 <CDC_Receive_FS+0x4c>)
 80119dc:	f7fb fd9a 	bl	800d514 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 80119e6:	2240      	movs	r2, #64	; 0x40
 80119e8:	2100      	movs	r1, #0
 80119ea:	480b      	ldr	r0, [pc, #44]	; (8011a18 <CDC_Receive_FS+0x50>)
 80119ec:	f001 fd3d 	bl	801346a <memset>
  memcpy(inBuff, Buf, len);
 80119f0:	7bfb      	ldrb	r3, [r7, #15]
 80119f2:	461a      	mov	r2, r3
 80119f4:	6879      	ldr	r1, [r7, #4]
 80119f6:	4808      	ldr	r0, [pc, #32]	; (8011a18 <CDC_Receive_FS+0x50>)
 80119f8:	f001 fdb6 	bl	8013568 <memcpy>
  memset(Buf, '\0', len);
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
 80119fe:	461a      	mov	r2, r3
 8011a00:	2100      	movs	r1, #0
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f001 fd31 	bl	801346a <memset>
  return (USBD_OK);
 8011a08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3710      	adds	r7, #16
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	20006d6c 	.word	0x20006d6c
 8011a18:	20006844 	.word	0x20006844

08011a1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b087      	sub	sp, #28
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	4613      	mov	r3, r2
 8011a28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	371c      	adds	r7, #28
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
	...

08011a40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	4603      	mov	r3, r0
 8011a48:	6039      	str	r1, [r7, #0]
 8011a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2212      	movs	r2, #18
 8011a50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011a52:	4b03      	ldr	r3, [pc, #12]	; (8011a60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr
 8011a60:	200000cc 	.word	0x200000cc

08011a64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	6039      	str	r1, [r7, #0]
 8011a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	2204      	movs	r2, #4
 8011a74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011a76:	4b03      	ldr	r3, [pc, #12]	; (8011a84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	200000ec 	.word	0x200000ec

08011a88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	4603      	mov	r3, r0
 8011a90:	6039      	str	r1, [r7, #0]
 8011a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a94:	79fb      	ldrb	r3, [r7, #7]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d105      	bne.n	8011aa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	4907      	ldr	r1, [pc, #28]	; (8011abc <USBD_FS_ProductStrDescriptor+0x34>)
 8011a9e:	4808      	ldr	r0, [pc, #32]	; (8011ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011aa0:	f7fc ffb0 	bl	800ea04 <USBD_GetString>
 8011aa4:	e004      	b.n	8011ab0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011aa6:	683a      	ldr	r2, [r7, #0]
 8011aa8:	4904      	ldr	r1, [pc, #16]	; (8011abc <USBD_FS_ProductStrDescriptor+0x34>)
 8011aaa:	4805      	ldr	r0, [pc, #20]	; (8011ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011aac:	f7fc ffaa 	bl	800ea04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ab0:	4b02      	ldr	r3, [pc, #8]	; (8011abc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	20008048 	.word	0x20008048
 8011ac0:	08016d70 	.word	0x08016d70

08011ac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	4603      	mov	r3, r0
 8011acc:	6039      	str	r1, [r7, #0]
 8011ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	4904      	ldr	r1, [pc, #16]	; (8011ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011ad4:	4804      	ldr	r0, [pc, #16]	; (8011ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011ad6:	f7fc ff95 	bl	800ea04 <USBD_GetString>
  return USBD_StrDesc;
 8011ada:	4b02      	ldr	r3, [pc, #8]	; (8011ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	20008048 	.word	0x20008048
 8011ae8:	08016d80 	.word	0x08016d80

08011aec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	6039      	str	r1, [r7, #0]
 8011af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	221a      	movs	r2, #26
 8011afc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011afe:	f000 f855 	bl	8011bac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011b02:	4b02      	ldr	r3, [pc, #8]	; (8011b0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3708      	adds	r7, #8
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	200000f0 	.word	0x200000f0

08011b10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	6039      	str	r1, [r7, #0]
 8011b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011b1c:	79fb      	ldrb	r3, [r7, #7]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d105      	bne.n	8011b2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011b22:	683a      	ldr	r2, [r7, #0]
 8011b24:	4907      	ldr	r1, [pc, #28]	; (8011b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011b26:	4808      	ldr	r0, [pc, #32]	; (8011b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b28:	f7fc ff6c 	bl	800ea04 <USBD_GetString>
 8011b2c:	e004      	b.n	8011b38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	4904      	ldr	r1, [pc, #16]	; (8011b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011b32:	4805      	ldr	r0, [pc, #20]	; (8011b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011b34:	f7fc ff66 	bl	800ea04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b38:	4b02      	ldr	r3, [pc, #8]	; (8011b44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	20008048 	.word	0x20008048
 8011b48:	08016d94 	.word	0x08016d94

08011b4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	4603      	mov	r3, r0
 8011b54:	6039      	str	r1, [r7, #0]
 8011b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b58:	79fb      	ldrb	r3, [r7, #7]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d105      	bne.n	8011b6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011b5e:	683a      	ldr	r2, [r7, #0]
 8011b60:	4907      	ldr	r1, [pc, #28]	; (8011b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011b62:	4808      	ldr	r0, [pc, #32]	; (8011b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011b64:	f7fc ff4e 	bl	800ea04 <USBD_GetString>
 8011b68:	e004      	b.n	8011b74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011b6a:	683a      	ldr	r2, [r7, #0]
 8011b6c:	4904      	ldr	r1, [pc, #16]	; (8011b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011b6e:	4805      	ldr	r0, [pc, #20]	; (8011b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011b70:	f7fc ff48 	bl	800ea04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b74:	4b02      	ldr	r3, [pc, #8]	; (8011b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	20008048 	.word	0x20008048
 8011b84:	08016da0 	.word	0x08016da0

08011b88 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	6039      	str	r1, [r7, #0]
 8011b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	220c      	movs	r2, #12
 8011b98:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8011b9a:	4b03      	ldr	r3, [pc, #12]	; (8011ba8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	200000e0 	.word	0x200000e0

08011bac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011bb2:	4b0f      	ldr	r3, [pc, #60]	; (8011bf0 <Get_SerialNum+0x44>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011bb8:	4b0e      	ldr	r3, [pc, #56]	; (8011bf4 <Get_SerialNum+0x48>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011bbe:	4b0e      	ldr	r3, [pc, #56]	; (8011bf8 <Get_SerialNum+0x4c>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4413      	add	r3, r2
 8011bca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d009      	beq.n	8011be6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011bd2:	2208      	movs	r2, #8
 8011bd4:	4909      	ldr	r1, [pc, #36]	; (8011bfc <Get_SerialNum+0x50>)
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	f000 f814 	bl	8011c04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011bdc:	2204      	movs	r2, #4
 8011bde:	4908      	ldr	r1, [pc, #32]	; (8011c00 <Get_SerialNum+0x54>)
 8011be0:	68b8      	ldr	r0, [r7, #8]
 8011be2:	f000 f80f 	bl	8011c04 <IntToUnicode>
  }
}
 8011be6:	bf00      	nop
 8011be8:	3710      	adds	r7, #16
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	1fff7590 	.word	0x1fff7590
 8011bf4:	1fff7594 	.word	0x1fff7594
 8011bf8:	1fff7598 	.word	0x1fff7598
 8011bfc:	200000f2 	.word	0x200000f2
 8011c00:	20000102 	.word	0x20000102

08011c04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b087      	sub	sp, #28
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011c12:	2300      	movs	r3, #0
 8011c14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011c16:	2300      	movs	r3, #0
 8011c18:	75fb      	strb	r3, [r7, #23]
 8011c1a:	e027      	b.n	8011c6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	0f1b      	lsrs	r3, r3, #28
 8011c20:	2b09      	cmp	r3, #9
 8011c22:	d80b      	bhi.n	8011c3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	0f1b      	lsrs	r3, r3, #28
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
 8011c2c:	005b      	lsls	r3, r3, #1
 8011c2e:	4619      	mov	r1, r3
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	440b      	add	r3, r1
 8011c34:	3230      	adds	r2, #48	; 0x30
 8011c36:	b2d2      	uxtb	r2, r2
 8011c38:	701a      	strb	r2, [r3, #0]
 8011c3a:	e00a      	b.n	8011c52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	0f1b      	lsrs	r3, r3, #28
 8011c40:	b2da      	uxtb	r2, r3
 8011c42:	7dfb      	ldrb	r3, [r7, #23]
 8011c44:	005b      	lsls	r3, r3, #1
 8011c46:	4619      	mov	r1, r3
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	440b      	add	r3, r1
 8011c4c:	3237      	adds	r2, #55	; 0x37
 8011c4e:	b2d2      	uxtb	r2, r2
 8011c50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	011b      	lsls	r3, r3, #4
 8011c56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011c58:	7dfb      	ldrb	r3, [r7, #23]
 8011c5a:	005b      	lsls	r3, r3, #1
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	4413      	add	r3, r2
 8011c62:	2200      	movs	r2, #0
 8011c64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011c66:	7dfb      	ldrb	r3, [r7, #23]
 8011c68:	3301      	adds	r3, #1
 8011c6a:	75fb      	strb	r3, [r7, #23]
 8011c6c:	7dfa      	ldrb	r2, [r7, #23]
 8011c6e:	79fb      	ldrb	r3, [r7, #7]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d3d3      	bcc.n	8011c1c <IntToUnicode+0x18>
  }
}
 8011c74:	bf00      	nop
 8011c76:	bf00      	nop
 8011c78:	371c      	adds	r7, #28
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
	...

08011c84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b0ac      	sub	sp, #176	; 0xb0
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011c90:	2200      	movs	r2, #0
 8011c92:	601a      	str	r2, [r3, #0]
 8011c94:	605a      	str	r2, [r3, #4]
 8011c96:	609a      	str	r2, [r3, #8]
 8011c98:	60da      	str	r2, [r3, #12]
 8011c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011c9c:	f107 0314 	add.w	r3, r7, #20
 8011ca0:	2288      	movs	r2, #136	; 0x88
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f001 fbe0 	bl	801346a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011cb2:	d164      	bne.n	8011d7e <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011cb8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011cc2:	f107 0314 	add.w	r3, r7, #20
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7f5 fcbc 	bl	8007644 <HAL_RCCEx_PeriphCLKConfig>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8011cd2:	f7ef fadd 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011cd6:	4b2c      	ldr	r3, [pc, #176]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cda:	4a2b      	ldr	r2, [pc, #172]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011cdc:	f043 0301 	orr.w	r3, r3, #1
 8011ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011ce2:	4b29      	ldr	r3, [pc, #164]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	613b      	str	r3, [r7, #16]
 8011cec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011cee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d02:	2303      	movs	r3, #3
 8011d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011d08:	230a      	movs	r3, #10
 8011d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011d12:	4619      	mov	r1, r3
 8011d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011d18:	f7f2 fc68 	bl	80045ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011d1c:	4b1a      	ldr	r3, [pc, #104]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d20:	4a19      	ldr	r2, [pc, #100]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011d28:	4b17      	ldr	r3, [pc, #92]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011d30:	60fb      	str	r3, [r7, #12]
 8011d32:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011d34:	4b14      	ldr	r3, [pc, #80]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d114      	bne.n	8011d6a <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011d40:	4b11      	ldr	r3, [pc, #68]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d44:	4a10      	ldr	r2, [pc, #64]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8011d4c:	4b0e      	ldr	r3, [pc, #56]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d54:	60bb      	str	r3, [r7, #8]
 8011d56:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8011d58:	f7f4 fe4a 	bl	80069f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d60:	4a09      	ldr	r2, [pc, #36]	; (8011d88 <HAL_PCD_MspInit+0x104>)
 8011d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d66:	6593      	str	r3, [r2, #88]	; 0x58
 8011d68:	e001      	b.n	8011d6e <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8011d6a:	f7f4 fe41 	bl	80069f0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2100      	movs	r1, #0
 8011d72:	2043      	movs	r0, #67	; 0x43
 8011d74:	f7f2 f9cb 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011d78:	2043      	movs	r0, #67	; 0x43
 8011d7a:	f7f2 f9e4 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011d7e:	bf00      	nop
 8011d80:	37b0      	adds	r7, #176	; 0xb0
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	40021000 	.word	0x40021000

08011d8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011da0:	4619      	mov	r1, r3
 8011da2:	4610      	mov	r0, r2
 8011da4:	f7fb fc9f 	bl	800d6e6 <USBD_LL_SetupStage>
}
 8011da8:	bf00      	nop
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	460b      	mov	r3, r1
 8011dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011dc2:	78fa      	ldrb	r2, [r7, #3]
 8011dc4:	6879      	ldr	r1, [r7, #4]
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	00db      	lsls	r3, r3, #3
 8011dca:	4413      	add	r3, r2
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	440b      	add	r3, r1
 8011dd0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	78fb      	ldrb	r3, [r7, #3]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	f7fb fcd9 	bl	800d790 <USBD_LL_DataOutStage>
}
 8011dde:	bf00      	nop
 8011de0:	3708      	adds	r7, #8
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	460b      	mov	r3, r1
 8011df0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011df8:	78fa      	ldrb	r2, [r7, #3]
 8011dfa:	6879      	ldr	r1, [r7, #4]
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	00db      	lsls	r3, r3, #3
 8011e00:	4413      	add	r3, r2
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	440b      	add	r3, r1
 8011e06:	3348      	adds	r3, #72	; 0x48
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	78fb      	ldrb	r3, [r7, #3]
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	f7fb fd72 	bl	800d8f6 <USBD_LL_DataInStage>
}
 8011e12:	bf00      	nop
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}

08011e1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e1a:	b580      	push	{r7, lr}
 8011e1c:	b082      	sub	sp, #8
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7fb feac 	bl	800db86 <USBD_LL_SOF>
}
 8011e2e:	bf00      	nop
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b084      	sub	sp, #16
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	2b02      	cmp	r3, #2
 8011e48:	d001      	beq.n	8011e4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011e4a:	f7ef fa21 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011e54:	7bfa      	ldrb	r2, [r7, #15]
 8011e56:	4611      	mov	r1, r2
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fb fe50 	bl	800dafe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fb fdf8 	bl	800da5a <USBD_LL_Reset>
}
 8011e6a:	bf00      	nop
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
	...

08011e74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	6812      	ldr	r2, [r2, #0]
 8011e8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011e8e:	f043 0301 	orr.w	r3, r3, #1
 8011e92:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fb fe3f 	bl	800db1e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6a1b      	ldr	r3, [r3, #32]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d005      	beq.n	8011eb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ea8:	4b04      	ldr	r3, [pc, #16]	; (8011ebc <HAL_PCD_SuspendCallback+0x48>)
 8011eaa:	691b      	ldr	r3, [r3, #16]
 8011eac:	4a03      	ldr	r2, [pc, #12]	; (8011ebc <HAL_PCD_SuspendCallback+0x48>)
 8011eae:	f043 0306 	orr.w	r3, r3, #6
 8011eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011eb4:	bf00      	nop
 8011eb6:	3708      	adds	r7, #8
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}
 8011ebc:	e000ed00 	.word	0xe000ed00

08011ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	6812      	ldr	r2, [r2, #0]
 8011ed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011eda:	f023 0301 	bic.w	r3, r3, #1
 8011ede:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6a1b      	ldr	r3, [r3, #32]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d007      	beq.n	8011ef8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ee8:	4b08      	ldr	r3, [pc, #32]	; (8011f0c <HAL_PCD_ResumeCallback+0x4c>)
 8011eea:	691b      	ldr	r3, [r3, #16]
 8011eec:	4a07      	ldr	r2, [pc, #28]	; (8011f0c <HAL_PCD_ResumeCallback+0x4c>)
 8011eee:	f023 0306 	bic.w	r3, r3, #6
 8011ef2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011ef4:	f000 faf6 	bl	80124e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fb fe29 	bl	800db56 <USBD_LL_Resume>
}
 8011f04:	bf00      	nop
 8011f06:	3708      	adds	r7, #8
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	e000ed00 	.word	0xe000ed00

08011f10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f22:	78fa      	ldrb	r2, [r7, #3]
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fb fe7f 	bl	800dc2a <USBD_LL_IsoOUTIncomplete>
}
 8011f2c:	bf00      	nop
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f46:	78fa      	ldrb	r2, [r7, #3]
 8011f48:	4611      	mov	r1, r2
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fb fe3b 	bl	800dbc6 <USBD_LL_IsoINIncomplete>
}
 8011f50:	bf00      	nop
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fb fe91 	bl	800dc8e <USBD_LL_DevConnected>
}
 8011f6c:	bf00      	nop
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fb fe8e 	bl	800dca4 <USBD_LL_DevDisconnected>
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d13c      	bne.n	801201a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011fa0:	4a20      	ldr	r2, [pc, #128]	; (8012024 <USBD_LL_Init+0x94>)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	4a1e      	ldr	r2, [pc, #120]	; (8012024 <USBD_LL_Init+0x94>)
 8011fac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011fb0:	4b1c      	ldr	r3, [pc, #112]	; (8012024 <USBD_LL_Init+0x94>)
 8011fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011fb8:	4b1a      	ldr	r3, [pc, #104]	; (8012024 <USBD_LL_Init+0x94>)
 8011fba:	2206      	movs	r2, #6
 8011fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011fbe:	4b19      	ldr	r3, [pc, #100]	; (8012024 <USBD_LL_Init+0x94>)
 8011fc0:	2202      	movs	r2, #2
 8011fc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011fc4:	4b17      	ldr	r3, [pc, #92]	; (8012024 <USBD_LL_Init+0x94>)
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011fca:	4b16      	ldr	r3, [pc, #88]	; (8012024 <USBD_LL_Init+0x94>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011fd0:	4b14      	ldr	r3, [pc, #80]	; (8012024 <USBD_LL_Init+0x94>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011fd6:	4b13      	ldr	r3, [pc, #76]	; (8012024 <USBD_LL_Init+0x94>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011fdc:	4b11      	ldr	r3, [pc, #68]	; (8012024 <USBD_LL_Init+0x94>)
 8011fde:	2200      	movs	r2, #0
 8011fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011fe2:	4b10      	ldr	r3, [pc, #64]	; (8012024 <USBD_LL_Init+0x94>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011fe8:	4b0e      	ldr	r3, [pc, #56]	; (8012024 <USBD_LL_Init+0x94>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011fee:	480d      	ldr	r0, [pc, #52]	; (8012024 <USBD_LL_Init+0x94>)
 8011ff0:	f7f3 faf3 	bl	80055da <HAL_PCD_Init>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d001      	beq.n	8011ffe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011ffa:	f7ef f949 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011ffe:	2180      	movs	r1, #128	; 0x80
 8012000:	4808      	ldr	r0, [pc, #32]	; (8012024 <USBD_LL_Init+0x94>)
 8012002:	f7f4 fc5c 	bl	80068be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012006:	2240      	movs	r2, #64	; 0x40
 8012008:	2100      	movs	r1, #0
 801200a:	4806      	ldr	r0, [pc, #24]	; (8012024 <USBD_LL_Init+0x94>)
 801200c:	f7f4 fc10 	bl	8006830 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012010:	2280      	movs	r2, #128	; 0x80
 8012012:	2101      	movs	r1, #1
 8012014:	4803      	ldr	r0, [pc, #12]	; (8012024 <USBD_LL_Init+0x94>)
 8012016:	f7f4 fc0b 	bl	8006830 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	20008248 	.word	0x20008248

08012028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012030:	2300      	movs	r3, #0
 8012032:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012034:	2300      	movs	r3, #0
 8012036:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801203e:	4618      	mov	r0, r3
 8012040:	f7f3 fbef 	bl	8005822 <HAL_PCD_Start>
 8012044:	4603      	mov	r3, r0
 8012046:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012048:	7bbb      	ldrb	r3, [r7, #14]
 801204a:	2b03      	cmp	r3, #3
 801204c:	d816      	bhi.n	801207c <USBD_LL_Start+0x54>
 801204e:	a201      	add	r2, pc, #4	; (adr r2, 8012054 <USBD_LL_Start+0x2c>)
 8012050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012054:	08012065 	.word	0x08012065
 8012058:	0801206b 	.word	0x0801206b
 801205c:	08012071 	.word	0x08012071
 8012060:	08012077 	.word	0x08012077
    case HAL_OK :
      usb_status = USBD_OK;
 8012064:	2300      	movs	r3, #0
 8012066:	73fb      	strb	r3, [r7, #15]
    break;
 8012068:	e00b      	b.n	8012082 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801206a:	2303      	movs	r3, #3
 801206c:	73fb      	strb	r3, [r7, #15]
    break;
 801206e:	e008      	b.n	8012082 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012070:	2301      	movs	r3, #1
 8012072:	73fb      	strb	r3, [r7, #15]
    break;
 8012074:	e005      	b.n	8012082 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012076:	2303      	movs	r3, #3
 8012078:	73fb      	strb	r3, [r7, #15]
    break;
 801207a:	e002      	b.n	8012082 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801207c:	2303      	movs	r3, #3
 801207e:	73fb      	strb	r3, [r7, #15]
    break;
 8012080:	bf00      	nop
  }
  return usb_status;
 8012082:	7bfb      	ldrb	r3, [r7, #15]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	4608      	mov	r0, r1
 8012096:	4611      	mov	r1, r2
 8012098:	461a      	mov	r2, r3
 801209a:	4603      	mov	r3, r0
 801209c:	70fb      	strb	r3, [r7, #3]
 801209e:	460b      	mov	r3, r1
 80120a0:	70bb      	strb	r3, [r7, #2]
 80120a2:	4613      	mov	r3, r2
 80120a4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120a6:	2300      	movs	r3, #0
 80120a8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120aa:	2300      	movs	r3, #0
 80120ac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80120b4:	78bb      	ldrb	r3, [r7, #2]
 80120b6:	883a      	ldrh	r2, [r7, #0]
 80120b8:	78f9      	ldrb	r1, [r7, #3]
 80120ba:	f7f4 f899 	bl	80061f0 <HAL_PCD_EP_Open>
 80120be:	4603      	mov	r3, r0
 80120c0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80120c2:	7bbb      	ldrb	r3, [r7, #14]
 80120c4:	2b03      	cmp	r3, #3
 80120c6:	d817      	bhi.n	80120f8 <USBD_LL_OpenEP+0x6c>
 80120c8:	a201      	add	r2, pc, #4	; (adr r2, 80120d0 <USBD_LL_OpenEP+0x44>)
 80120ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ce:	bf00      	nop
 80120d0:	080120e1 	.word	0x080120e1
 80120d4:	080120e7 	.word	0x080120e7
 80120d8:	080120ed 	.word	0x080120ed
 80120dc:	080120f3 	.word	0x080120f3
    case HAL_OK :
      usb_status = USBD_OK;
 80120e0:	2300      	movs	r3, #0
 80120e2:	73fb      	strb	r3, [r7, #15]
    break;
 80120e4:	e00b      	b.n	80120fe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80120e6:	2303      	movs	r3, #3
 80120e8:	73fb      	strb	r3, [r7, #15]
    break;
 80120ea:	e008      	b.n	80120fe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80120ec:	2301      	movs	r3, #1
 80120ee:	73fb      	strb	r3, [r7, #15]
    break;
 80120f0:	e005      	b.n	80120fe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80120f2:	2303      	movs	r3, #3
 80120f4:	73fb      	strb	r3, [r7, #15]
    break;
 80120f6:	e002      	b.n	80120fe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80120f8:	2303      	movs	r3, #3
 80120fa:	73fb      	strb	r3, [r7, #15]
    break;
 80120fc:	bf00      	nop
  }
  return usb_status;
 80120fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012100:	4618      	mov	r0, r3
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	460b      	mov	r3, r1
 8012112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012114:	2300      	movs	r3, #0
 8012116:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012118:	2300      	movs	r3, #0
 801211a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012122:	78fa      	ldrb	r2, [r7, #3]
 8012124:	4611      	mov	r1, r2
 8012126:	4618      	mov	r0, r3
 8012128:	f7f4 f8ca 	bl	80062c0 <HAL_PCD_EP_Close>
 801212c:	4603      	mov	r3, r0
 801212e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012130:	7bbb      	ldrb	r3, [r7, #14]
 8012132:	2b03      	cmp	r3, #3
 8012134:	d816      	bhi.n	8012164 <USBD_LL_CloseEP+0x5c>
 8012136:	a201      	add	r2, pc, #4	; (adr r2, 801213c <USBD_LL_CloseEP+0x34>)
 8012138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801213c:	0801214d 	.word	0x0801214d
 8012140:	08012153 	.word	0x08012153
 8012144:	08012159 	.word	0x08012159
 8012148:	0801215f 	.word	0x0801215f
    case HAL_OK :
      usb_status = USBD_OK;
 801214c:	2300      	movs	r3, #0
 801214e:	73fb      	strb	r3, [r7, #15]
    break;
 8012150:	e00b      	b.n	801216a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012152:	2303      	movs	r3, #3
 8012154:	73fb      	strb	r3, [r7, #15]
    break;
 8012156:	e008      	b.n	801216a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012158:	2301      	movs	r3, #1
 801215a:	73fb      	strb	r3, [r7, #15]
    break;
 801215c:	e005      	b.n	801216a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801215e:	2303      	movs	r3, #3
 8012160:	73fb      	strb	r3, [r7, #15]
    break;
 8012162:	e002      	b.n	801216a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012164:	2303      	movs	r3, #3
 8012166:	73fb      	strb	r3, [r7, #15]
    break;
 8012168:	bf00      	nop
  }
  return usb_status;
 801216a:	7bfb      	ldrb	r3, [r7, #15]
}
 801216c:	4618      	mov	r0, r3
 801216e:	3710      	adds	r7, #16
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	460b      	mov	r3, r1
 801217e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012180:	2300      	movs	r3, #0
 8012182:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012184:	2300      	movs	r3, #0
 8012186:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801218e:	78fa      	ldrb	r2, [r7, #3]
 8012190:	4611      	mov	r1, r2
 8012192:	4618      	mov	r0, r3
 8012194:	f7f4 f959 	bl	800644a <HAL_PCD_EP_SetStall>
 8012198:	4603      	mov	r3, r0
 801219a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801219c:	7bbb      	ldrb	r3, [r7, #14]
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d816      	bhi.n	80121d0 <USBD_LL_StallEP+0x5c>
 80121a2:	a201      	add	r2, pc, #4	; (adr r2, 80121a8 <USBD_LL_StallEP+0x34>)
 80121a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a8:	080121b9 	.word	0x080121b9
 80121ac:	080121bf 	.word	0x080121bf
 80121b0:	080121c5 	.word	0x080121c5
 80121b4:	080121cb 	.word	0x080121cb
    case HAL_OK :
      usb_status = USBD_OK;
 80121b8:	2300      	movs	r3, #0
 80121ba:	73fb      	strb	r3, [r7, #15]
    break;
 80121bc:	e00b      	b.n	80121d6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80121be:	2303      	movs	r3, #3
 80121c0:	73fb      	strb	r3, [r7, #15]
    break;
 80121c2:	e008      	b.n	80121d6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80121c4:	2301      	movs	r3, #1
 80121c6:	73fb      	strb	r3, [r7, #15]
    break;
 80121c8:	e005      	b.n	80121d6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80121ca:	2303      	movs	r3, #3
 80121cc:	73fb      	strb	r3, [r7, #15]
    break;
 80121ce:	e002      	b.n	80121d6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80121d0:	2303      	movs	r3, #3
 80121d2:	73fb      	strb	r3, [r7, #15]
    break;
 80121d4:	bf00      	nop
  }
  return usb_status;
 80121d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	460b      	mov	r3, r1
 80121ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121f0:	2300      	movs	r3, #0
 80121f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80121fa:	78fa      	ldrb	r2, [r7, #3]
 80121fc:	4611      	mov	r1, r2
 80121fe:	4618      	mov	r0, r3
 8012200:	f7f4 f985 	bl	800650e <HAL_PCD_EP_ClrStall>
 8012204:	4603      	mov	r3, r0
 8012206:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012208:	7bbb      	ldrb	r3, [r7, #14]
 801220a:	2b03      	cmp	r3, #3
 801220c:	d816      	bhi.n	801223c <USBD_LL_ClearStallEP+0x5c>
 801220e:	a201      	add	r2, pc, #4	; (adr r2, 8012214 <USBD_LL_ClearStallEP+0x34>)
 8012210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012214:	08012225 	.word	0x08012225
 8012218:	0801222b 	.word	0x0801222b
 801221c:	08012231 	.word	0x08012231
 8012220:	08012237 	.word	0x08012237
    case HAL_OK :
      usb_status = USBD_OK;
 8012224:	2300      	movs	r3, #0
 8012226:	73fb      	strb	r3, [r7, #15]
    break;
 8012228:	e00b      	b.n	8012242 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801222a:	2303      	movs	r3, #3
 801222c:	73fb      	strb	r3, [r7, #15]
    break;
 801222e:	e008      	b.n	8012242 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012230:	2301      	movs	r3, #1
 8012232:	73fb      	strb	r3, [r7, #15]
    break;
 8012234:	e005      	b.n	8012242 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012236:	2303      	movs	r3, #3
 8012238:	73fb      	strb	r3, [r7, #15]
    break;
 801223a:	e002      	b.n	8012242 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801223c:	2303      	movs	r3, #3
 801223e:	73fb      	strb	r3, [r7, #15]
    break;
 8012240:	bf00      	nop
  }
  return usb_status;
 8012242:	7bfb      	ldrb	r3, [r7, #15]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3710      	adds	r7, #16
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801224c:	b480      	push	{r7}
 801224e:	b085      	sub	sp, #20
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	460b      	mov	r3, r1
 8012256:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801225e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012264:	2b00      	cmp	r3, #0
 8012266:	da0b      	bge.n	8012280 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012268:	78fb      	ldrb	r3, [r7, #3]
 801226a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801226e:	68f9      	ldr	r1, [r7, #12]
 8012270:	4613      	mov	r3, r2
 8012272:	00db      	lsls	r3, r3, #3
 8012274:	4413      	add	r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	440b      	add	r3, r1
 801227a:	333e      	adds	r3, #62	; 0x3e
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	e00b      	b.n	8012298 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012280:	78fb      	ldrb	r3, [r7, #3]
 8012282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	4613      	mov	r3, r2
 801228a:	00db      	lsls	r3, r3, #3
 801228c:	4413      	add	r3, r2
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	440b      	add	r3, r1
 8012292:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012296:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012298:	4618      	mov	r0, r3
 801229a:	3714      	adds	r7, #20
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	460b      	mov	r3, r1
 80122ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80122be:	78fa      	ldrb	r2, [r7, #3]
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7f3 ff6f 	bl	80061a6 <HAL_PCD_SetAddress>
 80122c8:	4603      	mov	r3, r0
 80122ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80122cc:	7bbb      	ldrb	r3, [r7, #14]
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d816      	bhi.n	8012300 <USBD_LL_SetUSBAddress+0x5c>
 80122d2:	a201      	add	r2, pc, #4	; (adr r2, 80122d8 <USBD_LL_SetUSBAddress+0x34>)
 80122d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d8:	080122e9 	.word	0x080122e9
 80122dc:	080122ef 	.word	0x080122ef
 80122e0:	080122f5 	.word	0x080122f5
 80122e4:	080122fb 	.word	0x080122fb
    case HAL_OK :
      usb_status = USBD_OK;
 80122e8:	2300      	movs	r3, #0
 80122ea:	73fb      	strb	r3, [r7, #15]
    break;
 80122ec:	e00b      	b.n	8012306 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80122ee:	2303      	movs	r3, #3
 80122f0:	73fb      	strb	r3, [r7, #15]
    break;
 80122f2:	e008      	b.n	8012306 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80122f4:	2301      	movs	r3, #1
 80122f6:	73fb      	strb	r3, [r7, #15]
    break;
 80122f8:	e005      	b.n	8012306 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80122fa:	2303      	movs	r3, #3
 80122fc:	73fb      	strb	r3, [r7, #15]
    break;
 80122fe:	e002      	b.n	8012306 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012300:	2303      	movs	r3, #3
 8012302:	73fb      	strb	r3, [r7, #15]
    break;
 8012304:	bf00      	nop
  }
  return usb_status;
 8012306:	7bfb      	ldrb	r3, [r7, #15]
}
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	607a      	str	r2, [r7, #4]
 801231a:	603b      	str	r3, [r7, #0]
 801231c:	460b      	mov	r3, r1
 801231e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012320:	2300      	movs	r3, #0
 8012322:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801232e:	7af9      	ldrb	r1, [r7, #11]
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	f7f4 f858 	bl	80063e8 <HAL_PCD_EP_Transmit>
 8012338:	4603      	mov	r3, r0
 801233a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801233c:	7dbb      	ldrb	r3, [r7, #22]
 801233e:	2b03      	cmp	r3, #3
 8012340:	d816      	bhi.n	8012370 <USBD_LL_Transmit+0x60>
 8012342:	a201      	add	r2, pc, #4	; (adr r2, 8012348 <USBD_LL_Transmit+0x38>)
 8012344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012348:	08012359 	.word	0x08012359
 801234c:	0801235f 	.word	0x0801235f
 8012350:	08012365 	.word	0x08012365
 8012354:	0801236b 	.word	0x0801236b
    case HAL_OK :
      usb_status = USBD_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	75fb      	strb	r3, [r7, #23]
    break;
 801235c:	e00b      	b.n	8012376 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801235e:	2303      	movs	r3, #3
 8012360:	75fb      	strb	r3, [r7, #23]
    break;
 8012362:	e008      	b.n	8012376 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012364:	2301      	movs	r3, #1
 8012366:	75fb      	strb	r3, [r7, #23]
    break;
 8012368:	e005      	b.n	8012376 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801236a:	2303      	movs	r3, #3
 801236c:	75fb      	strb	r3, [r7, #23]
    break;
 801236e:	e002      	b.n	8012376 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8012370:	2303      	movs	r3, #3
 8012372:	75fb      	strb	r3, [r7, #23]
    break;
 8012374:	bf00      	nop
  }
  return usb_status;
 8012376:	7dfb      	ldrb	r3, [r7, #23]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3718      	adds	r7, #24
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b086      	sub	sp, #24
 8012384:	af00      	add	r7, sp, #0
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	607a      	str	r2, [r7, #4]
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	460b      	mov	r3, r1
 801238e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012390:	2300      	movs	r3, #0
 8012392:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801239e:	7af9      	ldrb	r1, [r7, #11]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	f7f3 ffd6 	bl	8006354 <HAL_PCD_EP_Receive>
 80123a8:	4603      	mov	r3, r0
 80123aa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80123ac:	7dbb      	ldrb	r3, [r7, #22]
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d816      	bhi.n	80123e0 <USBD_LL_PrepareReceive+0x60>
 80123b2:	a201      	add	r2, pc, #4	; (adr r2, 80123b8 <USBD_LL_PrepareReceive+0x38>)
 80123b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b8:	080123c9 	.word	0x080123c9
 80123bc:	080123cf 	.word	0x080123cf
 80123c0:	080123d5 	.word	0x080123d5
 80123c4:	080123db 	.word	0x080123db
    case HAL_OK :
      usb_status = USBD_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	75fb      	strb	r3, [r7, #23]
    break;
 80123cc:	e00b      	b.n	80123e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80123ce:	2303      	movs	r3, #3
 80123d0:	75fb      	strb	r3, [r7, #23]
    break;
 80123d2:	e008      	b.n	80123e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80123d4:	2301      	movs	r3, #1
 80123d6:	75fb      	strb	r3, [r7, #23]
    break;
 80123d8:	e005      	b.n	80123e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80123da:	2303      	movs	r3, #3
 80123dc:	75fb      	strb	r3, [r7, #23]
    break;
 80123de:	e002      	b.n	80123e6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80123e0:	2303      	movs	r3, #3
 80123e2:	75fb      	strb	r3, [r7, #23]
    break;
 80123e4:	bf00      	nop
  }
  return usb_status;
 80123e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3718      	adds	r7, #24
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	460b      	mov	r3, r1
 80123fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012402:	78fa      	ldrb	r2, [r7, #3]
 8012404:	4611      	mov	r1, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f7f3 ffd6 	bl	80063b8 <HAL_PCD_EP_GetRxCount>
 801240c:	4603      	mov	r3, r0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	460b      	mov	r3, r1
 8012422:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012424:	78fb      	ldrb	r3, [r7, #3]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d002      	beq.n	8012430 <HAL_PCDEx_LPM_Callback+0x18>
 801242a:	2b01      	cmp	r3, #1
 801242c:	d01f      	beq.n	801246e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801242e:	e03b      	b.n	80124a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6a1b      	ldr	r3, [r3, #32]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d007      	beq.n	8012448 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012438:	f000 f854 	bl	80124e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801243c:	4b1c      	ldr	r3, [pc, #112]	; (80124b0 <HAL_PCDEx_LPM_Callback+0x98>)
 801243e:	691b      	ldr	r3, [r3, #16]
 8012440:	4a1b      	ldr	r2, [pc, #108]	; (80124b0 <HAL_PCDEx_LPM_Callback+0x98>)
 8012442:	f023 0306 	bic.w	r3, r3, #6
 8012446:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	6812      	ldr	r2, [r2, #0]
 8012456:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801245a:	f023 0301 	bic.w	r3, r3, #1
 801245e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012466:	4618      	mov	r0, r3
 8012468:	f7fb fb75 	bl	800db56 <USBD_LL_Resume>
    break;
 801246c:	e01c      	b.n	80124a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	6812      	ldr	r2, [r2, #0]
 801247c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012480:	f043 0301 	orr.w	r3, r3, #1
 8012484:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801248c:	4618      	mov	r0, r3
 801248e:	f7fb fb46 	bl	800db1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6a1b      	ldr	r3, [r3, #32]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d005      	beq.n	80124a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801249a:	4b05      	ldr	r3, [pc, #20]	; (80124b0 <HAL_PCDEx_LPM_Callback+0x98>)
 801249c:	691b      	ldr	r3, [r3, #16]
 801249e:	4a04      	ldr	r2, [pc, #16]	; (80124b0 <HAL_PCDEx_LPM_Callback+0x98>)
 80124a0:	f043 0306 	orr.w	r3, r3, #6
 80124a4:	6113      	str	r3, [r2, #16]
    break;
 80124a6:	bf00      	nop
}
 80124a8:	bf00      	nop
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	e000ed00 	.word	0xe000ed00

080124b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80124bc:	4b03      	ldr	r3, [pc, #12]	; (80124cc <USBD_static_malloc+0x18>)
}
 80124be:	4618      	mov	r0, r3
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop
 80124cc:	20008754 	.word	0x20008754

080124d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]

}
 80124d8:	bf00      	nop
 80124da:	370c      	adds	r7, #12
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80124e8:	f7ee fd28 	bl	8000f3c <SystemClock_Config>
}
 80124ec:	bf00      	nop
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <__cvt>:
 80124f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124f4:	ec55 4b10 	vmov	r4, r5, d0
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	460e      	mov	r6, r1
 80124fc:	4619      	mov	r1, r3
 80124fe:	462b      	mov	r3, r5
 8012500:	bfbb      	ittet	lt
 8012502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012506:	461d      	movlt	r5, r3
 8012508:	2300      	movge	r3, #0
 801250a:	232d      	movlt	r3, #45	; 0x2d
 801250c:	700b      	strb	r3, [r1, #0]
 801250e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012514:	4691      	mov	r9, r2
 8012516:	f023 0820 	bic.w	r8, r3, #32
 801251a:	bfbc      	itt	lt
 801251c:	4622      	movlt	r2, r4
 801251e:	4614      	movlt	r4, r2
 8012520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012524:	d005      	beq.n	8012532 <__cvt+0x42>
 8012526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801252a:	d100      	bne.n	801252e <__cvt+0x3e>
 801252c:	3601      	adds	r6, #1
 801252e:	2102      	movs	r1, #2
 8012530:	e000      	b.n	8012534 <__cvt+0x44>
 8012532:	2103      	movs	r1, #3
 8012534:	ab03      	add	r3, sp, #12
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	ab02      	add	r3, sp, #8
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	ec45 4b10 	vmov	d0, r4, r5
 8012540:	4653      	mov	r3, sl
 8012542:	4632      	mov	r2, r6
 8012544:	f001 f8ac 	bl	80136a0 <_dtoa_r>
 8012548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801254c:	4607      	mov	r7, r0
 801254e:	d102      	bne.n	8012556 <__cvt+0x66>
 8012550:	f019 0f01 	tst.w	r9, #1
 8012554:	d022      	beq.n	801259c <__cvt+0xac>
 8012556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801255a:	eb07 0906 	add.w	r9, r7, r6
 801255e:	d110      	bne.n	8012582 <__cvt+0x92>
 8012560:	783b      	ldrb	r3, [r7, #0]
 8012562:	2b30      	cmp	r3, #48	; 0x30
 8012564:	d10a      	bne.n	801257c <__cvt+0x8c>
 8012566:	2200      	movs	r2, #0
 8012568:	2300      	movs	r3, #0
 801256a:	4620      	mov	r0, r4
 801256c:	4629      	mov	r1, r5
 801256e:	f7ee faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8012572:	b918      	cbnz	r0, 801257c <__cvt+0x8c>
 8012574:	f1c6 0601 	rsb	r6, r6, #1
 8012578:	f8ca 6000 	str.w	r6, [sl]
 801257c:	f8da 3000 	ldr.w	r3, [sl]
 8012580:	4499      	add	r9, r3
 8012582:	2200      	movs	r2, #0
 8012584:	2300      	movs	r3, #0
 8012586:	4620      	mov	r0, r4
 8012588:	4629      	mov	r1, r5
 801258a:	f7ee fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801258e:	b108      	cbz	r0, 8012594 <__cvt+0xa4>
 8012590:	f8cd 900c 	str.w	r9, [sp, #12]
 8012594:	2230      	movs	r2, #48	; 0x30
 8012596:	9b03      	ldr	r3, [sp, #12]
 8012598:	454b      	cmp	r3, r9
 801259a:	d307      	bcc.n	80125ac <__cvt+0xbc>
 801259c:	9b03      	ldr	r3, [sp, #12]
 801259e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125a0:	1bdb      	subs	r3, r3, r7
 80125a2:	4638      	mov	r0, r7
 80125a4:	6013      	str	r3, [r2, #0]
 80125a6:	b004      	add	sp, #16
 80125a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ac:	1c59      	adds	r1, r3, #1
 80125ae:	9103      	str	r1, [sp, #12]
 80125b0:	701a      	strb	r2, [r3, #0]
 80125b2:	e7f0      	b.n	8012596 <__cvt+0xa6>

080125b4 <__exponent>:
 80125b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125b6:	4603      	mov	r3, r0
 80125b8:	2900      	cmp	r1, #0
 80125ba:	bfb8      	it	lt
 80125bc:	4249      	neglt	r1, r1
 80125be:	f803 2b02 	strb.w	r2, [r3], #2
 80125c2:	bfb4      	ite	lt
 80125c4:	222d      	movlt	r2, #45	; 0x2d
 80125c6:	222b      	movge	r2, #43	; 0x2b
 80125c8:	2909      	cmp	r1, #9
 80125ca:	7042      	strb	r2, [r0, #1]
 80125cc:	dd2a      	ble.n	8012624 <__exponent+0x70>
 80125ce:	f10d 0207 	add.w	r2, sp, #7
 80125d2:	4617      	mov	r7, r2
 80125d4:	260a      	movs	r6, #10
 80125d6:	4694      	mov	ip, r2
 80125d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80125dc:	fb06 1415 	mls	r4, r6, r5, r1
 80125e0:	3430      	adds	r4, #48	; 0x30
 80125e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80125e6:	460c      	mov	r4, r1
 80125e8:	2c63      	cmp	r4, #99	; 0x63
 80125ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80125ee:	4629      	mov	r1, r5
 80125f0:	dcf1      	bgt.n	80125d6 <__exponent+0x22>
 80125f2:	3130      	adds	r1, #48	; 0x30
 80125f4:	f1ac 0402 	sub.w	r4, ip, #2
 80125f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80125fc:	1c41      	adds	r1, r0, #1
 80125fe:	4622      	mov	r2, r4
 8012600:	42ba      	cmp	r2, r7
 8012602:	d30a      	bcc.n	801261a <__exponent+0x66>
 8012604:	f10d 0209 	add.w	r2, sp, #9
 8012608:	eba2 020c 	sub.w	r2, r2, ip
 801260c:	42bc      	cmp	r4, r7
 801260e:	bf88      	it	hi
 8012610:	2200      	movhi	r2, #0
 8012612:	4413      	add	r3, r2
 8012614:	1a18      	subs	r0, r3, r0
 8012616:	b003      	add	sp, #12
 8012618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801261a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801261e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012622:	e7ed      	b.n	8012600 <__exponent+0x4c>
 8012624:	2330      	movs	r3, #48	; 0x30
 8012626:	3130      	adds	r1, #48	; 0x30
 8012628:	7083      	strb	r3, [r0, #2]
 801262a:	70c1      	strb	r1, [r0, #3]
 801262c:	1d03      	adds	r3, r0, #4
 801262e:	e7f1      	b.n	8012614 <__exponent+0x60>

08012630 <_printf_float>:
 8012630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012634:	ed2d 8b02 	vpush	{d8}
 8012638:	b08d      	sub	sp, #52	; 0x34
 801263a:	460c      	mov	r4, r1
 801263c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012640:	4616      	mov	r6, r2
 8012642:	461f      	mov	r7, r3
 8012644:	4605      	mov	r5, r0
 8012646:	f000 ff19 	bl	801347c <_localeconv_r>
 801264a:	f8d0 a000 	ldr.w	sl, [r0]
 801264e:	4650      	mov	r0, sl
 8012650:	f7ed fe0e 	bl	8000270 <strlen>
 8012654:	2300      	movs	r3, #0
 8012656:	930a      	str	r3, [sp, #40]	; 0x28
 8012658:	6823      	ldr	r3, [r4, #0]
 801265a:	9305      	str	r3, [sp, #20]
 801265c:	f8d8 3000 	ldr.w	r3, [r8]
 8012660:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012664:	3307      	adds	r3, #7
 8012666:	f023 0307 	bic.w	r3, r3, #7
 801266a:	f103 0208 	add.w	r2, r3, #8
 801266e:	f8c8 2000 	str.w	r2, [r8]
 8012672:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801267a:	9307      	str	r3, [sp, #28]
 801267c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012680:	ee08 0a10 	vmov	s16, r0
 8012684:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801268c:	4b9e      	ldr	r3, [pc, #632]	; (8012908 <_printf_float+0x2d8>)
 801268e:	f04f 32ff 	mov.w	r2, #4294967295
 8012692:	f7ee fa4b 	bl	8000b2c <__aeabi_dcmpun>
 8012696:	bb88      	cbnz	r0, 80126fc <_printf_float+0xcc>
 8012698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801269c:	4b9a      	ldr	r3, [pc, #616]	; (8012908 <_printf_float+0x2d8>)
 801269e:	f04f 32ff 	mov.w	r2, #4294967295
 80126a2:	f7ee fa25 	bl	8000af0 <__aeabi_dcmple>
 80126a6:	bb48      	cbnz	r0, 80126fc <_printf_float+0xcc>
 80126a8:	2200      	movs	r2, #0
 80126aa:	2300      	movs	r3, #0
 80126ac:	4640      	mov	r0, r8
 80126ae:	4649      	mov	r1, r9
 80126b0:	f7ee fa14 	bl	8000adc <__aeabi_dcmplt>
 80126b4:	b110      	cbz	r0, 80126bc <_printf_float+0x8c>
 80126b6:	232d      	movs	r3, #45	; 0x2d
 80126b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126bc:	4a93      	ldr	r2, [pc, #588]	; (801290c <_printf_float+0x2dc>)
 80126be:	4b94      	ldr	r3, [pc, #592]	; (8012910 <_printf_float+0x2e0>)
 80126c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80126c4:	bf94      	ite	ls
 80126c6:	4690      	movls	r8, r2
 80126c8:	4698      	movhi	r8, r3
 80126ca:	2303      	movs	r3, #3
 80126cc:	6123      	str	r3, [r4, #16]
 80126ce:	9b05      	ldr	r3, [sp, #20]
 80126d0:	f023 0304 	bic.w	r3, r3, #4
 80126d4:	6023      	str	r3, [r4, #0]
 80126d6:	f04f 0900 	mov.w	r9, #0
 80126da:	9700      	str	r7, [sp, #0]
 80126dc:	4633      	mov	r3, r6
 80126de:	aa0b      	add	r2, sp, #44	; 0x2c
 80126e0:	4621      	mov	r1, r4
 80126e2:	4628      	mov	r0, r5
 80126e4:	f000 f9da 	bl	8012a9c <_printf_common>
 80126e8:	3001      	adds	r0, #1
 80126ea:	f040 8090 	bne.w	801280e <_printf_float+0x1de>
 80126ee:	f04f 30ff 	mov.w	r0, #4294967295
 80126f2:	b00d      	add	sp, #52	; 0x34
 80126f4:	ecbd 8b02 	vpop	{d8}
 80126f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fc:	4642      	mov	r2, r8
 80126fe:	464b      	mov	r3, r9
 8012700:	4640      	mov	r0, r8
 8012702:	4649      	mov	r1, r9
 8012704:	f7ee fa12 	bl	8000b2c <__aeabi_dcmpun>
 8012708:	b140      	cbz	r0, 801271c <_printf_float+0xec>
 801270a:	464b      	mov	r3, r9
 801270c:	2b00      	cmp	r3, #0
 801270e:	bfbc      	itt	lt
 8012710:	232d      	movlt	r3, #45	; 0x2d
 8012712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012716:	4a7f      	ldr	r2, [pc, #508]	; (8012914 <_printf_float+0x2e4>)
 8012718:	4b7f      	ldr	r3, [pc, #508]	; (8012918 <_printf_float+0x2e8>)
 801271a:	e7d1      	b.n	80126c0 <_printf_float+0x90>
 801271c:	6863      	ldr	r3, [r4, #4]
 801271e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012722:	9206      	str	r2, [sp, #24]
 8012724:	1c5a      	adds	r2, r3, #1
 8012726:	d13f      	bne.n	80127a8 <_printf_float+0x178>
 8012728:	2306      	movs	r3, #6
 801272a:	6063      	str	r3, [r4, #4]
 801272c:	9b05      	ldr	r3, [sp, #20]
 801272e:	6861      	ldr	r1, [r4, #4]
 8012730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012734:	2300      	movs	r3, #0
 8012736:	9303      	str	r3, [sp, #12]
 8012738:	ab0a      	add	r3, sp, #40	; 0x28
 801273a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801273e:	ab09      	add	r3, sp, #36	; 0x24
 8012740:	ec49 8b10 	vmov	d0, r8, r9
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	6022      	str	r2, [r4, #0]
 8012748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801274c:	4628      	mov	r0, r5
 801274e:	f7ff fecf 	bl	80124f0 <__cvt>
 8012752:	9b06      	ldr	r3, [sp, #24]
 8012754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012756:	2b47      	cmp	r3, #71	; 0x47
 8012758:	4680      	mov	r8, r0
 801275a:	d108      	bne.n	801276e <_printf_float+0x13e>
 801275c:	1cc8      	adds	r0, r1, #3
 801275e:	db02      	blt.n	8012766 <_printf_float+0x136>
 8012760:	6863      	ldr	r3, [r4, #4]
 8012762:	4299      	cmp	r1, r3
 8012764:	dd41      	ble.n	80127ea <_printf_float+0x1ba>
 8012766:	f1ab 0302 	sub.w	r3, fp, #2
 801276a:	fa5f fb83 	uxtb.w	fp, r3
 801276e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012772:	d820      	bhi.n	80127b6 <_printf_float+0x186>
 8012774:	3901      	subs	r1, #1
 8012776:	465a      	mov	r2, fp
 8012778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801277c:	9109      	str	r1, [sp, #36]	; 0x24
 801277e:	f7ff ff19 	bl	80125b4 <__exponent>
 8012782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012784:	1813      	adds	r3, r2, r0
 8012786:	2a01      	cmp	r2, #1
 8012788:	4681      	mov	r9, r0
 801278a:	6123      	str	r3, [r4, #16]
 801278c:	dc02      	bgt.n	8012794 <_printf_float+0x164>
 801278e:	6822      	ldr	r2, [r4, #0]
 8012790:	07d2      	lsls	r2, r2, #31
 8012792:	d501      	bpl.n	8012798 <_printf_float+0x168>
 8012794:	3301      	adds	r3, #1
 8012796:	6123      	str	r3, [r4, #16]
 8012798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801279c:	2b00      	cmp	r3, #0
 801279e:	d09c      	beq.n	80126da <_printf_float+0xaa>
 80127a0:	232d      	movs	r3, #45	; 0x2d
 80127a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127a6:	e798      	b.n	80126da <_printf_float+0xaa>
 80127a8:	9a06      	ldr	r2, [sp, #24]
 80127aa:	2a47      	cmp	r2, #71	; 0x47
 80127ac:	d1be      	bne.n	801272c <_printf_float+0xfc>
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1bc      	bne.n	801272c <_printf_float+0xfc>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e7b9      	b.n	801272a <_printf_float+0xfa>
 80127b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80127ba:	d118      	bne.n	80127ee <_printf_float+0x1be>
 80127bc:	2900      	cmp	r1, #0
 80127be:	6863      	ldr	r3, [r4, #4]
 80127c0:	dd0b      	ble.n	80127da <_printf_float+0x1aa>
 80127c2:	6121      	str	r1, [r4, #16]
 80127c4:	b913      	cbnz	r3, 80127cc <_printf_float+0x19c>
 80127c6:	6822      	ldr	r2, [r4, #0]
 80127c8:	07d0      	lsls	r0, r2, #31
 80127ca:	d502      	bpl.n	80127d2 <_printf_float+0x1a2>
 80127cc:	3301      	adds	r3, #1
 80127ce:	440b      	add	r3, r1
 80127d0:	6123      	str	r3, [r4, #16]
 80127d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80127d4:	f04f 0900 	mov.w	r9, #0
 80127d8:	e7de      	b.n	8012798 <_printf_float+0x168>
 80127da:	b913      	cbnz	r3, 80127e2 <_printf_float+0x1b2>
 80127dc:	6822      	ldr	r2, [r4, #0]
 80127de:	07d2      	lsls	r2, r2, #31
 80127e0:	d501      	bpl.n	80127e6 <_printf_float+0x1b6>
 80127e2:	3302      	adds	r3, #2
 80127e4:	e7f4      	b.n	80127d0 <_printf_float+0x1a0>
 80127e6:	2301      	movs	r3, #1
 80127e8:	e7f2      	b.n	80127d0 <_printf_float+0x1a0>
 80127ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80127ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127f0:	4299      	cmp	r1, r3
 80127f2:	db05      	blt.n	8012800 <_printf_float+0x1d0>
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	6121      	str	r1, [r4, #16]
 80127f8:	07d8      	lsls	r0, r3, #31
 80127fa:	d5ea      	bpl.n	80127d2 <_printf_float+0x1a2>
 80127fc:	1c4b      	adds	r3, r1, #1
 80127fe:	e7e7      	b.n	80127d0 <_printf_float+0x1a0>
 8012800:	2900      	cmp	r1, #0
 8012802:	bfd4      	ite	le
 8012804:	f1c1 0202 	rsble	r2, r1, #2
 8012808:	2201      	movgt	r2, #1
 801280a:	4413      	add	r3, r2
 801280c:	e7e0      	b.n	80127d0 <_printf_float+0x1a0>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	055a      	lsls	r2, r3, #21
 8012812:	d407      	bmi.n	8012824 <_printf_float+0x1f4>
 8012814:	6923      	ldr	r3, [r4, #16]
 8012816:	4642      	mov	r2, r8
 8012818:	4631      	mov	r1, r6
 801281a:	4628      	mov	r0, r5
 801281c:	47b8      	blx	r7
 801281e:	3001      	adds	r0, #1
 8012820:	d12c      	bne.n	801287c <_printf_float+0x24c>
 8012822:	e764      	b.n	80126ee <_printf_float+0xbe>
 8012824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012828:	f240 80e0 	bls.w	80129ec <_printf_float+0x3bc>
 801282c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012830:	2200      	movs	r2, #0
 8012832:	2300      	movs	r3, #0
 8012834:	f7ee f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8012838:	2800      	cmp	r0, #0
 801283a:	d034      	beq.n	80128a6 <_printf_float+0x276>
 801283c:	4a37      	ldr	r2, [pc, #220]	; (801291c <_printf_float+0x2ec>)
 801283e:	2301      	movs	r3, #1
 8012840:	4631      	mov	r1, r6
 8012842:	4628      	mov	r0, r5
 8012844:	47b8      	blx	r7
 8012846:	3001      	adds	r0, #1
 8012848:	f43f af51 	beq.w	80126ee <_printf_float+0xbe>
 801284c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012850:	429a      	cmp	r2, r3
 8012852:	db02      	blt.n	801285a <_printf_float+0x22a>
 8012854:	6823      	ldr	r3, [r4, #0]
 8012856:	07d8      	lsls	r0, r3, #31
 8012858:	d510      	bpl.n	801287c <_printf_float+0x24c>
 801285a:	ee18 3a10 	vmov	r3, s16
 801285e:	4652      	mov	r2, sl
 8012860:	4631      	mov	r1, r6
 8012862:	4628      	mov	r0, r5
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f af41 	beq.w	80126ee <_printf_float+0xbe>
 801286c:	f04f 0800 	mov.w	r8, #0
 8012870:	f104 091a 	add.w	r9, r4, #26
 8012874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012876:	3b01      	subs	r3, #1
 8012878:	4543      	cmp	r3, r8
 801287a:	dc09      	bgt.n	8012890 <_printf_float+0x260>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	079b      	lsls	r3, r3, #30
 8012880:	f100 8107 	bmi.w	8012a92 <_printf_float+0x462>
 8012884:	68e0      	ldr	r0, [r4, #12]
 8012886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012888:	4298      	cmp	r0, r3
 801288a:	bfb8      	it	lt
 801288c:	4618      	movlt	r0, r3
 801288e:	e730      	b.n	80126f2 <_printf_float+0xc2>
 8012890:	2301      	movs	r3, #1
 8012892:	464a      	mov	r2, r9
 8012894:	4631      	mov	r1, r6
 8012896:	4628      	mov	r0, r5
 8012898:	47b8      	blx	r7
 801289a:	3001      	adds	r0, #1
 801289c:	f43f af27 	beq.w	80126ee <_printf_float+0xbe>
 80128a0:	f108 0801 	add.w	r8, r8, #1
 80128a4:	e7e6      	b.n	8012874 <_printf_float+0x244>
 80128a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	dc39      	bgt.n	8012920 <_printf_float+0x2f0>
 80128ac:	4a1b      	ldr	r2, [pc, #108]	; (801291c <_printf_float+0x2ec>)
 80128ae:	2301      	movs	r3, #1
 80128b0:	4631      	mov	r1, r6
 80128b2:	4628      	mov	r0, r5
 80128b4:	47b8      	blx	r7
 80128b6:	3001      	adds	r0, #1
 80128b8:	f43f af19 	beq.w	80126ee <_printf_float+0xbe>
 80128bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80128c0:	4313      	orrs	r3, r2
 80128c2:	d102      	bne.n	80128ca <_printf_float+0x29a>
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	07d9      	lsls	r1, r3, #31
 80128c8:	d5d8      	bpl.n	801287c <_printf_float+0x24c>
 80128ca:	ee18 3a10 	vmov	r3, s16
 80128ce:	4652      	mov	r2, sl
 80128d0:	4631      	mov	r1, r6
 80128d2:	4628      	mov	r0, r5
 80128d4:	47b8      	blx	r7
 80128d6:	3001      	adds	r0, #1
 80128d8:	f43f af09 	beq.w	80126ee <_printf_float+0xbe>
 80128dc:	f04f 0900 	mov.w	r9, #0
 80128e0:	f104 0a1a 	add.w	sl, r4, #26
 80128e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128e6:	425b      	negs	r3, r3
 80128e8:	454b      	cmp	r3, r9
 80128ea:	dc01      	bgt.n	80128f0 <_printf_float+0x2c0>
 80128ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128ee:	e792      	b.n	8012816 <_printf_float+0x1e6>
 80128f0:	2301      	movs	r3, #1
 80128f2:	4652      	mov	r2, sl
 80128f4:	4631      	mov	r1, r6
 80128f6:	4628      	mov	r0, r5
 80128f8:	47b8      	blx	r7
 80128fa:	3001      	adds	r0, #1
 80128fc:	f43f aef7 	beq.w	80126ee <_printf_float+0xbe>
 8012900:	f109 0901 	add.w	r9, r9, #1
 8012904:	e7ee      	b.n	80128e4 <_printf_float+0x2b4>
 8012906:	bf00      	nop
 8012908:	7fefffff 	.word	0x7fefffff
 801290c:	08017094 	.word	0x08017094
 8012910:	08017098 	.word	0x08017098
 8012914:	0801709c 	.word	0x0801709c
 8012918:	080170a0 	.word	0x080170a0
 801291c:	080170a4 	.word	0x080170a4
 8012920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012924:	429a      	cmp	r2, r3
 8012926:	bfa8      	it	ge
 8012928:	461a      	movge	r2, r3
 801292a:	2a00      	cmp	r2, #0
 801292c:	4691      	mov	r9, r2
 801292e:	dc37      	bgt.n	80129a0 <_printf_float+0x370>
 8012930:	f04f 0b00 	mov.w	fp, #0
 8012934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012938:	f104 021a 	add.w	r2, r4, #26
 801293c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801293e:	9305      	str	r3, [sp, #20]
 8012940:	eba3 0309 	sub.w	r3, r3, r9
 8012944:	455b      	cmp	r3, fp
 8012946:	dc33      	bgt.n	80129b0 <_printf_float+0x380>
 8012948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801294c:	429a      	cmp	r2, r3
 801294e:	db3b      	blt.n	80129c8 <_printf_float+0x398>
 8012950:	6823      	ldr	r3, [r4, #0]
 8012952:	07da      	lsls	r2, r3, #31
 8012954:	d438      	bmi.n	80129c8 <_printf_float+0x398>
 8012956:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801295a:	eba2 0903 	sub.w	r9, r2, r3
 801295e:	9b05      	ldr	r3, [sp, #20]
 8012960:	1ad2      	subs	r2, r2, r3
 8012962:	4591      	cmp	r9, r2
 8012964:	bfa8      	it	ge
 8012966:	4691      	movge	r9, r2
 8012968:	f1b9 0f00 	cmp.w	r9, #0
 801296c:	dc35      	bgt.n	80129da <_printf_float+0x3aa>
 801296e:	f04f 0800 	mov.w	r8, #0
 8012972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012976:	f104 0a1a 	add.w	sl, r4, #26
 801297a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801297e:	1a9b      	subs	r3, r3, r2
 8012980:	eba3 0309 	sub.w	r3, r3, r9
 8012984:	4543      	cmp	r3, r8
 8012986:	f77f af79 	ble.w	801287c <_printf_float+0x24c>
 801298a:	2301      	movs	r3, #1
 801298c:	4652      	mov	r2, sl
 801298e:	4631      	mov	r1, r6
 8012990:	4628      	mov	r0, r5
 8012992:	47b8      	blx	r7
 8012994:	3001      	adds	r0, #1
 8012996:	f43f aeaa 	beq.w	80126ee <_printf_float+0xbe>
 801299a:	f108 0801 	add.w	r8, r8, #1
 801299e:	e7ec      	b.n	801297a <_printf_float+0x34a>
 80129a0:	4613      	mov	r3, r2
 80129a2:	4631      	mov	r1, r6
 80129a4:	4642      	mov	r2, r8
 80129a6:	4628      	mov	r0, r5
 80129a8:	47b8      	blx	r7
 80129aa:	3001      	adds	r0, #1
 80129ac:	d1c0      	bne.n	8012930 <_printf_float+0x300>
 80129ae:	e69e      	b.n	80126ee <_printf_float+0xbe>
 80129b0:	2301      	movs	r3, #1
 80129b2:	4631      	mov	r1, r6
 80129b4:	4628      	mov	r0, r5
 80129b6:	9205      	str	r2, [sp, #20]
 80129b8:	47b8      	blx	r7
 80129ba:	3001      	adds	r0, #1
 80129bc:	f43f ae97 	beq.w	80126ee <_printf_float+0xbe>
 80129c0:	9a05      	ldr	r2, [sp, #20]
 80129c2:	f10b 0b01 	add.w	fp, fp, #1
 80129c6:	e7b9      	b.n	801293c <_printf_float+0x30c>
 80129c8:	ee18 3a10 	vmov	r3, s16
 80129cc:	4652      	mov	r2, sl
 80129ce:	4631      	mov	r1, r6
 80129d0:	4628      	mov	r0, r5
 80129d2:	47b8      	blx	r7
 80129d4:	3001      	adds	r0, #1
 80129d6:	d1be      	bne.n	8012956 <_printf_float+0x326>
 80129d8:	e689      	b.n	80126ee <_printf_float+0xbe>
 80129da:	9a05      	ldr	r2, [sp, #20]
 80129dc:	464b      	mov	r3, r9
 80129de:	4442      	add	r2, r8
 80129e0:	4631      	mov	r1, r6
 80129e2:	4628      	mov	r0, r5
 80129e4:	47b8      	blx	r7
 80129e6:	3001      	adds	r0, #1
 80129e8:	d1c1      	bne.n	801296e <_printf_float+0x33e>
 80129ea:	e680      	b.n	80126ee <_printf_float+0xbe>
 80129ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129ee:	2a01      	cmp	r2, #1
 80129f0:	dc01      	bgt.n	80129f6 <_printf_float+0x3c6>
 80129f2:	07db      	lsls	r3, r3, #31
 80129f4:	d53a      	bpl.n	8012a6c <_printf_float+0x43c>
 80129f6:	2301      	movs	r3, #1
 80129f8:	4642      	mov	r2, r8
 80129fa:	4631      	mov	r1, r6
 80129fc:	4628      	mov	r0, r5
 80129fe:	47b8      	blx	r7
 8012a00:	3001      	adds	r0, #1
 8012a02:	f43f ae74 	beq.w	80126ee <_printf_float+0xbe>
 8012a06:	ee18 3a10 	vmov	r3, s16
 8012a0a:	4652      	mov	r2, sl
 8012a0c:	4631      	mov	r1, r6
 8012a0e:	4628      	mov	r0, r5
 8012a10:	47b8      	blx	r7
 8012a12:	3001      	adds	r0, #1
 8012a14:	f43f ae6b 	beq.w	80126ee <_printf_float+0xbe>
 8012a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012a24:	f7ee f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a28:	b9d8      	cbnz	r0, 8012a62 <_printf_float+0x432>
 8012a2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012a2e:	f108 0201 	add.w	r2, r8, #1
 8012a32:	4631      	mov	r1, r6
 8012a34:	4628      	mov	r0, r5
 8012a36:	47b8      	blx	r7
 8012a38:	3001      	adds	r0, #1
 8012a3a:	d10e      	bne.n	8012a5a <_printf_float+0x42a>
 8012a3c:	e657      	b.n	80126ee <_printf_float+0xbe>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	4652      	mov	r2, sl
 8012a42:	4631      	mov	r1, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	47b8      	blx	r7
 8012a48:	3001      	adds	r0, #1
 8012a4a:	f43f ae50 	beq.w	80126ee <_printf_float+0xbe>
 8012a4e:	f108 0801 	add.w	r8, r8, #1
 8012a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a54:	3b01      	subs	r3, #1
 8012a56:	4543      	cmp	r3, r8
 8012a58:	dcf1      	bgt.n	8012a3e <_printf_float+0x40e>
 8012a5a:	464b      	mov	r3, r9
 8012a5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012a60:	e6da      	b.n	8012818 <_printf_float+0x1e8>
 8012a62:	f04f 0800 	mov.w	r8, #0
 8012a66:	f104 0a1a 	add.w	sl, r4, #26
 8012a6a:	e7f2      	b.n	8012a52 <_printf_float+0x422>
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	4642      	mov	r2, r8
 8012a70:	e7df      	b.n	8012a32 <_printf_float+0x402>
 8012a72:	2301      	movs	r3, #1
 8012a74:	464a      	mov	r2, r9
 8012a76:	4631      	mov	r1, r6
 8012a78:	4628      	mov	r0, r5
 8012a7a:	47b8      	blx	r7
 8012a7c:	3001      	adds	r0, #1
 8012a7e:	f43f ae36 	beq.w	80126ee <_printf_float+0xbe>
 8012a82:	f108 0801 	add.w	r8, r8, #1
 8012a86:	68e3      	ldr	r3, [r4, #12]
 8012a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a8a:	1a5b      	subs	r3, r3, r1
 8012a8c:	4543      	cmp	r3, r8
 8012a8e:	dcf0      	bgt.n	8012a72 <_printf_float+0x442>
 8012a90:	e6f8      	b.n	8012884 <_printf_float+0x254>
 8012a92:	f04f 0800 	mov.w	r8, #0
 8012a96:	f104 0919 	add.w	r9, r4, #25
 8012a9a:	e7f4      	b.n	8012a86 <_printf_float+0x456>

08012a9c <_printf_common>:
 8012a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012aa0:	4616      	mov	r6, r2
 8012aa2:	4699      	mov	r9, r3
 8012aa4:	688a      	ldr	r2, [r1, #8]
 8012aa6:	690b      	ldr	r3, [r1, #16]
 8012aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012aac:	4293      	cmp	r3, r2
 8012aae:	bfb8      	it	lt
 8012ab0:	4613      	movlt	r3, r2
 8012ab2:	6033      	str	r3, [r6, #0]
 8012ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ab8:	4607      	mov	r7, r0
 8012aba:	460c      	mov	r4, r1
 8012abc:	b10a      	cbz	r2, 8012ac2 <_printf_common+0x26>
 8012abe:	3301      	adds	r3, #1
 8012ac0:	6033      	str	r3, [r6, #0]
 8012ac2:	6823      	ldr	r3, [r4, #0]
 8012ac4:	0699      	lsls	r1, r3, #26
 8012ac6:	bf42      	ittt	mi
 8012ac8:	6833      	ldrmi	r3, [r6, #0]
 8012aca:	3302      	addmi	r3, #2
 8012acc:	6033      	strmi	r3, [r6, #0]
 8012ace:	6825      	ldr	r5, [r4, #0]
 8012ad0:	f015 0506 	ands.w	r5, r5, #6
 8012ad4:	d106      	bne.n	8012ae4 <_printf_common+0x48>
 8012ad6:	f104 0a19 	add.w	sl, r4, #25
 8012ada:	68e3      	ldr	r3, [r4, #12]
 8012adc:	6832      	ldr	r2, [r6, #0]
 8012ade:	1a9b      	subs	r3, r3, r2
 8012ae0:	42ab      	cmp	r3, r5
 8012ae2:	dc26      	bgt.n	8012b32 <_printf_common+0x96>
 8012ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ae8:	1e13      	subs	r3, r2, #0
 8012aea:	6822      	ldr	r2, [r4, #0]
 8012aec:	bf18      	it	ne
 8012aee:	2301      	movne	r3, #1
 8012af0:	0692      	lsls	r2, r2, #26
 8012af2:	d42b      	bmi.n	8012b4c <_printf_common+0xb0>
 8012af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012af8:	4649      	mov	r1, r9
 8012afa:	4638      	mov	r0, r7
 8012afc:	47c0      	blx	r8
 8012afe:	3001      	adds	r0, #1
 8012b00:	d01e      	beq.n	8012b40 <_printf_common+0xa4>
 8012b02:	6823      	ldr	r3, [r4, #0]
 8012b04:	6922      	ldr	r2, [r4, #16]
 8012b06:	f003 0306 	and.w	r3, r3, #6
 8012b0a:	2b04      	cmp	r3, #4
 8012b0c:	bf02      	ittt	eq
 8012b0e:	68e5      	ldreq	r5, [r4, #12]
 8012b10:	6833      	ldreq	r3, [r6, #0]
 8012b12:	1aed      	subeq	r5, r5, r3
 8012b14:	68a3      	ldr	r3, [r4, #8]
 8012b16:	bf0c      	ite	eq
 8012b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b1c:	2500      	movne	r5, #0
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	bfc4      	itt	gt
 8012b22:	1a9b      	subgt	r3, r3, r2
 8012b24:	18ed      	addgt	r5, r5, r3
 8012b26:	2600      	movs	r6, #0
 8012b28:	341a      	adds	r4, #26
 8012b2a:	42b5      	cmp	r5, r6
 8012b2c:	d11a      	bne.n	8012b64 <_printf_common+0xc8>
 8012b2e:	2000      	movs	r0, #0
 8012b30:	e008      	b.n	8012b44 <_printf_common+0xa8>
 8012b32:	2301      	movs	r3, #1
 8012b34:	4652      	mov	r2, sl
 8012b36:	4649      	mov	r1, r9
 8012b38:	4638      	mov	r0, r7
 8012b3a:	47c0      	blx	r8
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	d103      	bne.n	8012b48 <_printf_common+0xac>
 8012b40:	f04f 30ff 	mov.w	r0, #4294967295
 8012b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b48:	3501      	adds	r5, #1
 8012b4a:	e7c6      	b.n	8012ada <_printf_common+0x3e>
 8012b4c:	18e1      	adds	r1, r4, r3
 8012b4e:	1c5a      	adds	r2, r3, #1
 8012b50:	2030      	movs	r0, #48	; 0x30
 8012b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b56:	4422      	add	r2, r4
 8012b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b60:	3302      	adds	r3, #2
 8012b62:	e7c7      	b.n	8012af4 <_printf_common+0x58>
 8012b64:	2301      	movs	r3, #1
 8012b66:	4622      	mov	r2, r4
 8012b68:	4649      	mov	r1, r9
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	47c0      	blx	r8
 8012b6e:	3001      	adds	r0, #1
 8012b70:	d0e6      	beq.n	8012b40 <_printf_common+0xa4>
 8012b72:	3601      	adds	r6, #1
 8012b74:	e7d9      	b.n	8012b2a <_printf_common+0x8e>
	...

08012b78 <_printf_i>:
 8012b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b7c:	7e0f      	ldrb	r7, [r1, #24]
 8012b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b80:	2f78      	cmp	r7, #120	; 0x78
 8012b82:	4691      	mov	r9, r2
 8012b84:	4680      	mov	r8, r0
 8012b86:	460c      	mov	r4, r1
 8012b88:	469a      	mov	sl, r3
 8012b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b8e:	d807      	bhi.n	8012ba0 <_printf_i+0x28>
 8012b90:	2f62      	cmp	r7, #98	; 0x62
 8012b92:	d80a      	bhi.n	8012baa <_printf_i+0x32>
 8012b94:	2f00      	cmp	r7, #0
 8012b96:	f000 80d4 	beq.w	8012d42 <_printf_i+0x1ca>
 8012b9a:	2f58      	cmp	r7, #88	; 0x58
 8012b9c:	f000 80c0 	beq.w	8012d20 <_printf_i+0x1a8>
 8012ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ba8:	e03a      	b.n	8012c20 <_printf_i+0xa8>
 8012baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012bae:	2b15      	cmp	r3, #21
 8012bb0:	d8f6      	bhi.n	8012ba0 <_printf_i+0x28>
 8012bb2:	a101      	add	r1, pc, #4	; (adr r1, 8012bb8 <_printf_i+0x40>)
 8012bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012bb8:	08012c11 	.word	0x08012c11
 8012bbc:	08012c25 	.word	0x08012c25
 8012bc0:	08012ba1 	.word	0x08012ba1
 8012bc4:	08012ba1 	.word	0x08012ba1
 8012bc8:	08012ba1 	.word	0x08012ba1
 8012bcc:	08012ba1 	.word	0x08012ba1
 8012bd0:	08012c25 	.word	0x08012c25
 8012bd4:	08012ba1 	.word	0x08012ba1
 8012bd8:	08012ba1 	.word	0x08012ba1
 8012bdc:	08012ba1 	.word	0x08012ba1
 8012be0:	08012ba1 	.word	0x08012ba1
 8012be4:	08012d29 	.word	0x08012d29
 8012be8:	08012c51 	.word	0x08012c51
 8012bec:	08012ce3 	.word	0x08012ce3
 8012bf0:	08012ba1 	.word	0x08012ba1
 8012bf4:	08012ba1 	.word	0x08012ba1
 8012bf8:	08012d4b 	.word	0x08012d4b
 8012bfc:	08012ba1 	.word	0x08012ba1
 8012c00:	08012c51 	.word	0x08012c51
 8012c04:	08012ba1 	.word	0x08012ba1
 8012c08:	08012ba1 	.word	0x08012ba1
 8012c0c:	08012ceb 	.word	0x08012ceb
 8012c10:	682b      	ldr	r3, [r5, #0]
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	602a      	str	r2, [r5, #0]
 8012c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c20:	2301      	movs	r3, #1
 8012c22:	e09f      	b.n	8012d64 <_printf_i+0x1ec>
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	682b      	ldr	r3, [r5, #0]
 8012c28:	0607      	lsls	r7, r0, #24
 8012c2a:	f103 0104 	add.w	r1, r3, #4
 8012c2e:	6029      	str	r1, [r5, #0]
 8012c30:	d501      	bpl.n	8012c36 <_printf_i+0xbe>
 8012c32:	681e      	ldr	r6, [r3, #0]
 8012c34:	e003      	b.n	8012c3e <_printf_i+0xc6>
 8012c36:	0646      	lsls	r6, r0, #25
 8012c38:	d5fb      	bpl.n	8012c32 <_printf_i+0xba>
 8012c3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	da03      	bge.n	8012c4a <_printf_i+0xd2>
 8012c42:	232d      	movs	r3, #45	; 0x2d
 8012c44:	4276      	negs	r6, r6
 8012c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c4a:	485a      	ldr	r0, [pc, #360]	; (8012db4 <_printf_i+0x23c>)
 8012c4c:	230a      	movs	r3, #10
 8012c4e:	e012      	b.n	8012c76 <_printf_i+0xfe>
 8012c50:	682b      	ldr	r3, [r5, #0]
 8012c52:	6820      	ldr	r0, [r4, #0]
 8012c54:	1d19      	adds	r1, r3, #4
 8012c56:	6029      	str	r1, [r5, #0]
 8012c58:	0605      	lsls	r5, r0, #24
 8012c5a:	d501      	bpl.n	8012c60 <_printf_i+0xe8>
 8012c5c:	681e      	ldr	r6, [r3, #0]
 8012c5e:	e002      	b.n	8012c66 <_printf_i+0xee>
 8012c60:	0641      	lsls	r1, r0, #25
 8012c62:	d5fb      	bpl.n	8012c5c <_printf_i+0xe4>
 8012c64:	881e      	ldrh	r6, [r3, #0]
 8012c66:	4853      	ldr	r0, [pc, #332]	; (8012db4 <_printf_i+0x23c>)
 8012c68:	2f6f      	cmp	r7, #111	; 0x6f
 8012c6a:	bf0c      	ite	eq
 8012c6c:	2308      	moveq	r3, #8
 8012c6e:	230a      	movne	r3, #10
 8012c70:	2100      	movs	r1, #0
 8012c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c76:	6865      	ldr	r5, [r4, #4]
 8012c78:	60a5      	str	r5, [r4, #8]
 8012c7a:	2d00      	cmp	r5, #0
 8012c7c:	bfa2      	ittt	ge
 8012c7e:	6821      	ldrge	r1, [r4, #0]
 8012c80:	f021 0104 	bicge.w	r1, r1, #4
 8012c84:	6021      	strge	r1, [r4, #0]
 8012c86:	b90e      	cbnz	r6, 8012c8c <_printf_i+0x114>
 8012c88:	2d00      	cmp	r5, #0
 8012c8a:	d04b      	beq.n	8012d24 <_printf_i+0x1ac>
 8012c8c:	4615      	mov	r5, r2
 8012c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c92:	fb03 6711 	mls	r7, r3, r1, r6
 8012c96:	5dc7      	ldrb	r7, [r0, r7]
 8012c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c9c:	4637      	mov	r7, r6
 8012c9e:	42bb      	cmp	r3, r7
 8012ca0:	460e      	mov	r6, r1
 8012ca2:	d9f4      	bls.n	8012c8e <_printf_i+0x116>
 8012ca4:	2b08      	cmp	r3, #8
 8012ca6:	d10b      	bne.n	8012cc0 <_printf_i+0x148>
 8012ca8:	6823      	ldr	r3, [r4, #0]
 8012caa:	07de      	lsls	r6, r3, #31
 8012cac:	d508      	bpl.n	8012cc0 <_printf_i+0x148>
 8012cae:	6923      	ldr	r3, [r4, #16]
 8012cb0:	6861      	ldr	r1, [r4, #4]
 8012cb2:	4299      	cmp	r1, r3
 8012cb4:	bfde      	ittt	le
 8012cb6:	2330      	movle	r3, #48	; 0x30
 8012cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012cc0:	1b52      	subs	r2, r2, r5
 8012cc2:	6122      	str	r2, [r4, #16]
 8012cc4:	f8cd a000 	str.w	sl, [sp]
 8012cc8:	464b      	mov	r3, r9
 8012cca:	aa03      	add	r2, sp, #12
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4640      	mov	r0, r8
 8012cd0:	f7ff fee4 	bl	8012a9c <_printf_common>
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	d14a      	bne.n	8012d6e <_printf_i+0x1f6>
 8012cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cdc:	b004      	add	sp, #16
 8012cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ce2:	6823      	ldr	r3, [r4, #0]
 8012ce4:	f043 0320 	orr.w	r3, r3, #32
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	4833      	ldr	r0, [pc, #204]	; (8012db8 <_printf_i+0x240>)
 8012cec:	2778      	movs	r7, #120	; 0x78
 8012cee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	6829      	ldr	r1, [r5, #0]
 8012cf6:	061f      	lsls	r7, r3, #24
 8012cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012cfc:	d402      	bmi.n	8012d04 <_printf_i+0x18c>
 8012cfe:	065f      	lsls	r7, r3, #25
 8012d00:	bf48      	it	mi
 8012d02:	b2b6      	uxthmi	r6, r6
 8012d04:	07df      	lsls	r7, r3, #31
 8012d06:	bf48      	it	mi
 8012d08:	f043 0320 	orrmi.w	r3, r3, #32
 8012d0c:	6029      	str	r1, [r5, #0]
 8012d0e:	bf48      	it	mi
 8012d10:	6023      	strmi	r3, [r4, #0]
 8012d12:	b91e      	cbnz	r6, 8012d1c <_printf_i+0x1a4>
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	f023 0320 	bic.w	r3, r3, #32
 8012d1a:	6023      	str	r3, [r4, #0]
 8012d1c:	2310      	movs	r3, #16
 8012d1e:	e7a7      	b.n	8012c70 <_printf_i+0xf8>
 8012d20:	4824      	ldr	r0, [pc, #144]	; (8012db4 <_printf_i+0x23c>)
 8012d22:	e7e4      	b.n	8012cee <_printf_i+0x176>
 8012d24:	4615      	mov	r5, r2
 8012d26:	e7bd      	b.n	8012ca4 <_printf_i+0x12c>
 8012d28:	682b      	ldr	r3, [r5, #0]
 8012d2a:	6826      	ldr	r6, [r4, #0]
 8012d2c:	6961      	ldr	r1, [r4, #20]
 8012d2e:	1d18      	adds	r0, r3, #4
 8012d30:	6028      	str	r0, [r5, #0]
 8012d32:	0635      	lsls	r5, r6, #24
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	d501      	bpl.n	8012d3c <_printf_i+0x1c4>
 8012d38:	6019      	str	r1, [r3, #0]
 8012d3a:	e002      	b.n	8012d42 <_printf_i+0x1ca>
 8012d3c:	0670      	lsls	r0, r6, #25
 8012d3e:	d5fb      	bpl.n	8012d38 <_printf_i+0x1c0>
 8012d40:	8019      	strh	r1, [r3, #0]
 8012d42:	2300      	movs	r3, #0
 8012d44:	6123      	str	r3, [r4, #16]
 8012d46:	4615      	mov	r5, r2
 8012d48:	e7bc      	b.n	8012cc4 <_printf_i+0x14c>
 8012d4a:	682b      	ldr	r3, [r5, #0]
 8012d4c:	1d1a      	adds	r2, r3, #4
 8012d4e:	602a      	str	r2, [r5, #0]
 8012d50:	681d      	ldr	r5, [r3, #0]
 8012d52:	6862      	ldr	r2, [r4, #4]
 8012d54:	2100      	movs	r1, #0
 8012d56:	4628      	mov	r0, r5
 8012d58:	f7ed fa3a 	bl	80001d0 <memchr>
 8012d5c:	b108      	cbz	r0, 8012d62 <_printf_i+0x1ea>
 8012d5e:	1b40      	subs	r0, r0, r5
 8012d60:	6060      	str	r0, [r4, #4]
 8012d62:	6863      	ldr	r3, [r4, #4]
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	2300      	movs	r3, #0
 8012d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d6c:	e7aa      	b.n	8012cc4 <_printf_i+0x14c>
 8012d6e:	6923      	ldr	r3, [r4, #16]
 8012d70:	462a      	mov	r2, r5
 8012d72:	4649      	mov	r1, r9
 8012d74:	4640      	mov	r0, r8
 8012d76:	47d0      	blx	sl
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d0ad      	beq.n	8012cd8 <_printf_i+0x160>
 8012d7c:	6823      	ldr	r3, [r4, #0]
 8012d7e:	079b      	lsls	r3, r3, #30
 8012d80:	d413      	bmi.n	8012daa <_printf_i+0x232>
 8012d82:	68e0      	ldr	r0, [r4, #12]
 8012d84:	9b03      	ldr	r3, [sp, #12]
 8012d86:	4298      	cmp	r0, r3
 8012d88:	bfb8      	it	lt
 8012d8a:	4618      	movlt	r0, r3
 8012d8c:	e7a6      	b.n	8012cdc <_printf_i+0x164>
 8012d8e:	2301      	movs	r3, #1
 8012d90:	4632      	mov	r2, r6
 8012d92:	4649      	mov	r1, r9
 8012d94:	4640      	mov	r0, r8
 8012d96:	47d0      	blx	sl
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d09d      	beq.n	8012cd8 <_printf_i+0x160>
 8012d9c:	3501      	adds	r5, #1
 8012d9e:	68e3      	ldr	r3, [r4, #12]
 8012da0:	9903      	ldr	r1, [sp, #12]
 8012da2:	1a5b      	subs	r3, r3, r1
 8012da4:	42ab      	cmp	r3, r5
 8012da6:	dcf2      	bgt.n	8012d8e <_printf_i+0x216>
 8012da8:	e7eb      	b.n	8012d82 <_printf_i+0x20a>
 8012daa:	2500      	movs	r5, #0
 8012dac:	f104 0619 	add.w	r6, r4, #25
 8012db0:	e7f5      	b.n	8012d9e <_printf_i+0x226>
 8012db2:	bf00      	nop
 8012db4:	080170a6 	.word	0x080170a6
 8012db8:	080170b7 	.word	0x080170b7

08012dbc <_scanf_float>:
 8012dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc0:	b087      	sub	sp, #28
 8012dc2:	4617      	mov	r7, r2
 8012dc4:	9303      	str	r3, [sp, #12]
 8012dc6:	688b      	ldr	r3, [r1, #8]
 8012dc8:	1e5a      	subs	r2, r3, #1
 8012dca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012dce:	bf83      	ittte	hi
 8012dd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012dd4:	195b      	addhi	r3, r3, r5
 8012dd6:	9302      	strhi	r3, [sp, #8]
 8012dd8:	2300      	movls	r3, #0
 8012dda:	bf86      	itte	hi
 8012ddc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012de0:	608b      	strhi	r3, [r1, #8]
 8012de2:	9302      	strls	r3, [sp, #8]
 8012de4:	680b      	ldr	r3, [r1, #0]
 8012de6:	468b      	mov	fp, r1
 8012de8:	2500      	movs	r5, #0
 8012dea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012dee:	f84b 3b1c 	str.w	r3, [fp], #28
 8012df2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012df6:	4680      	mov	r8, r0
 8012df8:	460c      	mov	r4, r1
 8012dfa:	465e      	mov	r6, fp
 8012dfc:	46aa      	mov	sl, r5
 8012dfe:	46a9      	mov	r9, r5
 8012e00:	9501      	str	r5, [sp, #4]
 8012e02:	68a2      	ldr	r2, [r4, #8]
 8012e04:	b152      	cbz	r2, 8012e1c <_scanf_float+0x60>
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	2b4e      	cmp	r3, #78	; 0x4e
 8012e0c:	d864      	bhi.n	8012ed8 <_scanf_float+0x11c>
 8012e0e:	2b40      	cmp	r3, #64	; 0x40
 8012e10:	d83c      	bhi.n	8012e8c <_scanf_float+0xd0>
 8012e12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012e16:	b2c8      	uxtb	r0, r1
 8012e18:	280e      	cmp	r0, #14
 8012e1a:	d93a      	bls.n	8012e92 <_scanf_float+0xd6>
 8012e1c:	f1b9 0f00 	cmp.w	r9, #0
 8012e20:	d003      	beq.n	8012e2a <_scanf_float+0x6e>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e28:	6023      	str	r3, [r4, #0]
 8012e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e2e:	f1ba 0f01 	cmp.w	sl, #1
 8012e32:	f200 8113 	bhi.w	801305c <_scanf_float+0x2a0>
 8012e36:	455e      	cmp	r6, fp
 8012e38:	f200 8105 	bhi.w	8013046 <_scanf_float+0x28a>
 8012e3c:	2501      	movs	r5, #1
 8012e3e:	4628      	mov	r0, r5
 8012e40:	b007      	add	sp, #28
 8012e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012e4a:	2a0d      	cmp	r2, #13
 8012e4c:	d8e6      	bhi.n	8012e1c <_scanf_float+0x60>
 8012e4e:	a101      	add	r1, pc, #4	; (adr r1, 8012e54 <_scanf_float+0x98>)
 8012e50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012e54:	08012f93 	.word	0x08012f93
 8012e58:	08012e1d 	.word	0x08012e1d
 8012e5c:	08012e1d 	.word	0x08012e1d
 8012e60:	08012e1d 	.word	0x08012e1d
 8012e64:	08012ff3 	.word	0x08012ff3
 8012e68:	08012fcb 	.word	0x08012fcb
 8012e6c:	08012e1d 	.word	0x08012e1d
 8012e70:	08012e1d 	.word	0x08012e1d
 8012e74:	08012fa1 	.word	0x08012fa1
 8012e78:	08012e1d 	.word	0x08012e1d
 8012e7c:	08012e1d 	.word	0x08012e1d
 8012e80:	08012e1d 	.word	0x08012e1d
 8012e84:	08012e1d 	.word	0x08012e1d
 8012e88:	08012f59 	.word	0x08012f59
 8012e8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012e90:	e7db      	b.n	8012e4a <_scanf_float+0x8e>
 8012e92:	290e      	cmp	r1, #14
 8012e94:	d8c2      	bhi.n	8012e1c <_scanf_float+0x60>
 8012e96:	a001      	add	r0, pc, #4	; (adr r0, 8012e9c <_scanf_float+0xe0>)
 8012e98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012e9c:	08012f4b 	.word	0x08012f4b
 8012ea0:	08012e1d 	.word	0x08012e1d
 8012ea4:	08012f4b 	.word	0x08012f4b
 8012ea8:	08012fdf 	.word	0x08012fdf
 8012eac:	08012e1d 	.word	0x08012e1d
 8012eb0:	08012ef9 	.word	0x08012ef9
 8012eb4:	08012f35 	.word	0x08012f35
 8012eb8:	08012f35 	.word	0x08012f35
 8012ebc:	08012f35 	.word	0x08012f35
 8012ec0:	08012f35 	.word	0x08012f35
 8012ec4:	08012f35 	.word	0x08012f35
 8012ec8:	08012f35 	.word	0x08012f35
 8012ecc:	08012f35 	.word	0x08012f35
 8012ed0:	08012f35 	.word	0x08012f35
 8012ed4:	08012f35 	.word	0x08012f35
 8012ed8:	2b6e      	cmp	r3, #110	; 0x6e
 8012eda:	d809      	bhi.n	8012ef0 <_scanf_float+0x134>
 8012edc:	2b60      	cmp	r3, #96	; 0x60
 8012ede:	d8b2      	bhi.n	8012e46 <_scanf_float+0x8a>
 8012ee0:	2b54      	cmp	r3, #84	; 0x54
 8012ee2:	d077      	beq.n	8012fd4 <_scanf_float+0x218>
 8012ee4:	2b59      	cmp	r3, #89	; 0x59
 8012ee6:	d199      	bne.n	8012e1c <_scanf_float+0x60>
 8012ee8:	2d07      	cmp	r5, #7
 8012eea:	d197      	bne.n	8012e1c <_scanf_float+0x60>
 8012eec:	2508      	movs	r5, #8
 8012eee:	e029      	b.n	8012f44 <_scanf_float+0x188>
 8012ef0:	2b74      	cmp	r3, #116	; 0x74
 8012ef2:	d06f      	beq.n	8012fd4 <_scanf_float+0x218>
 8012ef4:	2b79      	cmp	r3, #121	; 0x79
 8012ef6:	e7f6      	b.n	8012ee6 <_scanf_float+0x12a>
 8012ef8:	6821      	ldr	r1, [r4, #0]
 8012efa:	05c8      	lsls	r0, r1, #23
 8012efc:	d51a      	bpl.n	8012f34 <_scanf_float+0x178>
 8012efe:	9b02      	ldr	r3, [sp, #8]
 8012f00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012f04:	6021      	str	r1, [r4, #0]
 8012f06:	f109 0901 	add.w	r9, r9, #1
 8012f0a:	b11b      	cbz	r3, 8012f14 <_scanf_float+0x158>
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	3201      	adds	r2, #1
 8012f10:	9302      	str	r3, [sp, #8]
 8012f12:	60a2      	str	r2, [r4, #8]
 8012f14:	68a3      	ldr	r3, [r4, #8]
 8012f16:	3b01      	subs	r3, #1
 8012f18:	60a3      	str	r3, [r4, #8]
 8012f1a:	6923      	ldr	r3, [r4, #16]
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	6123      	str	r3, [r4, #16]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	3b01      	subs	r3, #1
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	607b      	str	r3, [r7, #4]
 8012f28:	f340 8084 	ble.w	8013034 <_scanf_float+0x278>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	3301      	adds	r3, #1
 8012f30:	603b      	str	r3, [r7, #0]
 8012f32:	e766      	b.n	8012e02 <_scanf_float+0x46>
 8012f34:	eb1a 0f05 	cmn.w	sl, r5
 8012f38:	f47f af70 	bne.w	8012e1c <_scanf_float+0x60>
 8012f3c:	6822      	ldr	r2, [r4, #0]
 8012f3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012f42:	6022      	str	r2, [r4, #0]
 8012f44:	f806 3b01 	strb.w	r3, [r6], #1
 8012f48:	e7e4      	b.n	8012f14 <_scanf_float+0x158>
 8012f4a:	6822      	ldr	r2, [r4, #0]
 8012f4c:	0610      	lsls	r0, r2, #24
 8012f4e:	f57f af65 	bpl.w	8012e1c <_scanf_float+0x60>
 8012f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012f56:	e7f4      	b.n	8012f42 <_scanf_float+0x186>
 8012f58:	f1ba 0f00 	cmp.w	sl, #0
 8012f5c:	d10e      	bne.n	8012f7c <_scanf_float+0x1c0>
 8012f5e:	f1b9 0f00 	cmp.w	r9, #0
 8012f62:	d10e      	bne.n	8012f82 <_scanf_float+0x1c6>
 8012f64:	6822      	ldr	r2, [r4, #0]
 8012f66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012f6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012f6e:	d108      	bne.n	8012f82 <_scanf_float+0x1c6>
 8012f70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012f74:	6022      	str	r2, [r4, #0]
 8012f76:	f04f 0a01 	mov.w	sl, #1
 8012f7a:	e7e3      	b.n	8012f44 <_scanf_float+0x188>
 8012f7c:	f1ba 0f02 	cmp.w	sl, #2
 8012f80:	d055      	beq.n	801302e <_scanf_float+0x272>
 8012f82:	2d01      	cmp	r5, #1
 8012f84:	d002      	beq.n	8012f8c <_scanf_float+0x1d0>
 8012f86:	2d04      	cmp	r5, #4
 8012f88:	f47f af48 	bne.w	8012e1c <_scanf_float+0x60>
 8012f8c:	3501      	adds	r5, #1
 8012f8e:	b2ed      	uxtb	r5, r5
 8012f90:	e7d8      	b.n	8012f44 <_scanf_float+0x188>
 8012f92:	f1ba 0f01 	cmp.w	sl, #1
 8012f96:	f47f af41 	bne.w	8012e1c <_scanf_float+0x60>
 8012f9a:	f04f 0a02 	mov.w	sl, #2
 8012f9e:	e7d1      	b.n	8012f44 <_scanf_float+0x188>
 8012fa0:	b97d      	cbnz	r5, 8012fc2 <_scanf_float+0x206>
 8012fa2:	f1b9 0f00 	cmp.w	r9, #0
 8012fa6:	f47f af3c 	bne.w	8012e22 <_scanf_float+0x66>
 8012faa:	6822      	ldr	r2, [r4, #0]
 8012fac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012fb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012fb4:	f47f af39 	bne.w	8012e2a <_scanf_float+0x6e>
 8012fb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012fbc:	6022      	str	r2, [r4, #0]
 8012fbe:	2501      	movs	r5, #1
 8012fc0:	e7c0      	b.n	8012f44 <_scanf_float+0x188>
 8012fc2:	2d03      	cmp	r5, #3
 8012fc4:	d0e2      	beq.n	8012f8c <_scanf_float+0x1d0>
 8012fc6:	2d05      	cmp	r5, #5
 8012fc8:	e7de      	b.n	8012f88 <_scanf_float+0x1cc>
 8012fca:	2d02      	cmp	r5, #2
 8012fcc:	f47f af26 	bne.w	8012e1c <_scanf_float+0x60>
 8012fd0:	2503      	movs	r5, #3
 8012fd2:	e7b7      	b.n	8012f44 <_scanf_float+0x188>
 8012fd4:	2d06      	cmp	r5, #6
 8012fd6:	f47f af21 	bne.w	8012e1c <_scanf_float+0x60>
 8012fda:	2507      	movs	r5, #7
 8012fdc:	e7b2      	b.n	8012f44 <_scanf_float+0x188>
 8012fde:	6822      	ldr	r2, [r4, #0]
 8012fe0:	0591      	lsls	r1, r2, #22
 8012fe2:	f57f af1b 	bpl.w	8012e1c <_scanf_float+0x60>
 8012fe6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012fea:	6022      	str	r2, [r4, #0]
 8012fec:	f8cd 9004 	str.w	r9, [sp, #4]
 8012ff0:	e7a8      	b.n	8012f44 <_scanf_float+0x188>
 8012ff2:	6822      	ldr	r2, [r4, #0]
 8012ff4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012ff8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012ffc:	d006      	beq.n	801300c <_scanf_float+0x250>
 8012ffe:	0550      	lsls	r0, r2, #21
 8013000:	f57f af0c 	bpl.w	8012e1c <_scanf_float+0x60>
 8013004:	f1b9 0f00 	cmp.w	r9, #0
 8013008:	f43f af0f 	beq.w	8012e2a <_scanf_float+0x6e>
 801300c:	0591      	lsls	r1, r2, #22
 801300e:	bf58      	it	pl
 8013010:	9901      	ldrpl	r1, [sp, #4]
 8013012:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013016:	bf58      	it	pl
 8013018:	eba9 0101 	subpl.w	r1, r9, r1
 801301c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013020:	bf58      	it	pl
 8013022:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013026:	6022      	str	r2, [r4, #0]
 8013028:	f04f 0900 	mov.w	r9, #0
 801302c:	e78a      	b.n	8012f44 <_scanf_float+0x188>
 801302e:	f04f 0a03 	mov.w	sl, #3
 8013032:	e787      	b.n	8012f44 <_scanf_float+0x188>
 8013034:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013038:	4639      	mov	r1, r7
 801303a:	4640      	mov	r0, r8
 801303c:	4798      	blx	r3
 801303e:	2800      	cmp	r0, #0
 8013040:	f43f aedf 	beq.w	8012e02 <_scanf_float+0x46>
 8013044:	e6ea      	b.n	8012e1c <_scanf_float+0x60>
 8013046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801304a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801304e:	463a      	mov	r2, r7
 8013050:	4640      	mov	r0, r8
 8013052:	4798      	blx	r3
 8013054:	6923      	ldr	r3, [r4, #16]
 8013056:	3b01      	subs	r3, #1
 8013058:	6123      	str	r3, [r4, #16]
 801305a:	e6ec      	b.n	8012e36 <_scanf_float+0x7a>
 801305c:	1e6b      	subs	r3, r5, #1
 801305e:	2b06      	cmp	r3, #6
 8013060:	d825      	bhi.n	80130ae <_scanf_float+0x2f2>
 8013062:	2d02      	cmp	r5, #2
 8013064:	d836      	bhi.n	80130d4 <_scanf_float+0x318>
 8013066:	455e      	cmp	r6, fp
 8013068:	f67f aee8 	bls.w	8012e3c <_scanf_float+0x80>
 801306c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013070:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013074:	463a      	mov	r2, r7
 8013076:	4640      	mov	r0, r8
 8013078:	4798      	blx	r3
 801307a:	6923      	ldr	r3, [r4, #16]
 801307c:	3b01      	subs	r3, #1
 801307e:	6123      	str	r3, [r4, #16]
 8013080:	e7f1      	b.n	8013066 <_scanf_float+0x2aa>
 8013082:	9802      	ldr	r0, [sp, #8]
 8013084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013088:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801308c:	9002      	str	r0, [sp, #8]
 801308e:	463a      	mov	r2, r7
 8013090:	4640      	mov	r0, r8
 8013092:	4798      	blx	r3
 8013094:	6923      	ldr	r3, [r4, #16]
 8013096:	3b01      	subs	r3, #1
 8013098:	6123      	str	r3, [r4, #16]
 801309a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801309e:	fa5f fa8a 	uxtb.w	sl, sl
 80130a2:	f1ba 0f02 	cmp.w	sl, #2
 80130a6:	d1ec      	bne.n	8013082 <_scanf_float+0x2c6>
 80130a8:	3d03      	subs	r5, #3
 80130aa:	b2ed      	uxtb	r5, r5
 80130ac:	1b76      	subs	r6, r6, r5
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	05da      	lsls	r2, r3, #23
 80130b2:	d52f      	bpl.n	8013114 <_scanf_float+0x358>
 80130b4:	055b      	lsls	r3, r3, #21
 80130b6:	d510      	bpl.n	80130da <_scanf_float+0x31e>
 80130b8:	455e      	cmp	r6, fp
 80130ba:	f67f aebf 	bls.w	8012e3c <_scanf_float+0x80>
 80130be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80130c6:	463a      	mov	r2, r7
 80130c8:	4640      	mov	r0, r8
 80130ca:	4798      	blx	r3
 80130cc:	6923      	ldr	r3, [r4, #16]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	6123      	str	r3, [r4, #16]
 80130d2:	e7f1      	b.n	80130b8 <_scanf_float+0x2fc>
 80130d4:	46aa      	mov	sl, r5
 80130d6:	9602      	str	r6, [sp, #8]
 80130d8:	e7df      	b.n	801309a <_scanf_float+0x2de>
 80130da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80130de:	6923      	ldr	r3, [r4, #16]
 80130e0:	2965      	cmp	r1, #101	; 0x65
 80130e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80130e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80130ea:	6123      	str	r3, [r4, #16]
 80130ec:	d00c      	beq.n	8013108 <_scanf_float+0x34c>
 80130ee:	2945      	cmp	r1, #69	; 0x45
 80130f0:	d00a      	beq.n	8013108 <_scanf_float+0x34c>
 80130f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130f6:	463a      	mov	r2, r7
 80130f8:	4640      	mov	r0, r8
 80130fa:	4798      	blx	r3
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013102:	3b01      	subs	r3, #1
 8013104:	1eb5      	subs	r5, r6, #2
 8013106:	6123      	str	r3, [r4, #16]
 8013108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801310c:	463a      	mov	r2, r7
 801310e:	4640      	mov	r0, r8
 8013110:	4798      	blx	r3
 8013112:	462e      	mov	r6, r5
 8013114:	6825      	ldr	r5, [r4, #0]
 8013116:	f015 0510 	ands.w	r5, r5, #16
 801311a:	d158      	bne.n	80131ce <_scanf_float+0x412>
 801311c:	7035      	strb	r5, [r6, #0]
 801311e:	6823      	ldr	r3, [r4, #0]
 8013120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013128:	d11c      	bne.n	8013164 <_scanf_float+0x3a8>
 801312a:	9b01      	ldr	r3, [sp, #4]
 801312c:	454b      	cmp	r3, r9
 801312e:	eba3 0209 	sub.w	r2, r3, r9
 8013132:	d124      	bne.n	801317e <_scanf_float+0x3c2>
 8013134:	2200      	movs	r2, #0
 8013136:	4659      	mov	r1, fp
 8013138:	4640      	mov	r0, r8
 801313a:	f002 fc5d 	bl	80159f8 <_strtod_r>
 801313e:	9b03      	ldr	r3, [sp, #12]
 8013140:	6821      	ldr	r1, [r4, #0]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f011 0f02 	tst.w	r1, #2
 8013148:	ec57 6b10 	vmov	r6, r7, d0
 801314c:	f103 0204 	add.w	r2, r3, #4
 8013150:	d020      	beq.n	8013194 <_scanf_float+0x3d8>
 8013152:	9903      	ldr	r1, [sp, #12]
 8013154:	600a      	str	r2, [r1, #0]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	e9c3 6700 	strd	r6, r7, [r3]
 801315c:	68e3      	ldr	r3, [r4, #12]
 801315e:	3301      	adds	r3, #1
 8013160:	60e3      	str	r3, [r4, #12]
 8013162:	e66c      	b.n	8012e3e <_scanf_float+0x82>
 8013164:	9b04      	ldr	r3, [sp, #16]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d0e4      	beq.n	8013134 <_scanf_float+0x378>
 801316a:	9905      	ldr	r1, [sp, #20]
 801316c:	230a      	movs	r3, #10
 801316e:	462a      	mov	r2, r5
 8013170:	3101      	adds	r1, #1
 8013172:	4640      	mov	r0, r8
 8013174:	f002 fcc8 	bl	8015b08 <_strtol_r>
 8013178:	9b04      	ldr	r3, [sp, #16]
 801317a:	9e05      	ldr	r6, [sp, #20]
 801317c:	1ac2      	subs	r2, r0, r3
 801317e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013182:	429e      	cmp	r6, r3
 8013184:	bf28      	it	cs
 8013186:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801318a:	4912      	ldr	r1, [pc, #72]	; (80131d4 <_scanf_float+0x418>)
 801318c:	4630      	mov	r0, r6
 801318e:	f000 f909 	bl	80133a4 <siprintf>
 8013192:	e7cf      	b.n	8013134 <_scanf_float+0x378>
 8013194:	f011 0f04 	tst.w	r1, #4
 8013198:	9903      	ldr	r1, [sp, #12]
 801319a:	600a      	str	r2, [r1, #0]
 801319c:	d1db      	bne.n	8013156 <_scanf_float+0x39a>
 801319e:	f8d3 8000 	ldr.w	r8, [r3]
 80131a2:	ee10 2a10 	vmov	r2, s0
 80131a6:	ee10 0a10 	vmov	r0, s0
 80131aa:	463b      	mov	r3, r7
 80131ac:	4639      	mov	r1, r7
 80131ae:	f7ed fcbd 	bl	8000b2c <__aeabi_dcmpun>
 80131b2:	b128      	cbz	r0, 80131c0 <_scanf_float+0x404>
 80131b4:	4808      	ldr	r0, [pc, #32]	; (80131d8 <_scanf_float+0x41c>)
 80131b6:	f000 f9e5 	bl	8013584 <nanf>
 80131ba:	ed88 0a00 	vstr	s0, [r8]
 80131be:	e7cd      	b.n	801315c <_scanf_float+0x3a0>
 80131c0:	4630      	mov	r0, r6
 80131c2:	4639      	mov	r1, r7
 80131c4:	f7ed fd10 	bl	8000be8 <__aeabi_d2f>
 80131c8:	f8c8 0000 	str.w	r0, [r8]
 80131cc:	e7c6      	b.n	801315c <_scanf_float+0x3a0>
 80131ce:	2500      	movs	r5, #0
 80131d0:	e635      	b.n	8012e3e <_scanf_float+0x82>
 80131d2:	bf00      	nop
 80131d4:	080170c8 	.word	0x080170c8
 80131d8:	0801745d 	.word	0x0801745d

080131dc <std>:
 80131dc:	2300      	movs	r3, #0
 80131de:	b510      	push	{r4, lr}
 80131e0:	4604      	mov	r4, r0
 80131e2:	e9c0 3300 	strd	r3, r3, [r0]
 80131e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131ea:	6083      	str	r3, [r0, #8]
 80131ec:	8181      	strh	r1, [r0, #12]
 80131ee:	6643      	str	r3, [r0, #100]	; 0x64
 80131f0:	81c2      	strh	r2, [r0, #14]
 80131f2:	6183      	str	r3, [r0, #24]
 80131f4:	4619      	mov	r1, r3
 80131f6:	2208      	movs	r2, #8
 80131f8:	305c      	adds	r0, #92	; 0x5c
 80131fa:	f000 f936 	bl	801346a <memset>
 80131fe:	4b05      	ldr	r3, [pc, #20]	; (8013214 <std+0x38>)
 8013200:	6263      	str	r3, [r4, #36]	; 0x24
 8013202:	4b05      	ldr	r3, [pc, #20]	; (8013218 <std+0x3c>)
 8013204:	62a3      	str	r3, [r4, #40]	; 0x28
 8013206:	4b05      	ldr	r3, [pc, #20]	; (801321c <std+0x40>)
 8013208:	62e3      	str	r3, [r4, #44]	; 0x2c
 801320a:	4b05      	ldr	r3, [pc, #20]	; (8013220 <std+0x44>)
 801320c:	6224      	str	r4, [r4, #32]
 801320e:	6323      	str	r3, [r4, #48]	; 0x30
 8013210:	bd10      	pop	{r4, pc}
 8013212:	bf00      	nop
 8013214:	080133e5 	.word	0x080133e5
 8013218:	08013407 	.word	0x08013407
 801321c:	0801343f 	.word	0x0801343f
 8013220:	08013463 	.word	0x08013463

08013224 <stdio_exit_handler>:
 8013224:	4a02      	ldr	r2, [pc, #8]	; (8013230 <stdio_exit_handler+0xc>)
 8013226:	4903      	ldr	r1, [pc, #12]	; (8013234 <stdio_exit_handler+0x10>)
 8013228:	4803      	ldr	r0, [pc, #12]	; (8013238 <stdio_exit_handler+0x14>)
 801322a:	f000 b869 	b.w	8013300 <_fwalk_sglue>
 801322e:	bf00      	nop
 8013230:	2000010c 	.word	0x2000010c
 8013234:	08015ec9 	.word	0x08015ec9
 8013238:	20000118 	.word	0x20000118

0801323c <cleanup_stdio>:
 801323c:	6841      	ldr	r1, [r0, #4]
 801323e:	4b0c      	ldr	r3, [pc, #48]	; (8013270 <cleanup_stdio+0x34>)
 8013240:	4299      	cmp	r1, r3
 8013242:	b510      	push	{r4, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	d001      	beq.n	801324c <cleanup_stdio+0x10>
 8013248:	f002 fe3e 	bl	8015ec8 <_fflush_r>
 801324c:	68a1      	ldr	r1, [r4, #8]
 801324e:	4b09      	ldr	r3, [pc, #36]	; (8013274 <cleanup_stdio+0x38>)
 8013250:	4299      	cmp	r1, r3
 8013252:	d002      	beq.n	801325a <cleanup_stdio+0x1e>
 8013254:	4620      	mov	r0, r4
 8013256:	f002 fe37 	bl	8015ec8 <_fflush_r>
 801325a:	68e1      	ldr	r1, [r4, #12]
 801325c:	4b06      	ldr	r3, [pc, #24]	; (8013278 <cleanup_stdio+0x3c>)
 801325e:	4299      	cmp	r1, r3
 8013260:	d004      	beq.n	801326c <cleanup_stdio+0x30>
 8013262:	4620      	mov	r0, r4
 8013264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013268:	f002 be2e 	b.w	8015ec8 <_fflush_r>
 801326c:	bd10      	pop	{r4, pc}
 801326e:	bf00      	nop
 8013270:	20008974 	.word	0x20008974
 8013274:	200089dc 	.word	0x200089dc
 8013278:	20008a44 	.word	0x20008a44

0801327c <global_stdio_init.part.0>:
 801327c:	b510      	push	{r4, lr}
 801327e:	4b0b      	ldr	r3, [pc, #44]	; (80132ac <global_stdio_init.part.0+0x30>)
 8013280:	4c0b      	ldr	r4, [pc, #44]	; (80132b0 <global_stdio_init.part.0+0x34>)
 8013282:	4a0c      	ldr	r2, [pc, #48]	; (80132b4 <global_stdio_init.part.0+0x38>)
 8013284:	601a      	str	r2, [r3, #0]
 8013286:	4620      	mov	r0, r4
 8013288:	2200      	movs	r2, #0
 801328a:	2104      	movs	r1, #4
 801328c:	f7ff ffa6 	bl	80131dc <std>
 8013290:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013294:	2201      	movs	r2, #1
 8013296:	2109      	movs	r1, #9
 8013298:	f7ff ffa0 	bl	80131dc <std>
 801329c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80132a0:	2202      	movs	r2, #2
 80132a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132a6:	2112      	movs	r1, #18
 80132a8:	f7ff bf98 	b.w	80131dc <std>
 80132ac:	20008aac 	.word	0x20008aac
 80132b0:	20008974 	.word	0x20008974
 80132b4:	08013225 	.word	0x08013225

080132b8 <__sfp_lock_acquire>:
 80132b8:	4801      	ldr	r0, [pc, #4]	; (80132c0 <__sfp_lock_acquire+0x8>)
 80132ba:	f000 b953 	b.w	8013564 <__retarget_lock_acquire_recursive>
 80132be:	bf00      	nop
 80132c0:	20008ab5 	.word	0x20008ab5

080132c4 <__sfp_lock_release>:
 80132c4:	4801      	ldr	r0, [pc, #4]	; (80132cc <__sfp_lock_release+0x8>)
 80132c6:	f000 b94e 	b.w	8013566 <__retarget_lock_release_recursive>
 80132ca:	bf00      	nop
 80132cc:	20008ab5 	.word	0x20008ab5

080132d0 <__sinit>:
 80132d0:	b510      	push	{r4, lr}
 80132d2:	4604      	mov	r4, r0
 80132d4:	f7ff fff0 	bl	80132b8 <__sfp_lock_acquire>
 80132d8:	6a23      	ldr	r3, [r4, #32]
 80132da:	b11b      	cbz	r3, 80132e4 <__sinit+0x14>
 80132dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132e0:	f7ff bff0 	b.w	80132c4 <__sfp_lock_release>
 80132e4:	4b04      	ldr	r3, [pc, #16]	; (80132f8 <__sinit+0x28>)
 80132e6:	6223      	str	r3, [r4, #32]
 80132e8:	4b04      	ldr	r3, [pc, #16]	; (80132fc <__sinit+0x2c>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d1f5      	bne.n	80132dc <__sinit+0xc>
 80132f0:	f7ff ffc4 	bl	801327c <global_stdio_init.part.0>
 80132f4:	e7f2      	b.n	80132dc <__sinit+0xc>
 80132f6:	bf00      	nop
 80132f8:	0801323d 	.word	0x0801323d
 80132fc:	20008aac 	.word	0x20008aac

08013300 <_fwalk_sglue>:
 8013300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013304:	4607      	mov	r7, r0
 8013306:	4688      	mov	r8, r1
 8013308:	4614      	mov	r4, r2
 801330a:	2600      	movs	r6, #0
 801330c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013310:	f1b9 0901 	subs.w	r9, r9, #1
 8013314:	d505      	bpl.n	8013322 <_fwalk_sglue+0x22>
 8013316:	6824      	ldr	r4, [r4, #0]
 8013318:	2c00      	cmp	r4, #0
 801331a:	d1f7      	bne.n	801330c <_fwalk_sglue+0xc>
 801331c:	4630      	mov	r0, r6
 801331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013322:	89ab      	ldrh	r3, [r5, #12]
 8013324:	2b01      	cmp	r3, #1
 8013326:	d907      	bls.n	8013338 <_fwalk_sglue+0x38>
 8013328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801332c:	3301      	adds	r3, #1
 801332e:	d003      	beq.n	8013338 <_fwalk_sglue+0x38>
 8013330:	4629      	mov	r1, r5
 8013332:	4638      	mov	r0, r7
 8013334:	47c0      	blx	r8
 8013336:	4306      	orrs	r6, r0
 8013338:	3568      	adds	r5, #104	; 0x68
 801333a:	e7e9      	b.n	8013310 <_fwalk_sglue+0x10>

0801333c <sniprintf>:
 801333c:	b40c      	push	{r2, r3}
 801333e:	b530      	push	{r4, r5, lr}
 8013340:	4b17      	ldr	r3, [pc, #92]	; (80133a0 <sniprintf+0x64>)
 8013342:	1e0c      	subs	r4, r1, #0
 8013344:	681d      	ldr	r5, [r3, #0]
 8013346:	b09d      	sub	sp, #116	; 0x74
 8013348:	da08      	bge.n	801335c <sniprintf+0x20>
 801334a:	238b      	movs	r3, #139	; 0x8b
 801334c:	602b      	str	r3, [r5, #0]
 801334e:	f04f 30ff 	mov.w	r0, #4294967295
 8013352:	b01d      	add	sp, #116	; 0x74
 8013354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013358:	b002      	add	sp, #8
 801335a:	4770      	bx	lr
 801335c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013360:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013364:	bf14      	ite	ne
 8013366:	f104 33ff 	addne.w	r3, r4, #4294967295
 801336a:	4623      	moveq	r3, r4
 801336c:	9304      	str	r3, [sp, #16]
 801336e:	9307      	str	r3, [sp, #28]
 8013370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013374:	9002      	str	r0, [sp, #8]
 8013376:	9006      	str	r0, [sp, #24]
 8013378:	f8ad 3016 	strh.w	r3, [sp, #22]
 801337c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801337e:	ab21      	add	r3, sp, #132	; 0x84
 8013380:	a902      	add	r1, sp, #8
 8013382:	4628      	mov	r0, r5
 8013384:	9301      	str	r3, [sp, #4]
 8013386:	f002 fc1b 	bl	8015bc0 <_svfiprintf_r>
 801338a:	1c43      	adds	r3, r0, #1
 801338c:	bfbc      	itt	lt
 801338e:	238b      	movlt	r3, #139	; 0x8b
 8013390:	602b      	strlt	r3, [r5, #0]
 8013392:	2c00      	cmp	r4, #0
 8013394:	d0dd      	beq.n	8013352 <sniprintf+0x16>
 8013396:	9b02      	ldr	r3, [sp, #8]
 8013398:	2200      	movs	r2, #0
 801339a:	701a      	strb	r2, [r3, #0]
 801339c:	e7d9      	b.n	8013352 <sniprintf+0x16>
 801339e:	bf00      	nop
 80133a0:	20000164 	.word	0x20000164

080133a4 <siprintf>:
 80133a4:	b40e      	push	{r1, r2, r3}
 80133a6:	b500      	push	{lr}
 80133a8:	b09c      	sub	sp, #112	; 0x70
 80133aa:	ab1d      	add	r3, sp, #116	; 0x74
 80133ac:	9002      	str	r0, [sp, #8]
 80133ae:	9006      	str	r0, [sp, #24]
 80133b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133b4:	4809      	ldr	r0, [pc, #36]	; (80133dc <siprintf+0x38>)
 80133b6:	9107      	str	r1, [sp, #28]
 80133b8:	9104      	str	r1, [sp, #16]
 80133ba:	4909      	ldr	r1, [pc, #36]	; (80133e0 <siprintf+0x3c>)
 80133bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80133c0:	9105      	str	r1, [sp, #20]
 80133c2:	6800      	ldr	r0, [r0, #0]
 80133c4:	9301      	str	r3, [sp, #4]
 80133c6:	a902      	add	r1, sp, #8
 80133c8:	f002 fbfa 	bl	8015bc0 <_svfiprintf_r>
 80133cc:	9b02      	ldr	r3, [sp, #8]
 80133ce:	2200      	movs	r2, #0
 80133d0:	701a      	strb	r2, [r3, #0]
 80133d2:	b01c      	add	sp, #112	; 0x70
 80133d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80133d8:	b003      	add	sp, #12
 80133da:	4770      	bx	lr
 80133dc:	20000164 	.word	0x20000164
 80133e0:	ffff0208 	.word	0xffff0208

080133e4 <__sread>:
 80133e4:	b510      	push	{r4, lr}
 80133e6:	460c      	mov	r4, r1
 80133e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ec:	f000 f86c 	bl	80134c8 <_read_r>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	bfab      	itete	ge
 80133f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133f6:	89a3      	ldrhlt	r3, [r4, #12]
 80133f8:	181b      	addge	r3, r3, r0
 80133fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133fe:	bfac      	ite	ge
 8013400:	6563      	strge	r3, [r4, #84]	; 0x54
 8013402:	81a3      	strhlt	r3, [r4, #12]
 8013404:	bd10      	pop	{r4, pc}

08013406 <__swrite>:
 8013406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801340a:	461f      	mov	r7, r3
 801340c:	898b      	ldrh	r3, [r1, #12]
 801340e:	05db      	lsls	r3, r3, #23
 8013410:	4605      	mov	r5, r0
 8013412:	460c      	mov	r4, r1
 8013414:	4616      	mov	r6, r2
 8013416:	d505      	bpl.n	8013424 <__swrite+0x1e>
 8013418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801341c:	2302      	movs	r3, #2
 801341e:	2200      	movs	r2, #0
 8013420:	f000 f840 	bl	80134a4 <_lseek_r>
 8013424:	89a3      	ldrh	r3, [r4, #12]
 8013426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801342a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801342e:	81a3      	strh	r3, [r4, #12]
 8013430:	4632      	mov	r2, r6
 8013432:	463b      	mov	r3, r7
 8013434:	4628      	mov	r0, r5
 8013436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801343a:	f000 b857 	b.w	80134ec <_write_r>

0801343e <__sseek>:
 801343e:	b510      	push	{r4, lr}
 8013440:	460c      	mov	r4, r1
 8013442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013446:	f000 f82d 	bl	80134a4 <_lseek_r>
 801344a:	1c43      	adds	r3, r0, #1
 801344c:	89a3      	ldrh	r3, [r4, #12]
 801344e:	bf15      	itete	ne
 8013450:	6560      	strne	r0, [r4, #84]	; 0x54
 8013452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801345a:	81a3      	strheq	r3, [r4, #12]
 801345c:	bf18      	it	ne
 801345e:	81a3      	strhne	r3, [r4, #12]
 8013460:	bd10      	pop	{r4, pc}

08013462 <__sclose>:
 8013462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013466:	f000 b80d 	b.w	8013484 <_close_r>

0801346a <memset>:
 801346a:	4402      	add	r2, r0
 801346c:	4603      	mov	r3, r0
 801346e:	4293      	cmp	r3, r2
 8013470:	d100      	bne.n	8013474 <memset+0xa>
 8013472:	4770      	bx	lr
 8013474:	f803 1b01 	strb.w	r1, [r3], #1
 8013478:	e7f9      	b.n	801346e <memset+0x4>
	...

0801347c <_localeconv_r>:
 801347c:	4800      	ldr	r0, [pc, #0]	; (8013480 <_localeconv_r+0x4>)
 801347e:	4770      	bx	lr
 8013480:	20000258 	.word	0x20000258

08013484 <_close_r>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	4d06      	ldr	r5, [pc, #24]	; (80134a0 <_close_r+0x1c>)
 8013488:	2300      	movs	r3, #0
 801348a:	4604      	mov	r4, r0
 801348c:	4608      	mov	r0, r1
 801348e:	602b      	str	r3, [r5, #0]
 8013490:	f7f0 fc23 	bl	8003cda <_close>
 8013494:	1c43      	adds	r3, r0, #1
 8013496:	d102      	bne.n	801349e <_close_r+0x1a>
 8013498:	682b      	ldr	r3, [r5, #0]
 801349a:	b103      	cbz	r3, 801349e <_close_r+0x1a>
 801349c:	6023      	str	r3, [r4, #0]
 801349e:	bd38      	pop	{r3, r4, r5, pc}
 80134a0:	20008ab0 	.word	0x20008ab0

080134a4 <_lseek_r>:
 80134a4:	b538      	push	{r3, r4, r5, lr}
 80134a6:	4d07      	ldr	r5, [pc, #28]	; (80134c4 <_lseek_r+0x20>)
 80134a8:	4604      	mov	r4, r0
 80134aa:	4608      	mov	r0, r1
 80134ac:	4611      	mov	r1, r2
 80134ae:	2200      	movs	r2, #0
 80134b0:	602a      	str	r2, [r5, #0]
 80134b2:	461a      	mov	r2, r3
 80134b4:	f7f0 fc38 	bl	8003d28 <_lseek>
 80134b8:	1c43      	adds	r3, r0, #1
 80134ba:	d102      	bne.n	80134c2 <_lseek_r+0x1e>
 80134bc:	682b      	ldr	r3, [r5, #0]
 80134be:	b103      	cbz	r3, 80134c2 <_lseek_r+0x1e>
 80134c0:	6023      	str	r3, [r4, #0]
 80134c2:	bd38      	pop	{r3, r4, r5, pc}
 80134c4:	20008ab0 	.word	0x20008ab0

080134c8 <_read_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4d07      	ldr	r5, [pc, #28]	; (80134e8 <_read_r+0x20>)
 80134cc:	4604      	mov	r4, r0
 80134ce:	4608      	mov	r0, r1
 80134d0:	4611      	mov	r1, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	602a      	str	r2, [r5, #0]
 80134d6:	461a      	mov	r2, r3
 80134d8:	f7f0 fbc6 	bl	8003c68 <_read>
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d102      	bne.n	80134e6 <_read_r+0x1e>
 80134e0:	682b      	ldr	r3, [r5, #0]
 80134e2:	b103      	cbz	r3, 80134e6 <_read_r+0x1e>
 80134e4:	6023      	str	r3, [r4, #0]
 80134e6:	bd38      	pop	{r3, r4, r5, pc}
 80134e8:	20008ab0 	.word	0x20008ab0

080134ec <_write_r>:
 80134ec:	b538      	push	{r3, r4, r5, lr}
 80134ee:	4d07      	ldr	r5, [pc, #28]	; (801350c <_write_r+0x20>)
 80134f0:	4604      	mov	r4, r0
 80134f2:	4608      	mov	r0, r1
 80134f4:	4611      	mov	r1, r2
 80134f6:	2200      	movs	r2, #0
 80134f8:	602a      	str	r2, [r5, #0]
 80134fa:	461a      	mov	r2, r3
 80134fc:	f7f0 fbd1 	bl	8003ca2 <_write>
 8013500:	1c43      	adds	r3, r0, #1
 8013502:	d102      	bne.n	801350a <_write_r+0x1e>
 8013504:	682b      	ldr	r3, [r5, #0]
 8013506:	b103      	cbz	r3, 801350a <_write_r+0x1e>
 8013508:	6023      	str	r3, [r4, #0]
 801350a:	bd38      	pop	{r3, r4, r5, pc}
 801350c:	20008ab0 	.word	0x20008ab0

08013510 <__errno>:
 8013510:	4b01      	ldr	r3, [pc, #4]	; (8013518 <__errno+0x8>)
 8013512:	6818      	ldr	r0, [r3, #0]
 8013514:	4770      	bx	lr
 8013516:	bf00      	nop
 8013518:	20000164 	.word	0x20000164

0801351c <__libc_init_array>:
 801351c:	b570      	push	{r4, r5, r6, lr}
 801351e:	4d0d      	ldr	r5, [pc, #52]	; (8013554 <__libc_init_array+0x38>)
 8013520:	4c0d      	ldr	r4, [pc, #52]	; (8013558 <__libc_init_array+0x3c>)
 8013522:	1b64      	subs	r4, r4, r5
 8013524:	10a4      	asrs	r4, r4, #2
 8013526:	2600      	movs	r6, #0
 8013528:	42a6      	cmp	r6, r4
 801352a:	d109      	bne.n	8013540 <__libc_init_array+0x24>
 801352c:	4d0b      	ldr	r5, [pc, #44]	; (801355c <__libc_init_array+0x40>)
 801352e:	4c0c      	ldr	r4, [pc, #48]	; (8013560 <__libc_init_array+0x44>)
 8013530:	f003 fbd2 	bl	8016cd8 <_init>
 8013534:	1b64      	subs	r4, r4, r5
 8013536:	10a4      	asrs	r4, r4, #2
 8013538:	2600      	movs	r6, #0
 801353a:	42a6      	cmp	r6, r4
 801353c:	d105      	bne.n	801354a <__libc_init_array+0x2e>
 801353e:	bd70      	pop	{r4, r5, r6, pc}
 8013540:	f855 3b04 	ldr.w	r3, [r5], #4
 8013544:	4798      	blx	r3
 8013546:	3601      	adds	r6, #1
 8013548:	e7ee      	b.n	8013528 <__libc_init_array+0xc>
 801354a:	f855 3b04 	ldr.w	r3, [r5], #4
 801354e:	4798      	blx	r3
 8013550:	3601      	adds	r6, #1
 8013552:	e7f2      	b.n	801353a <__libc_init_array+0x1e>
 8013554:	080174c0 	.word	0x080174c0
 8013558:	080174c0 	.word	0x080174c0
 801355c:	080174c0 	.word	0x080174c0
 8013560:	080174c4 	.word	0x080174c4

08013564 <__retarget_lock_acquire_recursive>:
 8013564:	4770      	bx	lr

08013566 <__retarget_lock_release_recursive>:
 8013566:	4770      	bx	lr

08013568 <memcpy>:
 8013568:	440a      	add	r2, r1
 801356a:	4291      	cmp	r1, r2
 801356c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013570:	d100      	bne.n	8013574 <memcpy+0xc>
 8013572:	4770      	bx	lr
 8013574:	b510      	push	{r4, lr}
 8013576:	f811 4b01 	ldrb.w	r4, [r1], #1
 801357a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801357e:	4291      	cmp	r1, r2
 8013580:	d1f9      	bne.n	8013576 <memcpy+0xe>
 8013582:	bd10      	pop	{r4, pc}

08013584 <nanf>:
 8013584:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801358c <nanf+0x8>
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	7fc00000 	.word	0x7fc00000

08013590 <quorem>:
 8013590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013594:	6903      	ldr	r3, [r0, #16]
 8013596:	690c      	ldr	r4, [r1, #16]
 8013598:	42a3      	cmp	r3, r4
 801359a:	4607      	mov	r7, r0
 801359c:	db7e      	blt.n	801369c <quorem+0x10c>
 801359e:	3c01      	subs	r4, #1
 80135a0:	f101 0814 	add.w	r8, r1, #20
 80135a4:	f100 0514 	add.w	r5, r0, #20
 80135a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135ac:	9301      	str	r3, [sp, #4]
 80135ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80135b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135b6:	3301      	adds	r3, #1
 80135b8:	429a      	cmp	r2, r3
 80135ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80135be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80135c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80135c6:	d331      	bcc.n	801362c <quorem+0x9c>
 80135c8:	f04f 0e00 	mov.w	lr, #0
 80135cc:	4640      	mov	r0, r8
 80135ce:	46ac      	mov	ip, r5
 80135d0:	46f2      	mov	sl, lr
 80135d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80135d6:	b293      	uxth	r3, r2
 80135d8:	fb06 e303 	mla	r3, r6, r3, lr
 80135dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80135e0:	0c1a      	lsrs	r2, r3, #16
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	ebaa 0303 	sub.w	r3, sl, r3
 80135e8:	f8dc a000 	ldr.w	sl, [ip]
 80135ec:	fa13 f38a 	uxtah	r3, r3, sl
 80135f0:	fb06 220e 	mla	r2, r6, lr, r2
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	9b00      	ldr	r3, [sp, #0]
 80135f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80135fc:	b292      	uxth	r2, r2
 80135fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013602:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013606:	f8bd 3000 	ldrh.w	r3, [sp]
 801360a:	4581      	cmp	r9, r0
 801360c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013610:	f84c 3b04 	str.w	r3, [ip], #4
 8013614:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013618:	d2db      	bcs.n	80135d2 <quorem+0x42>
 801361a:	f855 300b 	ldr.w	r3, [r5, fp]
 801361e:	b92b      	cbnz	r3, 801362c <quorem+0x9c>
 8013620:	9b01      	ldr	r3, [sp, #4]
 8013622:	3b04      	subs	r3, #4
 8013624:	429d      	cmp	r5, r3
 8013626:	461a      	mov	r2, r3
 8013628:	d32c      	bcc.n	8013684 <quorem+0xf4>
 801362a:	613c      	str	r4, [r7, #16]
 801362c:	4638      	mov	r0, r7
 801362e:	f001 f9ef 	bl	8014a10 <__mcmp>
 8013632:	2800      	cmp	r0, #0
 8013634:	db22      	blt.n	801367c <quorem+0xec>
 8013636:	3601      	adds	r6, #1
 8013638:	4629      	mov	r1, r5
 801363a:	2000      	movs	r0, #0
 801363c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013640:	f8d1 c000 	ldr.w	ip, [r1]
 8013644:	b293      	uxth	r3, r2
 8013646:	1ac3      	subs	r3, r0, r3
 8013648:	0c12      	lsrs	r2, r2, #16
 801364a:	fa13 f38c 	uxtah	r3, r3, ip
 801364e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013656:	b29b      	uxth	r3, r3
 8013658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801365c:	45c1      	cmp	r9, r8
 801365e:	f841 3b04 	str.w	r3, [r1], #4
 8013662:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013666:	d2e9      	bcs.n	801363c <quorem+0xac>
 8013668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801366c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013670:	b922      	cbnz	r2, 801367c <quorem+0xec>
 8013672:	3b04      	subs	r3, #4
 8013674:	429d      	cmp	r5, r3
 8013676:	461a      	mov	r2, r3
 8013678:	d30a      	bcc.n	8013690 <quorem+0x100>
 801367a:	613c      	str	r4, [r7, #16]
 801367c:	4630      	mov	r0, r6
 801367e:	b003      	add	sp, #12
 8013680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013684:	6812      	ldr	r2, [r2, #0]
 8013686:	3b04      	subs	r3, #4
 8013688:	2a00      	cmp	r2, #0
 801368a:	d1ce      	bne.n	801362a <quorem+0x9a>
 801368c:	3c01      	subs	r4, #1
 801368e:	e7c9      	b.n	8013624 <quorem+0x94>
 8013690:	6812      	ldr	r2, [r2, #0]
 8013692:	3b04      	subs	r3, #4
 8013694:	2a00      	cmp	r2, #0
 8013696:	d1f0      	bne.n	801367a <quorem+0xea>
 8013698:	3c01      	subs	r4, #1
 801369a:	e7eb      	b.n	8013674 <quorem+0xe4>
 801369c:	2000      	movs	r0, #0
 801369e:	e7ee      	b.n	801367e <quorem+0xee>

080136a0 <_dtoa_r>:
 80136a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a4:	ed2d 8b04 	vpush	{d8-d9}
 80136a8:	69c5      	ldr	r5, [r0, #28]
 80136aa:	b093      	sub	sp, #76	; 0x4c
 80136ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80136b0:	ec57 6b10 	vmov	r6, r7, d0
 80136b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80136b8:	9107      	str	r1, [sp, #28]
 80136ba:	4604      	mov	r4, r0
 80136bc:	920a      	str	r2, [sp, #40]	; 0x28
 80136be:	930d      	str	r3, [sp, #52]	; 0x34
 80136c0:	b975      	cbnz	r5, 80136e0 <_dtoa_r+0x40>
 80136c2:	2010      	movs	r0, #16
 80136c4:	f000 fe2a 	bl	801431c <malloc>
 80136c8:	4602      	mov	r2, r0
 80136ca:	61e0      	str	r0, [r4, #28]
 80136cc:	b920      	cbnz	r0, 80136d8 <_dtoa_r+0x38>
 80136ce:	4bae      	ldr	r3, [pc, #696]	; (8013988 <_dtoa_r+0x2e8>)
 80136d0:	21ef      	movs	r1, #239	; 0xef
 80136d2:	48ae      	ldr	r0, [pc, #696]	; (801398c <_dtoa_r+0x2ec>)
 80136d4:	f002 fc64 	bl	8015fa0 <__assert_func>
 80136d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80136dc:	6005      	str	r5, [r0, #0]
 80136de:	60c5      	str	r5, [r0, #12]
 80136e0:	69e3      	ldr	r3, [r4, #28]
 80136e2:	6819      	ldr	r1, [r3, #0]
 80136e4:	b151      	cbz	r1, 80136fc <_dtoa_r+0x5c>
 80136e6:	685a      	ldr	r2, [r3, #4]
 80136e8:	604a      	str	r2, [r1, #4]
 80136ea:	2301      	movs	r3, #1
 80136ec:	4093      	lsls	r3, r2
 80136ee:	608b      	str	r3, [r1, #8]
 80136f0:	4620      	mov	r0, r4
 80136f2:	f000 ff07 	bl	8014504 <_Bfree>
 80136f6:	69e3      	ldr	r3, [r4, #28]
 80136f8:	2200      	movs	r2, #0
 80136fa:	601a      	str	r2, [r3, #0]
 80136fc:	1e3b      	subs	r3, r7, #0
 80136fe:	bfbb      	ittet	lt
 8013700:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013704:	9303      	strlt	r3, [sp, #12]
 8013706:	2300      	movge	r3, #0
 8013708:	2201      	movlt	r2, #1
 801370a:	bfac      	ite	ge
 801370c:	f8c8 3000 	strge.w	r3, [r8]
 8013710:	f8c8 2000 	strlt.w	r2, [r8]
 8013714:	4b9e      	ldr	r3, [pc, #632]	; (8013990 <_dtoa_r+0x2f0>)
 8013716:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801371a:	ea33 0308 	bics.w	r3, r3, r8
 801371e:	d11b      	bne.n	8013758 <_dtoa_r+0xb8>
 8013720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013722:	f242 730f 	movw	r3, #9999	; 0x270f
 8013726:	6013      	str	r3, [r2, #0]
 8013728:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801372c:	4333      	orrs	r3, r6
 801372e:	f000 8593 	beq.w	8014258 <_dtoa_r+0xbb8>
 8013732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013734:	b963      	cbnz	r3, 8013750 <_dtoa_r+0xb0>
 8013736:	4b97      	ldr	r3, [pc, #604]	; (8013994 <_dtoa_r+0x2f4>)
 8013738:	e027      	b.n	801378a <_dtoa_r+0xea>
 801373a:	4b97      	ldr	r3, [pc, #604]	; (8013998 <_dtoa_r+0x2f8>)
 801373c:	9300      	str	r3, [sp, #0]
 801373e:	3308      	adds	r3, #8
 8013740:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013742:	6013      	str	r3, [r2, #0]
 8013744:	9800      	ldr	r0, [sp, #0]
 8013746:	b013      	add	sp, #76	; 0x4c
 8013748:	ecbd 8b04 	vpop	{d8-d9}
 801374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013750:	4b90      	ldr	r3, [pc, #576]	; (8013994 <_dtoa_r+0x2f4>)
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	3303      	adds	r3, #3
 8013756:	e7f3      	b.n	8013740 <_dtoa_r+0xa0>
 8013758:	ed9d 7b02 	vldr	d7, [sp, #8]
 801375c:	2200      	movs	r2, #0
 801375e:	ec51 0b17 	vmov	r0, r1, d7
 8013762:	eeb0 8a47 	vmov.f32	s16, s14
 8013766:	eef0 8a67 	vmov.f32	s17, s15
 801376a:	2300      	movs	r3, #0
 801376c:	f7ed f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8013770:	4681      	mov	r9, r0
 8013772:	b160      	cbz	r0, 801378e <_dtoa_r+0xee>
 8013774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013776:	2301      	movs	r3, #1
 8013778:	6013      	str	r3, [r2, #0]
 801377a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801377c:	2b00      	cmp	r3, #0
 801377e:	f000 8568 	beq.w	8014252 <_dtoa_r+0xbb2>
 8013782:	4b86      	ldr	r3, [pc, #536]	; (801399c <_dtoa_r+0x2fc>)
 8013784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013786:	6013      	str	r3, [r2, #0]
 8013788:	3b01      	subs	r3, #1
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	e7da      	b.n	8013744 <_dtoa_r+0xa4>
 801378e:	aa10      	add	r2, sp, #64	; 0x40
 8013790:	a911      	add	r1, sp, #68	; 0x44
 8013792:	4620      	mov	r0, r4
 8013794:	eeb0 0a48 	vmov.f32	s0, s16
 8013798:	eef0 0a68 	vmov.f32	s1, s17
 801379c:	f001 fa4e 	bl	8014c3c <__d2b>
 80137a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80137a4:	4682      	mov	sl, r0
 80137a6:	2d00      	cmp	r5, #0
 80137a8:	d07f      	beq.n	80138aa <_dtoa_r+0x20a>
 80137aa:	ee18 3a90 	vmov	r3, s17
 80137ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80137b6:	ec51 0b18 	vmov	r0, r1, d8
 80137ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80137be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80137c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80137c6:	4619      	mov	r1, r3
 80137c8:	2200      	movs	r2, #0
 80137ca:	4b75      	ldr	r3, [pc, #468]	; (80139a0 <_dtoa_r+0x300>)
 80137cc:	f7ec fd5c 	bl	8000288 <__aeabi_dsub>
 80137d0:	a367      	add	r3, pc, #412	; (adr r3, 8013970 <_dtoa_r+0x2d0>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	f7ec ff0f 	bl	80005f8 <__aeabi_dmul>
 80137da:	a367      	add	r3, pc, #412	; (adr r3, 8013978 <_dtoa_r+0x2d8>)
 80137dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e0:	f7ec fd54 	bl	800028c <__adddf3>
 80137e4:	4606      	mov	r6, r0
 80137e6:	4628      	mov	r0, r5
 80137e8:	460f      	mov	r7, r1
 80137ea:	f7ec fe9b 	bl	8000524 <__aeabi_i2d>
 80137ee:	a364      	add	r3, pc, #400	; (adr r3, 8013980 <_dtoa_r+0x2e0>)
 80137f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f4:	f7ec ff00 	bl	80005f8 <__aeabi_dmul>
 80137f8:	4602      	mov	r2, r0
 80137fa:	460b      	mov	r3, r1
 80137fc:	4630      	mov	r0, r6
 80137fe:	4639      	mov	r1, r7
 8013800:	f7ec fd44 	bl	800028c <__adddf3>
 8013804:	4606      	mov	r6, r0
 8013806:	460f      	mov	r7, r1
 8013808:	f7ed f9a6 	bl	8000b58 <__aeabi_d2iz>
 801380c:	2200      	movs	r2, #0
 801380e:	4683      	mov	fp, r0
 8013810:	2300      	movs	r3, #0
 8013812:	4630      	mov	r0, r6
 8013814:	4639      	mov	r1, r7
 8013816:	f7ed f961 	bl	8000adc <__aeabi_dcmplt>
 801381a:	b148      	cbz	r0, 8013830 <_dtoa_r+0x190>
 801381c:	4658      	mov	r0, fp
 801381e:	f7ec fe81 	bl	8000524 <__aeabi_i2d>
 8013822:	4632      	mov	r2, r6
 8013824:	463b      	mov	r3, r7
 8013826:	f7ed f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 801382a:	b908      	cbnz	r0, 8013830 <_dtoa_r+0x190>
 801382c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013830:	f1bb 0f16 	cmp.w	fp, #22
 8013834:	d857      	bhi.n	80138e6 <_dtoa_r+0x246>
 8013836:	4b5b      	ldr	r3, [pc, #364]	; (80139a4 <_dtoa_r+0x304>)
 8013838:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013840:	ec51 0b18 	vmov	r0, r1, d8
 8013844:	f7ed f94a 	bl	8000adc <__aeabi_dcmplt>
 8013848:	2800      	cmp	r0, #0
 801384a:	d04e      	beq.n	80138ea <_dtoa_r+0x24a>
 801384c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013850:	2300      	movs	r3, #0
 8013852:	930c      	str	r3, [sp, #48]	; 0x30
 8013854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013856:	1b5b      	subs	r3, r3, r5
 8013858:	1e5a      	subs	r2, r3, #1
 801385a:	bf45      	ittet	mi
 801385c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013860:	9305      	strmi	r3, [sp, #20]
 8013862:	2300      	movpl	r3, #0
 8013864:	2300      	movmi	r3, #0
 8013866:	9206      	str	r2, [sp, #24]
 8013868:	bf54      	ite	pl
 801386a:	9305      	strpl	r3, [sp, #20]
 801386c:	9306      	strmi	r3, [sp, #24]
 801386e:	f1bb 0f00 	cmp.w	fp, #0
 8013872:	db3c      	blt.n	80138ee <_dtoa_r+0x24e>
 8013874:	9b06      	ldr	r3, [sp, #24]
 8013876:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801387a:	445b      	add	r3, fp
 801387c:	9306      	str	r3, [sp, #24]
 801387e:	2300      	movs	r3, #0
 8013880:	9308      	str	r3, [sp, #32]
 8013882:	9b07      	ldr	r3, [sp, #28]
 8013884:	2b09      	cmp	r3, #9
 8013886:	d868      	bhi.n	801395a <_dtoa_r+0x2ba>
 8013888:	2b05      	cmp	r3, #5
 801388a:	bfc4      	itt	gt
 801388c:	3b04      	subgt	r3, #4
 801388e:	9307      	strgt	r3, [sp, #28]
 8013890:	9b07      	ldr	r3, [sp, #28]
 8013892:	f1a3 0302 	sub.w	r3, r3, #2
 8013896:	bfcc      	ite	gt
 8013898:	2500      	movgt	r5, #0
 801389a:	2501      	movle	r5, #1
 801389c:	2b03      	cmp	r3, #3
 801389e:	f200 8085 	bhi.w	80139ac <_dtoa_r+0x30c>
 80138a2:	e8df f003 	tbb	[pc, r3]
 80138a6:	3b2e      	.short	0x3b2e
 80138a8:	5839      	.short	0x5839
 80138aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80138ae:	441d      	add	r5, r3
 80138b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80138b4:	2b20      	cmp	r3, #32
 80138b6:	bfc1      	itttt	gt
 80138b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80138bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80138c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80138c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80138c8:	bfd6      	itet	le
 80138ca:	f1c3 0320 	rsble	r3, r3, #32
 80138ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80138d2:	fa06 f003 	lslle.w	r0, r6, r3
 80138d6:	f7ec fe15 	bl	8000504 <__aeabi_ui2d>
 80138da:	2201      	movs	r2, #1
 80138dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80138e0:	3d01      	subs	r5, #1
 80138e2:	920e      	str	r2, [sp, #56]	; 0x38
 80138e4:	e76f      	b.n	80137c6 <_dtoa_r+0x126>
 80138e6:	2301      	movs	r3, #1
 80138e8:	e7b3      	b.n	8013852 <_dtoa_r+0x1b2>
 80138ea:	900c      	str	r0, [sp, #48]	; 0x30
 80138ec:	e7b2      	b.n	8013854 <_dtoa_r+0x1b4>
 80138ee:	9b05      	ldr	r3, [sp, #20]
 80138f0:	eba3 030b 	sub.w	r3, r3, fp
 80138f4:	9305      	str	r3, [sp, #20]
 80138f6:	f1cb 0300 	rsb	r3, fp, #0
 80138fa:	9308      	str	r3, [sp, #32]
 80138fc:	2300      	movs	r3, #0
 80138fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013900:	e7bf      	b.n	8013882 <_dtoa_r+0x1e2>
 8013902:	2300      	movs	r3, #0
 8013904:	9309      	str	r3, [sp, #36]	; 0x24
 8013906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013908:	2b00      	cmp	r3, #0
 801390a:	dc52      	bgt.n	80139b2 <_dtoa_r+0x312>
 801390c:	2301      	movs	r3, #1
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	461a      	mov	r2, r3
 8013914:	920a      	str	r2, [sp, #40]	; 0x28
 8013916:	e00b      	b.n	8013930 <_dtoa_r+0x290>
 8013918:	2301      	movs	r3, #1
 801391a:	e7f3      	b.n	8013904 <_dtoa_r+0x264>
 801391c:	2300      	movs	r3, #0
 801391e:	9309      	str	r3, [sp, #36]	; 0x24
 8013920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013922:	445b      	add	r3, fp
 8013924:	9301      	str	r3, [sp, #4]
 8013926:	3301      	adds	r3, #1
 8013928:	2b01      	cmp	r3, #1
 801392a:	9304      	str	r3, [sp, #16]
 801392c:	bfb8      	it	lt
 801392e:	2301      	movlt	r3, #1
 8013930:	69e0      	ldr	r0, [r4, #28]
 8013932:	2100      	movs	r1, #0
 8013934:	2204      	movs	r2, #4
 8013936:	f102 0614 	add.w	r6, r2, #20
 801393a:	429e      	cmp	r6, r3
 801393c:	d93d      	bls.n	80139ba <_dtoa_r+0x31a>
 801393e:	6041      	str	r1, [r0, #4]
 8013940:	4620      	mov	r0, r4
 8013942:	f000 fd9f 	bl	8014484 <_Balloc>
 8013946:	9000      	str	r0, [sp, #0]
 8013948:	2800      	cmp	r0, #0
 801394a:	d139      	bne.n	80139c0 <_dtoa_r+0x320>
 801394c:	4b16      	ldr	r3, [pc, #88]	; (80139a8 <_dtoa_r+0x308>)
 801394e:	4602      	mov	r2, r0
 8013950:	f240 11af 	movw	r1, #431	; 0x1af
 8013954:	e6bd      	b.n	80136d2 <_dtoa_r+0x32>
 8013956:	2301      	movs	r3, #1
 8013958:	e7e1      	b.n	801391e <_dtoa_r+0x27e>
 801395a:	2501      	movs	r5, #1
 801395c:	2300      	movs	r3, #0
 801395e:	9307      	str	r3, [sp, #28]
 8013960:	9509      	str	r5, [sp, #36]	; 0x24
 8013962:	f04f 33ff 	mov.w	r3, #4294967295
 8013966:	9301      	str	r3, [sp, #4]
 8013968:	9304      	str	r3, [sp, #16]
 801396a:	2200      	movs	r2, #0
 801396c:	2312      	movs	r3, #18
 801396e:	e7d1      	b.n	8013914 <_dtoa_r+0x274>
 8013970:	636f4361 	.word	0x636f4361
 8013974:	3fd287a7 	.word	0x3fd287a7
 8013978:	8b60c8b3 	.word	0x8b60c8b3
 801397c:	3fc68a28 	.word	0x3fc68a28
 8013980:	509f79fb 	.word	0x509f79fb
 8013984:	3fd34413 	.word	0x3fd34413
 8013988:	080170da 	.word	0x080170da
 801398c:	080170f1 	.word	0x080170f1
 8013990:	7ff00000 	.word	0x7ff00000
 8013994:	080170d6 	.word	0x080170d6
 8013998:	080170cd 	.word	0x080170cd
 801399c:	080170a5 	.word	0x080170a5
 80139a0:	3ff80000 	.word	0x3ff80000
 80139a4:	080171e0 	.word	0x080171e0
 80139a8:	08017149 	.word	0x08017149
 80139ac:	2301      	movs	r3, #1
 80139ae:	9309      	str	r3, [sp, #36]	; 0x24
 80139b0:	e7d7      	b.n	8013962 <_dtoa_r+0x2c2>
 80139b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139b4:	9301      	str	r3, [sp, #4]
 80139b6:	9304      	str	r3, [sp, #16]
 80139b8:	e7ba      	b.n	8013930 <_dtoa_r+0x290>
 80139ba:	3101      	adds	r1, #1
 80139bc:	0052      	lsls	r2, r2, #1
 80139be:	e7ba      	b.n	8013936 <_dtoa_r+0x296>
 80139c0:	69e3      	ldr	r3, [r4, #28]
 80139c2:	9a00      	ldr	r2, [sp, #0]
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	9b04      	ldr	r3, [sp, #16]
 80139c8:	2b0e      	cmp	r3, #14
 80139ca:	f200 80a8 	bhi.w	8013b1e <_dtoa_r+0x47e>
 80139ce:	2d00      	cmp	r5, #0
 80139d0:	f000 80a5 	beq.w	8013b1e <_dtoa_r+0x47e>
 80139d4:	f1bb 0f00 	cmp.w	fp, #0
 80139d8:	dd38      	ble.n	8013a4c <_dtoa_r+0x3ac>
 80139da:	4bc0      	ldr	r3, [pc, #768]	; (8013cdc <_dtoa_r+0x63c>)
 80139dc:	f00b 020f 	and.w	r2, fp, #15
 80139e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80139e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80139ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80139f0:	d019      	beq.n	8013a26 <_dtoa_r+0x386>
 80139f2:	4bbb      	ldr	r3, [pc, #748]	; (8013ce0 <_dtoa_r+0x640>)
 80139f4:	ec51 0b18 	vmov	r0, r1, d8
 80139f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80139fc:	f7ec ff26 	bl	800084c <__aeabi_ddiv>
 8013a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a04:	f008 080f 	and.w	r8, r8, #15
 8013a08:	2503      	movs	r5, #3
 8013a0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013ce0 <_dtoa_r+0x640>
 8013a0e:	f1b8 0f00 	cmp.w	r8, #0
 8013a12:	d10a      	bne.n	8013a2a <_dtoa_r+0x38a>
 8013a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a18:	4632      	mov	r2, r6
 8013a1a:	463b      	mov	r3, r7
 8013a1c:	f7ec ff16 	bl	800084c <__aeabi_ddiv>
 8013a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a24:	e02b      	b.n	8013a7e <_dtoa_r+0x3de>
 8013a26:	2502      	movs	r5, #2
 8013a28:	e7ef      	b.n	8013a0a <_dtoa_r+0x36a>
 8013a2a:	f018 0f01 	tst.w	r8, #1
 8013a2e:	d008      	beq.n	8013a42 <_dtoa_r+0x3a2>
 8013a30:	4630      	mov	r0, r6
 8013a32:	4639      	mov	r1, r7
 8013a34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013a38:	f7ec fdde 	bl	80005f8 <__aeabi_dmul>
 8013a3c:	3501      	adds	r5, #1
 8013a3e:	4606      	mov	r6, r0
 8013a40:	460f      	mov	r7, r1
 8013a42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013a46:	f109 0908 	add.w	r9, r9, #8
 8013a4a:	e7e0      	b.n	8013a0e <_dtoa_r+0x36e>
 8013a4c:	f000 809f 	beq.w	8013b8e <_dtoa_r+0x4ee>
 8013a50:	f1cb 0600 	rsb	r6, fp, #0
 8013a54:	4ba1      	ldr	r3, [pc, #644]	; (8013cdc <_dtoa_r+0x63c>)
 8013a56:	4fa2      	ldr	r7, [pc, #648]	; (8013ce0 <_dtoa_r+0x640>)
 8013a58:	f006 020f 	and.w	r2, r6, #15
 8013a5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a64:	ec51 0b18 	vmov	r0, r1, d8
 8013a68:	f7ec fdc6 	bl	80005f8 <__aeabi_dmul>
 8013a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a70:	1136      	asrs	r6, r6, #4
 8013a72:	2300      	movs	r3, #0
 8013a74:	2502      	movs	r5, #2
 8013a76:	2e00      	cmp	r6, #0
 8013a78:	d17e      	bne.n	8013b78 <_dtoa_r+0x4d8>
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1d0      	bne.n	8013a20 <_dtoa_r+0x380>
 8013a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	f000 8084 	beq.w	8013b92 <_dtoa_r+0x4f2>
 8013a8a:	4b96      	ldr	r3, [pc, #600]	; (8013ce4 <_dtoa_r+0x644>)
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	4640      	mov	r0, r8
 8013a90:	4649      	mov	r1, r9
 8013a92:	f7ed f823 	bl	8000adc <__aeabi_dcmplt>
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d07b      	beq.n	8013b92 <_dtoa_r+0x4f2>
 8013a9a:	9b04      	ldr	r3, [sp, #16]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d078      	beq.n	8013b92 <_dtoa_r+0x4f2>
 8013aa0:	9b01      	ldr	r3, [sp, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dd39      	ble.n	8013b1a <_dtoa_r+0x47a>
 8013aa6:	4b90      	ldr	r3, [pc, #576]	; (8013ce8 <_dtoa_r+0x648>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	4640      	mov	r0, r8
 8013aac:	4649      	mov	r1, r9
 8013aae:	f7ec fda3 	bl	80005f8 <__aeabi_dmul>
 8013ab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ab6:	9e01      	ldr	r6, [sp, #4]
 8013ab8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013abc:	3501      	adds	r5, #1
 8013abe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	f7ec fd2e 	bl	8000524 <__aeabi_i2d>
 8013ac8:	4642      	mov	r2, r8
 8013aca:	464b      	mov	r3, r9
 8013acc:	f7ec fd94 	bl	80005f8 <__aeabi_dmul>
 8013ad0:	4b86      	ldr	r3, [pc, #536]	; (8013cec <_dtoa_r+0x64c>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f7ec fbda 	bl	800028c <__adddf3>
 8013ad8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ae0:	9303      	str	r3, [sp, #12]
 8013ae2:	2e00      	cmp	r6, #0
 8013ae4:	d158      	bne.n	8013b98 <_dtoa_r+0x4f8>
 8013ae6:	4b82      	ldr	r3, [pc, #520]	; (8013cf0 <_dtoa_r+0x650>)
 8013ae8:	2200      	movs	r2, #0
 8013aea:	4640      	mov	r0, r8
 8013aec:	4649      	mov	r1, r9
 8013aee:	f7ec fbcb 	bl	8000288 <__aeabi_dsub>
 8013af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013af6:	4680      	mov	r8, r0
 8013af8:	4689      	mov	r9, r1
 8013afa:	f7ed f80d 	bl	8000b18 <__aeabi_dcmpgt>
 8013afe:	2800      	cmp	r0, #0
 8013b00:	f040 8296 	bne.w	8014030 <_dtoa_r+0x990>
 8013b04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013b08:	4640      	mov	r0, r8
 8013b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b0e:	4649      	mov	r1, r9
 8013b10:	f7ec ffe4 	bl	8000adc <__aeabi_dcmplt>
 8013b14:	2800      	cmp	r0, #0
 8013b16:	f040 8289 	bne.w	801402c <_dtoa_r+0x98c>
 8013b1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f2c0 814e 	blt.w	8013dc2 <_dtoa_r+0x722>
 8013b26:	f1bb 0f0e 	cmp.w	fp, #14
 8013b2a:	f300 814a 	bgt.w	8013dc2 <_dtoa_r+0x722>
 8013b2e:	4b6b      	ldr	r3, [pc, #428]	; (8013cdc <_dtoa_r+0x63c>)
 8013b30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f280 80dc 	bge.w	8013cf8 <_dtoa_r+0x658>
 8013b40:	9b04      	ldr	r3, [sp, #16]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	f300 80d8 	bgt.w	8013cf8 <_dtoa_r+0x658>
 8013b48:	f040 826f 	bne.w	801402a <_dtoa_r+0x98a>
 8013b4c:	4b68      	ldr	r3, [pc, #416]	; (8013cf0 <_dtoa_r+0x650>)
 8013b4e:	2200      	movs	r2, #0
 8013b50:	4640      	mov	r0, r8
 8013b52:	4649      	mov	r1, r9
 8013b54:	f7ec fd50 	bl	80005f8 <__aeabi_dmul>
 8013b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b5c:	f7ec ffd2 	bl	8000b04 <__aeabi_dcmpge>
 8013b60:	9e04      	ldr	r6, [sp, #16]
 8013b62:	4637      	mov	r7, r6
 8013b64:	2800      	cmp	r0, #0
 8013b66:	f040 8245 	bne.w	8013ff4 <_dtoa_r+0x954>
 8013b6a:	9d00      	ldr	r5, [sp, #0]
 8013b6c:	2331      	movs	r3, #49	; 0x31
 8013b6e:	f805 3b01 	strb.w	r3, [r5], #1
 8013b72:	f10b 0b01 	add.w	fp, fp, #1
 8013b76:	e241      	b.n	8013ffc <_dtoa_r+0x95c>
 8013b78:	07f2      	lsls	r2, r6, #31
 8013b7a:	d505      	bpl.n	8013b88 <_dtoa_r+0x4e8>
 8013b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b80:	f7ec fd3a 	bl	80005f8 <__aeabi_dmul>
 8013b84:	3501      	adds	r5, #1
 8013b86:	2301      	movs	r3, #1
 8013b88:	1076      	asrs	r6, r6, #1
 8013b8a:	3708      	adds	r7, #8
 8013b8c:	e773      	b.n	8013a76 <_dtoa_r+0x3d6>
 8013b8e:	2502      	movs	r5, #2
 8013b90:	e775      	b.n	8013a7e <_dtoa_r+0x3de>
 8013b92:	9e04      	ldr	r6, [sp, #16]
 8013b94:	465f      	mov	r7, fp
 8013b96:	e792      	b.n	8013abe <_dtoa_r+0x41e>
 8013b98:	9900      	ldr	r1, [sp, #0]
 8013b9a:	4b50      	ldr	r3, [pc, #320]	; (8013cdc <_dtoa_r+0x63c>)
 8013b9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ba0:	4431      	add	r1, r6
 8013ba2:	9102      	str	r1, [sp, #8]
 8013ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ba6:	eeb0 9a47 	vmov.f32	s18, s14
 8013baa:	eef0 9a67 	vmov.f32	s19, s15
 8013bae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013bb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013bb6:	2900      	cmp	r1, #0
 8013bb8:	d044      	beq.n	8013c44 <_dtoa_r+0x5a4>
 8013bba:	494e      	ldr	r1, [pc, #312]	; (8013cf4 <_dtoa_r+0x654>)
 8013bbc:	2000      	movs	r0, #0
 8013bbe:	f7ec fe45 	bl	800084c <__aeabi_ddiv>
 8013bc2:	ec53 2b19 	vmov	r2, r3, d9
 8013bc6:	f7ec fb5f 	bl	8000288 <__aeabi_dsub>
 8013bca:	9d00      	ldr	r5, [sp, #0]
 8013bcc:	ec41 0b19 	vmov	d9, r0, r1
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	4640      	mov	r0, r8
 8013bd4:	f7ec ffc0 	bl	8000b58 <__aeabi_d2iz>
 8013bd8:	4606      	mov	r6, r0
 8013bda:	f7ec fca3 	bl	8000524 <__aeabi_i2d>
 8013bde:	4602      	mov	r2, r0
 8013be0:	460b      	mov	r3, r1
 8013be2:	4640      	mov	r0, r8
 8013be4:	4649      	mov	r1, r9
 8013be6:	f7ec fb4f 	bl	8000288 <__aeabi_dsub>
 8013bea:	3630      	adds	r6, #48	; 0x30
 8013bec:	f805 6b01 	strb.w	r6, [r5], #1
 8013bf0:	ec53 2b19 	vmov	r2, r3, d9
 8013bf4:	4680      	mov	r8, r0
 8013bf6:	4689      	mov	r9, r1
 8013bf8:	f7ec ff70 	bl	8000adc <__aeabi_dcmplt>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d164      	bne.n	8013cca <_dtoa_r+0x62a>
 8013c00:	4642      	mov	r2, r8
 8013c02:	464b      	mov	r3, r9
 8013c04:	4937      	ldr	r1, [pc, #220]	; (8013ce4 <_dtoa_r+0x644>)
 8013c06:	2000      	movs	r0, #0
 8013c08:	f7ec fb3e 	bl	8000288 <__aeabi_dsub>
 8013c0c:	ec53 2b19 	vmov	r2, r3, d9
 8013c10:	f7ec ff64 	bl	8000adc <__aeabi_dcmplt>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	f040 80b6 	bne.w	8013d86 <_dtoa_r+0x6e6>
 8013c1a:	9b02      	ldr	r3, [sp, #8]
 8013c1c:	429d      	cmp	r5, r3
 8013c1e:	f43f af7c 	beq.w	8013b1a <_dtoa_r+0x47a>
 8013c22:	4b31      	ldr	r3, [pc, #196]	; (8013ce8 <_dtoa_r+0x648>)
 8013c24:	ec51 0b19 	vmov	r0, r1, d9
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f7ec fce5 	bl	80005f8 <__aeabi_dmul>
 8013c2e:	4b2e      	ldr	r3, [pc, #184]	; (8013ce8 <_dtoa_r+0x648>)
 8013c30:	ec41 0b19 	vmov	d9, r0, r1
 8013c34:	2200      	movs	r2, #0
 8013c36:	4640      	mov	r0, r8
 8013c38:	4649      	mov	r1, r9
 8013c3a:	f7ec fcdd 	bl	80005f8 <__aeabi_dmul>
 8013c3e:	4680      	mov	r8, r0
 8013c40:	4689      	mov	r9, r1
 8013c42:	e7c5      	b.n	8013bd0 <_dtoa_r+0x530>
 8013c44:	ec51 0b17 	vmov	r0, r1, d7
 8013c48:	f7ec fcd6 	bl	80005f8 <__aeabi_dmul>
 8013c4c:	9b02      	ldr	r3, [sp, #8]
 8013c4e:	9d00      	ldr	r5, [sp, #0]
 8013c50:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c52:	ec41 0b19 	vmov	d9, r0, r1
 8013c56:	4649      	mov	r1, r9
 8013c58:	4640      	mov	r0, r8
 8013c5a:	f7ec ff7d 	bl	8000b58 <__aeabi_d2iz>
 8013c5e:	4606      	mov	r6, r0
 8013c60:	f7ec fc60 	bl	8000524 <__aeabi_i2d>
 8013c64:	3630      	adds	r6, #48	; 0x30
 8013c66:	4602      	mov	r2, r0
 8013c68:	460b      	mov	r3, r1
 8013c6a:	4640      	mov	r0, r8
 8013c6c:	4649      	mov	r1, r9
 8013c6e:	f7ec fb0b 	bl	8000288 <__aeabi_dsub>
 8013c72:	f805 6b01 	strb.w	r6, [r5], #1
 8013c76:	9b02      	ldr	r3, [sp, #8]
 8013c78:	429d      	cmp	r5, r3
 8013c7a:	4680      	mov	r8, r0
 8013c7c:	4689      	mov	r9, r1
 8013c7e:	f04f 0200 	mov.w	r2, #0
 8013c82:	d124      	bne.n	8013cce <_dtoa_r+0x62e>
 8013c84:	4b1b      	ldr	r3, [pc, #108]	; (8013cf4 <_dtoa_r+0x654>)
 8013c86:	ec51 0b19 	vmov	r0, r1, d9
 8013c8a:	f7ec faff 	bl	800028c <__adddf3>
 8013c8e:	4602      	mov	r2, r0
 8013c90:	460b      	mov	r3, r1
 8013c92:	4640      	mov	r0, r8
 8013c94:	4649      	mov	r1, r9
 8013c96:	f7ec ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	d173      	bne.n	8013d86 <_dtoa_r+0x6e6>
 8013c9e:	ec53 2b19 	vmov	r2, r3, d9
 8013ca2:	4914      	ldr	r1, [pc, #80]	; (8013cf4 <_dtoa_r+0x654>)
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	f7ec faef 	bl	8000288 <__aeabi_dsub>
 8013caa:	4602      	mov	r2, r0
 8013cac:	460b      	mov	r3, r1
 8013cae:	4640      	mov	r0, r8
 8013cb0:	4649      	mov	r1, r9
 8013cb2:	f7ec ff13 	bl	8000adc <__aeabi_dcmplt>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	f43f af2f 	beq.w	8013b1a <_dtoa_r+0x47a>
 8013cbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013cbe:	1e6b      	subs	r3, r5, #1
 8013cc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013cc6:	2b30      	cmp	r3, #48	; 0x30
 8013cc8:	d0f8      	beq.n	8013cbc <_dtoa_r+0x61c>
 8013cca:	46bb      	mov	fp, r7
 8013ccc:	e04a      	b.n	8013d64 <_dtoa_r+0x6c4>
 8013cce:	4b06      	ldr	r3, [pc, #24]	; (8013ce8 <_dtoa_r+0x648>)
 8013cd0:	f7ec fc92 	bl	80005f8 <__aeabi_dmul>
 8013cd4:	4680      	mov	r8, r0
 8013cd6:	4689      	mov	r9, r1
 8013cd8:	e7bd      	b.n	8013c56 <_dtoa_r+0x5b6>
 8013cda:	bf00      	nop
 8013cdc:	080171e0 	.word	0x080171e0
 8013ce0:	080171b8 	.word	0x080171b8
 8013ce4:	3ff00000 	.word	0x3ff00000
 8013ce8:	40240000 	.word	0x40240000
 8013cec:	401c0000 	.word	0x401c0000
 8013cf0:	40140000 	.word	0x40140000
 8013cf4:	3fe00000 	.word	0x3fe00000
 8013cf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013cfc:	9d00      	ldr	r5, [sp, #0]
 8013cfe:	4642      	mov	r2, r8
 8013d00:	464b      	mov	r3, r9
 8013d02:	4630      	mov	r0, r6
 8013d04:	4639      	mov	r1, r7
 8013d06:	f7ec fda1 	bl	800084c <__aeabi_ddiv>
 8013d0a:	f7ec ff25 	bl	8000b58 <__aeabi_d2iz>
 8013d0e:	9001      	str	r0, [sp, #4]
 8013d10:	f7ec fc08 	bl	8000524 <__aeabi_i2d>
 8013d14:	4642      	mov	r2, r8
 8013d16:	464b      	mov	r3, r9
 8013d18:	f7ec fc6e 	bl	80005f8 <__aeabi_dmul>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	460b      	mov	r3, r1
 8013d20:	4630      	mov	r0, r6
 8013d22:	4639      	mov	r1, r7
 8013d24:	f7ec fab0 	bl	8000288 <__aeabi_dsub>
 8013d28:	9e01      	ldr	r6, [sp, #4]
 8013d2a:	9f04      	ldr	r7, [sp, #16]
 8013d2c:	3630      	adds	r6, #48	; 0x30
 8013d2e:	f805 6b01 	strb.w	r6, [r5], #1
 8013d32:	9e00      	ldr	r6, [sp, #0]
 8013d34:	1bae      	subs	r6, r5, r6
 8013d36:	42b7      	cmp	r7, r6
 8013d38:	4602      	mov	r2, r0
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	d134      	bne.n	8013da8 <_dtoa_r+0x708>
 8013d3e:	f7ec faa5 	bl	800028c <__adddf3>
 8013d42:	4642      	mov	r2, r8
 8013d44:	464b      	mov	r3, r9
 8013d46:	4606      	mov	r6, r0
 8013d48:	460f      	mov	r7, r1
 8013d4a:	f7ec fee5 	bl	8000b18 <__aeabi_dcmpgt>
 8013d4e:	b9c8      	cbnz	r0, 8013d84 <_dtoa_r+0x6e4>
 8013d50:	4642      	mov	r2, r8
 8013d52:	464b      	mov	r3, r9
 8013d54:	4630      	mov	r0, r6
 8013d56:	4639      	mov	r1, r7
 8013d58:	f7ec feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d5c:	b110      	cbz	r0, 8013d64 <_dtoa_r+0x6c4>
 8013d5e:	9b01      	ldr	r3, [sp, #4]
 8013d60:	07db      	lsls	r3, r3, #31
 8013d62:	d40f      	bmi.n	8013d84 <_dtoa_r+0x6e4>
 8013d64:	4651      	mov	r1, sl
 8013d66:	4620      	mov	r0, r4
 8013d68:	f000 fbcc 	bl	8014504 <_Bfree>
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d70:	702b      	strb	r3, [r5, #0]
 8013d72:	f10b 0301 	add.w	r3, fp, #1
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	f43f ace2 	beq.w	8013744 <_dtoa_r+0xa4>
 8013d80:	601d      	str	r5, [r3, #0]
 8013d82:	e4df      	b.n	8013744 <_dtoa_r+0xa4>
 8013d84:	465f      	mov	r7, fp
 8013d86:	462b      	mov	r3, r5
 8013d88:	461d      	mov	r5, r3
 8013d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d8e:	2a39      	cmp	r2, #57	; 0x39
 8013d90:	d106      	bne.n	8013da0 <_dtoa_r+0x700>
 8013d92:	9a00      	ldr	r2, [sp, #0]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d1f7      	bne.n	8013d88 <_dtoa_r+0x6e8>
 8013d98:	9900      	ldr	r1, [sp, #0]
 8013d9a:	2230      	movs	r2, #48	; 0x30
 8013d9c:	3701      	adds	r7, #1
 8013d9e:	700a      	strb	r2, [r1, #0]
 8013da0:	781a      	ldrb	r2, [r3, #0]
 8013da2:	3201      	adds	r2, #1
 8013da4:	701a      	strb	r2, [r3, #0]
 8013da6:	e790      	b.n	8013cca <_dtoa_r+0x62a>
 8013da8:	4ba3      	ldr	r3, [pc, #652]	; (8014038 <_dtoa_r+0x998>)
 8013daa:	2200      	movs	r2, #0
 8013dac:	f7ec fc24 	bl	80005f8 <__aeabi_dmul>
 8013db0:	2200      	movs	r2, #0
 8013db2:	2300      	movs	r3, #0
 8013db4:	4606      	mov	r6, r0
 8013db6:	460f      	mov	r7, r1
 8013db8:	f7ec fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	d09e      	beq.n	8013cfe <_dtoa_r+0x65e>
 8013dc0:	e7d0      	b.n	8013d64 <_dtoa_r+0x6c4>
 8013dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dc4:	2a00      	cmp	r2, #0
 8013dc6:	f000 80ca 	beq.w	8013f5e <_dtoa_r+0x8be>
 8013dca:	9a07      	ldr	r2, [sp, #28]
 8013dcc:	2a01      	cmp	r2, #1
 8013dce:	f300 80ad 	bgt.w	8013f2c <_dtoa_r+0x88c>
 8013dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dd4:	2a00      	cmp	r2, #0
 8013dd6:	f000 80a5 	beq.w	8013f24 <_dtoa_r+0x884>
 8013dda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013dde:	9e08      	ldr	r6, [sp, #32]
 8013de0:	9d05      	ldr	r5, [sp, #20]
 8013de2:	9a05      	ldr	r2, [sp, #20]
 8013de4:	441a      	add	r2, r3
 8013de6:	9205      	str	r2, [sp, #20]
 8013de8:	9a06      	ldr	r2, [sp, #24]
 8013dea:	2101      	movs	r1, #1
 8013dec:	441a      	add	r2, r3
 8013dee:	4620      	mov	r0, r4
 8013df0:	9206      	str	r2, [sp, #24]
 8013df2:	f000 fc87 	bl	8014704 <__i2b>
 8013df6:	4607      	mov	r7, r0
 8013df8:	b165      	cbz	r5, 8013e14 <_dtoa_r+0x774>
 8013dfa:	9b06      	ldr	r3, [sp, #24]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	dd09      	ble.n	8013e14 <_dtoa_r+0x774>
 8013e00:	42ab      	cmp	r3, r5
 8013e02:	9a05      	ldr	r2, [sp, #20]
 8013e04:	bfa8      	it	ge
 8013e06:	462b      	movge	r3, r5
 8013e08:	1ad2      	subs	r2, r2, r3
 8013e0a:	9205      	str	r2, [sp, #20]
 8013e0c:	9a06      	ldr	r2, [sp, #24]
 8013e0e:	1aed      	subs	r5, r5, r3
 8013e10:	1ad3      	subs	r3, r2, r3
 8013e12:	9306      	str	r3, [sp, #24]
 8013e14:	9b08      	ldr	r3, [sp, #32]
 8013e16:	b1f3      	cbz	r3, 8013e56 <_dtoa_r+0x7b6>
 8013e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 80a3 	beq.w	8013f66 <_dtoa_r+0x8c6>
 8013e20:	2e00      	cmp	r6, #0
 8013e22:	dd10      	ble.n	8013e46 <_dtoa_r+0x7a6>
 8013e24:	4639      	mov	r1, r7
 8013e26:	4632      	mov	r2, r6
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f000 fd2b 	bl	8014884 <__pow5mult>
 8013e2e:	4652      	mov	r2, sl
 8013e30:	4601      	mov	r1, r0
 8013e32:	4607      	mov	r7, r0
 8013e34:	4620      	mov	r0, r4
 8013e36:	f000 fc7b 	bl	8014730 <__multiply>
 8013e3a:	4651      	mov	r1, sl
 8013e3c:	4680      	mov	r8, r0
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f000 fb60 	bl	8014504 <_Bfree>
 8013e44:	46c2      	mov	sl, r8
 8013e46:	9b08      	ldr	r3, [sp, #32]
 8013e48:	1b9a      	subs	r2, r3, r6
 8013e4a:	d004      	beq.n	8013e56 <_dtoa_r+0x7b6>
 8013e4c:	4651      	mov	r1, sl
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f000 fd18 	bl	8014884 <__pow5mult>
 8013e54:	4682      	mov	sl, r0
 8013e56:	2101      	movs	r1, #1
 8013e58:	4620      	mov	r0, r4
 8013e5a:	f000 fc53 	bl	8014704 <__i2b>
 8013e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	4606      	mov	r6, r0
 8013e64:	f340 8081 	ble.w	8013f6a <_dtoa_r+0x8ca>
 8013e68:	461a      	mov	r2, r3
 8013e6a:	4601      	mov	r1, r0
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	f000 fd09 	bl	8014884 <__pow5mult>
 8013e72:	9b07      	ldr	r3, [sp, #28]
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	4606      	mov	r6, r0
 8013e78:	dd7a      	ble.n	8013f70 <_dtoa_r+0x8d0>
 8013e7a:	f04f 0800 	mov.w	r8, #0
 8013e7e:	6933      	ldr	r3, [r6, #16]
 8013e80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013e84:	6918      	ldr	r0, [r3, #16]
 8013e86:	f000 fbef 	bl	8014668 <__hi0bits>
 8013e8a:	f1c0 0020 	rsb	r0, r0, #32
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	4418      	add	r0, r3
 8013e92:	f010 001f 	ands.w	r0, r0, #31
 8013e96:	f000 8094 	beq.w	8013fc2 <_dtoa_r+0x922>
 8013e9a:	f1c0 0320 	rsb	r3, r0, #32
 8013e9e:	2b04      	cmp	r3, #4
 8013ea0:	f340 8085 	ble.w	8013fae <_dtoa_r+0x90e>
 8013ea4:	9b05      	ldr	r3, [sp, #20]
 8013ea6:	f1c0 001c 	rsb	r0, r0, #28
 8013eaa:	4403      	add	r3, r0
 8013eac:	9305      	str	r3, [sp, #20]
 8013eae:	9b06      	ldr	r3, [sp, #24]
 8013eb0:	4403      	add	r3, r0
 8013eb2:	4405      	add	r5, r0
 8013eb4:	9306      	str	r3, [sp, #24]
 8013eb6:	9b05      	ldr	r3, [sp, #20]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	dd05      	ble.n	8013ec8 <_dtoa_r+0x828>
 8013ebc:	4651      	mov	r1, sl
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f000 fd39 	bl	8014938 <__lshift>
 8013ec6:	4682      	mov	sl, r0
 8013ec8:	9b06      	ldr	r3, [sp, #24]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	dd05      	ble.n	8013eda <_dtoa_r+0x83a>
 8013ece:	4631      	mov	r1, r6
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f000 fd30 	bl	8014938 <__lshift>
 8013ed8:	4606      	mov	r6, r0
 8013eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d072      	beq.n	8013fc6 <_dtoa_r+0x926>
 8013ee0:	4631      	mov	r1, r6
 8013ee2:	4650      	mov	r0, sl
 8013ee4:	f000 fd94 	bl	8014a10 <__mcmp>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	da6c      	bge.n	8013fc6 <_dtoa_r+0x926>
 8013eec:	2300      	movs	r3, #0
 8013eee:	4651      	mov	r1, sl
 8013ef0:	220a      	movs	r2, #10
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f000 fb28 	bl	8014548 <__multadd>
 8013ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013efe:	4682      	mov	sl, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	f000 81b0 	beq.w	8014266 <_dtoa_r+0xbc6>
 8013f06:	2300      	movs	r3, #0
 8013f08:	4639      	mov	r1, r7
 8013f0a:	220a      	movs	r2, #10
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	f000 fb1b 	bl	8014548 <__multadd>
 8013f12:	9b01      	ldr	r3, [sp, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	4607      	mov	r7, r0
 8013f18:	f300 8096 	bgt.w	8014048 <_dtoa_r+0x9a8>
 8013f1c:	9b07      	ldr	r3, [sp, #28]
 8013f1e:	2b02      	cmp	r3, #2
 8013f20:	dc59      	bgt.n	8013fd6 <_dtoa_r+0x936>
 8013f22:	e091      	b.n	8014048 <_dtoa_r+0x9a8>
 8013f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013f2a:	e758      	b.n	8013dde <_dtoa_r+0x73e>
 8013f2c:	9b04      	ldr	r3, [sp, #16]
 8013f2e:	1e5e      	subs	r6, r3, #1
 8013f30:	9b08      	ldr	r3, [sp, #32]
 8013f32:	42b3      	cmp	r3, r6
 8013f34:	bfbf      	itttt	lt
 8013f36:	9b08      	ldrlt	r3, [sp, #32]
 8013f38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013f3a:	9608      	strlt	r6, [sp, #32]
 8013f3c:	1af3      	sublt	r3, r6, r3
 8013f3e:	bfb4      	ite	lt
 8013f40:	18d2      	addlt	r2, r2, r3
 8013f42:	1b9e      	subge	r6, r3, r6
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	bfbc      	itt	lt
 8013f48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013f4a:	2600      	movlt	r6, #0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	bfb7      	itett	lt
 8013f50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013f54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013f58:	1a9d      	sublt	r5, r3, r2
 8013f5a:	2300      	movlt	r3, #0
 8013f5c:	e741      	b.n	8013de2 <_dtoa_r+0x742>
 8013f5e:	9e08      	ldr	r6, [sp, #32]
 8013f60:	9d05      	ldr	r5, [sp, #20]
 8013f62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013f64:	e748      	b.n	8013df8 <_dtoa_r+0x758>
 8013f66:	9a08      	ldr	r2, [sp, #32]
 8013f68:	e770      	b.n	8013e4c <_dtoa_r+0x7ac>
 8013f6a:	9b07      	ldr	r3, [sp, #28]
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	dc19      	bgt.n	8013fa4 <_dtoa_r+0x904>
 8013f70:	9b02      	ldr	r3, [sp, #8]
 8013f72:	b9bb      	cbnz	r3, 8013fa4 <_dtoa_r+0x904>
 8013f74:	9b03      	ldr	r3, [sp, #12]
 8013f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f7a:	b99b      	cbnz	r3, 8013fa4 <_dtoa_r+0x904>
 8013f7c:	9b03      	ldr	r3, [sp, #12]
 8013f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f82:	0d1b      	lsrs	r3, r3, #20
 8013f84:	051b      	lsls	r3, r3, #20
 8013f86:	b183      	cbz	r3, 8013faa <_dtoa_r+0x90a>
 8013f88:	9b05      	ldr	r3, [sp, #20]
 8013f8a:	3301      	adds	r3, #1
 8013f8c:	9305      	str	r3, [sp, #20]
 8013f8e:	9b06      	ldr	r3, [sp, #24]
 8013f90:	3301      	adds	r3, #1
 8013f92:	9306      	str	r3, [sp, #24]
 8013f94:	f04f 0801 	mov.w	r8, #1
 8013f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f47f af6f 	bne.w	8013e7e <_dtoa_r+0x7de>
 8013fa0:	2001      	movs	r0, #1
 8013fa2:	e774      	b.n	8013e8e <_dtoa_r+0x7ee>
 8013fa4:	f04f 0800 	mov.w	r8, #0
 8013fa8:	e7f6      	b.n	8013f98 <_dtoa_r+0x8f8>
 8013faa:	4698      	mov	r8, r3
 8013fac:	e7f4      	b.n	8013f98 <_dtoa_r+0x8f8>
 8013fae:	d082      	beq.n	8013eb6 <_dtoa_r+0x816>
 8013fb0:	9a05      	ldr	r2, [sp, #20]
 8013fb2:	331c      	adds	r3, #28
 8013fb4:	441a      	add	r2, r3
 8013fb6:	9205      	str	r2, [sp, #20]
 8013fb8:	9a06      	ldr	r2, [sp, #24]
 8013fba:	441a      	add	r2, r3
 8013fbc:	441d      	add	r5, r3
 8013fbe:	9206      	str	r2, [sp, #24]
 8013fc0:	e779      	b.n	8013eb6 <_dtoa_r+0x816>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	e7f4      	b.n	8013fb0 <_dtoa_r+0x910>
 8013fc6:	9b04      	ldr	r3, [sp, #16]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	dc37      	bgt.n	801403c <_dtoa_r+0x99c>
 8013fcc:	9b07      	ldr	r3, [sp, #28]
 8013fce:	2b02      	cmp	r3, #2
 8013fd0:	dd34      	ble.n	801403c <_dtoa_r+0x99c>
 8013fd2:	9b04      	ldr	r3, [sp, #16]
 8013fd4:	9301      	str	r3, [sp, #4]
 8013fd6:	9b01      	ldr	r3, [sp, #4]
 8013fd8:	b963      	cbnz	r3, 8013ff4 <_dtoa_r+0x954>
 8013fda:	4631      	mov	r1, r6
 8013fdc:	2205      	movs	r2, #5
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f000 fab2 	bl	8014548 <__multadd>
 8013fe4:	4601      	mov	r1, r0
 8013fe6:	4606      	mov	r6, r0
 8013fe8:	4650      	mov	r0, sl
 8013fea:	f000 fd11 	bl	8014a10 <__mcmp>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	f73f adbb 	bgt.w	8013b6a <_dtoa_r+0x4ca>
 8013ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff6:	9d00      	ldr	r5, [sp, #0]
 8013ff8:	ea6f 0b03 	mvn.w	fp, r3
 8013ffc:	f04f 0800 	mov.w	r8, #0
 8014000:	4631      	mov	r1, r6
 8014002:	4620      	mov	r0, r4
 8014004:	f000 fa7e 	bl	8014504 <_Bfree>
 8014008:	2f00      	cmp	r7, #0
 801400a:	f43f aeab 	beq.w	8013d64 <_dtoa_r+0x6c4>
 801400e:	f1b8 0f00 	cmp.w	r8, #0
 8014012:	d005      	beq.n	8014020 <_dtoa_r+0x980>
 8014014:	45b8      	cmp	r8, r7
 8014016:	d003      	beq.n	8014020 <_dtoa_r+0x980>
 8014018:	4641      	mov	r1, r8
 801401a:	4620      	mov	r0, r4
 801401c:	f000 fa72 	bl	8014504 <_Bfree>
 8014020:	4639      	mov	r1, r7
 8014022:	4620      	mov	r0, r4
 8014024:	f000 fa6e 	bl	8014504 <_Bfree>
 8014028:	e69c      	b.n	8013d64 <_dtoa_r+0x6c4>
 801402a:	2600      	movs	r6, #0
 801402c:	4637      	mov	r7, r6
 801402e:	e7e1      	b.n	8013ff4 <_dtoa_r+0x954>
 8014030:	46bb      	mov	fp, r7
 8014032:	4637      	mov	r7, r6
 8014034:	e599      	b.n	8013b6a <_dtoa_r+0x4ca>
 8014036:	bf00      	nop
 8014038:	40240000 	.word	0x40240000
 801403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801403e:	2b00      	cmp	r3, #0
 8014040:	f000 80c8 	beq.w	80141d4 <_dtoa_r+0xb34>
 8014044:	9b04      	ldr	r3, [sp, #16]
 8014046:	9301      	str	r3, [sp, #4]
 8014048:	2d00      	cmp	r5, #0
 801404a:	dd05      	ble.n	8014058 <_dtoa_r+0x9b8>
 801404c:	4639      	mov	r1, r7
 801404e:	462a      	mov	r2, r5
 8014050:	4620      	mov	r0, r4
 8014052:	f000 fc71 	bl	8014938 <__lshift>
 8014056:	4607      	mov	r7, r0
 8014058:	f1b8 0f00 	cmp.w	r8, #0
 801405c:	d05b      	beq.n	8014116 <_dtoa_r+0xa76>
 801405e:	6879      	ldr	r1, [r7, #4]
 8014060:	4620      	mov	r0, r4
 8014062:	f000 fa0f 	bl	8014484 <_Balloc>
 8014066:	4605      	mov	r5, r0
 8014068:	b928      	cbnz	r0, 8014076 <_dtoa_r+0x9d6>
 801406a:	4b83      	ldr	r3, [pc, #524]	; (8014278 <_dtoa_r+0xbd8>)
 801406c:	4602      	mov	r2, r0
 801406e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014072:	f7ff bb2e 	b.w	80136d2 <_dtoa_r+0x32>
 8014076:	693a      	ldr	r2, [r7, #16]
 8014078:	3202      	adds	r2, #2
 801407a:	0092      	lsls	r2, r2, #2
 801407c:	f107 010c 	add.w	r1, r7, #12
 8014080:	300c      	adds	r0, #12
 8014082:	f7ff fa71 	bl	8013568 <memcpy>
 8014086:	2201      	movs	r2, #1
 8014088:	4629      	mov	r1, r5
 801408a:	4620      	mov	r0, r4
 801408c:	f000 fc54 	bl	8014938 <__lshift>
 8014090:	9b00      	ldr	r3, [sp, #0]
 8014092:	3301      	adds	r3, #1
 8014094:	9304      	str	r3, [sp, #16]
 8014096:	e9dd 2300 	ldrd	r2, r3, [sp]
 801409a:	4413      	add	r3, r2
 801409c:	9308      	str	r3, [sp, #32]
 801409e:	9b02      	ldr	r3, [sp, #8]
 80140a0:	f003 0301 	and.w	r3, r3, #1
 80140a4:	46b8      	mov	r8, r7
 80140a6:	9306      	str	r3, [sp, #24]
 80140a8:	4607      	mov	r7, r0
 80140aa:	9b04      	ldr	r3, [sp, #16]
 80140ac:	4631      	mov	r1, r6
 80140ae:	3b01      	subs	r3, #1
 80140b0:	4650      	mov	r0, sl
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	f7ff fa6c 	bl	8013590 <quorem>
 80140b8:	4641      	mov	r1, r8
 80140ba:	9002      	str	r0, [sp, #8]
 80140bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80140c0:	4650      	mov	r0, sl
 80140c2:	f000 fca5 	bl	8014a10 <__mcmp>
 80140c6:	463a      	mov	r2, r7
 80140c8:	9005      	str	r0, [sp, #20]
 80140ca:	4631      	mov	r1, r6
 80140cc:	4620      	mov	r0, r4
 80140ce:	f000 fcbb 	bl	8014a48 <__mdiff>
 80140d2:	68c2      	ldr	r2, [r0, #12]
 80140d4:	4605      	mov	r5, r0
 80140d6:	bb02      	cbnz	r2, 801411a <_dtoa_r+0xa7a>
 80140d8:	4601      	mov	r1, r0
 80140da:	4650      	mov	r0, sl
 80140dc:	f000 fc98 	bl	8014a10 <__mcmp>
 80140e0:	4602      	mov	r2, r0
 80140e2:	4629      	mov	r1, r5
 80140e4:	4620      	mov	r0, r4
 80140e6:	9209      	str	r2, [sp, #36]	; 0x24
 80140e8:	f000 fa0c 	bl	8014504 <_Bfree>
 80140ec:	9b07      	ldr	r3, [sp, #28]
 80140ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140f0:	9d04      	ldr	r5, [sp, #16]
 80140f2:	ea43 0102 	orr.w	r1, r3, r2
 80140f6:	9b06      	ldr	r3, [sp, #24]
 80140f8:	4319      	orrs	r1, r3
 80140fa:	d110      	bne.n	801411e <_dtoa_r+0xa7e>
 80140fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014100:	d029      	beq.n	8014156 <_dtoa_r+0xab6>
 8014102:	9b05      	ldr	r3, [sp, #20]
 8014104:	2b00      	cmp	r3, #0
 8014106:	dd02      	ble.n	801410e <_dtoa_r+0xa6e>
 8014108:	9b02      	ldr	r3, [sp, #8]
 801410a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801410e:	9b01      	ldr	r3, [sp, #4]
 8014110:	f883 9000 	strb.w	r9, [r3]
 8014114:	e774      	b.n	8014000 <_dtoa_r+0x960>
 8014116:	4638      	mov	r0, r7
 8014118:	e7ba      	b.n	8014090 <_dtoa_r+0x9f0>
 801411a:	2201      	movs	r2, #1
 801411c:	e7e1      	b.n	80140e2 <_dtoa_r+0xa42>
 801411e:	9b05      	ldr	r3, [sp, #20]
 8014120:	2b00      	cmp	r3, #0
 8014122:	db04      	blt.n	801412e <_dtoa_r+0xa8e>
 8014124:	9907      	ldr	r1, [sp, #28]
 8014126:	430b      	orrs	r3, r1
 8014128:	9906      	ldr	r1, [sp, #24]
 801412a:	430b      	orrs	r3, r1
 801412c:	d120      	bne.n	8014170 <_dtoa_r+0xad0>
 801412e:	2a00      	cmp	r2, #0
 8014130:	dded      	ble.n	801410e <_dtoa_r+0xa6e>
 8014132:	4651      	mov	r1, sl
 8014134:	2201      	movs	r2, #1
 8014136:	4620      	mov	r0, r4
 8014138:	f000 fbfe 	bl	8014938 <__lshift>
 801413c:	4631      	mov	r1, r6
 801413e:	4682      	mov	sl, r0
 8014140:	f000 fc66 	bl	8014a10 <__mcmp>
 8014144:	2800      	cmp	r0, #0
 8014146:	dc03      	bgt.n	8014150 <_dtoa_r+0xab0>
 8014148:	d1e1      	bne.n	801410e <_dtoa_r+0xa6e>
 801414a:	f019 0f01 	tst.w	r9, #1
 801414e:	d0de      	beq.n	801410e <_dtoa_r+0xa6e>
 8014150:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014154:	d1d8      	bne.n	8014108 <_dtoa_r+0xa68>
 8014156:	9a01      	ldr	r2, [sp, #4]
 8014158:	2339      	movs	r3, #57	; 0x39
 801415a:	7013      	strb	r3, [r2, #0]
 801415c:	462b      	mov	r3, r5
 801415e:	461d      	mov	r5, r3
 8014160:	3b01      	subs	r3, #1
 8014162:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014166:	2a39      	cmp	r2, #57	; 0x39
 8014168:	d06c      	beq.n	8014244 <_dtoa_r+0xba4>
 801416a:	3201      	adds	r2, #1
 801416c:	701a      	strb	r2, [r3, #0]
 801416e:	e747      	b.n	8014000 <_dtoa_r+0x960>
 8014170:	2a00      	cmp	r2, #0
 8014172:	dd07      	ble.n	8014184 <_dtoa_r+0xae4>
 8014174:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014178:	d0ed      	beq.n	8014156 <_dtoa_r+0xab6>
 801417a:	9a01      	ldr	r2, [sp, #4]
 801417c:	f109 0301 	add.w	r3, r9, #1
 8014180:	7013      	strb	r3, [r2, #0]
 8014182:	e73d      	b.n	8014000 <_dtoa_r+0x960>
 8014184:	9b04      	ldr	r3, [sp, #16]
 8014186:	9a08      	ldr	r2, [sp, #32]
 8014188:	f803 9c01 	strb.w	r9, [r3, #-1]
 801418c:	4293      	cmp	r3, r2
 801418e:	d043      	beq.n	8014218 <_dtoa_r+0xb78>
 8014190:	4651      	mov	r1, sl
 8014192:	2300      	movs	r3, #0
 8014194:	220a      	movs	r2, #10
 8014196:	4620      	mov	r0, r4
 8014198:	f000 f9d6 	bl	8014548 <__multadd>
 801419c:	45b8      	cmp	r8, r7
 801419e:	4682      	mov	sl, r0
 80141a0:	f04f 0300 	mov.w	r3, #0
 80141a4:	f04f 020a 	mov.w	r2, #10
 80141a8:	4641      	mov	r1, r8
 80141aa:	4620      	mov	r0, r4
 80141ac:	d107      	bne.n	80141be <_dtoa_r+0xb1e>
 80141ae:	f000 f9cb 	bl	8014548 <__multadd>
 80141b2:	4680      	mov	r8, r0
 80141b4:	4607      	mov	r7, r0
 80141b6:	9b04      	ldr	r3, [sp, #16]
 80141b8:	3301      	adds	r3, #1
 80141ba:	9304      	str	r3, [sp, #16]
 80141bc:	e775      	b.n	80140aa <_dtoa_r+0xa0a>
 80141be:	f000 f9c3 	bl	8014548 <__multadd>
 80141c2:	4639      	mov	r1, r7
 80141c4:	4680      	mov	r8, r0
 80141c6:	2300      	movs	r3, #0
 80141c8:	220a      	movs	r2, #10
 80141ca:	4620      	mov	r0, r4
 80141cc:	f000 f9bc 	bl	8014548 <__multadd>
 80141d0:	4607      	mov	r7, r0
 80141d2:	e7f0      	b.n	80141b6 <_dtoa_r+0xb16>
 80141d4:	9b04      	ldr	r3, [sp, #16]
 80141d6:	9301      	str	r3, [sp, #4]
 80141d8:	9d00      	ldr	r5, [sp, #0]
 80141da:	4631      	mov	r1, r6
 80141dc:	4650      	mov	r0, sl
 80141de:	f7ff f9d7 	bl	8013590 <quorem>
 80141e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80141e6:	9b00      	ldr	r3, [sp, #0]
 80141e8:	f805 9b01 	strb.w	r9, [r5], #1
 80141ec:	1aea      	subs	r2, r5, r3
 80141ee:	9b01      	ldr	r3, [sp, #4]
 80141f0:	4293      	cmp	r3, r2
 80141f2:	dd07      	ble.n	8014204 <_dtoa_r+0xb64>
 80141f4:	4651      	mov	r1, sl
 80141f6:	2300      	movs	r3, #0
 80141f8:	220a      	movs	r2, #10
 80141fa:	4620      	mov	r0, r4
 80141fc:	f000 f9a4 	bl	8014548 <__multadd>
 8014200:	4682      	mov	sl, r0
 8014202:	e7ea      	b.n	80141da <_dtoa_r+0xb3a>
 8014204:	9b01      	ldr	r3, [sp, #4]
 8014206:	2b00      	cmp	r3, #0
 8014208:	bfc8      	it	gt
 801420a:	461d      	movgt	r5, r3
 801420c:	9b00      	ldr	r3, [sp, #0]
 801420e:	bfd8      	it	le
 8014210:	2501      	movle	r5, #1
 8014212:	441d      	add	r5, r3
 8014214:	f04f 0800 	mov.w	r8, #0
 8014218:	4651      	mov	r1, sl
 801421a:	2201      	movs	r2, #1
 801421c:	4620      	mov	r0, r4
 801421e:	f000 fb8b 	bl	8014938 <__lshift>
 8014222:	4631      	mov	r1, r6
 8014224:	4682      	mov	sl, r0
 8014226:	f000 fbf3 	bl	8014a10 <__mcmp>
 801422a:	2800      	cmp	r0, #0
 801422c:	dc96      	bgt.n	801415c <_dtoa_r+0xabc>
 801422e:	d102      	bne.n	8014236 <_dtoa_r+0xb96>
 8014230:	f019 0f01 	tst.w	r9, #1
 8014234:	d192      	bne.n	801415c <_dtoa_r+0xabc>
 8014236:	462b      	mov	r3, r5
 8014238:	461d      	mov	r5, r3
 801423a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801423e:	2a30      	cmp	r2, #48	; 0x30
 8014240:	d0fa      	beq.n	8014238 <_dtoa_r+0xb98>
 8014242:	e6dd      	b.n	8014000 <_dtoa_r+0x960>
 8014244:	9a00      	ldr	r2, [sp, #0]
 8014246:	429a      	cmp	r2, r3
 8014248:	d189      	bne.n	801415e <_dtoa_r+0xabe>
 801424a:	f10b 0b01 	add.w	fp, fp, #1
 801424e:	2331      	movs	r3, #49	; 0x31
 8014250:	e796      	b.n	8014180 <_dtoa_r+0xae0>
 8014252:	4b0a      	ldr	r3, [pc, #40]	; (801427c <_dtoa_r+0xbdc>)
 8014254:	f7ff ba99 	b.w	801378a <_dtoa_r+0xea>
 8014258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801425a:	2b00      	cmp	r3, #0
 801425c:	f47f aa6d 	bne.w	801373a <_dtoa_r+0x9a>
 8014260:	4b07      	ldr	r3, [pc, #28]	; (8014280 <_dtoa_r+0xbe0>)
 8014262:	f7ff ba92 	b.w	801378a <_dtoa_r+0xea>
 8014266:	9b01      	ldr	r3, [sp, #4]
 8014268:	2b00      	cmp	r3, #0
 801426a:	dcb5      	bgt.n	80141d8 <_dtoa_r+0xb38>
 801426c:	9b07      	ldr	r3, [sp, #28]
 801426e:	2b02      	cmp	r3, #2
 8014270:	f73f aeb1 	bgt.w	8013fd6 <_dtoa_r+0x936>
 8014274:	e7b0      	b.n	80141d8 <_dtoa_r+0xb38>
 8014276:	bf00      	nop
 8014278:	08017149 	.word	0x08017149
 801427c:	080170a4 	.word	0x080170a4
 8014280:	080170cd 	.word	0x080170cd

08014284 <_free_r>:
 8014284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014286:	2900      	cmp	r1, #0
 8014288:	d044      	beq.n	8014314 <_free_r+0x90>
 801428a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801428e:	9001      	str	r0, [sp, #4]
 8014290:	2b00      	cmp	r3, #0
 8014292:	f1a1 0404 	sub.w	r4, r1, #4
 8014296:	bfb8      	it	lt
 8014298:	18e4      	addlt	r4, r4, r3
 801429a:	f000 f8e7 	bl	801446c <__malloc_lock>
 801429e:	4a1e      	ldr	r2, [pc, #120]	; (8014318 <_free_r+0x94>)
 80142a0:	9801      	ldr	r0, [sp, #4]
 80142a2:	6813      	ldr	r3, [r2, #0]
 80142a4:	b933      	cbnz	r3, 80142b4 <_free_r+0x30>
 80142a6:	6063      	str	r3, [r4, #4]
 80142a8:	6014      	str	r4, [r2, #0]
 80142aa:	b003      	add	sp, #12
 80142ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142b0:	f000 b8e2 	b.w	8014478 <__malloc_unlock>
 80142b4:	42a3      	cmp	r3, r4
 80142b6:	d908      	bls.n	80142ca <_free_r+0x46>
 80142b8:	6825      	ldr	r5, [r4, #0]
 80142ba:	1961      	adds	r1, r4, r5
 80142bc:	428b      	cmp	r3, r1
 80142be:	bf01      	itttt	eq
 80142c0:	6819      	ldreq	r1, [r3, #0]
 80142c2:	685b      	ldreq	r3, [r3, #4]
 80142c4:	1949      	addeq	r1, r1, r5
 80142c6:	6021      	streq	r1, [r4, #0]
 80142c8:	e7ed      	b.n	80142a6 <_free_r+0x22>
 80142ca:	461a      	mov	r2, r3
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	b10b      	cbz	r3, 80142d4 <_free_r+0x50>
 80142d0:	42a3      	cmp	r3, r4
 80142d2:	d9fa      	bls.n	80142ca <_free_r+0x46>
 80142d4:	6811      	ldr	r1, [r2, #0]
 80142d6:	1855      	adds	r5, r2, r1
 80142d8:	42a5      	cmp	r5, r4
 80142da:	d10b      	bne.n	80142f4 <_free_r+0x70>
 80142dc:	6824      	ldr	r4, [r4, #0]
 80142de:	4421      	add	r1, r4
 80142e0:	1854      	adds	r4, r2, r1
 80142e2:	42a3      	cmp	r3, r4
 80142e4:	6011      	str	r1, [r2, #0]
 80142e6:	d1e0      	bne.n	80142aa <_free_r+0x26>
 80142e8:	681c      	ldr	r4, [r3, #0]
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	6053      	str	r3, [r2, #4]
 80142ee:	440c      	add	r4, r1
 80142f0:	6014      	str	r4, [r2, #0]
 80142f2:	e7da      	b.n	80142aa <_free_r+0x26>
 80142f4:	d902      	bls.n	80142fc <_free_r+0x78>
 80142f6:	230c      	movs	r3, #12
 80142f8:	6003      	str	r3, [r0, #0]
 80142fa:	e7d6      	b.n	80142aa <_free_r+0x26>
 80142fc:	6825      	ldr	r5, [r4, #0]
 80142fe:	1961      	adds	r1, r4, r5
 8014300:	428b      	cmp	r3, r1
 8014302:	bf04      	itt	eq
 8014304:	6819      	ldreq	r1, [r3, #0]
 8014306:	685b      	ldreq	r3, [r3, #4]
 8014308:	6063      	str	r3, [r4, #4]
 801430a:	bf04      	itt	eq
 801430c:	1949      	addeq	r1, r1, r5
 801430e:	6021      	streq	r1, [r4, #0]
 8014310:	6054      	str	r4, [r2, #4]
 8014312:	e7ca      	b.n	80142aa <_free_r+0x26>
 8014314:	b003      	add	sp, #12
 8014316:	bd30      	pop	{r4, r5, pc}
 8014318:	20008ab8 	.word	0x20008ab8

0801431c <malloc>:
 801431c:	4b02      	ldr	r3, [pc, #8]	; (8014328 <malloc+0xc>)
 801431e:	4601      	mov	r1, r0
 8014320:	6818      	ldr	r0, [r3, #0]
 8014322:	f000 b823 	b.w	801436c <_malloc_r>
 8014326:	bf00      	nop
 8014328:	20000164 	.word	0x20000164

0801432c <sbrk_aligned>:
 801432c:	b570      	push	{r4, r5, r6, lr}
 801432e:	4e0e      	ldr	r6, [pc, #56]	; (8014368 <sbrk_aligned+0x3c>)
 8014330:	460c      	mov	r4, r1
 8014332:	6831      	ldr	r1, [r6, #0]
 8014334:	4605      	mov	r5, r0
 8014336:	b911      	cbnz	r1, 801433e <sbrk_aligned+0x12>
 8014338:	f001 fe1a 	bl	8015f70 <_sbrk_r>
 801433c:	6030      	str	r0, [r6, #0]
 801433e:	4621      	mov	r1, r4
 8014340:	4628      	mov	r0, r5
 8014342:	f001 fe15 	bl	8015f70 <_sbrk_r>
 8014346:	1c43      	adds	r3, r0, #1
 8014348:	d00a      	beq.n	8014360 <sbrk_aligned+0x34>
 801434a:	1cc4      	adds	r4, r0, #3
 801434c:	f024 0403 	bic.w	r4, r4, #3
 8014350:	42a0      	cmp	r0, r4
 8014352:	d007      	beq.n	8014364 <sbrk_aligned+0x38>
 8014354:	1a21      	subs	r1, r4, r0
 8014356:	4628      	mov	r0, r5
 8014358:	f001 fe0a 	bl	8015f70 <_sbrk_r>
 801435c:	3001      	adds	r0, #1
 801435e:	d101      	bne.n	8014364 <sbrk_aligned+0x38>
 8014360:	f04f 34ff 	mov.w	r4, #4294967295
 8014364:	4620      	mov	r0, r4
 8014366:	bd70      	pop	{r4, r5, r6, pc}
 8014368:	20008abc 	.word	0x20008abc

0801436c <_malloc_r>:
 801436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014370:	1ccd      	adds	r5, r1, #3
 8014372:	f025 0503 	bic.w	r5, r5, #3
 8014376:	3508      	adds	r5, #8
 8014378:	2d0c      	cmp	r5, #12
 801437a:	bf38      	it	cc
 801437c:	250c      	movcc	r5, #12
 801437e:	2d00      	cmp	r5, #0
 8014380:	4607      	mov	r7, r0
 8014382:	db01      	blt.n	8014388 <_malloc_r+0x1c>
 8014384:	42a9      	cmp	r1, r5
 8014386:	d905      	bls.n	8014394 <_malloc_r+0x28>
 8014388:	230c      	movs	r3, #12
 801438a:	603b      	str	r3, [r7, #0]
 801438c:	2600      	movs	r6, #0
 801438e:	4630      	mov	r0, r6
 8014390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014394:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014468 <_malloc_r+0xfc>
 8014398:	f000 f868 	bl	801446c <__malloc_lock>
 801439c:	f8d8 3000 	ldr.w	r3, [r8]
 80143a0:	461c      	mov	r4, r3
 80143a2:	bb5c      	cbnz	r4, 80143fc <_malloc_r+0x90>
 80143a4:	4629      	mov	r1, r5
 80143a6:	4638      	mov	r0, r7
 80143a8:	f7ff ffc0 	bl	801432c <sbrk_aligned>
 80143ac:	1c43      	adds	r3, r0, #1
 80143ae:	4604      	mov	r4, r0
 80143b0:	d155      	bne.n	801445e <_malloc_r+0xf2>
 80143b2:	f8d8 4000 	ldr.w	r4, [r8]
 80143b6:	4626      	mov	r6, r4
 80143b8:	2e00      	cmp	r6, #0
 80143ba:	d145      	bne.n	8014448 <_malloc_r+0xdc>
 80143bc:	2c00      	cmp	r4, #0
 80143be:	d048      	beq.n	8014452 <_malloc_r+0xe6>
 80143c0:	6823      	ldr	r3, [r4, #0]
 80143c2:	4631      	mov	r1, r6
 80143c4:	4638      	mov	r0, r7
 80143c6:	eb04 0903 	add.w	r9, r4, r3
 80143ca:	f001 fdd1 	bl	8015f70 <_sbrk_r>
 80143ce:	4581      	cmp	r9, r0
 80143d0:	d13f      	bne.n	8014452 <_malloc_r+0xe6>
 80143d2:	6821      	ldr	r1, [r4, #0]
 80143d4:	1a6d      	subs	r5, r5, r1
 80143d6:	4629      	mov	r1, r5
 80143d8:	4638      	mov	r0, r7
 80143da:	f7ff ffa7 	bl	801432c <sbrk_aligned>
 80143de:	3001      	adds	r0, #1
 80143e0:	d037      	beq.n	8014452 <_malloc_r+0xe6>
 80143e2:	6823      	ldr	r3, [r4, #0]
 80143e4:	442b      	add	r3, r5
 80143e6:	6023      	str	r3, [r4, #0]
 80143e8:	f8d8 3000 	ldr.w	r3, [r8]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d038      	beq.n	8014462 <_malloc_r+0xf6>
 80143f0:	685a      	ldr	r2, [r3, #4]
 80143f2:	42a2      	cmp	r2, r4
 80143f4:	d12b      	bne.n	801444e <_malloc_r+0xe2>
 80143f6:	2200      	movs	r2, #0
 80143f8:	605a      	str	r2, [r3, #4]
 80143fa:	e00f      	b.n	801441c <_malloc_r+0xb0>
 80143fc:	6822      	ldr	r2, [r4, #0]
 80143fe:	1b52      	subs	r2, r2, r5
 8014400:	d41f      	bmi.n	8014442 <_malloc_r+0xd6>
 8014402:	2a0b      	cmp	r2, #11
 8014404:	d917      	bls.n	8014436 <_malloc_r+0xca>
 8014406:	1961      	adds	r1, r4, r5
 8014408:	42a3      	cmp	r3, r4
 801440a:	6025      	str	r5, [r4, #0]
 801440c:	bf18      	it	ne
 801440e:	6059      	strne	r1, [r3, #4]
 8014410:	6863      	ldr	r3, [r4, #4]
 8014412:	bf08      	it	eq
 8014414:	f8c8 1000 	streq.w	r1, [r8]
 8014418:	5162      	str	r2, [r4, r5]
 801441a:	604b      	str	r3, [r1, #4]
 801441c:	4638      	mov	r0, r7
 801441e:	f104 060b 	add.w	r6, r4, #11
 8014422:	f000 f829 	bl	8014478 <__malloc_unlock>
 8014426:	f026 0607 	bic.w	r6, r6, #7
 801442a:	1d23      	adds	r3, r4, #4
 801442c:	1af2      	subs	r2, r6, r3
 801442e:	d0ae      	beq.n	801438e <_malloc_r+0x22>
 8014430:	1b9b      	subs	r3, r3, r6
 8014432:	50a3      	str	r3, [r4, r2]
 8014434:	e7ab      	b.n	801438e <_malloc_r+0x22>
 8014436:	42a3      	cmp	r3, r4
 8014438:	6862      	ldr	r2, [r4, #4]
 801443a:	d1dd      	bne.n	80143f8 <_malloc_r+0x8c>
 801443c:	f8c8 2000 	str.w	r2, [r8]
 8014440:	e7ec      	b.n	801441c <_malloc_r+0xb0>
 8014442:	4623      	mov	r3, r4
 8014444:	6864      	ldr	r4, [r4, #4]
 8014446:	e7ac      	b.n	80143a2 <_malloc_r+0x36>
 8014448:	4634      	mov	r4, r6
 801444a:	6876      	ldr	r6, [r6, #4]
 801444c:	e7b4      	b.n	80143b8 <_malloc_r+0x4c>
 801444e:	4613      	mov	r3, r2
 8014450:	e7cc      	b.n	80143ec <_malloc_r+0x80>
 8014452:	230c      	movs	r3, #12
 8014454:	603b      	str	r3, [r7, #0]
 8014456:	4638      	mov	r0, r7
 8014458:	f000 f80e 	bl	8014478 <__malloc_unlock>
 801445c:	e797      	b.n	801438e <_malloc_r+0x22>
 801445e:	6025      	str	r5, [r4, #0]
 8014460:	e7dc      	b.n	801441c <_malloc_r+0xb0>
 8014462:	605b      	str	r3, [r3, #4]
 8014464:	deff      	udf	#255	; 0xff
 8014466:	bf00      	nop
 8014468:	20008ab8 	.word	0x20008ab8

0801446c <__malloc_lock>:
 801446c:	4801      	ldr	r0, [pc, #4]	; (8014474 <__malloc_lock+0x8>)
 801446e:	f7ff b879 	b.w	8013564 <__retarget_lock_acquire_recursive>
 8014472:	bf00      	nop
 8014474:	20008ab4 	.word	0x20008ab4

08014478 <__malloc_unlock>:
 8014478:	4801      	ldr	r0, [pc, #4]	; (8014480 <__malloc_unlock+0x8>)
 801447a:	f7ff b874 	b.w	8013566 <__retarget_lock_release_recursive>
 801447e:	bf00      	nop
 8014480:	20008ab4 	.word	0x20008ab4

08014484 <_Balloc>:
 8014484:	b570      	push	{r4, r5, r6, lr}
 8014486:	69c6      	ldr	r6, [r0, #28]
 8014488:	4604      	mov	r4, r0
 801448a:	460d      	mov	r5, r1
 801448c:	b976      	cbnz	r6, 80144ac <_Balloc+0x28>
 801448e:	2010      	movs	r0, #16
 8014490:	f7ff ff44 	bl	801431c <malloc>
 8014494:	4602      	mov	r2, r0
 8014496:	61e0      	str	r0, [r4, #28]
 8014498:	b920      	cbnz	r0, 80144a4 <_Balloc+0x20>
 801449a:	4b18      	ldr	r3, [pc, #96]	; (80144fc <_Balloc+0x78>)
 801449c:	4818      	ldr	r0, [pc, #96]	; (8014500 <_Balloc+0x7c>)
 801449e:	216b      	movs	r1, #107	; 0x6b
 80144a0:	f001 fd7e 	bl	8015fa0 <__assert_func>
 80144a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144a8:	6006      	str	r6, [r0, #0]
 80144aa:	60c6      	str	r6, [r0, #12]
 80144ac:	69e6      	ldr	r6, [r4, #28]
 80144ae:	68f3      	ldr	r3, [r6, #12]
 80144b0:	b183      	cbz	r3, 80144d4 <_Balloc+0x50>
 80144b2:	69e3      	ldr	r3, [r4, #28]
 80144b4:	68db      	ldr	r3, [r3, #12]
 80144b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80144ba:	b9b8      	cbnz	r0, 80144ec <_Balloc+0x68>
 80144bc:	2101      	movs	r1, #1
 80144be:	fa01 f605 	lsl.w	r6, r1, r5
 80144c2:	1d72      	adds	r2, r6, #5
 80144c4:	0092      	lsls	r2, r2, #2
 80144c6:	4620      	mov	r0, r4
 80144c8:	f001 fd88 	bl	8015fdc <_calloc_r>
 80144cc:	b160      	cbz	r0, 80144e8 <_Balloc+0x64>
 80144ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80144d2:	e00e      	b.n	80144f2 <_Balloc+0x6e>
 80144d4:	2221      	movs	r2, #33	; 0x21
 80144d6:	2104      	movs	r1, #4
 80144d8:	4620      	mov	r0, r4
 80144da:	f001 fd7f 	bl	8015fdc <_calloc_r>
 80144de:	69e3      	ldr	r3, [r4, #28]
 80144e0:	60f0      	str	r0, [r6, #12]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d1e4      	bne.n	80144b2 <_Balloc+0x2e>
 80144e8:	2000      	movs	r0, #0
 80144ea:	bd70      	pop	{r4, r5, r6, pc}
 80144ec:	6802      	ldr	r2, [r0, #0]
 80144ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80144f2:	2300      	movs	r3, #0
 80144f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80144f8:	e7f7      	b.n	80144ea <_Balloc+0x66>
 80144fa:	bf00      	nop
 80144fc:	080170da 	.word	0x080170da
 8014500:	0801715a 	.word	0x0801715a

08014504 <_Bfree>:
 8014504:	b570      	push	{r4, r5, r6, lr}
 8014506:	69c6      	ldr	r6, [r0, #28]
 8014508:	4605      	mov	r5, r0
 801450a:	460c      	mov	r4, r1
 801450c:	b976      	cbnz	r6, 801452c <_Bfree+0x28>
 801450e:	2010      	movs	r0, #16
 8014510:	f7ff ff04 	bl	801431c <malloc>
 8014514:	4602      	mov	r2, r0
 8014516:	61e8      	str	r0, [r5, #28]
 8014518:	b920      	cbnz	r0, 8014524 <_Bfree+0x20>
 801451a:	4b09      	ldr	r3, [pc, #36]	; (8014540 <_Bfree+0x3c>)
 801451c:	4809      	ldr	r0, [pc, #36]	; (8014544 <_Bfree+0x40>)
 801451e:	218f      	movs	r1, #143	; 0x8f
 8014520:	f001 fd3e 	bl	8015fa0 <__assert_func>
 8014524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014528:	6006      	str	r6, [r0, #0]
 801452a:	60c6      	str	r6, [r0, #12]
 801452c:	b13c      	cbz	r4, 801453e <_Bfree+0x3a>
 801452e:	69eb      	ldr	r3, [r5, #28]
 8014530:	6862      	ldr	r2, [r4, #4]
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014538:	6021      	str	r1, [r4, #0]
 801453a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801453e:	bd70      	pop	{r4, r5, r6, pc}
 8014540:	080170da 	.word	0x080170da
 8014544:	0801715a 	.word	0x0801715a

08014548 <__multadd>:
 8014548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801454c:	690d      	ldr	r5, [r1, #16]
 801454e:	4607      	mov	r7, r0
 8014550:	460c      	mov	r4, r1
 8014552:	461e      	mov	r6, r3
 8014554:	f101 0c14 	add.w	ip, r1, #20
 8014558:	2000      	movs	r0, #0
 801455a:	f8dc 3000 	ldr.w	r3, [ip]
 801455e:	b299      	uxth	r1, r3
 8014560:	fb02 6101 	mla	r1, r2, r1, r6
 8014564:	0c1e      	lsrs	r6, r3, #16
 8014566:	0c0b      	lsrs	r3, r1, #16
 8014568:	fb02 3306 	mla	r3, r2, r6, r3
 801456c:	b289      	uxth	r1, r1
 801456e:	3001      	adds	r0, #1
 8014570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014574:	4285      	cmp	r5, r0
 8014576:	f84c 1b04 	str.w	r1, [ip], #4
 801457a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801457e:	dcec      	bgt.n	801455a <__multadd+0x12>
 8014580:	b30e      	cbz	r6, 80145c6 <__multadd+0x7e>
 8014582:	68a3      	ldr	r3, [r4, #8]
 8014584:	42ab      	cmp	r3, r5
 8014586:	dc19      	bgt.n	80145bc <__multadd+0x74>
 8014588:	6861      	ldr	r1, [r4, #4]
 801458a:	4638      	mov	r0, r7
 801458c:	3101      	adds	r1, #1
 801458e:	f7ff ff79 	bl	8014484 <_Balloc>
 8014592:	4680      	mov	r8, r0
 8014594:	b928      	cbnz	r0, 80145a2 <__multadd+0x5a>
 8014596:	4602      	mov	r2, r0
 8014598:	4b0c      	ldr	r3, [pc, #48]	; (80145cc <__multadd+0x84>)
 801459a:	480d      	ldr	r0, [pc, #52]	; (80145d0 <__multadd+0x88>)
 801459c:	21ba      	movs	r1, #186	; 0xba
 801459e:	f001 fcff 	bl	8015fa0 <__assert_func>
 80145a2:	6922      	ldr	r2, [r4, #16]
 80145a4:	3202      	adds	r2, #2
 80145a6:	f104 010c 	add.w	r1, r4, #12
 80145aa:	0092      	lsls	r2, r2, #2
 80145ac:	300c      	adds	r0, #12
 80145ae:	f7fe ffdb 	bl	8013568 <memcpy>
 80145b2:	4621      	mov	r1, r4
 80145b4:	4638      	mov	r0, r7
 80145b6:	f7ff ffa5 	bl	8014504 <_Bfree>
 80145ba:	4644      	mov	r4, r8
 80145bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80145c0:	3501      	adds	r5, #1
 80145c2:	615e      	str	r6, [r3, #20]
 80145c4:	6125      	str	r5, [r4, #16]
 80145c6:	4620      	mov	r0, r4
 80145c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145cc:	08017149 	.word	0x08017149
 80145d0:	0801715a 	.word	0x0801715a

080145d4 <__s2b>:
 80145d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145d8:	460c      	mov	r4, r1
 80145da:	4615      	mov	r5, r2
 80145dc:	461f      	mov	r7, r3
 80145de:	2209      	movs	r2, #9
 80145e0:	3308      	adds	r3, #8
 80145e2:	4606      	mov	r6, r0
 80145e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80145e8:	2100      	movs	r1, #0
 80145ea:	2201      	movs	r2, #1
 80145ec:	429a      	cmp	r2, r3
 80145ee:	db09      	blt.n	8014604 <__s2b+0x30>
 80145f0:	4630      	mov	r0, r6
 80145f2:	f7ff ff47 	bl	8014484 <_Balloc>
 80145f6:	b940      	cbnz	r0, 801460a <__s2b+0x36>
 80145f8:	4602      	mov	r2, r0
 80145fa:	4b19      	ldr	r3, [pc, #100]	; (8014660 <__s2b+0x8c>)
 80145fc:	4819      	ldr	r0, [pc, #100]	; (8014664 <__s2b+0x90>)
 80145fe:	21d3      	movs	r1, #211	; 0xd3
 8014600:	f001 fcce 	bl	8015fa0 <__assert_func>
 8014604:	0052      	lsls	r2, r2, #1
 8014606:	3101      	adds	r1, #1
 8014608:	e7f0      	b.n	80145ec <__s2b+0x18>
 801460a:	9b08      	ldr	r3, [sp, #32]
 801460c:	6143      	str	r3, [r0, #20]
 801460e:	2d09      	cmp	r5, #9
 8014610:	f04f 0301 	mov.w	r3, #1
 8014614:	6103      	str	r3, [r0, #16]
 8014616:	dd16      	ble.n	8014646 <__s2b+0x72>
 8014618:	f104 0909 	add.w	r9, r4, #9
 801461c:	46c8      	mov	r8, r9
 801461e:	442c      	add	r4, r5
 8014620:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014624:	4601      	mov	r1, r0
 8014626:	3b30      	subs	r3, #48	; 0x30
 8014628:	220a      	movs	r2, #10
 801462a:	4630      	mov	r0, r6
 801462c:	f7ff ff8c 	bl	8014548 <__multadd>
 8014630:	45a0      	cmp	r8, r4
 8014632:	d1f5      	bne.n	8014620 <__s2b+0x4c>
 8014634:	f1a5 0408 	sub.w	r4, r5, #8
 8014638:	444c      	add	r4, r9
 801463a:	1b2d      	subs	r5, r5, r4
 801463c:	1963      	adds	r3, r4, r5
 801463e:	42bb      	cmp	r3, r7
 8014640:	db04      	blt.n	801464c <__s2b+0x78>
 8014642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014646:	340a      	adds	r4, #10
 8014648:	2509      	movs	r5, #9
 801464a:	e7f6      	b.n	801463a <__s2b+0x66>
 801464c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014650:	4601      	mov	r1, r0
 8014652:	3b30      	subs	r3, #48	; 0x30
 8014654:	220a      	movs	r2, #10
 8014656:	4630      	mov	r0, r6
 8014658:	f7ff ff76 	bl	8014548 <__multadd>
 801465c:	e7ee      	b.n	801463c <__s2b+0x68>
 801465e:	bf00      	nop
 8014660:	08017149 	.word	0x08017149
 8014664:	0801715a 	.word	0x0801715a

08014668 <__hi0bits>:
 8014668:	0c03      	lsrs	r3, r0, #16
 801466a:	041b      	lsls	r3, r3, #16
 801466c:	b9d3      	cbnz	r3, 80146a4 <__hi0bits+0x3c>
 801466e:	0400      	lsls	r0, r0, #16
 8014670:	2310      	movs	r3, #16
 8014672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014676:	bf04      	itt	eq
 8014678:	0200      	lsleq	r0, r0, #8
 801467a:	3308      	addeq	r3, #8
 801467c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014680:	bf04      	itt	eq
 8014682:	0100      	lsleq	r0, r0, #4
 8014684:	3304      	addeq	r3, #4
 8014686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801468a:	bf04      	itt	eq
 801468c:	0080      	lsleq	r0, r0, #2
 801468e:	3302      	addeq	r3, #2
 8014690:	2800      	cmp	r0, #0
 8014692:	db05      	blt.n	80146a0 <__hi0bits+0x38>
 8014694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014698:	f103 0301 	add.w	r3, r3, #1
 801469c:	bf08      	it	eq
 801469e:	2320      	moveq	r3, #32
 80146a0:	4618      	mov	r0, r3
 80146a2:	4770      	bx	lr
 80146a4:	2300      	movs	r3, #0
 80146a6:	e7e4      	b.n	8014672 <__hi0bits+0xa>

080146a8 <__lo0bits>:
 80146a8:	6803      	ldr	r3, [r0, #0]
 80146aa:	f013 0207 	ands.w	r2, r3, #7
 80146ae:	d00c      	beq.n	80146ca <__lo0bits+0x22>
 80146b0:	07d9      	lsls	r1, r3, #31
 80146b2:	d422      	bmi.n	80146fa <__lo0bits+0x52>
 80146b4:	079a      	lsls	r2, r3, #30
 80146b6:	bf49      	itett	mi
 80146b8:	085b      	lsrmi	r3, r3, #1
 80146ba:	089b      	lsrpl	r3, r3, #2
 80146bc:	6003      	strmi	r3, [r0, #0]
 80146be:	2201      	movmi	r2, #1
 80146c0:	bf5c      	itt	pl
 80146c2:	6003      	strpl	r3, [r0, #0]
 80146c4:	2202      	movpl	r2, #2
 80146c6:	4610      	mov	r0, r2
 80146c8:	4770      	bx	lr
 80146ca:	b299      	uxth	r1, r3
 80146cc:	b909      	cbnz	r1, 80146d2 <__lo0bits+0x2a>
 80146ce:	0c1b      	lsrs	r3, r3, #16
 80146d0:	2210      	movs	r2, #16
 80146d2:	b2d9      	uxtb	r1, r3
 80146d4:	b909      	cbnz	r1, 80146da <__lo0bits+0x32>
 80146d6:	3208      	adds	r2, #8
 80146d8:	0a1b      	lsrs	r3, r3, #8
 80146da:	0719      	lsls	r1, r3, #28
 80146dc:	bf04      	itt	eq
 80146de:	091b      	lsreq	r3, r3, #4
 80146e0:	3204      	addeq	r2, #4
 80146e2:	0799      	lsls	r1, r3, #30
 80146e4:	bf04      	itt	eq
 80146e6:	089b      	lsreq	r3, r3, #2
 80146e8:	3202      	addeq	r2, #2
 80146ea:	07d9      	lsls	r1, r3, #31
 80146ec:	d403      	bmi.n	80146f6 <__lo0bits+0x4e>
 80146ee:	085b      	lsrs	r3, r3, #1
 80146f0:	f102 0201 	add.w	r2, r2, #1
 80146f4:	d003      	beq.n	80146fe <__lo0bits+0x56>
 80146f6:	6003      	str	r3, [r0, #0]
 80146f8:	e7e5      	b.n	80146c6 <__lo0bits+0x1e>
 80146fa:	2200      	movs	r2, #0
 80146fc:	e7e3      	b.n	80146c6 <__lo0bits+0x1e>
 80146fe:	2220      	movs	r2, #32
 8014700:	e7e1      	b.n	80146c6 <__lo0bits+0x1e>
	...

08014704 <__i2b>:
 8014704:	b510      	push	{r4, lr}
 8014706:	460c      	mov	r4, r1
 8014708:	2101      	movs	r1, #1
 801470a:	f7ff febb 	bl	8014484 <_Balloc>
 801470e:	4602      	mov	r2, r0
 8014710:	b928      	cbnz	r0, 801471e <__i2b+0x1a>
 8014712:	4b05      	ldr	r3, [pc, #20]	; (8014728 <__i2b+0x24>)
 8014714:	4805      	ldr	r0, [pc, #20]	; (801472c <__i2b+0x28>)
 8014716:	f240 1145 	movw	r1, #325	; 0x145
 801471a:	f001 fc41 	bl	8015fa0 <__assert_func>
 801471e:	2301      	movs	r3, #1
 8014720:	6144      	str	r4, [r0, #20]
 8014722:	6103      	str	r3, [r0, #16]
 8014724:	bd10      	pop	{r4, pc}
 8014726:	bf00      	nop
 8014728:	08017149 	.word	0x08017149
 801472c:	0801715a 	.word	0x0801715a

08014730 <__multiply>:
 8014730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014734:	4691      	mov	r9, r2
 8014736:	690a      	ldr	r2, [r1, #16]
 8014738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801473c:	429a      	cmp	r2, r3
 801473e:	bfb8      	it	lt
 8014740:	460b      	movlt	r3, r1
 8014742:	460c      	mov	r4, r1
 8014744:	bfbc      	itt	lt
 8014746:	464c      	movlt	r4, r9
 8014748:	4699      	movlt	r9, r3
 801474a:	6927      	ldr	r7, [r4, #16]
 801474c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014750:	68a3      	ldr	r3, [r4, #8]
 8014752:	6861      	ldr	r1, [r4, #4]
 8014754:	eb07 060a 	add.w	r6, r7, sl
 8014758:	42b3      	cmp	r3, r6
 801475a:	b085      	sub	sp, #20
 801475c:	bfb8      	it	lt
 801475e:	3101      	addlt	r1, #1
 8014760:	f7ff fe90 	bl	8014484 <_Balloc>
 8014764:	b930      	cbnz	r0, 8014774 <__multiply+0x44>
 8014766:	4602      	mov	r2, r0
 8014768:	4b44      	ldr	r3, [pc, #272]	; (801487c <__multiply+0x14c>)
 801476a:	4845      	ldr	r0, [pc, #276]	; (8014880 <__multiply+0x150>)
 801476c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014770:	f001 fc16 	bl	8015fa0 <__assert_func>
 8014774:	f100 0514 	add.w	r5, r0, #20
 8014778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801477c:	462b      	mov	r3, r5
 801477e:	2200      	movs	r2, #0
 8014780:	4543      	cmp	r3, r8
 8014782:	d321      	bcc.n	80147c8 <__multiply+0x98>
 8014784:	f104 0314 	add.w	r3, r4, #20
 8014788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801478c:	f109 0314 	add.w	r3, r9, #20
 8014790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014794:	9202      	str	r2, [sp, #8]
 8014796:	1b3a      	subs	r2, r7, r4
 8014798:	3a15      	subs	r2, #21
 801479a:	f022 0203 	bic.w	r2, r2, #3
 801479e:	3204      	adds	r2, #4
 80147a0:	f104 0115 	add.w	r1, r4, #21
 80147a4:	428f      	cmp	r7, r1
 80147a6:	bf38      	it	cc
 80147a8:	2204      	movcc	r2, #4
 80147aa:	9201      	str	r2, [sp, #4]
 80147ac:	9a02      	ldr	r2, [sp, #8]
 80147ae:	9303      	str	r3, [sp, #12]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d80c      	bhi.n	80147ce <__multiply+0x9e>
 80147b4:	2e00      	cmp	r6, #0
 80147b6:	dd03      	ble.n	80147c0 <__multiply+0x90>
 80147b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d05b      	beq.n	8014878 <__multiply+0x148>
 80147c0:	6106      	str	r6, [r0, #16]
 80147c2:	b005      	add	sp, #20
 80147c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c8:	f843 2b04 	str.w	r2, [r3], #4
 80147cc:	e7d8      	b.n	8014780 <__multiply+0x50>
 80147ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80147d2:	f1ba 0f00 	cmp.w	sl, #0
 80147d6:	d024      	beq.n	8014822 <__multiply+0xf2>
 80147d8:	f104 0e14 	add.w	lr, r4, #20
 80147dc:	46a9      	mov	r9, r5
 80147de:	f04f 0c00 	mov.w	ip, #0
 80147e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80147e6:	f8d9 1000 	ldr.w	r1, [r9]
 80147ea:	fa1f fb82 	uxth.w	fp, r2
 80147ee:	b289      	uxth	r1, r1
 80147f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80147f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80147f8:	f8d9 2000 	ldr.w	r2, [r9]
 80147fc:	4461      	add	r1, ip
 80147fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014802:	fb0a c20b 	mla	r2, sl, fp, ip
 8014806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801480a:	b289      	uxth	r1, r1
 801480c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014810:	4577      	cmp	r7, lr
 8014812:	f849 1b04 	str.w	r1, [r9], #4
 8014816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801481a:	d8e2      	bhi.n	80147e2 <__multiply+0xb2>
 801481c:	9a01      	ldr	r2, [sp, #4]
 801481e:	f845 c002 	str.w	ip, [r5, r2]
 8014822:	9a03      	ldr	r2, [sp, #12]
 8014824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014828:	3304      	adds	r3, #4
 801482a:	f1b9 0f00 	cmp.w	r9, #0
 801482e:	d021      	beq.n	8014874 <__multiply+0x144>
 8014830:	6829      	ldr	r1, [r5, #0]
 8014832:	f104 0c14 	add.w	ip, r4, #20
 8014836:	46ae      	mov	lr, r5
 8014838:	f04f 0a00 	mov.w	sl, #0
 801483c:	f8bc b000 	ldrh.w	fp, [ip]
 8014840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014844:	fb09 220b 	mla	r2, r9, fp, r2
 8014848:	4452      	add	r2, sl
 801484a:	b289      	uxth	r1, r1
 801484c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014850:	f84e 1b04 	str.w	r1, [lr], #4
 8014854:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014858:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801485c:	f8be 1000 	ldrh.w	r1, [lr]
 8014860:	fb09 110a 	mla	r1, r9, sl, r1
 8014864:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014868:	4567      	cmp	r7, ip
 801486a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801486e:	d8e5      	bhi.n	801483c <__multiply+0x10c>
 8014870:	9a01      	ldr	r2, [sp, #4]
 8014872:	50a9      	str	r1, [r5, r2]
 8014874:	3504      	adds	r5, #4
 8014876:	e799      	b.n	80147ac <__multiply+0x7c>
 8014878:	3e01      	subs	r6, #1
 801487a:	e79b      	b.n	80147b4 <__multiply+0x84>
 801487c:	08017149 	.word	0x08017149
 8014880:	0801715a 	.word	0x0801715a

08014884 <__pow5mult>:
 8014884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014888:	4615      	mov	r5, r2
 801488a:	f012 0203 	ands.w	r2, r2, #3
 801488e:	4606      	mov	r6, r0
 8014890:	460f      	mov	r7, r1
 8014892:	d007      	beq.n	80148a4 <__pow5mult+0x20>
 8014894:	4c25      	ldr	r4, [pc, #148]	; (801492c <__pow5mult+0xa8>)
 8014896:	3a01      	subs	r2, #1
 8014898:	2300      	movs	r3, #0
 801489a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801489e:	f7ff fe53 	bl	8014548 <__multadd>
 80148a2:	4607      	mov	r7, r0
 80148a4:	10ad      	asrs	r5, r5, #2
 80148a6:	d03d      	beq.n	8014924 <__pow5mult+0xa0>
 80148a8:	69f4      	ldr	r4, [r6, #28]
 80148aa:	b97c      	cbnz	r4, 80148cc <__pow5mult+0x48>
 80148ac:	2010      	movs	r0, #16
 80148ae:	f7ff fd35 	bl	801431c <malloc>
 80148b2:	4602      	mov	r2, r0
 80148b4:	61f0      	str	r0, [r6, #28]
 80148b6:	b928      	cbnz	r0, 80148c4 <__pow5mult+0x40>
 80148b8:	4b1d      	ldr	r3, [pc, #116]	; (8014930 <__pow5mult+0xac>)
 80148ba:	481e      	ldr	r0, [pc, #120]	; (8014934 <__pow5mult+0xb0>)
 80148bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80148c0:	f001 fb6e 	bl	8015fa0 <__assert_func>
 80148c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148c8:	6004      	str	r4, [r0, #0]
 80148ca:	60c4      	str	r4, [r0, #12]
 80148cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80148d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80148d4:	b94c      	cbnz	r4, 80148ea <__pow5mult+0x66>
 80148d6:	f240 2171 	movw	r1, #625	; 0x271
 80148da:	4630      	mov	r0, r6
 80148dc:	f7ff ff12 	bl	8014704 <__i2b>
 80148e0:	2300      	movs	r3, #0
 80148e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80148e6:	4604      	mov	r4, r0
 80148e8:	6003      	str	r3, [r0, #0]
 80148ea:	f04f 0900 	mov.w	r9, #0
 80148ee:	07eb      	lsls	r3, r5, #31
 80148f0:	d50a      	bpl.n	8014908 <__pow5mult+0x84>
 80148f2:	4639      	mov	r1, r7
 80148f4:	4622      	mov	r2, r4
 80148f6:	4630      	mov	r0, r6
 80148f8:	f7ff ff1a 	bl	8014730 <__multiply>
 80148fc:	4639      	mov	r1, r7
 80148fe:	4680      	mov	r8, r0
 8014900:	4630      	mov	r0, r6
 8014902:	f7ff fdff 	bl	8014504 <_Bfree>
 8014906:	4647      	mov	r7, r8
 8014908:	106d      	asrs	r5, r5, #1
 801490a:	d00b      	beq.n	8014924 <__pow5mult+0xa0>
 801490c:	6820      	ldr	r0, [r4, #0]
 801490e:	b938      	cbnz	r0, 8014920 <__pow5mult+0x9c>
 8014910:	4622      	mov	r2, r4
 8014912:	4621      	mov	r1, r4
 8014914:	4630      	mov	r0, r6
 8014916:	f7ff ff0b 	bl	8014730 <__multiply>
 801491a:	6020      	str	r0, [r4, #0]
 801491c:	f8c0 9000 	str.w	r9, [r0]
 8014920:	4604      	mov	r4, r0
 8014922:	e7e4      	b.n	80148ee <__pow5mult+0x6a>
 8014924:	4638      	mov	r0, r7
 8014926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801492a:	bf00      	nop
 801492c:	080172a8 	.word	0x080172a8
 8014930:	080170da 	.word	0x080170da
 8014934:	0801715a 	.word	0x0801715a

08014938 <__lshift>:
 8014938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801493c:	460c      	mov	r4, r1
 801493e:	6849      	ldr	r1, [r1, #4]
 8014940:	6923      	ldr	r3, [r4, #16]
 8014942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014946:	68a3      	ldr	r3, [r4, #8]
 8014948:	4607      	mov	r7, r0
 801494a:	4691      	mov	r9, r2
 801494c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014950:	f108 0601 	add.w	r6, r8, #1
 8014954:	42b3      	cmp	r3, r6
 8014956:	db0b      	blt.n	8014970 <__lshift+0x38>
 8014958:	4638      	mov	r0, r7
 801495a:	f7ff fd93 	bl	8014484 <_Balloc>
 801495e:	4605      	mov	r5, r0
 8014960:	b948      	cbnz	r0, 8014976 <__lshift+0x3e>
 8014962:	4602      	mov	r2, r0
 8014964:	4b28      	ldr	r3, [pc, #160]	; (8014a08 <__lshift+0xd0>)
 8014966:	4829      	ldr	r0, [pc, #164]	; (8014a0c <__lshift+0xd4>)
 8014968:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801496c:	f001 fb18 	bl	8015fa0 <__assert_func>
 8014970:	3101      	adds	r1, #1
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	e7ee      	b.n	8014954 <__lshift+0x1c>
 8014976:	2300      	movs	r3, #0
 8014978:	f100 0114 	add.w	r1, r0, #20
 801497c:	f100 0210 	add.w	r2, r0, #16
 8014980:	4618      	mov	r0, r3
 8014982:	4553      	cmp	r3, sl
 8014984:	db33      	blt.n	80149ee <__lshift+0xb6>
 8014986:	6920      	ldr	r0, [r4, #16]
 8014988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801498c:	f104 0314 	add.w	r3, r4, #20
 8014990:	f019 091f 	ands.w	r9, r9, #31
 8014994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801499c:	d02b      	beq.n	80149f6 <__lshift+0xbe>
 801499e:	f1c9 0e20 	rsb	lr, r9, #32
 80149a2:	468a      	mov	sl, r1
 80149a4:	2200      	movs	r2, #0
 80149a6:	6818      	ldr	r0, [r3, #0]
 80149a8:	fa00 f009 	lsl.w	r0, r0, r9
 80149ac:	4310      	orrs	r0, r2
 80149ae:	f84a 0b04 	str.w	r0, [sl], #4
 80149b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149b6:	459c      	cmp	ip, r3
 80149b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80149bc:	d8f3      	bhi.n	80149a6 <__lshift+0x6e>
 80149be:	ebac 0304 	sub.w	r3, ip, r4
 80149c2:	3b15      	subs	r3, #21
 80149c4:	f023 0303 	bic.w	r3, r3, #3
 80149c8:	3304      	adds	r3, #4
 80149ca:	f104 0015 	add.w	r0, r4, #21
 80149ce:	4584      	cmp	ip, r0
 80149d0:	bf38      	it	cc
 80149d2:	2304      	movcc	r3, #4
 80149d4:	50ca      	str	r2, [r1, r3]
 80149d6:	b10a      	cbz	r2, 80149dc <__lshift+0xa4>
 80149d8:	f108 0602 	add.w	r6, r8, #2
 80149dc:	3e01      	subs	r6, #1
 80149de:	4638      	mov	r0, r7
 80149e0:	612e      	str	r6, [r5, #16]
 80149e2:	4621      	mov	r1, r4
 80149e4:	f7ff fd8e 	bl	8014504 <_Bfree>
 80149e8:	4628      	mov	r0, r5
 80149ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80149f2:	3301      	adds	r3, #1
 80149f4:	e7c5      	b.n	8014982 <__lshift+0x4a>
 80149f6:	3904      	subs	r1, #4
 80149f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80149fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a00:	459c      	cmp	ip, r3
 8014a02:	d8f9      	bhi.n	80149f8 <__lshift+0xc0>
 8014a04:	e7ea      	b.n	80149dc <__lshift+0xa4>
 8014a06:	bf00      	nop
 8014a08:	08017149 	.word	0x08017149
 8014a0c:	0801715a 	.word	0x0801715a

08014a10 <__mcmp>:
 8014a10:	b530      	push	{r4, r5, lr}
 8014a12:	6902      	ldr	r2, [r0, #16]
 8014a14:	690c      	ldr	r4, [r1, #16]
 8014a16:	1b12      	subs	r2, r2, r4
 8014a18:	d10e      	bne.n	8014a38 <__mcmp+0x28>
 8014a1a:	f100 0314 	add.w	r3, r0, #20
 8014a1e:	3114      	adds	r1, #20
 8014a20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014a24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014a28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014a2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014a30:	42a5      	cmp	r5, r4
 8014a32:	d003      	beq.n	8014a3c <__mcmp+0x2c>
 8014a34:	d305      	bcc.n	8014a42 <__mcmp+0x32>
 8014a36:	2201      	movs	r2, #1
 8014a38:	4610      	mov	r0, r2
 8014a3a:	bd30      	pop	{r4, r5, pc}
 8014a3c:	4283      	cmp	r3, r0
 8014a3e:	d3f3      	bcc.n	8014a28 <__mcmp+0x18>
 8014a40:	e7fa      	b.n	8014a38 <__mcmp+0x28>
 8014a42:	f04f 32ff 	mov.w	r2, #4294967295
 8014a46:	e7f7      	b.n	8014a38 <__mcmp+0x28>

08014a48 <__mdiff>:
 8014a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4c:	460c      	mov	r4, r1
 8014a4e:	4606      	mov	r6, r0
 8014a50:	4611      	mov	r1, r2
 8014a52:	4620      	mov	r0, r4
 8014a54:	4690      	mov	r8, r2
 8014a56:	f7ff ffdb 	bl	8014a10 <__mcmp>
 8014a5a:	1e05      	subs	r5, r0, #0
 8014a5c:	d110      	bne.n	8014a80 <__mdiff+0x38>
 8014a5e:	4629      	mov	r1, r5
 8014a60:	4630      	mov	r0, r6
 8014a62:	f7ff fd0f 	bl	8014484 <_Balloc>
 8014a66:	b930      	cbnz	r0, 8014a76 <__mdiff+0x2e>
 8014a68:	4b3a      	ldr	r3, [pc, #232]	; (8014b54 <__mdiff+0x10c>)
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	f240 2137 	movw	r1, #567	; 0x237
 8014a70:	4839      	ldr	r0, [pc, #228]	; (8014b58 <__mdiff+0x110>)
 8014a72:	f001 fa95 	bl	8015fa0 <__assert_func>
 8014a76:	2301      	movs	r3, #1
 8014a78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a80:	bfa4      	itt	ge
 8014a82:	4643      	movge	r3, r8
 8014a84:	46a0      	movge	r8, r4
 8014a86:	4630      	mov	r0, r6
 8014a88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014a8c:	bfa6      	itte	ge
 8014a8e:	461c      	movge	r4, r3
 8014a90:	2500      	movge	r5, #0
 8014a92:	2501      	movlt	r5, #1
 8014a94:	f7ff fcf6 	bl	8014484 <_Balloc>
 8014a98:	b920      	cbnz	r0, 8014aa4 <__mdiff+0x5c>
 8014a9a:	4b2e      	ldr	r3, [pc, #184]	; (8014b54 <__mdiff+0x10c>)
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	f240 2145 	movw	r1, #581	; 0x245
 8014aa2:	e7e5      	b.n	8014a70 <__mdiff+0x28>
 8014aa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014aa8:	6926      	ldr	r6, [r4, #16]
 8014aaa:	60c5      	str	r5, [r0, #12]
 8014aac:	f104 0914 	add.w	r9, r4, #20
 8014ab0:	f108 0514 	add.w	r5, r8, #20
 8014ab4:	f100 0e14 	add.w	lr, r0, #20
 8014ab8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014abc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014ac0:	f108 0210 	add.w	r2, r8, #16
 8014ac4:	46f2      	mov	sl, lr
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014acc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014ad0:	fa11 f88b 	uxtah	r8, r1, fp
 8014ad4:	b299      	uxth	r1, r3
 8014ad6:	0c1b      	lsrs	r3, r3, #16
 8014ad8:	eba8 0801 	sub.w	r8, r8, r1
 8014adc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014ae0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014ae4:	fa1f f888 	uxth.w	r8, r8
 8014ae8:	1419      	asrs	r1, r3, #16
 8014aea:	454e      	cmp	r6, r9
 8014aec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014af0:	f84a 3b04 	str.w	r3, [sl], #4
 8014af4:	d8e8      	bhi.n	8014ac8 <__mdiff+0x80>
 8014af6:	1b33      	subs	r3, r6, r4
 8014af8:	3b15      	subs	r3, #21
 8014afa:	f023 0303 	bic.w	r3, r3, #3
 8014afe:	3304      	adds	r3, #4
 8014b00:	3415      	adds	r4, #21
 8014b02:	42a6      	cmp	r6, r4
 8014b04:	bf38      	it	cc
 8014b06:	2304      	movcc	r3, #4
 8014b08:	441d      	add	r5, r3
 8014b0a:	4473      	add	r3, lr
 8014b0c:	469e      	mov	lr, r3
 8014b0e:	462e      	mov	r6, r5
 8014b10:	4566      	cmp	r6, ip
 8014b12:	d30e      	bcc.n	8014b32 <__mdiff+0xea>
 8014b14:	f10c 0203 	add.w	r2, ip, #3
 8014b18:	1b52      	subs	r2, r2, r5
 8014b1a:	f022 0203 	bic.w	r2, r2, #3
 8014b1e:	3d03      	subs	r5, #3
 8014b20:	45ac      	cmp	ip, r5
 8014b22:	bf38      	it	cc
 8014b24:	2200      	movcc	r2, #0
 8014b26:	4413      	add	r3, r2
 8014b28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014b2c:	b17a      	cbz	r2, 8014b4e <__mdiff+0x106>
 8014b2e:	6107      	str	r7, [r0, #16]
 8014b30:	e7a4      	b.n	8014a7c <__mdiff+0x34>
 8014b32:	f856 8b04 	ldr.w	r8, [r6], #4
 8014b36:	fa11 f288 	uxtah	r2, r1, r8
 8014b3a:	1414      	asrs	r4, r2, #16
 8014b3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014b40:	b292      	uxth	r2, r2
 8014b42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014b46:	f84e 2b04 	str.w	r2, [lr], #4
 8014b4a:	1421      	asrs	r1, r4, #16
 8014b4c:	e7e0      	b.n	8014b10 <__mdiff+0xc8>
 8014b4e:	3f01      	subs	r7, #1
 8014b50:	e7ea      	b.n	8014b28 <__mdiff+0xe0>
 8014b52:	bf00      	nop
 8014b54:	08017149 	.word	0x08017149
 8014b58:	0801715a 	.word	0x0801715a

08014b5c <__ulp>:
 8014b5c:	b082      	sub	sp, #8
 8014b5e:	ed8d 0b00 	vstr	d0, [sp]
 8014b62:	9a01      	ldr	r2, [sp, #4]
 8014b64:	4b0f      	ldr	r3, [pc, #60]	; (8014ba4 <__ulp+0x48>)
 8014b66:	4013      	ands	r3, r2
 8014b68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	dc08      	bgt.n	8014b82 <__ulp+0x26>
 8014b70:	425b      	negs	r3, r3
 8014b72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014b76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014b7a:	da04      	bge.n	8014b86 <__ulp+0x2a>
 8014b7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014b80:	4113      	asrs	r3, r2
 8014b82:	2200      	movs	r2, #0
 8014b84:	e008      	b.n	8014b98 <__ulp+0x3c>
 8014b86:	f1a2 0314 	sub.w	r3, r2, #20
 8014b8a:	2b1e      	cmp	r3, #30
 8014b8c:	bfda      	itte	le
 8014b8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014b92:	40da      	lsrle	r2, r3
 8014b94:	2201      	movgt	r2, #1
 8014b96:	2300      	movs	r3, #0
 8014b98:	4619      	mov	r1, r3
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	ec41 0b10 	vmov	d0, r0, r1
 8014ba0:	b002      	add	sp, #8
 8014ba2:	4770      	bx	lr
 8014ba4:	7ff00000 	.word	0x7ff00000

08014ba8 <__b2d>:
 8014ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bac:	6906      	ldr	r6, [r0, #16]
 8014bae:	f100 0814 	add.w	r8, r0, #20
 8014bb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014bb6:	1f37      	subs	r7, r6, #4
 8014bb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014bbc:	4610      	mov	r0, r2
 8014bbe:	f7ff fd53 	bl	8014668 <__hi0bits>
 8014bc2:	f1c0 0320 	rsb	r3, r0, #32
 8014bc6:	280a      	cmp	r0, #10
 8014bc8:	600b      	str	r3, [r1, #0]
 8014bca:	491b      	ldr	r1, [pc, #108]	; (8014c38 <__b2d+0x90>)
 8014bcc:	dc15      	bgt.n	8014bfa <__b2d+0x52>
 8014bce:	f1c0 0c0b 	rsb	ip, r0, #11
 8014bd2:	fa22 f30c 	lsr.w	r3, r2, ip
 8014bd6:	45b8      	cmp	r8, r7
 8014bd8:	ea43 0501 	orr.w	r5, r3, r1
 8014bdc:	bf34      	ite	cc
 8014bde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014be2:	2300      	movcs	r3, #0
 8014be4:	3015      	adds	r0, #21
 8014be6:	fa02 f000 	lsl.w	r0, r2, r0
 8014bea:	fa23 f30c 	lsr.w	r3, r3, ip
 8014bee:	4303      	orrs	r3, r0
 8014bf0:	461c      	mov	r4, r3
 8014bf2:	ec45 4b10 	vmov	d0, r4, r5
 8014bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bfa:	45b8      	cmp	r8, r7
 8014bfc:	bf3a      	itte	cc
 8014bfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014c02:	f1a6 0708 	subcc.w	r7, r6, #8
 8014c06:	2300      	movcs	r3, #0
 8014c08:	380b      	subs	r0, #11
 8014c0a:	d012      	beq.n	8014c32 <__b2d+0x8a>
 8014c0c:	f1c0 0120 	rsb	r1, r0, #32
 8014c10:	fa23 f401 	lsr.w	r4, r3, r1
 8014c14:	4082      	lsls	r2, r0
 8014c16:	4322      	orrs	r2, r4
 8014c18:	4547      	cmp	r7, r8
 8014c1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014c1e:	bf8c      	ite	hi
 8014c20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014c24:	2200      	movls	r2, #0
 8014c26:	4083      	lsls	r3, r0
 8014c28:	40ca      	lsrs	r2, r1
 8014c2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	e7de      	b.n	8014bf0 <__b2d+0x48>
 8014c32:	ea42 0501 	orr.w	r5, r2, r1
 8014c36:	e7db      	b.n	8014bf0 <__b2d+0x48>
 8014c38:	3ff00000 	.word	0x3ff00000

08014c3c <__d2b>:
 8014c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c40:	460f      	mov	r7, r1
 8014c42:	2101      	movs	r1, #1
 8014c44:	ec59 8b10 	vmov	r8, r9, d0
 8014c48:	4616      	mov	r6, r2
 8014c4a:	f7ff fc1b 	bl	8014484 <_Balloc>
 8014c4e:	4604      	mov	r4, r0
 8014c50:	b930      	cbnz	r0, 8014c60 <__d2b+0x24>
 8014c52:	4602      	mov	r2, r0
 8014c54:	4b24      	ldr	r3, [pc, #144]	; (8014ce8 <__d2b+0xac>)
 8014c56:	4825      	ldr	r0, [pc, #148]	; (8014cec <__d2b+0xb0>)
 8014c58:	f240 310f 	movw	r1, #783	; 0x30f
 8014c5c:	f001 f9a0 	bl	8015fa0 <__assert_func>
 8014c60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014c64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c68:	bb2d      	cbnz	r5, 8014cb6 <__d2b+0x7a>
 8014c6a:	9301      	str	r3, [sp, #4]
 8014c6c:	f1b8 0300 	subs.w	r3, r8, #0
 8014c70:	d026      	beq.n	8014cc0 <__d2b+0x84>
 8014c72:	4668      	mov	r0, sp
 8014c74:	9300      	str	r3, [sp, #0]
 8014c76:	f7ff fd17 	bl	80146a8 <__lo0bits>
 8014c7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014c7e:	b1e8      	cbz	r0, 8014cbc <__d2b+0x80>
 8014c80:	f1c0 0320 	rsb	r3, r0, #32
 8014c84:	fa02 f303 	lsl.w	r3, r2, r3
 8014c88:	430b      	orrs	r3, r1
 8014c8a:	40c2      	lsrs	r2, r0
 8014c8c:	6163      	str	r3, [r4, #20]
 8014c8e:	9201      	str	r2, [sp, #4]
 8014c90:	9b01      	ldr	r3, [sp, #4]
 8014c92:	61a3      	str	r3, [r4, #24]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	bf14      	ite	ne
 8014c98:	2202      	movne	r2, #2
 8014c9a:	2201      	moveq	r2, #1
 8014c9c:	6122      	str	r2, [r4, #16]
 8014c9e:	b1bd      	cbz	r5, 8014cd0 <__d2b+0x94>
 8014ca0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014ca4:	4405      	add	r5, r0
 8014ca6:	603d      	str	r5, [r7, #0]
 8014ca8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014cac:	6030      	str	r0, [r6, #0]
 8014cae:	4620      	mov	r0, r4
 8014cb0:	b003      	add	sp, #12
 8014cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014cba:	e7d6      	b.n	8014c6a <__d2b+0x2e>
 8014cbc:	6161      	str	r1, [r4, #20]
 8014cbe:	e7e7      	b.n	8014c90 <__d2b+0x54>
 8014cc0:	a801      	add	r0, sp, #4
 8014cc2:	f7ff fcf1 	bl	80146a8 <__lo0bits>
 8014cc6:	9b01      	ldr	r3, [sp, #4]
 8014cc8:	6163      	str	r3, [r4, #20]
 8014cca:	3020      	adds	r0, #32
 8014ccc:	2201      	movs	r2, #1
 8014cce:	e7e5      	b.n	8014c9c <__d2b+0x60>
 8014cd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014cd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014cd8:	6038      	str	r0, [r7, #0]
 8014cda:	6918      	ldr	r0, [r3, #16]
 8014cdc:	f7ff fcc4 	bl	8014668 <__hi0bits>
 8014ce0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014ce4:	e7e2      	b.n	8014cac <__d2b+0x70>
 8014ce6:	bf00      	nop
 8014ce8:	08017149 	.word	0x08017149
 8014cec:	0801715a 	.word	0x0801715a

08014cf0 <__ratio>:
 8014cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf4:	4688      	mov	r8, r1
 8014cf6:	4669      	mov	r1, sp
 8014cf8:	4681      	mov	r9, r0
 8014cfa:	f7ff ff55 	bl	8014ba8 <__b2d>
 8014cfe:	a901      	add	r1, sp, #4
 8014d00:	4640      	mov	r0, r8
 8014d02:	ec55 4b10 	vmov	r4, r5, d0
 8014d06:	f7ff ff4f 	bl	8014ba8 <__b2d>
 8014d0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014d12:	eba3 0c02 	sub.w	ip, r3, r2
 8014d16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014d1a:	1a9b      	subs	r3, r3, r2
 8014d1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014d20:	ec51 0b10 	vmov	r0, r1, d0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	bfd6      	itet	le
 8014d28:	460a      	movle	r2, r1
 8014d2a:	462a      	movgt	r2, r5
 8014d2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014d30:	468b      	mov	fp, r1
 8014d32:	462f      	mov	r7, r5
 8014d34:	bfd4      	ite	le
 8014d36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014d3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014d3e:	4620      	mov	r0, r4
 8014d40:	ee10 2a10 	vmov	r2, s0
 8014d44:	465b      	mov	r3, fp
 8014d46:	4639      	mov	r1, r7
 8014d48:	f7eb fd80 	bl	800084c <__aeabi_ddiv>
 8014d4c:	ec41 0b10 	vmov	d0, r0, r1
 8014d50:	b003      	add	sp, #12
 8014d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d56 <__copybits>:
 8014d56:	3901      	subs	r1, #1
 8014d58:	b570      	push	{r4, r5, r6, lr}
 8014d5a:	1149      	asrs	r1, r1, #5
 8014d5c:	6914      	ldr	r4, [r2, #16]
 8014d5e:	3101      	adds	r1, #1
 8014d60:	f102 0314 	add.w	r3, r2, #20
 8014d64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014d6c:	1f05      	subs	r5, r0, #4
 8014d6e:	42a3      	cmp	r3, r4
 8014d70:	d30c      	bcc.n	8014d8c <__copybits+0x36>
 8014d72:	1aa3      	subs	r3, r4, r2
 8014d74:	3b11      	subs	r3, #17
 8014d76:	f023 0303 	bic.w	r3, r3, #3
 8014d7a:	3211      	adds	r2, #17
 8014d7c:	42a2      	cmp	r2, r4
 8014d7e:	bf88      	it	hi
 8014d80:	2300      	movhi	r3, #0
 8014d82:	4418      	add	r0, r3
 8014d84:	2300      	movs	r3, #0
 8014d86:	4288      	cmp	r0, r1
 8014d88:	d305      	bcc.n	8014d96 <__copybits+0x40>
 8014d8a:	bd70      	pop	{r4, r5, r6, pc}
 8014d8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014d90:	f845 6f04 	str.w	r6, [r5, #4]!
 8014d94:	e7eb      	b.n	8014d6e <__copybits+0x18>
 8014d96:	f840 3b04 	str.w	r3, [r0], #4
 8014d9a:	e7f4      	b.n	8014d86 <__copybits+0x30>

08014d9c <__any_on>:
 8014d9c:	f100 0214 	add.w	r2, r0, #20
 8014da0:	6900      	ldr	r0, [r0, #16]
 8014da2:	114b      	asrs	r3, r1, #5
 8014da4:	4298      	cmp	r0, r3
 8014da6:	b510      	push	{r4, lr}
 8014da8:	db11      	blt.n	8014dce <__any_on+0x32>
 8014daa:	dd0a      	ble.n	8014dc2 <__any_on+0x26>
 8014dac:	f011 011f 	ands.w	r1, r1, #31
 8014db0:	d007      	beq.n	8014dc2 <__any_on+0x26>
 8014db2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014db6:	fa24 f001 	lsr.w	r0, r4, r1
 8014dba:	fa00 f101 	lsl.w	r1, r0, r1
 8014dbe:	428c      	cmp	r4, r1
 8014dc0:	d10b      	bne.n	8014dda <__any_on+0x3e>
 8014dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d803      	bhi.n	8014dd2 <__any_on+0x36>
 8014dca:	2000      	movs	r0, #0
 8014dcc:	bd10      	pop	{r4, pc}
 8014dce:	4603      	mov	r3, r0
 8014dd0:	e7f7      	b.n	8014dc2 <__any_on+0x26>
 8014dd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014dd6:	2900      	cmp	r1, #0
 8014dd8:	d0f5      	beq.n	8014dc6 <__any_on+0x2a>
 8014dda:	2001      	movs	r0, #1
 8014ddc:	e7f6      	b.n	8014dcc <__any_on+0x30>

08014dde <sulp>:
 8014dde:	b570      	push	{r4, r5, r6, lr}
 8014de0:	4604      	mov	r4, r0
 8014de2:	460d      	mov	r5, r1
 8014de4:	ec45 4b10 	vmov	d0, r4, r5
 8014de8:	4616      	mov	r6, r2
 8014dea:	f7ff feb7 	bl	8014b5c <__ulp>
 8014dee:	ec51 0b10 	vmov	r0, r1, d0
 8014df2:	b17e      	cbz	r6, 8014e14 <sulp+0x36>
 8014df4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014df8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	dd09      	ble.n	8014e14 <sulp+0x36>
 8014e00:	051b      	lsls	r3, r3, #20
 8014e02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014e06:	2400      	movs	r4, #0
 8014e08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014e0c:	4622      	mov	r2, r4
 8014e0e:	462b      	mov	r3, r5
 8014e10:	f7eb fbf2 	bl	80005f8 <__aeabi_dmul>
 8014e14:	bd70      	pop	{r4, r5, r6, pc}
	...

08014e18 <_strtod_l>:
 8014e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1c:	ed2d 8b02 	vpush	{d8}
 8014e20:	b09b      	sub	sp, #108	; 0x6c
 8014e22:	4604      	mov	r4, r0
 8014e24:	9213      	str	r2, [sp, #76]	; 0x4c
 8014e26:	2200      	movs	r2, #0
 8014e28:	9216      	str	r2, [sp, #88]	; 0x58
 8014e2a:	460d      	mov	r5, r1
 8014e2c:	f04f 0800 	mov.w	r8, #0
 8014e30:	f04f 0900 	mov.w	r9, #0
 8014e34:	460a      	mov	r2, r1
 8014e36:	9215      	str	r2, [sp, #84]	; 0x54
 8014e38:	7811      	ldrb	r1, [r2, #0]
 8014e3a:	292b      	cmp	r1, #43	; 0x2b
 8014e3c:	d04c      	beq.n	8014ed8 <_strtod_l+0xc0>
 8014e3e:	d83a      	bhi.n	8014eb6 <_strtod_l+0x9e>
 8014e40:	290d      	cmp	r1, #13
 8014e42:	d834      	bhi.n	8014eae <_strtod_l+0x96>
 8014e44:	2908      	cmp	r1, #8
 8014e46:	d834      	bhi.n	8014eb2 <_strtod_l+0x9a>
 8014e48:	2900      	cmp	r1, #0
 8014e4a:	d03d      	beq.n	8014ec8 <_strtod_l+0xb0>
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	920a      	str	r2, [sp, #40]	; 0x28
 8014e50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014e52:	7832      	ldrb	r2, [r6, #0]
 8014e54:	2a30      	cmp	r2, #48	; 0x30
 8014e56:	f040 80b4 	bne.w	8014fc2 <_strtod_l+0x1aa>
 8014e5a:	7872      	ldrb	r2, [r6, #1]
 8014e5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014e60:	2a58      	cmp	r2, #88	; 0x58
 8014e62:	d170      	bne.n	8014f46 <_strtod_l+0x12e>
 8014e64:	9302      	str	r3, [sp, #8]
 8014e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e68:	9301      	str	r3, [sp, #4]
 8014e6a:	ab16      	add	r3, sp, #88	; 0x58
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	4a8e      	ldr	r2, [pc, #568]	; (80150a8 <_strtod_l+0x290>)
 8014e70:	ab17      	add	r3, sp, #92	; 0x5c
 8014e72:	a915      	add	r1, sp, #84	; 0x54
 8014e74:	4620      	mov	r0, r4
 8014e76:	f001 f92f 	bl	80160d8 <__gethex>
 8014e7a:	f010 070f 	ands.w	r7, r0, #15
 8014e7e:	4605      	mov	r5, r0
 8014e80:	d005      	beq.n	8014e8e <_strtod_l+0x76>
 8014e82:	2f06      	cmp	r7, #6
 8014e84:	d12a      	bne.n	8014edc <_strtod_l+0xc4>
 8014e86:	3601      	adds	r6, #1
 8014e88:	2300      	movs	r3, #0
 8014e8a:	9615      	str	r6, [sp, #84]	; 0x54
 8014e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8014e8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f040 857f 	bne.w	8015994 <_strtod_l+0xb7c>
 8014e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e98:	b1db      	cbz	r3, 8014ed2 <_strtod_l+0xba>
 8014e9a:	4642      	mov	r2, r8
 8014e9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014ea0:	ec43 2b10 	vmov	d0, r2, r3
 8014ea4:	b01b      	add	sp, #108	; 0x6c
 8014ea6:	ecbd 8b02 	vpop	{d8}
 8014eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eae:	2920      	cmp	r1, #32
 8014eb0:	d1cc      	bne.n	8014e4c <_strtod_l+0x34>
 8014eb2:	3201      	adds	r2, #1
 8014eb4:	e7bf      	b.n	8014e36 <_strtod_l+0x1e>
 8014eb6:	292d      	cmp	r1, #45	; 0x2d
 8014eb8:	d1c8      	bne.n	8014e4c <_strtod_l+0x34>
 8014eba:	2101      	movs	r1, #1
 8014ebc:	910a      	str	r1, [sp, #40]	; 0x28
 8014ebe:	1c51      	adds	r1, r2, #1
 8014ec0:	9115      	str	r1, [sp, #84]	; 0x54
 8014ec2:	7852      	ldrb	r2, [r2, #1]
 8014ec4:	2a00      	cmp	r2, #0
 8014ec6:	d1c3      	bne.n	8014e50 <_strtod_l+0x38>
 8014ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014eca:	9515      	str	r5, [sp, #84]	; 0x54
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f040 855f 	bne.w	8015990 <_strtod_l+0xb78>
 8014ed2:	4642      	mov	r2, r8
 8014ed4:	464b      	mov	r3, r9
 8014ed6:	e7e3      	b.n	8014ea0 <_strtod_l+0x88>
 8014ed8:	2100      	movs	r1, #0
 8014eda:	e7ef      	b.n	8014ebc <_strtod_l+0xa4>
 8014edc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ede:	b13a      	cbz	r2, 8014ef0 <_strtod_l+0xd8>
 8014ee0:	2135      	movs	r1, #53	; 0x35
 8014ee2:	a818      	add	r0, sp, #96	; 0x60
 8014ee4:	f7ff ff37 	bl	8014d56 <__copybits>
 8014ee8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014eea:	4620      	mov	r0, r4
 8014eec:	f7ff fb0a 	bl	8014504 <_Bfree>
 8014ef0:	3f01      	subs	r7, #1
 8014ef2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ef4:	2f04      	cmp	r7, #4
 8014ef6:	d806      	bhi.n	8014f06 <_strtod_l+0xee>
 8014ef8:	e8df f007 	tbb	[pc, r7]
 8014efc:	201d0314 	.word	0x201d0314
 8014f00:	14          	.byte	0x14
 8014f01:	00          	.byte	0x00
 8014f02:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014f06:	05e9      	lsls	r1, r5, #23
 8014f08:	bf48      	it	mi
 8014f0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014f0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014f12:	0d1b      	lsrs	r3, r3, #20
 8014f14:	051b      	lsls	r3, r3, #20
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1b9      	bne.n	8014e8e <_strtod_l+0x76>
 8014f1a:	f7fe faf9 	bl	8013510 <__errno>
 8014f1e:	2322      	movs	r3, #34	; 0x22
 8014f20:	6003      	str	r3, [r0, #0]
 8014f22:	e7b4      	b.n	8014e8e <_strtod_l+0x76>
 8014f24:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014f28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014f2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014f30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014f34:	e7e7      	b.n	8014f06 <_strtod_l+0xee>
 8014f36:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80150b0 <_strtod_l+0x298>
 8014f3a:	e7e4      	b.n	8014f06 <_strtod_l+0xee>
 8014f3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014f40:	f04f 38ff 	mov.w	r8, #4294967295
 8014f44:	e7df      	b.n	8014f06 <_strtod_l+0xee>
 8014f46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f48:	1c5a      	adds	r2, r3, #1
 8014f4a:	9215      	str	r2, [sp, #84]	; 0x54
 8014f4c:	785b      	ldrb	r3, [r3, #1]
 8014f4e:	2b30      	cmp	r3, #48	; 0x30
 8014f50:	d0f9      	beq.n	8014f46 <_strtod_l+0x12e>
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d09b      	beq.n	8014e8e <_strtod_l+0x76>
 8014f56:	2301      	movs	r3, #1
 8014f58:	f04f 0a00 	mov.w	sl, #0
 8014f5c:	9304      	str	r3, [sp, #16]
 8014f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014f66:	46d3      	mov	fp, sl
 8014f68:	220a      	movs	r2, #10
 8014f6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014f6c:	7806      	ldrb	r6, [r0, #0]
 8014f6e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014f72:	b2d9      	uxtb	r1, r3
 8014f74:	2909      	cmp	r1, #9
 8014f76:	d926      	bls.n	8014fc6 <_strtod_l+0x1ae>
 8014f78:	494c      	ldr	r1, [pc, #304]	; (80150ac <_strtod_l+0x294>)
 8014f7a:	2201      	movs	r2, #1
 8014f7c:	f000 ffe6 	bl	8015f4c <strncmp>
 8014f80:	2800      	cmp	r0, #0
 8014f82:	d030      	beq.n	8014fe6 <_strtod_l+0x1ce>
 8014f84:	2000      	movs	r0, #0
 8014f86:	4632      	mov	r2, r6
 8014f88:	9005      	str	r0, [sp, #20]
 8014f8a:	465e      	mov	r6, fp
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	2a65      	cmp	r2, #101	; 0x65
 8014f90:	d001      	beq.n	8014f96 <_strtod_l+0x17e>
 8014f92:	2a45      	cmp	r2, #69	; 0x45
 8014f94:	d113      	bne.n	8014fbe <_strtod_l+0x1a6>
 8014f96:	b91e      	cbnz	r6, 8014fa0 <_strtod_l+0x188>
 8014f98:	9a04      	ldr	r2, [sp, #16]
 8014f9a:	4302      	orrs	r2, r0
 8014f9c:	d094      	beq.n	8014ec8 <_strtod_l+0xb0>
 8014f9e:	2600      	movs	r6, #0
 8014fa0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014fa2:	1c6a      	adds	r2, r5, #1
 8014fa4:	9215      	str	r2, [sp, #84]	; 0x54
 8014fa6:	786a      	ldrb	r2, [r5, #1]
 8014fa8:	2a2b      	cmp	r2, #43	; 0x2b
 8014faa:	d074      	beq.n	8015096 <_strtod_l+0x27e>
 8014fac:	2a2d      	cmp	r2, #45	; 0x2d
 8014fae:	d078      	beq.n	80150a2 <_strtod_l+0x28a>
 8014fb0:	f04f 0c00 	mov.w	ip, #0
 8014fb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014fb8:	2909      	cmp	r1, #9
 8014fba:	d97f      	bls.n	80150bc <_strtod_l+0x2a4>
 8014fbc:	9515      	str	r5, [sp, #84]	; 0x54
 8014fbe:	2700      	movs	r7, #0
 8014fc0:	e09e      	b.n	8015100 <_strtod_l+0x2e8>
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	e7c8      	b.n	8014f58 <_strtod_l+0x140>
 8014fc6:	f1bb 0f08 	cmp.w	fp, #8
 8014fca:	bfd8      	it	le
 8014fcc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014fce:	f100 0001 	add.w	r0, r0, #1
 8014fd2:	bfda      	itte	le
 8014fd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8014fd8:	9309      	strle	r3, [sp, #36]	; 0x24
 8014fda:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014fde:	f10b 0b01 	add.w	fp, fp, #1
 8014fe2:	9015      	str	r0, [sp, #84]	; 0x54
 8014fe4:	e7c1      	b.n	8014f6a <_strtod_l+0x152>
 8014fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fe8:	1c5a      	adds	r2, r3, #1
 8014fea:	9215      	str	r2, [sp, #84]	; 0x54
 8014fec:	785a      	ldrb	r2, [r3, #1]
 8014fee:	f1bb 0f00 	cmp.w	fp, #0
 8014ff2:	d037      	beq.n	8015064 <_strtod_l+0x24c>
 8014ff4:	9005      	str	r0, [sp, #20]
 8014ff6:	465e      	mov	r6, fp
 8014ff8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014ffc:	2b09      	cmp	r3, #9
 8014ffe:	d912      	bls.n	8015026 <_strtod_l+0x20e>
 8015000:	2301      	movs	r3, #1
 8015002:	e7c4      	b.n	8014f8e <_strtod_l+0x176>
 8015004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015006:	1c5a      	adds	r2, r3, #1
 8015008:	9215      	str	r2, [sp, #84]	; 0x54
 801500a:	785a      	ldrb	r2, [r3, #1]
 801500c:	3001      	adds	r0, #1
 801500e:	2a30      	cmp	r2, #48	; 0x30
 8015010:	d0f8      	beq.n	8015004 <_strtod_l+0x1ec>
 8015012:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015016:	2b08      	cmp	r3, #8
 8015018:	f200 84c1 	bhi.w	801599e <_strtod_l+0xb86>
 801501c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801501e:	9005      	str	r0, [sp, #20]
 8015020:	2000      	movs	r0, #0
 8015022:	930b      	str	r3, [sp, #44]	; 0x2c
 8015024:	4606      	mov	r6, r0
 8015026:	3a30      	subs	r2, #48	; 0x30
 8015028:	f100 0301 	add.w	r3, r0, #1
 801502c:	d014      	beq.n	8015058 <_strtod_l+0x240>
 801502e:	9905      	ldr	r1, [sp, #20]
 8015030:	4419      	add	r1, r3
 8015032:	9105      	str	r1, [sp, #20]
 8015034:	4633      	mov	r3, r6
 8015036:	eb00 0c06 	add.w	ip, r0, r6
 801503a:	210a      	movs	r1, #10
 801503c:	4563      	cmp	r3, ip
 801503e:	d113      	bne.n	8015068 <_strtod_l+0x250>
 8015040:	1833      	adds	r3, r6, r0
 8015042:	2b08      	cmp	r3, #8
 8015044:	f106 0601 	add.w	r6, r6, #1
 8015048:	4406      	add	r6, r0
 801504a:	dc1a      	bgt.n	8015082 <_strtod_l+0x26a>
 801504c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801504e:	230a      	movs	r3, #10
 8015050:	fb03 2301 	mla	r3, r3, r1, r2
 8015054:	9309      	str	r3, [sp, #36]	; 0x24
 8015056:	2300      	movs	r3, #0
 8015058:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801505a:	1c51      	adds	r1, r2, #1
 801505c:	9115      	str	r1, [sp, #84]	; 0x54
 801505e:	7852      	ldrb	r2, [r2, #1]
 8015060:	4618      	mov	r0, r3
 8015062:	e7c9      	b.n	8014ff8 <_strtod_l+0x1e0>
 8015064:	4658      	mov	r0, fp
 8015066:	e7d2      	b.n	801500e <_strtod_l+0x1f6>
 8015068:	2b08      	cmp	r3, #8
 801506a:	f103 0301 	add.w	r3, r3, #1
 801506e:	dc03      	bgt.n	8015078 <_strtod_l+0x260>
 8015070:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015072:	434f      	muls	r7, r1
 8015074:	9709      	str	r7, [sp, #36]	; 0x24
 8015076:	e7e1      	b.n	801503c <_strtod_l+0x224>
 8015078:	2b10      	cmp	r3, #16
 801507a:	bfd8      	it	le
 801507c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015080:	e7dc      	b.n	801503c <_strtod_l+0x224>
 8015082:	2e10      	cmp	r6, #16
 8015084:	bfdc      	itt	le
 8015086:	230a      	movle	r3, #10
 8015088:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801508c:	e7e3      	b.n	8015056 <_strtod_l+0x23e>
 801508e:	2300      	movs	r3, #0
 8015090:	9305      	str	r3, [sp, #20]
 8015092:	2301      	movs	r3, #1
 8015094:	e780      	b.n	8014f98 <_strtod_l+0x180>
 8015096:	f04f 0c00 	mov.w	ip, #0
 801509a:	1caa      	adds	r2, r5, #2
 801509c:	9215      	str	r2, [sp, #84]	; 0x54
 801509e:	78aa      	ldrb	r2, [r5, #2]
 80150a0:	e788      	b.n	8014fb4 <_strtod_l+0x19c>
 80150a2:	f04f 0c01 	mov.w	ip, #1
 80150a6:	e7f8      	b.n	801509a <_strtod_l+0x282>
 80150a8:	080172b8 	.word	0x080172b8
 80150ac:	080172b4 	.word	0x080172b4
 80150b0:	7ff00000 	.word	0x7ff00000
 80150b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150b6:	1c51      	adds	r1, r2, #1
 80150b8:	9115      	str	r1, [sp, #84]	; 0x54
 80150ba:	7852      	ldrb	r2, [r2, #1]
 80150bc:	2a30      	cmp	r2, #48	; 0x30
 80150be:	d0f9      	beq.n	80150b4 <_strtod_l+0x29c>
 80150c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80150c4:	2908      	cmp	r1, #8
 80150c6:	f63f af7a 	bhi.w	8014fbe <_strtod_l+0x1a6>
 80150ca:	3a30      	subs	r2, #48	; 0x30
 80150cc:	9208      	str	r2, [sp, #32]
 80150ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150d0:	920c      	str	r2, [sp, #48]	; 0x30
 80150d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150d4:	1c57      	adds	r7, r2, #1
 80150d6:	9715      	str	r7, [sp, #84]	; 0x54
 80150d8:	7852      	ldrb	r2, [r2, #1]
 80150da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80150de:	f1be 0f09 	cmp.w	lr, #9
 80150e2:	d938      	bls.n	8015156 <_strtod_l+0x33e>
 80150e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80150e6:	1a7f      	subs	r7, r7, r1
 80150e8:	2f08      	cmp	r7, #8
 80150ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80150ee:	dc03      	bgt.n	80150f8 <_strtod_l+0x2e0>
 80150f0:	9908      	ldr	r1, [sp, #32]
 80150f2:	428f      	cmp	r7, r1
 80150f4:	bfa8      	it	ge
 80150f6:	460f      	movge	r7, r1
 80150f8:	f1bc 0f00 	cmp.w	ip, #0
 80150fc:	d000      	beq.n	8015100 <_strtod_l+0x2e8>
 80150fe:	427f      	negs	r7, r7
 8015100:	2e00      	cmp	r6, #0
 8015102:	d14f      	bne.n	80151a4 <_strtod_l+0x38c>
 8015104:	9904      	ldr	r1, [sp, #16]
 8015106:	4301      	orrs	r1, r0
 8015108:	f47f aec1 	bne.w	8014e8e <_strtod_l+0x76>
 801510c:	2b00      	cmp	r3, #0
 801510e:	f47f aedb 	bne.w	8014ec8 <_strtod_l+0xb0>
 8015112:	2a69      	cmp	r2, #105	; 0x69
 8015114:	d029      	beq.n	801516a <_strtod_l+0x352>
 8015116:	dc26      	bgt.n	8015166 <_strtod_l+0x34e>
 8015118:	2a49      	cmp	r2, #73	; 0x49
 801511a:	d026      	beq.n	801516a <_strtod_l+0x352>
 801511c:	2a4e      	cmp	r2, #78	; 0x4e
 801511e:	f47f aed3 	bne.w	8014ec8 <_strtod_l+0xb0>
 8015122:	499b      	ldr	r1, [pc, #620]	; (8015390 <_strtod_l+0x578>)
 8015124:	a815      	add	r0, sp, #84	; 0x54
 8015126:	f001 fa17 	bl	8016558 <__match>
 801512a:	2800      	cmp	r0, #0
 801512c:	f43f aecc 	beq.w	8014ec8 <_strtod_l+0xb0>
 8015130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	2b28      	cmp	r3, #40	; 0x28
 8015136:	d12f      	bne.n	8015198 <_strtod_l+0x380>
 8015138:	4996      	ldr	r1, [pc, #600]	; (8015394 <_strtod_l+0x57c>)
 801513a:	aa18      	add	r2, sp, #96	; 0x60
 801513c:	a815      	add	r0, sp, #84	; 0x54
 801513e:	f001 fa1f 	bl	8016580 <__hexnan>
 8015142:	2805      	cmp	r0, #5
 8015144:	d128      	bne.n	8015198 <_strtod_l+0x380>
 8015146:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801514c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015150:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015154:	e69b      	b.n	8014e8e <_strtod_l+0x76>
 8015156:	9f08      	ldr	r7, [sp, #32]
 8015158:	210a      	movs	r1, #10
 801515a:	fb01 2107 	mla	r1, r1, r7, r2
 801515e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015162:	9208      	str	r2, [sp, #32]
 8015164:	e7b5      	b.n	80150d2 <_strtod_l+0x2ba>
 8015166:	2a6e      	cmp	r2, #110	; 0x6e
 8015168:	e7d9      	b.n	801511e <_strtod_l+0x306>
 801516a:	498b      	ldr	r1, [pc, #556]	; (8015398 <_strtod_l+0x580>)
 801516c:	a815      	add	r0, sp, #84	; 0x54
 801516e:	f001 f9f3 	bl	8016558 <__match>
 8015172:	2800      	cmp	r0, #0
 8015174:	f43f aea8 	beq.w	8014ec8 <_strtod_l+0xb0>
 8015178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801517a:	4988      	ldr	r1, [pc, #544]	; (801539c <_strtod_l+0x584>)
 801517c:	3b01      	subs	r3, #1
 801517e:	a815      	add	r0, sp, #84	; 0x54
 8015180:	9315      	str	r3, [sp, #84]	; 0x54
 8015182:	f001 f9e9 	bl	8016558 <__match>
 8015186:	b910      	cbnz	r0, 801518e <_strtod_l+0x376>
 8015188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801518a:	3301      	adds	r3, #1
 801518c:	9315      	str	r3, [sp, #84]	; 0x54
 801518e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80153ac <_strtod_l+0x594>
 8015192:	f04f 0800 	mov.w	r8, #0
 8015196:	e67a      	b.n	8014e8e <_strtod_l+0x76>
 8015198:	4881      	ldr	r0, [pc, #516]	; (80153a0 <_strtod_l+0x588>)
 801519a:	f000 fef9 	bl	8015f90 <nan>
 801519e:	ec59 8b10 	vmov	r8, r9, d0
 80151a2:	e674      	b.n	8014e8e <_strtod_l+0x76>
 80151a4:	9b05      	ldr	r3, [sp, #20]
 80151a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151a8:	1afb      	subs	r3, r7, r3
 80151aa:	f1bb 0f00 	cmp.w	fp, #0
 80151ae:	bf08      	it	eq
 80151b0:	46b3      	moveq	fp, r6
 80151b2:	2e10      	cmp	r6, #16
 80151b4:	9308      	str	r3, [sp, #32]
 80151b6:	4635      	mov	r5, r6
 80151b8:	bfa8      	it	ge
 80151ba:	2510      	movge	r5, #16
 80151bc:	f7eb f9a2 	bl	8000504 <__aeabi_ui2d>
 80151c0:	2e09      	cmp	r6, #9
 80151c2:	4680      	mov	r8, r0
 80151c4:	4689      	mov	r9, r1
 80151c6:	dd13      	ble.n	80151f0 <_strtod_l+0x3d8>
 80151c8:	4b76      	ldr	r3, [pc, #472]	; (80153a4 <_strtod_l+0x58c>)
 80151ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80151ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80151d2:	f7eb fa11 	bl	80005f8 <__aeabi_dmul>
 80151d6:	4680      	mov	r8, r0
 80151d8:	4650      	mov	r0, sl
 80151da:	4689      	mov	r9, r1
 80151dc:	f7eb f992 	bl	8000504 <__aeabi_ui2d>
 80151e0:	4602      	mov	r2, r0
 80151e2:	460b      	mov	r3, r1
 80151e4:	4640      	mov	r0, r8
 80151e6:	4649      	mov	r1, r9
 80151e8:	f7eb f850 	bl	800028c <__adddf3>
 80151ec:	4680      	mov	r8, r0
 80151ee:	4689      	mov	r9, r1
 80151f0:	2e0f      	cmp	r6, #15
 80151f2:	dc38      	bgt.n	8015266 <_strtod_l+0x44e>
 80151f4:	9b08      	ldr	r3, [sp, #32]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f43f ae49 	beq.w	8014e8e <_strtod_l+0x76>
 80151fc:	dd24      	ble.n	8015248 <_strtod_l+0x430>
 80151fe:	2b16      	cmp	r3, #22
 8015200:	dc0b      	bgt.n	801521a <_strtod_l+0x402>
 8015202:	4968      	ldr	r1, [pc, #416]	; (80153a4 <_strtod_l+0x58c>)
 8015204:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801520c:	4642      	mov	r2, r8
 801520e:	464b      	mov	r3, r9
 8015210:	f7eb f9f2 	bl	80005f8 <__aeabi_dmul>
 8015214:	4680      	mov	r8, r0
 8015216:	4689      	mov	r9, r1
 8015218:	e639      	b.n	8014e8e <_strtod_l+0x76>
 801521a:	9a08      	ldr	r2, [sp, #32]
 801521c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015220:	4293      	cmp	r3, r2
 8015222:	db20      	blt.n	8015266 <_strtod_l+0x44e>
 8015224:	4c5f      	ldr	r4, [pc, #380]	; (80153a4 <_strtod_l+0x58c>)
 8015226:	f1c6 060f 	rsb	r6, r6, #15
 801522a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801522e:	4642      	mov	r2, r8
 8015230:	464b      	mov	r3, r9
 8015232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015236:	f7eb f9df 	bl	80005f8 <__aeabi_dmul>
 801523a:	9b08      	ldr	r3, [sp, #32]
 801523c:	1b9e      	subs	r6, r3, r6
 801523e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015242:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015246:	e7e3      	b.n	8015210 <_strtod_l+0x3f8>
 8015248:	9b08      	ldr	r3, [sp, #32]
 801524a:	3316      	adds	r3, #22
 801524c:	db0b      	blt.n	8015266 <_strtod_l+0x44e>
 801524e:	9b05      	ldr	r3, [sp, #20]
 8015250:	1bdf      	subs	r7, r3, r7
 8015252:	4b54      	ldr	r3, [pc, #336]	; (80153a4 <_strtod_l+0x58c>)
 8015254:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015258:	e9d7 2300 	ldrd	r2, r3, [r7]
 801525c:	4640      	mov	r0, r8
 801525e:	4649      	mov	r1, r9
 8015260:	f7eb faf4 	bl	800084c <__aeabi_ddiv>
 8015264:	e7d6      	b.n	8015214 <_strtod_l+0x3fc>
 8015266:	9b08      	ldr	r3, [sp, #32]
 8015268:	1b75      	subs	r5, r6, r5
 801526a:	441d      	add	r5, r3
 801526c:	2d00      	cmp	r5, #0
 801526e:	dd70      	ble.n	8015352 <_strtod_l+0x53a>
 8015270:	f015 030f 	ands.w	r3, r5, #15
 8015274:	d00a      	beq.n	801528c <_strtod_l+0x474>
 8015276:	494b      	ldr	r1, [pc, #300]	; (80153a4 <_strtod_l+0x58c>)
 8015278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801527c:	4642      	mov	r2, r8
 801527e:	464b      	mov	r3, r9
 8015280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015284:	f7eb f9b8 	bl	80005f8 <__aeabi_dmul>
 8015288:	4680      	mov	r8, r0
 801528a:	4689      	mov	r9, r1
 801528c:	f035 050f 	bics.w	r5, r5, #15
 8015290:	d04d      	beq.n	801532e <_strtod_l+0x516>
 8015292:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015296:	dd22      	ble.n	80152de <_strtod_l+0x4c6>
 8015298:	2500      	movs	r5, #0
 801529a:	46ab      	mov	fp, r5
 801529c:	9509      	str	r5, [sp, #36]	; 0x24
 801529e:	9505      	str	r5, [sp, #20]
 80152a0:	2322      	movs	r3, #34	; 0x22
 80152a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80153ac <_strtod_l+0x594>
 80152a6:	6023      	str	r3, [r4, #0]
 80152a8:	f04f 0800 	mov.w	r8, #0
 80152ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	f43f aded 	beq.w	8014e8e <_strtod_l+0x76>
 80152b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80152b6:	4620      	mov	r0, r4
 80152b8:	f7ff f924 	bl	8014504 <_Bfree>
 80152bc:	9905      	ldr	r1, [sp, #20]
 80152be:	4620      	mov	r0, r4
 80152c0:	f7ff f920 	bl	8014504 <_Bfree>
 80152c4:	4659      	mov	r1, fp
 80152c6:	4620      	mov	r0, r4
 80152c8:	f7ff f91c 	bl	8014504 <_Bfree>
 80152cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152ce:	4620      	mov	r0, r4
 80152d0:	f7ff f918 	bl	8014504 <_Bfree>
 80152d4:	4629      	mov	r1, r5
 80152d6:	4620      	mov	r0, r4
 80152d8:	f7ff f914 	bl	8014504 <_Bfree>
 80152dc:	e5d7      	b.n	8014e8e <_strtod_l+0x76>
 80152de:	4b32      	ldr	r3, [pc, #200]	; (80153a8 <_strtod_l+0x590>)
 80152e0:	9304      	str	r3, [sp, #16]
 80152e2:	2300      	movs	r3, #0
 80152e4:	112d      	asrs	r5, r5, #4
 80152e6:	4640      	mov	r0, r8
 80152e8:	4649      	mov	r1, r9
 80152ea:	469a      	mov	sl, r3
 80152ec:	2d01      	cmp	r5, #1
 80152ee:	dc21      	bgt.n	8015334 <_strtod_l+0x51c>
 80152f0:	b10b      	cbz	r3, 80152f6 <_strtod_l+0x4de>
 80152f2:	4680      	mov	r8, r0
 80152f4:	4689      	mov	r9, r1
 80152f6:	492c      	ldr	r1, [pc, #176]	; (80153a8 <_strtod_l+0x590>)
 80152f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80152fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015300:	4642      	mov	r2, r8
 8015302:	464b      	mov	r3, r9
 8015304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015308:	f7eb f976 	bl	80005f8 <__aeabi_dmul>
 801530c:	4b27      	ldr	r3, [pc, #156]	; (80153ac <_strtod_l+0x594>)
 801530e:	460a      	mov	r2, r1
 8015310:	400b      	ands	r3, r1
 8015312:	4927      	ldr	r1, [pc, #156]	; (80153b0 <_strtod_l+0x598>)
 8015314:	428b      	cmp	r3, r1
 8015316:	4680      	mov	r8, r0
 8015318:	d8be      	bhi.n	8015298 <_strtod_l+0x480>
 801531a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801531e:	428b      	cmp	r3, r1
 8015320:	bf86      	itte	hi
 8015322:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80153b4 <_strtod_l+0x59c>
 8015326:	f04f 38ff 	movhi.w	r8, #4294967295
 801532a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801532e:	2300      	movs	r3, #0
 8015330:	9304      	str	r3, [sp, #16]
 8015332:	e07b      	b.n	801542c <_strtod_l+0x614>
 8015334:	07ea      	lsls	r2, r5, #31
 8015336:	d505      	bpl.n	8015344 <_strtod_l+0x52c>
 8015338:	9b04      	ldr	r3, [sp, #16]
 801533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533e:	f7eb f95b 	bl	80005f8 <__aeabi_dmul>
 8015342:	2301      	movs	r3, #1
 8015344:	9a04      	ldr	r2, [sp, #16]
 8015346:	3208      	adds	r2, #8
 8015348:	f10a 0a01 	add.w	sl, sl, #1
 801534c:	106d      	asrs	r5, r5, #1
 801534e:	9204      	str	r2, [sp, #16]
 8015350:	e7cc      	b.n	80152ec <_strtod_l+0x4d4>
 8015352:	d0ec      	beq.n	801532e <_strtod_l+0x516>
 8015354:	426d      	negs	r5, r5
 8015356:	f015 020f 	ands.w	r2, r5, #15
 801535a:	d00a      	beq.n	8015372 <_strtod_l+0x55a>
 801535c:	4b11      	ldr	r3, [pc, #68]	; (80153a4 <_strtod_l+0x58c>)
 801535e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015362:	4640      	mov	r0, r8
 8015364:	4649      	mov	r1, r9
 8015366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536a:	f7eb fa6f 	bl	800084c <__aeabi_ddiv>
 801536e:	4680      	mov	r8, r0
 8015370:	4689      	mov	r9, r1
 8015372:	112d      	asrs	r5, r5, #4
 8015374:	d0db      	beq.n	801532e <_strtod_l+0x516>
 8015376:	2d1f      	cmp	r5, #31
 8015378:	dd1e      	ble.n	80153b8 <_strtod_l+0x5a0>
 801537a:	2500      	movs	r5, #0
 801537c:	46ab      	mov	fp, r5
 801537e:	9509      	str	r5, [sp, #36]	; 0x24
 8015380:	9505      	str	r5, [sp, #20]
 8015382:	2322      	movs	r3, #34	; 0x22
 8015384:	f04f 0800 	mov.w	r8, #0
 8015388:	f04f 0900 	mov.w	r9, #0
 801538c:	6023      	str	r3, [r4, #0]
 801538e:	e78d      	b.n	80152ac <_strtod_l+0x494>
 8015390:	080170a1 	.word	0x080170a1
 8015394:	080172cc 	.word	0x080172cc
 8015398:	08017099 	.word	0x08017099
 801539c:	080170d0 	.word	0x080170d0
 80153a0:	0801745d 	.word	0x0801745d
 80153a4:	080171e0 	.word	0x080171e0
 80153a8:	080171b8 	.word	0x080171b8
 80153ac:	7ff00000 	.word	0x7ff00000
 80153b0:	7ca00000 	.word	0x7ca00000
 80153b4:	7fefffff 	.word	0x7fefffff
 80153b8:	f015 0310 	ands.w	r3, r5, #16
 80153bc:	bf18      	it	ne
 80153be:	236a      	movne	r3, #106	; 0x6a
 80153c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015764 <_strtod_l+0x94c>
 80153c4:	9304      	str	r3, [sp, #16]
 80153c6:	4640      	mov	r0, r8
 80153c8:	4649      	mov	r1, r9
 80153ca:	2300      	movs	r3, #0
 80153cc:	07ea      	lsls	r2, r5, #31
 80153ce:	d504      	bpl.n	80153da <_strtod_l+0x5c2>
 80153d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80153d4:	f7eb f910 	bl	80005f8 <__aeabi_dmul>
 80153d8:	2301      	movs	r3, #1
 80153da:	106d      	asrs	r5, r5, #1
 80153dc:	f10a 0a08 	add.w	sl, sl, #8
 80153e0:	d1f4      	bne.n	80153cc <_strtod_l+0x5b4>
 80153e2:	b10b      	cbz	r3, 80153e8 <_strtod_l+0x5d0>
 80153e4:	4680      	mov	r8, r0
 80153e6:	4689      	mov	r9, r1
 80153e8:	9b04      	ldr	r3, [sp, #16]
 80153ea:	b1bb      	cbz	r3, 801541c <_strtod_l+0x604>
 80153ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80153f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	4649      	mov	r1, r9
 80153f8:	dd10      	ble.n	801541c <_strtod_l+0x604>
 80153fa:	2b1f      	cmp	r3, #31
 80153fc:	f340 811e 	ble.w	801563c <_strtod_l+0x824>
 8015400:	2b34      	cmp	r3, #52	; 0x34
 8015402:	bfde      	ittt	le
 8015404:	f04f 33ff 	movle.w	r3, #4294967295
 8015408:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801540c:	4093      	lslle	r3, r2
 801540e:	f04f 0800 	mov.w	r8, #0
 8015412:	bfcc      	ite	gt
 8015414:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015418:	ea03 0901 	andle.w	r9, r3, r1
 801541c:	2200      	movs	r2, #0
 801541e:	2300      	movs	r3, #0
 8015420:	4640      	mov	r0, r8
 8015422:	4649      	mov	r1, r9
 8015424:	f7eb fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8015428:	2800      	cmp	r0, #0
 801542a:	d1a6      	bne.n	801537a <_strtod_l+0x562>
 801542c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801542e:	9300      	str	r3, [sp, #0]
 8015430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015432:	4633      	mov	r3, r6
 8015434:	465a      	mov	r2, fp
 8015436:	4620      	mov	r0, r4
 8015438:	f7ff f8cc 	bl	80145d4 <__s2b>
 801543c:	9009      	str	r0, [sp, #36]	; 0x24
 801543e:	2800      	cmp	r0, #0
 8015440:	f43f af2a 	beq.w	8015298 <_strtod_l+0x480>
 8015444:	9a08      	ldr	r2, [sp, #32]
 8015446:	9b05      	ldr	r3, [sp, #20]
 8015448:	2a00      	cmp	r2, #0
 801544a:	eba3 0307 	sub.w	r3, r3, r7
 801544e:	bfa8      	it	ge
 8015450:	2300      	movge	r3, #0
 8015452:	930c      	str	r3, [sp, #48]	; 0x30
 8015454:	2500      	movs	r5, #0
 8015456:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801545a:	9312      	str	r3, [sp, #72]	; 0x48
 801545c:	46ab      	mov	fp, r5
 801545e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015460:	4620      	mov	r0, r4
 8015462:	6859      	ldr	r1, [r3, #4]
 8015464:	f7ff f80e 	bl	8014484 <_Balloc>
 8015468:	9005      	str	r0, [sp, #20]
 801546a:	2800      	cmp	r0, #0
 801546c:	f43f af18 	beq.w	80152a0 <_strtod_l+0x488>
 8015470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015472:	691a      	ldr	r2, [r3, #16]
 8015474:	3202      	adds	r2, #2
 8015476:	f103 010c 	add.w	r1, r3, #12
 801547a:	0092      	lsls	r2, r2, #2
 801547c:	300c      	adds	r0, #12
 801547e:	f7fe f873 	bl	8013568 <memcpy>
 8015482:	ec49 8b10 	vmov	d0, r8, r9
 8015486:	aa18      	add	r2, sp, #96	; 0x60
 8015488:	a917      	add	r1, sp, #92	; 0x5c
 801548a:	4620      	mov	r0, r4
 801548c:	f7ff fbd6 	bl	8014c3c <__d2b>
 8015490:	ec49 8b18 	vmov	d8, r8, r9
 8015494:	9016      	str	r0, [sp, #88]	; 0x58
 8015496:	2800      	cmp	r0, #0
 8015498:	f43f af02 	beq.w	80152a0 <_strtod_l+0x488>
 801549c:	2101      	movs	r1, #1
 801549e:	4620      	mov	r0, r4
 80154a0:	f7ff f930 	bl	8014704 <__i2b>
 80154a4:	4683      	mov	fp, r0
 80154a6:	2800      	cmp	r0, #0
 80154a8:	f43f aefa 	beq.w	80152a0 <_strtod_l+0x488>
 80154ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80154ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80154b0:	2e00      	cmp	r6, #0
 80154b2:	bfab      	itete	ge
 80154b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80154b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80154b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80154ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80154be:	bfac      	ite	ge
 80154c0:	eb06 0a03 	addge.w	sl, r6, r3
 80154c4:	1b9f      	sublt	r7, r3, r6
 80154c6:	9b04      	ldr	r3, [sp, #16]
 80154c8:	1af6      	subs	r6, r6, r3
 80154ca:	4416      	add	r6, r2
 80154cc:	4ba0      	ldr	r3, [pc, #640]	; (8015750 <_strtod_l+0x938>)
 80154ce:	3e01      	subs	r6, #1
 80154d0:	429e      	cmp	r6, r3
 80154d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80154d6:	f280 80c4 	bge.w	8015662 <_strtod_l+0x84a>
 80154da:	1b9b      	subs	r3, r3, r6
 80154dc:	2b1f      	cmp	r3, #31
 80154de:	eba2 0203 	sub.w	r2, r2, r3
 80154e2:	f04f 0101 	mov.w	r1, #1
 80154e6:	f300 80b0 	bgt.w	801564a <_strtod_l+0x832>
 80154ea:	fa01 f303 	lsl.w	r3, r1, r3
 80154ee:	930e      	str	r3, [sp, #56]	; 0x38
 80154f0:	2300      	movs	r3, #0
 80154f2:	930d      	str	r3, [sp, #52]	; 0x34
 80154f4:	eb0a 0602 	add.w	r6, sl, r2
 80154f8:	9b04      	ldr	r3, [sp, #16]
 80154fa:	45b2      	cmp	sl, r6
 80154fc:	4417      	add	r7, r2
 80154fe:	441f      	add	r7, r3
 8015500:	4653      	mov	r3, sl
 8015502:	bfa8      	it	ge
 8015504:	4633      	movge	r3, r6
 8015506:	42bb      	cmp	r3, r7
 8015508:	bfa8      	it	ge
 801550a:	463b      	movge	r3, r7
 801550c:	2b00      	cmp	r3, #0
 801550e:	bfc2      	ittt	gt
 8015510:	1af6      	subgt	r6, r6, r3
 8015512:	1aff      	subgt	r7, r7, r3
 8015514:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801551a:	2b00      	cmp	r3, #0
 801551c:	dd17      	ble.n	801554e <_strtod_l+0x736>
 801551e:	4659      	mov	r1, fp
 8015520:	461a      	mov	r2, r3
 8015522:	4620      	mov	r0, r4
 8015524:	f7ff f9ae 	bl	8014884 <__pow5mult>
 8015528:	4683      	mov	fp, r0
 801552a:	2800      	cmp	r0, #0
 801552c:	f43f aeb8 	beq.w	80152a0 <_strtod_l+0x488>
 8015530:	4601      	mov	r1, r0
 8015532:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015534:	4620      	mov	r0, r4
 8015536:	f7ff f8fb 	bl	8014730 <__multiply>
 801553a:	900b      	str	r0, [sp, #44]	; 0x2c
 801553c:	2800      	cmp	r0, #0
 801553e:	f43f aeaf 	beq.w	80152a0 <_strtod_l+0x488>
 8015542:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015544:	4620      	mov	r0, r4
 8015546:	f7fe ffdd 	bl	8014504 <_Bfree>
 801554a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801554c:	9316      	str	r3, [sp, #88]	; 0x58
 801554e:	2e00      	cmp	r6, #0
 8015550:	f300 808c 	bgt.w	801566c <_strtod_l+0x854>
 8015554:	9b08      	ldr	r3, [sp, #32]
 8015556:	2b00      	cmp	r3, #0
 8015558:	dd08      	ble.n	801556c <_strtod_l+0x754>
 801555a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801555c:	9905      	ldr	r1, [sp, #20]
 801555e:	4620      	mov	r0, r4
 8015560:	f7ff f990 	bl	8014884 <__pow5mult>
 8015564:	9005      	str	r0, [sp, #20]
 8015566:	2800      	cmp	r0, #0
 8015568:	f43f ae9a 	beq.w	80152a0 <_strtod_l+0x488>
 801556c:	2f00      	cmp	r7, #0
 801556e:	dd08      	ble.n	8015582 <_strtod_l+0x76a>
 8015570:	9905      	ldr	r1, [sp, #20]
 8015572:	463a      	mov	r2, r7
 8015574:	4620      	mov	r0, r4
 8015576:	f7ff f9df 	bl	8014938 <__lshift>
 801557a:	9005      	str	r0, [sp, #20]
 801557c:	2800      	cmp	r0, #0
 801557e:	f43f ae8f 	beq.w	80152a0 <_strtod_l+0x488>
 8015582:	f1ba 0f00 	cmp.w	sl, #0
 8015586:	dd08      	ble.n	801559a <_strtod_l+0x782>
 8015588:	4659      	mov	r1, fp
 801558a:	4652      	mov	r2, sl
 801558c:	4620      	mov	r0, r4
 801558e:	f7ff f9d3 	bl	8014938 <__lshift>
 8015592:	4683      	mov	fp, r0
 8015594:	2800      	cmp	r0, #0
 8015596:	f43f ae83 	beq.w	80152a0 <_strtod_l+0x488>
 801559a:	9a05      	ldr	r2, [sp, #20]
 801559c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801559e:	4620      	mov	r0, r4
 80155a0:	f7ff fa52 	bl	8014a48 <__mdiff>
 80155a4:	4605      	mov	r5, r0
 80155a6:	2800      	cmp	r0, #0
 80155a8:	f43f ae7a 	beq.w	80152a0 <_strtod_l+0x488>
 80155ac:	68c3      	ldr	r3, [r0, #12]
 80155ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80155b0:	2300      	movs	r3, #0
 80155b2:	60c3      	str	r3, [r0, #12]
 80155b4:	4659      	mov	r1, fp
 80155b6:	f7ff fa2b 	bl	8014a10 <__mcmp>
 80155ba:	2800      	cmp	r0, #0
 80155bc:	da60      	bge.n	8015680 <_strtod_l+0x868>
 80155be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155c0:	ea53 0308 	orrs.w	r3, r3, r8
 80155c4:	f040 8084 	bne.w	80156d0 <_strtod_l+0x8b8>
 80155c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d17f      	bne.n	80156d0 <_strtod_l+0x8b8>
 80155d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80155d4:	0d1b      	lsrs	r3, r3, #20
 80155d6:	051b      	lsls	r3, r3, #20
 80155d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80155dc:	d978      	bls.n	80156d0 <_strtod_l+0x8b8>
 80155de:	696b      	ldr	r3, [r5, #20]
 80155e0:	b913      	cbnz	r3, 80155e8 <_strtod_l+0x7d0>
 80155e2:	692b      	ldr	r3, [r5, #16]
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	dd73      	ble.n	80156d0 <_strtod_l+0x8b8>
 80155e8:	4629      	mov	r1, r5
 80155ea:	2201      	movs	r2, #1
 80155ec:	4620      	mov	r0, r4
 80155ee:	f7ff f9a3 	bl	8014938 <__lshift>
 80155f2:	4659      	mov	r1, fp
 80155f4:	4605      	mov	r5, r0
 80155f6:	f7ff fa0b 	bl	8014a10 <__mcmp>
 80155fa:	2800      	cmp	r0, #0
 80155fc:	dd68      	ble.n	80156d0 <_strtod_l+0x8b8>
 80155fe:	9904      	ldr	r1, [sp, #16]
 8015600:	4a54      	ldr	r2, [pc, #336]	; (8015754 <_strtod_l+0x93c>)
 8015602:	464b      	mov	r3, r9
 8015604:	2900      	cmp	r1, #0
 8015606:	f000 8084 	beq.w	8015712 <_strtod_l+0x8fa>
 801560a:	ea02 0109 	and.w	r1, r2, r9
 801560e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015612:	dc7e      	bgt.n	8015712 <_strtod_l+0x8fa>
 8015614:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015618:	f77f aeb3 	ble.w	8015382 <_strtod_l+0x56a>
 801561c:	4b4e      	ldr	r3, [pc, #312]	; (8015758 <_strtod_l+0x940>)
 801561e:	4640      	mov	r0, r8
 8015620:	4649      	mov	r1, r9
 8015622:	2200      	movs	r2, #0
 8015624:	f7ea ffe8 	bl	80005f8 <__aeabi_dmul>
 8015628:	4b4a      	ldr	r3, [pc, #296]	; (8015754 <_strtod_l+0x93c>)
 801562a:	400b      	ands	r3, r1
 801562c:	4680      	mov	r8, r0
 801562e:	4689      	mov	r9, r1
 8015630:	2b00      	cmp	r3, #0
 8015632:	f47f ae3f 	bne.w	80152b4 <_strtod_l+0x49c>
 8015636:	2322      	movs	r3, #34	; 0x22
 8015638:	6023      	str	r3, [r4, #0]
 801563a:	e63b      	b.n	80152b4 <_strtod_l+0x49c>
 801563c:	f04f 32ff 	mov.w	r2, #4294967295
 8015640:	fa02 f303 	lsl.w	r3, r2, r3
 8015644:	ea03 0808 	and.w	r8, r3, r8
 8015648:	e6e8      	b.n	801541c <_strtod_l+0x604>
 801564a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801564e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015652:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015656:	36e2      	adds	r6, #226	; 0xe2
 8015658:	fa01 f306 	lsl.w	r3, r1, r6
 801565c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015660:	e748      	b.n	80154f4 <_strtod_l+0x6dc>
 8015662:	2100      	movs	r1, #0
 8015664:	2301      	movs	r3, #1
 8015666:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801566a:	e743      	b.n	80154f4 <_strtod_l+0x6dc>
 801566c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801566e:	4632      	mov	r2, r6
 8015670:	4620      	mov	r0, r4
 8015672:	f7ff f961 	bl	8014938 <__lshift>
 8015676:	9016      	str	r0, [sp, #88]	; 0x58
 8015678:	2800      	cmp	r0, #0
 801567a:	f47f af6b 	bne.w	8015554 <_strtod_l+0x73c>
 801567e:	e60f      	b.n	80152a0 <_strtod_l+0x488>
 8015680:	46ca      	mov	sl, r9
 8015682:	d171      	bne.n	8015768 <_strtod_l+0x950>
 8015684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015686:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801568a:	b352      	cbz	r2, 80156e2 <_strtod_l+0x8ca>
 801568c:	4a33      	ldr	r2, [pc, #204]	; (801575c <_strtod_l+0x944>)
 801568e:	4293      	cmp	r3, r2
 8015690:	d12a      	bne.n	80156e8 <_strtod_l+0x8d0>
 8015692:	9b04      	ldr	r3, [sp, #16]
 8015694:	4641      	mov	r1, r8
 8015696:	b1fb      	cbz	r3, 80156d8 <_strtod_l+0x8c0>
 8015698:	4b2e      	ldr	r3, [pc, #184]	; (8015754 <_strtod_l+0x93c>)
 801569a:	ea09 0303 	and.w	r3, r9, r3
 801569e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80156a2:	f04f 32ff 	mov.w	r2, #4294967295
 80156a6:	d81a      	bhi.n	80156de <_strtod_l+0x8c6>
 80156a8:	0d1b      	lsrs	r3, r3, #20
 80156aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80156ae:	fa02 f303 	lsl.w	r3, r2, r3
 80156b2:	4299      	cmp	r1, r3
 80156b4:	d118      	bne.n	80156e8 <_strtod_l+0x8d0>
 80156b6:	4b2a      	ldr	r3, [pc, #168]	; (8015760 <_strtod_l+0x948>)
 80156b8:	459a      	cmp	sl, r3
 80156ba:	d102      	bne.n	80156c2 <_strtod_l+0x8aa>
 80156bc:	3101      	adds	r1, #1
 80156be:	f43f adef 	beq.w	80152a0 <_strtod_l+0x488>
 80156c2:	4b24      	ldr	r3, [pc, #144]	; (8015754 <_strtod_l+0x93c>)
 80156c4:	ea0a 0303 	and.w	r3, sl, r3
 80156c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80156cc:	f04f 0800 	mov.w	r8, #0
 80156d0:	9b04      	ldr	r3, [sp, #16]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d1a2      	bne.n	801561c <_strtod_l+0x804>
 80156d6:	e5ed      	b.n	80152b4 <_strtod_l+0x49c>
 80156d8:	f04f 33ff 	mov.w	r3, #4294967295
 80156dc:	e7e9      	b.n	80156b2 <_strtod_l+0x89a>
 80156de:	4613      	mov	r3, r2
 80156e0:	e7e7      	b.n	80156b2 <_strtod_l+0x89a>
 80156e2:	ea53 0308 	orrs.w	r3, r3, r8
 80156e6:	d08a      	beq.n	80155fe <_strtod_l+0x7e6>
 80156e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156ea:	b1e3      	cbz	r3, 8015726 <_strtod_l+0x90e>
 80156ec:	ea13 0f0a 	tst.w	r3, sl
 80156f0:	d0ee      	beq.n	80156d0 <_strtod_l+0x8b8>
 80156f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156f4:	9a04      	ldr	r2, [sp, #16]
 80156f6:	4640      	mov	r0, r8
 80156f8:	4649      	mov	r1, r9
 80156fa:	b1c3      	cbz	r3, 801572e <_strtod_l+0x916>
 80156fc:	f7ff fb6f 	bl	8014dde <sulp>
 8015700:	4602      	mov	r2, r0
 8015702:	460b      	mov	r3, r1
 8015704:	ec51 0b18 	vmov	r0, r1, d8
 8015708:	f7ea fdc0 	bl	800028c <__adddf3>
 801570c:	4680      	mov	r8, r0
 801570e:	4689      	mov	r9, r1
 8015710:	e7de      	b.n	80156d0 <_strtod_l+0x8b8>
 8015712:	4013      	ands	r3, r2
 8015714:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015718:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801571c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015720:	f04f 38ff 	mov.w	r8, #4294967295
 8015724:	e7d4      	b.n	80156d0 <_strtod_l+0x8b8>
 8015726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015728:	ea13 0f08 	tst.w	r3, r8
 801572c:	e7e0      	b.n	80156f0 <_strtod_l+0x8d8>
 801572e:	f7ff fb56 	bl	8014dde <sulp>
 8015732:	4602      	mov	r2, r0
 8015734:	460b      	mov	r3, r1
 8015736:	ec51 0b18 	vmov	r0, r1, d8
 801573a:	f7ea fda5 	bl	8000288 <__aeabi_dsub>
 801573e:	2200      	movs	r2, #0
 8015740:	2300      	movs	r3, #0
 8015742:	4680      	mov	r8, r0
 8015744:	4689      	mov	r9, r1
 8015746:	f7eb f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 801574a:	2800      	cmp	r0, #0
 801574c:	d0c0      	beq.n	80156d0 <_strtod_l+0x8b8>
 801574e:	e618      	b.n	8015382 <_strtod_l+0x56a>
 8015750:	fffffc02 	.word	0xfffffc02
 8015754:	7ff00000 	.word	0x7ff00000
 8015758:	39500000 	.word	0x39500000
 801575c:	000fffff 	.word	0x000fffff
 8015760:	7fefffff 	.word	0x7fefffff
 8015764:	080172e0 	.word	0x080172e0
 8015768:	4659      	mov	r1, fp
 801576a:	4628      	mov	r0, r5
 801576c:	f7ff fac0 	bl	8014cf0 <__ratio>
 8015770:	ec57 6b10 	vmov	r6, r7, d0
 8015774:	ee10 0a10 	vmov	r0, s0
 8015778:	2200      	movs	r2, #0
 801577a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801577e:	4639      	mov	r1, r7
 8015780:	f7eb f9b6 	bl	8000af0 <__aeabi_dcmple>
 8015784:	2800      	cmp	r0, #0
 8015786:	d071      	beq.n	801586c <_strtod_l+0xa54>
 8015788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801578a:	2b00      	cmp	r3, #0
 801578c:	d17c      	bne.n	8015888 <_strtod_l+0xa70>
 801578e:	f1b8 0f00 	cmp.w	r8, #0
 8015792:	d15a      	bne.n	801584a <_strtod_l+0xa32>
 8015794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015798:	2b00      	cmp	r3, #0
 801579a:	d15d      	bne.n	8015858 <_strtod_l+0xa40>
 801579c:	4b90      	ldr	r3, [pc, #576]	; (80159e0 <_strtod_l+0xbc8>)
 801579e:	2200      	movs	r2, #0
 80157a0:	4630      	mov	r0, r6
 80157a2:	4639      	mov	r1, r7
 80157a4:	f7eb f99a 	bl	8000adc <__aeabi_dcmplt>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d15c      	bne.n	8015866 <_strtod_l+0xa4e>
 80157ac:	4630      	mov	r0, r6
 80157ae:	4639      	mov	r1, r7
 80157b0:	4b8c      	ldr	r3, [pc, #560]	; (80159e4 <_strtod_l+0xbcc>)
 80157b2:	2200      	movs	r2, #0
 80157b4:	f7ea ff20 	bl	80005f8 <__aeabi_dmul>
 80157b8:	4606      	mov	r6, r0
 80157ba:	460f      	mov	r7, r1
 80157bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80157c0:	9606      	str	r6, [sp, #24]
 80157c2:	9307      	str	r3, [sp, #28]
 80157c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80157cc:	4b86      	ldr	r3, [pc, #536]	; (80159e8 <_strtod_l+0xbd0>)
 80157ce:	ea0a 0303 	and.w	r3, sl, r3
 80157d2:	930d      	str	r3, [sp, #52]	; 0x34
 80157d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157d6:	4b85      	ldr	r3, [pc, #532]	; (80159ec <_strtod_l+0xbd4>)
 80157d8:	429a      	cmp	r2, r3
 80157da:	f040 8090 	bne.w	80158fe <_strtod_l+0xae6>
 80157de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80157e2:	ec49 8b10 	vmov	d0, r8, r9
 80157e6:	f7ff f9b9 	bl	8014b5c <__ulp>
 80157ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157ee:	ec51 0b10 	vmov	r0, r1, d0
 80157f2:	f7ea ff01 	bl	80005f8 <__aeabi_dmul>
 80157f6:	4642      	mov	r2, r8
 80157f8:	464b      	mov	r3, r9
 80157fa:	f7ea fd47 	bl	800028c <__adddf3>
 80157fe:	460b      	mov	r3, r1
 8015800:	4979      	ldr	r1, [pc, #484]	; (80159e8 <_strtod_l+0xbd0>)
 8015802:	4a7b      	ldr	r2, [pc, #492]	; (80159f0 <_strtod_l+0xbd8>)
 8015804:	4019      	ands	r1, r3
 8015806:	4291      	cmp	r1, r2
 8015808:	4680      	mov	r8, r0
 801580a:	d944      	bls.n	8015896 <_strtod_l+0xa7e>
 801580c:	ee18 2a90 	vmov	r2, s17
 8015810:	4b78      	ldr	r3, [pc, #480]	; (80159f4 <_strtod_l+0xbdc>)
 8015812:	429a      	cmp	r2, r3
 8015814:	d104      	bne.n	8015820 <_strtod_l+0xa08>
 8015816:	ee18 3a10 	vmov	r3, s16
 801581a:	3301      	adds	r3, #1
 801581c:	f43f ad40 	beq.w	80152a0 <_strtod_l+0x488>
 8015820:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80159f4 <_strtod_l+0xbdc>
 8015824:	f04f 38ff 	mov.w	r8, #4294967295
 8015828:	9916      	ldr	r1, [sp, #88]	; 0x58
 801582a:	4620      	mov	r0, r4
 801582c:	f7fe fe6a 	bl	8014504 <_Bfree>
 8015830:	9905      	ldr	r1, [sp, #20]
 8015832:	4620      	mov	r0, r4
 8015834:	f7fe fe66 	bl	8014504 <_Bfree>
 8015838:	4659      	mov	r1, fp
 801583a:	4620      	mov	r0, r4
 801583c:	f7fe fe62 	bl	8014504 <_Bfree>
 8015840:	4629      	mov	r1, r5
 8015842:	4620      	mov	r0, r4
 8015844:	f7fe fe5e 	bl	8014504 <_Bfree>
 8015848:	e609      	b.n	801545e <_strtod_l+0x646>
 801584a:	f1b8 0f01 	cmp.w	r8, #1
 801584e:	d103      	bne.n	8015858 <_strtod_l+0xa40>
 8015850:	f1b9 0f00 	cmp.w	r9, #0
 8015854:	f43f ad95 	beq.w	8015382 <_strtod_l+0x56a>
 8015858:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80159b0 <_strtod_l+0xb98>
 801585c:	4f60      	ldr	r7, [pc, #384]	; (80159e0 <_strtod_l+0xbc8>)
 801585e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015862:	2600      	movs	r6, #0
 8015864:	e7ae      	b.n	80157c4 <_strtod_l+0x9ac>
 8015866:	4f5f      	ldr	r7, [pc, #380]	; (80159e4 <_strtod_l+0xbcc>)
 8015868:	2600      	movs	r6, #0
 801586a:	e7a7      	b.n	80157bc <_strtod_l+0x9a4>
 801586c:	4b5d      	ldr	r3, [pc, #372]	; (80159e4 <_strtod_l+0xbcc>)
 801586e:	4630      	mov	r0, r6
 8015870:	4639      	mov	r1, r7
 8015872:	2200      	movs	r2, #0
 8015874:	f7ea fec0 	bl	80005f8 <__aeabi_dmul>
 8015878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801587a:	4606      	mov	r6, r0
 801587c:	460f      	mov	r7, r1
 801587e:	2b00      	cmp	r3, #0
 8015880:	d09c      	beq.n	80157bc <_strtod_l+0x9a4>
 8015882:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015886:	e79d      	b.n	80157c4 <_strtod_l+0x9ac>
 8015888:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80159b8 <_strtod_l+0xba0>
 801588c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015890:	ec57 6b17 	vmov	r6, r7, d7
 8015894:	e796      	b.n	80157c4 <_strtod_l+0x9ac>
 8015896:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801589a:	9b04      	ldr	r3, [sp, #16]
 801589c:	46ca      	mov	sl, r9
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d1c2      	bne.n	8015828 <_strtod_l+0xa10>
 80158a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80158a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80158a8:	0d1b      	lsrs	r3, r3, #20
 80158aa:	051b      	lsls	r3, r3, #20
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d1bb      	bne.n	8015828 <_strtod_l+0xa10>
 80158b0:	4630      	mov	r0, r6
 80158b2:	4639      	mov	r1, r7
 80158b4:	f7eb f9e8 	bl	8000c88 <__aeabi_d2lz>
 80158b8:	f7ea fe70 	bl	800059c <__aeabi_l2d>
 80158bc:	4602      	mov	r2, r0
 80158be:	460b      	mov	r3, r1
 80158c0:	4630      	mov	r0, r6
 80158c2:	4639      	mov	r1, r7
 80158c4:	f7ea fce0 	bl	8000288 <__aeabi_dsub>
 80158c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80158ce:	ea43 0308 	orr.w	r3, r3, r8
 80158d2:	4313      	orrs	r3, r2
 80158d4:	4606      	mov	r6, r0
 80158d6:	460f      	mov	r7, r1
 80158d8:	d054      	beq.n	8015984 <_strtod_l+0xb6c>
 80158da:	a339      	add	r3, pc, #228	; (adr r3, 80159c0 <_strtod_l+0xba8>)
 80158dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e0:	f7eb f8fc 	bl	8000adc <__aeabi_dcmplt>
 80158e4:	2800      	cmp	r0, #0
 80158e6:	f47f ace5 	bne.w	80152b4 <_strtod_l+0x49c>
 80158ea:	a337      	add	r3, pc, #220	; (adr r3, 80159c8 <_strtod_l+0xbb0>)
 80158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f0:	4630      	mov	r0, r6
 80158f2:	4639      	mov	r1, r7
 80158f4:	f7eb f910 	bl	8000b18 <__aeabi_dcmpgt>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d095      	beq.n	8015828 <_strtod_l+0xa10>
 80158fc:	e4da      	b.n	80152b4 <_strtod_l+0x49c>
 80158fe:	9b04      	ldr	r3, [sp, #16]
 8015900:	b333      	cbz	r3, 8015950 <_strtod_l+0xb38>
 8015902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015904:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015908:	d822      	bhi.n	8015950 <_strtod_l+0xb38>
 801590a:	a331      	add	r3, pc, #196	; (adr r3, 80159d0 <_strtod_l+0xbb8>)
 801590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015910:	4630      	mov	r0, r6
 8015912:	4639      	mov	r1, r7
 8015914:	f7eb f8ec 	bl	8000af0 <__aeabi_dcmple>
 8015918:	b1a0      	cbz	r0, 8015944 <_strtod_l+0xb2c>
 801591a:	4639      	mov	r1, r7
 801591c:	4630      	mov	r0, r6
 801591e:	f7eb f943 	bl	8000ba8 <__aeabi_d2uiz>
 8015922:	2801      	cmp	r0, #1
 8015924:	bf38      	it	cc
 8015926:	2001      	movcc	r0, #1
 8015928:	f7ea fdec 	bl	8000504 <__aeabi_ui2d>
 801592c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801592e:	4606      	mov	r6, r0
 8015930:	460f      	mov	r7, r1
 8015932:	bb23      	cbnz	r3, 801597e <_strtod_l+0xb66>
 8015934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015938:	9010      	str	r0, [sp, #64]	; 0x40
 801593a:	9311      	str	r3, [sp, #68]	; 0x44
 801593c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015940:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015948:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801594c:	1a9b      	subs	r3, r3, r2
 801594e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015950:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015954:	eeb0 0a48 	vmov.f32	s0, s16
 8015958:	eef0 0a68 	vmov.f32	s1, s17
 801595c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015960:	f7ff f8fc 	bl	8014b5c <__ulp>
 8015964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015968:	ec53 2b10 	vmov	r2, r3, d0
 801596c:	f7ea fe44 	bl	80005f8 <__aeabi_dmul>
 8015970:	ec53 2b18 	vmov	r2, r3, d8
 8015974:	f7ea fc8a 	bl	800028c <__adddf3>
 8015978:	4680      	mov	r8, r0
 801597a:	4689      	mov	r9, r1
 801597c:	e78d      	b.n	801589a <_strtod_l+0xa82>
 801597e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015982:	e7db      	b.n	801593c <_strtod_l+0xb24>
 8015984:	a314      	add	r3, pc, #80	; (adr r3, 80159d8 <_strtod_l+0xbc0>)
 8015986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598a:	f7eb f8a7 	bl	8000adc <__aeabi_dcmplt>
 801598e:	e7b3      	b.n	80158f8 <_strtod_l+0xae0>
 8015990:	2300      	movs	r3, #0
 8015992:	930a      	str	r3, [sp, #40]	; 0x28
 8015994:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015998:	6013      	str	r3, [r2, #0]
 801599a:	f7ff ba7c 	b.w	8014e96 <_strtod_l+0x7e>
 801599e:	2a65      	cmp	r2, #101	; 0x65
 80159a0:	f43f ab75 	beq.w	801508e <_strtod_l+0x276>
 80159a4:	2a45      	cmp	r2, #69	; 0x45
 80159a6:	f43f ab72 	beq.w	801508e <_strtod_l+0x276>
 80159aa:	2301      	movs	r3, #1
 80159ac:	f7ff bbaa 	b.w	8015104 <_strtod_l+0x2ec>
 80159b0:	00000000 	.word	0x00000000
 80159b4:	bff00000 	.word	0xbff00000
 80159b8:	00000000 	.word	0x00000000
 80159bc:	3ff00000 	.word	0x3ff00000
 80159c0:	94a03595 	.word	0x94a03595
 80159c4:	3fdfffff 	.word	0x3fdfffff
 80159c8:	35afe535 	.word	0x35afe535
 80159cc:	3fe00000 	.word	0x3fe00000
 80159d0:	ffc00000 	.word	0xffc00000
 80159d4:	41dfffff 	.word	0x41dfffff
 80159d8:	94a03595 	.word	0x94a03595
 80159dc:	3fcfffff 	.word	0x3fcfffff
 80159e0:	3ff00000 	.word	0x3ff00000
 80159e4:	3fe00000 	.word	0x3fe00000
 80159e8:	7ff00000 	.word	0x7ff00000
 80159ec:	7fe00000 	.word	0x7fe00000
 80159f0:	7c9fffff 	.word	0x7c9fffff
 80159f4:	7fefffff 	.word	0x7fefffff

080159f8 <_strtod_r>:
 80159f8:	4b01      	ldr	r3, [pc, #4]	; (8015a00 <_strtod_r+0x8>)
 80159fa:	f7ff ba0d 	b.w	8014e18 <_strtod_l>
 80159fe:	bf00      	nop
 8015a00:	20000168 	.word	0x20000168

08015a04 <_strtol_l.constprop.0>:
 8015a04:	2b01      	cmp	r3, #1
 8015a06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a0a:	d001      	beq.n	8015a10 <_strtol_l.constprop.0+0xc>
 8015a0c:	2b24      	cmp	r3, #36	; 0x24
 8015a0e:	d906      	bls.n	8015a1e <_strtol_l.constprop.0+0x1a>
 8015a10:	f7fd fd7e 	bl	8013510 <__errno>
 8015a14:	2316      	movs	r3, #22
 8015a16:	6003      	str	r3, [r0, #0]
 8015a18:	2000      	movs	r0, #0
 8015a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015b04 <_strtol_l.constprop.0+0x100>
 8015a22:	460d      	mov	r5, r1
 8015a24:	462e      	mov	r6, r5
 8015a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a2a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015a2e:	f017 0708 	ands.w	r7, r7, #8
 8015a32:	d1f7      	bne.n	8015a24 <_strtol_l.constprop.0+0x20>
 8015a34:	2c2d      	cmp	r4, #45	; 0x2d
 8015a36:	d132      	bne.n	8015a9e <_strtol_l.constprop.0+0x9a>
 8015a38:	782c      	ldrb	r4, [r5, #0]
 8015a3a:	2701      	movs	r7, #1
 8015a3c:	1cb5      	adds	r5, r6, #2
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d05b      	beq.n	8015afa <_strtol_l.constprop.0+0xf6>
 8015a42:	2b10      	cmp	r3, #16
 8015a44:	d109      	bne.n	8015a5a <_strtol_l.constprop.0+0x56>
 8015a46:	2c30      	cmp	r4, #48	; 0x30
 8015a48:	d107      	bne.n	8015a5a <_strtol_l.constprop.0+0x56>
 8015a4a:	782c      	ldrb	r4, [r5, #0]
 8015a4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015a50:	2c58      	cmp	r4, #88	; 0x58
 8015a52:	d14d      	bne.n	8015af0 <_strtol_l.constprop.0+0xec>
 8015a54:	786c      	ldrb	r4, [r5, #1]
 8015a56:	2310      	movs	r3, #16
 8015a58:	3502      	adds	r5, #2
 8015a5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015a5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015a62:	f04f 0e00 	mov.w	lr, #0
 8015a66:	fbb8 f9f3 	udiv	r9, r8, r3
 8015a6a:	4676      	mov	r6, lr
 8015a6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015a70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015a74:	f1bc 0f09 	cmp.w	ip, #9
 8015a78:	d816      	bhi.n	8015aa8 <_strtol_l.constprop.0+0xa4>
 8015a7a:	4664      	mov	r4, ip
 8015a7c:	42a3      	cmp	r3, r4
 8015a7e:	dd24      	ble.n	8015aca <_strtol_l.constprop.0+0xc6>
 8015a80:	f1be 3fff 	cmp.w	lr, #4294967295
 8015a84:	d008      	beq.n	8015a98 <_strtol_l.constprop.0+0x94>
 8015a86:	45b1      	cmp	r9, r6
 8015a88:	d31c      	bcc.n	8015ac4 <_strtol_l.constprop.0+0xc0>
 8015a8a:	d101      	bne.n	8015a90 <_strtol_l.constprop.0+0x8c>
 8015a8c:	45a2      	cmp	sl, r4
 8015a8e:	db19      	blt.n	8015ac4 <_strtol_l.constprop.0+0xc0>
 8015a90:	fb06 4603 	mla	r6, r6, r3, r4
 8015a94:	f04f 0e01 	mov.w	lr, #1
 8015a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a9c:	e7e8      	b.n	8015a70 <_strtol_l.constprop.0+0x6c>
 8015a9e:	2c2b      	cmp	r4, #43	; 0x2b
 8015aa0:	bf04      	itt	eq
 8015aa2:	782c      	ldrbeq	r4, [r5, #0]
 8015aa4:	1cb5      	addeq	r5, r6, #2
 8015aa6:	e7ca      	b.n	8015a3e <_strtol_l.constprop.0+0x3a>
 8015aa8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015aac:	f1bc 0f19 	cmp.w	ip, #25
 8015ab0:	d801      	bhi.n	8015ab6 <_strtol_l.constprop.0+0xb2>
 8015ab2:	3c37      	subs	r4, #55	; 0x37
 8015ab4:	e7e2      	b.n	8015a7c <_strtol_l.constprop.0+0x78>
 8015ab6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015aba:	f1bc 0f19 	cmp.w	ip, #25
 8015abe:	d804      	bhi.n	8015aca <_strtol_l.constprop.0+0xc6>
 8015ac0:	3c57      	subs	r4, #87	; 0x57
 8015ac2:	e7db      	b.n	8015a7c <_strtol_l.constprop.0+0x78>
 8015ac4:	f04f 3eff 	mov.w	lr, #4294967295
 8015ac8:	e7e6      	b.n	8015a98 <_strtol_l.constprop.0+0x94>
 8015aca:	f1be 3fff 	cmp.w	lr, #4294967295
 8015ace:	d105      	bne.n	8015adc <_strtol_l.constprop.0+0xd8>
 8015ad0:	2322      	movs	r3, #34	; 0x22
 8015ad2:	6003      	str	r3, [r0, #0]
 8015ad4:	4646      	mov	r6, r8
 8015ad6:	b942      	cbnz	r2, 8015aea <_strtol_l.constprop.0+0xe6>
 8015ad8:	4630      	mov	r0, r6
 8015ada:	e79e      	b.n	8015a1a <_strtol_l.constprop.0+0x16>
 8015adc:	b107      	cbz	r7, 8015ae0 <_strtol_l.constprop.0+0xdc>
 8015ade:	4276      	negs	r6, r6
 8015ae0:	2a00      	cmp	r2, #0
 8015ae2:	d0f9      	beq.n	8015ad8 <_strtol_l.constprop.0+0xd4>
 8015ae4:	f1be 0f00 	cmp.w	lr, #0
 8015ae8:	d000      	beq.n	8015aec <_strtol_l.constprop.0+0xe8>
 8015aea:	1e69      	subs	r1, r5, #1
 8015aec:	6011      	str	r1, [r2, #0]
 8015aee:	e7f3      	b.n	8015ad8 <_strtol_l.constprop.0+0xd4>
 8015af0:	2430      	movs	r4, #48	; 0x30
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d1b1      	bne.n	8015a5a <_strtol_l.constprop.0+0x56>
 8015af6:	2308      	movs	r3, #8
 8015af8:	e7af      	b.n	8015a5a <_strtol_l.constprop.0+0x56>
 8015afa:	2c30      	cmp	r4, #48	; 0x30
 8015afc:	d0a5      	beq.n	8015a4a <_strtol_l.constprop.0+0x46>
 8015afe:	230a      	movs	r3, #10
 8015b00:	e7ab      	b.n	8015a5a <_strtol_l.constprop.0+0x56>
 8015b02:	bf00      	nop
 8015b04:	08017309 	.word	0x08017309

08015b08 <_strtol_r>:
 8015b08:	f7ff bf7c 	b.w	8015a04 <_strtol_l.constprop.0>

08015b0c <__ssputs_r>:
 8015b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b10:	688e      	ldr	r6, [r1, #8]
 8015b12:	461f      	mov	r7, r3
 8015b14:	42be      	cmp	r6, r7
 8015b16:	680b      	ldr	r3, [r1, #0]
 8015b18:	4682      	mov	sl, r0
 8015b1a:	460c      	mov	r4, r1
 8015b1c:	4690      	mov	r8, r2
 8015b1e:	d82c      	bhi.n	8015b7a <__ssputs_r+0x6e>
 8015b20:	898a      	ldrh	r2, [r1, #12]
 8015b22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015b26:	d026      	beq.n	8015b76 <__ssputs_r+0x6a>
 8015b28:	6965      	ldr	r5, [r4, #20]
 8015b2a:	6909      	ldr	r1, [r1, #16]
 8015b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b30:	eba3 0901 	sub.w	r9, r3, r1
 8015b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015b38:	1c7b      	adds	r3, r7, #1
 8015b3a:	444b      	add	r3, r9
 8015b3c:	106d      	asrs	r5, r5, #1
 8015b3e:	429d      	cmp	r5, r3
 8015b40:	bf38      	it	cc
 8015b42:	461d      	movcc	r5, r3
 8015b44:	0553      	lsls	r3, r2, #21
 8015b46:	d527      	bpl.n	8015b98 <__ssputs_r+0x8c>
 8015b48:	4629      	mov	r1, r5
 8015b4a:	f7fe fc0f 	bl	801436c <_malloc_r>
 8015b4e:	4606      	mov	r6, r0
 8015b50:	b360      	cbz	r0, 8015bac <__ssputs_r+0xa0>
 8015b52:	6921      	ldr	r1, [r4, #16]
 8015b54:	464a      	mov	r2, r9
 8015b56:	f7fd fd07 	bl	8013568 <memcpy>
 8015b5a:	89a3      	ldrh	r3, [r4, #12]
 8015b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b64:	81a3      	strh	r3, [r4, #12]
 8015b66:	6126      	str	r6, [r4, #16]
 8015b68:	6165      	str	r5, [r4, #20]
 8015b6a:	444e      	add	r6, r9
 8015b6c:	eba5 0509 	sub.w	r5, r5, r9
 8015b70:	6026      	str	r6, [r4, #0]
 8015b72:	60a5      	str	r5, [r4, #8]
 8015b74:	463e      	mov	r6, r7
 8015b76:	42be      	cmp	r6, r7
 8015b78:	d900      	bls.n	8015b7c <__ssputs_r+0x70>
 8015b7a:	463e      	mov	r6, r7
 8015b7c:	6820      	ldr	r0, [r4, #0]
 8015b7e:	4632      	mov	r2, r6
 8015b80:	4641      	mov	r1, r8
 8015b82:	f000 f9c9 	bl	8015f18 <memmove>
 8015b86:	68a3      	ldr	r3, [r4, #8]
 8015b88:	1b9b      	subs	r3, r3, r6
 8015b8a:	60a3      	str	r3, [r4, #8]
 8015b8c:	6823      	ldr	r3, [r4, #0]
 8015b8e:	4433      	add	r3, r6
 8015b90:	6023      	str	r3, [r4, #0]
 8015b92:	2000      	movs	r0, #0
 8015b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b98:	462a      	mov	r2, r5
 8015b9a:	f000 fd9e 	bl	80166da <_realloc_r>
 8015b9e:	4606      	mov	r6, r0
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	d1e0      	bne.n	8015b66 <__ssputs_r+0x5a>
 8015ba4:	6921      	ldr	r1, [r4, #16]
 8015ba6:	4650      	mov	r0, sl
 8015ba8:	f7fe fb6c 	bl	8014284 <_free_r>
 8015bac:	230c      	movs	r3, #12
 8015bae:	f8ca 3000 	str.w	r3, [sl]
 8015bb2:	89a3      	ldrh	r3, [r4, #12]
 8015bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bb8:	81a3      	strh	r3, [r4, #12]
 8015bba:	f04f 30ff 	mov.w	r0, #4294967295
 8015bbe:	e7e9      	b.n	8015b94 <__ssputs_r+0x88>

08015bc0 <_svfiprintf_r>:
 8015bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc4:	4698      	mov	r8, r3
 8015bc6:	898b      	ldrh	r3, [r1, #12]
 8015bc8:	061b      	lsls	r3, r3, #24
 8015bca:	b09d      	sub	sp, #116	; 0x74
 8015bcc:	4607      	mov	r7, r0
 8015bce:	460d      	mov	r5, r1
 8015bd0:	4614      	mov	r4, r2
 8015bd2:	d50e      	bpl.n	8015bf2 <_svfiprintf_r+0x32>
 8015bd4:	690b      	ldr	r3, [r1, #16]
 8015bd6:	b963      	cbnz	r3, 8015bf2 <_svfiprintf_r+0x32>
 8015bd8:	2140      	movs	r1, #64	; 0x40
 8015bda:	f7fe fbc7 	bl	801436c <_malloc_r>
 8015bde:	6028      	str	r0, [r5, #0]
 8015be0:	6128      	str	r0, [r5, #16]
 8015be2:	b920      	cbnz	r0, 8015bee <_svfiprintf_r+0x2e>
 8015be4:	230c      	movs	r3, #12
 8015be6:	603b      	str	r3, [r7, #0]
 8015be8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bec:	e0d0      	b.n	8015d90 <_svfiprintf_r+0x1d0>
 8015bee:	2340      	movs	r3, #64	; 0x40
 8015bf0:	616b      	str	r3, [r5, #20]
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8015bf6:	2320      	movs	r3, #32
 8015bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c00:	2330      	movs	r3, #48	; 0x30
 8015c02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015da8 <_svfiprintf_r+0x1e8>
 8015c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c0a:	f04f 0901 	mov.w	r9, #1
 8015c0e:	4623      	mov	r3, r4
 8015c10:	469a      	mov	sl, r3
 8015c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c16:	b10a      	cbz	r2, 8015c1c <_svfiprintf_r+0x5c>
 8015c18:	2a25      	cmp	r2, #37	; 0x25
 8015c1a:	d1f9      	bne.n	8015c10 <_svfiprintf_r+0x50>
 8015c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8015c20:	d00b      	beq.n	8015c3a <_svfiprintf_r+0x7a>
 8015c22:	465b      	mov	r3, fp
 8015c24:	4622      	mov	r2, r4
 8015c26:	4629      	mov	r1, r5
 8015c28:	4638      	mov	r0, r7
 8015c2a:	f7ff ff6f 	bl	8015b0c <__ssputs_r>
 8015c2e:	3001      	adds	r0, #1
 8015c30:	f000 80a9 	beq.w	8015d86 <_svfiprintf_r+0x1c6>
 8015c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c36:	445a      	add	r2, fp
 8015c38:	9209      	str	r2, [sp, #36]	; 0x24
 8015c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f000 80a1 	beq.w	8015d86 <_svfiprintf_r+0x1c6>
 8015c44:	2300      	movs	r3, #0
 8015c46:	f04f 32ff 	mov.w	r2, #4294967295
 8015c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c4e:	f10a 0a01 	add.w	sl, sl, #1
 8015c52:	9304      	str	r3, [sp, #16]
 8015c54:	9307      	str	r3, [sp, #28]
 8015c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8015c5c:	4654      	mov	r4, sl
 8015c5e:	2205      	movs	r2, #5
 8015c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c64:	4850      	ldr	r0, [pc, #320]	; (8015da8 <_svfiprintf_r+0x1e8>)
 8015c66:	f7ea fab3 	bl	80001d0 <memchr>
 8015c6a:	9a04      	ldr	r2, [sp, #16]
 8015c6c:	b9d8      	cbnz	r0, 8015ca6 <_svfiprintf_r+0xe6>
 8015c6e:	06d0      	lsls	r0, r2, #27
 8015c70:	bf44      	itt	mi
 8015c72:	2320      	movmi	r3, #32
 8015c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c78:	0711      	lsls	r1, r2, #28
 8015c7a:	bf44      	itt	mi
 8015c7c:	232b      	movmi	r3, #43	; 0x2b
 8015c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c82:	f89a 3000 	ldrb.w	r3, [sl]
 8015c86:	2b2a      	cmp	r3, #42	; 0x2a
 8015c88:	d015      	beq.n	8015cb6 <_svfiprintf_r+0xf6>
 8015c8a:	9a07      	ldr	r2, [sp, #28]
 8015c8c:	4654      	mov	r4, sl
 8015c8e:	2000      	movs	r0, #0
 8015c90:	f04f 0c0a 	mov.w	ip, #10
 8015c94:	4621      	mov	r1, r4
 8015c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c9a:	3b30      	subs	r3, #48	; 0x30
 8015c9c:	2b09      	cmp	r3, #9
 8015c9e:	d94d      	bls.n	8015d3c <_svfiprintf_r+0x17c>
 8015ca0:	b1b0      	cbz	r0, 8015cd0 <_svfiprintf_r+0x110>
 8015ca2:	9207      	str	r2, [sp, #28]
 8015ca4:	e014      	b.n	8015cd0 <_svfiprintf_r+0x110>
 8015ca6:	eba0 0308 	sub.w	r3, r0, r8
 8015caa:	fa09 f303 	lsl.w	r3, r9, r3
 8015cae:	4313      	orrs	r3, r2
 8015cb0:	9304      	str	r3, [sp, #16]
 8015cb2:	46a2      	mov	sl, r4
 8015cb4:	e7d2      	b.n	8015c5c <_svfiprintf_r+0x9c>
 8015cb6:	9b03      	ldr	r3, [sp, #12]
 8015cb8:	1d19      	adds	r1, r3, #4
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	9103      	str	r1, [sp, #12]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	bfbb      	ittet	lt
 8015cc2:	425b      	neglt	r3, r3
 8015cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8015cc8:	9307      	strge	r3, [sp, #28]
 8015cca:	9307      	strlt	r3, [sp, #28]
 8015ccc:	bfb8      	it	lt
 8015cce:	9204      	strlt	r2, [sp, #16]
 8015cd0:	7823      	ldrb	r3, [r4, #0]
 8015cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8015cd4:	d10c      	bne.n	8015cf0 <_svfiprintf_r+0x130>
 8015cd6:	7863      	ldrb	r3, [r4, #1]
 8015cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8015cda:	d134      	bne.n	8015d46 <_svfiprintf_r+0x186>
 8015cdc:	9b03      	ldr	r3, [sp, #12]
 8015cde:	1d1a      	adds	r2, r3, #4
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	9203      	str	r2, [sp, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	bfb8      	it	lt
 8015ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cec:	3402      	adds	r4, #2
 8015cee:	9305      	str	r3, [sp, #20]
 8015cf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015db8 <_svfiprintf_r+0x1f8>
 8015cf4:	7821      	ldrb	r1, [r4, #0]
 8015cf6:	2203      	movs	r2, #3
 8015cf8:	4650      	mov	r0, sl
 8015cfa:	f7ea fa69 	bl	80001d0 <memchr>
 8015cfe:	b138      	cbz	r0, 8015d10 <_svfiprintf_r+0x150>
 8015d00:	9b04      	ldr	r3, [sp, #16]
 8015d02:	eba0 000a 	sub.w	r0, r0, sl
 8015d06:	2240      	movs	r2, #64	; 0x40
 8015d08:	4082      	lsls	r2, r0
 8015d0a:	4313      	orrs	r3, r2
 8015d0c:	3401      	adds	r4, #1
 8015d0e:	9304      	str	r3, [sp, #16]
 8015d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d14:	4825      	ldr	r0, [pc, #148]	; (8015dac <_svfiprintf_r+0x1ec>)
 8015d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d1a:	2206      	movs	r2, #6
 8015d1c:	f7ea fa58 	bl	80001d0 <memchr>
 8015d20:	2800      	cmp	r0, #0
 8015d22:	d038      	beq.n	8015d96 <_svfiprintf_r+0x1d6>
 8015d24:	4b22      	ldr	r3, [pc, #136]	; (8015db0 <_svfiprintf_r+0x1f0>)
 8015d26:	bb1b      	cbnz	r3, 8015d70 <_svfiprintf_r+0x1b0>
 8015d28:	9b03      	ldr	r3, [sp, #12]
 8015d2a:	3307      	adds	r3, #7
 8015d2c:	f023 0307 	bic.w	r3, r3, #7
 8015d30:	3308      	adds	r3, #8
 8015d32:	9303      	str	r3, [sp, #12]
 8015d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d36:	4433      	add	r3, r6
 8015d38:	9309      	str	r3, [sp, #36]	; 0x24
 8015d3a:	e768      	b.n	8015c0e <_svfiprintf_r+0x4e>
 8015d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d40:	460c      	mov	r4, r1
 8015d42:	2001      	movs	r0, #1
 8015d44:	e7a6      	b.n	8015c94 <_svfiprintf_r+0xd4>
 8015d46:	2300      	movs	r3, #0
 8015d48:	3401      	adds	r4, #1
 8015d4a:	9305      	str	r3, [sp, #20]
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	f04f 0c0a 	mov.w	ip, #10
 8015d52:	4620      	mov	r0, r4
 8015d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d58:	3a30      	subs	r2, #48	; 0x30
 8015d5a:	2a09      	cmp	r2, #9
 8015d5c:	d903      	bls.n	8015d66 <_svfiprintf_r+0x1a6>
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d0c6      	beq.n	8015cf0 <_svfiprintf_r+0x130>
 8015d62:	9105      	str	r1, [sp, #20]
 8015d64:	e7c4      	b.n	8015cf0 <_svfiprintf_r+0x130>
 8015d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	e7f0      	b.n	8015d52 <_svfiprintf_r+0x192>
 8015d70:	ab03      	add	r3, sp, #12
 8015d72:	9300      	str	r3, [sp, #0]
 8015d74:	462a      	mov	r2, r5
 8015d76:	4b0f      	ldr	r3, [pc, #60]	; (8015db4 <_svfiprintf_r+0x1f4>)
 8015d78:	a904      	add	r1, sp, #16
 8015d7a:	4638      	mov	r0, r7
 8015d7c:	f7fc fc58 	bl	8012630 <_printf_float>
 8015d80:	1c42      	adds	r2, r0, #1
 8015d82:	4606      	mov	r6, r0
 8015d84:	d1d6      	bne.n	8015d34 <_svfiprintf_r+0x174>
 8015d86:	89ab      	ldrh	r3, [r5, #12]
 8015d88:	065b      	lsls	r3, r3, #25
 8015d8a:	f53f af2d 	bmi.w	8015be8 <_svfiprintf_r+0x28>
 8015d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d90:	b01d      	add	sp, #116	; 0x74
 8015d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d96:	ab03      	add	r3, sp, #12
 8015d98:	9300      	str	r3, [sp, #0]
 8015d9a:	462a      	mov	r2, r5
 8015d9c:	4b05      	ldr	r3, [pc, #20]	; (8015db4 <_svfiprintf_r+0x1f4>)
 8015d9e:	a904      	add	r1, sp, #16
 8015da0:	4638      	mov	r0, r7
 8015da2:	f7fc fee9 	bl	8012b78 <_printf_i>
 8015da6:	e7eb      	b.n	8015d80 <_svfiprintf_r+0x1c0>
 8015da8:	08017409 	.word	0x08017409
 8015dac:	08017413 	.word	0x08017413
 8015db0:	08012631 	.word	0x08012631
 8015db4:	08015b0d 	.word	0x08015b0d
 8015db8:	0801740f 	.word	0x0801740f

08015dbc <__sflush_r>:
 8015dbc:	898a      	ldrh	r2, [r1, #12]
 8015dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	0710      	lsls	r0, r2, #28
 8015dc6:	460c      	mov	r4, r1
 8015dc8:	d458      	bmi.n	8015e7c <__sflush_r+0xc0>
 8015dca:	684b      	ldr	r3, [r1, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	dc05      	bgt.n	8015ddc <__sflush_r+0x20>
 8015dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	dc02      	bgt.n	8015ddc <__sflush_r+0x20>
 8015dd6:	2000      	movs	r0, #0
 8015dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dde:	2e00      	cmp	r6, #0
 8015de0:	d0f9      	beq.n	8015dd6 <__sflush_r+0x1a>
 8015de2:	2300      	movs	r3, #0
 8015de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015de8:	682f      	ldr	r7, [r5, #0]
 8015dea:	6a21      	ldr	r1, [r4, #32]
 8015dec:	602b      	str	r3, [r5, #0]
 8015dee:	d032      	beq.n	8015e56 <__sflush_r+0x9a>
 8015df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015df2:	89a3      	ldrh	r3, [r4, #12]
 8015df4:	075a      	lsls	r2, r3, #29
 8015df6:	d505      	bpl.n	8015e04 <__sflush_r+0x48>
 8015df8:	6863      	ldr	r3, [r4, #4]
 8015dfa:	1ac0      	subs	r0, r0, r3
 8015dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015dfe:	b10b      	cbz	r3, 8015e04 <__sflush_r+0x48>
 8015e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e02:	1ac0      	subs	r0, r0, r3
 8015e04:	2300      	movs	r3, #0
 8015e06:	4602      	mov	r2, r0
 8015e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e0a:	6a21      	ldr	r1, [r4, #32]
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	47b0      	blx	r6
 8015e10:	1c43      	adds	r3, r0, #1
 8015e12:	89a3      	ldrh	r3, [r4, #12]
 8015e14:	d106      	bne.n	8015e24 <__sflush_r+0x68>
 8015e16:	6829      	ldr	r1, [r5, #0]
 8015e18:	291d      	cmp	r1, #29
 8015e1a:	d82b      	bhi.n	8015e74 <__sflush_r+0xb8>
 8015e1c:	4a29      	ldr	r2, [pc, #164]	; (8015ec4 <__sflush_r+0x108>)
 8015e1e:	410a      	asrs	r2, r1
 8015e20:	07d6      	lsls	r6, r2, #31
 8015e22:	d427      	bmi.n	8015e74 <__sflush_r+0xb8>
 8015e24:	2200      	movs	r2, #0
 8015e26:	6062      	str	r2, [r4, #4]
 8015e28:	04d9      	lsls	r1, r3, #19
 8015e2a:	6922      	ldr	r2, [r4, #16]
 8015e2c:	6022      	str	r2, [r4, #0]
 8015e2e:	d504      	bpl.n	8015e3a <__sflush_r+0x7e>
 8015e30:	1c42      	adds	r2, r0, #1
 8015e32:	d101      	bne.n	8015e38 <__sflush_r+0x7c>
 8015e34:	682b      	ldr	r3, [r5, #0]
 8015e36:	b903      	cbnz	r3, 8015e3a <__sflush_r+0x7e>
 8015e38:	6560      	str	r0, [r4, #84]	; 0x54
 8015e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e3c:	602f      	str	r7, [r5, #0]
 8015e3e:	2900      	cmp	r1, #0
 8015e40:	d0c9      	beq.n	8015dd6 <__sflush_r+0x1a>
 8015e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e46:	4299      	cmp	r1, r3
 8015e48:	d002      	beq.n	8015e50 <__sflush_r+0x94>
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	f7fe fa1a 	bl	8014284 <_free_r>
 8015e50:	2000      	movs	r0, #0
 8015e52:	6360      	str	r0, [r4, #52]	; 0x34
 8015e54:	e7c0      	b.n	8015dd8 <__sflush_r+0x1c>
 8015e56:	2301      	movs	r3, #1
 8015e58:	4628      	mov	r0, r5
 8015e5a:	47b0      	blx	r6
 8015e5c:	1c41      	adds	r1, r0, #1
 8015e5e:	d1c8      	bne.n	8015df2 <__sflush_r+0x36>
 8015e60:	682b      	ldr	r3, [r5, #0]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d0c5      	beq.n	8015df2 <__sflush_r+0x36>
 8015e66:	2b1d      	cmp	r3, #29
 8015e68:	d001      	beq.n	8015e6e <__sflush_r+0xb2>
 8015e6a:	2b16      	cmp	r3, #22
 8015e6c:	d101      	bne.n	8015e72 <__sflush_r+0xb6>
 8015e6e:	602f      	str	r7, [r5, #0]
 8015e70:	e7b1      	b.n	8015dd6 <__sflush_r+0x1a>
 8015e72:	89a3      	ldrh	r3, [r4, #12]
 8015e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e78:	81a3      	strh	r3, [r4, #12]
 8015e7a:	e7ad      	b.n	8015dd8 <__sflush_r+0x1c>
 8015e7c:	690f      	ldr	r7, [r1, #16]
 8015e7e:	2f00      	cmp	r7, #0
 8015e80:	d0a9      	beq.n	8015dd6 <__sflush_r+0x1a>
 8015e82:	0793      	lsls	r3, r2, #30
 8015e84:	680e      	ldr	r6, [r1, #0]
 8015e86:	bf08      	it	eq
 8015e88:	694b      	ldreq	r3, [r1, #20]
 8015e8a:	600f      	str	r7, [r1, #0]
 8015e8c:	bf18      	it	ne
 8015e8e:	2300      	movne	r3, #0
 8015e90:	eba6 0807 	sub.w	r8, r6, r7
 8015e94:	608b      	str	r3, [r1, #8]
 8015e96:	f1b8 0f00 	cmp.w	r8, #0
 8015e9a:	dd9c      	ble.n	8015dd6 <__sflush_r+0x1a>
 8015e9c:	6a21      	ldr	r1, [r4, #32]
 8015e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ea0:	4643      	mov	r3, r8
 8015ea2:	463a      	mov	r2, r7
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	47b0      	blx	r6
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	dc06      	bgt.n	8015eba <__sflush_r+0xfe>
 8015eac:	89a3      	ldrh	r3, [r4, #12]
 8015eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eb2:	81a3      	strh	r3, [r4, #12]
 8015eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb8:	e78e      	b.n	8015dd8 <__sflush_r+0x1c>
 8015eba:	4407      	add	r7, r0
 8015ebc:	eba8 0800 	sub.w	r8, r8, r0
 8015ec0:	e7e9      	b.n	8015e96 <__sflush_r+0xda>
 8015ec2:	bf00      	nop
 8015ec4:	dfbffffe 	.word	0xdfbffffe

08015ec8 <_fflush_r>:
 8015ec8:	b538      	push	{r3, r4, r5, lr}
 8015eca:	690b      	ldr	r3, [r1, #16]
 8015ecc:	4605      	mov	r5, r0
 8015ece:	460c      	mov	r4, r1
 8015ed0:	b913      	cbnz	r3, 8015ed8 <_fflush_r+0x10>
 8015ed2:	2500      	movs	r5, #0
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	bd38      	pop	{r3, r4, r5, pc}
 8015ed8:	b118      	cbz	r0, 8015ee2 <_fflush_r+0x1a>
 8015eda:	6a03      	ldr	r3, [r0, #32]
 8015edc:	b90b      	cbnz	r3, 8015ee2 <_fflush_r+0x1a>
 8015ede:	f7fd f9f7 	bl	80132d0 <__sinit>
 8015ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d0f3      	beq.n	8015ed2 <_fflush_r+0xa>
 8015eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eec:	07d0      	lsls	r0, r2, #31
 8015eee:	d404      	bmi.n	8015efa <_fflush_r+0x32>
 8015ef0:	0599      	lsls	r1, r3, #22
 8015ef2:	d402      	bmi.n	8015efa <_fflush_r+0x32>
 8015ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ef6:	f7fd fb35 	bl	8013564 <__retarget_lock_acquire_recursive>
 8015efa:	4628      	mov	r0, r5
 8015efc:	4621      	mov	r1, r4
 8015efe:	f7ff ff5d 	bl	8015dbc <__sflush_r>
 8015f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f04:	07da      	lsls	r2, r3, #31
 8015f06:	4605      	mov	r5, r0
 8015f08:	d4e4      	bmi.n	8015ed4 <_fflush_r+0xc>
 8015f0a:	89a3      	ldrh	r3, [r4, #12]
 8015f0c:	059b      	lsls	r3, r3, #22
 8015f0e:	d4e1      	bmi.n	8015ed4 <_fflush_r+0xc>
 8015f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f12:	f7fd fb28 	bl	8013566 <__retarget_lock_release_recursive>
 8015f16:	e7dd      	b.n	8015ed4 <_fflush_r+0xc>

08015f18 <memmove>:
 8015f18:	4288      	cmp	r0, r1
 8015f1a:	b510      	push	{r4, lr}
 8015f1c:	eb01 0402 	add.w	r4, r1, r2
 8015f20:	d902      	bls.n	8015f28 <memmove+0x10>
 8015f22:	4284      	cmp	r4, r0
 8015f24:	4623      	mov	r3, r4
 8015f26:	d807      	bhi.n	8015f38 <memmove+0x20>
 8015f28:	1e43      	subs	r3, r0, #1
 8015f2a:	42a1      	cmp	r1, r4
 8015f2c:	d008      	beq.n	8015f40 <memmove+0x28>
 8015f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f36:	e7f8      	b.n	8015f2a <memmove+0x12>
 8015f38:	4402      	add	r2, r0
 8015f3a:	4601      	mov	r1, r0
 8015f3c:	428a      	cmp	r2, r1
 8015f3e:	d100      	bne.n	8015f42 <memmove+0x2a>
 8015f40:	bd10      	pop	{r4, pc}
 8015f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015f4a:	e7f7      	b.n	8015f3c <memmove+0x24>

08015f4c <strncmp>:
 8015f4c:	b510      	push	{r4, lr}
 8015f4e:	b16a      	cbz	r2, 8015f6c <strncmp+0x20>
 8015f50:	3901      	subs	r1, #1
 8015f52:	1884      	adds	r4, r0, r2
 8015f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d103      	bne.n	8015f68 <strncmp+0x1c>
 8015f60:	42a0      	cmp	r0, r4
 8015f62:	d001      	beq.n	8015f68 <strncmp+0x1c>
 8015f64:	2a00      	cmp	r2, #0
 8015f66:	d1f5      	bne.n	8015f54 <strncmp+0x8>
 8015f68:	1ad0      	subs	r0, r2, r3
 8015f6a:	bd10      	pop	{r4, pc}
 8015f6c:	4610      	mov	r0, r2
 8015f6e:	e7fc      	b.n	8015f6a <strncmp+0x1e>

08015f70 <_sbrk_r>:
 8015f70:	b538      	push	{r3, r4, r5, lr}
 8015f72:	4d06      	ldr	r5, [pc, #24]	; (8015f8c <_sbrk_r+0x1c>)
 8015f74:	2300      	movs	r3, #0
 8015f76:	4604      	mov	r4, r0
 8015f78:	4608      	mov	r0, r1
 8015f7a:	602b      	str	r3, [r5, #0]
 8015f7c:	f7ed fee2 	bl	8003d44 <_sbrk>
 8015f80:	1c43      	adds	r3, r0, #1
 8015f82:	d102      	bne.n	8015f8a <_sbrk_r+0x1a>
 8015f84:	682b      	ldr	r3, [r5, #0]
 8015f86:	b103      	cbz	r3, 8015f8a <_sbrk_r+0x1a>
 8015f88:	6023      	str	r3, [r4, #0]
 8015f8a:	bd38      	pop	{r3, r4, r5, pc}
 8015f8c:	20008ab0 	.word	0x20008ab0

08015f90 <nan>:
 8015f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015f98 <nan+0x8>
 8015f94:	4770      	bx	lr
 8015f96:	bf00      	nop
 8015f98:	00000000 	.word	0x00000000
 8015f9c:	7ff80000 	.word	0x7ff80000

08015fa0 <__assert_func>:
 8015fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015fa2:	4614      	mov	r4, r2
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	4b09      	ldr	r3, [pc, #36]	; (8015fcc <__assert_func+0x2c>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	4605      	mov	r5, r0
 8015fac:	68d8      	ldr	r0, [r3, #12]
 8015fae:	b14c      	cbz	r4, 8015fc4 <__assert_func+0x24>
 8015fb0:	4b07      	ldr	r3, [pc, #28]	; (8015fd0 <__assert_func+0x30>)
 8015fb2:	9100      	str	r1, [sp, #0]
 8015fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015fb8:	4906      	ldr	r1, [pc, #24]	; (8015fd4 <__assert_func+0x34>)
 8015fba:	462b      	mov	r3, r5
 8015fbc:	f000 fbca 	bl	8016754 <fiprintf>
 8015fc0:	f000 fbda 	bl	8016778 <abort>
 8015fc4:	4b04      	ldr	r3, [pc, #16]	; (8015fd8 <__assert_func+0x38>)
 8015fc6:	461c      	mov	r4, r3
 8015fc8:	e7f3      	b.n	8015fb2 <__assert_func+0x12>
 8015fca:	bf00      	nop
 8015fcc:	20000164 	.word	0x20000164
 8015fd0:	08017422 	.word	0x08017422
 8015fd4:	0801742f 	.word	0x0801742f
 8015fd8:	0801745d 	.word	0x0801745d

08015fdc <_calloc_r>:
 8015fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fde:	fba1 2402 	umull	r2, r4, r1, r2
 8015fe2:	b94c      	cbnz	r4, 8015ff8 <_calloc_r+0x1c>
 8015fe4:	4611      	mov	r1, r2
 8015fe6:	9201      	str	r2, [sp, #4]
 8015fe8:	f7fe f9c0 	bl	801436c <_malloc_r>
 8015fec:	9a01      	ldr	r2, [sp, #4]
 8015fee:	4605      	mov	r5, r0
 8015ff0:	b930      	cbnz	r0, 8016000 <_calloc_r+0x24>
 8015ff2:	4628      	mov	r0, r5
 8015ff4:	b003      	add	sp, #12
 8015ff6:	bd30      	pop	{r4, r5, pc}
 8015ff8:	220c      	movs	r2, #12
 8015ffa:	6002      	str	r2, [r0, #0]
 8015ffc:	2500      	movs	r5, #0
 8015ffe:	e7f8      	b.n	8015ff2 <_calloc_r+0x16>
 8016000:	4621      	mov	r1, r4
 8016002:	f7fd fa32 	bl	801346a <memset>
 8016006:	e7f4      	b.n	8015ff2 <_calloc_r+0x16>

08016008 <rshift>:
 8016008:	6903      	ldr	r3, [r0, #16]
 801600a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801600e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016012:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016016:	f100 0414 	add.w	r4, r0, #20
 801601a:	dd45      	ble.n	80160a8 <rshift+0xa0>
 801601c:	f011 011f 	ands.w	r1, r1, #31
 8016020:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016024:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016028:	d10c      	bne.n	8016044 <rshift+0x3c>
 801602a:	f100 0710 	add.w	r7, r0, #16
 801602e:	4629      	mov	r1, r5
 8016030:	42b1      	cmp	r1, r6
 8016032:	d334      	bcc.n	801609e <rshift+0x96>
 8016034:	1a9b      	subs	r3, r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	1eea      	subs	r2, r5, #3
 801603a:	4296      	cmp	r6, r2
 801603c:	bf38      	it	cc
 801603e:	2300      	movcc	r3, #0
 8016040:	4423      	add	r3, r4
 8016042:	e015      	b.n	8016070 <rshift+0x68>
 8016044:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016048:	f1c1 0820 	rsb	r8, r1, #32
 801604c:	40cf      	lsrs	r7, r1
 801604e:	f105 0e04 	add.w	lr, r5, #4
 8016052:	46a1      	mov	r9, r4
 8016054:	4576      	cmp	r6, lr
 8016056:	46f4      	mov	ip, lr
 8016058:	d815      	bhi.n	8016086 <rshift+0x7e>
 801605a:	1a9a      	subs	r2, r3, r2
 801605c:	0092      	lsls	r2, r2, #2
 801605e:	3a04      	subs	r2, #4
 8016060:	3501      	adds	r5, #1
 8016062:	42ae      	cmp	r6, r5
 8016064:	bf38      	it	cc
 8016066:	2200      	movcc	r2, #0
 8016068:	18a3      	adds	r3, r4, r2
 801606a:	50a7      	str	r7, [r4, r2]
 801606c:	b107      	cbz	r7, 8016070 <rshift+0x68>
 801606e:	3304      	adds	r3, #4
 8016070:	1b1a      	subs	r2, r3, r4
 8016072:	42a3      	cmp	r3, r4
 8016074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016078:	bf08      	it	eq
 801607a:	2300      	moveq	r3, #0
 801607c:	6102      	str	r2, [r0, #16]
 801607e:	bf08      	it	eq
 8016080:	6143      	streq	r3, [r0, #20]
 8016082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016086:	f8dc c000 	ldr.w	ip, [ip]
 801608a:	fa0c fc08 	lsl.w	ip, ip, r8
 801608e:	ea4c 0707 	orr.w	r7, ip, r7
 8016092:	f849 7b04 	str.w	r7, [r9], #4
 8016096:	f85e 7b04 	ldr.w	r7, [lr], #4
 801609a:	40cf      	lsrs	r7, r1
 801609c:	e7da      	b.n	8016054 <rshift+0x4c>
 801609e:	f851 cb04 	ldr.w	ip, [r1], #4
 80160a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80160a6:	e7c3      	b.n	8016030 <rshift+0x28>
 80160a8:	4623      	mov	r3, r4
 80160aa:	e7e1      	b.n	8016070 <rshift+0x68>

080160ac <__hexdig_fun>:
 80160ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80160b0:	2b09      	cmp	r3, #9
 80160b2:	d802      	bhi.n	80160ba <__hexdig_fun+0xe>
 80160b4:	3820      	subs	r0, #32
 80160b6:	b2c0      	uxtb	r0, r0
 80160b8:	4770      	bx	lr
 80160ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80160be:	2b05      	cmp	r3, #5
 80160c0:	d801      	bhi.n	80160c6 <__hexdig_fun+0x1a>
 80160c2:	3847      	subs	r0, #71	; 0x47
 80160c4:	e7f7      	b.n	80160b6 <__hexdig_fun+0xa>
 80160c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80160ca:	2b05      	cmp	r3, #5
 80160cc:	d801      	bhi.n	80160d2 <__hexdig_fun+0x26>
 80160ce:	3827      	subs	r0, #39	; 0x27
 80160d0:	e7f1      	b.n	80160b6 <__hexdig_fun+0xa>
 80160d2:	2000      	movs	r0, #0
 80160d4:	4770      	bx	lr
	...

080160d8 <__gethex>:
 80160d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160dc:	4617      	mov	r7, r2
 80160de:	680a      	ldr	r2, [r1, #0]
 80160e0:	b085      	sub	sp, #20
 80160e2:	f102 0b02 	add.w	fp, r2, #2
 80160e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80160ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80160ee:	4681      	mov	r9, r0
 80160f0:	468a      	mov	sl, r1
 80160f2:	9302      	str	r3, [sp, #8]
 80160f4:	32fe      	adds	r2, #254	; 0xfe
 80160f6:	eb02 030b 	add.w	r3, r2, fp
 80160fa:	46d8      	mov	r8, fp
 80160fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016100:	9301      	str	r3, [sp, #4]
 8016102:	2830      	cmp	r0, #48	; 0x30
 8016104:	d0f7      	beq.n	80160f6 <__gethex+0x1e>
 8016106:	f7ff ffd1 	bl	80160ac <__hexdig_fun>
 801610a:	4604      	mov	r4, r0
 801610c:	2800      	cmp	r0, #0
 801610e:	d138      	bne.n	8016182 <__gethex+0xaa>
 8016110:	49a7      	ldr	r1, [pc, #668]	; (80163b0 <__gethex+0x2d8>)
 8016112:	2201      	movs	r2, #1
 8016114:	4640      	mov	r0, r8
 8016116:	f7ff ff19 	bl	8015f4c <strncmp>
 801611a:	4606      	mov	r6, r0
 801611c:	2800      	cmp	r0, #0
 801611e:	d169      	bne.n	80161f4 <__gethex+0x11c>
 8016120:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016124:	465d      	mov	r5, fp
 8016126:	f7ff ffc1 	bl	80160ac <__hexdig_fun>
 801612a:	2800      	cmp	r0, #0
 801612c:	d064      	beq.n	80161f8 <__gethex+0x120>
 801612e:	465a      	mov	r2, fp
 8016130:	7810      	ldrb	r0, [r2, #0]
 8016132:	2830      	cmp	r0, #48	; 0x30
 8016134:	4690      	mov	r8, r2
 8016136:	f102 0201 	add.w	r2, r2, #1
 801613a:	d0f9      	beq.n	8016130 <__gethex+0x58>
 801613c:	f7ff ffb6 	bl	80160ac <__hexdig_fun>
 8016140:	2301      	movs	r3, #1
 8016142:	fab0 f480 	clz	r4, r0
 8016146:	0964      	lsrs	r4, r4, #5
 8016148:	465e      	mov	r6, fp
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	4642      	mov	r2, r8
 801614e:	4615      	mov	r5, r2
 8016150:	3201      	adds	r2, #1
 8016152:	7828      	ldrb	r0, [r5, #0]
 8016154:	f7ff ffaa 	bl	80160ac <__hexdig_fun>
 8016158:	2800      	cmp	r0, #0
 801615a:	d1f8      	bne.n	801614e <__gethex+0x76>
 801615c:	4994      	ldr	r1, [pc, #592]	; (80163b0 <__gethex+0x2d8>)
 801615e:	2201      	movs	r2, #1
 8016160:	4628      	mov	r0, r5
 8016162:	f7ff fef3 	bl	8015f4c <strncmp>
 8016166:	b978      	cbnz	r0, 8016188 <__gethex+0xb0>
 8016168:	b946      	cbnz	r6, 801617c <__gethex+0xa4>
 801616a:	1c6e      	adds	r6, r5, #1
 801616c:	4632      	mov	r2, r6
 801616e:	4615      	mov	r5, r2
 8016170:	3201      	adds	r2, #1
 8016172:	7828      	ldrb	r0, [r5, #0]
 8016174:	f7ff ff9a 	bl	80160ac <__hexdig_fun>
 8016178:	2800      	cmp	r0, #0
 801617a:	d1f8      	bne.n	801616e <__gethex+0x96>
 801617c:	1b73      	subs	r3, r6, r5
 801617e:	009e      	lsls	r6, r3, #2
 8016180:	e004      	b.n	801618c <__gethex+0xb4>
 8016182:	2400      	movs	r4, #0
 8016184:	4626      	mov	r6, r4
 8016186:	e7e1      	b.n	801614c <__gethex+0x74>
 8016188:	2e00      	cmp	r6, #0
 801618a:	d1f7      	bne.n	801617c <__gethex+0xa4>
 801618c:	782b      	ldrb	r3, [r5, #0]
 801618e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016192:	2b50      	cmp	r3, #80	; 0x50
 8016194:	d13d      	bne.n	8016212 <__gethex+0x13a>
 8016196:	786b      	ldrb	r3, [r5, #1]
 8016198:	2b2b      	cmp	r3, #43	; 0x2b
 801619a:	d02f      	beq.n	80161fc <__gethex+0x124>
 801619c:	2b2d      	cmp	r3, #45	; 0x2d
 801619e:	d031      	beq.n	8016204 <__gethex+0x12c>
 80161a0:	1c69      	adds	r1, r5, #1
 80161a2:	f04f 0b00 	mov.w	fp, #0
 80161a6:	7808      	ldrb	r0, [r1, #0]
 80161a8:	f7ff ff80 	bl	80160ac <__hexdig_fun>
 80161ac:	1e42      	subs	r2, r0, #1
 80161ae:	b2d2      	uxtb	r2, r2
 80161b0:	2a18      	cmp	r2, #24
 80161b2:	d82e      	bhi.n	8016212 <__gethex+0x13a>
 80161b4:	f1a0 0210 	sub.w	r2, r0, #16
 80161b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80161bc:	f7ff ff76 	bl	80160ac <__hexdig_fun>
 80161c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80161c4:	fa5f fc8c 	uxtb.w	ip, ip
 80161c8:	f1bc 0f18 	cmp.w	ip, #24
 80161cc:	d91d      	bls.n	801620a <__gethex+0x132>
 80161ce:	f1bb 0f00 	cmp.w	fp, #0
 80161d2:	d000      	beq.n	80161d6 <__gethex+0xfe>
 80161d4:	4252      	negs	r2, r2
 80161d6:	4416      	add	r6, r2
 80161d8:	f8ca 1000 	str.w	r1, [sl]
 80161dc:	b1dc      	cbz	r4, 8016216 <__gethex+0x13e>
 80161de:	9b01      	ldr	r3, [sp, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	bf14      	ite	ne
 80161e4:	f04f 0800 	movne.w	r8, #0
 80161e8:	f04f 0806 	moveq.w	r8, #6
 80161ec:	4640      	mov	r0, r8
 80161ee:	b005      	add	sp, #20
 80161f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f4:	4645      	mov	r5, r8
 80161f6:	4626      	mov	r6, r4
 80161f8:	2401      	movs	r4, #1
 80161fa:	e7c7      	b.n	801618c <__gethex+0xb4>
 80161fc:	f04f 0b00 	mov.w	fp, #0
 8016200:	1ca9      	adds	r1, r5, #2
 8016202:	e7d0      	b.n	80161a6 <__gethex+0xce>
 8016204:	f04f 0b01 	mov.w	fp, #1
 8016208:	e7fa      	b.n	8016200 <__gethex+0x128>
 801620a:	230a      	movs	r3, #10
 801620c:	fb03 0002 	mla	r0, r3, r2, r0
 8016210:	e7d0      	b.n	80161b4 <__gethex+0xdc>
 8016212:	4629      	mov	r1, r5
 8016214:	e7e0      	b.n	80161d8 <__gethex+0x100>
 8016216:	eba5 0308 	sub.w	r3, r5, r8
 801621a:	3b01      	subs	r3, #1
 801621c:	4621      	mov	r1, r4
 801621e:	2b07      	cmp	r3, #7
 8016220:	dc0a      	bgt.n	8016238 <__gethex+0x160>
 8016222:	4648      	mov	r0, r9
 8016224:	f7fe f92e 	bl	8014484 <_Balloc>
 8016228:	4604      	mov	r4, r0
 801622a:	b940      	cbnz	r0, 801623e <__gethex+0x166>
 801622c:	4b61      	ldr	r3, [pc, #388]	; (80163b4 <__gethex+0x2dc>)
 801622e:	4602      	mov	r2, r0
 8016230:	21e4      	movs	r1, #228	; 0xe4
 8016232:	4861      	ldr	r0, [pc, #388]	; (80163b8 <__gethex+0x2e0>)
 8016234:	f7ff feb4 	bl	8015fa0 <__assert_func>
 8016238:	3101      	adds	r1, #1
 801623a:	105b      	asrs	r3, r3, #1
 801623c:	e7ef      	b.n	801621e <__gethex+0x146>
 801623e:	f100 0a14 	add.w	sl, r0, #20
 8016242:	2300      	movs	r3, #0
 8016244:	495a      	ldr	r1, [pc, #360]	; (80163b0 <__gethex+0x2d8>)
 8016246:	f8cd a004 	str.w	sl, [sp, #4]
 801624a:	469b      	mov	fp, r3
 801624c:	45a8      	cmp	r8, r5
 801624e:	d342      	bcc.n	80162d6 <__gethex+0x1fe>
 8016250:	9801      	ldr	r0, [sp, #4]
 8016252:	f840 bb04 	str.w	fp, [r0], #4
 8016256:	eba0 000a 	sub.w	r0, r0, sl
 801625a:	1080      	asrs	r0, r0, #2
 801625c:	6120      	str	r0, [r4, #16]
 801625e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016262:	4658      	mov	r0, fp
 8016264:	f7fe fa00 	bl	8014668 <__hi0bits>
 8016268:	683d      	ldr	r5, [r7, #0]
 801626a:	eba8 0000 	sub.w	r0, r8, r0
 801626e:	42a8      	cmp	r0, r5
 8016270:	dd59      	ble.n	8016326 <__gethex+0x24e>
 8016272:	eba0 0805 	sub.w	r8, r0, r5
 8016276:	4641      	mov	r1, r8
 8016278:	4620      	mov	r0, r4
 801627a:	f7fe fd8f 	bl	8014d9c <__any_on>
 801627e:	4683      	mov	fp, r0
 8016280:	b1b8      	cbz	r0, 80162b2 <__gethex+0x1da>
 8016282:	f108 33ff 	add.w	r3, r8, #4294967295
 8016286:	1159      	asrs	r1, r3, #5
 8016288:	f003 021f 	and.w	r2, r3, #31
 801628c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016290:	f04f 0b01 	mov.w	fp, #1
 8016294:	fa0b f202 	lsl.w	r2, fp, r2
 8016298:	420a      	tst	r2, r1
 801629a:	d00a      	beq.n	80162b2 <__gethex+0x1da>
 801629c:	455b      	cmp	r3, fp
 801629e:	dd06      	ble.n	80162ae <__gethex+0x1d6>
 80162a0:	f1a8 0102 	sub.w	r1, r8, #2
 80162a4:	4620      	mov	r0, r4
 80162a6:	f7fe fd79 	bl	8014d9c <__any_on>
 80162aa:	2800      	cmp	r0, #0
 80162ac:	d138      	bne.n	8016320 <__gethex+0x248>
 80162ae:	f04f 0b02 	mov.w	fp, #2
 80162b2:	4641      	mov	r1, r8
 80162b4:	4620      	mov	r0, r4
 80162b6:	f7ff fea7 	bl	8016008 <rshift>
 80162ba:	4446      	add	r6, r8
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	42b3      	cmp	r3, r6
 80162c0:	da41      	bge.n	8016346 <__gethex+0x26e>
 80162c2:	4621      	mov	r1, r4
 80162c4:	4648      	mov	r0, r9
 80162c6:	f7fe f91d 	bl	8014504 <_Bfree>
 80162ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162cc:	2300      	movs	r3, #0
 80162ce:	6013      	str	r3, [r2, #0]
 80162d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80162d4:	e78a      	b.n	80161ec <__gethex+0x114>
 80162d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80162da:	2a2e      	cmp	r2, #46	; 0x2e
 80162dc:	d014      	beq.n	8016308 <__gethex+0x230>
 80162de:	2b20      	cmp	r3, #32
 80162e0:	d106      	bne.n	80162f0 <__gethex+0x218>
 80162e2:	9b01      	ldr	r3, [sp, #4]
 80162e4:	f843 bb04 	str.w	fp, [r3], #4
 80162e8:	f04f 0b00 	mov.w	fp, #0
 80162ec:	9301      	str	r3, [sp, #4]
 80162ee:	465b      	mov	r3, fp
 80162f0:	7828      	ldrb	r0, [r5, #0]
 80162f2:	9303      	str	r3, [sp, #12]
 80162f4:	f7ff feda 	bl	80160ac <__hexdig_fun>
 80162f8:	9b03      	ldr	r3, [sp, #12]
 80162fa:	f000 000f 	and.w	r0, r0, #15
 80162fe:	4098      	lsls	r0, r3
 8016300:	ea4b 0b00 	orr.w	fp, fp, r0
 8016304:	3304      	adds	r3, #4
 8016306:	e7a1      	b.n	801624c <__gethex+0x174>
 8016308:	45a8      	cmp	r8, r5
 801630a:	d8e8      	bhi.n	80162de <__gethex+0x206>
 801630c:	2201      	movs	r2, #1
 801630e:	4628      	mov	r0, r5
 8016310:	9303      	str	r3, [sp, #12]
 8016312:	f7ff fe1b 	bl	8015f4c <strncmp>
 8016316:	4926      	ldr	r1, [pc, #152]	; (80163b0 <__gethex+0x2d8>)
 8016318:	9b03      	ldr	r3, [sp, #12]
 801631a:	2800      	cmp	r0, #0
 801631c:	d1df      	bne.n	80162de <__gethex+0x206>
 801631e:	e795      	b.n	801624c <__gethex+0x174>
 8016320:	f04f 0b03 	mov.w	fp, #3
 8016324:	e7c5      	b.n	80162b2 <__gethex+0x1da>
 8016326:	da0b      	bge.n	8016340 <__gethex+0x268>
 8016328:	eba5 0800 	sub.w	r8, r5, r0
 801632c:	4621      	mov	r1, r4
 801632e:	4642      	mov	r2, r8
 8016330:	4648      	mov	r0, r9
 8016332:	f7fe fb01 	bl	8014938 <__lshift>
 8016336:	eba6 0608 	sub.w	r6, r6, r8
 801633a:	4604      	mov	r4, r0
 801633c:	f100 0a14 	add.w	sl, r0, #20
 8016340:	f04f 0b00 	mov.w	fp, #0
 8016344:	e7ba      	b.n	80162bc <__gethex+0x1e4>
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	42b3      	cmp	r3, r6
 801634a:	dd73      	ble.n	8016434 <__gethex+0x35c>
 801634c:	1b9e      	subs	r6, r3, r6
 801634e:	42b5      	cmp	r5, r6
 8016350:	dc34      	bgt.n	80163bc <__gethex+0x2e4>
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	2b02      	cmp	r3, #2
 8016356:	d023      	beq.n	80163a0 <__gethex+0x2c8>
 8016358:	2b03      	cmp	r3, #3
 801635a:	d025      	beq.n	80163a8 <__gethex+0x2d0>
 801635c:	2b01      	cmp	r3, #1
 801635e:	d115      	bne.n	801638c <__gethex+0x2b4>
 8016360:	42b5      	cmp	r5, r6
 8016362:	d113      	bne.n	801638c <__gethex+0x2b4>
 8016364:	2d01      	cmp	r5, #1
 8016366:	d10b      	bne.n	8016380 <__gethex+0x2a8>
 8016368:	9a02      	ldr	r2, [sp, #8]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6013      	str	r3, [r2, #0]
 801636e:	2301      	movs	r3, #1
 8016370:	6123      	str	r3, [r4, #16]
 8016372:	f8ca 3000 	str.w	r3, [sl]
 8016376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016378:	f04f 0862 	mov.w	r8, #98	; 0x62
 801637c:	601c      	str	r4, [r3, #0]
 801637e:	e735      	b.n	80161ec <__gethex+0x114>
 8016380:	1e69      	subs	r1, r5, #1
 8016382:	4620      	mov	r0, r4
 8016384:	f7fe fd0a 	bl	8014d9c <__any_on>
 8016388:	2800      	cmp	r0, #0
 801638a:	d1ed      	bne.n	8016368 <__gethex+0x290>
 801638c:	4621      	mov	r1, r4
 801638e:	4648      	mov	r0, r9
 8016390:	f7fe f8b8 	bl	8014504 <_Bfree>
 8016394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016396:	2300      	movs	r3, #0
 8016398:	6013      	str	r3, [r2, #0]
 801639a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801639e:	e725      	b.n	80161ec <__gethex+0x114>
 80163a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d1f2      	bne.n	801638c <__gethex+0x2b4>
 80163a6:	e7df      	b.n	8016368 <__gethex+0x290>
 80163a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d1dc      	bne.n	8016368 <__gethex+0x290>
 80163ae:	e7ed      	b.n	801638c <__gethex+0x2b4>
 80163b0:	080172b4 	.word	0x080172b4
 80163b4:	08017149 	.word	0x08017149
 80163b8:	0801745e 	.word	0x0801745e
 80163bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80163c0:	f1bb 0f00 	cmp.w	fp, #0
 80163c4:	d133      	bne.n	801642e <__gethex+0x356>
 80163c6:	f1b8 0f00 	cmp.w	r8, #0
 80163ca:	d004      	beq.n	80163d6 <__gethex+0x2fe>
 80163cc:	4641      	mov	r1, r8
 80163ce:	4620      	mov	r0, r4
 80163d0:	f7fe fce4 	bl	8014d9c <__any_on>
 80163d4:	4683      	mov	fp, r0
 80163d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80163da:	2301      	movs	r3, #1
 80163dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80163e0:	f008 081f 	and.w	r8, r8, #31
 80163e4:	fa03 f308 	lsl.w	r3, r3, r8
 80163e8:	4213      	tst	r3, r2
 80163ea:	4631      	mov	r1, r6
 80163ec:	4620      	mov	r0, r4
 80163ee:	bf18      	it	ne
 80163f0:	f04b 0b02 	orrne.w	fp, fp, #2
 80163f4:	1bad      	subs	r5, r5, r6
 80163f6:	f7ff fe07 	bl	8016008 <rshift>
 80163fa:	687e      	ldr	r6, [r7, #4]
 80163fc:	f04f 0802 	mov.w	r8, #2
 8016400:	f1bb 0f00 	cmp.w	fp, #0
 8016404:	d04a      	beq.n	801649c <__gethex+0x3c4>
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2b02      	cmp	r3, #2
 801640a:	d016      	beq.n	801643a <__gethex+0x362>
 801640c:	2b03      	cmp	r3, #3
 801640e:	d018      	beq.n	8016442 <__gethex+0x36a>
 8016410:	2b01      	cmp	r3, #1
 8016412:	d109      	bne.n	8016428 <__gethex+0x350>
 8016414:	f01b 0f02 	tst.w	fp, #2
 8016418:	d006      	beq.n	8016428 <__gethex+0x350>
 801641a:	f8da 3000 	ldr.w	r3, [sl]
 801641e:	ea4b 0b03 	orr.w	fp, fp, r3
 8016422:	f01b 0f01 	tst.w	fp, #1
 8016426:	d10f      	bne.n	8016448 <__gethex+0x370>
 8016428:	f048 0810 	orr.w	r8, r8, #16
 801642c:	e036      	b.n	801649c <__gethex+0x3c4>
 801642e:	f04f 0b01 	mov.w	fp, #1
 8016432:	e7d0      	b.n	80163d6 <__gethex+0x2fe>
 8016434:	f04f 0801 	mov.w	r8, #1
 8016438:	e7e2      	b.n	8016400 <__gethex+0x328>
 801643a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801643c:	f1c3 0301 	rsb	r3, r3, #1
 8016440:	930f      	str	r3, [sp, #60]	; 0x3c
 8016442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016444:	2b00      	cmp	r3, #0
 8016446:	d0ef      	beq.n	8016428 <__gethex+0x350>
 8016448:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801644c:	f104 0214 	add.w	r2, r4, #20
 8016450:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016454:	9301      	str	r3, [sp, #4]
 8016456:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801645a:	2300      	movs	r3, #0
 801645c:	4694      	mov	ip, r2
 801645e:	f852 1b04 	ldr.w	r1, [r2], #4
 8016462:	f1b1 3fff 	cmp.w	r1, #4294967295
 8016466:	d01e      	beq.n	80164a6 <__gethex+0x3ce>
 8016468:	3101      	adds	r1, #1
 801646a:	f8cc 1000 	str.w	r1, [ip]
 801646e:	f1b8 0f02 	cmp.w	r8, #2
 8016472:	f104 0214 	add.w	r2, r4, #20
 8016476:	d13d      	bne.n	80164f4 <__gethex+0x41c>
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	3b01      	subs	r3, #1
 801647c:	42ab      	cmp	r3, r5
 801647e:	d10b      	bne.n	8016498 <__gethex+0x3c0>
 8016480:	1169      	asrs	r1, r5, #5
 8016482:	2301      	movs	r3, #1
 8016484:	f005 051f 	and.w	r5, r5, #31
 8016488:	fa03 f505 	lsl.w	r5, r3, r5
 801648c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016490:	421d      	tst	r5, r3
 8016492:	bf18      	it	ne
 8016494:	f04f 0801 	movne.w	r8, #1
 8016498:	f048 0820 	orr.w	r8, r8, #32
 801649c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801649e:	601c      	str	r4, [r3, #0]
 80164a0:	9b02      	ldr	r3, [sp, #8]
 80164a2:	601e      	str	r6, [r3, #0]
 80164a4:	e6a2      	b.n	80161ec <__gethex+0x114>
 80164a6:	4290      	cmp	r0, r2
 80164a8:	f842 3c04 	str.w	r3, [r2, #-4]
 80164ac:	d8d6      	bhi.n	801645c <__gethex+0x384>
 80164ae:	68a2      	ldr	r2, [r4, #8]
 80164b0:	4593      	cmp	fp, r2
 80164b2:	db17      	blt.n	80164e4 <__gethex+0x40c>
 80164b4:	6861      	ldr	r1, [r4, #4]
 80164b6:	4648      	mov	r0, r9
 80164b8:	3101      	adds	r1, #1
 80164ba:	f7fd ffe3 	bl	8014484 <_Balloc>
 80164be:	4682      	mov	sl, r0
 80164c0:	b918      	cbnz	r0, 80164ca <__gethex+0x3f2>
 80164c2:	4b1b      	ldr	r3, [pc, #108]	; (8016530 <__gethex+0x458>)
 80164c4:	4602      	mov	r2, r0
 80164c6:	2184      	movs	r1, #132	; 0x84
 80164c8:	e6b3      	b.n	8016232 <__gethex+0x15a>
 80164ca:	6922      	ldr	r2, [r4, #16]
 80164cc:	3202      	adds	r2, #2
 80164ce:	f104 010c 	add.w	r1, r4, #12
 80164d2:	0092      	lsls	r2, r2, #2
 80164d4:	300c      	adds	r0, #12
 80164d6:	f7fd f847 	bl	8013568 <memcpy>
 80164da:	4621      	mov	r1, r4
 80164dc:	4648      	mov	r0, r9
 80164de:	f7fe f811 	bl	8014504 <_Bfree>
 80164e2:	4654      	mov	r4, sl
 80164e4:	6922      	ldr	r2, [r4, #16]
 80164e6:	1c51      	adds	r1, r2, #1
 80164e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80164ec:	6121      	str	r1, [r4, #16]
 80164ee:	2101      	movs	r1, #1
 80164f0:	6151      	str	r1, [r2, #20]
 80164f2:	e7bc      	b.n	801646e <__gethex+0x396>
 80164f4:	6921      	ldr	r1, [r4, #16]
 80164f6:	4559      	cmp	r1, fp
 80164f8:	dd0b      	ble.n	8016512 <__gethex+0x43a>
 80164fa:	2101      	movs	r1, #1
 80164fc:	4620      	mov	r0, r4
 80164fe:	f7ff fd83 	bl	8016008 <rshift>
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	3601      	adds	r6, #1
 8016506:	42b3      	cmp	r3, r6
 8016508:	f6ff aedb 	blt.w	80162c2 <__gethex+0x1ea>
 801650c:	f04f 0801 	mov.w	r8, #1
 8016510:	e7c2      	b.n	8016498 <__gethex+0x3c0>
 8016512:	f015 051f 	ands.w	r5, r5, #31
 8016516:	d0f9      	beq.n	801650c <__gethex+0x434>
 8016518:	9b01      	ldr	r3, [sp, #4]
 801651a:	441a      	add	r2, r3
 801651c:	f1c5 0520 	rsb	r5, r5, #32
 8016520:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016524:	f7fe f8a0 	bl	8014668 <__hi0bits>
 8016528:	42a8      	cmp	r0, r5
 801652a:	dbe6      	blt.n	80164fa <__gethex+0x422>
 801652c:	e7ee      	b.n	801650c <__gethex+0x434>
 801652e:	bf00      	nop
 8016530:	08017149 	.word	0x08017149

08016534 <L_shift>:
 8016534:	f1c2 0208 	rsb	r2, r2, #8
 8016538:	0092      	lsls	r2, r2, #2
 801653a:	b570      	push	{r4, r5, r6, lr}
 801653c:	f1c2 0620 	rsb	r6, r2, #32
 8016540:	6843      	ldr	r3, [r0, #4]
 8016542:	6804      	ldr	r4, [r0, #0]
 8016544:	fa03 f506 	lsl.w	r5, r3, r6
 8016548:	432c      	orrs	r4, r5
 801654a:	40d3      	lsrs	r3, r2
 801654c:	6004      	str	r4, [r0, #0]
 801654e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016552:	4288      	cmp	r0, r1
 8016554:	d3f4      	bcc.n	8016540 <L_shift+0xc>
 8016556:	bd70      	pop	{r4, r5, r6, pc}

08016558 <__match>:
 8016558:	b530      	push	{r4, r5, lr}
 801655a:	6803      	ldr	r3, [r0, #0]
 801655c:	3301      	adds	r3, #1
 801655e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016562:	b914      	cbnz	r4, 801656a <__match+0x12>
 8016564:	6003      	str	r3, [r0, #0]
 8016566:	2001      	movs	r0, #1
 8016568:	bd30      	pop	{r4, r5, pc}
 801656a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801656e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016572:	2d19      	cmp	r5, #25
 8016574:	bf98      	it	ls
 8016576:	3220      	addls	r2, #32
 8016578:	42a2      	cmp	r2, r4
 801657a:	d0f0      	beq.n	801655e <__match+0x6>
 801657c:	2000      	movs	r0, #0
 801657e:	e7f3      	b.n	8016568 <__match+0x10>

08016580 <__hexnan>:
 8016580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	680b      	ldr	r3, [r1, #0]
 8016586:	6801      	ldr	r1, [r0, #0]
 8016588:	115e      	asrs	r6, r3, #5
 801658a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801658e:	f013 031f 	ands.w	r3, r3, #31
 8016592:	b087      	sub	sp, #28
 8016594:	bf18      	it	ne
 8016596:	3604      	addne	r6, #4
 8016598:	2500      	movs	r5, #0
 801659a:	1f37      	subs	r7, r6, #4
 801659c:	4682      	mov	sl, r0
 801659e:	4690      	mov	r8, r2
 80165a0:	9301      	str	r3, [sp, #4]
 80165a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80165a6:	46b9      	mov	r9, r7
 80165a8:	463c      	mov	r4, r7
 80165aa:	9502      	str	r5, [sp, #8]
 80165ac:	46ab      	mov	fp, r5
 80165ae:	784a      	ldrb	r2, [r1, #1]
 80165b0:	1c4b      	adds	r3, r1, #1
 80165b2:	9303      	str	r3, [sp, #12]
 80165b4:	b342      	cbz	r2, 8016608 <__hexnan+0x88>
 80165b6:	4610      	mov	r0, r2
 80165b8:	9105      	str	r1, [sp, #20]
 80165ba:	9204      	str	r2, [sp, #16]
 80165bc:	f7ff fd76 	bl	80160ac <__hexdig_fun>
 80165c0:	2800      	cmp	r0, #0
 80165c2:	d14f      	bne.n	8016664 <__hexnan+0xe4>
 80165c4:	9a04      	ldr	r2, [sp, #16]
 80165c6:	9905      	ldr	r1, [sp, #20]
 80165c8:	2a20      	cmp	r2, #32
 80165ca:	d818      	bhi.n	80165fe <__hexnan+0x7e>
 80165cc:	9b02      	ldr	r3, [sp, #8]
 80165ce:	459b      	cmp	fp, r3
 80165d0:	dd13      	ble.n	80165fa <__hexnan+0x7a>
 80165d2:	454c      	cmp	r4, r9
 80165d4:	d206      	bcs.n	80165e4 <__hexnan+0x64>
 80165d6:	2d07      	cmp	r5, #7
 80165d8:	dc04      	bgt.n	80165e4 <__hexnan+0x64>
 80165da:	462a      	mov	r2, r5
 80165dc:	4649      	mov	r1, r9
 80165de:	4620      	mov	r0, r4
 80165e0:	f7ff ffa8 	bl	8016534 <L_shift>
 80165e4:	4544      	cmp	r4, r8
 80165e6:	d950      	bls.n	801668a <__hexnan+0x10a>
 80165e8:	2300      	movs	r3, #0
 80165ea:	f1a4 0904 	sub.w	r9, r4, #4
 80165ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80165f2:	f8cd b008 	str.w	fp, [sp, #8]
 80165f6:	464c      	mov	r4, r9
 80165f8:	461d      	mov	r5, r3
 80165fa:	9903      	ldr	r1, [sp, #12]
 80165fc:	e7d7      	b.n	80165ae <__hexnan+0x2e>
 80165fe:	2a29      	cmp	r2, #41	; 0x29
 8016600:	d155      	bne.n	80166ae <__hexnan+0x12e>
 8016602:	3102      	adds	r1, #2
 8016604:	f8ca 1000 	str.w	r1, [sl]
 8016608:	f1bb 0f00 	cmp.w	fp, #0
 801660c:	d04f      	beq.n	80166ae <__hexnan+0x12e>
 801660e:	454c      	cmp	r4, r9
 8016610:	d206      	bcs.n	8016620 <__hexnan+0xa0>
 8016612:	2d07      	cmp	r5, #7
 8016614:	dc04      	bgt.n	8016620 <__hexnan+0xa0>
 8016616:	462a      	mov	r2, r5
 8016618:	4649      	mov	r1, r9
 801661a:	4620      	mov	r0, r4
 801661c:	f7ff ff8a 	bl	8016534 <L_shift>
 8016620:	4544      	cmp	r4, r8
 8016622:	d934      	bls.n	801668e <__hexnan+0x10e>
 8016624:	f1a8 0204 	sub.w	r2, r8, #4
 8016628:	4623      	mov	r3, r4
 801662a:	f853 1b04 	ldr.w	r1, [r3], #4
 801662e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016632:	429f      	cmp	r7, r3
 8016634:	d2f9      	bcs.n	801662a <__hexnan+0xaa>
 8016636:	1b3b      	subs	r3, r7, r4
 8016638:	f023 0303 	bic.w	r3, r3, #3
 801663c:	3304      	adds	r3, #4
 801663e:	3e03      	subs	r6, #3
 8016640:	3401      	adds	r4, #1
 8016642:	42a6      	cmp	r6, r4
 8016644:	bf38      	it	cc
 8016646:	2304      	movcc	r3, #4
 8016648:	4443      	add	r3, r8
 801664a:	2200      	movs	r2, #0
 801664c:	f843 2b04 	str.w	r2, [r3], #4
 8016650:	429f      	cmp	r7, r3
 8016652:	d2fb      	bcs.n	801664c <__hexnan+0xcc>
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	b91b      	cbnz	r3, 8016660 <__hexnan+0xe0>
 8016658:	4547      	cmp	r7, r8
 801665a:	d126      	bne.n	80166aa <__hexnan+0x12a>
 801665c:	2301      	movs	r3, #1
 801665e:	603b      	str	r3, [r7, #0]
 8016660:	2005      	movs	r0, #5
 8016662:	e025      	b.n	80166b0 <__hexnan+0x130>
 8016664:	3501      	adds	r5, #1
 8016666:	2d08      	cmp	r5, #8
 8016668:	f10b 0b01 	add.w	fp, fp, #1
 801666c:	dd06      	ble.n	801667c <__hexnan+0xfc>
 801666e:	4544      	cmp	r4, r8
 8016670:	d9c3      	bls.n	80165fa <__hexnan+0x7a>
 8016672:	2300      	movs	r3, #0
 8016674:	f844 3c04 	str.w	r3, [r4, #-4]
 8016678:	2501      	movs	r5, #1
 801667a:	3c04      	subs	r4, #4
 801667c:	6822      	ldr	r2, [r4, #0]
 801667e:	f000 000f 	and.w	r0, r0, #15
 8016682:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016686:	6020      	str	r0, [r4, #0]
 8016688:	e7b7      	b.n	80165fa <__hexnan+0x7a>
 801668a:	2508      	movs	r5, #8
 801668c:	e7b5      	b.n	80165fa <__hexnan+0x7a>
 801668e:	9b01      	ldr	r3, [sp, #4]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d0df      	beq.n	8016654 <__hexnan+0xd4>
 8016694:	f1c3 0320 	rsb	r3, r3, #32
 8016698:	f04f 32ff 	mov.w	r2, #4294967295
 801669c:	40da      	lsrs	r2, r3
 801669e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80166a2:	4013      	ands	r3, r2
 80166a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80166a8:	e7d4      	b.n	8016654 <__hexnan+0xd4>
 80166aa:	3f04      	subs	r7, #4
 80166ac:	e7d2      	b.n	8016654 <__hexnan+0xd4>
 80166ae:	2004      	movs	r0, #4
 80166b0:	b007      	add	sp, #28
 80166b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166b6 <__ascii_mbtowc>:
 80166b6:	b082      	sub	sp, #8
 80166b8:	b901      	cbnz	r1, 80166bc <__ascii_mbtowc+0x6>
 80166ba:	a901      	add	r1, sp, #4
 80166bc:	b142      	cbz	r2, 80166d0 <__ascii_mbtowc+0x1a>
 80166be:	b14b      	cbz	r3, 80166d4 <__ascii_mbtowc+0x1e>
 80166c0:	7813      	ldrb	r3, [r2, #0]
 80166c2:	600b      	str	r3, [r1, #0]
 80166c4:	7812      	ldrb	r2, [r2, #0]
 80166c6:	1e10      	subs	r0, r2, #0
 80166c8:	bf18      	it	ne
 80166ca:	2001      	movne	r0, #1
 80166cc:	b002      	add	sp, #8
 80166ce:	4770      	bx	lr
 80166d0:	4610      	mov	r0, r2
 80166d2:	e7fb      	b.n	80166cc <__ascii_mbtowc+0x16>
 80166d4:	f06f 0001 	mvn.w	r0, #1
 80166d8:	e7f8      	b.n	80166cc <__ascii_mbtowc+0x16>

080166da <_realloc_r>:
 80166da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166de:	4680      	mov	r8, r0
 80166e0:	4614      	mov	r4, r2
 80166e2:	460e      	mov	r6, r1
 80166e4:	b921      	cbnz	r1, 80166f0 <_realloc_r+0x16>
 80166e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166ea:	4611      	mov	r1, r2
 80166ec:	f7fd be3e 	b.w	801436c <_malloc_r>
 80166f0:	b92a      	cbnz	r2, 80166fe <_realloc_r+0x24>
 80166f2:	f7fd fdc7 	bl	8014284 <_free_r>
 80166f6:	4625      	mov	r5, r4
 80166f8:	4628      	mov	r0, r5
 80166fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fe:	f000 f842 	bl	8016786 <_malloc_usable_size_r>
 8016702:	4284      	cmp	r4, r0
 8016704:	4607      	mov	r7, r0
 8016706:	d802      	bhi.n	801670e <_realloc_r+0x34>
 8016708:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801670c:	d812      	bhi.n	8016734 <_realloc_r+0x5a>
 801670e:	4621      	mov	r1, r4
 8016710:	4640      	mov	r0, r8
 8016712:	f7fd fe2b 	bl	801436c <_malloc_r>
 8016716:	4605      	mov	r5, r0
 8016718:	2800      	cmp	r0, #0
 801671a:	d0ed      	beq.n	80166f8 <_realloc_r+0x1e>
 801671c:	42bc      	cmp	r4, r7
 801671e:	4622      	mov	r2, r4
 8016720:	4631      	mov	r1, r6
 8016722:	bf28      	it	cs
 8016724:	463a      	movcs	r2, r7
 8016726:	f7fc ff1f 	bl	8013568 <memcpy>
 801672a:	4631      	mov	r1, r6
 801672c:	4640      	mov	r0, r8
 801672e:	f7fd fda9 	bl	8014284 <_free_r>
 8016732:	e7e1      	b.n	80166f8 <_realloc_r+0x1e>
 8016734:	4635      	mov	r5, r6
 8016736:	e7df      	b.n	80166f8 <_realloc_r+0x1e>

08016738 <__ascii_wctomb>:
 8016738:	b149      	cbz	r1, 801674e <__ascii_wctomb+0x16>
 801673a:	2aff      	cmp	r2, #255	; 0xff
 801673c:	bf85      	ittet	hi
 801673e:	238a      	movhi	r3, #138	; 0x8a
 8016740:	6003      	strhi	r3, [r0, #0]
 8016742:	700a      	strbls	r2, [r1, #0]
 8016744:	f04f 30ff 	movhi.w	r0, #4294967295
 8016748:	bf98      	it	ls
 801674a:	2001      	movls	r0, #1
 801674c:	4770      	bx	lr
 801674e:	4608      	mov	r0, r1
 8016750:	4770      	bx	lr
	...

08016754 <fiprintf>:
 8016754:	b40e      	push	{r1, r2, r3}
 8016756:	b503      	push	{r0, r1, lr}
 8016758:	4601      	mov	r1, r0
 801675a:	ab03      	add	r3, sp, #12
 801675c:	4805      	ldr	r0, [pc, #20]	; (8016774 <fiprintf+0x20>)
 801675e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016762:	6800      	ldr	r0, [r0, #0]
 8016764:	9301      	str	r3, [sp, #4]
 8016766:	f000 f83f 	bl	80167e8 <_vfiprintf_r>
 801676a:	b002      	add	sp, #8
 801676c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016770:	b003      	add	sp, #12
 8016772:	4770      	bx	lr
 8016774:	20000164 	.word	0x20000164

08016778 <abort>:
 8016778:	b508      	push	{r3, lr}
 801677a:	2006      	movs	r0, #6
 801677c:	f000 fa0c 	bl	8016b98 <raise>
 8016780:	2001      	movs	r0, #1
 8016782:	f7ed fa67 	bl	8003c54 <_exit>

08016786 <_malloc_usable_size_r>:
 8016786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801678a:	1f18      	subs	r0, r3, #4
 801678c:	2b00      	cmp	r3, #0
 801678e:	bfbc      	itt	lt
 8016790:	580b      	ldrlt	r3, [r1, r0]
 8016792:	18c0      	addlt	r0, r0, r3
 8016794:	4770      	bx	lr

08016796 <__sfputc_r>:
 8016796:	6893      	ldr	r3, [r2, #8]
 8016798:	3b01      	subs	r3, #1
 801679a:	2b00      	cmp	r3, #0
 801679c:	b410      	push	{r4}
 801679e:	6093      	str	r3, [r2, #8]
 80167a0:	da08      	bge.n	80167b4 <__sfputc_r+0x1e>
 80167a2:	6994      	ldr	r4, [r2, #24]
 80167a4:	42a3      	cmp	r3, r4
 80167a6:	db01      	blt.n	80167ac <__sfputc_r+0x16>
 80167a8:	290a      	cmp	r1, #10
 80167aa:	d103      	bne.n	80167b4 <__sfputc_r+0x1e>
 80167ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167b0:	f000 b934 	b.w	8016a1c <__swbuf_r>
 80167b4:	6813      	ldr	r3, [r2, #0]
 80167b6:	1c58      	adds	r0, r3, #1
 80167b8:	6010      	str	r0, [r2, #0]
 80167ba:	7019      	strb	r1, [r3, #0]
 80167bc:	4608      	mov	r0, r1
 80167be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167c2:	4770      	bx	lr

080167c4 <__sfputs_r>:
 80167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c6:	4606      	mov	r6, r0
 80167c8:	460f      	mov	r7, r1
 80167ca:	4614      	mov	r4, r2
 80167cc:	18d5      	adds	r5, r2, r3
 80167ce:	42ac      	cmp	r4, r5
 80167d0:	d101      	bne.n	80167d6 <__sfputs_r+0x12>
 80167d2:	2000      	movs	r0, #0
 80167d4:	e007      	b.n	80167e6 <__sfputs_r+0x22>
 80167d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167da:	463a      	mov	r2, r7
 80167dc:	4630      	mov	r0, r6
 80167de:	f7ff ffda 	bl	8016796 <__sfputc_r>
 80167e2:	1c43      	adds	r3, r0, #1
 80167e4:	d1f3      	bne.n	80167ce <__sfputs_r+0xa>
 80167e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167e8 <_vfiprintf_r>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	460d      	mov	r5, r1
 80167ee:	b09d      	sub	sp, #116	; 0x74
 80167f0:	4614      	mov	r4, r2
 80167f2:	4698      	mov	r8, r3
 80167f4:	4606      	mov	r6, r0
 80167f6:	b118      	cbz	r0, 8016800 <_vfiprintf_r+0x18>
 80167f8:	6a03      	ldr	r3, [r0, #32]
 80167fa:	b90b      	cbnz	r3, 8016800 <_vfiprintf_r+0x18>
 80167fc:	f7fc fd68 	bl	80132d0 <__sinit>
 8016800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016802:	07d9      	lsls	r1, r3, #31
 8016804:	d405      	bmi.n	8016812 <_vfiprintf_r+0x2a>
 8016806:	89ab      	ldrh	r3, [r5, #12]
 8016808:	059a      	lsls	r2, r3, #22
 801680a:	d402      	bmi.n	8016812 <_vfiprintf_r+0x2a>
 801680c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801680e:	f7fc fea9 	bl	8013564 <__retarget_lock_acquire_recursive>
 8016812:	89ab      	ldrh	r3, [r5, #12]
 8016814:	071b      	lsls	r3, r3, #28
 8016816:	d501      	bpl.n	801681c <_vfiprintf_r+0x34>
 8016818:	692b      	ldr	r3, [r5, #16]
 801681a:	b99b      	cbnz	r3, 8016844 <_vfiprintf_r+0x5c>
 801681c:	4629      	mov	r1, r5
 801681e:	4630      	mov	r0, r6
 8016820:	f000 f93a 	bl	8016a98 <__swsetup_r>
 8016824:	b170      	cbz	r0, 8016844 <_vfiprintf_r+0x5c>
 8016826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016828:	07dc      	lsls	r4, r3, #31
 801682a:	d504      	bpl.n	8016836 <_vfiprintf_r+0x4e>
 801682c:	f04f 30ff 	mov.w	r0, #4294967295
 8016830:	b01d      	add	sp, #116	; 0x74
 8016832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016836:	89ab      	ldrh	r3, [r5, #12]
 8016838:	0598      	lsls	r0, r3, #22
 801683a:	d4f7      	bmi.n	801682c <_vfiprintf_r+0x44>
 801683c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801683e:	f7fc fe92 	bl	8013566 <__retarget_lock_release_recursive>
 8016842:	e7f3      	b.n	801682c <_vfiprintf_r+0x44>
 8016844:	2300      	movs	r3, #0
 8016846:	9309      	str	r3, [sp, #36]	; 0x24
 8016848:	2320      	movs	r3, #32
 801684a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801684e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016852:	2330      	movs	r3, #48	; 0x30
 8016854:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016a08 <_vfiprintf_r+0x220>
 8016858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801685c:	f04f 0901 	mov.w	r9, #1
 8016860:	4623      	mov	r3, r4
 8016862:	469a      	mov	sl, r3
 8016864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016868:	b10a      	cbz	r2, 801686e <_vfiprintf_r+0x86>
 801686a:	2a25      	cmp	r2, #37	; 0x25
 801686c:	d1f9      	bne.n	8016862 <_vfiprintf_r+0x7a>
 801686e:	ebba 0b04 	subs.w	fp, sl, r4
 8016872:	d00b      	beq.n	801688c <_vfiprintf_r+0xa4>
 8016874:	465b      	mov	r3, fp
 8016876:	4622      	mov	r2, r4
 8016878:	4629      	mov	r1, r5
 801687a:	4630      	mov	r0, r6
 801687c:	f7ff ffa2 	bl	80167c4 <__sfputs_r>
 8016880:	3001      	adds	r0, #1
 8016882:	f000 80a9 	beq.w	80169d8 <_vfiprintf_r+0x1f0>
 8016886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016888:	445a      	add	r2, fp
 801688a:	9209      	str	r2, [sp, #36]	; 0x24
 801688c:	f89a 3000 	ldrb.w	r3, [sl]
 8016890:	2b00      	cmp	r3, #0
 8016892:	f000 80a1 	beq.w	80169d8 <_vfiprintf_r+0x1f0>
 8016896:	2300      	movs	r3, #0
 8016898:	f04f 32ff 	mov.w	r2, #4294967295
 801689c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168a0:	f10a 0a01 	add.w	sl, sl, #1
 80168a4:	9304      	str	r3, [sp, #16]
 80168a6:	9307      	str	r3, [sp, #28]
 80168a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168ac:	931a      	str	r3, [sp, #104]	; 0x68
 80168ae:	4654      	mov	r4, sl
 80168b0:	2205      	movs	r2, #5
 80168b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168b6:	4854      	ldr	r0, [pc, #336]	; (8016a08 <_vfiprintf_r+0x220>)
 80168b8:	f7e9 fc8a 	bl	80001d0 <memchr>
 80168bc:	9a04      	ldr	r2, [sp, #16]
 80168be:	b9d8      	cbnz	r0, 80168f8 <_vfiprintf_r+0x110>
 80168c0:	06d1      	lsls	r1, r2, #27
 80168c2:	bf44      	itt	mi
 80168c4:	2320      	movmi	r3, #32
 80168c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168ca:	0713      	lsls	r3, r2, #28
 80168cc:	bf44      	itt	mi
 80168ce:	232b      	movmi	r3, #43	; 0x2b
 80168d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168d4:	f89a 3000 	ldrb.w	r3, [sl]
 80168d8:	2b2a      	cmp	r3, #42	; 0x2a
 80168da:	d015      	beq.n	8016908 <_vfiprintf_r+0x120>
 80168dc:	9a07      	ldr	r2, [sp, #28]
 80168de:	4654      	mov	r4, sl
 80168e0:	2000      	movs	r0, #0
 80168e2:	f04f 0c0a 	mov.w	ip, #10
 80168e6:	4621      	mov	r1, r4
 80168e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168ec:	3b30      	subs	r3, #48	; 0x30
 80168ee:	2b09      	cmp	r3, #9
 80168f0:	d94d      	bls.n	801698e <_vfiprintf_r+0x1a6>
 80168f2:	b1b0      	cbz	r0, 8016922 <_vfiprintf_r+0x13a>
 80168f4:	9207      	str	r2, [sp, #28]
 80168f6:	e014      	b.n	8016922 <_vfiprintf_r+0x13a>
 80168f8:	eba0 0308 	sub.w	r3, r0, r8
 80168fc:	fa09 f303 	lsl.w	r3, r9, r3
 8016900:	4313      	orrs	r3, r2
 8016902:	9304      	str	r3, [sp, #16]
 8016904:	46a2      	mov	sl, r4
 8016906:	e7d2      	b.n	80168ae <_vfiprintf_r+0xc6>
 8016908:	9b03      	ldr	r3, [sp, #12]
 801690a:	1d19      	adds	r1, r3, #4
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	9103      	str	r1, [sp, #12]
 8016910:	2b00      	cmp	r3, #0
 8016912:	bfbb      	ittet	lt
 8016914:	425b      	neglt	r3, r3
 8016916:	f042 0202 	orrlt.w	r2, r2, #2
 801691a:	9307      	strge	r3, [sp, #28]
 801691c:	9307      	strlt	r3, [sp, #28]
 801691e:	bfb8      	it	lt
 8016920:	9204      	strlt	r2, [sp, #16]
 8016922:	7823      	ldrb	r3, [r4, #0]
 8016924:	2b2e      	cmp	r3, #46	; 0x2e
 8016926:	d10c      	bne.n	8016942 <_vfiprintf_r+0x15a>
 8016928:	7863      	ldrb	r3, [r4, #1]
 801692a:	2b2a      	cmp	r3, #42	; 0x2a
 801692c:	d134      	bne.n	8016998 <_vfiprintf_r+0x1b0>
 801692e:	9b03      	ldr	r3, [sp, #12]
 8016930:	1d1a      	adds	r2, r3, #4
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	9203      	str	r2, [sp, #12]
 8016936:	2b00      	cmp	r3, #0
 8016938:	bfb8      	it	lt
 801693a:	f04f 33ff 	movlt.w	r3, #4294967295
 801693e:	3402      	adds	r4, #2
 8016940:	9305      	str	r3, [sp, #20]
 8016942:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016a18 <_vfiprintf_r+0x230>
 8016946:	7821      	ldrb	r1, [r4, #0]
 8016948:	2203      	movs	r2, #3
 801694a:	4650      	mov	r0, sl
 801694c:	f7e9 fc40 	bl	80001d0 <memchr>
 8016950:	b138      	cbz	r0, 8016962 <_vfiprintf_r+0x17a>
 8016952:	9b04      	ldr	r3, [sp, #16]
 8016954:	eba0 000a 	sub.w	r0, r0, sl
 8016958:	2240      	movs	r2, #64	; 0x40
 801695a:	4082      	lsls	r2, r0
 801695c:	4313      	orrs	r3, r2
 801695e:	3401      	adds	r4, #1
 8016960:	9304      	str	r3, [sp, #16]
 8016962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016966:	4829      	ldr	r0, [pc, #164]	; (8016a0c <_vfiprintf_r+0x224>)
 8016968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801696c:	2206      	movs	r2, #6
 801696e:	f7e9 fc2f 	bl	80001d0 <memchr>
 8016972:	2800      	cmp	r0, #0
 8016974:	d03f      	beq.n	80169f6 <_vfiprintf_r+0x20e>
 8016976:	4b26      	ldr	r3, [pc, #152]	; (8016a10 <_vfiprintf_r+0x228>)
 8016978:	bb1b      	cbnz	r3, 80169c2 <_vfiprintf_r+0x1da>
 801697a:	9b03      	ldr	r3, [sp, #12]
 801697c:	3307      	adds	r3, #7
 801697e:	f023 0307 	bic.w	r3, r3, #7
 8016982:	3308      	adds	r3, #8
 8016984:	9303      	str	r3, [sp, #12]
 8016986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016988:	443b      	add	r3, r7
 801698a:	9309      	str	r3, [sp, #36]	; 0x24
 801698c:	e768      	b.n	8016860 <_vfiprintf_r+0x78>
 801698e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016992:	460c      	mov	r4, r1
 8016994:	2001      	movs	r0, #1
 8016996:	e7a6      	b.n	80168e6 <_vfiprintf_r+0xfe>
 8016998:	2300      	movs	r3, #0
 801699a:	3401      	adds	r4, #1
 801699c:	9305      	str	r3, [sp, #20]
 801699e:	4619      	mov	r1, r3
 80169a0:	f04f 0c0a 	mov.w	ip, #10
 80169a4:	4620      	mov	r0, r4
 80169a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169aa:	3a30      	subs	r2, #48	; 0x30
 80169ac:	2a09      	cmp	r2, #9
 80169ae:	d903      	bls.n	80169b8 <_vfiprintf_r+0x1d0>
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d0c6      	beq.n	8016942 <_vfiprintf_r+0x15a>
 80169b4:	9105      	str	r1, [sp, #20]
 80169b6:	e7c4      	b.n	8016942 <_vfiprintf_r+0x15a>
 80169b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80169bc:	4604      	mov	r4, r0
 80169be:	2301      	movs	r3, #1
 80169c0:	e7f0      	b.n	80169a4 <_vfiprintf_r+0x1bc>
 80169c2:	ab03      	add	r3, sp, #12
 80169c4:	9300      	str	r3, [sp, #0]
 80169c6:	462a      	mov	r2, r5
 80169c8:	4b12      	ldr	r3, [pc, #72]	; (8016a14 <_vfiprintf_r+0x22c>)
 80169ca:	a904      	add	r1, sp, #16
 80169cc:	4630      	mov	r0, r6
 80169ce:	f7fb fe2f 	bl	8012630 <_printf_float>
 80169d2:	4607      	mov	r7, r0
 80169d4:	1c78      	adds	r0, r7, #1
 80169d6:	d1d6      	bne.n	8016986 <_vfiprintf_r+0x19e>
 80169d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169da:	07d9      	lsls	r1, r3, #31
 80169dc:	d405      	bmi.n	80169ea <_vfiprintf_r+0x202>
 80169de:	89ab      	ldrh	r3, [r5, #12]
 80169e0:	059a      	lsls	r2, r3, #22
 80169e2:	d402      	bmi.n	80169ea <_vfiprintf_r+0x202>
 80169e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169e6:	f7fc fdbe 	bl	8013566 <__retarget_lock_release_recursive>
 80169ea:	89ab      	ldrh	r3, [r5, #12]
 80169ec:	065b      	lsls	r3, r3, #25
 80169ee:	f53f af1d 	bmi.w	801682c <_vfiprintf_r+0x44>
 80169f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169f4:	e71c      	b.n	8016830 <_vfiprintf_r+0x48>
 80169f6:	ab03      	add	r3, sp, #12
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	462a      	mov	r2, r5
 80169fc:	4b05      	ldr	r3, [pc, #20]	; (8016a14 <_vfiprintf_r+0x22c>)
 80169fe:	a904      	add	r1, sp, #16
 8016a00:	4630      	mov	r0, r6
 8016a02:	f7fc f8b9 	bl	8012b78 <_printf_i>
 8016a06:	e7e4      	b.n	80169d2 <_vfiprintf_r+0x1ea>
 8016a08:	08017409 	.word	0x08017409
 8016a0c:	08017413 	.word	0x08017413
 8016a10:	08012631 	.word	0x08012631
 8016a14:	080167c5 	.word	0x080167c5
 8016a18:	0801740f 	.word	0x0801740f

08016a1c <__swbuf_r>:
 8016a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1e:	460e      	mov	r6, r1
 8016a20:	4614      	mov	r4, r2
 8016a22:	4605      	mov	r5, r0
 8016a24:	b118      	cbz	r0, 8016a2e <__swbuf_r+0x12>
 8016a26:	6a03      	ldr	r3, [r0, #32]
 8016a28:	b90b      	cbnz	r3, 8016a2e <__swbuf_r+0x12>
 8016a2a:	f7fc fc51 	bl	80132d0 <__sinit>
 8016a2e:	69a3      	ldr	r3, [r4, #24]
 8016a30:	60a3      	str	r3, [r4, #8]
 8016a32:	89a3      	ldrh	r3, [r4, #12]
 8016a34:	071a      	lsls	r2, r3, #28
 8016a36:	d525      	bpl.n	8016a84 <__swbuf_r+0x68>
 8016a38:	6923      	ldr	r3, [r4, #16]
 8016a3a:	b31b      	cbz	r3, 8016a84 <__swbuf_r+0x68>
 8016a3c:	6823      	ldr	r3, [r4, #0]
 8016a3e:	6922      	ldr	r2, [r4, #16]
 8016a40:	1a98      	subs	r0, r3, r2
 8016a42:	6963      	ldr	r3, [r4, #20]
 8016a44:	b2f6      	uxtb	r6, r6
 8016a46:	4283      	cmp	r3, r0
 8016a48:	4637      	mov	r7, r6
 8016a4a:	dc04      	bgt.n	8016a56 <__swbuf_r+0x3a>
 8016a4c:	4621      	mov	r1, r4
 8016a4e:	4628      	mov	r0, r5
 8016a50:	f7ff fa3a 	bl	8015ec8 <_fflush_r>
 8016a54:	b9e0      	cbnz	r0, 8016a90 <__swbuf_r+0x74>
 8016a56:	68a3      	ldr	r3, [r4, #8]
 8016a58:	3b01      	subs	r3, #1
 8016a5a:	60a3      	str	r3, [r4, #8]
 8016a5c:	6823      	ldr	r3, [r4, #0]
 8016a5e:	1c5a      	adds	r2, r3, #1
 8016a60:	6022      	str	r2, [r4, #0]
 8016a62:	701e      	strb	r6, [r3, #0]
 8016a64:	6962      	ldr	r2, [r4, #20]
 8016a66:	1c43      	adds	r3, r0, #1
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d004      	beq.n	8016a76 <__swbuf_r+0x5a>
 8016a6c:	89a3      	ldrh	r3, [r4, #12]
 8016a6e:	07db      	lsls	r3, r3, #31
 8016a70:	d506      	bpl.n	8016a80 <__swbuf_r+0x64>
 8016a72:	2e0a      	cmp	r6, #10
 8016a74:	d104      	bne.n	8016a80 <__swbuf_r+0x64>
 8016a76:	4621      	mov	r1, r4
 8016a78:	4628      	mov	r0, r5
 8016a7a:	f7ff fa25 	bl	8015ec8 <_fflush_r>
 8016a7e:	b938      	cbnz	r0, 8016a90 <__swbuf_r+0x74>
 8016a80:	4638      	mov	r0, r7
 8016a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a84:	4621      	mov	r1, r4
 8016a86:	4628      	mov	r0, r5
 8016a88:	f000 f806 	bl	8016a98 <__swsetup_r>
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	d0d5      	beq.n	8016a3c <__swbuf_r+0x20>
 8016a90:	f04f 37ff 	mov.w	r7, #4294967295
 8016a94:	e7f4      	b.n	8016a80 <__swbuf_r+0x64>
	...

08016a98 <__swsetup_r>:
 8016a98:	b538      	push	{r3, r4, r5, lr}
 8016a9a:	4b2a      	ldr	r3, [pc, #168]	; (8016b44 <__swsetup_r+0xac>)
 8016a9c:	4605      	mov	r5, r0
 8016a9e:	6818      	ldr	r0, [r3, #0]
 8016aa0:	460c      	mov	r4, r1
 8016aa2:	b118      	cbz	r0, 8016aac <__swsetup_r+0x14>
 8016aa4:	6a03      	ldr	r3, [r0, #32]
 8016aa6:	b90b      	cbnz	r3, 8016aac <__swsetup_r+0x14>
 8016aa8:	f7fc fc12 	bl	80132d0 <__sinit>
 8016aac:	89a3      	ldrh	r3, [r4, #12]
 8016aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ab2:	0718      	lsls	r0, r3, #28
 8016ab4:	d422      	bmi.n	8016afc <__swsetup_r+0x64>
 8016ab6:	06d9      	lsls	r1, r3, #27
 8016ab8:	d407      	bmi.n	8016aca <__swsetup_r+0x32>
 8016aba:	2309      	movs	r3, #9
 8016abc:	602b      	str	r3, [r5, #0]
 8016abe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016ac2:	81a3      	strh	r3, [r4, #12]
 8016ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac8:	e034      	b.n	8016b34 <__swsetup_r+0x9c>
 8016aca:	0758      	lsls	r0, r3, #29
 8016acc:	d512      	bpl.n	8016af4 <__swsetup_r+0x5c>
 8016ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ad0:	b141      	cbz	r1, 8016ae4 <__swsetup_r+0x4c>
 8016ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ad6:	4299      	cmp	r1, r3
 8016ad8:	d002      	beq.n	8016ae0 <__swsetup_r+0x48>
 8016ada:	4628      	mov	r0, r5
 8016adc:	f7fd fbd2 	bl	8014284 <_free_r>
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8016ae4:	89a3      	ldrh	r3, [r4, #12]
 8016ae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016aea:	81a3      	strh	r3, [r4, #12]
 8016aec:	2300      	movs	r3, #0
 8016aee:	6063      	str	r3, [r4, #4]
 8016af0:	6923      	ldr	r3, [r4, #16]
 8016af2:	6023      	str	r3, [r4, #0]
 8016af4:	89a3      	ldrh	r3, [r4, #12]
 8016af6:	f043 0308 	orr.w	r3, r3, #8
 8016afa:	81a3      	strh	r3, [r4, #12]
 8016afc:	6923      	ldr	r3, [r4, #16]
 8016afe:	b94b      	cbnz	r3, 8016b14 <__swsetup_r+0x7c>
 8016b00:	89a3      	ldrh	r3, [r4, #12]
 8016b02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b0a:	d003      	beq.n	8016b14 <__swsetup_r+0x7c>
 8016b0c:	4621      	mov	r1, r4
 8016b0e:	4628      	mov	r0, r5
 8016b10:	f000 f884 	bl	8016c1c <__smakebuf_r>
 8016b14:	89a0      	ldrh	r0, [r4, #12]
 8016b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b1a:	f010 0301 	ands.w	r3, r0, #1
 8016b1e:	d00a      	beq.n	8016b36 <__swsetup_r+0x9e>
 8016b20:	2300      	movs	r3, #0
 8016b22:	60a3      	str	r3, [r4, #8]
 8016b24:	6963      	ldr	r3, [r4, #20]
 8016b26:	425b      	negs	r3, r3
 8016b28:	61a3      	str	r3, [r4, #24]
 8016b2a:	6923      	ldr	r3, [r4, #16]
 8016b2c:	b943      	cbnz	r3, 8016b40 <__swsetup_r+0xa8>
 8016b2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016b32:	d1c4      	bne.n	8016abe <__swsetup_r+0x26>
 8016b34:	bd38      	pop	{r3, r4, r5, pc}
 8016b36:	0781      	lsls	r1, r0, #30
 8016b38:	bf58      	it	pl
 8016b3a:	6963      	ldrpl	r3, [r4, #20]
 8016b3c:	60a3      	str	r3, [r4, #8]
 8016b3e:	e7f4      	b.n	8016b2a <__swsetup_r+0x92>
 8016b40:	2000      	movs	r0, #0
 8016b42:	e7f7      	b.n	8016b34 <__swsetup_r+0x9c>
 8016b44:	20000164 	.word	0x20000164

08016b48 <_raise_r>:
 8016b48:	291f      	cmp	r1, #31
 8016b4a:	b538      	push	{r3, r4, r5, lr}
 8016b4c:	4604      	mov	r4, r0
 8016b4e:	460d      	mov	r5, r1
 8016b50:	d904      	bls.n	8016b5c <_raise_r+0x14>
 8016b52:	2316      	movs	r3, #22
 8016b54:	6003      	str	r3, [r0, #0]
 8016b56:	f04f 30ff 	mov.w	r0, #4294967295
 8016b5a:	bd38      	pop	{r3, r4, r5, pc}
 8016b5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016b5e:	b112      	cbz	r2, 8016b66 <_raise_r+0x1e>
 8016b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016b64:	b94b      	cbnz	r3, 8016b7a <_raise_r+0x32>
 8016b66:	4620      	mov	r0, r4
 8016b68:	f000 f830 	bl	8016bcc <_getpid_r>
 8016b6c:	462a      	mov	r2, r5
 8016b6e:	4601      	mov	r1, r0
 8016b70:	4620      	mov	r0, r4
 8016b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b76:	f000 b817 	b.w	8016ba8 <_kill_r>
 8016b7a:	2b01      	cmp	r3, #1
 8016b7c:	d00a      	beq.n	8016b94 <_raise_r+0x4c>
 8016b7e:	1c59      	adds	r1, r3, #1
 8016b80:	d103      	bne.n	8016b8a <_raise_r+0x42>
 8016b82:	2316      	movs	r3, #22
 8016b84:	6003      	str	r3, [r0, #0]
 8016b86:	2001      	movs	r0, #1
 8016b88:	e7e7      	b.n	8016b5a <_raise_r+0x12>
 8016b8a:	2400      	movs	r4, #0
 8016b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016b90:	4628      	mov	r0, r5
 8016b92:	4798      	blx	r3
 8016b94:	2000      	movs	r0, #0
 8016b96:	e7e0      	b.n	8016b5a <_raise_r+0x12>

08016b98 <raise>:
 8016b98:	4b02      	ldr	r3, [pc, #8]	; (8016ba4 <raise+0xc>)
 8016b9a:	4601      	mov	r1, r0
 8016b9c:	6818      	ldr	r0, [r3, #0]
 8016b9e:	f7ff bfd3 	b.w	8016b48 <_raise_r>
 8016ba2:	bf00      	nop
 8016ba4:	20000164 	.word	0x20000164

08016ba8 <_kill_r>:
 8016ba8:	b538      	push	{r3, r4, r5, lr}
 8016baa:	4d07      	ldr	r5, [pc, #28]	; (8016bc8 <_kill_r+0x20>)
 8016bac:	2300      	movs	r3, #0
 8016bae:	4604      	mov	r4, r0
 8016bb0:	4608      	mov	r0, r1
 8016bb2:	4611      	mov	r1, r2
 8016bb4:	602b      	str	r3, [r5, #0]
 8016bb6:	f7ed f83d 	bl	8003c34 <_kill>
 8016bba:	1c43      	adds	r3, r0, #1
 8016bbc:	d102      	bne.n	8016bc4 <_kill_r+0x1c>
 8016bbe:	682b      	ldr	r3, [r5, #0]
 8016bc0:	b103      	cbz	r3, 8016bc4 <_kill_r+0x1c>
 8016bc2:	6023      	str	r3, [r4, #0]
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}
 8016bc6:	bf00      	nop
 8016bc8:	20008ab0 	.word	0x20008ab0

08016bcc <_getpid_r>:
 8016bcc:	f7ed b82a 	b.w	8003c24 <_getpid>

08016bd0 <__swhatbuf_r>:
 8016bd0:	b570      	push	{r4, r5, r6, lr}
 8016bd2:	460c      	mov	r4, r1
 8016bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd8:	2900      	cmp	r1, #0
 8016bda:	b096      	sub	sp, #88	; 0x58
 8016bdc:	4615      	mov	r5, r2
 8016bde:	461e      	mov	r6, r3
 8016be0:	da0d      	bge.n	8016bfe <__swhatbuf_r+0x2e>
 8016be2:	89a3      	ldrh	r3, [r4, #12]
 8016be4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016be8:	f04f 0100 	mov.w	r1, #0
 8016bec:	bf0c      	ite	eq
 8016bee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016bf2:	2340      	movne	r3, #64	; 0x40
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	6031      	str	r1, [r6, #0]
 8016bf8:	602b      	str	r3, [r5, #0]
 8016bfa:	b016      	add	sp, #88	; 0x58
 8016bfc:	bd70      	pop	{r4, r5, r6, pc}
 8016bfe:	466a      	mov	r2, sp
 8016c00:	f000 f848 	bl	8016c94 <_fstat_r>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	dbec      	blt.n	8016be2 <__swhatbuf_r+0x12>
 8016c08:	9901      	ldr	r1, [sp, #4]
 8016c0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016c0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016c12:	4259      	negs	r1, r3
 8016c14:	4159      	adcs	r1, r3
 8016c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c1a:	e7eb      	b.n	8016bf4 <__swhatbuf_r+0x24>

08016c1c <__smakebuf_r>:
 8016c1c:	898b      	ldrh	r3, [r1, #12]
 8016c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c20:	079d      	lsls	r5, r3, #30
 8016c22:	4606      	mov	r6, r0
 8016c24:	460c      	mov	r4, r1
 8016c26:	d507      	bpl.n	8016c38 <__smakebuf_r+0x1c>
 8016c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c2c:	6023      	str	r3, [r4, #0]
 8016c2e:	6123      	str	r3, [r4, #16]
 8016c30:	2301      	movs	r3, #1
 8016c32:	6163      	str	r3, [r4, #20]
 8016c34:	b002      	add	sp, #8
 8016c36:	bd70      	pop	{r4, r5, r6, pc}
 8016c38:	ab01      	add	r3, sp, #4
 8016c3a:	466a      	mov	r2, sp
 8016c3c:	f7ff ffc8 	bl	8016bd0 <__swhatbuf_r>
 8016c40:	9900      	ldr	r1, [sp, #0]
 8016c42:	4605      	mov	r5, r0
 8016c44:	4630      	mov	r0, r6
 8016c46:	f7fd fb91 	bl	801436c <_malloc_r>
 8016c4a:	b948      	cbnz	r0, 8016c60 <__smakebuf_r+0x44>
 8016c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c50:	059a      	lsls	r2, r3, #22
 8016c52:	d4ef      	bmi.n	8016c34 <__smakebuf_r+0x18>
 8016c54:	f023 0303 	bic.w	r3, r3, #3
 8016c58:	f043 0302 	orr.w	r3, r3, #2
 8016c5c:	81a3      	strh	r3, [r4, #12]
 8016c5e:	e7e3      	b.n	8016c28 <__smakebuf_r+0xc>
 8016c60:	89a3      	ldrh	r3, [r4, #12]
 8016c62:	6020      	str	r0, [r4, #0]
 8016c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c68:	81a3      	strh	r3, [r4, #12]
 8016c6a:	9b00      	ldr	r3, [sp, #0]
 8016c6c:	6163      	str	r3, [r4, #20]
 8016c6e:	9b01      	ldr	r3, [sp, #4]
 8016c70:	6120      	str	r0, [r4, #16]
 8016c72:	b15b      	cbz	r3, 8016c8c <__smakebuf_r+0x70>
 8016c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c78:	4630      	mov	r0, r6
 8016c7a:	f000 f81d 	bl	8016cb8 <_isatty_r>
 8016c7e:	b128      	cbz	r0, 8016c8c <__smakebuf_r+0x70>
 8016c80:	89a3      	ldrh	r3, [r4, #12]
 8016c82:	f023 0303 	bic.w	r3, r3, #3
 8016c86:	f043 0301 	orr.w	r3, r3, #1
 8016c8a:	81a3      	strh	r3, [r4, #12]
 8016c8c:	89a3      	ldrh	r3, [r4, #12]
 8016c8e:	431d      	orrs	r5, r3
 8016c90:	81a5      	strh	r5, [r4, #12]
 8016c92:	e7cf      	b.n	8016c34 <__smakebuf_r+0x18>

08016c94 <_fstat_r>:
 8016c94:	b538      	push	{r3, r4, r5, lr}
 8016c96:	4d07      	ldr	r5, [pc, #28]	; (8016cb4 <_fstat_r+0x20>)
 8016c98:	2300      	movs	r3, #0
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	4608      	mov	r0, r1
 8016c9e:	4611      	mov	r1, r2
 8016ca0:	602b      	str	r3, [r5, #0]
 8016ca2:	f7ed f826 	bl	8003cf2 <_fstat>
 8016ca6:	1c43      	adds	r3, r0, #1
 8016ca8:	d102      	bne.n	8016cb0 <_fstat_r+0x1c>
 8016caa:	682b      	ldr	r3, [r5, #0]
 8016cac:	b103      	cbz	r3, 8016cb0 <_fstat_r+0x1c>
 8016cae:	6023      	str	r3, [r4, #0]
 8016cb0:	bd38      	pop	{r3, r4, r5, pc}
 8016cb2:	bf00      	nop
 8016cb4:	20008ab0 	.word	0x20008ab0

08016cb8 <_isatty_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d06      	ldr	r5, [pc, #24]	; (8016cd4 <_isatty_r+0x1c>)
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	602b      	str	r3, [r5, #0]
 8016cc4:	f7ed f825 	bl	8003d12 <_isatty>
 8016cc8:	1c43      	adds	r3, r0, #1
 8016cca:	d102      	bne.n	8016cd2 <_isatty_r+0x1a>
 8016ccc:	682b      	ldr	r3, [r5, #0]
 8016cce:	b103      	cbz	r3, 8016cd2 <_isatty_r+0x1a>
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	20008ab0 	.word	0x20008ab0

08016cd8 <_init>:
 8016cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cda:	bf00      	nop
 8016cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cde:	bc08      	pop	{r3}
 8016ce0:	469e      	mov	lr, r3
 8016ce2:	4770      	bx	lr

08016ce4 <_fini>:
 8016ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce6:	bf00      	nop
 8016ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cea:	bc08      	pop	{r3}
 8016cec:	469e      	mov	lr, r3
 8016cee:	4770      	bx	lr
